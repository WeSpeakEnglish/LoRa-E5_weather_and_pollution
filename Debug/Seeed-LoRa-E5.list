
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e5c8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801e700  0801e700  0002e700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801f5b0  0801f5b0  0002f5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f688  0801f688  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801f688  0801f688  0002f688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f690  0801f690  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801f690  0801f690  0002f690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f698  0801f698  0002f698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801f69c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f14  20000164  0801f800  00030164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002078  0801f800  00032078  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004cdea  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b8a8  00000000  00000000  0007cffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003e88  00000000  00000000  000888a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002fa5  00000000  00000000  0008c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bac7  00000000  00000000  0008f6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d552  00000000  00000000  000bb19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dafb2  00000000  00000000  001086ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000105ec  00000000  00000000  001e36a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001f3c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000164 	.word	0x20000164
 8000154:	00000000 	.word	0x00000000
 8000158:	0801e6e8 	.word	0x0801e6e8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000168 	.word	0x20000168
 8000174:	0801e6e8 	.word	0x0801e6e8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <ZE27_Checksum>:
 */

#include "ZE27_O3.h"


uint8_t ZE27_Checksum(uint8_t *msg, unsigned char ln){
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  //Checksum = (NOT(Byte1+Byte2+Byte3+Byte4+Byte5+Byte6+Byte7)) +1
    for (uint8_t i = 1; i <= ln - 2; i++) {
 8001098:	2301      	movs	r3, #1
 800109a:	73bb      	strb	r3, [r7, #14]
 800109c:	e009      	b.n	80010b2 <ZE27_Checksum+0x2a>
        sum += msg[i];
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4413      	add	r3, r2
 80010aa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 1; i <= ln - 2; i++) {
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73bb      	strb	r3, [r7, #14]
 80010b2:	78fb      	ldrb	r3, [r7, #3]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dcf0      	bgt.n	800109e <ZE27_Checksum+0x16>
    }

    uint8_t checksum = (~sum)+1;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	425b      	negs	r3, r3
 80010c0:	737b      	strb	r3, [r7, #13]
    return checksum;
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <ZE27_parsePPB>:

uint16_t ZE27_parsePPB(uint8_t *msg){
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	if(msg[ZE27_RX_BUFFER_SIZE -1] == ZE27_Checksum(msg, ZE27_RX_BUFFER_SIZE)){
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3308      	adds	r3, #8
 80010da:	781c      	ldrb	r4, [r3, #0]
 80010dc:	2109      	movs	r1, #9
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffd2 	bl	8001088 <ZE27_Checksum>
 80010e4:	4603      	mov	r3, r0
 80010e6:	429c      	cmp	r4, r3
 80010e8:	d10c      	bne.n	8001104 <ZE27_parsePPB+0x36>
		return msg[4]*256 + msg[5];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3305      	adds	r3, #5
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4413      	add	r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	e000      	b.n	8001106 <ZE27_parsePPB+0x38>
	}
 return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800111c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	43db      	mvns	r3, r3
 8001150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001154:	4013      	ands	r3, r2
 8001156:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC_Init+0x94>)
 800116a:	4a24      	ldr	r2, [pc, #144]	; (80011fc <MX_ADC_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_ADC_Init+0x94>)
 8001170:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001174:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC_Init+0x94>)
 800118a:	2204      	movs	r2, #4
 800118c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_ADC_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_ADC_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_ADC_Init+0x94>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_ADC_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_ADC_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_ADC_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_ADC_Init+0x94>)
 80011c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_ADC_Init+0x94>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_ADC_Init+0x94>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_ADC_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_ADC_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_ADC_Init+0x94>)
 80011e6:	f002 fd39 	bl	8003c5c <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80011f0:	f000 fea4 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000180 	.word	0x20000180
 80011fc:	40012400 	.word	0x40012400

08001200 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_ADC_MspInit+0x24>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d103      	bne.n	800121a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f7ff ff7a 	bl	800110e <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012400 	.word	0x40012400

08001228 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_ADC_MspDeInit+0x24>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d103      	bne.n	8001242 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800123a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800123e:	f7ff ff7e 	bl	800113e <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012400 	.word	0x40012400

08001250 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SYS_InitMeasurement+0x14>)
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <SYS_InitMeasurement+0x18>)
 8001258:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000180 	.word	0x20000180
 8001268:	40012400 	.word	0x40012400

0800126c <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <SYS_GetBatteryLevel+0x5c>)
 800127c:	f000 f82a 	bl	80012d4 <ADC_ReadChannels>
 8001280:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	e016      	b.n	80012bc <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <SYS_GetBatteryLevel+0x60>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	4293      	cmp	r3, r2
 8001298:	d00b      	beq.n	80012b2 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <SYS_GetBatteryLevel+0x60>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80012a4:	fb03 f202 	mul.w	r2, r3, r2
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	e004      	b.n	80012bc <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <SYS_GetBatteryLevel+0x64>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	b4002000 	.word	0xb4002000
 80012cc:	1fff75aa 	.word	0x1fff75aa
 80012d0:	004c08d8 	.word	0x004c08d8

080012d4 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012ec:	f7ff ff3a 	bl	8001164 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <ADC_ReadChannels+0x88>)
 80012f2:	f003 fad2 	bl	800489a <HAL_ADCEx_Calibration_Start>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012fc:	f000 fe1e 	bl	8001f3c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <ADC_ReadChannels+0x88>)
 8001314:	f002 ffde 	bl	80042d4 <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800131e:	f000 fe0d 	bl	8001f3c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <ADC_ReadChannels+0x88>)
 8001324:	f002 feba 	bl	800409c <HAL_ADC_Start>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800132e:	f000 fe05 	bl	8001f3c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001332:	f04f 31ff 	mov.w	r1, #4294967295
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <ADC_ReadChannels+0x88>)
 8001338:	f002 ff28 	bl	800418c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <ADC_ReadChannels+0x88>)
 800133e:	f002 fef3 	bl	8004128 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <ADC_ReadChannels+0x88>)
 8001344:	f002 ffb9 	bl	80042ba <HAL_ADC_GetValue>
 8001348:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <ADC_ReadChannels+0x88>)
 800134c:	f002 fe1a 	bl	8003f84 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000180 	.word	0x20000180

08001360 <LL_AHB1_GRP1_EnableClock>:
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4313      	orrs	r3, r2
 8001376:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001394:	2004      	movs	r0, #4
 8001396:	f7ff ffe3 	bl	8001360 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ffe0 	bl	8001360 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	200b      	movs	r0, #11
 80013a6:	f003 fc1e 	bl	8004be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013aa:	200b      	movs	r0, #11
 80013ac:	f003 fc35 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	200c      	movs	r0, #12
 80013b6:	f003 fc16 	bl	8004be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013ba:	200c      	movs	r0, #12
 80013bc:	f003 fc2d 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	203d      	movs	r0, #61	; 0x3d
 80013c6:	f003 fc0e 	bl	8004be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80013ca:	203d      	movs	r0, #61	; 0x3d
 80013cc:	f003 fc25 	bl	8004c1a <HAL_NVIC_EnableIRQ>

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013ea:	d311      	bcc.n	8001410 <FLASH_IF_Write+0x3c>
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <FLASH_IF_Write+0x48>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	029a      	lsls	r2, r3, #10
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <FLASH_IF_Write+0x4c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013fa:	3b01      	subs	r3, #1
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4293      	cmp	r3, r2
 8001400:	d306      	bcc.n	8001410 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f85a 	bl	80014c0 <FLASH_IF_INT_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	1fff75e0 	.word	0x1fff75e0
 8001420:	03fffc00 	.word	0x03fffc00

08001424 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001430:	23ff      	movs	r3, #255	; 0xff
 8001432:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800143a:	d311      	bcc.n	8001460 <FLASH_IF_Read+0x3c>
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <FLASH_IF_Read+0x48>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	029a      	lsls	r2, r3, #10
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <FLASH_IF_Read+0x4c>)
 8001444:	4013      	ands	r3, r2
 8001446:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800144a:	3b01      	subs	r3, #1
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4293      	cmp	r3, r2
 8001450:	d306      	bcc.n	8001460 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f93a 	bl	80016d0 <FLASH_IF_INT_Read>
 800145c:	4603      	mov	r3, r0
 800145e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	1fff75e0 	.word	0x1fff75e0
 8001470:	03fffc00 	.word	0x03fffc00

08001474 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800147e:	23ff      	movs	r3, #255	; 0xff
 8001480:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001488:	d310      	bcc.n	80014ac <FLASH_IF_Erase+0x38>
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <FLASH_IF_Erase+0x44>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	029a      	lsls	r2, r3, #10
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <FLASH_IF_Erase+0x48>)
 8001492:	4013      	ands	r3, r2
 8001494:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001498:	3b01      	subs	r3, #1
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4293      	cmp	r3, r2
 800149e:	d305      	bcc.n	80014ac <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f932 	bl	800170c <FLASH_IF_INT_Erase>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	1fff75e0 	.word	0x1fff75e0
 80014bc:	03fffc00 	.word	0x03fffc00

080014c0 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b090      	sub	sp, #64	; 0x40
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00c      	beq.n	80014fe <FLASH_IF_INT_Write+0x3e>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <FLASH_IF_INT_Write+0x3e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d104      	bne.n	80014fe <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80014fe:	f06f 0305 	mvn.w	r3, #5
 8001502:	e0da      	b.n	80016ba <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001504:	f000 f992 	bl	800182c <FLASH_IF_INT_Clear_Error>
 8001508:	4603      	mov	r3, r0
 800150a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 800150e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80cf 	bne.w	80016b6 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001518:	f004 f868 	bl	80055ec <HAL_FLASH_Unlock>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 80c6 	bne.w	80016b0 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800152a:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <FLASH_IF_INT_Write+0x204>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0299      	lsls	r1, r3, #10
 8001530:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <FLASH_IF_INT_Write+0x208>)
 8001532:	400b      	ands	r3, r1
 8001534:	fbb2 f1f3 	udiv	r1, r2, r3
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	0adb      	lsrs	r3, r3, #11
 8001540:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800154c:	3b01      	subs	r3, #1
 800154e:	4a5d      	ldr	r2, [pc, #372]	; (80016c4 <FLASH_IF_INT_Write+0x204>)
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	0291      	lsls	r1, r2, #10
 8001554:	4a5c      	ldr	r2, [pc, #368]	; (80016c8 <FLASH_IF_INT_Write+0x208>)
 8001556:	400a      	ands	r2, r1
 8001558:	fbb3 f1f2 	udiv	r1, r3, r2
 800155c:	fb01 f202 	mul.w	r2, r1, r2
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	0ada      	lsrs	r2, r3, #11
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d905      	bls.n	800157e <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001578:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001582:	e089      	b.n	8001698 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800158a:	02db      	lsls	r3, r3, #11
 800158c:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800158e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f925 	bl	80017e0 <FLASH_IF_INT_IsEmpty>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d031      	beq.n	8001600 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80015a4:	23fa      	movs	r3, #250	; 0xfa
 80015a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80015aa:	e07e      	b.n	80016aa <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f88a 	bl	80016d0 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80015bc:	4b43      	ldr	r3, [pc, #268]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c6:	4413      	add	r3, r2
 80015c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015cc:	b292      	uxth	r2, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f01b fcb2 	bl	801cf38 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f896 	bl	800170c <FLASH_IF_INT_Erase>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80015e6:	23fe      	movs	r3, #254	; 0xfe
 80015e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80015ec:	e05d      	b.n	80016aa <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80015f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e005      	b.n	800160c <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001610:	e026      	b.n	8001660 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161e:	2001      	movs	r0, #1
 8001620:	f003 ffa0 	bl	8005564 <HAL_FLASH_Program>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d113      	bne.n	8001652 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	4413      	add	r3, r2
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	4299      	cmp	r1, r3
 800163c:	bf08      	it	eq
 800163e:	4290      	cmpeq	r0, r2
 8001640:	d003      	beq.n	800164a <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001642:	23fc      	movs	r3, #252	; 0xfc
 8001644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001648:	e00e      	b.n	8001668 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3308      	adds	r3, #8
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	e003      	b.n	800165a <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001652:	23fc      	movs	r3, #252	; 0xfc
 8001654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001658:	e006      	b.n	8001668 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	3308      	adds	r3, #8
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3d4      	bcc.n	8001612 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001668:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11b      	bne.n	80016a8 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	4413      	add	r3, r2
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	4413      	add	r3, r2
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800168a:	bf28      	it	cs
 800168c:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	3301      	adds	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	4413      	add	r3, r2
 800169e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f4ff af6f 	bcc.w	8001584 <FLASH_IF_INT_Write+0xc4>
 80016a6:	e000      	b.n	80016aa <FLASH_IF_INT_Write+0x1ea>
          break;
 80016a8:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016aa:	f003 ffc1 	bl	8005630 <HAL_FLASH_Lock>
 80016ae:	e002      	b.n	80016b6 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016b0:	23fb      	movs	r3, #251	; 0xfb
 80016b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80016b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3740      	adds	r7, #64	; 0x40
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	1fff75e0 	.word	0x1fff75e0
 80016c8:	03fffc00 	.word	0x03fffc00
 80016cc:	200001e4 	.word	0x200001e4

080016d0 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <FLASH_IF_INT_Read+0x1c>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80016ec:	f06f 0305 	mvn.w	r3, #5
 80016f0:	e008      	b.n	8001704 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f01b fc1c 	bl	801cf38 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 800172c:	f06f 0305 	mvn.w	r3, #5
 8001730:	e04e      	b.n	80017d0 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001732:	f000 f87b 	bl	800182c <FLASH_IF_INT_Clear_Error>
 8001736:	4603      	mov	r3, r0
 8001738:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800173a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d144      	bne.n	80017cc <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001742:	f003 ff53 	bl	80055ec <HAL_FLASH_Unlock>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d13d      	bne.n	80017c8 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800174c:	2302      	movs	r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <FLASH_IF_INT_Erase+0xcc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0299      	lsls	r1, r3, #10
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <FLASH_IF_INT_Erase+0xd0>)
 800175e:	400b      	ands	r3, r1
 8001760:	fbb2 f1f3 	udiv	r1, r2, r3
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	0adb      	lsrs	r3, r3, #11
 800176c:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001778:	3b01      	subs	r3, #1
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <FLASH_IF_INT_Erase+0xcc>)
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	0291      	lsls	r1, r2, #10
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <FLASH_IF_INT_Erase+0xd0>)
 8001782:	400a      	ands	r2, r1
 8001784:	fbb3 f1f2 	udiv	r1, r3, r2
 8001788:	fb01 f202 	mul.w	r2, r1, r2
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	0ada      	lsrs	r2, r3, #11
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	3301      	adds	r3, #1
 8001796:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001798:	f107 0214 	add.w	r2, r7, #20
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f824 	bl	80057f0 <HAL_FLASHEx_Erase>
 80017a8:	4603      	mov	r3, r0
 80017aa:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80017ac:	7fbb      	ldrb	r3, [r7, #30]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017b2:	7fbb      	ldrb	r3, [r7, #30]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d101      	bne.n	80017bc <FLASH_IF_INT_Erase+0xb0>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e001      	b.n	80017c0 <FLASH_IF_INT_Erase+0xb4>
 80017bc:	f06f 0301 	mvn.w	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80017c2:	f003 ff35 	bl	8005630 <HAL_FLASH_Lock>
 80017c6:	e001      	b.n	80017cc <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80017c8:	23fb      	movs	r3, #251	; 0xfb
 80017ca:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80017cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	1fff75e0 	.word	0x1fff75e0
 80017dc:	03fffc00 	.word	0x03fffc00

080017e0 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	e011      	b.n	8001818 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fe:	bf08      	it	eq
 8001800:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001804:	d002      	beq.n	800180c <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001806:	2301      	movs	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
      break;
 800180a:	e009      	b.n	8001820 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3308      	adds	r3, #8
 8001810:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3308      	adds	r3, #8
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3e9      	bcc.n	80017f4 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001832:	23fb      	movs	r3, #251	; 0xfb
 8001834:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001836:	f003 fed9 	bl	80055ec <HAL_FLASH_Unlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d110      	bne.n	8001862 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <FLASH_IF_INT_Clear_Error+0x44>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <FLASH_IF_INT_Clear_Error+0x44>)
 8001846:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <FLASH_IF_INT_Clear_Error+0x44>)
 800184e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001852:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001854:	f003 feec 	bl	8005630 <HAL_FLASH_Lock>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	58004000 	.word	0x58004000

08001874 <LL_AHB2_GRP1_EnableClock>:
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001898:	68fb      	ldr	r3, [r7, #12]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff ffdb 	bl	8001874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2002      	movs	r0, #2
 80018c0:	f7ff ffd8 	bl	8001874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	2004      	movs	r0, #4
 80018c6:	f7ff ffd5 	bl	8001874 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80018d0:	4825      	ldr	r0, [pc, #148]	; (8001968 <MX_GPIO_Init+0xc4>)
 80018d2:	f004 fa8f 	bl	8005df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2120      	movs	r1, #32
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <MX_GPIO_Init+0xc4>)
 80018dc:	f004 fa8a 	bl	8005df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f240 2131 	movw	r1, #561	; 0x231
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ea:	f004 fa83 	bl	8005df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 80018ee:	2338      	movs	r3, #56	; 0x38
 80018f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4819      	ldr	r0, [pc, #100]	; (8001968 <MX_GPIO_Init+0xc4>)
 8001904:	f004 f848 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001908:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <MX_GPIO_Init+0xc4>)
 8001920:	f004 f83a 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001924:	2331      	movs	r3, #49	; 0x31
 8001926:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f004 f82c 	bl	8005998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001946:	2311      	movs	r3, #17
 8001948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f004 f81d 	bl	8005998 <HAL_GPIO_Init>

}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	48000400 	.word	0x48000400

0800196c <LL_AHB2_GRP1_EnableClock>:
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800197a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <LL_APB1_GRP1_EnableClock>:
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c0:	68fb      	ldr	r3, [r7, #12]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <MX_I2C2_Init+0x78>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <MX_I2C2_Init+0x7c>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a08:	f004 fa24 	bl	8005e54 <HAL_I2C_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a12:	f000 fa93 	bl	8001f3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a1a:	f005 fdc0 	bl	800759e <HAL_I2CEx_ConfigAnalogFilter>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f000 fa8a 	bl	8001f3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a2c:	f005 fe01 	bl	8007632 <HAL_I2CEx_ConfigDigitalFilter>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f000 fa81 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200001e8 	.word	0x200001e8
 8001a44:	40005800 	.word	0x40005800
 8001a48:	00707cbb 	.word	0x00707cbb

08001a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b096      	sub	sp, #88	; 0x58
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2238      	movs	r2, #56	; 0x38
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f01c fd27 	bl	801e4c0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_I2C_MspInit+0xd0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d14b      	bne.n	8001b14 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a80:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 f88c 	bl	8008ba8 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a96:	f000 fa51 	bl	8001f3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff ff66 	bl	800196c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff ff63 	bl	800196c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f003 ff67 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001adc:	2304      	movs	r3, #4
 8001ade:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <HAL_I2C_MspInit+0xd4>)
 8001ae8:	f003 ff56 	bl	8005998 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001af0:	f7ff ff54 	bl	800199c <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2020      	movs	r0, #32
 8001afa:	f003 f874 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001afe:	2020      	movs	r0, #32
 8001b00:	f003 f88b 	bl	8004c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2021      	movs	r0, #33	; 0x21
 8001b0a:	f003 f86c 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b0e:	2021      	movs	r0, #33	; 0x21
 8001b10:	f003 f883 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	3758      	adds	r7, #88	; 0x58
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40005800 	.word	0x40005800
 8001b20:	48000400 	.word	0x48000400

08001b24 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	f023 0218 	bic.w	r2, r3, #24
 8001b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
	...

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b54:	f001 fe94 	bl	8003880 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b58:	f000 f82c 	bl	8001bb4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5c:	f7ff fea2 	bl	80018a4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001b60:	f00b f82c 	bl	800cbbc <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001b64:	f001 fae6 	bl	8003134 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001b68:	f7ff ff30 	bl	80019cc <MX_I2C2_Init>
  MX_TIM16_Init();
 8001b6c:	f000 ff3c 	bl	80029e8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001b70:	f000 ff6e 	bl	8002a50 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001b74:	f000 fb46 	bl	8002204 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  F1_QueueIni(); // init Function queue
 8001b78:	f000 f9ec 	bl	8001f54 <F1_QueueIni>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b86:	f004 f935 	bl	8005df4 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim16);
 8001b8a:	4808      	ldr	r0, [pc, #32]	; (8001bac <main+0x5c>)
 8001b8c:	f008 fa98 	bl	800a0c0 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001b90:	f00b f81c 	bl	800cbcc <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
   	MeasureOzone();
 8001b94:	f000 f8c2 	bl	8001d1c <MeasureOzone>
    F1_pull()();
 8001b98:	f000 fa20 	bl	8001fdc <F1_pull>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4798      	blx	r3
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <main+0x60>)
 8001ba4:	f004 f93d 	bl	8005e22 <HAL_GPIO_TogglePin>
    MX_LoRaWAN_Process();
 8001ba8:	e7f2      	b.n	8001b90 <main+0x40>
 8001baa:	bf00      	nop
 8001bac:	20000378 	.word	0x20000378
 8001bb0:	48000400 	.word	0x48000400

08001bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b09a      	sub	sp, #104	; 0x68
 8001bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	2248      	movs	r2, #72	; 0x48
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f01c fc7c 	bl	801e4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bda:	f005 fd75 	bl	80076c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff ffa0 	bl	8001b24 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <SystemClock_Config+0xb8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bec:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <SystemClock_Config+0xb8>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <SystemClock_Config+0xb8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001c00:	2307      	movs	r3, #7
 8001c02:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001c04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c0a:	2381      	movs	r3, #129	; 0x81
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c14:	2340      	movs	r3, #64	; 0x40
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 f89b 	bl	8007d60 <HAL_RCC_OscConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c30:	f000 f984 	bl	8001f3c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c34:	234f      	movs	r3, #79	; 0x4f
 8001c36:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2101      	movs	r1, #1
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 fc06 	bl	8008464 <HAL_RCC_ClockConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c5e:	f000 f96d 	bl	8001f3c <Error_Handler>
  }
}
 8001c62:	bf00      	nop
 8001c64:	3768      	adds	r7, #104	; 0x68
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58000400 	.word	0x58000400

08001c70 <MeasurePM_sens>:

void DisablePM_sens(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
}

void MeasurePM_sens(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x00, 1, J5_SSP_dataRX, 12, 1000);
 8001c76:	2333      	movs	r3, #51	; 0x33
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	230c      	movs	r3, #12
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <MeasurePM_sens+0x98>)
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	2200      	movs	r2, #0
 8001c90:	481e      	ldr	r0, [pc, #120]	; (8001d0c <MeasurePM_sens+0x9c>)
 8001c92:	f004 fb59 	bl	8006348 <HAL_I2C_Mem_Read>
	PM1 = J5_SSP_dataRX[0] + (J5_SSP_dataRX[1] << 8) + (J5_SSP_dataRX[2] << 16) +  (J5_SSP_dataRX[3] << 24);
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MeasurePM_sens+0x98>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <MeasurePM_sens+0x98>)
 8001c9e:	785b      	ldrb	r3, [r3, #1]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	441a      	add	r2, r3
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MeasurePM_sens+0x98>)
 8001ca6:	789b      	ldrb	r3, [r3, #2]
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	441a      	add	r2, r3
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cae:	78db      	ldrb	r3, [r3, #3]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	4413      	add	r3, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MeasurePM_sens+0xa0>)
 8001cb8:	601a      	str	r2, [r3, #0]
	PM2_5 = J5_SSP_dataRX[4] + (J5_SSP_dataRX[5] << 8) + (J5_SSP_dataRX[6] << 16) +  (J5_SSP_dataRX[7] << 24);
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cbc:	791b      	ldrb	r3, [r3, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cc2:	795b      	ldrb	r3, [r3, #5]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	441a      	add	r2, r3
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cca:	799b      	ldrb	r3, [r3, #6]
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	441a      	add	r2, r3
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cd2:	79db      	ldrb	r3, [r3, #7]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	4413      	add	r3, r2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MeasurePM_sens+0xa4>)
 8001cdc:	601a      	str	r2, [r3, #0]
	PM10 = J5_SSP_dataRX[8] + (J5_SSP_dataRX[9] << 8) + (J5_SSP_dataRX[10] << 16) +  (J5_SSP_dataRX[11] << 24);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <MeasurePM_sens+0x98>)
 8001ce0:	7a1b      	ldrb	r3, [r3, #8]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MeasurePM_sens+0x98>)
 8001ce6:	7a5b      	ldrb	r3, [r3, #9]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	441a      	add	r2, r3
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cee:	7a9b      	ldrb	r3, [r3, #10]
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	441a      	add	r2, r3
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <MeasurePM_sens+0x98>)
 8001cf6:	7adb      	ldrb	r3, [r3, #11]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	4413      	add	r3, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MeasurePM_sens+0xa8>)
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000270 	.word	0x20000270
 8001d0c:	200001e8 	.word	0x200001e8
 8001d10:	2000024c 	.word	0x2000024c
 8001d14:	20000248 	.word	0x20000248
 8001d18:	20000250 	.word	0x20000250

08001d1c <MeasureOzone>:
void MeasureOzone(void){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af02      	add	r7, sp, #8
	uint16_t RxLen;
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE);
 8001d22:	2209      	movs	r2, #9
 8001d24:	490b      	ldr	r1, [pc, #44]	; (8001d54 <MeasureOzone+0x38>)
 8001d26:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MeasureOzone+0x3c>)
 8001d28:	f008 fc48 	bl	800a5bc <HAL_UART_Receive_IT>
	HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE, &RxLen, 1000);
 8001d2c:	1dbb      	adds	r3, r7, #6
 8001d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d32:	9200      	str	r2, [sp, #0]
 8001d34:	2209      	movs	r2, #9
 8001d36:	4907      	ldr	r1, [pc, #28]	; (8001d54 <MeasureOzone+0x38>)
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MeasureOzone+0x3c>)
 8001d3a:	f00a fdce 	bl	800c8da <HAL_UARTEx_ReceiveToIdle>
	OzonePPB = ZE27_parsePPB(aRXBufferUser);
 8001d3e:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MeasureOzone+0x38>)
 8001d40:	f7ff f9c5 	bl	80010ce <ZE27_parsePPB>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <MeasureOzone+0x40>)
 8001d4a:	801a      	strh	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	2000023c 	.word	0x2000023c
 8001d58:	200004ac 	.word	0x200004ac
 8001d5c:	20000254 	.word	0x20000254

08001d60 <MeasureTempHum>:

void MeasureTempHum(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af02      	add	r7, sp, #8

    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(SHT40_addr << 1),SHT40_dataRX, 6, 100);
 8001d66:	2344      	movs	r3, #68	; 0x44
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	2364      	movs	r3, #100	; 0x64
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2306      	movs	r3, #6
 8001d74:	4a44      	ldr	r2, [pc, #272]	; (8001e88 <MeasureTempHum+0x128>)
 8001d76:	4845      	ldr	r0, [pc, #276]	; (8001e8c <MeasureTempHum+0x12c>)
 8001d78:	f004 f9f0 	bl	800615c <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <MeasureTempHum+0x128>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <MeasureTempHum+0x128>)
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <MeasureTempHum+0x130>)
 8001d96:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <MeasureTempHum+0x128>)
 8001d9a:	78db      	ldrb	r3, [r3, #3]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <MeasureTempHum+0x128>)
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <MeasureTempHum+0x134>)
 8001db2:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <MeasureTempHum+0x130>)
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff69 	bl	8000c90 <__aeabi_ui2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fb45 	bl	8000450 <__aeabi_f2d>
 8001dc6:	a32c      	add	r3, pc, #176	; (adr r3, 8001e78 <MeasureTempHum+0x118>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fb98 	bl	8000500 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	a329      	add	r3, pc, #164	; (adr r3, 8001e80 <MeasureTempHum+0x120>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe fcb9 	bl	8000754 <__aeabi_ddiv>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4610      	mov	r0, r2
 8001de8:	4619      	mov	r1, r3
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <MeasureTempHum+0x138>)
 8001df0:	f7fe f9ce 	bl	8000190 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7fe fe42 	bl	8000a84 <__aeabi_d2f>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a26      	ldr	r2, [pc, #152]	; (8001e9c <MeasureTempHum+0x13c>)
 8001e04:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MeasureTempHum+0x134>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff40 	bl	8000c90 <__aeabi_ui2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb1c 	bl	8000450 <__aeabi_f2d>
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <MeasureTempHum+0x140>)
 8001e1e:	f7fe fb6f 	bl	8000500 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	a315      	add	r3, pc, #84	; (adr r3, 8001e80 <MeasureTempHum+0x120>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fc90 	bl	8000754 <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MeasureTempHum+0x144>)
 8001e42:	f7fe f9a5 	bl	8000190 <__aeabi_dsub>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f7fe fe19 	bl	8000a84 <__aeabi_d2f>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a14      	ldr	r2, [pc, #80]	; (8001ea8 <MeasureTempHum+0x148>)
 8001e56:	6013      	str	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(SHT40_addr << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001e58:	2344      	movs	r3, #68	; 0x44
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <MeasureTempHum+0x14c>)
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <MeasureTempHum+0x12c>)
 8001e6a:	f004 f883 	bl	8005f74 <HAL_I2C_Master_Transmit>
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	f3af 8000 	nop.w
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	4065e000 	.word	0x4065e000
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40efffe0 	.word	0x40efffe0
 8001e88:	20000264 	.word	0x20000264
 8001e8c:	200001e8 	.word	0x200001e8
 8001e90:	2000026a 	.word	0x2000026a
 8001e94:	2000026c 	.word	0x2000026c
 8001e98:	40468000 	.word	0x40468000
 8001e9c:	20000258 	.word	0x20000258
 8001ea0:	405f4000 	.word	0x405f4000
 8001ea4:	40180000 	.word	0x40180000
 8001ea8:	2000025c 	.word	0x2000025c
 8001eac:	0801ef63 	.word	0x0801ef63

08001eb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a1a      	ldr	r2, [pc, #104]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d12c      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x6a>
   {
	  counter++;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	4a18      	ldr	r2, [pc, #96]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ec8:	6013      	str	r3, [r2, #0]
      switch(counter){
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001ed2:	2b09      	cmp	r3, #9
 8001ed4:	dc0c      	bgt.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x40>
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x40>
      case 0:

    	  break;
      case 1:

     	  PM_measure_flag = 1;
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
    	  break;
 8001ee4:	e004      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x40>
      case 9:
    	  PM_measure_flag = 0;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e000      	b.n	8001ef0 <HAL_TIM_PeriodElapsedCallback+0x40>
    	  break;
 8001eee:	bf00      	nop
      }
F1_push(MeasureTempHum);
 8001ef0:	480f      	ldr	r0, [pc, #60]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ef2:	f000 f83f 	bl	8001f74 <F1_push>
F1_push(MeasurePM_sens);
 8001ef6:	480f      	ldr	r0, [pc, #60]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ef8:	f000 f83c 	bl	8001f74 <F1_push>

      counter %= 10;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f02:	fb83 2301 	smull	r2, r3, r3, r1
 8001f06:	109a      	asrs	r2, r3, #2
 8001f08:	17cb      	asrs	r3, r1, #31
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	1aca      	subs	r2, r1, r3
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f18:	601a      	str	r2, [r3, #0]
   }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000378 	.word	0x20000378
 8001f28:	20000260 	.word	0x20000260
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	08001d61 	.word	0x08001d61
 8001f34:	08001c71 	.word	0x08001c71
 8001f38:	66666667 	.word	0x66666667

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>

08001f46 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  F1_last = 0;
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <F1_QueueIni+0x18>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <F1_QueueIni+0x1c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	2000027c 	.word	0x2000027c
 8001f70:	20000280 	.word	0x20000280

08001f74 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001f7c:	4b14      	ldr	r3, [pc, #80]	; (8001fd0 <F1_push+0x5c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	425a      	negs	r2, r3
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	f002 020f 	and.w	r2, r2, #15
 8001f8c:	bf58      	it	pl
 8001f8e:	4253      	negpl	r3, r2
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <F1_push+0x60>)
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <F1_push+0x28>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e014      	b.n	8001fc6 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <F1_push+0x5c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	490b      	ldr	r1, [pc, #44]	; (8001fd0 <F1_push+0x5c>)
 8001fa4:	600a      	str	r2, [r1, #0]
 8001fa6:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <F1_push+0x64>)
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <F1_push+0x5c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	425a      	negs	r2, r3
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	f002 020f 	and.w	r2, r2, #15
 8001fbc:	bf58      	it	pl
 8001fbe:	4253      	negpl	r3, r2
 8001fc0:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <F1_push+0x5c>)
 8001fc2:	6013      	str	r3, [r2, #0]
  return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	2000027c 	.word	0x2000027c
 8001fd4:	20000280 	.word	0x20000280
 8001fd8:	20000284 	.word	0x20000284

08001fdc <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <F1_pull+0x4c>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <F1_pull+0x50>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d101      	bne.n	8001ff2 <F1_pull+0x16>
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <F1_pull+0x54>)
 8001ff0:	e014      	b.n	800201c <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <F1_pull+0x50>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	490c      	ldr	r1, [pc, #48]	; (800202c <F1_pull+0x50>)
 8001ffa:	600a      	str	r2, [r1, #0]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <F1_pull+0x58>)
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <F1_pull+0x50>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	425a      	negs	r2, r3
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	f002 020f 	and.w	r2, r2, #15
 8002012:	bf58      	it	pl
 8002014:	4253      	negpl	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <F1_pull+0x50>)
 8002018:	6013      	str	r3, [r2, #0]
  return pullVar;
 800201a:	687b      	ldr	r3, [r7, #4]
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2000027c 	.word	0x2000027c
 800202c:	20000280 	.word	0x20000280
 8002030:	08001f47 	.word	0x08001f47
 8002034:	20000284 	.word	0x20000284

08002038 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <LL_APB1_GRP1_EnableClock>:
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	222c      	movs	r2, #44	; 0x2c
 8002092:	2100      	movs	r1, #0
 8002094:	4618      	mov	r0, r3
 8002096:	f01c fa13 	bl	801e4c0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <MX_RTC_Init+0x9c>)
 800209c:	4a22      	ldr	r2, [pc, #136]	; (8002128 <MX_RTC_Init+0xa0>)
 800209e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <MX_RTC_Init+0x9c>)
 80020a2:	221f      	movs	r2, #31
 80020a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_RTC_Init+0x9c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <MX_RTC_Init+0x9c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MX_RTC_Init+0x9c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_RTC_Init+0x9c>)
 80020ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_RTC_Init+0x9c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_RTC_Init+0x9c>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020ce:	4815      	ldr	r0, [pc, #84]	; (8002124 <MX_RTC_Init+0x9c>)
 80020d0:	f006 fe84 	bl	8008ddc <HAL_RTC_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80020da:	f7ff ff2f 	bl	8001f3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80020de:	4811      	ldr	r0, [pc, #68]	; (8002124 <MX_RTC_Init+0x9c>)
 80020e0:	f007 f97a 	bl	80093d8 <HAL_RTCEx_SetSSRU_IT>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80020ea:	f7ff ff27 	bl	8001f3c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80020fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020fe:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_RTC_Init+0x9c>)
 800210e:	f006 fee7 	bl	8008ee0 <HAL_RTC_SetAlarm_IT>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002118:	f7ff ff10 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	200002c4 	.word	0x200002c4
 8002128:	40002800 	.word	0x40002800

0800212c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b090      	sub	sp, #64	; 0x40
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	2238      	movs	r2, #56	; 0x38
 800213a:	2100      	movs	r1, #0
 800213c:	4618      	mov	r0, r3
 800213e:	f01c f9bf 	bl	801e4c0 <memset>
  if(rtcHandle->Instance==RTC)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <HAL_RTC_MspInit+0x74>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d125      	bne.n	8002198 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800214c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002150:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4618      	mov	r0, r3
 800215e:	f006 fd23 	bl	8008ba8 <HAL_RCCEx_PeriphCLKConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002168:	f7ff fee8 	bl	8001f3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800216c:	f7ff ff64 	bl	8002038 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002170:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002174:	f7ff ff70 	bl	8002058 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2002      	movs	r0, #2
 800217e:	f002 fd32 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002182:	2002      	movs	r0, #2
 8002184:	f002 fd49 	bl	8004c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	202a      	movs	r0, #42	; 0x2a
 800218e:	f002 fd2a 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002192:	202a      	movs	r0, #42	; 0x2a
 8002194:	f002 fd41 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002198:	bf00      	nop
 800219a:	3740      	adds	r7, #64	; 0x40
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40002800 	.word	0x40002800

080021a4 <LL_AHB2_GRP1_EnableClock>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c8:	68fb      	ldr	r3, [r7, #12]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <LL_APB1_GRP1_EnableClock>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4013      	ands	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <MX_SPI2_Init+0x74>)
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <MX_SPI2_Init+0x78>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_SPI2_Init+0x74>)
 8002210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002214:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <MX_SPI2_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI2_Init+0x74>)
 800221e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002222:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI2_Init+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_SPI2_Init+0x74>)
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI2_Init+0x74>)
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002236:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI2_Init+0x74>)
 800223a:	2218      	movs	r2, #24
 800223c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI2_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI2_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_SPI2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI2_Init+0x74>)
 8002252:	2207      	movs	r2, #7
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_SPI2_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI2_Init+0x74>)
 800225e:	2208      	movs	r2, #8
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_SPI2_Init+0x74>)
 8002264:	f007 f946 	bl	80094f4 <HAL_SPI_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800226e:	f7ff fe65 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200002fc 	.word	0x200002fc
 800227c:	40003800 	.word	0x40003800

08002280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b096      	sub	sp, #88	; 0x58
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2238      	movs	r2, #56	; 0x38
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f01c f90d 	bl	801e4c0 <memset>
  if(spiHandle->Instance==SPI2)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_SPI_MspInit+0xb0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d13b      	bne.n	8002328 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80022b0:	2310      	movs	r3, #16
 80022b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80022b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4618      	mov	r0, r3
 80022c0:	f006 fc72 	bl	8008ba8 <HAL_RCCEx_PeriphCLKConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80022ca:	f7ff fe37 	bl	8001f3c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022d2:	f7ff ff7f 	bl	80021d4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2002      	movs	r0, #2
 80022d8:	f7ff ff64 	bl	80021a4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	2001      	movs	r0, #1
 80022de:	f7ff ff61 	bl	80021a4 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80022e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80022e6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022f4:	2305      	movs	r3, #5
 80022f6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022fc:	4619      	mov	r1, r3
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <HAL_SPI_MspInit+0xb4>)
 8002300:	f003 fb4a 	bl	8005998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002316:	2305      	movs	r3, #5
 8002318:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800231e:	4619      	mov	r1, r3
 8002320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002324:	f003 fb38 	bl	8005998 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002328:	bf00      	nop
 800232a:	3758      	adds	r7, #88	; 0x58
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40003800 	.word	0x40003800
 8002334:	48000400 	.word	0x48000400

08002338 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800233e:	2201      	movs	r2, #1
 8002340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	58000400 	.word	0x58000400

08002350 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800236c:	f001 faa8 	bl	80038c0 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002370:	f7ff ffe2 	bl	8002338 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002374:	2001      	movs	r0, #1
 8002376:	f005 fa39 	bl	80077ec <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}

0800237e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002382:	f001 faab 	bl	80038dc <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002386:	f001 f91f 	bl	80035c8 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}

0800238e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002392:	f001 fa95 	bl	80038c0 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002396:	2101      	movs	r1, #1
 8002398:	2000      	movs	r0, #0
 800239a:	f005 f9a3 	bl	80076e4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80023a6:	f001 fa99 	bl	80038dc <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023be:	e7fe      	b.n	80023be <NMI_Handler+0x4>

080023c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <HardFault_Handler+0x4>

080023c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <MemManage_Handler+0x4>

080023cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <BusFault_Handler+0x4>

080023d2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <UsageFault_Handler+0x4>

080023d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800240e:	f007 f81f 	bl	8009450 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200002c4 	.word	0x200002c4

0800241c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <DMA1_Channel1_IRQHandler+0x10>)
 8002422:	f002 fe91 	bl	8005148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000540 	.word	0x20000540

08002430 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA1_Channel2_IRQHandler+0x10>)
 8002436:	f002 fe87 	bl	8005148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200005a0 	.word	0x200005a0

08002444 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <TIM16_IRQHandler+0x18>)
 800244a:	f007 fe85 	bl	800a158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <TIM16_IRQHandler+0x1c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <TIM16_IRQHandler+0x1c>)
 8002456:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000378 	.word	0x20000378
 8002460:	20000360 	.word	0x20000360

08002464 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <TIM17_IRQHandler+0x18>)
 800246a:	f007 fe75 	bl	800a158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <TIM17_IRQHandler+0x1c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	4a02      	ldr	r2, [pc, #8]	; (8002480 <TIM17_IRQHandler+0x1c>)
 8002476:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200003c4 	.word	0x200003c4
 8002480:	20000364 	.word	0x20000364

08002484 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <I2C2_EV_IRQHandler+0x10>)
 800248a:	f004 f877 	bl	800657c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200001e8 	.word	0x200001e8

08002498 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <I2C2_ER_IRQHandler+0x10>)
 800249e:	f004 f887 	bl	80065b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200001e8 	.word	0x200001e8

080024ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <USART1_IRQHandler+0x10>)
 80024b2:	f008 f94f 	bl	800a754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000418 	.word	0x20000418

080024c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <USART2_IRQHandler+0x10>)
 80024c6:	f008 f945 	bl	800a754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200004ac 	.word	0x200004ac

080024d4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <RTC_Alarm_IRQHandler+0x10>)
 80024da:	f006 fe69 	bl	80091b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200002c4 	.word	0x200002c4

080024e8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024ee:	f007 fbf1 	bl	8009cd4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000368 	.word	0x20000368

080024fc <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMAMUX1_OVR_IRQHandler+0x10>)
 8002502:	f002 ffdd 	bl	80054c0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200005a0 	.word	0x200005a0

08002510 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800251e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4313      	orrs	r3, r2
 8002526:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <MX_SUBGHZ_Init+0x20>)
 8002546:	2208      	movs	r2, #8
 8002548:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	; (8002560 <MX_SUBGHZ_Init+0x20>)
 800254c:	f007 f940 	bl	80097d0 <HAL_SUBGHZ_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002556:	f7ff fcf1 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000368 	.word	0x20000368

08002564 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff ffcf 	bl	8002510 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	2032      	movs	r0, #50	; 0x32
 8002578:	f002 fb35 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 800257c:	2032      	movs	r0, #50	; 0x32
 800257e:	f002 fb4c 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <LL_RCC_SetClkAfterWakeFromStop>:
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800259c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <LL_FLASH_GetUDN+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	1fff7580 	.word	0x1fff7580

080025c4 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <LL_FLASH_GetDeviceID+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2db      	uxtb	r3, r3
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	1fff7584 	.word	0x1fff7584

080025dc <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0a1b      	lsrs	r3, r3, #8
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	1fff7584 	.word	0x1fff7584

080025f4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7ff ffc6 	bl	800258a <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80025fe:	f01b fa29 	bl	801da54 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <SystemApp_Init+0x50>)
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002608:	f000 f98c 	bl	8002924 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 800260c:	f01b fcb2 	bl	801df74 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <SystemApp_Init+0x54>)
 8002612:	f01b fd5d 	bl	801e0d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <SystemApp_Init+0x58>)
 8002618:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800261c:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800261e:	2002      	movs	r0, #2
 8002620:	f01b fd64 	bl	801e0ec <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002624:	f7fe fe14 	bl	8001250 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002628:	f000 f9b4 	bl	8002994 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800262c:	f01a fbde 	bl	801cdec <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002630:	2101      	movs	r1, #1
 8002632:	2001      	movs	r0, #1
 8002634:	f01a fc1a 	bl	801ce6c <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002638:	2101      	movs	r1, #1
 800263a:	2001      	movs	r0, #1
 800263c:	f01a fbe6 	bl	801ce0c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000374 	.word	0x20000374
 8002648:	0800281d 	.word	0x0800281d
 800264c:	58004000 	.word	0x58004000

08002650 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8002654:	f01a fc3a 	bl	801cecc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}

0800265c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002666:	f7fe fe01 	bl	800126c <SYS_GetBatteryLevel>
 800266a:	4603      	mov	r3, r0
 800266c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800266e:	88bb      	ldrh	r3, [r7, #4]
 8002670:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002674:	4293      	cmp	r3, r2
 8002676:	d902      	bls.n	800267e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002678:	23fe      	movs	r3, #254	; 0xfe
 800267a:	71fb      	strb	r3, [r7, #7]
 800267c:	e014      	b.n	80026a8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002684:	d202      	bcs.n	800268c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	71fb      	strb	r3, [r7, #7]
 800268a:	e00d      	b.n	80026a8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800268c:	88bb      	ldrh	r3, [r7, #4]
 800268e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002692:	461a      	mov	r2, r3
 8002694:	4613      	mov	r3, r2
 8002696:	01db      	lsls	r3, r3, #7
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	461a      	mov	r2, r3
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <GetBatteryLevel+0x58>)
 80026a0:	fba3 2302 	umull	r2, r3, r3, r2
 80026a4:	09db      	lsrs	r3, r3, #7
 80026a6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80026a8:	79fb      	ldrb	r3, [r7, #7]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	1b4e81b5 	.word	0x1b4e81b5

080026b8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f93b 	bl	8002940 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fb37 	bl	8000d40 <__aeabi_f2iz>
 80026d2:	4603      	mov	r3, r0
 80026d4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80026d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b087      	sub	sp, #28
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80026ee:	f7ff ff5f 	bl	80025b0 <LL_FLASH_GetUDN>
 80026f2:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d138      	bne.n	800276e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80026fc:	f001 f8fc 	bl	80038f8 <HAL_GetUIDw0>
 8002700:	4604      	mov	r4, r0
 8002702:	f001 f90d 	bl	8003920 <HAL_GetUIDw2>
 8002706:	4603      	mov	r3, r0
 8002708:	4423      	add	r3, r4
 800270a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800270c:	f001 f8fe 	bl	800390c <HAL_GetUIDw1>
 8002710:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	0e1a      	lsrs	r2, r3, #24
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3307      	adds	r3, #7
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	0c1a      	lsrs	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3306      	adds	r3, #6
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	0a1a      	lsrs	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3305      	adds	r3, #5
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3304      	adds	r3, #4
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	0e1a      	lsrs	r2, r3, #24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3303      	adds	r3, #3
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	0c1a      	lsrs	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3302      	adds	r3, #2
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	0a1a      	lsrs	r2, r3, #8
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3301      	adds	r3, #1
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800276c:	e031      	b.n	80027d2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3307      	adds	r3, #7
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	0a1a      	lsrs	r2, r3, #8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3306      	adds	r3, #6
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	0c1a      	lsrs	r2, r3, #16
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3305      	adds	r3, #5
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	0e1a      	lsrs	r2, r3, #24
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 800279c:	f7ff ff12 	bl	80025c4 <LL_FLASH_GetDeviceID>
 80027a0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3303      	adds	r3, #3
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80027ac:	f7ff ff16 	bl	80025dc <LL_FLASH_GetSTCompanyID>
 80027b0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3302      	adds	r3, #2
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	0a1a      	lsrs	r2, r3, #8
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3301      	adds	r3, #1
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	0c1b      	lsrs	r3, r3, #16
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	701a      	strb	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd90      	pop	{r4, r7, pc}

080027da <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80027da:	b590      	push	{r4, r7, lr}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80027e2:	f7ff fee5 	bl	80025b0 <LL_FLASH_GetUDN>
 80027e6:	4602      	mov	r2, r0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d10d      	bne.n	8002812 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80027f6:	f001 f87f 	bl	80038f8 <HAL_GetUIDw0>
 80027fa:	4604      	mov	r4, r0
 80027fc:	f001 f886 	bl	800390c <HAL_GetUIDw1>
 8002800:	4603      	mov	r3, r0
 8002802:	405c      	eors	r4, r3
 8002804:	f001 f88c 	bl	8003920 <HAL_GetUIDw2>
 8002808:	4603      	mov	r3, r0
 800280a:	ea84 0203 	eor.w	r2, r4, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bd90      	pop	{r4, r7, pc}
	...

0800281c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4618      	mov	r0, r3
 800282c:	f01a fc5e 	bl	801d0ec <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002836:	9200      	str	r2, [sp, #0]
 8002838:	4a07      	ldr	r2, [pc, #28]	; (8002858 <TimestampNow+0x3c>)
 800283a:	2110      	movs	r1, #16
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f81d 	bl	800287c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fd fc98 	bl	8000178 <strlen>
 8002848:	4603      	mov	r3, r0
 800284a:	b29a      	uxth	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	0801e700 	.word	0x0801e700

0800285c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002860:	2101      	movs	r1, #1
 8002862:	2002      	movs	r0, #2
 8002864:	f01a fad2 	bl	801ce0c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002870:	2100      	movs	r1, #0
 8002872:	2002      	movs	r0, #2
 8002874:	f01a faca 	bl	801ce0c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800287c:	b40c      	push	{r2, r3}
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f01a fdfb 	bl	801d490 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028a4:	b002      	add	sp, #8
 80028a6:	4770      	bx	lr

080028a8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_GetTick+0x24>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80028ce:	f000 f9dd 	bl	8002c8c <TIMER_IF_GetTimerValue>
 80028d2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80028d4:	687b      	ldr	r3, [r7, #4]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000374 	.word	0x20000374

080028e4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa53 	bl	8002d9a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <LL_EXTI_EnableIT_32_63+0x24>)
 8002906:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800290a:	4905      	ldr	r1, [pc, #20]	; (8002920 <LL_EXTI_EnableIT_32_63+0x24>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	58000800 	.word	0x58000800

08002924 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002928:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800292c:	f7ff ffe6 	bl	80028fc <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002930:	f001 f800 	bl	8003934 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002934:	f001 f804 	bl	8003940 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002938:	f001 f808 	bl	800394c <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002948:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <EnvSensors_Read+0x40>)
 800294a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <EnvSensors_Read+0x44>)
 800294e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <EnvSensors_Read+0x48>)
 8002952:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <EnvSensors_Read+0x4c>)
 800296a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <EnvSensors_Read+0x50>)
 8002970:	611a      	str	r2, [r3, #16]

  return 0;
 8002972:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	42480000 	.word	0x42480000
 8002984:	41900000 	.word	0x41900000
 8002988:	447a0000 	.word	0x447a0000
 800298c:	003e090d 	.word	0x003e090d
 8002990:	000503ab 	.word	0x000503ab

08002994 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800299e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <LL_APB2_GRP1_EnableClock>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4013      	ands	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
	...

080029e8 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <MX_TIM16_Init+0x60>)
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <MX_TIM16_Init+0x64>)
 80029f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <MX_TIM16_Init+0x60>)
 80029f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029f8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <MX_TIM16_Init+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_TIM16_Init+0x60>)
 8002a02:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002a06:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <MX_TIM16_Init+0x60>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_TIM16_Init+0x60>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_TIM16_Init+0x60>)
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a1a:	480b      	ldr	r0, [pc, #44]	; (8002a48 <MX_TIM16_Init+0x60>)
 8002a1c:	f007 faf8 	bl	800a010 <HAL_TIM_Base_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002a26:	f7ff fa89 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002a2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002a2e:	f7ff ffc2 	bl	80029b6 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	201c      	movs	r0, #28
 8002a38:	f002 f8d5 	bl	8004be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002a3c:	201c      	movs	r0, #28
 8002a3e:	f002 f8ec 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000378 	.word	0x20000378
 8002a4c:	40014400 	.word	0x40014400

08002a50 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <MX_TIM17_Init+0x60>)
 8002a58:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a6c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6e:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a80:	480a      	ldr	r0, [pc, #40]	; (8002aac <MX_TIM17_Init+0x5c>)
 8002a82:	f007 fac5 	bl	800a010 <HAL_TIM_Base_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002a8c:	f7ff fa56 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002a90:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002a94:	f7ff ff8f 	bl	80029b6 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	201d      	movs	r0, #29
 8002a9e:	f002 f8a2 	bl	8004be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002aa2:	201d      	movs	r0, #29
 8002aa4:	f002 f8b9 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	200003c4 	.word	0x200003c4
 8002ab0:	40014800 	.word	0x40014800

08002ab4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_TIM_Base_MspInit+0x58>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ac6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002aca:	f7ff ff74 	bl	80029b6 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	201c      	movs	r0, #28
 8002ad4:	f002 f887 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002ad8:	201c      	movs	r0, #28
 8002ada:	f002 f89e 	bl	8004c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002ade:	e010      	b.n	8002b02 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <HAL_TIM_Base_MspInit+0x5c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10b      	bne.n	8002b02 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002aea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002aee:	f7ff ff62 	bl	80029b6 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	201d      	movs	r0, #29
 8002af8:	f002 f875 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002afc:	201d      	movs	r0, #29
 8002afe:	f002 f88c 	bl	8004c1a <HAL_NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40014400 	.word	0x40014400
 8002b10:	40014800 	.word	0x40014800

08002b14 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
	...

08002b2c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <TIMER_IF_Init+0x5c>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <TIMER_IF_Init+0x60>)
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002b4c:	f7ff fa9c 	bl	8002088 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002b50:	f000 f856 	bl	8002c00 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b58:	480c      	ldr	r0, [pc, #48]	; (8002b8c <TIMER_IF_Init+0x60>)
 8002b5a:	f006 facd 	bl	80090f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b5e:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <TIMER_IF_Init+0x60>)
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002b66:	4809      	ldr	r0, [pc, #36]	; (8002b8c <TIMER_IF_Init+0x60>)
 8002b68:	f006 fc04 	bl	8009374 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f000 f9d3 	bl	8002f18 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002b72:	f000 f85f 	bl	8002c34 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <TIMER_IF_Init+0x5c>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000410 	.word	0x20000410
 8002b8c:	200002c4 	.word	0x200002c4

08002b90 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08e      	sub	sp, #56	; 0x38
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	222c      	movs	r2, #44	; 0x2c
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f01b fc8a 	bl	801e4c0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002bac:	f000 f828 	bl	8002c00 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <TIMER_IF_StartTimer+0x68>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002bc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002bcc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4807      	ldr	r0, [pc, #28]	; (8002bfc <TIMER_IF_StartTimer+0x6c>)
 8002bde:	f006 f97f 	bl	8008ee0 <HAL_RTC_SetAlarm_IT>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002be8:	f7ff f9a8 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002bec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3738      	adds	r7, #56	; 0x38
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000414 	.word	0x20000414
 8002bfc:	200002c4 	.word	0x200002c4

08002c00 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <TIMER_IF_StopTimer+0x2c>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c14:	4806      	ldr	r0, [pc, #24]	; (8002c30 <TIMER_IF_StopTimer+0x30>)
 8002c16:	f006 fa6f 	bl	80090f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <TIMER_IF_StopTimer+0x30>)
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002c22:	79fb      	ldrb	r3, [r7, #7]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40002800 	.word	0x40002800
 8002c30:	200002c4 	.word	0x200002c4

08002c34 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002c38:	f000 f98e 	bl	8002f58 <GetTimerTicks>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <TIMER_IF_SetTimerContext+0x18>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002c42:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <TIMER_IF_SetTimerContext+0x18>)
 8002c44:	681b      	ldr	r3, [r3, #0]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000414 	.word	0x20000414

08002c50 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <TIMER_IF_GetTimerContext+0x10>)
 8002c56:	681b      	ldr	r3, [r3, #0]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000414 	.word	0x20000414

08002c64 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002c6e:	f000 f973 	bl	8002f58 <GetTimerTicks>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b04      	ldr	r3, [pc, #16]	; (8002c88 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000414 	.word	0x20000414

08002c8c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002c96:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <TIMER_IF_GetTimerValue+0x24>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002c9e:	f000 f95b 	bl	8002f58 <GetTimerTicks>
 8002ca2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000410 	.word	0x20000410

08002cb4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002cc2:	687b      	ldr	r3, [r7, #4]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002cce:	b5b0      	push	{r4, r5, r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	2000      	movs	r0, #0
 8002cde:	460a      	mov	r2, r1
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	0d95      	lsrs	r5, r2, #22
 8002ce4:	0294      	lsls	r4, r2, #10
 8002ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fe f84b 	bl	8000d8c <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdb0      	pop	{r4, r5, r7, pc}

08002d08 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d08:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d12:	2100      	movs	r1, #0
 8002d14:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	2000      	movs	r0, #0
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	4620      	mov	r0, r4
 8002d20:	4629      	mov	r1, r5
 8002d22:	f04f 0a00 	mov.w	sl, #0
 8002d26:	f04f 0b00 	mov.w	fp, #0
 8002d2a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002d2e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002d32:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002d36:	4650      	mov	r0, sl
 8002d38:	4659      	mov	r1, fp
 8002d3a:	1b02      	subs	r2, r0, r4
 8002d3c:	eb61 0305 	sbc.w	r3, r1, r5
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	0099      	lsls	r1, r3, #2
 8002d4a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002d4e:	0090      	lsls	r0, r2, #2
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	eb12 0804 	adds.w	r8, r2, r4
 8002d58:	eb43 0905 	adc.w	r9, r3, r5
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d70:	4690      	mov	r8, r2
 8002d72:	4699      	mov	r9, r3
 8002d74:	4640      	mov	r0, r8
 8002d76:	4649      	mov	r1, r9
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	0a82      	lsrs	r2, r0, #10
 8002d82:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002d86:	0a8b      	lsrs	r3, r1, #10
 8002d88:	4613      	mov	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d98:	4770      	bx	lr

08002d9a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff93 	bl	8002cce <TIMER_IF_Convert_ms2Tick>
 8002da8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002daa:	f000 f8d5 	bl	8002f58 <GetTimerTicks>
 8002dae:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002db0:	e000      	b.n	8002db4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002db2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002db4:	f000 f8d0 	bl	8002f58 <GetTimerTicks>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f6      	bhi.n	8002db2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002dd6:	f01a ff8b 	bl	801dcf0 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002dea:	f000 f8a5 	bl	8002f38 <TIMER_IF_BkUp_Read_MSBticks>
 8002dee:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3301      	adds	r3, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f88f 	bl	8002f18 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002e02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e06:	b08c      	sub	sp, #48	; 0x30
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002e10:	f000 f8a2 	bl	8002f58 <GetTimerTicks>
 8002e14:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002e16:	f000 f88f 	bl	8002f38 <TIMER_IF_BkUp_Read_MSBticks>
 8002e1a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	60fa      	str	r2, [r7, #12]
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	000b      	movs	r3, r1
 8002e30:	2200      	movs	r2, #0
 8002e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e34:	2000      	movs	r0, #0
 8002e36:	460c      	mov	r4, r1
 8002e38:	4605      	mov	r5, r0
 8002e3a:	eb12 0804 	adds.w	r8, r2, r4
 8002e3e:	eb43 0905 	adc.w	r9, r3, r5
 8002e42:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	0a82      	lsrs	r2, r0, #10
 8002e54:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002e58:	0a8b      	lsrs	r3, r1, #10
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2200      	movs	r2, #0
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002e6c:	f04f 0b00 	mov.w	fp, #0
 8002e70:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff46 	bl	8002d08 <TIMER_IF_Convert_Tick2ms>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3730      	adds	r7, #48	; 0x30
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e90 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4803      	ldr	r0, [pc, #12]	; (8002eac <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002e9e:	f006 fafb 	bl	8009498 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200002c4 	.word	0x200002c4

08002eb0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	2101      	movs	r1, #1
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002ebe:	f006 faeb 	bl	8009498 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200002c4 	.word	0x200002c4

08002ed0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002eda:	2100      	movs	r1, #0
 8002edc:	4804      	ldr	r0, [pc, #16]	; (8002ef0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002ede:	f006 faf3 	bl	80094c8 <HAL_RTCEx_BKUPRead>
 8002ee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002ee4:	687b      	ldr	r3, [r7, #4]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200002c4 	.word	0x200002c4

08002ef4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002efe:	2101      	movs	r1, #1
 8002f00:	4804      	ldr	r0, [pc, #16]	; (8002f14 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002f02:	f006 fae1 	bl	80094c8 <HAL_RTCEx_BKUPRead>
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200002c4 	.word	0x200002c4

08002f18 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	2102      	movs	r1, #2
 8002f24:	4803      	ldr	r0, [pc, #12]	; (8002f34 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002f26:	f006 fab7 	bl	8009498 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200002c4 	.word	0x200002c4

08002f38 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002f3e:	2102      	movs	r1, #2
 8002f40:	4804      	ldr	r0, [pc, #16]	; (8002f54 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002f42:	f006 fac1 	bl	80094c8 <HAL_RTCEx_BKUPRead>
 8002f46:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002f48:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200002c4 	.word	0x200002c4

08002f58 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002f5e:	480b      	ldr	r0, [pc, #44]	; (8002f8c <GetTimerTicks+0x34>)
 8002f60:	f7ff fdd8 	bl	8002b14 <LL_RTC_TIME_GetSubSecond>
 8002f64:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f66:	e003      	b.n	8002f70 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002f68:	4808      	ldr	r0, [pc, #32]	; (8002f8c <GetTimerTicks+0x34>)
 8002f6a:	f7ff fdd3 	bl	8002b14 <LL_RTC_TIME_GetSubSecond>
 8002f6e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f70:	4806      	ldr	r0, [pc, #24]	; (8002f8c <GetTimerTicks+0x34>)
 8002f72:	f7ff fdcf 	bl	8002b14 <LL_RTC_TIME_GetSubSecond>
 8002f76:	4602      	mov	r2, r0
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d1f4      	bne.n	8002f68 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40002800 	.word	0x40002800

08002f90 <LL_AHB2_GRP1_EnableClock>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <LL_APB1_GRP1_EnableClock>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <LL_APB1_GRP1_DisableClock>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	43db      	mvns	r3, r3
 8003002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003006:	4013      	ands	r3, r2
 8003008:	658b      	str	r3, [r1, #88]	; 0x58
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <LL_APB2_GRP1_EnableClock>:
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4313      	orrs	r3, r2
 800302a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <LL_APB2_GRP1_DisableClock>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	43db      	mvns	r3, r3
 8003056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305a:	4013      	ands	r3, r2
 800305c:	660b      	str	r3, [r1, #96]	; 0x60
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <LL_SYSCFG_EnableFastModePlus>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4904      	ldr	r1, [pc, #16]	; (8003088 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40010000 	.word	0x40010000

0800308c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003090:	4b26      	ldr	r3, [pc, #152]	; (800312c <MX_USART1_UART_Init+0xa0>)
 8003092:	4a27      	ldr	r2, [pc, #156]	; (8003130 <MX_USART1_UART_Init+0xa4>)
 8003094:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003096:	4b25      	ldr	r3, [pc, #148]	; (800312c <MX_USART1_UART_Init+0xa0>)
 8003098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800309c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800309e:	4b23      	ldr	r3, [pc, #140]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030a4:	4b21      	ldr	r3, [pc, #132]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030b0:	4b1e      	ldr	r3, [pc, #120]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030b2:	220c      	movs	r2, #12
 80030b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030c2:	4b1a      	ldr	r3, [pc, #104]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030c8:	4b18      	ldr	r3, [pc, #96]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80030ce:	4b17      	ldr	r3, [pc, #92]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030d0:	2240      	movs	r2, #64	; 0x40
 80030d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030da:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030e2:	4812      	ldr	r0, [pc, #72]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030e4:	f007 fa1a 	bl	800a51c <HAL_UART_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 80030ee:	f7fe ff25 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030f2:	2100      	movs	r1, #0
 80030f4:	480d      	ldr	r0, [pc, #52]	; (800312c <MX_USART1_UART_Init+0xa0>)
 80030f6:	f009 fb74 	bl	800c7e2 <HAL_UARTEx_SetTxFifoThreshold>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003100:	f7fe ff1c 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003104:	2100      	movs	r1, #0
 8003106:	4809      	ldr	r0, [pc, #36]	; (800312c <MX_USART1_UART_Init+0xa0>)
 8003108:	f009 fba9 	bl	800c85e <HAL_UARTEx_SetRxFifoThreshold>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003112:	f7fe ff13 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003116:	4805      	ldr	r0, [pc, #20]	; (800312c <MX_USART1_UART_Init+0xa0>)
 8003118:	f009 faf0 	bl	800c6fc <HAL_UARTEx_EnableFifoMode>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003122:	f7fe ff0b 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000418 	.word	0x20000418
 8003130:	40013800 	.word	0x40013800

08003134 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <MX_USART2_UART_Init+0x98>)
 800313c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003140:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800314c:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 800315a:	220c      	movs	r2, #12
 800315c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800316a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 800316e:	2200      	movs	r2, #0
 8003170:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003174:	2200      	movs	r2, #0
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 800317a:	2200      	movs	r2, #0
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800317e:	4812      	ldr	r0, [pc, #72]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003180:	f007 f9cc 	bl	800a51c <HAL_UART_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800318a:	f7fe fed7 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800318e:	2100      	movs	r1, #0
 8003190:	480d      	ldr	r0, [pc, #52]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 8003192:	f009 fb26 	bl	800c7e2 <HAL_UARTEx_SetTxFifoThreshold>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800319c:	f7fe fece 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031a0:	2100      	movs	r1, #0
 80031a2:	4809      	ldr	r0, [pc, #36]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 80031a4:	f009 fb5b 	bl	800c85e <HAL_UARTEx_SetRxFifoThreshold>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80031ae:	f7fe fec5 	bl	8001f3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80031b2:	4805      	ldr	r0, [pc, #20]	; (80031c8 <MX_USART2_UART_Init+0x94>)
 80031b4:	f009 fadd 	bl	800c772 <HAL_UARTEx_DisableFifoMode>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80031be:	f7fe febd 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200004ac 	.word	0x200004ac
 80031cc:	40004400 	.word	0x40004400

080031d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b09a      	sub	sp, #104	; 0x68
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 80031e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031f6:	f107 030c 	add.w	r3, r7, #12
 80031fa:	2238      	movs	r2, #56	; 0x38
 80031fc:	2100      	movs	r1, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f01b f95e 	bl	801e4c0 <memset>
  if(uartHandle->Instance==USART1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <HAL_UART_MspInit+0x1f8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	f040 80a4 	bne.w	8003358 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003210:	2301      	movs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003214:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003218:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800321a:	f107 030c 	add.w	r3, r7, #12
 800321e:	4618      	mov	r0, r3
 8003220:	f005 fcc2 	bl	8008ba8 <HAL_RCCEx_PeriphCLKConfig>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800322a:	f7fe fe87 	bl	8001f3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800322e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003232:	f7ff feef 	bl	8003014 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	2002      	movs	r0, #2
 8003238:	f7ff feaa 	bl	8002f90 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800323c:	23c0      	movs	r3, #192	; 0xc0
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003244:	2301      	movs	r3, #1
 8003246:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003248:	2301      	movs	r3, #1
 800324a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800324c:	2307      	movs	r3, #7
 800324e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003254:	4619      	mov	r1, r3
 8003256:	485d      	ldr	r0, [pc, #372]	; (80033cc <HAL_UART_MspInit+0x1fc>)
 8003258:	f002 fb9e 	bl	8005998 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800325c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003260:	f7ff ff02 	bl	8003068 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003264:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003268:	f7ff fefe 	bl	8003068 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800326c:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_UART_MspInit+0x200>)
 800326e:	4a59      	ldr	r2, [pc, #356]	; (80033d4 <HAL_UART_MspInit+0x204>)
 8003270:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003272:	4b57      	ldr	r3, [pc, #348]	; (80033d0 <HAL_UART_MspInit+0x200>)
 8003274:	2212      	movs	r2, #18
 8003276:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003278:	4b55      	ldr	r3, [pc, #340]	; (80033d0 <HAL_UART_MspInit+0x200>)
 800327a:	2210      	movs	r2, #16
 800327c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800327e:	4b54      	ldr	r3, [pc, #336]	; (80033d0 <HAL_UART_MspInit+0x200>)
 8003280:	2200      	movs	r2, #0
 8003282:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003284:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <HAL_UART_MspInit+0x200>)
 8003286:	2280      	movs	r2, #128	; 0x80
 8003288:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800328a:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <HAL_UART_MspInit+0x200>)
 800328c:	2200      	movs	r2, #0
 800328e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003290:	4b4f      	ldr	r3, [pc, #316]	; (80033d0 <HAL_UART_MspInit+0x200>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003296:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <HAL_UART_MspInit+0x200>)
 8003298:	2200      	movs	r2, #0
 800329a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800329c:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <HAL_UART_MspInit+0x200>)
 800329e:	2200      	movs	r2, #0
 80032a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032a2:	484b      	ldr	r0, [pc, #300]	; (80033d0 <HAL_UART_MspInit+0x200>)
 80032a4:	f001 fcd6 	bl	8004c54 <HAL_DMA_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80032ae:	f7fe fe45 	bl	8001f3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <HAL_UART_MspInit+0x200>)
 80032b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80032b8:	4a45      	ldr	r2, [pc, #276]	; (80033d0 <HAL_UART_MspInit+0x200>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032c0:	4a46      	ldr	r2, [pc, #280]	; (80033dc <HAL_UART_MspInit+0x20c>)
 80032c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80032c4:	4b44      	ldr	r3, [pc, #272]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032c6:	2211      	movs	r2, #17
 80032c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d0:	4b41      	ldr	r3, [pc, #260]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032d6:	4b40      	ldr	r3, [pc, #256]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032dc:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e2:	4b3d      	ldr	r3, [pc, #244]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80032f4:	4838      	ldr	r0, [pc, #224]	; (80033d8 <HAL_UART_MspInit+0x208>)
 80032f6:	f001 fcad 	bl	8004c54 <HAL_DMA_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003300:	f7fe fe1c 	bl	8001f3c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003304:	2300      	movs	r3, #0
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003308:	2300      	movs	r3, #0
 800330a:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 800330c:	2300      	movs	r3, #0
 800330e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003318:	2301      	movs	r3, #1
 800331a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 800331c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003320:	4619      	mov	r1, r3
 8003322:	482d      	ldr	r0, [pc, #180]	; (80033d8 <HAL_UART_MspInit+0x208>)
 8003324:	f002 f88c 	bl	8005440 <HAL_DMAEx_ConfigMuxSync>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800332e:	f7fe fe05 	bl	8001f3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a28      	ldr	r2, [pc, #160]	; (80033d8 <HAL_UART_MspInit+0x208>)
 8003336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800333a:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_UART_MspInit+0x208>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003340:	2200      	movs	r2, #0
 8003342:	2102      	movs	r1, #2
 8003344:	2024      	movs	r0, #36	; 0x24
 8003346:	f001 fc4e 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800334a:	2024      	movs	r0, #36	; 0x24
 800334c:	f001 fc65 	bl	8004c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003350:	200c      	movs	r0, #12
 8003352:	f001 fc62 	bl	8004c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003356:	e033      	b.n	80033c0 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_UART_MspInit+0x210>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12e      	bne.n	80033c0 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003362:	2302      	movs	r3, #2
 8003364:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003366:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800336a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	4618      	mov	r0, r3
 8003372:	f005 fc19 	bl	8008ba8 <HAL_RCCEx_PeriphCLKConfig>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 800337c:	f7fe fdde 	bl	8001f3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003380:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003384:	f7ff fe1c 	bl	8002fc0 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003388:	2001      	movs	r0, #1
 800338a:	f7ff fe01 	bl	8002f90 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 800338e:	230c      	movs	r3, #12
 8003390:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003396:	2301      	movs	r3, #1
 8003398:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800339a:	2301      	movs	r3, #1
 800339c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800339e:	2307      	movs	r3, #7
 80033a0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033a6:	4619      	mov	r1, r3
 80033a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ac:	f002 faf4 	bl	8005998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2025      	movs	r0, #37	; 0x25
 80033b6:	f001 fc16 	bl	8004be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033ba:	2025      	movs	r0, #37	; 0x25
 80033bc:	f001 fc2d 	bl	8004c1a <HAL_NVIC_EnableIRQ>
}
 80033c0:	bf00      	nop
 80033c2:	3768      	adds	r7, #104	; 0x68
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40013800 	.word	0x40013800
 80033cc:	48000400 	.word	0x48000400
 80033d0:	20000540 	.word	0x20000540
 80033d4:	40020008 	.word	0x40020008
 80033d8:	200005a0 	.word	0x200005a0
 80033dc:	4002001c 	.word	0x4002001c
 80033e0:	40004400 	.word	0x40004400

080033e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <HAL_UART_MspDeInit+0x6c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d116      	bne.n	8003424 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80033f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80033fa:	f7ff fe23 	bl	8003044 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80033fe:	21c0      	movs	r1, #192	; 0xc0
 8003400:	4814      	ldr	r0, [pc, #80]	; (8003454 <HAL_UART_MspDeInit+0x70>)
 8003402:	f002 fc29 	bl	8005c58 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340a:	4618      	mov	r0, r3
 800340c:	f001 fcca 	bl	8004da4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fcc4 	bl	8004da4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800341c:	2024      	movs	r0, #36	; 0x24
 800341e:	f001 fc0a 	bl	8004c36 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003422:	e010      	b.n	8003446 <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <HAL_UART_MspDeInit+0x74>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10b      	bne.n	8003446 <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 800342e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003432:	f7ff fddd 	bl	8002ff0 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003436:	210c      	movs	r1, #12
 8003438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343c:	f002 fc0c 	bl	8005c58 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003440:	2025      	movs	r0, #37	; 0x25
 8003442:	f001 fbf8 	bl	8004c36 <HAL_NVIC_DisableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40013800 	.word	0x40013800
 8003454:	48000400 	.word	0x48000400
 8003458:	40004400 	.word	0x40004400

0800345c <LL_APB2_GRP1_ForceReset>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800346a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4313      	orrs	r3, r2
 8003472:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <LL_APB2_GRP1_ReleaseReset>:
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	43db      	mvns	r3, r3
 8003490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003494:	4013      	ands	r3, r2
 8003496:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
	...

080034a4 <LL_EXTI_EnableIT_0_31>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80034ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80034b2:	4905      	ldr	r1, [pc, #20]	; (80034c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	58000800 	.word	0x58000800

080034cc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <vcom_Init+0x28>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80034da:	f7fd ff59 	bl	8001390 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80034de:	f7ff fdd5 	bl	800308c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80034e2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80034e6:	f7ff ffdd 	bl	80034a4 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80034ea:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000604 	.word	0x20000604

080034f8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80034fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003500:	f7ff ffac 	bl	800345c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003504:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003508:	f7ff ffb9 	bl	800347e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <vcom_DeInit+0x28>)
 800350e:	f7ff ff69 	bl	80033e4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003512:	200f      	movs	r0, #15
 8003514:	f001 fb8f 	bl	8004c36 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003518:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800351a:	4618      	mov	r0, r3
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000418 	.word	0x20000418

08003524 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	461a      	mov	r2, r3
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4804      	ldr	r0, [pc, #16]	; (8003548 <vcom_Trace_DMA+0x24>)
 8003538:	f007 f88c 	bl	800a654 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800353c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000418 	.word	0x20000418

0800354c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <vcom_ReceiveInit+0x70>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800355a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800355e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003560:	f107 0308 	add.w	r3, r7, #8
 8003564:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003568:	4815      	ldr	r0, [pc, #84]	; (80035c0 <vcom_ReceiveInit+0x74>)
 800356a:	f009 f83a 	bl	800c5e2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800356e:	bf00      	nop
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <vcom_ReceiveInit+0x74>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d0f7      	beq.n	8003570 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003580:	bf00      	nop
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <vcom_ReceiveInit+0x74>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003590:	d1f7      	bne.n	8003582 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <vcom_ReceiveInit+0x74>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <vcom_ReceiveInit+0x74>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80035a0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80035a2:	4807      	ldr	r0, [pc, #28]	; (80035c0 <vcom_ReceiveInit+0x74>)
 80035a4:	f009 f878 	bl	800c698 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80035a8:	2201      	movs	r2, #1
 80035aa:	4906      	ldr	r1, [pc, #24]	; (80035c4 <vcom_ReceiveInit+0x78>)
 80035ac:	4804      	ldr	r0, [pc, #16]	; (80035c0 <vcom_ReceiveInit+0x74>)
 80035ae:	f007 f805 	bl	800a5bc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80035b2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000608 	.word	0x20000608
 80035c0:	20000418 	.word	0x20000418
 80035c4:	20000600 	.word	0x20000600

080035c8 <vcom_Resume>:

void vcom_Resume(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035cc:	4808      	ldr	r0, [pc, #32]	; (80035f0 <vcom_Resume+0x28>)
 80035ce:	f006 ffa5 	bl	800a51c <HAL_UART_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <vcom_Resume+0x14>
  {
    Error_Handler();
 80035d8:	f7fe fcb0 	bl	8001f3c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035dc:	4805      	ldr	r0, [pc, #20]	; (80035f4 <vcom_Resume+0x2c>)
 80035de:	f001 fb39 	bl	8004c54 <HAL_DMA_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <vcom_Resume+0x24>
  {
    Error_Handler();
 80035e8:	f7fe fca8 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000418 	.word	0x20000418
 80035f4:	20000540 	.word	0x20000540

080035f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_UART_TxCpltCallback+0x24>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d103      	bne.n	8003612 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_UART_TxCpltCallback+0x28>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2000      	movs	r0, #0
 8003610:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40013800 	.word	0x40013800
 8003620:	20000604 	.word	0x20000604

08003624 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_UART_RxCpltCallback+0x54>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d113      	bne.n	800365e <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_UART_RxCpltCallback+0x58>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_UART_RxCpltCallback+0x30>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_UART_RxCpltCallback+0x58>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2200      	movs	r2, #0
 800364e:	2101      	movs	r1, #1
 8003650:	480b      	ldr	r0, [pc, #44]	; (8003680 <HAL_UART_RxCpltCallback+0x5c>)
 8003652:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003654:	2201      	movs	r2, #1
 8003656:	490a      	ldr	r1, [pc, #40]	; (8003680 <HAL_UART_RxCpltCallback+0x5c>)
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f006 ffaf 	bl	800a5bc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <HAL_UART_RxCpltCallback+0x60>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d102      	bne.n	800366e <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_UART_RxCpltCallback+0x64>)
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40013800 	.word	0x40013800
 800367c:	20000608 	.word	0x20000608
 8003680:	20000600 	.word	0x20000600
 8003684:	40004400 	.word	0x40004400
 8003688:	20000008 	.word	0x20000008

0800368c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800368c:	480d      	ldr	r0, [pc, #52]	; (80036c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800368e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003690:	f7ff f98b 	bl	80029aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <LoopForever+0xe>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800369e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036ac:	4c0a      	ldr	r4, [pc, #40]	; (80036d8 <LoopForever+0x16>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036ba:	f01a ff09 	bl	801e4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036be:	f7fe fa47 	bl	8001b50 <main>

080036c2 <LoopForever>:

LoopForever:
    b LoopForever
 80036c2:	e7fe      	b.n	80036c2 <LoopForever>
  ldr   r0, =_estack
 80036c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80036c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036cc:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80036d0:	0801f69c 	.word	0x0801f69c
  ldr r2, =_sbss
 80036d4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80036d8:	20002078 	.word	0x20002078

080036dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036dc:	e7fe      	b.n	80036dc <ADC_IRQHandler>

080036de <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80036e4:	1d3b      	adds	r3, r7, #4
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	609a      	str	r2, [r3, #8]
 80036ee:	60da      	str	r2, [r3, #12]
 80036f0:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80036f2:	2310      	movs	r3, #16
 80036f4:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80036f6:	2301      	movs	r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fe:	2303      	movs	r3, #3
 8003700:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	4619      	mov	r1, r3
 8003706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370a:	f002 f945 	bl	8005998 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800370e:	2320      	movs	r3, #32
 8003710:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	4619      	mov	r1, r3
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800371a:	f002 f93d 	bl	8005998 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800371e:	2200      	movs	r2, #0
 8003720:	2120      	movs	r1, #32
 8003722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003726:	f002 fb65 	bl	8005df4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800372a:	2200      	movs	r2, #0
 800372c:	2110      	movs	r1, #16
 800372e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003732:	f002 fb5f 	bl	8005df4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d83f      	bhi.n	80037d0 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	08003769 	.word	0x08003769
 800375c:	08003783 	.word	0x08003783
 8003760:	0800379d 	.word	0x0800379d
 8003764:	080037b7 	.word	0x080037b7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003768:	2200      	movs	r2, #0
 800376a:	2110      	movs	r1, #16
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003770:	f002 fb40 	bl	8005df4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003774:	2200      	movs	r2, #0
 8003776:	2120      	movs	r1, #32
 8003778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800377c:	f002 fb3a 	bl	8005df4 <HAL_GPIO_WritePin>
      break;      
 8003780:	e027      	b.n	80037d2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003782:	2201      	movs	r2, #1
 8003784:	2110      	movs	r1, #16
 8003786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378a:	f002 fb33 	bl	8005df4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800378e:	2200      	movs	r2, #0
 8003790:	2120      	movs	r1, #32
 8003792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003796:	f002 fb2d 	bl	8005df4 <HAL_GPIO_WritePin>
      break;
 800379a:	e01a      	b.n	80037d2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800379c:	2201      	movs	r2, #1
 800379e:	2110      	movs	r1, #16
 80037a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a4:	f002 fb26 	bl	8005df4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80037a8:	2201      	movs	r2, #1
 80037aa:	2120      	movs	r1, #32
 80037ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b0:	f002 fb20 	bl	8005df4 <HAL_GPIO_WritePin>
      break;
 80037b4:	e00d      	b.n	80037d2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80037b6:	2200      	movs	r2, #0
 80037b8:	2110      	movs	r1, #16
 80037ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037be:	f002 fb19 	bl	8005df4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80037c2:	2201      	movs	r2, #1
 80037c4:	2120      	movs	r1, #32
 80037c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ca:	f002 fb13 	bl	8005df4 <HAL_GPIO_WritePin>
      break;
 80037ce:	e000      	b.n	80037d2 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80037d0:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80037e0:	2302      	movs	r3, #2
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80037ee:	2301      	movs	r3, #1
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80037fc:	2301      	movs	r3, #1
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr

08003806 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003816:	230f      	movs	r3, #15
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e001      	b.n	8003820 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800381c:	2316      	movs	r3, #22
 800381e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003820:	68fb      	ldr	r3, [r7, #12]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <LL_DBGMCU_EnableDBGSleepMode>:
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a03      	ldr	r2, [pc, #12]	; (8003844 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6053      	str	r3, [r2, #4]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	e0042000 	.word	0xe0042000

08003848 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a03      	ldr	r2, [pc, #12]	; (8003860 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003852:	f043 0302 	orr.w	r3, r3, #2
 8003856:	6053      	str	r3, [r2, #4]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	e0042000 	.word	0xe0042000

08003864 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003868:	4b04      	ldr	r3, [pc, #16]	; (800387c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a03      	ldr	r2, [pc, #12]	; (800387c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800386e:	f043 0304 	orr.w	r3, r3, #4
 8003872:	6053      	str	r3, [r2, #4]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	e0042000 	.word	0xe0042000

08003880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388a:	2003      	movs	r0, #3
 800388c:	f001 f9a0 	bl	8004bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003890:	f004 ffac 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 8003894:	4603      	mov	r3, r0
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_Init+0x3c>)
 8003898:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800389a:	200f      	movs	r0, #15
 800389c:	f7ff f804 	bl	80028a8 <HAL_InitTick>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	71fb      	strb	r3, [r7, #7]
 80038aa:	e001      	b.n	80038b0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80038ac:	f7fe fd7f 	bl	80023ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038b0:	79fb      	ldrb	r3, [r7, #7]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_SuspendTick+0x18>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_SuspendTick+0x18>)
 80038ca:	f023 0302 	bic.w	r3, r3, #2
 80038ce:	6013      	str	r3, [r2, #0]
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_ResumeTick+0x18>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <HAL_ResumeTick+0x18>)
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	6013      	str	r3, [r2, #0]
}
 80038ec:	bf00      	nop
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <HAL_GetUIDw0+0x10>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr
 8003908:	1fff7590 	.word	0x1fff7590

0800390c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003910:	4b02      	ldr	r3, [pc, #8]	; (800391c <HAL_GetUIDw1+0x10>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	1fff7594 	.word	0x1fff7594

08003920 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003924:	4b02      	ldr	r3, [pc, #8]	; (8003930 <HAL_GetUIDw2+0x10>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	1fff7598 	.word	0x1fff7598

08003934 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003938:	f7ff ff78 	bl	800382c <LL_DBGMCU_EnableDBGSleepMode>
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003944:	f7ff ff80 	bl	8003848 <LL_DBGMCU_EnableDBGStopMode>
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003950:	f7ff ff88 	bl	8003864 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003954:	bf00      	nop
 8003956:	bd80      	pop	{r7, pc}

08003958 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2107      	movs	r1, #7
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	401a      	ands	r2, r3
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	431a      	orrs	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2107      	movs	r1, #7
 80039e8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ec:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	210f      	movs	r1, #15
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	401a      	ands	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0e9b      	lsrs	r3, r3, #26
 8003a4a:	f003 010f 	and.w	r1, r3, #15
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	401a      	ands	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	0219      	lsls	r1, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	400b      	ands	r3, r1
 8003ad2:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003ad6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003afa:	f023 0317 	bic.w	r3, r3, #23
 8003afe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b20:	f023 0317 	bic.w	r3, r3, #23
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6093      	str	r3, [r2, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b46:	d101      	bne.n	8003b4c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b68:	f023 0317 	bic.w	r3, r3, #23
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b8e:	f023 0317 	bic.w	r3, r3, #23
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <LL_ADC_IsEnabled+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_ADC_IsEnabled+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d101      	bne.n	8003be0 <LL_ADC_IsDisableOngoing+0x18>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <LL_ADC_IsDisableOngoing+0x1a>
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bfc:	f023 0317 	bic.w	r3, r3, #23
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c22:	f023 0317 	bic.w	r3, r3, #23
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d101      	bne.n	8003c50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e17e      	b.n	8003f7c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d109      	bne.n	8003ca0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7fd fab7 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff44 	bl	8003b32 <LL_ADC_IsInternalRegulatorEnabled>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d115      	bne.n	8003cdc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff18 	bl	8003aea <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cba:	4b9e      	ldr	r3, [pc, #632]	; (8003f34 <HAL_ADC_Init+0x2d8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	099b      	lsrs	r3, r3, #6
 8003cc0:	4a9d      	ldr	r2, [pc, #628]	; (8003f38 <HAL_ADC_Init+0x2dc>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	3301      	adds	r3, #1
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cce:	e002      	b.n	8003cd6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f9      	bne.n	8003cd0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff26 	bl	8003b32 <LL_ADC_IsInternalRegulatorEnabled>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff ff93 	bl	8003c38 <LL_ADC_REG_IsConversionOngoing>
 8003d12:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f040 8124 	bne.w	8003f6a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 8120 	bne.w	8003f6a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d32:	f043 0202 	orr.w	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff ff30 	bl	8003ba4 <LL_ADC_IsEnabled>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 80a7 	bne.w	8003e9a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7e1b      	ldrb	r3, [r3, #24]
 8003d54:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d56:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7e5b      	ldrb	r3, [r3, #25]
 8003d5c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7e9b      	ldrb	r3, [r3, #26]
 8003d64:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d66:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_ADC_Init+0x11a>
 8003d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d74:	e000      	b.n	8003d78 <HAL_ADC_Init+0x11c>
 8003d76:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d78:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d7e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da04      	bge.n	8003d92 <HAL_ADC_Init+0x136>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d90:	e001      	b.n	8003d96 <HAL_ADC_Init+0x13a>
 8003d92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003d96:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d9e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003da0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d114      	bne.n	8003ddc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	7e9b      	ldrb	r3, [r3, #26]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d104      	bne.n	8003dc4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e00b      	b.n	8003ddc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f043 0220 	orr.w	r2, r3, #32
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003df0:	4313      	orrs	r3, r2
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003e02:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d111      	bne.n	8003e52 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003e3a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003e40:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003e46:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	4b38      	ldr	r3, [pc, #224]	; (8003f3c <HAL_ADC_Init+0x2e0>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	6979      	ldr	r1, [r7, #20]
 8003e62:	430b      	orrs	r3, r1
 8003e64:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003e6e:	d014      	beq.n	8003e9a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d00f      	beq.n	8003e9a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e82:	d00a      	beq.n	8003e9a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <HAL_ADC_Init+0x2e4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e94:	492a      	ldr	r1, [pc, #168]	; (8003f40 <HAL_ADC_Init+0x2e4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	f7ff fd76 	bl	8003996 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4923      	ldr	r1, [pc, #140]	; (8003f44 <HAL_ADC_Init+0x2e8>)
 8003eb6:	f7ff fd6e 	bl	8003996 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d108      	bne.n	8003ed4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f062 020f 	orn	r2, r2, #15
 8003ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed2:	e017      	b.n	8003f04 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003edc:	d112      	bne.n	8003f04 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	f003 031c 	and.w	r3, r3, #28
 8003ef0:	f06f 020f 	mvn.w	r2, #15
 8003ef4:	fa02 f103 	lsl.w	r1, r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fd61 	bl	80039d2 <LL_ADC_GetSamplingTimeCommonChannels>
 8003f10:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d116      	bne.n	8003f48 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	f023 0303 	bic.w	r3, r3, #3
 8003f28:	f043 0201 	orr.w	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f30:	e023      	b.n	8003f7a <HAL_ADC_Init+0x31e>
 8003f32:	bf00      	nop
 8003f34:	20000004 	.word	0x20000004
 8003f38:	053e2d63 	.word	0x053e2d63
 8003f3c:	1ffffc02 	.word	0x1ffffc02
 8003f40:	40012708 	.word	0x40012708
 8003f44:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f023 0312 	bic.w	r3, r3, #18
 8003f50:	f043 0210 	orr.w	r2, r3, #16
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f043 0201 	orr.w	r2, r3, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003f68:	e007      	b.n	8003f7a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e07a      	b.n	800408c <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 face 	bl	8004544 <ADC_ConversionStop>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fb92 	bl	80046dc <ADC_Disable>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fd9f 	bl	8003b10 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003fe0:	f023 0303 	bic.w	r3, r3, #3
 8003fe4:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f240 329f 	movw	r2, #927	; 0x39f
 8003fee:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68d9      	ldr	r1, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_ADC_DeInit+0x110>)
 8003ffc:	400b      	ands	r3, r1
 8003ffe:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800400e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0207 	bic.w	r2, r2, #7
 800401e:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800402e:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <HAL_ADC_DeInit+0x114>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <HAL_ADC_DeInit+0x114>)
 8004064:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004068:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd f8dc 	bl	8001228 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800408a:	7bfb      	ldrb	r3, [r7, #15]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	833e0200 	.word	0x833e0200
 8004098:	40012708 	.word	0x40012708

0800409c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fdc5 	bl	8003c38 <LL_ADC_REG_IsConversionOngoing>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d132      	bne.n	800411a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_Start+0x26>
 80040be:	2302      	movs	r3, #2
 80040c0:	e02e      	b.n	8004120 <HAL_ADC_Start+0x84>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa80 	bl	80045d0 <ADC_Enable>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d11a      	bne.n	8004110 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	221c      	movs	r2, #28
 80040fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fd6f 	bl	8003bec <LL_ADC_REG_StartConversion>
 800410e:	e006      	b.n	800411e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004118:	e001      	b.n	800411e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800411a:	2302      	movs	r3, #2
 800411c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_ADC_Stop+0x16>
 800413a:	2302      	movs	r3, #2
 800413c:	e022      	b.n	8004184 <HAL_ADC_Stop+0x5c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9fc 	bl	8004544 <ADC_ConversionStop>
 800414c:	4603      	mov	r3, r0
 800414e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d111      	bne.n	800417a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fac0 	bl	80046dc <ADC_Disable>
 800415c:	4603      	mov	r3, r0
 800415e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d102      	bne.n	80041a4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800419e:	2308      	movs	r3, #8
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e010      	b.n	80041c6 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f043 0220 	orr.w	r2, r3, #32
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e077      	b.n	80042b2 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80041c2:	2304      	movs	r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80041c6:	f7fe fb79 	bl	80028bc <HAL_GetTick>
 80041ca:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80041cc:	e021      	b.n	8004212 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d4:	d01d      	beq.n	8004212 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80041d6:	f7fe fb71 	bl	80028bc <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d302      	bcc.n	80041ec <HAL_ADC_PollForConversion+0x60>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d112      	bne.n	8004212 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041fe:	f043 0204 	orr.w	r2, r3, #4
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e04f      	b.n	80042b2 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0d6      	beq.n	80041ce <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fbe6 	bl	8003a02 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d031      	beq.n	80042a0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	7e9b      	ldrb	r3, [r3, #26]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d12d      	bne.n	80042a0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b08      	cmp	r3, #8
 8004250:	d126      	bne.n	80042a0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fcee 	bl	8003c38 <LL_ADC_REG_IsConversionOngoing>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d112      	bne.n	8004288 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 020c 	bic.w	r2, r2, #12
 8004270:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	f043 0201 	orr.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	659a      	str	r2, [r3, #88]	; 0x58
 8004286:	e00b      	b.n	80042a0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7e1b      	ldrb	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	220c      	movs	r2, #12
 80042ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x28>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e110      	b.n	800451e <HAL_ADC_ConfigChannel+0x24a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fc95 	bl	8003c38 <LL_ADC_REG_IsConversionOngoing>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 80f7 	bne.w	8004504 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	f000 80b1 	beq.w	8004482 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004328:	d004      	beq.n	8004334 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800432e:	4a7e      	ldr	r2, [pc, #504]	; (8004528 <HAL_ADC_ConfigChannel+0x254>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d108      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f7ff fb92 	bl	8003a68 <LL_ADC_REG_SetSequencerChAdd>
 8004344:	e041      	b.n	80043ca <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	210f      	movs	r1, #15
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	43db      	mvns	r3, r3
 800435a:	401a      	ands	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_ADC_ConfigChannel+0xa0>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	0e9b      	lsrs	r3, r3, #26
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	e011      	b.n	8004398 <HAL_ADC_ConfigChannel+0xc4>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800438c:	2320      	movs	r3, #32
 800438e:	e003      	b.n	8004398 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	6849      	ldr	r1, [r1, #4]
 800439c:	f001 011f 	and.w	r1, r1, #31
 80043a0:	408b      	lsls	r3, r1
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d808      	bhi.n	80043ca <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f7ff fb2e 	bl	8003a26 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6819      	ldr	r1, [r3, #0]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7ff fb6b 	bl	8003ab2 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f280 8097 	bge.w	8004514 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e6:	4851      	ldr	r0, [pc, #324]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 80043e8:	f7ff fac8 	bl	800397c <LL_ADC_GetCommonPathInternalCh>
 80043ec:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4f      	ldr	r2, [pc, #316]	; (8004530 <HAL_ADC_ConfigChannel+0x25c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d120      	bne.n	800443a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11b      	bne.n	800443a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004408:	4619      	mov	r1, r3
 800440a:	4848      	ldr	r0, [pc, #288]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 800440c:	f7ff faa4 	bl	8003958 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004410:	4b48      	ldr	r3, [pc, #288]	; (8004534 <HAL_ADC_ConfigChannel+0x260>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	4a48      	ldr	r2, [pc, #288]	; (8004538 <HAL_ADC_ConfigChannel+0x264>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800442a:	e002      	b.n	8004432 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	3b01      	subs	r3, #1
 8004430:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f9      	bne.n	800442c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004438:	e06c      	b.n	8004514 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a3f      	ldr	r2, [pc, #252]	; (800453c <HAL_ADC_ConfigChannel+0x268>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10c      	bne.n	800445e <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004454:	4619      	mov	r1, r3
 8004456:	4835      	ldr	r0, [pc, #212]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 8004458:	f7ff fa7e 	bl	8003958 <LL_ADC_SetCommonPathInternalCh>
 800445c:	e05a      	b.n	8004514 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a37      	ldr	r2, [pc, #220]	; (8004540 <HAL_ADC_ConfigChannel+0x26c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d155      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800446e:	2b00      	cmp	r3, #0
 8004470:	d150      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004478:	4619      	mov	r1, r3
 800447a:	482c      	ldr	r0, [pc, #176]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 800447c:	f7ff fa6c 	bl	8003958 <LL_ADC_SetCommonPathInternalCh>
 8004480:	e048      	b.n	8004514 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800448a:	d004      	beq.n	8004496 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004490:	4a25      	ldr	r2, [pc, #148]	; (8004528 <HAL_ADC_ConfigChannel+0x254>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d107      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7ff faf3 	bl	8003a8c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	da32      	bge.n	8004514 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ae:	481f      	ldr	r0, [pc, #124]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 80044b0:	f7ff fa64 	bl	800397c <LL_ADC_GetCommonPathInternalCh>
 80044b4:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_ADC_ConfigChannel+0x25c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d107      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044c6:	4619      	mov	r1, r3
 80044c8:	4818      	ldr	r0, [pc, #96]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 80044ca:	f7ff fa45 	bl	8003958 <LL_ADC_SetCommonPathInternalCh>
 80044ce:	e021      	b.n	8004514 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_ADC_ConfigChannel+0x268>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d107      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e0:	4619      	mov	r1, r3
 80044e2:	4812      	ldr	r0, [pc, #72]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 80044e4:	f7ff fa38 	bl	8003958 <LL_ADC_SetCommonPathInternalCh>
 80044e8:	e014      	b.n	8004514 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a14      	ldr	r2, [pc, #80]	; (8004540 <HAL_ADC_ConfigChannel+0x26c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d10f      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044fa:	4619      	mov	r1, r3
 80044fc:	480b      	ldr	r0, [pc, #44]	; (800452c <HAL_ADC_ConfigChannel+0x258>)
 80044fe:	f7ff fa2b 	bl	8003958 <LL_ADC_SetCommonPathInternalCh>
 8004502:	e007      	b.n	8004514 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800451c:	7ffb      	ldrb	r3, [r7, #31]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	80000004 	.word	0x80000004
 800452c:	40012708 	.word	0x40012708
 8004530:	b0001000 	.word	0xb0001000
 8004534:	20000004 	.word	0x20000004
 8004538:	053e2d63 	.word	0x053e2d63
 800453c:	b8004000 	.word	0xb8004000
 8004540:	b4002000 	.word	0xb4002000

08004544 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fb71 	bl	8003c38 <LL_ADC_REG_IsConversionOngoing>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d033      	beq.n	80045c4 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fb31 	bl	8003bc8 <LL_ADC_IsDisableOngoing>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d104      	bne.n	8004576 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fb4e 	bl	8003c12 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004576:	f7fe f9a1 	bl	80028bc <HAL_GetTick>
 800457a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800457c:	e01b      	b.n	80045b6 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800457e:	f7fe f99d 	bl	80028bc <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d914      	bls.n	80045b6 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459e:	f043 0210 	orr.w	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045aa:	f043 0201 	orr.w	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e007      	b.n	80045c6 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1dc      	bne.n	800457e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045d8:	2300      	movs	r3, #0
 80045da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff fadf 	bl	8003ba4 <LL_ADC_IsEnabled>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d169      	bne.n	80046c0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <ADC_Enable+0xfc>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	f043 0210 	orr.w	r2, r3, #16
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e055      	b.n	80046c2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fa9c 	bl	8003b58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004620:	482b      	ldr	r0, [pc, #172]	; (80046d0 <ADC_Enable+0x100>)
 8004622:	f7ff f9ab 	bl	800397c <LL_ADC_GetCommonPathInternalCh>
 8004626:	4603      	mov	r3, r0
 8004628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004630:	4b28      	ldr	r3, [pc, #160]	; (80046d4 <ADC_Enable+0x104>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	099b      	lsrs	r3, r3, #6
 8004636:	4a28      	ldr	r2, [pc, #160]	; (80046d8 <ADC_Enable+0x108>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004640:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004642:	e002      	b.n	800464a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f9      	bne.n	8004644 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7e5b      	ldrb	r3, [r3, #25]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d033      	beq.n	80046c0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004658:	f7fe f930 	bl	80028bc <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800465e:	e028      	b.n	80046b2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fa9d 	bl	8003ba4 <LL_ADC_IsEnabled>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fa6f 	bl	8003b58 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800467a:	f7fe f91f 	bl	80028bc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d914      	bls.n	80046b2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b01      	cmp	r3, #1
 8004694:	d00d      	beq.n	80046b2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	f043 0210 	orr.w	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e007      	b.n	80046c2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d1cf      	bne.n	8004660 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	80000017 	.word	0x80000017
 80046d0:	40012708 	.word	0x40012708
 80046d4:	20000004 	.word	0x20000004
 80046d8:	053e2d63 	.word	0x053e2d63

080046dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fa6d 	bl	8003bc8 <LL_ADC_IsDisableOngoing>
 80046ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fa55 	bl	8003ba4 <LL_ADC_IsEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d047      	beq.n	8004790 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d144      	bne.n	8004790 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0305 	and.w	r3, r3, #5
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10c      	bne.n	800472e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff fa30 	bl	8003b7e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2203      	movs	r2, #3
 8004724:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004726:	f7fe f8c9 	bl	80028bc <HAL_GetTick>
 800472a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800472c:	e029      	b.n	8004782 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f043 0210 	orr.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	f043 0201 	orr.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e023      	b.n	8004792 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800474a:	f7fe f8b7 	bl	80028bc <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d914      	bls.n	8004782 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476a:	f043 0210 	orr.w	r2, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e007      	b.n	8004792 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1dc      	bne.n	800474a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <LL_ADC_SetCalibrationFactor>:
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047aa:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <LL_ADC_GetCalibrationFactor>:
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <LL_ADC_Enable>:
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	f023 0317 	bic.w	r3, r3, #23
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	609a      	str	r2, [r3, #8]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <LL_ADC_Disable>:
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004814:	f023 0317 	bic.w	r3, r3, #23
 8004818:	f043 0202 	orr.w	r2, r3, #2
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	609a      	str	r2, [r3, #8]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <LL_ADC_IsEnabled>:
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <LL_ADC_IsEnabled+0x18>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_ADC_IsEnabled+0x1a>
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <LL_ADC_StartCalibration>:
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800485e:	f023 0317 	bic.w	r3, r3, #23
 8004862:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <LL_ADC_IsCalibrationOnGoing>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004888:	d101      	bne.n	800488e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr

0800489a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b088      	sub	sp, #32
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d101      	bne.n	80048b8 <HAL_ADCEx_Calibration_Start+0x1e>
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0b9      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0x192>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff ff0b 	bl	80046dc <ADC_Disable>
 80048c6:	4603      	mov	r3, r0
 80048c8:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ffab 	bl	800482a <LL_ADC_IsEnabled>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 809d 	bne.w	8004a16 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048e4:	f043 0202 	orr.w	r2, r3, #2
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	f248 0303 	movw	r3, #32771	; 0x8003
 80048f6:	4013      	ands	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004908:	f023 0303 	bic.w	r3, r3, #3
 800490c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800490e:	2300      	movs	r3, #0
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e02e      	b.n	8004972 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff ff98 	bl	800484e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800491e:	e014      	b.n	800494a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3301      	adds	r3, #1
 8004924:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800492c:	d30d      	bcc.n	800494a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004932:	f023 0312 	bic.w	r3, r3, #18
 8004936:	f043 0210 	orr.w	r2, r3, #16
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e070      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff ff90 	bl	8004874 <LL_ADC_IsCalibrationOnGoing>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e2      	bne.n	8004920 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff2f 	bl	80047c2 <LL_ADC_GetCalibrationFactor>
 8004964:	4602      	mov	r2, r0
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	4413      	add	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	3301      	adds	r3, #1
 8004970:	61fb      	str	r3, [r7, #28]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b07      	cmp	r3, #7
 8004976:	d9cd      	bls.n	8004914 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004980:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ff29 	bl	80047de <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff ff01 	bl	800479a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff31 	bl	8004804 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049a2:	f7fd ff8b 	bl	80028bc <HAL_GetTick>
 80049a6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049a8:	e01c      	b.n	80049e4 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049aa:	f7fd ff87 	bl	80028bc <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d915      	bls.n	80049e4 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff34 	bl	800482a <LL_ADC_IsEnabled>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049cc:	f043 0210 	orr.w	r2, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e023      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff1e 	bl	800482a <LL_ADC_IsEnabled>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1da      	bne.n	80049aa <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68d9      	ldr	r1, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	f043 0201 	orr.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	659a      	str	r2, [r3, #88]	; 0x58
 8004a14:	e005      	b.n	8004a22 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a50:	4013      	ands	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <__NVIC_SetPriorityGrouping+0x44>)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	60d3      	str	r3, [r2, #12]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	e000ed00 	.word	0xe000ed00

08004a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a80:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <__NVIC_GetPriorityGrouping+0x18>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	0a1b      	lsrs	r3, r3, #8
 8004a86:	f003 0307 	and.w	r3, r3, #7
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	db0b      	blt.n	8004ac2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aaa:	79fb      	ldrb	r3, [r7, #7]
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4906      	ldr	r1, [pc, #24]	; (8004acc <__NVIC_EnableIRQ+0x34>)
 8004ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2001      	movs	r0, #1
 8004aba:	fa00 f202 	lsl.w	r2, r0, r2
 8004abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	e000e100 	.word	0xe000e100

08004ad0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db12      	blt.n	8004b08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	f003 021f 	and.w	r2, r3, #31
 8004ae8:	490a      	ldr	r1, [pc, #40]	; (8004b14 <__NVIC_DisableIRQ+0x44>)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	2001      	movs	r0, #1
 8004af2:	fa00 f202 	lsl.w	r2, r0, r2
 8004af6:	3320      	adds	r3, #32
 8004af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004afc:	f3bf 8f4f 	dsb	sy
}
 8004b00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b02:	f3bf 8f6f 	isb	sy
}
 8004b06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	e000e100 	.word	0xe000e100

08004b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	6039      	str	r1, [r7, #0]
 8004b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	db0a      	blt.n	8004b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	490c      	ldr	r1, [pc, #48]	; (8004b64 <__NVIC_SetPriority+0x4c>)
 8004b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b40:	e00a      	b.n	8004b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <__NVIC_SetPriority+0x50>)
 8004b48:	79fb      	ldrb	r3, [r7, #7]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	3b04      	subs	r3, #4
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	440b      	add	r3, r1
 8004b56:	761a      	strb	r2, [r3, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	e000e100 	.word	0xe000e100
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	; 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f1c3 0307 	rsb	r3, r3, #7
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	bf28      	it	cs
 8004b8a:	2304      	movcs	r3, #4
 8004b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d902      	bls.n	8004b9c <NVIC_EncodePriority+0x30>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3b03      	subs	r3, #3
 8004b9a:	e000      	b.n	8004b9e <NVIC_EncodePriority+0x32>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	43da      	mvns	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	43d9      	mvns	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	4313      	orrs	r3, r2
         );
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3724      	adds	r7, #36	; 0x24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff2b 	bl	8004a34 <__NVIC_SetPriorityGrouping>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	4603      	mov	r3, r0
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf4:	f7ff ff42 	bl	8004a7c <__NVIC_GetPriorityGrouping>
 8004bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68b9      	ldr	r1, [r7, #8]
 8004bfe:	6978      	ldr	r0, [r7, #20]
 8004c00:	f7ff ffb4 	bl	8004b6c <NVIC_EncodePriority>
 8004c04:	4602      	mov	r2, r0
 8004c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff ff83 	bl	8004b18 <__NVIC_SetPriority>
}
 8004c12:	bf00      	nop
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff35 	bl	8004a98 <__NVIC_EnableIRQ>
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff43 	bl	8004ad0 <__NVIC_DisableIRQ>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e08e      	b.n	8004d84 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_DMA_Init+0x138>)
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d80f      	bhi.n	8004c92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b45      	ldr	r3, [pc, #276]	; (8004d90 <HAL_DMA_Init+0x13c>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	4a45      	ldr	r2, [pc, #276]	; (8004d94 <HAL_DMA_Init+0x140>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	009a      	lsls	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a42      	ldr	r2, [pc, #264]	; (8004d98 <HAL_DMA_Init+0x144>)
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40
 8004c90:	e00e      	b.n	8004cb0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	4b40      	ldr	r3, [pc, #256]	; (8004d9c <HAL_DMA_Init+0x148>)
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a3d      	ldr	r2, [pc, #244]	; (8004d94 <HAL_DMA_Init+0x140>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	009a      	lsls	r2, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a3c      	ldr	r2, [pc, #240]	; (8004da0 <HAL_DMA_Init+0x14c>)
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6812      	ldr	r2, [r2, #0]
 8004cc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fb30 	bl	8005368 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d10:	d102      	bne.n	8004d18 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_DMA_Init+0x106>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d80c      	bhi.n	8004d5a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fb59 	bl	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	e008      	b.n	8004d6c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40020407 	.word	0x40020407
 8004d90:	bffdfff8 	.word	0xbffdfff8
 8004d94:	cccccccd 	.word	0xcccccccd
 8004d98:	40020000 	.word	0x40020000
 8004d9c:	bffdfbf8 	.word	0xbffdfbf8
 8004da0:	40020400 	.word	0x40020400

08004da4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e07b      	b.n	8004eae <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <HAL_DMA_DeInit+0x114>)
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d80f      	bhi.n	8004df2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <HAL_DMA_DeInit+0x118>)
 8004dda:	4413      	add	r3, r2
 8004ddc:	4a38      	ldr	r2, [pc, #224]	; (8004ec0 <HAL_DMA_DeInit+0x11c>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	091b      	lsrs	r3, r3, #4
 8004de4:	009a      	lsls	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a35      	ldr	r2, [pc, #212]	; (8004ec4 <HAL_DMA_DeInit+0x120>)
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40
 8004df0:	e00e      	b.n	8004e10 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_DMA_DeInit+0x124>)
 8004dfa:	4413      	add	r3, r2
 8004dfc:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_DMA_DeInit+0x11c>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	009a      	lsls	r2, r3, #2
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <HAL_DMA_DeInit+0x128>)
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1c:	f003 021c 	and.w	r2, r3, #28
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fa9b 	bl	8005368 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e42:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00f      	beq.n	8004e6c <HAL_DMA_DeInit+0xc8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d80b      	bhi.n	8004e6c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 facf 	bl	80053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e6a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40020407 	.word	0x40020407
 8004ebc:	bffdfff8 	.word	0xbffdfff8
 8004ec0:	cccccccd 	.word	0xcccccccd
 8004ec4:	40020000 	.word	0x40020000
 8004ec8:	bffdfbf8 	.word	0xbffdfbf8
 8004ecc:	40020400 	.word	0x40020400

08004ed0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_DMA_Start_IT+0x20>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e069      	b.n	8004fc4 <HAL_DMA_Start_IT+0xf4>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d155      	bne.n	8004fb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0201 	bic.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68b9      	ldr	r1, [r7, #8]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f9e0 	bl	80052ee <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d008      	beq.n	8004f48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 020e 	orr.w	r2, r2, #14
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e00f      	b.n	8004f68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 020a 	orr.w	r2, r2, #10
 8004f66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e008      	b.n	8004fc2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e04f      	b.n	800507e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d008      	beq.n	8004ffc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2204      	movs	r2, #4
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e040      	b.n	800507e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 020e 	bic.w	r2, r2, #14
 800500a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800501a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	f003 021c 	and.w	r2, r3, #28
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	2101      	movs	r1, #1
 800503a:	fa01 f202 	lsl.w	r2, r1, r2
 800503e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005048:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005060:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800506a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d005      	beq.n	80050ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2204      	movs	r2, #4
 80050a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
 80050aa:	e047      	b.n	800513c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 020e 	bic.w	r2, r2, #14
 80050ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	f003 021c 	and.w	r2, r3, #28
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f202 	lsl.w	r2, r1, r2
 80050ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005110:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800511a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
    }
  }
  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005164:	f003 031c 	and.w	r3, r3, #28
 8005168:	2204      	movs	r2, #4
 800516a:	409a      	lsls	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d027      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7c>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b00      	cmp	r3, #0
 800517c:	d022      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0204 	bic.w	r2, r2, #4
 800519a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f003 021c 	and.w	r2, r3, #28
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2104      	movs	r1, #4
 80051aa:	fa01 f202 	lsl.w	r2, r1, r2
 80051ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8081 	beq.w	80052bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80051c2:	e07b      	b.n	80052bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	f003 031c 	and.w	r3, r3, #28
 80051cc:	2202      	movs	r2, #2
 80051ce:	409a      	lsls	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d03d      	beq.n	8005254 <HAL_DMA_IRQHandler+0x10c>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d038      	beq.n	8005254 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10b      	bne.n	8005208 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 020a 	bic.w	r2, r2, #10
 80051fe:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <HAL_DMA_IRQHandler+0x180>)
 8005210:	429a      	cmp	r2, r3
 8005212:	d909      	bls.n	8005228 <HAL_DMA_IRQHandler+0xe0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	f003 031c 	and.w	r3, r3, #28
 800521c:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <HAL_DMA_IRQHandler+0x184>)
 800521e:	2102      	movs	r1, #2
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	e008      	b.n	800523a <HAL_DMA_IRQHandler+0xf2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522c:	f003 031c 	and.w	r3, r3, #28
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_DMA_IRQHandler+0x188>)
 8005232:	2102      	movs	r1, #2
 8005234:	fa01 f303 	lsl.w	r3, r1, r3
 8005238:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d038      	beq.n	80052bc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005252:	e033      	b.n	80052bc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	f003 031c 	and.w	r3, r3, #28
 800525c:	2208      	movs	r2, #8
 800525e:	409a      	lsls	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02a      	beq.n	80052be <HAL_DMA_IRQHandler+0x176>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d025      	beq.n	80052be <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 020e 	bic.w	r2, r2, #14
 8005280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	f003 021c 	and.w	r2, r3, #28
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	2101      	movs	r1, #1
 8005290:	fa01 f202 	lsl.w	r2, r1, r2
 8005294:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
}
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40020080 	.word	0x40020080
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020000 	.word	0x40020000

080052d4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052e2:	b2db      	uxtb	r3, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	607a      	str	r2, [r7, #4]
 80052fa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005304:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	2b00      	cmp	r3, #0
 800530c:	d004      	beq.n	8005318 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005316:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	f003 021c 	and.w	r2, r3, #28
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	2101      	movs	r1, #1
 8005326:	fa01 f202 	lsl.w	r2, r1, r2
 800532a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b10      	cmp	r3, #16
 800533a:	d108      	bne.n	800534e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800534c:	e007      	b.n	800535e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005378:	429a      	cmp	r2, r3
 800537a:	d813      	bhi.n	80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005388:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	b2db      	uxtb	r3, r3
 8005396:	3b08      	subs	r3, #8
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	e011      	b.n	80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	089b      	lsrs	r3, r3, #2
 80053aa:	009a      	lsls	r2, r3, #2
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80053ae:	4413      	add	r3, r2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	3b08      	subs	r3, #8
 80053bc:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	3307      	adds	r3, #7
 80053c6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80053cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2201      	movs	r2, #1
 80053d6:	409a      	lsls	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40020407 	.word	0x40020407
 80053ec:	cccccccd 	.word	0xcccccccd
 80053f0:	4002081c 	.word	0x4002081c
 80053f4:	40020880 	.word	0x40020880

080053f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005408:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a08      	ldr	r2, [pc, #32]	; (800543c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800541c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3b01      	subs	r3, #1
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2201      	movs	r2, #1
 8005428:	409a      	lsls	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr
 8005438:	1000823f 	.word	0x1000823f
 800543c:	40020940 	.word	0x40020940

08005440 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d12b      	bne.n	80054ae <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005460:	2302      	movs	r3, #2
 8005462:	e028      	b.n	80054b6 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	3b01      	subs	r3, #1
 8005480:	04db      	lsls	r3, r3, #19
 8005482:	431a      	orrs	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	431a      	orrs	r2, r3
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	7a1b      	ldrb	r3, [r3, #8]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	431a      	orrs	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	7a5b      	ldrb	r3, [r3, #9]
 8005496:	025b      	lsls	r3, r3, #9
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549e:	430a      	orrs	r2, r1
 80054a0:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e003      	b.n	80054b6 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2280      	movs	r2, #128	; 0x80
 80054b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
  }
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01a      	beq.n	800550e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	2b00      	cmp	r3, #0
 8005514:	d022      	beq.n	800555c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01a      	beq.n	800555c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005534:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800553e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005544:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
      }
    }
  }
}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <HAL_FLASH_Program+0x80>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_FLASH_Program+0x1a>
 800557a:	2302      	movs	r3, #2
 800557c:	e02d      	b.n	80055da <HAL_FLASH_Program+0x76>
 800557e:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_FLASH_Program+0x80>)
 8005580:	2201      	movs	r2, #1
 8005582:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005584:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <HAL_FLASH_Program+0x80>)
 8005586:	2200      	movs	r2, #0
 8005588:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800558a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800558e:	f000 f869 	bl	8005664 <FLASH_WaitForLastOperation>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d11a      	bne.n	80055d2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d105      	bne.n	80055ae <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80055a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f000 f8be 	bl	8005728 <FLASH_Program_DoubleWord>
 80055ac:	e004      	b.n	80055b8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	4619      	mov	r1, r3
 80055b2:	68b8      	ldr	r0, [r7, #8]
 80055b4:	f000 f8de 	bl	8005774 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80055b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055bc:	f000 f852 	bl	8005664 <FLASH_WaitForLastOperation>
 80055c0:	4603      	mov	r3, r0
 80055c2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80055c4:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <HAL_FLASH_Program+0x84>)
 80055c6:	695a      	ldr	r2, [r3, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43db      	mvns	r3, r3
 80055cc:	4906      	ldr	r1, [pc, #24]	; (80055e8 <HAL_FLASH_Program+0x84>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055d2:	4b04      	ldr	r3, [pc, #16]	; (80055e4 <HAL_FLASH_Program+0x80>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	2000060c 	.word	0x2000060c
 80055e8:	58004000 	.word	0x58004000

080055ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_FLASH_Unlock+0x38>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da0b      	bge.n	8005616 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80055fe:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_FLASH_Unlock+0x38>)
 8005600:	4a09      	ldr	r2, [pc, #36]	; (8005628 <HAL_FLASH_Unlock+0x3c>)
 8005602:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <HAL_FLASH_Unlock+0x38>)
 8005606:	4a09      	ldr	r2, [pc, #36]	; (800562c <HAL_FLASH_Unlock+0x40>)
 8005608:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_FLASH_Unlock+0x38>)
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	da01      	bge.n	8005616 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005616:	79fb      	ldrb	r3, [r7, #7]
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	58004000 	.word	0x58004000
 8005628:	45670123 	.word	0x45670123
 800562c:	cdef89ab 	.word	0xcdef89ab

08005630 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <HAL_FLASH_Lock+0x30>)
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	4a08      	ldr	r2, [pc, #32]	; (8005660 <HAL_FLASH_Lock+0x30>)
 8005640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005644:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_FLASH_Lock+0x30>)
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	db01      	blt.n	8005652 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005652:	79fb      	ldrb	r3, [r7, #7]
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	58004000 	.word	0x58004000

08005664 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7fd f926 	bl	80028bc <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005672:	e009      	b.n	8005688 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005674:	f7fd f922 	bl	80028bc <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d801      	bhi.n	8005688 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e047      	b.n	8005718 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005694:	d0ee      	beq.n	8005674 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80056a6:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 80056a8:	2201      	movs	r2, #1
 80056aa:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80056b2:	4013      	ands	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <FLASH_WaitForLastOperation+0x6c>
 80056c0:	4b17      	ldr	r3, [pc, #92]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 80056c2:	699a      	ldr	r2, [r3, #24]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80056ca:	4915      	ldr	r1, [pc, #84]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	618b      	str	r3, [r1, #24]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <FLASH_WaitForLastOperation+0x80>
 80056da:	4a11      	ldr	r2, [pc, #68]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80056e2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00e      	beq.n	8005708 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80056ea:	4a0e      	ldr	r2, [pc, #56]	; (8005724 <FLASH_WaitForLastOperation+0xc0>)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e011      	b.n	8005718 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80056f4:	f7fd f8e2 	bl	80028bc <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d801      	bhi.n	8005708 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e007      	b.n	8005718 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <FLASH_WaitForLastOperation+0xbc>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005714:	d0ee      	beq.n	80056f4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	58004000 	.word	0x58004000
 8005724:	2000060c 	.word	0x2000060c

08005728 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005734:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <FLASH_Program_DoubleWord+0x48>)
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <FLASH_Program_DoubleWord+0x48>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005746:	f3bf 8f6f 	isb	sy
}
 800574a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800574c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	f04f 0300 	mov.w	r3, #0
 8005758:	000a      	movs	r2, r1
 800575a:	2300      	movs	r3, #0
 800575c:	68f9      	ldr	r1, [r7, #12]
 800575e:	3104      	adds	r1, #4
 8005760:	4613      	mov	r3, r2
 8005762:	600b      	str	r3, [r1, #0]
}
 8005764:	bf00      	nop
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	58004000 	.word	0x58004000

08005774 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800578a:	4b18      	ldr	r3, [pc, #96]	; (80057ec <FLASH_Program_Fast+0x78>)
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4a17      	ldr	r2, [pc, #92]	; (80057ec <FLASH_Program_Fast+0x78>)
 8005790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005794:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005796:	f3ef 8310 	mrs	r3, PRIMASK
 800579a:	60fb      	str	r3, [r7, #12]
  return(result);
 800579c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800579e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80057a0:	b672      	cpsid	i
}
 80057a2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	3304      	adds	r3, #4
 80057b0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3304      	adds	r3, #4
 80057b6:	617b      	str	r3, [r7, #20]
    row_index--;
 80057b8:	7ffb      	ldrb	r3, [r7, #31]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1ef      	bne.n	80057a4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80057c4:	bf00      	nop
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <FLASH_Program_Fast+0x78>)
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d2:	d0f8      	beq.n	80057c6 <FLASH_Program_Fast+0x52>
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f383 8810 	msr	PRIMASK, r3
}
 80057de:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80057e0:	bf00      	nop
 80057e2:	3724      	adds	r7, #36	; 0x24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	58004000 	.word	0x58004000

080057f0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80057fa:	4b28      	ldr	r3, [pc, #160]	; (800589c <HAL_FLASHEx_Erase+0xac>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d101      	bne.n	8005806 <HAL_FLASHEx_Erase+0x16>
 8005802:	2302      	movs	r3, #2
 8005804:	e046      	b.n	8005894 <HAL_FLASHEx_Erase+0xa4>
 8005806:	4b25      	ldr	r3, [pc, #148]	; (800589c <HAL_FLASHEx_Erase+0xac>)
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800580c:	4b23      	ldr	r3, [pc, #140]	; (800589c <HAL_FLASHEx_Erase+0xac>)
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005816:	f7ff ff25 	bl	8005664 <FLASH_WaitForLastOperation>
 800581a:	4603      	mov	r3, r0
 800581c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d133      	bne.n	800588c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d108      	bne.n	800583e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 800582c:	f000 f838 	bl	80058a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005834:	f7ff ff16 	bl	8005664 <FLASH_WaitForLastOperation>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]
 800583c:	e024      	b.n	8005888 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f04f 32ff 	mov.w	r2, #4294967295
 8005844:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	e012      	b.n	8005874 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800584e:	68b8      	ldr	r0, [r7, #8]
 8005850:	f000 f836 	bl	80058c0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005858:	f7ff ff04 	bl	8005664 <FLASH_WaitForLastOperation>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	601a      	str	r2, [r3, #0]
          break;
 800586c:	e00a      	b.n	8005884 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3301      	adds	r3, #1
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4413      	add	r3, r2
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d3e4      	bcc.n	800584e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005884:	f000 f878 	bl	8005978 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005888:	f000 f832 	bl	80058f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800588c:	4b03      	ldr	r3, [pc, #12]	; (800589c <HAL_FLASHEx_Erase+0xac>)
 800588e:	2200      	movs	r2, #0
 8005890:	701a      	strb	r2, [r3, #0]

  return status;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	2000060c 	.word	0x2000060c

080058a0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <FLASH_MassErase+0x1c>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	4a04      	ldr	r2, [pc, #16]	; (80058bc <FLASH_MassErase+0x1c>)
 80058aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ae:	f043 0304 	orr.w	r3, r3, #4
 80058b2:	6153      	str	r3, [r2, #20]
#endif
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr
 80058bc:	58004000 	.word	0x58004000

080058c0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80058c8:	4b08      	ldr	r3, [pc, #32]	; (80058ec <FLASH_PageErase+0x2c>)
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	4313      	orrs	r3, r2
 80058d6:	4a05      	ldr	r2, [pc, #20]	; (80058ec <FLASH_PageErase+0x2c>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	f043 0302 	orr.w	r3, r3, #2
 80058e0:	6153      	str	r3, [r2, #20]
#endif
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc80      	pop	{r7}
 80058ea:	4770      	bx	lr
 80058ec:	58004000 	.word	0x58004000

080058f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80058f4:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <FLASH_FlushCaches+0x84>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d117      	bne.n	8005930 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005900:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005906:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800590a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <FLASH_FlushCaches+0x84>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <FLASH_FlushCaches+0x84>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <FLASH_FlushCaches+0x84>)
 800591e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005922:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a12      	ldr	r2, [pc, #72]	; (8005974 <FLASH_FlushCaches+0x84>)
 800592a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800592e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005930:	4b10      	ldr	r3, [pc, #64]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005938:	2b01      	cmp	r3, #1
 800593a:	d117      	bne.n	800596c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800593c:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <FLASH_FlushCaches+0x84>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a0c      	ldr	r2, [pc, #48]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005946:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <FLASH_FlushCaches+0x84>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <FLASH_FlushCaches+0x84>)
 800594e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b07      	ldr	r3, [pc, #28]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a06      	ldr	r2, [pc, #24]	; (8005974 <FLASH_FlushCaches+0x84>)
 800595a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800595e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005960:	4b04      	ldr	r3, [pc, #16]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a03      	ldr	r2, [pc, #12]	; (8005974 <FLASH_FlushCaches+0x84>)
 8005966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800596a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	58004000 	.word	0x58004000

08005978 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800597c:	4b05      	ldr	r3, [pc, #20]	; (8005994 <FLASH_AcknowledgePageErase+0x1c>)
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	4a04      	ldr	r2, [pc, #16]	; (8005994 <FLASH_AcknowledgePageErase+0x1c>)
 8005982:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005986:	f023 0302 	bic.w	r3, r3, #2
 800598a:	6153      	str	r3, [r2, #20]
#endif
}
 800598c:	bf00      	nop
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr
 8005994:	58004000 	.word	0x58004000

08005998 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059a6:	e140      	b.n	8005c2a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	2101      	movs	r1, #1
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	fa01 f303 	lsl.w	r3, r1, r3
 80059b4:	4013      	ands	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8132 	beq.w	8005c24 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d005      	beq.n	80059d8 <HAL_GPIO_Init+0x40>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d130      	bne.n	8005a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2203      	movs	r2, #3
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	4013      	ands	r3, r2
 80059ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a0e:	2201      	movs	r2, #1
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43db      	mvns	r3, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 0201 	and.w	r2, r3, #1
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d017      	beq.n	8005a76 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	2203      	movs	r2, #3
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d123      	bne.n	8005aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	08da      	lsrs	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	3208      	adds	r2, #8
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	220f      	movs	r2, #15
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	08da      	lsrs	r2, r3, #3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3208      	adds	r2, #8
 8005ac4:	6939      	ldr	r1, [r7, #16]
 8005ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	2203      	movs	r2, #3
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43db      	mvns	r3, r3
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 0203 	and.w	r2, r3, #3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 808c 	beq.w	8005c24 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005b0c:	4a4e      	ldr	r2, [pc, #312]	; (8005c48 <HAL_GPIO_Init+0x2b0>)
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	089b      	lsrs	r3, r3, #2
 8005b12:	3302      	adds	r3, #2
 8005b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	2207      	movs	r2, #7
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b36:	d00d      	beq.n	8005b54 <HAL_GPIO_Init+0x1bc>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a44      	ldr	r2, [pc, #272]	; (8005c4c <HAL_GPIO_Init+0x2b4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <HAL_GPIO_Init+0x1b8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a43      	ldr	r2, [pc, #268]	; (8005c50 <HAL_GPIO_Init+0x2b8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d101      	bne.n	8005b4c <HAL_GPIO_Init+0x1b4>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e004      	b.n	8005b56 <HAL_GPIO_Init+0x1be>
 8005b4c:	2307      	movs	r3, #7
 8005b4e:	e002      	b.n	8005b56 <HAL_GPIO_Init+0x1be>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <HAL_GPIO_Init+0x1be>
 8005b54:	2300      	movs	r3, #0
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	f002 0203 	and.w	r2, r2, #3
 8005b5c:	0092      	lsls	r2, r2, #2
 8005b5e:	4093      	lsls	r3, r2
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b66:	4938      	ldr	r1, [pc, #224]	; (8005c48 <HAL_GPIO_Init+0x2b0>)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	089b      	lsrs	r3, r3, #2
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b74:	4b37      	ldr	r3, [pc, #220]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b98:	4a2e      	ldr	r2, [pc, #184]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b9e:	4b2d      	ldr	r3, [pc, #180]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4013      	ands	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bc2:	4a24      	ldr	r2, [pc, #144]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005bc8:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bce:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	43db      	mvns	r3, r3
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005bee:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005bf6:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4013      	ands	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005c1c:	4a0d      	ldr	r2, [pc, #52]	; (8005c54 <HAL_GPIO_Init+0x2bc>)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	3301      	adds	r3, #1
 8005c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f47f aeb7 	bne.w	80059a8 <HAL_GPIO_Init+0x10>
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000
 8005c4c:	48000400 	.word	0x48000400
 8005c50:	48000800 	.word	0x48000800
 8005c54:	58000800 	.word	0x58000800

08005c58 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005c66:	e0af      	b.n	8005dc8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005c68:	2201      	movs	r2, #1
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	4013      	ands	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 80a2 	beq.w	8005dc2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005c7e:	4a59      	ldr	r2, [pc, #356]	; (8005de4 <HAL_GPIO_DeInit+0x18c>)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	3302      	adds	r3, #2
 8005c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	2207      	movs	r2, #7
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ca6:	d00d      	beq.n	8005cc4 <HAL_GPIO_DeInit+0x6c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a4f      	ldr	r2, [pc, #316]	; (8005de8 <HAL_GPIO_DeInit+0x190>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d007      	beq.n	8005cc0 <HAL_GPIO_DeInit+0x68>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a4e      	ldr	r2, [pc, #312]	; (8005dec <HAL_GPIO_DeInit+0x194>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d101      	bne.n	8005cbc <HAL_GPIO_DeInit+0x64>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e004      	b.n	8005cc6 <HAL_GPIO_DeInit+0x6e>
 8005cbc:	2307      	movs	r3, #7
 8005cbe:	e002      	b.n	8005cc6 <HAL_GPIO_DeInit+0x6e>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_GPIO_DeInit+0x6e>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	f002 0203 	and.w	r2, r2, #3
 8005ccc:	0092      	lsls	r2, r2, #2
 8005cce:	4093      	lsls	r3, r2
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d136      	bne.n	8005d44 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005cd6:	4b46      	ldr	r3, [pc, #280]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005cd8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	4943      	ldr	r1, [pc, #268]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005ce8:	4b41      	ldr	r3, [pc, #260]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005cea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	493f      	ldr	r1, [pc, #252]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005cfa:	4b3d      	ldr	r3, [pc, #244]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	493b      	ldr	r1, [pc, #236]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005d08:	4b39      	ldr	r3, [pc, #228]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	4937      	ldr	r1, [pc, #220]	; (8005df0 <HAL_GPIO_DeInit+0x198>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0303 	and.w	r3, r3, #3
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	2207      	movs	r2, #7
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005d26:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <HAL_GPIO_DeInit+0x18c>)
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	089b      	lsrs	r3, r3, #2
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	43da      	mvns	r2, r3
 8005d36:	482b      	ldr	r0, [pc, #172]	; (8005de4 <HAL_GPIO_DeInit+0x18c>)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	3302      	adds	r3, #2
 8005d40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2103      	movs	r1, #3
 8005d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	08da      	lsrs	r2, r3, #3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3208      	adds	r2, #8
 8005d60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	08d2      	lsrs	r2, r2, #3
 8005d78:	4019      	ands	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	3208      	adds	r2, #8
 8005d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	401a      	ands	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	2103      	movs	r1, #3
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af49 	bne.w	8005c68 <HAL_GPIO_DeInit+0x10>
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc80      	pop	{r7}
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40010000 	.word	0x40010000
 8005de8:	48000400 	.word	0x48000400
 8005dec:	48000800 	.word	0x48000800
 8005df0:	58000800 	.word	0x58000800

08005df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	807b      	strh	r3, [r7, #2]
 8005e00:	4613      	mov	r3, r2
 8005e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e04:	787b      	ldrb	r3, [r7, #1]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e0a:	887a      	ldrh	r2, [r7, #2]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e10:	e002      	b.n	8005e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e12:	887a      	ldrh	r2, [r7, #2]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005e34:	887a      	ldrh	r2, [r7, #2]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	041a      	lsls	r2, r3, #16
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	43d9      	mvns	r1, r3
 8005e40:	887b      	ldrh	r3, [r7, #2]
 8005e42:	400b      	ands	r3, r1
 8005e44:	431a      	orrs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	619a      	str	r2, [r3, #24]
}
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e081      	b.n	8005f6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fb fde6 	bl	8001a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ea4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	e006      	b.n	8005edc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d104      	bne.n	8005eee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69d9      	ldr	r1, [r3, #28]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	607a      	str	r2, [r7, #4]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	460b      	mov	r3, r1
 8005f82:	817b      	strh	r3, [r7, #10]
 8005f84:	4613      	mov	r3, r2
 8005f86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	f040 80da 	bne.w	800614a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2C_Master_Transmit+0x30>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e0d3      	b.n	800614c <HAL_I2C_Master_Transmit+0x1d8>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fac:	f7fc fc86 	bl	80028bc <HAL_GetTick>
 8005fb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2319      	movs	r3, #25
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f001 f84a 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0be      	b.n	800614c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	893a      	ldrh	r2, [r7, #8]
 8005fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2bff      	cmp	r3, #255	; 0xff
 8005ffe:	d90e      	bls.n	800601e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	b2da      	uxtb	r2, r3
 800600c:	8979      	ldrh	r1, [r7, #10]
 800600e:	4b51      	ldr	r3, [pc, #324]	; (8006154 <HAL_I2C_Master_Transmit+0x1e0>)
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f001 fa34 	bl	8007484 <I2C_TransferConfig>
 800601c:	e06c      	b.n	80060f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	b2da      	uxtb	r2, r3
 800602e:	8979      	ldrh	r1, [r7, #10]
 8006030:	4b48      	ldr	r3, [pc, #288]	; (8006154 <HAL_I2C_Master_Transmit+0x1e0>)
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f001 fa23 	bl	8007484 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800603e:	e05b      	b.n	80060f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	6a39      	ldr	r1, [r7, #32]
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f001 f847 	bl	80070d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e07b      	b.n	800614c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	781a      	ldrb	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d034      	beq.n	80060f8 <HAL_I2C_Master_Transmit+0x184>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	2b00      	cmp	r3, #0
 8006094:	d130      	bne.n	80060f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	2200      	movs	r2, #0
 800609e:	2180      	movs	r1, #128	; 0x80
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 ffd9 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e04d      	b.n	800614c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2bff      	cmp	r3, #255	; 0xff
 80060b8:	d90e      	bls.n	80060d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	8979      	ldrh	r1, [r7, #10]
 80060c8:	2300      	movs	r3, #0
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f001 f9d7 	bl	8007484 <I2C_TransferConfig>
 80060d6:	e00f      	b.n	80060f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	8979      	ldrh	r1, [r7, #10]
 80060ea:	2300      	movs	r3, #0
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f001 f9c6 	bl	8007484 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d19e      	bne.n	8006040 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	6a39      	ldr	r1, [r7, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f001 f826 	bl	8007158 <I2C_WaitOnSTOPFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e01a      	b.n	800614c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2220      	movs	r2, #32
 800611c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6859      	ldr	r1, [r3, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_I2C_Master_Transmit+0x1e4>)
 800612a:	400b      	ands	r3, r1
 800612c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e000      	b.n	800614c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	80002000 	.word	0x80002000
 8006158:	fe00e800 	.word	0xfe00e800

0800615c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	607a      	str	r2, [r7, #4]
 8006166:	461a      	mov	r2, r3
 8006168:	460b      	mov	r3, r1
 800616a:	817b      	strh	r3, [r7, #10]
 800616c:	4613      	mov	r3, r2
 800616e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b20      	cmp	r3, #32
 800617a:	f040 80db 	bne.w	8006334 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_I2C_Master_Receive+0x30>
 8006188:	2302      	movs	r3, #2
 800618a:	e0d4      	b.n	8006336 <HAL_I2C_Master_Receive+0x1da>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006194:	f7fc fb92 	bl	80028bc <HAL_GetTick>
 8006198:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	2319      	movs	r3, #25
 80061a0:	2201      	movs	r2, #1
 80061a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 ff56 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e0bf      	b.n	8006336 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2222      	movs	r2, #34	; 0x22
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2210      	movs	r2, #16
 80061c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	893a      	ldrh	r2, [r7, #8]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2bff      	cmp	r3, #255	; 0xff
 80061e6:	d90e      	bls.n	8006206 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	22ff      	movs	r2, #255	; 0xff
 80061ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	8979      	ldrh	r1, [r7, #10]
 80061f6:	4b52      	ldr	r3, [pc, #328]	; (8006340 <HAL_I2C_Master_Receive+0x1e4>)
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f001 f940 	bl	8007484 <I2C_TransferConfig>
 8006204:	e06d      	b.n	80062e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	b2da      	uxtb	r2, r3
 8006216:	8979      	ldrh	r1, [r7, #10]
 8006218:	4b49      	ldr	r3, [pc, #292]	; (8006340 <HAL_I2C_Master_Receive+0x1e4>)
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f001 f92f 	bl	8007484 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006226:	e05c      	b.n	80062e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	6a39      	ldr	r1, [r7, #32]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 ffcf 	bl	80071d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e07c      	b.n	8006336 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006258:	3b01      	subs	r3, #1
 800625a:	b29a      	uxth	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d034      	beq.n	80062e2 <HAL_I2C_Master_Receive+0x186>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	d130      	bne.n	80062e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	2200      	movs	r2, #0
 8006288:	2180      	movs	r1, #128	; 0x80
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fee4 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e04d      	b.n	8006336 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2bff      	cmp	r3, #255	; 0xff
 80062a2:	d90e      	bls.n	80062c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	22ff      	movs	r2, #255	; 0xff
 80062a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	8979      	ldrh	r1, [r7, #10]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f001 f8e2 	bl	8007484 <I2C_TransferConfig>
 80062c0:	e00f      	b.n	80062e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	8979      	ldrh	r1, [r7, #10]
 80062d4:	2300      	movs	r3, #0
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f001 f8d1 	bl	8007484 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d19d      	bne.n	8006228 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	6a39      	ldr	r1, [r7, #32]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 ff31 	bl	8007158 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e01a      	b.n	8006336 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2220      	movs	r2, #32
 8006306:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6859      	ldr	r1, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <HAL_I2C_Master_Receive+0x1e8>)
 8006314:	400b      	ands	r3, r1
 8006316:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	e000      	b.n	8006336 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	80002400 	.word	0x80002400
 8006344:	fe00e800 	.word	0xfe00e800

08006348 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af02      	add	r7, sp, #8
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	4608      	mov	r0, r1
 8006352:	4611      	mov	r1, r2
 8006354:	461a      	mov	r2, r3
 8006356:	4603      	mov	r3, r0
 8006358:	817b      	strh	r3, [r7, #10]
 800635a:	460b      	mov	r3, r1
 800635c:	813b      	strh	r3, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b20      	cmp	r3, #32
 800636c:	f040 80fd 	bne.w	800656a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_I2C_Mem_Read+0x34>
 8006376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	d105      	bne.n	8006388 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006382:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0f1      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_I2C_Mem_Read+0x4e>
 8006392:	2302      	movs	r3, #2
 8006394:	e0ea      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800639e:	f7fc fa8d 	bl	80028bc <HAL_GetTick>
 80063a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	2319      	movs	r3, #25
 80063aa:	2201      	movs	r2, #1
 80063ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fe51 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0d5      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2222      	movs	r2, #34	; 0x22
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063e8:	88f8      	ldrh	r0, [r7, #6]
 80063ea:	893a      	ldrh	r2, [r7, #8]
 80063ec:	8979      	ldrh	r1, [r7, #10]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4603      	mov	r3, r0
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fa67 	bl	80068cc <I2C_RequestMemoryRead>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e0ad      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	d90e      	bls.n	8006438 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	22ff      	movs	r2, #255	; 0xff
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006424:	b2da      	uxtb	r2, r3
 8006426:	8979      	ldrh	r1, [r7, #10]
 8006428:	4b52      	ldr	r3, [pc, #328]	; (8006574 <HAL_I2C_Mem_Read+0x22c>)
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f001 f827 	bl	8007484 <I2C_TransferConfig>
 8006436:	e00f      	b.n	8006458 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	b2da      	uxtb	r2, r3
 8006448:	8979      	ldrh	r1, [r7, #10]
 800644a:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <HAL_I2C_Mem_Read+0x22c>)
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f001 f816 	bl	8007484 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	2200      	movs	r2, #0
 8006460:	2104      	movs	r1, #4
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fdf8 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e07c      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d034      	beq.n	8006518 <HAL_I2C_Mem_Read+0x1d0>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d130      	bne.n	8006518 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	2200      	movs	r2, #0
 80064be:	2180      	movs	r1, #128	; 0x80
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 fdc9 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e04d      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2bff      	cmp	r3, #255	; 0xff
 80064d8:	d90e      	bls.n	80064f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	22ff      	movs	r2, #255	; 0xff
 80064de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	8979      	ldrh	r1, [r7, #10]
 80064e8:	2300      	movs	r3, #0
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 ffc7 	bl	8007484 <I2C_TransferConfig>
 80064f6:	e00f      	b.n	8006518 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	b2da      	uxtb	r2, r3
 8006508:	8979      	ldrh	r1, [r7, #10]
 800650a:	2300      	movs	r3, #0
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 ffb6 	bl	8007484 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d19a      	bne.n	8006458 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fe16 	bl	8007158 <I2C_WaitOnSTOPFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e01a      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2220      	movs	r2, #32
 800653c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6859      	ldr	r1, [r3, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <HAL_I2C_Mem_Read+0x230>)
 800654a:	400b      	ands	r3, r1
 800654c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	80002400 	.word	0x80002400
 8006578:	fe00e800 	.word	0xfe00e800

0800657c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	4798      	blx	r3
  }
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e0:	f043 0201 	orr.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00f      	beq.n	800661c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660a:	f043 0208 	orr.w	r2, r3, #8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800661a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00f      	beq.n	8006646 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	f043 0202 	orr.w	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006644:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 030b 	and.w	r3, r3, #11
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fbc5 	bl	8006de8 <I2C_ITError>
  }
}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr

08006678 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
 8006696:	4613      	mov	r3, r2
 8006698:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800669a:	bf00      	nop
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr

080066c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <I2C_Slave_ISR_IT+0x24>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e0e1      	b.n	80068c2 <I2C_Slave_ISR_IT+0x1e8>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800671a:	6939      	ldr	r1, [r7, #16]
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f000 fa09 	bl	8006b34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	d04b      	beq.n	80067c4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006732:	2b00      	cmp	r3, #0
 8006734:	d046      	beq.n	80067c4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d128      	bne.n	8006792 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b28      	cmp	r3, #40	; 0x28
 800674a:	d108      	bne.n	800675e <I2C_Slave_ISR_IT+0x84>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006752:	d104      	bne.n	800675e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006754:	6939      	ldr	r1, [r7, #16]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 faf2 	bl	8006d40 <I2C_ITListenCplt>
 800675c:	e031      	b.n	80067c2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b29      	cmp	r3, #41	; 0x29
 8006768:	d10e      	bne.n	8006788 <I2C_Slave_ISR_IT+0xae>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006770:	d00a      	beq.n	8006788 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2210      	movs	r2, #16
 8006778:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fc2b 	bl	8006fd6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f97b 	bl	8006a7c <I2C_ITSlaveSeqCplt>
 8006786:	e01c      	b.n	80067c2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2210      	movs	r2, #16
 800678e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006790:	e08f      	b.n	80068b2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2210      	movs	r2, #16
 8006798:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679e:	f043 0204 	orr.w	r2, r3, #4
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <I2C_Slave_ISR_IT+0xda>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b2:	d17e      	bne.n	80068b2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b8:	4619      	mov	r1, r3
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fb14 	bl	8006de8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067c0:	e077      	b.n	80068b2 <I2C_Slave_ISR_IT+0x1d8>
 80067c2:	e076      	b.n	80068b2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d02f      	beq.n	800682e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02a      	beq.n	800682e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d018      	beq.n	8006814 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d14b      	bne.n	80068b6 <I2C_Slave_ISR_IT+0x1dc>
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006824:	d047      	beq.n	80068b6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f928 	bl	8006a7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800682c:	e043      	b.n	80068b6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006842:	6939      	ldr	r1, [r7, #16]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f895 	bl	8006974 <I2C_ITAddrCplt>
 800684a:	e035      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d030      	beq.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800685c:	2b00      	cmp	r3, #0
 800685e:	d02b      	beq.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d018      	beq.n	800689c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	851a      	strh	r2, [r3, #40]	; 0x28
 800689a:	e00d      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068a2:	d002      	beq.n	80068aa <I2C_Slave_ISR_IT+0x1d0>
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f8e6 	bl	8006a7c <I2C_ITSlaveSeqCplt>
 80068b0:	e002      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80068b6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4603      	mov	r3, r0
 80068dc:	817b      	strh	r3, [r7, #10]
 80068de:	460b      	mov	r3, r1
 80068e0:	813b      	strh	r3, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	8979      	ldrh	r1, [r7, #10]
 80068ec:	4b20      	ldr	r3, [pc, #128]	; (8006970 <I2C_RequestMemoryRead+0xa4>)
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	2300      	movs	r3, #0
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fdc6 	bl	8007484 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	69b9      	ldr	r1, [r7, #24]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fbeb 	bl	80070d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e02c      	b.n	8006966 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d105      	bne.n	800691e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006912:	893b      	ldrh	r3, [r7, #8]
 8006914:	b2da      	uxtb	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
 800691c:	e015      	b.n	800694a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800691e:	893b      	ldrh	r3, [r7, #8]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	b29b      	uxth	r3, r3
 8006924:	b2da      	uxtb	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800692c:	69fa      	ldr	r2, [r7, #28]
 800692e:	69b9      	ldr	r1, [r7, #24]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fbd1 	bl	80070d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e012      	b.n	8006966 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006940:	893b      	ldrh	r3, [r7, #8]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2200      	movs	r2, #0
 8006952:	2140      	movs	r1, #64	; 0x40
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fb7f 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	80002000 	.word	0x80002000

08006974 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800698a:	2b28      	cmp	r3, #40	; 0x28
 800698c:	d16a      	bne.n	8006a64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	0c1b      	lsrs	r3, r3, #16
 8006996:	b2db      	uxtb	r3, r3
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	0c1b      	lsrs	r3, r3, #16
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80069ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80069c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d138      	bne.n	8006a44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80069d2:	897b      	ldrh	r3, [r7, #10]
 80069d4:	09db      	lsrs	r3, r3, #7
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	89bb      	ldrh	r3, [r7, #12]
 80069da:	4053      	eors	r3, r2
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d11c      	bne.n	8006a20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d13b      	bne.n	8006a74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2208      	movs	r2, #8
 8006a08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a12:	89ba      	ldrh	r2, [r7, #12]
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7ff fe36 	bl	800668a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a1e:	e029      	b.n	8006a74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a20:	893b      	ldrh	r3, [r7, #8]
 8006a22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fd5b 	bl	80074e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a36:	89ba      	ldrh	r2, [r7, #12]
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff fe24 	bl	800668a <HAL_I2C_AddrCallback>
}
 8006a42:	e017      	b.n	8006a74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fd4b 	bl	80074e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a56:	89ba      	ldrh	r2, [r7, #12]
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff fe14 	bl	800668a <HAL_I2C_AddrCallback>
}
 8006a62:	e007      	b.n	8006a74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2208      	movs	r2, #8
 8006a6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d008      	beq.n	8006ab0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e00c      	b.n	8006aca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ac8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b29      	cmp	r3, #41	; 0x29
 8006ad4:	d112      	bne.n	8006afc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2228      	movs	r2, #40	; 0x28
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fcfc 	bl	80074e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fdb6 	bl	8006666 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006afa:	e017      	b.n	8006b2c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b2a      	cmp	r3, #42	; 0x2a
 8006b06:	d111      	bne.n	8006b2c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2228      	movs	r2, #40	; 0x28
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2222      	movs	r2, #34	; 0x22
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b16:	2102      	movs	r1, #2
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fce3 	bl	80074e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fda6 	bl	8006678 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b2c:	bf00      	nop
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2220      	movs	r2, #32
 8006b58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b21      	cmp	r3, #33	; 0x21
 8006b5e:	d002      	beq.n	8006b66 <I2C_ITSlaveCplt+0x32>
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b29      	cmp	r3, #41	; 0x29
 8006b64:	d108      	bne.n	8006b78 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006b66:	f248 0101 	movw	r1, #32769	; 0x8001
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fcba 	bl	80074e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2221      	movs	r2, #33	; 0x21
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
 8006b76:	e00d      	b.n	8006b94 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b22      	cmp	r3, #34	; 0x22
 8006b7c:	d002      	beq.n	8006b84 <I2C_ITSlaveCplt+0x50>
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	2b2a      	cmp	r3, #42	; 0x2a
 8006b82:	d107      	bne.n	8006b94 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006b84:	f248 0102 	movw	r1, #32770	; 0x8002
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fcab 	bl	80074e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2222      	movs	r2, #34	; 0x22
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ba2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b62      	ldr	r3, [pc, #392]	; (8006d38 <I2C_ITSlaveCplt+0x204>)
 8006bb0:	400b      	ands	r3, r1
 8006bb2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fa0e 	bl	8006fd6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d013      	beq.n	8006bec <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01f      	beq.n	8006c1c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bea:	e017      	b.n	8006c1c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d006      	beq.n	8006c1c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d020      	beq.n	8006c68 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f023 0304 	bic.w	r3, r3, #4
 8006c2c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00c      	beq.n	8006c68 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c76:	f043 0204 	orr.w	r2, r3, #4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d010      	beq.n	8006cb6 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f8a4 	bl	8006de8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b28      	cmp	r3, #40	; 0x28
 8006caa:	d141      	bne.n	8006d30 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006cac:	6979      	ldr	r1, [r7, #20]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f846 	bl	8006d40 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cb4:	e03c      	b.n	8006d30 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cbe:	d014      	beq.n	8006cea <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fedb 	bl	8006a7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	; (8006d3c <I2C_ITSlaveCplt+0x208>)
 8006cca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff fcde 	bl	80066a4 <HAL_I2C_ListenCpltCallback>
}
 8006ce8:	e022      	b.n	8006d30 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b22      	cmp	r3, #34	; 0x22
 8006cf4:	d10e      	bne.n	8006d14 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff fcb3 	bl	8006678 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d12:	e00d      	b.n	8006d30 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fc9b 	bl	8006666 <HAL_I2C_SlaveTxCpltCallback>
}
 8006d30:	bf00      	nop
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	fe00e800 	.word	0xfe00e800
 8006d3c:	ffff0000 	.word	0xffff0000

08006d40 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a25      	ldr	r2, [pc, #148]	; (8006de4 <I2C_ITListenCplt+0xa4>)
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d022      	beq.n	8006dbc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d012      	beq.n	8006dbc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	f043 0204 	orr.w	r2, r3, #4
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006dbc:	f248 0103 	movw	r1, #32771	; 0x8003
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fb8f 	bl	80074e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2210      	movs	r2, #16
 8006dcc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fc64 	bl	80066a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	ffff0000 	.word	0xffff0000

08006de8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a5d      	ldr	r2, [pc, #372]	; (8006f7c <I2C_ITError+0x194>)
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b28      	cmp	r3, #40	; 0x28
 8006e1e:	d005      	beq.n	8006e2c <I2C_ITError+0x44>
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b29      	cmp	r3, #41	; 0x29
 8006e24:	d002      	beq.n	8006e2c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2a:	d10b      	bne.n	8006e44 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fb58 	bl	80074e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2228      	movs	r2, #40	; 0x28
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a50      	ldr	r2, [pc, #320]	; (8006f80 <I2C_ITError+0x198>)
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34
 8006e42:	e011      	b.n	8006e68 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e44:	f248 0103 	movw	r1, #32771	; 0x8003
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb4b 	bl	80074e4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b60      	cmp	r3, #96	; 0x60
 8006e58:	d003      	beq.n	8006e62 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d039      	beq.n	8006eea <I2C_ITError+0x102>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b11      	cmp	r3, #17
 8006e7a:	d002      	beq.n	8006e82 <I2C_ITError+0x9a>
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b21      	cmp	r3, #33	; 0x21
 8006e80:	d133      	bne.n	8006eea <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e90:	d107      	bne.n	8006ea2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ea0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fe fa14 	bl	80052d4 <HAL_DMA_GetState>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d017      	beq.n	8006ee2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb6:	4a33      	ldr	r2, [pc, #204]	; (8006f84 <I2C_ITError+0x19c>)
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe f8de 	bl	8005088 <HAL_DMA_Abort_IT>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04d      	beq.n	8006f6e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006edc:	4610      	mov	r0, r2
 8006ede:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ee0:	e045      	b.n	8006f6e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f850 	bl	8006f88 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ee8:	e041      	b.n	8006f6e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d039      	beq.n	8006f66 <I2C_ITError+0x17e>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b12      	cmp	r3, #18
 8006ef6:	d002      	beq.n	8006efe <I2C_ITError+0x116>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b22      	cmp	r3, #34	; 0x22
 8006efc:	d133      	bne.n	8006f66 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0c:	d107      	bne.n	8006f1e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f9d6 	bl	80052d4 <HAL_DMA_GetState>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d017      	beq.n	8006f5e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	4a14      	ldr	r2, [pc, #80]	; (8006f84 <I2C_ITError+0x19c>)
 8006f34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe f8a0 	bl	8005088 <HAL_DMA_Abort_IT>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d011      	beq.n	8006f72 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f58:	4610      	mov	r0, r2
 8006f5a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f5c:	e009      	b.n	8006f72 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f812 	bl	8006f88 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f64:	e005      	b.n	8006f72 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f80e 	bl	8006f88 <I2C_TreatErrorCallback>
  }
}
 8006f6c:	e002      	b.n	8006f74 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f6e:	bf00      	nop
 8006f70:	e000      	b.n	8006f74 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f72:	bf00      	nop
}
 8006f74:	bf00      	nop
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	ffff0000 	.word	0xffff0000
 8006f80:	080066db 	.word	0x080066db
 8006f84:	0800701d 	.word	0x0800701d

08006f88 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b60      	cmp	r3, #96	; 0x60
 8006f9a:	d10e      	bne.n	8006fba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff fb88 	bl	80066c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fb8:	e009      	b.n	8006fce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff fb74 	bl	80066b6 <HAL_I2C_ErrorCallback>
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b083      	sub	sp, #12
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d103      	bne.n	8006ff4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d007      	beq.n	8007012 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	619a      	str	r2, [r3, #24]
  }
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	2200      	movs	r2, #0
 8007038:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	2200      	movs	r2, #0
 8007048:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff ff9c 	bl	8006f88 <I2C_TreatErrorCallback>
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007068:	e022      	b.n	80070b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d01e      	beq.n	80070b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007072:	f7fb fc23 	bl	80028bc <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d113      	bne.n	80070b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e00f      	b.n	80070d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4013      	ands	r3, r2
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	429a      	cmp	r2, r3
 80070be:	bf0c      	ite	eq
 80070c0:	2301      	moveq	r3, #1
 80070c2:	2300      	movne	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	461a      	mov	r2, r3
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d0cd      	beq.n	800706a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070e4:	e02c      	b.n	8007140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f8ea 	bl	80072c4 <I2C_IsErrorOccurred>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e02a      	b.n	8007150 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d01e      	beq.n	8007140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007102:	f7fb fbdb 	bl	80028bc <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	d302      	bcc.n	8007118 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d113      	bne.n	8007140 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711c:	f043 0220 	orr.w	r2, r3, #32
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e007      	b.n	8007150 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b02      	cmp	r3, #2
 800714c:	d1cb      	bne.n	80070e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007164:	e028      	b.n	80071b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f8aa 	bl	80072c4 <I2C_IsErrorOccurred>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e026      	b.n	80071c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717a:	f7fb fb9f 	bl	80028bc <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	d302      	bcc.n	8007190 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d113      	bne.n	80071b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007194:	f043 0220 	orr.w	r2, r3, #32
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e007      	b.n	80071c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d1cf      	bne.n	8007166 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071dc:	e064      	b.n	80072a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f86e 	bl	80072c4 <I2C_IsErrorOccurred>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e062      	b.n	80072b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d138      	bne.n	8007272 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 0304 	and.w	r3, r3, #4
 800720a:	2b04      	cmp	r3, #4
 800720c:	d105      	bne.n	800721a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e04e      	b.n	80072b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f003 0310 	and.w	r3, r3, #16
 8007224:	2b10      	cmp	r3, #16
 8007226:	d107      	bne.n	8007238 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2210      	movs	r2, #16
 800722e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2204      	movs	r2, #4
 8007234:	645a      	str	r2, [r3, #68]	; 0x44
 8007236:	e002      	b.n	800723e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2220      	movs	r2, #32
 8007244:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6859      	ldr	r1, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007252:	400b      	ands	r3, r1
 8007254:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e022      	b.n	80072b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fb fb23 	bl	80028bc <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10f      	bne.n	80072a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	f043 0220 	orr.w	r2, r3, #32
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e007      	b.n	80072b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f003 0304 	and.w	r3, r3, #4
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d193      	bne.n	80071de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	fe00e800 	.word	0xfe00e800

080072c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80072de:	2300      	movs	r3, #0
 80072e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d068      	beq.n	80073c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2210      	movs	r2, #16
 80072f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072f8:	e049      	b.n	800738e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d045      	beq.n	800738e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fb fadb 	bl	80028bc <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <I2C_IsErrorOccurred+0x54>
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d13a      	bne.n	800738e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007322:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800732a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800733a:	d121      	bne.n	8007380 <I2C_IsErrorOccurred+0xbc>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007342:	d01d      	beq.n	8007380 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007344:	7cfb      	ldrb	r3, [r7, #19]
 8007346:	2b20      	cmp	r3, #32
 8007348:	d01a      	beq.n	8007380 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007358:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800735a:	f7fb faaf 	bl	80028bc <HAL_GetTick>
 800735e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007360:	e00e      	b.n	8007380 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007362:	f7fb faab 	bl	80028bc <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b19      	cmp	r3, #25
 800736e:	d907      	bls.n	8007380 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	f043 0320 	orr.w	r3, r3, #32
 8007376:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800737e:	e006      	b.n	800738e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b20      	cmp	r3, #32
 800738c:	d1e9      	bne.n	8007362 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b20      	cmp	r3, #32
 800739a:	d003      	beq.n	80073a4 <I2C_IsErrorOccurred+0xe0>
 800739c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0aa      	beq.n	80072fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80073a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2220      	movs	r2, #32
 80073b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	f043 0304 	orr.w	r3, r3, #4
 80073ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00b      	beq.n	80073ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f043 0308 	orr.w	r3, r3, #8
 80073fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007406:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	f043 0302 	orr.w	r3, r3, #2
 800741e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01c      	beq.n	8007472 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fdcc 	bl	8006fd6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6859      	ldr	r1, [r3, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <I2C_IsErrorOccurred+0x1bc>)
 800744a:	400b      	ands	r3, r1
 800744c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	431a      	orrs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007476:	4618      	mov	r0, r3
 8007478:	3728      	adds	r7, #40	; 0x28
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	fe00e800 	.word	0xfe00e800

08007484 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	607b      	str	r3, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	817b      	strh	r3, [r7, #10]
 8007492:	4613      	mov	r3, r2
 8007494:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007496:	897b      	ldrh	r3, [r7, #10]
 8007498:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800749c:	7a7b      	ldrb	r3, [r7, #9]
 800749e:	041b      	lsls	r3, r3, #16
 80074a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	0d5b      	lsrs	r3, r3, #21
 80074be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <I2C_TransferConfig+0x5c>)
 80074c4:	430b      	orrs	r3, r1
 80074c6:	43db      	mvns	r3, r3
 80074c8:	ea02 0103 	and.w	r1, r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074d6:	bf00      	nop
 80074d8:	371c      	adds	r7, #28
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr
 80074e0:	03ff63ff 	.word	0x03ff63ff

080074e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80074f4:	887b      	ldrh	r3, [r7, #2]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00f      	beq.n	800751e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007504:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007512:	2b28      	cmp	r3, #40	; 0x28
 8007514:	d003      	beq.n	800751e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800751c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00f      	beq.n	8007548 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800752e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800753c:	2b28      	cmp	r3, #40	; 0x28
 800753e:	d003      	beq.n	8007548 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007546:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	da03      	bge.n	8007558 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007556:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	2b10      	cmp	r3, #16
 800755c:	d103      	bne.n	8007566 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007564:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	2b20      	cmp	r3, #32
 800756a:	d103      	bne.n	8007574 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f043 0320 	orr.w	r3, r3, #32
 8007572:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d103      	bne.n	8007582 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007580:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	43da      	mvns	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	400a      	ands	r2, r1
 8007592:	601a      	str	r2, [r3, #0]
}
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	bc80      	pop	{r7}
 800759c:	4770      	bx	lr

0800759e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800759e:	b480      	push	{r7}
 80075a0:	b083      	sub	sp, #12
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d138      	bne.n	8007626 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075be:	2302      	movs	r3, #2
 80075c0:	e032      	b.n	8007628 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2224      	movs	r2, #36	; 0x24
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0201 	bic.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6819      	ldr	r1, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0201 	orr.w	r2, r2, #1
 8007610:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	e000      	b.n	8007628 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007626:	2302      	movs	r3, #2
  }
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b20      	cmp	r3, #32
 8007646:	d139      	bne.n	80076bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007652:	2302      	movs	r3, #2
 8007654:	e033      	b.n	80076be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2224      	movs	r2, #36	; 0x24
 8007662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4313      	orrs	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2220      	movs	r2, #32
 80076ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e000      	b.n	80076be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
  }
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a03      	ldr	r2, [pc, #12]	; (80076e0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80076d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d6:	6013      	str	r3, [r2, #0]
}
 80076d8:	bf00      	nop
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	58000400 	.word	0x58000400

080076e4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10c      	bne.n	8007710 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80076f6:	4b13      	ldr	r3, [pc, #76]	; (8007744 <HAL_PWR_EnterSLEEPMode+0x60>)
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007702:	d10d      	bne.n	8007720 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8007704:	f000 f83c 	bl	8007780 <HAL_PWREx_DisableLowPowerRunMode>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800770e:	e015      	b.n	800773c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <HAL_PWR_EnterSLEEPMode+0x60>)
 8007712:	695b      	ldr	r3, [r3, #20]
 8007714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800771c:	f000 f822 	bl	8007764 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007720:	4b09      	ldr	r3, [pc, #36]	; (8007748 <HAL_PWR_EnterSLEEPMode+0x64>)
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	4a08      	ldr	r2, [pc, #32]	; (8007748 <HAL_PWR_EnterSLEEPMode+0x64>)
 8007726:	f023 0304 	bic.w	r3, r3, #4
 800772a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d101      	bne.n	8007736 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007732:	bf30      	wfi
 8007734:	e002      	b.n	800773c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007736:	bf40      	sev
    __WFE();
 8007738:	bf20      	wfe
    __WFE();
 800773a:	bf20      	wfe
  }
}
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	58000400 	.word	0x58000400
 8007748:	e000ed00 	.word	0xe000ed00

0800774c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800774c:	b480      	push	{r7}
 800774e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007750:	4b03      	ldr	r3, [pc, #12]	; (8007760 <HAL_PWREx_GetVoltageRange+0x14>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr
 8007760:	58000400 	.word	0x58000400

08007764 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a03      	ldr	r2, [pc, #12]	; (800777c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800776e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007772:	6013      	str	r3, [r2, #0]
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr
 800777c:	58000400 	.word	0x58000400

08007780 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007786:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a15      	ldr	r2, [pc, #84]	; (80077e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800778c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007790:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8007792:	4b14      	ldr	r3, [pc, #80]	; (80077e4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2232      	movs	r2, #50	; 0x32
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	0c9b      	lsrs	r3, r3, #18
 80077a4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80077a6:	e002      	b.n	80077ae <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ba:	d102      	bne.n	80077c2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f2      	bne.n	80077a8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80077c2:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ce:	d101      	bne.n	80077d4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e000      	b.n	80077d6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr
 80077e0:	58000400 	.word	0x58000400
 80077e4:	20000004 	.word	0x20000004
 80077e8:	431bde83 	.word	0x431bde83

080077ec <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80077f6:	4b10      	ldr	r3, [pc, #64]	; (8007838 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	4a0e      	ldr	r2, [pc, #56]	; (8007838 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	4a0c      	ldr	r2, [pc, #48]	; (800783c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800780c:	f043 0304 	orr.w	r3, r3, #4
 8007810:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007818:	bf30      	wfi
 800781a:	e002      	b.n	8007822 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800781c:	bf40      	sev
    __WFE();
 800781e:	bf20      	wfe
    __WFE();
 8007820:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	4a05      	ldr	r2, [pc, #20]	; (800783c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007828:	f023 0304 	bic.w	r3, r3, #4
 800782c:	6113      	str	r3, [r2, #16]
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr
 8007838:	58000400 	.word	0x58000400
 800783c:	e000ed00 	.word	0xe000ed00

08007840 <LL_PWR_IsEnabledBkUpAccess>:
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007850:	d101      	bne.n	8007856 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8007852:	2301      	movs	r3, #1
 8007854:	e000      	b.n	8007858 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	58000400 	.word	0x58000400

08007864 <LL_RCC_HSE_EnableTcxo>:
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <LL_RCC_HSE_DisableTcxo>:
{
 8007880:	b480      	push	{r7}
 8007882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800788e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007892:	6013      	str	r3, [r2, #0]
}
 8007894:	bf00      	nop
 8007896:	46bd      	mov	sp, r7
 8007898:	bc80      	pop	{r7}
 800789a:	4770      	bx	lr

0800789c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80078a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ae:	d101      	bne.n	80078b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr

080078be <LL_RCC_HSE_Enable>:
{
 80078be:	b480      	push	{r7}
 80078c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80078c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078d0:	6013      	str	r3, [r2, #0]
}
 80078d2:	bf00      	nop
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr

080078da <LL_RCC_HSE_Disable>:
{
 80078da:	b480      	push	{r7}
 80078dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80078de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ec:	6013      	str	r3, [r2, #0]
}
 80078ee:	bf00      	nop
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bc80      	pop	{r7}
 80078f4:	4770      	bx	lr

080078f6 <LL_RCC_HSE_IsReady>:
{
 80078f6:	b480      	push	{r7}
 80078f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80078fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007908:	d101      	bne.n	800790e <LL_RCC_HSE_IsReady+0x18>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <LL_RCC_HSE_IsReady+0x1a>
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr

08007918 <LL_RCC_HSI_Enable>:
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792a:	6013      	str	r3, [r2, #0]
}
 800792c:	bf00      	nop
 800792e:	46bd      	mov	sp, r7
 8007930:	bc80      	pop	{r7}
 8007932:	4770      	bx	lr

08007934 <LL_RCC_HSI_Disable>:
{
 8007934:	b480      	push	{r7}
 8007936:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007942:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007946:	6013      	str	r3, [r2, #0]
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr

08007950 <LL_RCC_HSI_IsReady>:
{
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800795e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007962:	d101      	bne.n	8007968 <LL_RCC_HSI_IsReady+0x18>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <LL_RCC_HSI_IsReady+0x1a>
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr

08007972 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800797a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	061b      	lsls	r3, r3, #24
 8007988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800798c:	4313      	orrs	r3, r2
 800798e:	604b      	str	r3, [r1, #4]
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	bc80      	pop	{r7}
 8007998:	4770      	bx	lr

0800799a <LL_RCC_LSE_IsReady>:
{
 800799a:	b480      	push	{r7}
 800799c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800799e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d101      	bne.n	80079b2 <LL_RCC_LSE_IsReady+0x18>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <LL_RCC_LSE_IsReady+0x1a>
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr

080079bc <LL_RCC_LSI_Enable>:
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80079c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079cc:	f043 0301 	orr.w	r3, r3, #1
 80079d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80079d4:	bf00      	nop
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr

080079dc <LL_RCC_LSI_Disable>:
{
 80079dc:	b480      	push	{r7}
 80079de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80079e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80079f4:	bf00      	nop
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bc80      	pop	{r7}
 80079fa:	4770      	bx	lr

080079fc <LL_RCC_LSI_IsReady>:
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d101      	bne.n	8007a14 <LL_RCC_LSI_IsReady+0x18>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <LL_RCC_LSI_IsReady+0x1a>
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr

08007a1e <LL_RCC_MSI_Enable>:
{
 8007a1e:	b480      	push	{r7}
 8007a20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6013      	str	r3, [r2, #0]
}
 8007a32:	bf00      	nop
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr

08007a3a <LL_RCC_MSI_Disable>:
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	6013      	str	r3, [r2, #0]
}
 8007a4e:	bf00      	nop
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <LL_RCC_MSI_IsReady>:
{
 8007a56:	b480      	push	{r7}
 8007a58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d101      	bne.n	8007a6c <LL_RCC_MSI_IsReady+0x16>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <LL_RCC_MSI_IsReady+0x18>
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007a76:	b480      	push	{r7}
 8007a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d101      	bne.n	8007a8c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e000      	b.n	8007a8e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <LL_RCC_MSI_GetRange>:
{
 8007a96:	b480      	push	{r7}
 8007a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr

08007ac4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	604b      	str	r3, [r1, #4]
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <LL_RCC_SetSysClkSource>:
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 0203 	bic.w	r2, r3, #3
 8007afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	608b      	str	r3, [r1, #8]
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr

08007b12 <LL_RCC_GetSysClkSource>:
{
 8007b12:	b480      	push	{r7}
 8007b14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 030c 	and.w	r3, r3, #12
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc80      	pop	{r7}
 8007b26:	4770      	bx	lr

08007b28 <LL_RCC_SetAHBPrescaler>:
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	608b      	str	r3, [r1, #8]
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr

08007b4e <LL_RCC_SetAHB3Prescaler>:
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007b5e:	f023 020f 	bic.w	r2, r3, #15
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <LL_RCC_SetAPB1Prescaler>:
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	608b      	str	r3, [r1, #8]
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr

08007ba0 <LL_RCC_SetAPB2Prescaler>:
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	608b      	str	r3, [r1, #8]
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr

08007bc6 <LL_RCC_GetAHBPrescaler>:
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr

08007bdc <LL_RCC_GetAHB3Prescaler>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <LL_RCC_GetAPB1Prescaler>:
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bc80      	pop	{r7}
 8007c0a:	4770      	bx	lr

08007c0c <LL_RCC_GetAPB2Prescaler>:
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr

08007c22 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007c22:	b480      	push	{r7}
 8007c24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c34:	6013      	str	r3, [r2, #0]
}
 8007c36:	bf00      	nop
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bc80      	pop	{r7}
 8007c3c:	4770      	bx	lr

08007c3e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c50:	6013      	str	r3, [r2, #0]
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c6c:	d101      	bne.n	8007c72 <LL_RCC_PLL_IsReady+0x18>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e000      	b.n	8007c74 <LL_RCC_PLL_IsReady+0x1a>
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007caa:	b480      	push	{r7}
 8007cac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr

08007cc0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	f003 0303 	and.w	r3, r3, #3
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr

08007cd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce8:	d101      	bne.n	8007cee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d00:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d0c:	d101      	bne.n	8007d12 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bc80      	pop	{r7}
 8007d1a:	4770      	bx	lr

08007d1c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d2e:	d101      	bne.n	8007d34 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bc80      	pop	{r7}
 8007d3c:	4770      	bx	lr

08007d3e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007d50:	d101      	bne.n	8007d56 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bc80      	pop	{r7}
 8007d5e:	4770      	bx	lr

08007d60 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e36f      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d72:	f7ff fece 	bl	8007b12 <LL_RCC_GetSysClkSource>
 8007d76:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d78:	f7ff ffa2 	bl	8007cc0 <LL_RCC_PLL_GetMainSource>
 8007d7c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80c4 	beq.w	8007f14 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_RCC_OscConfig+0x3e>
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	2b0c      	cmp	r3, #12
 8007d96:	d176      	bne.n	8007e86 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d173      	bne.n	8007e86 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e353      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x68>
 8007dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dc6:	e006      	b.n	8007dd6 <HAL_RCC_OscConfig+0x76>
 8007dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd0:	091b      	lsrs	r3, r3, #4
 8007dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d222      	bcs.n	8007e20 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fd3c 	bl	800885c <RCC_SetFlashLatencyFromMSIRange>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e331      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007df8:	f043 0308 	orr.w	r3, r3, #8
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e10:	4313      	orrs	r3, r2
 8007e12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fe53 	bl	8007ac4 <LL_RCC_MSI_SetCalibTrimming>
 8007e1e:	e021      	b.n	8007e64 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2a:	f043 0308 	orr.w	r3, r3, #8
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e42:	4313      	orrs	r3, r2
 8007e44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fe3a 	bl	8007ac4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fd01 	bl	800885c <RCC_SetFlashLatencyFromMSIRange>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e2f6      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007e64:	f000 fcc2 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4aa7      	ldr	r2, [pc, #668]	; (8008108 <HAL_RCC_OscConfig+0x3a8>)
 8007e6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8007e6e:	4ba7      	ldr	r3, [pc, #668]	; (800810c <HAL_RCC_OscConfig+0x3ac>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fa fd18 	bl	80028a8 <HAL_InitTick>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007e7c:	7cfb      	ldrb	r3, [r7, #19]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d047      	beq.n	8007f12 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8007e82:	7cfb      	ldrb	r3, [r7, #19]
 8007e84:	e2e5      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02c      	beq.n	8007ee8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007e8e:	f7ff fdc6 	bl	8007a1e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e92:	f7fa fd13 	bl	80028bc <HAL_GetTick>
 8007e96:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e9a:	f7fa fd0f 	bl	80028bc <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e2d2      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007eac:	f7ff fdd3 	bl	8007a56 <LL_RCC_MSI_IsReady>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f1      	beq.n	8007e9a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ec0:	f043 0308 	orr.w	r3, r3, #8
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff fdef 	bl	8007ac4 <LL_RCC_MSI_SetCalibTrimming>
 8007ee6:	e015      	b.n	8007f14 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ee8:	f7ff fda7 	bl	8007a3a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007eec:	f7fa fce6 	bl	80028bc <HAL_GetTick>
 8007ef0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007ef4:	f7fa fce2 	bl	80028bc <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e2a5      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007f06:	f7ff fda6 	bl	8007a56 <LL_RCC_MSI_IsReady>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1f1      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x194>
 8007f10:	e000      	b.n	8007f14 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007f12:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d058      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d005      	beq.n	8007f32 <HAL_RCC_OscConfig+0x1d2>
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	2b0c      	cmp	r3, #12
 8007f2a:	d108      	bne.n	8007f3e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d105      	bne.n	8007f3e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d14b      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e289      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f50:	4313      	orrs	r3, r2
 8007f52:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5c:	d102      	bne.n	8007f64 <HAL_RCC_OscConfig+0x204>
 8007f5e:	f7ff fcae 	bl	80078be <LL_RCC_HSE_Enable>
 8007f62:	e00d      	b.n	8007f80 <HAL_RCC_OscConfig+0x220>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007f6c:	d104      	bne.n	8007f78 <HAL_RCC_OscConfig+0x218>
 8007f6e:	f7ff fc79 	bl	8007864 <LL_RCC_HSE_EnableTcxo>
 8007f72:	f7ff fca4 	bl	80078be <LL_RCC_HSE_Enable>
 8007f76:	e003      	b.n	8007f80 <HAL_RCC_OscConfig+0x220>
 8007f78:	f7ff fcaf 	bl	80078da <LL_RCC_HSE_Disable>
 8007f7c:	f7ff fc80 	bl	8007880 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d012      	beq.n	8007fae <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f88:	f7fa fc98 	bl	80028bc <HAL_GetTick>
 8007f8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f90:	f7fa fc94 	bl	80028bc <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b64      	cmp	r3, #100	; 0x64
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e257      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007fa2:	f7ff fca8 	bl	80078f6 <LL_RCC_HSE_IsReady>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f1      	beq.n	8007f90 <HAL_RCC_OscConfig+0x230>
 8007fac:	e011      	b.n	8007fd2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fae:	f7fa fc85 	bl	80028bc <HAL_GetTick>
 8007fb2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb6:	f7fa fc81 	bl	80028bc <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b64      	cmp	r3, #100	; 0x64
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e244      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007fc8:	f7ff fc95 	bl	80078f6 <LL_RCC_HSE_IsReady>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f1      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d046      	beq.n	800806c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x290>
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b0c      	cmp	r3, #12
 8007fe8:	d10e      	bne.n	8008008 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d10b      	bne.n	8008008 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e22a      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fcb6 	bl	8007972 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008006:	e031      	b.n	800806c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d019      	beq.n	8008044 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008010:	f7ff fc82 	bl	8007918 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008014:	f7fa fc52 	bl	80028bc <HAL_GetTick>
 8008018:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800801a:	e008      	b.n	800802e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800801c:	f7fa fc4e 	bl	80028bc <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e211      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800802e:	f7ff fc8f 	bl	8007950 <LL_RCC_HSI_IsReady>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d0f1      	beq.n	800801c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fc98 	bl	8007972 <LL_RCC_HSI_SetCalibTrimming>
 8008042:	e013      	b.n	800806c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008044:	f7ff fc76 	bl	8007934 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7fa fc38 	bl	80028bc <HAL_GetTick>
 800804c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008050:	f7fa fc34 	bl	80028bc <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e1f7      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008062:	f7ff fc75 	bl	8007950 <LL_RCC_HSI_IsReady>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f1      	bne.n	8008050 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d06e      	beq.n	8008156 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d056      	beq.n	800812e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008088:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f003 0310 	and.w	r3, r3, #16
 8008094:	429a      	cmp	r2, r3
 8008096:	d031      	beq.n	80080fc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d006      	beq.n	80080b0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e1d0      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80080ba:	f7ff fc8f 	bl	80079dc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080be:	f7fa fbfd 	bl	80028bc <HAL_GetTick>
 80080c2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80080c4:	e008      	b.n	80080d8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080c6:	f7fa fbf9 	bl	80028bc <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	2b11      	cmp	r3, #17
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e1bc      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80080d8:	f7ff fc90 	bl	80079fc <LL_RCC_LSI_IsReady>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f1      	bne.n	80080c6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80080e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ea:	f023 0210 	bic.w	r2, r3, #16
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080fc:	f7ff fc5e 	bl	80079bc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008100:	f7fa fbdc 	bl	80028bc <HAL_GetTick>
 8008104:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008106:	e00c      	b.n	8008122 <HAL_RCC_OscConfig+0x3c2>
 8008108:	20000004 	.word	0x20000004
 800810c:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008110:	f7fa fbd4 	bl	80028bc <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b11      	cmp	r3, #17
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e197      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008122:	f7ff fc6b 	bl	80079fc <LL_RCC_LSI_IsReady>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f1      	beq.n	8008110 <HAL_RCC_OscConfig+0x3b0>
 800812c:	e013      	b.n	8008156 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800812e:	f7ff fc55 	bl	80079dc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008132:	f7fa fbc3 	bl	80028bc <HAL_GetTick>
 8008136:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008138:	e008      	b.n	800814c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800813a:	f7fa fbbf 	bl	80028bc <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b11      	cmp	r3, #17
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e182      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800814c:	f7ff fc56 	bl	80079fc <LL_RCC_LSI_IsReady>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1f1      	bne.n	800813a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 80d8 	beq.w	8008314 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008164:	f7ff fb6c 	bl	8007840 <LL_PWR_IsEnabledBkUpAccess>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d113      	bne.n	8008196 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800816e:	f7ff faab 	bl	80076c8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008172:	f7fa fba3 	bl	80028bc <HAL_GetTick>
 8008176:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008178:	e008      	b.n	800818c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800817a:	f7fa fb9f 	bl	80028bc <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e162      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800818c:	f7ff fb58 	bl	8007840 <LL_PWR_IsEnabledBkUpAccess>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f1      	beq.n	800817a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d07b      	beq.n	8008296 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	2b85      	cmp	r3, #133	; 0x85
 80081a4:	d003      	beq.n	80081ae <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	d109      	bne.n	80081c2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80081ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ba:	f043 0304 	orr.w	r3, r3, #4
 80081be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081c2:	f7fa fb7b 	bl	80028bc <HAL_GetTick>
 80081c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80081c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80081dc:	e00a      	b.n	80081f4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081de:	f7fa fb6d 	bl	80028bc <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d901      	bls.n	80081f4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e12e      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80081f4:	f7ff fbd1 	bl	800799a <LL_RCC_LSE_IsReady>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0ef      	beq.n	80081de <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	2b81      	cmp	r3, #129	; 0x81
 8008204:	d003      	beq.n	800820e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	2b85      	cmp	r3, #133	; 0x85
 800820c:	d121      	bne.n	8008252 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800820e:	f7fa fb55 	bl	80028bc <HAL_GetTick>
 8008212:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008228:	e00a      	b.n	8008240 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800822a:	f7fa fb47 	bl	80028bc <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	f241 3288 	movw	r2, #5000	; 0x1388
 8008238:	4293      	cmp	r3, r2
 800823a:	d901      	bls.n	8008240 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e108      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0ec      	beq.n	800822a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008250:	e060      	b.n	8008314 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008252:	f7fa fb33 	bl	80028bc <HAL_GetTick>
 8008256:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800826c:	e00a      	b.n	8008284 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826e:	f7fa fb25 	bl	80028bc <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f241 3288 	movw	r2, #5000	; 0x1388
 800827c:	4293      	cmp	r3, r2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e0e6      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ec      	bne.n	800826e <HAL_RCC_OscConfig+0x50e>
 8008294:	e03e      	b.n	8008314 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008296:	f7fa fb11 	bl	80028bc <HAL_GetTick>
 800829a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800829c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082b0:	e00a      	b.n	80082c8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b2:	f7fa fb03 	bl	80028bc <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e0c4      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80082c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1ec      	bne.n	80082b2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082d8:	f7fa faf0 	bl	80028bc <HAL_GetTick>
 80082dc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80082de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80082f2:	e00a      	b.n	800830a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f4:	f7fa fae2 	bl	80028bc <HAL_GetTick>
 80082f8:	4602      	mov	r2, r0
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e0a3      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800830a:	f7ff fb46 	bl	800799a <LL_RCC_LSE_IsReady>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d1ef      	bne.n	80082f4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8099 	beq.w	8008450 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	2b0c      	cmp	r3, #12
 8008322:	d06c      	beq.n	80083fe <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	2b02      	cmp	r3, #2
 800832a:	d14b      	bne.n	80083c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832c:	f7ff fc87 	bl	8007c3e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008330:	f7fa fac4 	bl	80028bc <HAL_GetTick>
 8008334:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008338:	f7fa fac0 	bl	80028bc <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b0a      	cmp	r3, #10
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e083      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800834a:	f7ff fc86 	bl	8007c5a <LL_RCC_PLL_IsReady>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f1      	bne.n	8008338 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008358:	68da      	ldr	r2, [r3, #12]
 800835a:	4b40      	ldr	r3, [pc, #256]	; (800845c <HAL_RCC_OscConfig+0x6fc>)
 800835c:	4013      	ands	r3, r2
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008366:	4311      	orrs	r1, r2
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800836c:	0212      	lsls	r2, r2, #8
 800836e:	4311      	orrs	r1, r2
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008374:	4311      	orrs	r1, r2
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800837a:	4311      	orrs	r1, r2
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008380:	430a      	orrs	r2, r1
 8008382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008386:	4313      	orrs	r3, r2
 8008388:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800838a:	f7ff fc4a 	bl	8007c22 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800838e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839e:	f7fa fa8d 	bl	80028bc <HAL_GetTick>
 80083a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083a6:	f7fa fa89 	bl	80028bc <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b0a      	cmp	r3, #10
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e04c      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80083b8:	f7ff fc4f 	bl	8007c5a <LL_RCC_PLL_IsReady>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f1      	beq.n	80083a6 <HAL_RCC_OscConfig+0x646>
 80083c2:	e045      	b.n	8008450 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083c4:	f7ff fc3b 	bl	8007c3e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c8:	f7fa fa78 	bl	80028bc <HAL_GetTick>
 80083cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80083ce:	e008      	b.n	80083e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083d0:	f7fa fa74 	bl	80028bc <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b0a      	cmp	r3, #10
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e037      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80083e2:	f7ff fc3a 	bl	8007c5a <LL_RCC_PLL_IsReady>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1f1      	bne.n	80083d0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80083ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083f6:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <HAL_RCC_OscConfig+0x700>)
 80083f8:	4013      	ands	r3, r2
 80083fa:	60cb      	str	r3, [r1, #12]
 80083fc:	e028      	b.n	8008450 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e023      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800840a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	f003 0203 	and.w	r2, r3, #3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	429a      	cmp	r2, r3
 800841e:	d115      	bne.n	800844c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842a:	429a      	cmp	r2, r3
 800842c:	d10e      	bne.n	800844c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	429a      	cmp	r2, r3
 800843c:	d106      	bne.n	800844c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008448:	429a      	cmp	r2, r3
 800844a:	d001      	beq.n	8008450 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	11c1808c 	.word	0x11c1808c
 8008460:	eefefffc 	.word	0xeefefffc

08008464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e10f      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008478:	4b89      	ldr	r3, [pc, #548]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d91b      	bls.n	80084be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008486:	4b86      	ldr	r3, [pc, #536]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f023 0207 	bic.w	r2, r3, #7
 800848e:	4984      	ldr	r1, [pc, #528]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	4313      	orrs	r3, r2
 8008494:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008496:	f7fa fa11 	bl	80028bc <HAL_GetTick>
 800849a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800849c:	e008      	b.n	80084b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800849e:	f7fa fa0d 	bl	80028bc <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e0f3      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084b0:	4b7b      	ldr	r3, [pc, #492]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d1ef      	bne.n	800849e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d016      	beq.n	80084f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fb2a 	bl	8007b28 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80084d4:	f7fa f9f2 	bl	80028bc <HAL_GetTick>
 80084d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80084da:	e008      	b.n	80084ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80084dc:	f7fa f9ee 	bl	80028bc <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e0d4      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80084ee:	f7ff fbf2 	bl	8007cd6 <LL_RCC_IsActiveFlag_HPRE>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0f1      	beq.n	80084dc <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d016      	beq.n	8008532 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff fb20 	bl	8007b4e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800850e:	f7fa f9d5 	bl	80028bc <HAL_GetTick>
 8008512:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008514:	e008      	b.n	8008528 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008516:	f7fa f9d1 	bl	80028bc <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e0b7      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008528:	f7ff fbe6 	bl	8007cf8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0f1      	beq.n	8008516 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	2b00      	cmp	r3, #0
 800853c:	d016      	beq.n	800856c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fb19 	bl	8007b7a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008548:	f7fa f9b8 	bl	80028bc <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800854e:	e008      	b.n	8008562 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008550:	f7fa f9b4 	bl	80028bc <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e09a      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008562:	f7ff fbdb 	bl	8007d1c <LL_RCC_IsActiveFlag_PPRE1>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d0f1      	beq.n	8008550 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d017      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	4618      	mov	r0, r3
 8008580:	f7ff fb0e 	bl	8007ba0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008584:	f7fa f99a 	bl	80028bc <HAL_GetTick>
 8008588:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800858c:	f7fa f996 	bl	80028bc <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e07c      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800859e:	f7ff fbce 	bl	8007d3e <LL_RCC_IsActiveFlag_PPRE2>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0f1      	beq.n	800858c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d043      	beq.n	800863c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d106      	bne.n	80085ca <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80085bc:	f7ff f99b 	bl	80078f6 <LL_RCC_HSE_IsReady>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11e      	bne.n	8008604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e066      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d106      	bne.n	80085e0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80085d2:	f7ff fb42 	bl	8007c5a <LL_RCC_PLL_IsReady>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d113      	bne.n	8008604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e05b      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80085e8:	f7ff fa35 	bl	8007a56 <LL_RCC_MSI_IsReady>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d108      	bne.n	8008604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e050      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80085f6:	f7ff f9ab 	bl	8007950 <LL_RCC_HSI_IsReady>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e049      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4618      	mov	r0, r3
 800860a:	f7ff fa6f 	bl	8007aec <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800860e:	f7fa f955 	bl	80028bc <HAL_GetTick>
 8008612:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008614:	e00a      	b.n	800862c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008616:	f7fa f951 	bl	80028bc <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f241 3288 	movw	r2, #5000	; 0x1388
 8008624:	4293      	cmp	r3, r2
 8008626:	d901      	bls.n	800862c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e035      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800862c:	f7ff fa71 	bl	8007b12 <LL_RCC_GetSysClkSource>
 8008630:	4602      	mov	r2, r0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	429a      	cmp	r2, r3
 800863a:	d1ec      	bne.n	8008616 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800863c:	4b18      	ldr	r3, [pc, #96]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d21b      	bcs.n	8008682 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800864a:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f023 0207 	bic.w	r2, r3, #7
 8008652:	4913      	ldr	r1, [pc, #76]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	4313      	orrs	r3, r2
 8008658:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800865a:	f7fa f92f 	bl	80028bc <HAL_GetTick>
 800865e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008660:	e008      	b.n	8008674 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008662:	f7fa f92b 	bl	80028bc <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e011      	b.n	8008698 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008674:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <HAL_RCC_ClockConfig+0x23c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d1ef      	bne.n	8008662 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008682:	f000 f8b3 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 8008686:	4603      	mov	r3, r0
 8008688:	4a06      	ldr	r2, [pc, #24]	; (80086a4 <HAL_RCC_ClockConfig+0x240>)
 800868a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <HAL_RCC_ClockConfig+0x244>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4618      	mov	r0, r3
 8008692:	f7fa f909 	bl	80028a8 <HAL_InitTick>
 8008696:	4603      	mov	r3, r0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	58004000 	.word	0x58004000
 80086a4:	20000004 	.word	0x20000004
 80086a8:	2000000c 	.word	0x2000000c

080086ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086ac:	b590      	push	{r4, r7, lr}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80086b6:	2300      	movs	r3, #0
 80086b8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ba:	f7ff fa2a 	bl	8007b12 <LL_RCC_GetSysClkSource>
 80086be:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086c0:	f7ff fafe 	bl	8007cc0 <LL_RCC_PLL_GetMainSource>
 80086c4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b0c      	cmp	r3, #12
 80086d0:	d139      	bne.n	8008746 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d136      	bne.n	8008746 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80086d8:	f7ff f9cd 	bl	8007a76 <LL_RCC_MSI_IsEnabledRangeSelect>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d115      	bne.n	800870e <HAL_RCC_GetSysClockFreq+0x62>
 80086e2:	f7ff f9c8 	bl	8007a76 <LL_RCC_MSI_IsEnabledRangeSelect>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d106      	bne.n	80086fa <HAL_RCC_GetSysClockFreq+0x4e>
 80086ec:	f7ff f9d3 	bl	8007a96 <LL_RCC_MSI_GetRange>
 80086f0:	4603      	mov	r3, r0
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	e005      	b.n	8008706 <HAL_RCC_GetSysClockFreq+0x5a>
 80086fa:	f7ff f9d7 	bl	8007aac <LL_RCC_MSI_GetRangeAfterStandby>
 80086fe:	4603      	mov	r3, r0
 8008700:	0a1b      	lsrs	r3, r3, #8
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	4a36      	ldr	r2, [pc, #216]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8008708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800870c:	e014      	b.n	8008738 <HAL_RCC_GetSysClockFreq+0x8c>
 800870e:	f7ff f9b2 	bl	8007a76 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008712:	4603      	mov	r3, r0
 8008714:	2b01      	cmp	r3, #1
 8008716:	d106      	bne.n	8008726 <HAL_RCC_GetSysClockFreq+0x7a>
 8008718:	f7ff f9bd 	bl	8007a96 <LL_RCC_MSI_GetRange>
 800871c:	4603      	mov	r3, r0
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	e005      	b.n	8008732 <HAL_RCC_GetSysClockFreq+0x86>
 8008726:	f7ff f9c1 	bl	8007aac <LL_RCC_MSI_GetRangeAfterStandby>
 800872a:	4603      	mov	r3, r0
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8008734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008738:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d115      	bne.n	800876c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008744:	e012      	b.n	800876c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d102      	bne.n	8008752 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800874c:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	e00c      	b.n	800876c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b08      	cmp	r3, #8
 8008756:	d109      	bne.n	800876c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008758:	f7ff f8a0 	bl	800789c <LL_RCC_HSE_IsEnabledDiv2>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d102      	bne.n	8008768 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008762:	4b20      	ldr	r3, [pc, #128]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e001      	b.n	800876c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008768:	4b1f      	ldr	r3, [pc, #124]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800876a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800876c:	f7ff f9d1 	bl	8007b12 <LL_RCC_GetSysClkSource>
 8008770:	4603      	mov	r3, r0
 8008772:	2b0c      	cmp	r3, #12
 8008774:	d12f      	bne.n	80087d6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008776:	f7ff faa3 	bl	8007cc0 <LL_RCC_PLL_GetMainSource>
 800877a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d003      	beq.n	800878a <HAL_RCC_GetSysClockFreq+0xde>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b03      	cmp	r3, #3
 8008786:	d003      	beq.n	8008790 <HAL_RCC_GetSysClockFreq+0xe4>
 8008788:	e00d      	b.n	80087a6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800878c:	60fb      	str	r3, [r7, #12]
        break;
 800878e:	e00d      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008790:	f7ff f884 	bl	800789c <LL_RCC_HSE_IsEnabledDiv2>
 8008794:	4603      	mov	r3, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	d102      	bne.n	80087a0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800879a:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800879c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800879e:	e005      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80087a0:	4b11      	ldr	r3, [pc, #68]	; (80087e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80087a2:	60fb      	str	r3, [r7, #12]
        break;
 80087a4:	e002      	b.n	80087ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	60fb      	str	r3, [r7, #12]
        break;
 80087aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80087ac:	f7ff fa66 	bl	8007c7c <LL_RCC_PLL_GetN>
 80087b0:	4602      	mov	r2, r0
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	fb03 f402 	mul.w	r4, r3, r2
 80087b8:	f7ff fa77 	bl	8007caa <LL_RCC_PLL_GetDivider>
 80087bc:	4603      	mov	r3, r0
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	3301      	adds	r3, #1
 80087c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80087c6:	f7ff fa65 	bl	8007c94 <LL_RCC_PLL_GetR>
 80087ca:	4603      	mov	r3, r0
 80087cc:	0f5b      	lsrs	r3, r3, #29
 80087ce:	3301      	adds	r3, #1
 80087d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80087d4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80087d6:	697b      	ldr	r3, [r7, #20]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd90      	pop	{r4, r7, pc}
 80087e0:	0801efdc 	.word	0x0801efdc
 80087e4:	00f42400 	.word	0x00f42400
 80087e8:	01e84800 	.word	0x01e84800

080087ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087ec:	b598      	push	{r3, r4, r7, lr}
 80087ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80087f0:	f7ff ff5c 	bl	80086ac <HAL_RCC_GetSysClockFreq>
 80087f4:	4604      	mov	r4, r0
 80087f6:	f7ff f9e6 	bl	8007bc6 <LL_RCC_GetAHBPrescaler>
 80087fa:	4603      	mov	r3, r0
 80087fc:	091b      	lsrs	r3, r3, #4
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	4a03      	ldr	r2, [pc, #12]	; (8008810 <HAL_RCC_GetHCLKFreq+0x24>)
 8008804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008808:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	bd98      	pop	{r3, r4, r7, pc}
 8008810:	0801ef7c 	.word	0x0801ef7c

08008814 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008814:	b598      	push	{r3, r4, r7, lr}
 8008816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008818:	f7ff ffe8 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 800881c:	4604      	mov	r4, r0
 800881e:	f7ff f9ea 	bl	8007bf6 <LL_RCC_GetAPB1Prescaler>
 8008822:	4603      	mov	r3, r0
 8008824:	0a1b      	lsrs	r3, r3, #8
 8008826:	4a03      	ldr	r2, [pc, #12]	; (8008834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800882c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008830:	4618      	mov	r0, r3
 8008832:	bd98      	pop	{r3, r4, r7, pc}
 8008834:	0801efbc 	.word	0x0801efbc

08008838 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008838:	b598      	push	{r3, r4, r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800883c:	f7ff ffd6 	bl	80087ec <HAL_RCC_GetHCLKFreq>
 8008840:	4604      	mov	r4, r0
 8008842:	f7ff f9e3 	bl	8007c0c <LL_RCC_GetAPB2Prescaler>
 8008846:	4603      	mov	r3, r0
 8008848:	0adb      	lsrs	r3, r3, #11
 800884a:	4a03      	ldr	r2, [pc, #12]	; (8008858 <HAL_RCC_GetPCLK2Freq+0x20>)
 800884c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008850:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008854:	4618      	mov	r0, r3
 8008856:	bd98      	pop	{r3, r4, r7, pc}
 8008858:	0801efbc 	.word	0x0801efbc

0800885c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800885c:	b590      	push	{r4, r7, lr}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	091b      	lsrs	r3, r3, #4
 8008868:	f003 030f 	and.w	r3, r3, #15
 800886c:	4a10      	ldr	r2, [pc, #64]	; (80088b0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800886e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008872:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008874:	f7ff f9b2 	bl	8007bdc <LL_RCC_GetAHB3Prescaler>
 8008878:	4603      	mov	r3, r0
 800887a:	091b      	lsrs	r3, r3, #4
 800887c:	f003 030f 	and.w	r3, r3, #15
 8008880:	4a0c      	ldr	r2, [pc, #48]	; (80088b4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8008882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	fbb2 f3f3 	udiv	r3, r2, r3
 800888c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4a09      	ldr	r2, [pc, #36]	; (80088b8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	0c9c      	lsrs	r4, r3, #18
 8008898:	f7fe ff58 	bl	800774c <HAL_PWREx_GetVoltageRange>
 800889c:	4603      	mov	r3, r0
 800889e:	4619      	mov	r1, r3
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 f80b 	bl	80088bc <RCC_SetFlashLatency>
 80088a6:	4603      	mov	r3, r0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd90      	pop	{r4, r7, pc}
 80088b0:	0801efdc 	.word	0x0801efdc
 80088b4:	0801ef7c 	.word	0x0801ef7c
 80088b8:	431bde83 	.word	0x431bde83

080088bc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08e      	sub	sp, #56	; 0x38
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80088c6:	4a3a      	ldr	r2, [pc, #232]	; (80089b0 <RCC_SetFlashLatency+0xf4>)
 80088c8:	f107 0320 	add.w	r3, r7, #32
 80088cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088d0:	6018      	str	r0, [r3, #0]
 80088d2:	3304      	adds	r3, #4
 80088d4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80088d6:	4a37      	ldr	r2, [pc, #220]	; (80089b4 <RCC_SetFlashLatency+0xf8>)
 80088d8:	f107 0318 	add.w	r3, r7, #24
 80088dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088e0:	6018      	str	r0, [r3, #0]
 80088e2:	3304      	adds	r3, #4
 80088e4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80088e6:	4a34      	ldr	r2, [pc, #208]	; (80089b8 <RCC_SetFlashLatency+0xfc>)
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80088ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80088f2:	2300      	movs	r3, #0
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fc:	d11b      	bne.n	8008936 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80088fe:	2300      	movs	r3, #0
 8008900:	633b      	str	r3, [r7, #48]	; 0x30
 8008902:	e014      	b.n	800892e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	3338      	adds	r3, #56	; 0x38
 800890a:	443b      	add	r3, r7
 800890c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008910:	461a      	mov	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4293      	cmp	r3, r2
 8008916:	d807      	bhi.n	8008928 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	3338      	adds	r3, #56	; 0x38
 800891e:	443b      	add	r3, r7
 8008920:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008926:	e021      	b.n	800896c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	3301      	adds	r3, #1
 800892c:	633b      	str	r3, [r7, #48]	; 0x30
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	2b02      	cmp	r3, #2
 8008932:	d9e7      	bls.n	8008904 <RCC_SetFlashLatency+0x48>
 8008934:	e01a      	b.n	800896c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008936:	2300      	movs	r3, #0
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800893a:	e014      	b.n	8008966 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	005b      	lsls	r3, r3, #1
 8008940:	3338      	adds	r3, #56	; 0x38
 8008942:	443b      	add	r3, r7
 8008944:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008948:	461a      	mov	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4293      	cmp	r3, r2
 800894e:	d807      	bhi.n	8008960 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	3338      	adds	r3, #56	; 0x38
 8008956:	443b      	add	r3, r7
 8008958:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800895e:	e005      	b.n	800896c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	3301      	adds	r3, #1
 8008964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	2b02      	cmp	r3, #2
 800896a:	d9e7      	bls.n	800893c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800896c:	4b13      	ldr	r3, [pc, #76]	; (80089bc <RCC_SetFlashLatency+0x100>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f023 0207 	bic.w	r2, r3, #7
 8008974:	4911      	ldr	r1, [pc, #68]	; (80089bc <RCC_SetFlashLatency+0x100>)
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	4313      	orrs	r3, r2
 800897a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800897c:	f7f9 ff9e 	bl	80028bc <HAL_GetTick>
 8008980:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008982:	e008      	b.n	8008996 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008984:	f7f9 ff9a 	bl	80028bc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e007      	b.n	80089a6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <RCC_SetFlashLatency+0x100>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d1ef      	bne.n	8008984 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3738      	adds	r7, #56	; 0x38
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	0801e70c 	.word	0x0801e70c
 80089b4:	0801e714 	.word	0x0801e714
 80089b8:	0801e71c 	.word	0x0801e71c
 80089bc:	58004000 	.word	0x58004000

080089c0 <LL_RCC_LSE_IsReady>:
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80089c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d101      	bne.n	80089d8 <LL_RCC_LSE_IsReady+0x18>
 80089d4:	2301      	movs	r3, #1
 80089d6:	e000      	b.n	80089da <LL_RCC_LSE_IsReady+0x1a>
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <LL_RCC_SetUSARTClockSource>:
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80089ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	0c1b      	lsrs	r3, r3, #16
 80089f6:	43db      	mvns	r3, r3
 80089f8:	401a      	ands	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a02:	4313      	orrs	r3, r2
 8008a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr

08008a12 <LL_RCC_SetI2SClockSource>:
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr

08008a3c <LL_RCC_SetLPUARTClockSource>:
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr

08008a66 <LL_RCC_SetI2CClockSource>:
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	401a      	ands	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr

08008a9e <LL_RCC_SetLPTIMClockSource>:
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	0c1b      	lsrs	r3, r3, #16
 8008ab2:	041b      	lsls	r3, r3, #16
 8008ab4:	43db      	mvns	r3, r3
 8008ab6:	401a      	ands	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	041b      	lsls	r3, r3, #16
 8008abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bc80      	pop	{r7}
 8008ace:	4770      	bx	lr

08008ad0 <LL_RCC_SetRNGClockSource>:
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008ae4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <LL_RCC_SetADCClockSource>:
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <LL_RCC_SetRTCClockSource>:
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <LL_RCC_GetRTCClockSource>:
{
 8008b4e:	b480      	push	{r7}
 8008b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bc80      	pop	{r7}
 8008b64:	4770      	bx	lr

08008b66 <LL_RCC_ForceBackupDomainReset>:
{
 8008b66:	b480      	push	{r7}
 8008b68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008b7e:	bf00      	nop
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bc80      	pop	{r7}
 8008b84:	4770      	bx	lr

08008b86 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008b86:	b480      	push	{r7}
 8008b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008b9e:	bf00      	nop
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr
	...

08008ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008bb8:	2300      	movs	r3, #0
 8008bba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d058      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008bc8:	f7fe fd7e 	bl	80076c8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008bcc:	f7f9 fe76 	bl	80028bc <HAL_GetTick>
 8008bd0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008bd2:	e009      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bd4:	f7f9 fe72 	bl	80028bc <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d902      	bls.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	74fb      	strb	r3, [r7, #19]
        break;
 8008be6:	e006      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008be8:	4b7b      	ldr	r3, [pc, #492]	; (8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf4:	d1ee      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008bf6:	7cfb      	ldrb	r3, [r7, #19]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d13c      	bne.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008bfc:	f7ff ffa7 	bl	8008b4e <LL_RCC_GetRTCClockSource>
 8008c00:	4602      	mov	r2, r0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d00f      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c16:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c18:	f7ff ffa5 	bl	8008b66 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c1c:	f7ff ffb3 	bl	8008b86 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d014      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c34:	f7f9 fe42 	bl	80028bc <HAL_GetTick>
 8008c38:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008c3a:	e00b      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3c:	f7f9 fe3e 	bl	80028bc <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d902      	bls.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	74fb      	strb	r3, [r7, #19]
            break;
 8008c52:	e004      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008c54:	f7ff feb4 	bl	80089c0 <LL_RCC_LSE_IsReady>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d1ee      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8008c5e:	7cfb      	ldrb	r3, [r7, #19]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d105      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff ff5b 	bl	8008b24 <LL_RCC_SetRTCClockSource>
 8008c6e:	e004      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c70:	7cfb      	ldrb	r3, [r7, #19]
 8008c72:	74bb      	strb	r3, [r7, #18]
 8008c74:	e001      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c76:	7cfb      	ldrb	r3, [r7, #19]
 8008c78:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d004      	beq.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff fea9 	bl	80089e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d004      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff fe9e 	bl	80089e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fec0 	bl	8008a3c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fee6 	bl	8008a9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d004      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fedb 	bl	8008a9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d004      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fed0 	bl	8008a9e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d004      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fea9 	bl	8008a66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff fe9e 	bl	8008a66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fe93 	bl	8008a66 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0310 	and.w	r3, r3, #16
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d011      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff fe5e 	bl	8008a12 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d010      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fea5 	bl	8008ad0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d107      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d011      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fea3 	bl	8008afa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbc:	d107      	bne.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dcc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008dce:	7cbb      	ldrb	r3, [r7, #18]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	58000400 	.word	0x58000400

08008ddc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d071      	beq.n	8008ed2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d106      	bne.n	8008e08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7f9 f992 	bl	800212c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008e10:	4b32      	ldr	r3, [pc, #200]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d051      	beq.n	8008ec0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e1c:	4b2f      	ldr	r3, [pc, #188]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e1e:	22ca      	movs	r2, #202	; 0xca
 8008e20:	625a      	str	r2, [r3, #36]	; 0x24
 8008e22:	4b2e      	ldr	r3, [pc, #184]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e24:	2253      	movs	r2, #83	; 0x53
 8008e26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa11 	bl	8009250 <RTC_EnterInitMode>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d13f      	bne.n	8008eb8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008e38:	4b28      	ldr	r3, [pc, #160]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	4a27      	ldr	r2, [pc, #156]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e3e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e46:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008e48:	4b24      	ldr	r3, [pc, #144]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e4a:	699a      	ldr	r2, [r3, #24]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6859      	ldr	r1, [r3, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	4319      	orrs	r1, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	491f      	ldr	r1, [pc, #124]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	041b      	lsls	r3, r3, #16
 8008e6c:	491b      	ldr	r1, [pc, #108]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	430b      	orrs	r3, r1
 8008e84:	4915      	ldr	r1, [pc, #84]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fa14 	bl	80092b8 <RTC_ExitInitMode>
 8008e90:	4603      	mov	r3, r0
 8008e92:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10e      	bne.n	8008eb8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008e9a:	4b10      	ldr	r3, [pc, #64]	; (8008edc <HAL_RTC_Init+0x100>)
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a19      	ldr	r1, [r3, #32]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	4319      	orrs	r1, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	490a      	ldr	r1, [pc, #40]	; (8008edc <HAL_RTC_Init+0x100>)
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eb8:	4b08      	ldr	r3, [pc, #32]	; (8008edc <HAL_RTC_Init+0x100>)
 8008eba:	22ff      	movs	r2, #255	; 0xff
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24
 8008ebe:	e001      	b.n	8008ec4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d103      	bne.n	8008ed2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40002800 	.word	0x40002800

08008ee0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d101      	bne.n	8008efe <HAL_RTC_SetAlarm_IT+0x1e>
 8008efa:	2302      	movs	r3, #2
 8008efc:	e0f3      	b.n	80090e6 <HAL_RTC_SetAlarm_IT+0x206>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8008f0e:	4b78      	ldr	r3, [pc, #480]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f16:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1e:	d06a      	beq.n	8008ff6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d13a      	bne.n	8008f9c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008f26:	4b72      	ldr	r3, [pc, #456]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d102      	bne.n	8008f38 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2200      	movs	r2, #0
 8008f36:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f9f5 	bl	8009334 <RTC_ByteToBcd2>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	785b      	ldrb	r3, [r3, #1]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f9ee 	bl	8009334 <RTC_ByteToBcd2>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f5c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	789b      	ldrb	r3, [r3, #2]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 f9e6 	bl	8009334 <RTC_ByteToBcd2>
 8008f68:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f6a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	78db      	ldrb	r3, [r3, #3]
 8008f72:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008f74:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 f9d8 	bl	8009334 <RTC_ByteToBcd2>
 8008f84:	4603      	mov	r3, r0
 8008f86:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008f88:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008f90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008f96:	4313      	orrs	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e02c      	b.n	8008ff6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	695b      	ldr	r3, [r3, #20]
 8008fa0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008fa4:	d00d      	beq.n	8008fc2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fae:	d008      	beq.n	8008fc2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008fb0:	4b4f      	ldr	r3, [pc, #316]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d102      	bne.n	8008fc2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008fce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008fd4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	78db      	ldrb	r3, [r3, #3]
 8008fda:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008fdc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fe4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008fe6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008fec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ff6:	4b3e      	ldr	r3, [pc, #248]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ff8:	22ca      	movs	r2, #202	; 0xca
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8008ffc:	4b3c      	ldr	r3, [pc, #240]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ffe:	2253      	movs	r2, #83	; 0x53
 8009000:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800900a:	d12c      	bne.n	8009066 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800900c:	4b38      	ldr	r3, [pc, #224]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	4a37      	ldr	r2, [pc, #220]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009012:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009016:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009018:	4b35      	ldr	r3, [pc, #212]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800901a:	2201      	movs	r2, #1
 800901c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009024:	d107      	bne.n	8009036 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	4930      	ldr	r1, [pc, #192]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009030:	4313      	orrs	r3, r2
 8009032:	644b      	str	r3, [r1, #68]	; 0x44
 8009034:	e006      	b.n	8009044 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009036:	4a2e      	ldr	r2, [pc, #184]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800903c:	4a2c      	ldr	r2, [pc, #176]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009044:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	f043 0201 	orr.w	r2, r3, #1
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	4a24      	ldr	r2, [pc, #144]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800905e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009062:	6193      	str	r3, [r2, #24]
 8009064:	e02b      	b.n	80090be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009066:	4b22      	ldr	r3, [pc, #136]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	4a21      	ldr	r2, [pc, #132]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800906c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009070:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009072:	4b1f      	ldr	r3, [pc, #124]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009074:	2202      	movs	r2, #2
 8009076:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907e:	d107      	bne.n	8009090 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	4919      	ldr	r1, [pc, #100]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800908a:	4313      	orrs	r3, r2
 800908c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800908e:	e006      	b.n	800909e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009090:	4a17      	ldr	r2, [pc, #92]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009096:	4a16      	ldr	r2, [pc, #88]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800909e:	4a14      	ldr	r2, [pc, #80]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090aa:	f043 0202 	orr.w	r2, r3, #2
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80090b2:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80090b4:	699b      	ldr	r3, [r3, #24]
 80090b6:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80090b8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80090bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80090c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c4:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80090c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ce:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80090d0:	22ff      	movs	r2, #255	; 0xff
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd90      	pop	{r4, r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40002800 	.word	0x40002800
 80090f4:	58000800 	.word	0x58000800

080090f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <HAL_RTC_DeactivateAlarm+0x18>
 800910c:	2302      	movs	r3, #2
 800910e:	e048      	b.n	80091a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009120:	4b22      	ldr	r3, [pc, #136]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009122:	22ca      	movs	r2, #202	; 0xca
 8009124:	625a      	str	r2, [r3, #36]	; 0x24
 8009126:	4b21      	ldr	r3, [pc, #132]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009128:	2253      	movs	r2, #83	; 0x53
 800912a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009132:	d115      	bne.n	8009160 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009134:	4b1d      	ldr	r3, [pc, #116]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800913a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800913e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009140:	4b1a      	ldr	r3, [pc, #104]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009144:	4a19      	ldr	r2, [pc, #100]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800914a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009150:	f023 0201 	bic.w	r2, r3, #1
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009158:	4b14      	ldr	r3, [pc, #80]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800915a:	2201      	movs	r2, #1
 800915c:	65da      	str	r2, [r3, #92]	; 0x5c
 800915e:	e014      	b.n	800918a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009160:	4b12      	ldr	r3, [pc, #72]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	4a11      	ldr	r2, [pc, #68]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009166:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800916a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800916e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009170:	4a0e      	ldr	r2, [pc, #56]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009172:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009176:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917c:	f023 0202 	bic.w	r2, r3, #2
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8009186:	2202      	movs	r2, #2
 8009188:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800918c:	22ff      	movs	r2, #255	; 0xff
 800918e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bc80      	pop	{r7}
 80091aa:	4770      	bx	lr
 80091ac:	40002800 	.word	0x40002800

080091b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80091b8:	4b11      	ldr	r3, [pc, #68]	; (8009200 <HAL_RTC_AlarmIRQHandler+0x50>)
 80091ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c0:	4013      	ands	r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d005      	beq.n	80091da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80091ce:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <HAL_RTC_AlarmIRQHandler+0x50>)
 80091d0:	2201      	movs	r2, #1
 80091d2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f7f9 fdfa 	bl	8002dce <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <HAL_RTC_AlarmIRQHandler+0x50>)
 80091e6:	2202      	movs	r2, #2
 80091e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f94a 	bl	8009484 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80091f8:	bf00      	nop
 80091fa:	3710      	adds	r7, #16
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	40002800 	.word	0x40002800

08009204 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800920c:	4b0f      	ldr	r3, [pc, #60]	; (800924c <HAL_RTC_WaitForSynchro+0x48>)
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	4a0e      	ldr	r2, [pc, #56]	; (800924c <HAL_RTC_WaitForSynchro+0x48>)
 8009212:	f023 0320 	bic.w	r3, r3, #32
 8009216:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009218:	f7f9 fb50 	bl	80028bc <HAL_GetTick>
 800921c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800921e:	e009      	b.n	8009234 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009220:	f7f9 fb4c 	bl	80028bc <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800922e:	d901      	bls.n	8009234 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e006      	b.n	8009242 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009234:	4b05      	ldr	r3, [pc, #20]	; (800924c <HAL_RTC_WaitForSynchro+0x48>)
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f003 0320 	and.w	r3, r3, #32
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0ef      	beq.n	8009220 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	40002800 	.word	0x40002800

08009250 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800925c:	4b15      	ldr	r3, [pc, #84]	; (80092b4 <RTC_EnterInitMode+0x64>)
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d120      	bne.n	80092aa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009268:	4b12      	ldr	r3, [pc, #72]	; (80092b4 <RTC_EnterInitMode+0x64>)
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	4a11      	ldr	r2, [pc, #68]	; (80092b4 <RTC_EnterInitMode+0x64>)
 800926e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009272:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009274:	f7f9 fb22 	bl	80028bc <HAL_GetTick>
 8009278:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800927a:	e00d      	b.n	8009298 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800927c:	f7f9 fb1e 	bl	80028bc <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800928a:	d905      	bls.n	8009298 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2203      	movs	r2, #3
 8009294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <RTC_EnterInitMode+0x64>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <RTC_EnterInitMode+0x5a>
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d1e8      	bne.n	800927c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	40002800 	.word	0x40002800

080092b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80092c4:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <RTC_ExitInitMode+0x78>)
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	4a19      	ldr	r2, [pc, #100]	; (8009330 <RTC_ExitInitMode+0x78>)
 80092ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80092d0:	4b17      	ldr	r3, [pc, #92]	; (8009330 <RTC_ExitInitMode+0x78>)
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10c      	bne.n	80092f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ff91 	bl	8009204 <HAL_RTC_WaitForSynchro>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01e      	beq.n	8009326 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e017      	b.n	8009326 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80092f6:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <RTC_ExitInitMode+0x78>)
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	4a0d      	ldr	r2, [pc, #52]	; (8009330 <RTC_ExitInitMode+0x78>)
 80092fc:	f023 0320 	bic.w	r3, r3, #32
 8009300:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff ff7e 	bl	8009204 <HAL_RTC_WaitForSynchro>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2203      	movs	r2, #3
 8009312:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800931a:	4b05      	ldr	r3, [pc, #20]	; (8009330 <RTC_ExitInitMode+0x78>)
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	4a04      	ldr	r2, [pc, #16]	; (8009330 <RTC_ExitInitMode+0x78>)
 8009320:	f043 0320 	orr.w	r3, r3, #32
 8009324:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	40002800 	.word	0x40002800

08009334 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009346:	e005      	b.n	8009354 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800934e:	7afb      	ldrb	r3, [r7, #11]
 8009350:	3b0a      	subs	r3, #10
 8009352:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	2b09      	cmp	r3, #9
 8009358:	d8f6      	bhi.n	8009348 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	b2da      	uxtb	r2, r3
 8009362:	7afb      	ldrb	r3, [r7, #11]
 8009364:	4313      	orrs	r3, r2
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	4618      	mov	r0, r3
 800936a:	3714      	adds	r7, #20
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
	...

08009374 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009382:	2b01      	cmp	r3, #1
 8009384:	d101      	bne.n	800938a <HAL_RTCEx_EnableBypassShadow+0x16>
 8009386:	2302      	movs	r3, #2
 8009388:	e01f      	b.n	80093ca <HAL_RTCEx_EnableBypassShadow+0x56>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800939a:	4b0e      	ldr	r3, [pc, #56]	; (80093d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800939c:	22ca      	movs	r2, #202	; 0xca
 800939e:	625a      	str	r2, [r3, #36]	; 0x24
 80093a0:	4b0c      	ldr	r3, [pc, #48]	; (80093d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80093a2:	2253      	movs	r2, #83	; 0x53
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80093a6:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	4a0a      	ldr	r2, [pc, #40]	; (80093d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80093ac:	f043 0320 	orr.w	r3, r3, #32
 80093b0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093b2:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80093b4:	22ff      	movs	r2, #255	; 0xff
 80093b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr
 80093d4:	40002800 	.word	0x40002800

080093d8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_RTCEx_SetSSRU_IT+0x16>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e027      	b.n	800943e <HAL_RTCEx_SetSSRU_IT+0x66>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093fe:	4b12      	ldr	r3, [pc, #72]	; (8009448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009400:	22ca      	movs	r2, #202	; 0xca
 8009402:	625a      	str	r2, [r3, #36]	; 0x24
 8009404:	4b10      	ldr	r3, [pc, #64]	; (8009448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009406:	2253      	movs	r2, #83	; 0x53
 8009408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800940a:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	4a0e      	ldr	r2, [pc, #56]	; (8009448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009414:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009416:	4b0d      	ldr	r3, [pc, #52]	; (800944c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800941c:	4a0b      	ldr	r2, [pc, #44]	; (800944c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800941e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009422:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009426:	4b08      	ldr	r3, [pc, #32]	; (8009448 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009428:	22ff      	movs	r2, #255	; 0xff
 800942a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	bc80      	pop	{r7}
 8009446:	4770      	bx	lr
 8009448:	40002800 	.word	0x40002800
 800944c:	58000800 	.word	0x58000800

08009450 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009458:	4b09      	ldr	r3, [pc, #36]	; (8009480 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800945a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009464:	4b06      	ldr	r3, [pc, #24]	; (8009480 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009466:	2240      	movs	r2, #64	; 0x40
 8009468:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7f9 fcb9 	bl	8002de2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	40002800 	.word	0x40002800

08009484 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	bc80      	pop	{r7}
 8009494:	4770      	bx	lr
	...

08009498 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80094a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	4413      	add	r3, r2
 80094b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	601a      	str	r2, [r3, #0]
}
 80094b8:	bf00      	nop
 80094ba:	371c      	adds	r7, #28
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	4000b100 	.word	0x4000b100

080094c8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80094d2:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <HAL_RTCEx_BKUPRead+0x28>)
 80094d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4413      	add	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	4000b100 	.word	0x4000b100

080094f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e0c6      	b.n	8009694 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	2b00      	cmp	r3, #0
 800950c:	d108      	bne.n	8009520 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009516:	d009      	beq.n	800952c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	61da      	str	r2, [r3, #28]
 800951e:	e005      	b.n	800952c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7f8 fe9d 	bl	8002280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009566:	d902      	bls.n	800956e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e002      	b.n	8009574 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800956e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009572:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800957c:	d007      	beq.n	800958e <HAL_SPI_Init+0x9a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009586:	d002      	beq.n	800958e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800959e:	431a      	orrs	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	699b      	ldr	r3, [r3, #24]
 80095b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095bc:	431a      	orrs	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	ea42 0103 	orr.w	r1, r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	430a      	orrs	r2, r1
 80095e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ec:	d11b      	bne.n	8009626 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10b      	bne.n	800960e <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095fe:	d903      	bls.n	8009608 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2202      	movs	r2, #2
 8009604:	631a      	str	r2, [r3, #48]	; 0x30
 8009606:	e002      	b.n	800960e <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	2b02      	cmp	r3, #2
 8009614:	d107      	bne.n	8009626 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	0c1b      	lsrs	r3, r3, #16
 800962c:	f003 0204 	and.w	r2, r3, #4
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	f003 0310 	and.w	r3, r3, #16
 8009638:	431a      	orrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	f003 0308 	and.w	r3, r3, #8
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800964c:	ea42 0103 	orr.w	r1, r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009666:	d105      	bne.n	8009674 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	b292      	uxth	r2, r2
 8009672:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	69da      	ldr	r2, [r3, #28]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009682:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <LL_PWR_SetRadioBusyTrigger>:
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80096a4:	4b06      	ldr	r3, [pc, #24]	; (80096c0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096ac:	4904      	ldr	r1, [pc, #16]	; (80096c0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	608b      	str	r3, [r1, #8]
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bc80      	pop	{r7}
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	58000400 	.word	0x58000400

080096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80096c8:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ce:	4a04      	ldr	r2, [pc, #16]	; (80096e0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80096d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr
 80096e0:	58000400 	.word	0x58000400

080096e4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80096e8:	4b05      	ldr	r3, [pc, #20]	; (8009700 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80096ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ee:	4a04      	ldr	r2, [pc, #16]	; (8009700 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80096f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096f8:	bf00      	nop
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr
 8009700:	58000400 	.word	0x58000400

08009704 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009708:	4b03      	ldr	r3, [pc, #12]	; (8009718 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800970a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800970e:	619a      	str	r2, [r3, #24]
}
 8009710:	bf00      	nop
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr
 8009718:	58000400 	.word	0x58000400

0800971c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b02      	cmp	r3, #2
 800972a:	d101      	bne.n	8009730 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800972c:	2301      	movs	r3, #1
 800972e:	e000      	b.n	8009732 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	46bd      	mov	sp, r7
 8009736:	bc80      	pop	{r7}
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	58000400 	.word	0x58000400

08009740 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009740:	b480      	push	{r7}
 8009742:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b04      	cmp	r3, #4
 800974e:	d101      	bne.n	8009754 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009750:	2301      	movs	r3, #1
 8009752:	e000      	b.n	8009756 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	bc80      	pop	{r7}
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	58000400 	.word	0x58000400

08009764 <LL_RCC_RF_DisableReset>:
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800976c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009770:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009778:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800977c:	bf00      	nop
 800977e:	46bd      	mov	sp, r7
 8009780:	bc80      	pop	{r7}
 8009782:	4770      	bx	lr

08009784 <LL_RCC_IsRFUnderReset>:
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800978c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009798:	d101      	bne.n	800979e <LL_RCC_IsRFUnderReset+0x1a>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <LL_RCC_IsRFUnderReset+0x1c>
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bc80      	pop	{r7}
 80097a6:	4770      	bx	lr

080097a8 <LL_EXTI_EnableIT_32_63>:
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <LL_EXTI_EnableIT_32_63+0x24>)
 80097b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80097b6:	4905      	ldr	r1, [pc, #20]	; (80097cc <LL_EXTI_EnableIT_32_63+0x24>)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bc80      	pop	{r7}
 80097c8:	4770      	bx	lr
 80097ca:	bf00      	nop
 80097cc:	58000800 	.word	0x58000800

080097d0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d103      	bne.n	80097e6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	73fb      	strb	r3, [r7, #15]
    return status;
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	e052      	b.n	800988c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	799b      	ldrb	r3, [r3, #6]
 80097ee:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <HAL_SUBGHZ_Init+0x2c>
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b03      	cmp	r3, #3
 80097fa:	d109      	bne.n	8009810 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7f8 feae 	bl	8002564 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009808:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800980c:	f7ff ffcc 	bl	80097a8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d126      	bne.n	8009864 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2202      	movs	r2, #2
 800981a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800981c:	f7ff ffa2 	bl	8009764 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009820:	4b1c      	ldr	r3, [pc, #112]	; (8009894 <HAL_SUBGHZ_Init+0xc4>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	4613      	mov	r3, r2
 8009826:	00db      	lsls	r3, r3, #3
 8009828:	1a9b      	subs	r3, r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	0cdb      	lsrs	r3, r3, #19
 800982e:	2264      	movs	r2, #100	; 0x64
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d105      	bne.n	8009848 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	609a      	str	r2, [r3, #8]
        break;
 8009846:	e007      	b.n	8009858 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800984e:	f7ff ff99 	bl	8009784 <LL_RCC_IsRFUnderReset>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1ee      	bne.n	8009836 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009858:	f7ff ff34 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800985c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009860:	f7ff ff1c 	bl	800969c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009864:	f7ff ff4e 	bl	8009704 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 faac 	bl	8009dd0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	719a      	strb	r2, [r3, #6]

  return status;
 800988a:	7bfb      	ldrb	r3, [r7, #15]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20000004 	.word	0x20000004

08009898 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	461a      	mov	r2, r3
 80098a4:	460b      	mov	r3, r1
 80098a6:	817b      	strh	r3, [r7, #10]
 80098a8:	4613      	mov	r3, r2
 80098aa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	799b      	ldrb	r3, [r3, #6]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d14a      	bne.n	800994c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	795b      	ldrb	r3, [r3, #5]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80098be:	2302      	movs	r3, #2
 80098c0:	e045      	b.n	800994e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2202      	movs	r2, #2
 80098cc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 fb4c 	bl	8009f6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80098d4:	f7ff ff06 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80098d8:	210d      	movs	r1, #13
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fa98 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80098e0:	897b      	ldrh	r3, [r7, #10]
 80098e2:	0a1b      	lsrs	r3, r3, #8
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	4619      	mov	r1, r3
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fa90 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80098f0:	897b      	ldrh	r3, [r7, #10]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	4619      	mov	r1, r3
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fa8a 	bl	8009e10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80098fc:	2300      	movs	r3, #0
 80098fe:	82bb      	strh	r3, [r7, #20]
 8009900:	e00a      	b.n	8009918 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009902:	8abb      	ldrh	r3, [r7, #20]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4413      	add	r3, r2
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fa7f 	bl	8009e10 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009912:	8abb      	ldrh	r3, [r7, #20]
 8009914:	3301      	adds	r3, #1
 8009916:	82bb      	strh	r3, [r7, #20]
 8009918:	8aba      	ldrh	r2, [r7, #20]
 800991a:	893b      	ldrh	r3, [r7, #8]
 800991c:	429a      	cmp	r2, r3
 800991e:	d3f0      	bcc.n	8009902 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009920:	f7ff fed0 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fb45 	bl	8009fb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	75fb      	strb	r3, [r7, #23]
 8009936:	e001      	b.n	800993c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	715a      	strb	r2, [r3, #5]

    return status;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	e000      	b.n	800994e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800994c:	2302      	movs	r3, #2
  }
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b088      	sub	sp, #32
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	607a      	str	r2, [r7, #4]
 8009960:	461a      	mov	r2, r3
 8009962:	460b      	mov	r3, r1
 8009964:	817b      	strh	r3, [r7, #10]
 8009966:	4613      	mov	r3, r2
 8009968:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	799b      	ldrb	r3, [r3, #6]
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b01      	cmp	r3, #1
 8009976:	d14a      	bne.n	8009a0e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	795b      	ldrb	r3, [r3, #5]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d101      	bne.n	8009984 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009980:	2302      	movs	r3, #2
 8009982:	e045      	b.n	8009a10 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 faee 	bl	8009f6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009990:	f7ff fea8 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009994:	211d      	movs	r1, #29
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fa3a 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800999c:	897b      	ldrh	r3, [r7, #10]
 800999e:	0a1b      	lsrs	r3, r3, #8
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	4619      	mov	r1, r3
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fa32 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80099ac:	897b      	ldrh	r3, [r7, #10]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	4619      	mov	r1, r3
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fa2c 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80099b8:	2100      	movs	r1, #0
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 fa28 	bl	8009e10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80099c0:	2300      	movs	r3, #0
 80099c2:	82fb      	strh	r3, [r7, #22]
 80099c4:	e009      	b.n	80099da <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80099c6:	69b9      	ldr	r1, [r7, #24]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fa77 	bl	8009ebc <SUBGHZSPI_Receive>
      pData++;
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	3301      	adds	r3, #1
 80099d2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80099d4:	8afb      	ldrh	r3, [r7, #22]
 80099d6:	3301      	adds	r3, #1
 80099d8:	82fb      	strh	r3, [r7, #22]
 80099da:	8afa      	ldrh	r2, [r7, #22]
 80099dc:	893b      	ldrh	r3, [r7, #8]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d3f1      	bcc.n	80099c6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80099e2:	f7ff fe6f 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 fae4 	bl	8009fb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e001      	b.n	80099fe <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	715a      	strb	r2, [r3, #5]

    return status;
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
 8009a0c:	e000      	b.n	8009a10 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009a0e:	2302      	movs	r3, #2
  }
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3720      	adds	r7, #32
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	607a      	str	r2, [r7, #4]
 8009a22:	461a      	mov	r2, r3
 8009a24:	460b      	mov	r3, r1
 8009a26:	72fb      	strb	r3, [r7, #11]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	799b      	ldrb	r3, [r3, #6]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d14a      	bne.n	8009acc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	795b      	ldrb	r3, [r3, #5]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d101      	bne.n	8009a42 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e045      	b.n	8009ace <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2201      	movs	r2, #1
 8009a46:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fa8f 	bl	8009f6c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	2b84      	cmp	r3, #132	; 0x84
 8009a52:	d002      	beq.n	8009a5a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	2b94      	cmp	r3, #148	; 0x94
 8009a58:	d103      	bne.n	8009a62 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	711a      	strb	r2, [r3, #4]
 8009a60:	e002      	b.n	8009a68 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009a68:	f7ff fe3c 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f000 f9cd 	bl	8009e10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009a76:	2300      	movs	r3, #0
 8009a78:	82bb      	strh	r3, [r7, #20]
 8009a7a:	e00a      	b.n	8009a92 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009a7c:	8abb      	ldrh	r3, [r7, #20]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4413      	add	r3, r2
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 f9c2 	bl	8009e10 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009a8c:	8abb      	ldrh	r3, [r7, #20]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	82bb      	strh	r3, [r7, #20]
 8009a92:	8aba      	ldrh	r2, [r7, #20]
 8009a94:	893b      	ldrh	r3, [r7, #8]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d3f0      	bcc.n	8009a7c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009a9a:	f7ff fe13 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	2b84      	cmp	r3, #132	; 0x84
 8009aa2:	d002      	beq.n	8009aaa <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 fa85 	bl	8009fb4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
 8009ab6:	e001      	b.n	8009abc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	715a      	strb	r2, [r3, #5]

    return status;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	e000      	b.n	8009ace <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009acc:	2302      	movs	r3, #2
  }
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b088      	sub	sp, #32
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	72fb      	strb	r3, [r7, #11]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	799b      	ldrb	r3, [r3, #6]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d13d      	bne.n	8009b74 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	795b      	ldrb	r3, [r3, #5]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d101      	bne.n	8009b04 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009b00:	2302      	movs	r3, #2
 8009b02:	e038      	b.n	8009b76 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fa2e 	bl	8009f6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009b10:	f7ff fde8 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	4619      	mov	r1, r3
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f000 f979 	bl	8009e10 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009b1e:	2100      	movs	r1, #0
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f975 	bl	8009e10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009b26:	2300      	movs	r3, #0
 8009b28:	82fb      	strh	r3, [r7, #22]
 8009b2a:	e009      	b.n	8009b40 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009b2c:	69b9      	ldr	r1, [r7, #24]
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f9c4 	bl	8009ebc <SUBGHZSPI_Receive>
      pData++;
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	3301      	adds	r3, #1
 8009b38:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009b3a:	8afb      	ldrh	r3, [r7, #22]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	82fb      	strh	r3, [r7, #22]
 8009b40:	8afa      	ldrh	r2, [r7, #22]
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d3f1      	bcc.n	8009b2c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009b48:	f7ff fdbc 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 fa31 	bl	8009fb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	77fb      	strb	r3, [r7, #31]
 8009b5e:	e001      	b.n	8009b64 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	715a      	strb	r2, [r3, #5]

    return status;
 8009b70:	7ffb      	ldrb	r3, [r7, #31]
 8009b72:	e000      	b.n	8009b76 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009b74:	2302      	movs	r3, #2
  }
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	72fb      	strb	r3, [r7, #11]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	799b      	ldrb	r3, [r3, #6]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d13e      	bne.n	8009c1a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	795b      	ldrb	r3, [r3, #5]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e039      	b.n	8009c1c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2201      	movs	r2, #1
 8009bac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 f9dc 	bl	8009f6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009bb4:	f7ff fd96 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009bb8:	210e      	movs	r1, #14
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 f928 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009bc0:	7afb      	ldrb	r3, [r7, #11]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 f923 	bl	8009e10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009bca:	2300      	movs	r3, #0
 8009bcc:	82bb      	strh	r3, [r7, #20]
 8009bce:	e00a      	b.n	8009be6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009bd0:	8abb      	ldrh	r3, [r7, #20]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 f918 	bl	8009e10 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009be0:	8abb      	ldrh	r3, [r7, #20]
 8009be2:	3301      	adds	r3, #1
 8009be4:	82bb      	strh	r3, [r7, #20]
 8009be6:	8aba      	ldrh	r2, [r7, #20]
 8009be8:	893b      	ldrh	r3, [r7, #8]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d3f0      	bcc.n	8009bd0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009bee:	f7ff fd69 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 f9de 	bl	8009fb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	75fb      	strb	r3, [r7, #23]
 8009c04:	e001      	b.n	8009c0a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	715a      	strb	r2, [r3, #5]

    return status;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	e000      	b.n	8009c1c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009c1a:	2302      	movs	r3, #2
  }
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3718      	adds	r7, #24
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	460b      	mov	r3, r1
 8009c32:	72fb      	strb	r3, [r7, #11]
 8009c34:	4613      	mov	r3, r2
 8009c36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	799b      	ldrb	r3, [r3, #6]
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d141      	bne.n	8009cca <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	795b      	ldrb	r3, [r3, #5]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d101      	bne.n	8009c52 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e03c      	b.n	8009ccc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2201      	movs	r2, #1
 8009c56:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f000 f987 	bl	8009f6c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009c5e:	f7ff fd41 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009c62:	211e      	movs	r1, #30
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 f8d3 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009c6a:	7afb      	ldrb	r3, [r7, #11]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f8ce 	bl	8009e10 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009c74:	2100      	movs	r1, #0
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f8ca 	bl	8009e10 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	82fb      	strh	r3, [r7, #22]
 8009c80:	e009      	b.n	8009c96 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009c82:	69b9      	ldr	r1, [r7, #24]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 f919 	bl	8009ebc <SUBGHZSPI_Receive>
      pData++;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009c90:	8afb      	ldrh	r3, [r7, #22]
 8009c92:	3301      	adds	r3, #1
 8009c94:	82fb      	strh	r3, [r7, #22]
 8009c96:	8afa      	ldrh	r2, [r7, #22]
 8009c98:	893b      	ldrh	r3, [r7, #8]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d3f1      	bcc.n	8009c82 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009c9e:	f7ff fd11 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 f986 	bl	8009fb4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	77fb      	strb	r3, [r7, #31]
 8009cb4:	e001      	b.n	8009cba <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	715a      	strb	r2, [r3, #5]

    return status;
 8009cc6:	7ffb      	ldrb	r3, [r7, #31]
 8009cc8:	e000      	b.n	8009ccc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009cca:	2302      	movs	r3, #2
  }
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3720      	adds	r7, #32
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009cdc:	2300      	movs	r3, #0
 8009cde:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009ce0:	f107 020c 	add.w	r2, r7, #12
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	2112      	movs	r1, #18
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fef4 	bl	8009ad6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009cee:	7b3b      	ldrb	r3, [r7, #12]
 8009cf0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009cf2:	89fb      	ldrh	r3, [r7, #14]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	b21a      	sxth	r2, r3
 8009cf8:	7b7b      	ldrb	r3, [r7, #13]
 8009cfa:	b21b      	sxth	r3, r3
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	b21b      	sxth	r3, r3
 8009d00:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8009d02:	f107 020c 	add.w	r2, r7, #12
 8009d06:	2302      	movs	r3, #2
 8009d08:	2102      	movs	r1, #2
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f7ff fe84 	bl	8009a18 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009d10:	89fb      	ldrh	r3, [r7, #14]
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f012 fe8a 	bl	801ca34 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8009d20:	89fb      	ldrh	r3, [r7, #14]
 8009d22:	f003 0302 	and.w	r3, r3, #2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f012 fe90 	bl	801ca50 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009d30:	89fb      	ldrh	r3, [r7, #14]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d002      	beq.n	8009d40 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f012 fee0 	bl	801cb00 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8009d40:	89fb      	ldrh	r3, [r7, #14]
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f012 fee6 	bl	801cb1c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009d50:	89fb      	ldrh	r3, [r7, #14]
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f012 feec 	bl	801cb38 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8009d60:	89fb      	ldrh	r3, [r7, #14]
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f012 feba 	bl	801cae4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8009d70:	89fb      	ldrh	r3, [r7, #14]
 8009d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f012 fe76 	bl	801ca6c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8009d80:	89fb      	ldrh	r3, [r7, #14]
 8009d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00d      	beq.n	8009da6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
 8009d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d004      	beq.n	8009d9e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8009d94:	2101      	movs	r1, #1
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f012 fe76 	bl	801ca88 <HAL_SUBGHZ_CADStatusCallback>
 8009d9c:	e003      	b.n	8009da6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8009d9e:	2100      	movs	r1, #0
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f012 fe71 	bl	801ca88 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8009da6:	89fb      	ldrh	r3, [r7, #14]
 8009da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f012 fe87 	bl	801cac4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8009db6:	89fb      	ldrh	r3, [r7, #14]
 8009db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f012 fec7 	bl	801cb54 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <SUBGHZSPI_Init+0x3c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a0b      	ldr	r2, [pc, #44]	; (8009e0c <SUBGHZSPI_Init+0x3c>)
 8009dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009de2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009de4:	4a09      	ldr	r2, [pc, #36]	; (8009e0c <SUBGHZSPI_Init+0x3c>)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009dec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009dee:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <SUBGHZSPI_Init+0x3c>)
 8009df0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009df4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <SUBGHZSPI_Init+0x3c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a04      	ldr	r2, [pc, #16]	; (8009e0c <SUBGHZSPI_Init+0x3c>)
 8009dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e00:	6013      	str	r3, [r2, #0]
}
 8009e02:	bf00      	nop
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	58010000 	.word	0x58010000

08009e10 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e20:	4b23      	ldr	r3, [pc, #140]	; (8009eb0 <SUBGHZSPI_Transmit+0xa0>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	4613      	mov	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	0cdb      	lsrs	r3, r3, #19
 8009e2e:	2264      	movs	r2, #100	; 0x64
 8009e30:	fb02 f303 	mul.w	r3, r2, r3
 8009e34:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d105      	bne.n	8009e48 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	609a      	str	r2, [r3, #8]
      break;
 8009e46:	e008      	b.n	8009e5a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009e4e:	4b19      	ldr	r3, [pc, #100]	; (8009eb4 <SUBGHZSPI_Transmit+0xa4>)
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d1ed      	bne.n	8009e36 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009e5a:	4b17      	ldr	r3, [pc, #92]	; (8009eb8 <SUBGHZSPI_Transmit+0xa8>)
 8009e5c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e64:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <SUBGHZSPI_Transmit+0xa0>)
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	0cdb      	lsrs	r3, r3, #19
 8009e72:	2264      	movs	r2, #100	; 0x64
 8009e74:	fb02 f303 	mul.w	r3, r2, r3
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d105      	bne.n	8009e8c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	609a      	str	r2, [r3, #8]
      break;
 8009e8a:	e008      	b.n	8009e9e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <SUBGHZSPI_Transmit+0xa4>)
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d1ed      	bne.n	8009e7a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <SUBGHZSPI_Transmit+0xa4>)
 8009ea0:	68db      	ldr	r3, [r3, #12]

  return status;
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bc80      	pop	{r7}
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20000004 	.word	0x20000004
 8009eb4:	58010000 	.word	0x58010000
 8009eb8:	5801000c 	.word	0x5801000c

08009ebc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b087      	sub	sp, #28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009eca:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <SUBGHZSPI_Receive+0xa4>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	00db      	lsls	r3, r3, #3
 8009ed2:	1a9b      	subs	r3, r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	0cdb      	lsrs	r3, r3, #19
 8009ed8:	2264      	movs	r2, #100	; 0x64
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	609a      	str	r2, [r3, #8]
      break;
 8009ef0:	e008      	b.n	8009f04 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009ef8:	4b1a      	ldr	r3, [pc, #104]	; (8009f64 <SUBGHZSPI_Receive+0xa8>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d1ed      	bne.n	8009ee0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009f04:	4b18      	ldr	r3, [pc, #96]	; (8009f68 <SUBGHZSPI_Receive+0xac>)
 8009f06:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	22ff      	movs	r2, #255	; 0xff
 8009f0c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009f0e:	4b14      	ldr	r3, [pc, #80]	; (8009f60 <SUBGHZSPI_Receive+0xa4>)
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	4613      	mov	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	0cdb      	lsrs	r3, r3, #19
 8009f1c:	2264      	movs	r2, #100	; 0x64
 8009f1e:	fb02 f303 	mul.w	r3, r2, r3
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d105      	bne.n	8009f36 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	609a      	str	r2, [r3, #8]
      break;
 8009f34:	e008      	b.n	8009f48 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <SUBGHZSPI_Receive+0xa8>)
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d1ed      	bne.n	8009f24 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009f48:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <SUBGHZSPI_Receive+0xa8>)
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	701a      	strb	r2, [r3, #0]

  return status;
 8009f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	20000004 	.word	0x20000004
 8009f64:	58010000 	.word	0x58010000
 8009f68:	5801000c 	.word	0x5801000c

08009f6c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	791b      	ldrb	r3, [r3, #4]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d111      	bne.n	8009fa0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <SUBGHZ_CheckDeviceReady+0x44>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	4413      	add	r3, r2
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f8c:	f7ff fbaa 	bl	80096e4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1f9      	bne.n	8009f90 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f9c:	f7ff fb92 	bl	80096c4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f807 	bl	8009fb4 <SUBGHZ_WaitOnBusy>
 8009fa6:	4603      	mov	r3, r0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	20000004 	.word	0x20000004

08009fb4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8009fc0:	4b12      	ldr	r3, [pc, #72]	; (800a00c <SUBGHZ_WaitOnBusy+0x58>)
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	4413      	add	r3, r2
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	0d1b      	lsrs	r3, r3, #20
 8009fce:	2264      	movs	r2, #100	; 0x64
 8009fd0:	fb02 f303 	mul.w	r3, r2, r3
 8009fd4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009fd6:	f7ff fbb3 	bl	8009740 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009fda:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2202      	movs	r2, #2
 8009fea:	609a      	str	r2, [r3, #8]
      break;
 8009fec:	e009      	b.n	800a002 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009ff4:	f7ff fb92 	bl	800971c <LL_PWR_IsActiveFlag_RFBUSYS>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d0e9      	beq.n	8009fd6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20000004 	.word	0x20000004

0800a010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e049      	b.n	800a0b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d106      	bne.n	800a03c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f7f8 fd3c 	bl	8002ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3304      	adds	r3, #4
 800a04c:	4619      	mov	r1, r3
 800a04e:	4610      	mov	r0, r2
 800a050:	f000 f9c6 	bl	800a3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2201      	movs	r2, #1
 800a090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d001      	beq.n	800a0d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e036      	b.n	800a146 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68da      	ldr	r2, [r3, #12]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a16      	ldr	r2, [pc, #88]	; (800a150 <HAL_TIM_Base_Start_IT+0x90>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_TIM_Base_Start_IT+0x44>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a102:	d115      	bne.n	800a130 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	4b12      	ldr	r3, [pc, #72]	; (800a154 <HAL_TIM_Base_Start_IT+0x94>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b06      	cmp	r3, #6
 800a114:	d015      	beq.n	800a142 <HAL_TIM_Base_Start_IT+0x82>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11c:	d011      	beq.n	800a142 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0201 	orr.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a12e:	e008      	b.n	800a142 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 0201 	orr.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	e000      	b.n	800a144 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bc80      	pop	{r7}
 800a14e:	4770      	bx	lr
 800a150:	40012c00 	.word	0x40012c00
 800a154:	00010007 	.word	0x00010007

0800a158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d122      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d11b      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0202 	mvn.w	r2, #2
 800a184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	f003 0303 	and.w	r3, r3, #3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f904 	bl	800a3a8 <HAL_TIM_IC_CaptureCallback>
 800a1a0:	e005      	b.n	800a1ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f8f7 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f906 	bl	800a3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0304 	and.w	r3, r3, #4
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d122      	bne.n	800a208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	d11b      	bne.n	800a208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f06f 0204 	mvn.w	r2, #4
 800a1d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 f8da 	bl	800a3a8 <HAL_TIM_IC_CaptureCallback>
 800a1f4:	e005      	b.n	800a202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f8cd 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f8dc 	bl	800a3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0308 	and.w	r3, r3, #8
 800a212:	2b08      	cmp	r3, #8
 800a214:	d122      	bne.n	800a25c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	f003 0308 	and.w	r3, r3, #8
 800a220:	2b08      	cmp	r3, #8
 800a222:	d11b      	bne.n	800a25c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f06f 0208 	mvn.w	r2, #8
 800a22c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2204      	movs	r2, #4
 800a232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f8b0 	bl	800a3a8 <HAL_TIM_IC_CaptureCallback>
 800a248:	e005      	b.n	800a256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f8a3 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f8b2 	bl	800a3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f003 0310 	and.w	r3, r3, #16
 800a266:	2b10      	cmp	r3, #16
 800a268:	d122      	bne.n	800a2b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f003 0310 	and.w	r3, r3, #16
 800a274:	2b10      	cmp	r3, #16
 800a276:	d11b      	bne.n	800a2b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f06f 0210 	mvn.w	r2, #16
 800a280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2208      	movs	r2, #8
 800a286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a292:	2b00      	cmp	r3, #0
 800a294:	d003      	beq.n	800a29e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f886 	bl	800a3a8 <HAL_TIM_IC_CaptureCallback>
 800a29c:	e005      	b.n	800a2aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f879 	bl	800a396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 f888 	bl	800a3ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d10e      	bne.n	800a2dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d107      	bne.n	800a2dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f06f 0201 	mvn.w	r2, #1
 800a2d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f7 fdea 	bl	8001eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e6:	2b80      	cmp	r3, #128	; 0x80
 800a2e8:	d10e      	bne.n	800a308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f4:	2b80      	cmp	r3, #128	; 0x80
 800a2f6:	d107      	bne.n	800a308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f8d7 	bl	800a4b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a316:	d10e      	bne.n	800a336 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a322:	2b80      	cmp	r3, #128	; 0x80
 800a324:	d107      	bne.n	800a336 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a32e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 f8c9 	bl	800a4c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a340:	2b40      	cmp	r3, #64	; 0x40
 800a342:	d10e      	bne.n	800a362 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34e:	2b40      	cmp	r3, #64	; 0x40
 800a350:	d107      	bne.n	800a362 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a35a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f835 	bl	800a3cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	f003 0320 	and.w	r3, r3, #32
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d10e      	bne.n	800a38e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f003 0320 	and.w	r3, r3, #32
 800a37a:	2b20      	cmp	r3, #32
 800a37c:	d107      	bne.n	800a38e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f06f 0220 	mvn.w	r2, #32
 800a386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f88b 	bl	800a4a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bc80      	pop	{r7}
 800a3ca:	4770      	bx	lr

0800a3cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bc80      	pop	{r7}
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a29      	ldr	r2, [pc, #164]	; (800a498 <TIM_Base_SetConfig+0xb8>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <TIM_Base_SetConfig+0x20>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3fe:	d108      	bne.n	800a412 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a20      	ldr	r2, [pc, #128]	; (800a498 <TIM_Base_SetConfig+0xb8>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d00b      	beq.n	800a432 <TIM_Base_SetConfig+0x52>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a420:	d007      	beq.n	800a432 <TIM_Base_SetConfig+0x52>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a1d      	ldr	r2, [pc, #116]	; (800a49c <TIM_Base_SetConfig+0xbc>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d003      	beq.n	800a432 <TIM_Base_SetConfig+0x52>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a1c      	ldr	r2, [pc, #112]	; (800a4a0 <TIM_Base_SetConfig+0xc0>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d108      	bne.n	800a444 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	4313      	orrs	r3, r2
 800a442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	4313      	orrs	r3, r2
 800a450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689a      	ldr	r2, [r3, #8]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a0b      	ldr	r2, [pc, #44]	; (800a498 <TIM_Base_SetConfig+0xb8>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d007      	beq.n	800a480 <TIM_Base_SetConfig+0xa0>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <TIM_Base_SetConfig+0xbc>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d003      	beq.n	800a480 <TIM_Base_SetConfig+0xa0>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a09      	ldr	r2, [pc, #36]	; (800a4a0 <TIM_Base_SetConfig+0xc0>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d103      	bne.n	800a488 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	691a      	ldr	r2, [r3, #16]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	615a      	str	r2, [r3, #20]
}
 800a48e:	bf00      	nop
 800a490:	3714      	adds	r7, #20
 800a492:	46bd      	mov	sp, r7
 800a494:	bc80      	pop	{r7}
 800a496:	4770      	bx	lr
 800a498:	40012c00 	.word	0x40012c00
 800a49c:	40014400 	.word	0x40014400
 800a4a0:	40014800 	.word	0x40014800

0800a4a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bc80      	pop	{r7}
 800a4b4:	4770      	bx	lr

0800a4b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bc80      	pop	{r7}
 800a4c6:	4770      	bx	lr

0800a4c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <LL_RCC_GetUSARTClockSource>:
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a4e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	401a      	ands	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	041b      	lsls	r3, r3, #16
 800a4f2:	4313      	orrs	r3, r2
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bc80      	pop	{r7}
 800a4fc:	4770      	bx	lr

0800a4fe <LL_RCC_GetLPUARTClockSource>:
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a50a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4013      	ands	r3, r2
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr

0800a51c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e042      	b.n	800a5b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7f8 fe45 	bl	80031d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2224      	movs	r2, #36	; 0x24
 800a54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0201 	bic.w	r2, r2, #1
 800a55c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fc3a 	bl	800add8 <UART_SetConfig>
 800a564:	4603      	mov	r3, r0
 800a566:	2b01      	cmp	r3, #1
 800a568:	d101      	bne.n	800a56e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e022      	b.n	800a5b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fea2 	bl	800b2c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a58a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	689a      	ldr	r2, [r3, #8]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a59a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0201 	orr.w	r2, r2, #1
 800a5aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 ff28 	bl	800b402 <UART_CheckIdleState>
 800a5b2:	4603      	mov	r3, r0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	; 0x28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d137      	bne.n	800a644 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <HAL_UART_Receive_IT+0x24>
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e030      	b.n	800a646 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a18      	ldr	r2, [pc, #96]	; (800a650 <HAL_UART_Receive_IT+0x94>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d01f      	beq.n	800a634 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d018      	beq.n	800a634 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	e853 3f00 	ldrex	r3, [r3]
 800a60e:	613b      	str	r3, [r7, #16]
   return(result);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a616:	627b      	str	r3, [r7, #36]	; 0x24
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	623b      	str	r3, [r7, #32]
 800a622:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a624:	69f9      	ldr	r1, [r7, #28]
 800a626:	6a3a      	ldr	r2, [r7, #32]
 800a628:	e841 2300 	strex	r3, r2, [r1]
 800a62c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e6      	bne.n	800a602 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	461a      	mov	r2, r3
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 fff8 	bl	800b630 <UART_Start_Receive_IT>
 800a640:	4603      	mov	r3, r0
 800a642:	e000      	b.n	800a646 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a644:	2302      	movs	r3, #2
  }
}
 800a646:	4618      	mov	r0, r3
 800a648:	3728      	adds	r7, #40	; 0x28
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	40008000 	.word	0x40008000

0800a654 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b08a      	sub	sp, #40	; 0x28
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	4613      	mov	r3, r2
 800a660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a668:	2b20      	cmp	r3, #32
 800a66a:	d167      	bne.n	800a73c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <HAL_UART_Transmit_DMA+0x24>
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	e060      	b.n	800a73e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	88fa      	ldrh	r2, [r7, #6]
 800a686:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	88fa      	ldrh	r2, [r7, #6]
 800a68e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2221      	movs	r2, #33	; 0x21
 800a69e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d028      	beq.n	800a6fc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ae:	4a26      	ldr	r2, [pc, #152]	; (800a748 <HAL_UART_Transmit_DMA+0xf4>)
 800a6b0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b6:	4a25      	ldr	r2, [pc, #148]	; (800a74c <HAL_UART_Transmit_DMA+0xf8>)
 800a6b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6be:	4a24      	ldr	r2, [pc, #144]	; (800a750 <HAL_UART_Transmit_DMA+0xfc>)
 800a6c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3328      	adds	r3, #40	; 0x28
 800a6da:	461a      	mov	r2, r3
 800a6dc:	88fb      	ldrh	r3, [r7, #6]
 800a6de:	f7fa fbf7 	bl	8004ed0 <HAL_DMA_Start_IT>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d009      	beq.n	800a6fc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2210      	movs	r2, #16
 800a6ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e020      	b.n	800a73e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2240      	movs	r2, #64	; 0x40
 800a702:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	3308      	adds	r3, #8
 800a70a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	e853 3f00 	ldrex	r3, [r3]
 800a712:	613b      	str	r3, [r7, #16]
   return(result);
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a71a:	627b      	str	r3, [r7, #36]	; 0x24
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3308      	adds	r3, #8
 800a722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a724:	623a      	str	r2, [r7, #32]
 800a726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a728:	69f9      	ldr	r1, [r7, #28]
 800a72a:	6a3a      	ldr	r2, [r7, #32]
 800a72c:	e841 2300 	strex	r3, r2, [r1]
 800a730:	61bb      	str	r3, [r7, #24]
   return(result);
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e5      	bne.n	800a704 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	e000      	b.n	800a73e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a73c:	2302      	movs	r3, #2
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3728      	adds	r7, #40	; 0x28
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	0800b9bb 	.word	0x0800b9bb
 800a74c:	0800ba55 	.word	0x0800ba55
 800a750:	0800ba71 	.word	0x0800ba71

0800a754 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b0ba      	sub	sp, #232	; 0xe8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a77a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a77e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a782:	4013      	ands	r3, r2
 800a784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d11b      	bne.n	800a7c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a794:	f003 0320 	and.w	r3, r3, #32
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d015      	beq.n	800a7c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7a0:	f003 0320 	and.w	r3, r3, #32
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d105      	bne.n	800a7b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f000 82e3 	beq.w	800ad84 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	4798      	blx	r3
      }
      return;
 800a7c6:	e2dd      	b.n	800ad84 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 8123 	beq.w	800aa18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a7d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a7d6:	4b8d      	ldr	r3, [pc, #564]	; (800aa0c <HAL_UART_IRQHandler+0x2b8>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d106      	bne.n	800a7ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a7de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a7e2:	4b8b      	ldr	r3, [pc, #556]	; (800aa10 <HAL_UART_IRQHandler+0x2bc>)
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8116 	beq.w	800aa18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d011      	beq.n	800a81c <HAL_UART_IRQHandler+0xc8>
 800a7f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00b      	beq.n	800a81c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2201      	movs	r2, #1
 800a80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a812:	f043 0201 	orr.w	r2, r3, #1
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a81c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a820:	f003 0302 	and.w	r3, r3, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	d011      	beq.n	800a84c <HAL_UART_IRQHandler+0xf8>
 800a828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00b      	beq.n	800a84c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2202      	movs	r2, #2
 800a83a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a842:	f043 0204 	orr.w	r2, r3, #4
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a84c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a850:	f003 0304 	and.w	r3, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	d011      	beq.n	800a87c <HAL_UART_IRQHandler+0x128>
 800a858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00b      	beq.n	800a87c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2204      	movs	r2, #4
 800a86a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a872:	f043 0202 	orr.w	r2, r3, #2
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a880:	f003 0308 	and.w	r3, r3, #8
 800a884:	2b00      	cmp	r3, #0
 800a886:	d017      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b00      	cmp	r3, #0
 800a892:	d105      	bne.n	800a8a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a898:	4b5c      	ldr	r3, [pc, #368]	; (800aa0c <HAL_UART_IRQHandler+0x2b8>)
 800a89a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00b      	beq.n	800a8b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ae:	f043 0208 	orr.w	r2, r3, #8
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d012      	beq.n	800a8ea <HAL_UART_IRQHandler+0x196>
 800a8c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00c      	beq.n	800a8ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e0:	f043 0220 	orr.w	r2, r3, #32
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 8249 	beq.w	800ad88 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8fa:	f003 0320 	and.w	r3, r3, #32
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d013      	beq.n	800a92a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d105      	bne.n	800a91a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a90e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a916:	2b00      	cmp	r3, #0
 800a918:	d007      	beq.n	800a92a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a930:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93e:	2b40      	cmp	r3, #64	; 0x40
 800a940:	d005      	beq.n	800a94e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a946:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d054      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 ffce 	bl	800b8f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d146      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a970:	e853 3f00 	ldrex	r3, [r3]
 800a974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a97c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	3308      	adds	r3, #8
 800a98a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a98e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a99a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a99e:	e841 2300 	strex	r3, r2, [r1]
 800a9a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1d9      	bne.n	800a962 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d017      	beq.n	800a9e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9be:	4a15      	ldr	r2, [pc, #84]	; (800aa14 <HAL_UART_IRQHandler+0x2c0>)
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fa fb5d 	bl	8005088 <HAL_DMA_Abort_IT>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d019      	beq.n	800aa08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9e6:	e00f      	b.n	800aa08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f9e0 	bl	800adae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ee:	e00b      	b.n	800aa08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f9dc 	bl	800adae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f6:	e007      	b.n	800aa08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f9d8 	bl	800adae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800aa06:	e1bf      	b.n	800ad88 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa08:	bf00      	nop
    return;
 800aa0a:	e1bd      	b.n	800ad88 <HAL_UART_IRQHandler+0x634>
 800aa0c:	10000001 	.word	0x10000001
 800aa10:	04000120 	.word	0x04000120
 800aa14:	0800baf1 	.word	0x0800baf1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	f040 8153 	bne.w	800acc8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aa22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 814c 	beq.w	800acc8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aa30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 8145 	beq.w	800acc8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2210      	movs	r2, #16
 800aa44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa50:	2b40      	cmp	r3, #64	; 0x40
 800aa52:	f040 80bb 	bne.w	800abcc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 818f 	beq.w	800ad8c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f080 8187 	bcs.w	800ad8c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f040 8087 	bne.w	800abaa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aaa8:	e853 3f00 	ldrex	r3, [r3]
 800aaac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	461a      	mov	r2, r3
 800aac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aaca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1da      	bne.n	800aa9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3308      	adds	r3, #8
 800aaec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf0:	e853 3f00 	ldrex	r3, [r3]
 800aaf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaf8:	f023 0301 	bic.w	r3, r3, #1
 800aafc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3308      	adds	r3, #8
 800ab06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e1      	bne.n	800aae6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	3308      	adds	r3, #8
 800ab42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab4e:	e841 2300 	strex	r3, r2, [r1]
 800ab52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1e3      	bne.n	800ab22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2220      	movs	r2, #32
 800ab5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab78:	f023 0310 	bic.w	r3, r3, #16
 800ab7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	461a      	mov	r2, r3
 800ab86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab92:	e841 2300 	strex	r3, r2, [r1]
 800ab96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1e4      	bne.n	800ab68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fa fa11 	bl	8004fcc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2202      	movs	r2, #2
 800abae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f8fb 	bl	800adc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abca:	e0df      	b.n	800ad8c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abd8:	b29b      	uxth	r3, r3
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 80d1 	beq.w	800ad90 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800abee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f000 80cc 	beq.w	800ad90 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ac1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1e4      	bne.n	800abf8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3308      	adds	r3, #8
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac38:	e853 3f00 	ldrex	r3, [r3]
 800ac3c:	623b      	str	r3, [r7, #32]
   return(result);
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac44:	f023 0301 	bic.w	r3, r3, #1
 800ac48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3308      	adds	r3, #8
 800ac52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac56:	633a      	str	r2, [r7, #48]	; 0x30
 800ac58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e1      	bne.n	800ac2e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	e853 3f00 	ldrex	r3, [r3]
 800ac8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0310 	bic.w	r3, r3, #16
 800ac92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aca0:	61fb      	str	r3, [r7, #28]
 800aca2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca4:	69b9      	ldr	r1, [r7, #24]
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	e841 2300 	strex	r3, r2, [r1]
 800acac:	617b      	str	r3, [r7, #20]
   return(result);
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1e4      	bne.n	800ac7e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2202      	movs	r2, #2
 800acb8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 f87d 	bl	800adc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acc6:	e063      	b.n	800ad90 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800acc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800accc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00e      	beq.n	800acf2 <HAL_UART_IRQHandler+0x59e>
 800acd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d008      	beq.n	800acf2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ace8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f001 fc5e 	bl	800c5ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acf0:	e051      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800acf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d014      	beq.n	800ad28 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d105      	bne.n	800ad16 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ad0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d008      	beq.n	800ad28 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d03a      	beq.n	800ad94 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
    }
    return;
 800ad26:	e035      	b.n	800ad94 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d009      	beq.n	800ad48 <HAL_UART_IRQHandler+0x5f4>
 800ad34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 feeb 	bl	800bb1c <UART_EndTransmit_IT>
    return;
 800ad46:	e026      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <HAL_UART_IRQHandler+0x614>
 800ad54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f001 fc35 	bl	800c5d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad66:	e016      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d010      	beq.n	800ad96 <HAL_UART_IRQHandler+0x642>
 800ad74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	da0c      	bge.n	800ad96 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 fc1e 	bl	800c5be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad82:	e008      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
      return;
 800ad84:	bf00      	nop
 800ad86:	e006      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
    return;
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
      return;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
      return;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <HAL_UART_IRQHandler+0x642>
    return;
 800ad94:	bf00      	nop
  }
}
 800ad96:	37e8      	adds	r7, #232	; 0xe8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bc80      	pop	{r7}
 800adac:	4770      	bx	lr

0800adae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	bc80      	pop	{r7}
 800adbe:	4770      	bx	lr

0800adc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	460b      	mov	r3, r1
 800adca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	bc80      	pop	{r7}
 800add4:	4770      	bx	lr
	...

0800add8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800add8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800addc:	b08c      	sub	sp, #48	; 0x30
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	689a      	ldr	r2, [r3, #8]
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	431a      	orrs	r2, r3
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	4b94      	ldr	r3, [pc, #592]	; (800b058 <UART_SetConfig+0x280>)
 800ae08:	4013      	ands	r3, r2
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	6812      	ldr	r2, [r2, #0]
 800ae0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae10:	430b      	orrs	r3, r1
 800ae12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a89      	ldr	r2, [pc, #548]	; (800b05c <UART_SetConfig+0x284>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d004      	beq.n	800ae44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae40:	4313      	orrs	r3, r2
 800ae42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ae4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ae52:	697a      	ldr	r2, [r7, #20]
 800ae54:	6812      	ldr	r2, [r2, #0]
 800ae56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae58:	430b      	orrs	r3, r1
 800ae5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae62:	f023 010f 	bic.w	r1, r3, #15
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a7a      	ldr	r2, [pc, #488]	; (800b060 <UART_SetConfig+0x288>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d127      	bne.n	800aecc <UART_SetConfig+0xf4>
 800ae7c:	2003      	movs	r0, #3
 800ae7e:	f7ff fb2c 	bl	800a4da <LL_RCC_GetUSARTClockSource>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d81b      	bhi.n	800aec4 <UART_SetConfig+0xec>
 800ae8c:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <UART_SetConfig+0xbc>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeb5 	.word	0x0800aeb5
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aebd 	.word	0x0800aebd
 800aea4:	2301      	movs	r3, #1
 800aea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeaa:	e080      	b.n	800afae <UART_SetConfig+0x1d6>
 800aeac:	2302      	movs	r3, #2
 800aeae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeb2:	e07c      	b.n	800afae <UART_SetConfig+0x1d6>
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeba:	e078      	b.n	800afae <UART_SetConfig+0x1d6>
 800aebc:	2308      	movs	r3, #8
 800aebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aec2:	e074      	b.n	800afae <UART_SetConfig+0x1d6>
 800aec4:	2310      	movs	r3, #16
 800aec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aeca:	e070      	b.n	800afae <UART_SetConfig+0x1d6>
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a64      	ldr	r2, [pc, #400]	; (800b064 <UART_SetConfig+0x28c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d138      	bne.n	800af48 <UART_SetConfig+0x170>
 800aed6:	200c      	movs	r0, #12
 800aed8:	f7ff faff 	bl	800a4da <LL_RCC_GetUSARTClockSource>
 800aedc:	4603      	mov	r3, r0
 800aede:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800aee2:	2b0c      	cmp	r3, #12
 800aee4:	d82c      	bhi.n	800af40 <UART_SetConfig+0x168>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <UART_SetConfig+0x114>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af21 	.word	0x0800af21
 800aef0:	0800af41 	.word	0x0800af41
 800aef4:	0800af41 	.word	0x0800af41
 800aef8:	0800af41 	.word	0x0800af41
 800aefc:	0800af31 	.word	0x0800af31
 800af00:	0800af41 	.word	0x0800af41
 800af04:	0800af41 	.word	0x0800af41
 800af08:	0800af41 	.word	0x0800af41
 800af0c:	0800af29 	.word	0x0800af29
 800af10:	0800af41 	.word	0x0800af41
 800af14:	0800af41 	.word	0x0800af41
 800af18:	0800af41 	.word	0x0800af41
 800af1c:	0800af39 	.word	0x0800af39
 800af20:	2300      	movs	r3, #0
 800af22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af26:	e042      	b.n	800afae <UART_SetConfig+0x1d6>
 800af28:	2302      	movs	r3, #2
 800af2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af2e:	e03e      	b.n	800afae <UART_SetConfig+0x1d6>
 800af30:	2304      	movs	r3, #4
 800af32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af36:	e03a      	b.n	800afae <UART_SetConfig+0x1d6>
 800af38:	2308      	movs	r3, #8
 800af3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af3e:	e036      	b.n	800afae <UART_SetConfig+0x1d6>
 800af40:	2310      	movs	r3, #16
 800af42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af46:	e032      	b.n	800afae <UART_SetConfig+0x1d6>
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a43      	ldr	r2, [pc, #268]	; (800b05c <UART_SetConfig+0x284>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d12a      	bne.n	800afa8 <UART_SetConfig+0x1d0>
 800af52:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800af56:	f7ff fad2 	bl	800a4fe <LL_RCC_GetLPUARTClockSource>
 800af5a:	4603      	mov	r3, r0
 800af5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af60:	d01a      	beq.n	800af98 <UART_SetConfig+0x1c0>
 800af62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af66:	d81b      	bhi.n	800afa0 <UART_SetConfig+0x1c8>
 800af68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af6c:	d00c      	beq.n	800af88 <UART_SetConfig+0x1b0>
 800af6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af72:	d815      	bhi.n	800afa0 <UART_SetConfig+0x1c8>
 800af74:	2b00      	cmp	r3, #0
 800af76:	d003      	beq.n	800af80 <UART_SetConfig+0x1a8>
 800af78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af7c:	d008      	beq.n	800af90 <UART_SetConfig+0x1b8>
 800af7e:	e00f      	b.n	800afa0 <UART_SetConfig+0x1c8>
 800af80:	2300      	movs	r3, #0
 800af82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af86:	e012      	b.n	800afae <UART_SetConfig+0x1d6>
 800af88:	2302      	movs	r3, #2
 800af8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af8e:	e00e      	b.n	800afae <UART_SetConfig+0x1d6>
 800af90:	2304      	movs	r3, #4
 800af92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af96:	e00a      	b.n	800afae <UART_SetConfig+0x1d6>
 800af98:	2308      	movs	r3, #8
 800af9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af9e:	e006      	b.n	800afae <UART_SetConfig+0x1d6>
 800afa0:	2310      	movs	r3, #16
 800afa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afa6:	e002      	b.n	800afae <UART_SetConfig+0x1d6>
 800afa8:	2310      	movs	r3, #16
 800afaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a2a      	ldr	r2, [pc, #168]	; (800b05c <UART_SetConfig+0x284>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	f040 80a4 	bne.w	800b102 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afbe:	2b08      	cmp	r3, #8
 800afc0:	d823      	bhi.n	800b00a <UART_SetConfig+0x232>
 800afc2:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <UART_SetConfig+0x1f0>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800afed 	.word	0x0800afed
 800afcc:	0800b00b 	.word	0x0800b00b
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800b00b 	.word	0x0800b00b
 800afd8:	0800affb 	.word	0x0800affb
 800afdc:	0800b00b 	.word	0x0800b00b
 800afe0:	0800b00b 	.word	0x0800b00b
 800afe4:	0800b00b 	.word	0x0800b00b
 800afe8:	0800b003 	.word	0x0800b003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afec:	f7fd fc12 	bl	8008814 <HAL_RCC_GetPCLK1Freq>
 800aff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aff2:	e010      	b.n	800b016 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aff4:	4b1c      	ldr	r3, [pc, #112]	; (800b068 <UART_SetConfig+0x290>)
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aff8:	e00d      	b.n	800b016 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800affa:	f7fd fb57 	bl	80086ac <HAL_RCC_GetSysClockFreq>
 800affe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b000:	e009      	b.n	800b016 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b008:	e005      	b.n	800b016 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b014:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 8137 	beq.w	800b28c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	4a12      	ldr	r2, [pc, #72]	; (800b06c <UART_SetConfig+0x294>)
 800b024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b028:	461a      	mov	r2, r3
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b030:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	4413      	add	r3, r2
 800b03c:	69ba      	ldr	r2, [r7, #24]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d305      	bcc.n	800b04e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d910      	bls.n	800b070 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b054:	e11a      	b.n	800b28c <UART_SetConfig+0x4b4>
 800b056:	bf00      	nop
 800b058:	cfff69f3 	.word	0xcfff69f3
 800b05c:	40008000 	.word	0x40008000
 800b060:	40013800 	.word	0x40013800
 800b064:	40004400 	.word	0x40004400
 800b068:	00f42400 	.word	0x00f42400
 800b06c:	0801f06c 	.word	0x0801f06c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	2200      	movs	r2, #0
 800b074:	60bb      	str	r3, [r7, #8]
 800b076:	60fa      	str	r2, [r7, #12]
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07c:	4a8e      	ldr	r2, [pc, #568]	; (800b2b8 <UART_SetConfig+0x4e0>)
 800b07e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b082:	b29b      	uxth	r3, r3
 800b084:	2200      	movs	r2, #0
 800b086:	603b      	str	r3, [r7, #0]
 800b088:	607a      	str	r2, [r7, #4]
 800b08a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b08e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b092:	f7f5 fe7b 	bl	8000d8c <__aeabi_uldivmod>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4610      	mov	r0, r2
 800b09c:	4619      	mov	r1, r3
 800b09e:	f04f 0200 	mov.w	r2, #0
 800b0a2:	f04f 0300 	mov.w	r3, #0
 800b0a6:	020b      	lsls	r3, r1, #8
 800b0a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0ac:	0202      	lsls	r2, r0, #8
 800b0ae:	6979      	ldr	r1, [r7, #20]
 800b0b0:	6849      	ldr	r1, [r1, #4]
 800b0b2:	0849      	lsrs	r1, r1, #1
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	eb12 0804 	adds.w	r8, r2, r4
 800b0be:	eb43 0905 	adc.w	r9, r3, r5
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	469a      	mov	sl, r3
 800b0ca:	4693      	mov	fp, r2
 800b0cc:	4652      	mov	r2, sl
 800b0ce:	465b      	mov	r3, fp
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7f5 fe5a 	bl	8000d8c <__aeabi_uldivmod>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4613      	mov	r3, r2
 800b0de:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0e6:	d308      	bcc.n	800b0fa <UART_SetConfig+0x322>
 800b0e8:	6a3b      	ldr	r3, [r7, #32]
 800b0ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ee:	d204      	bcs.n	800b0fa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6a3a      	ldr	r2, [r7, #32]
 800b0f6:	60da      	str	r2, [r3, #12]
 800b0f8:	e0c8      	b.n	800b28c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b100:	e0c4      	b.n	800b28c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b10a:	d167      	bne.n	800b1dc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b10c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b110:	2b08      	cmp	r3, #8
 800b112:	d828      	bhi.n	800b166 <UART_SetConfig+0x38e>
 800b114:	a201      	add	r2, pc, #4	; (adr r2, 800b11c <UART_SetConfig+0x344>)
 800b116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11a:	bf00      	nop
 800b11c:	0800b141 	.word	0x0800b141
 800b120:	0800b149 	.word	0x0800b149
 800b124:	0800b151 	.word	0x0800b151
 800b128:	0800b167 	.word	0x0800b167
 800b12c:	0800b157 	.word	0x0800b157
 800b130:	0800b167 	.word	0x0800b167
 800b134:	0800b167 	.word	0x0800b167
 800b138:	0800b167 	.word	0x0800b167
 800b13c:	0800b15f 	.word	0x0800b15f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b140:	f7fd fb68 	bl	8008814 <HAL_RCC_GetPCLK1Freq>
 800b144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b146:	e014      	b.n	800b172 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b148:	f7fd fb76 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800b14c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b14e:	e010      	b.n	800b172 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b150:	4b5a      	ldr	r3, [pc, #360]	; (800b2bc <UART_SetConfig+0x4e4>)
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b154:	e00d      	b.n	800b172 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b156:	f7fd faa9 	bl	80086ac <HAL_RCC_GetSysClockFreq>
 800b15a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b15c:	e009      	b.n	800b172 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b15e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b164:	e005      	b.n	800b172 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 8089 	beq.w	800b28c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17e:	4a4e      	ldr	r2, [pc, #312]	; (800b2b8 <UART_SetConfig+0x4e0>)
 800b180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b184:	461a      	mov	r2, r3
 800b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b188:	fbb3 f3f2 	udiv	r3, r3, r2
 800b18c:	005a      	lsls	r2, r3, #1
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	085b      	lsrs	r3, r3, #1
 800b194:	441a      	add	r2, r3
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b19e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	2b0f      	cmp	r3, #15
 800b1a4:	d916      	bls.n	800b1d4 <UART_SetConfig+0x3fc>
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ac:	d212      	bcs.n	800b1d4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	f023 030f 	bic.w	r3, r3, #15
 800b1b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	085b      	lsrs	r3, r3, #1
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	f003 0307 	and.w	r3, r3, #7
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	8bfb      	ldrh	r3, [r7, #30]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	8bfa      	ldrh	r2, [r7, #30]
 800b1d0:	60da      	str	r2, [r3, #12]
 800b1d2:	e05b      	b.n	800b28c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b1da:	e057      	b.n	800b28c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	d828      	bhi.n	800b236 <UART_SetConfig+0x45e>
 800b1e4:	a201      	add	r2, pc, #4	; (adr r2, 800b1ec <UART_SetConfig+0x414>)
 800b1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ea:	bf00      	nop
 800b1ec:	0800b211 	.word	0x0800b211
 800b1f0:	0800b219 	.word	0x0800b219
 800b1f4:	0800b221 	.word	0x0800b221
 800b1f8:	0800b237 	.word	0x0800b237
 800b1fc:	0800b227 	.word	0x0800b227
 800b200:	0800b237 	.word	0x0800b237
 800b204:	0800b237 	.word	0x0800b237
 800b208:	0800b237 	.word	0x0800b237
 800b20c:	0800b22f 	.word	0x0800b22f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b210:	f7fd fb00 	bl	8008814 <HAL_RCC_GetPCLK1Freq>
 800b214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b216:	e014      	b.n	800b242 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b218:	f7fd fb0e 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800b21c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b21e:	e010      	b.n	800b242 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b220:	4b26      	ldr	r3, [pc, #152]	; (800b2bc <UART_SetConfig+0x4e4>)
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b224:	e00d      	b.n	800b242 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b226:	f7fd fa41 	bl	80086ac <HAL_RCC_GetSysClockFreq>
 800b22a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b22c:	e009      	b.n	800b242 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b22e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b234:	e005      	b.n	800b242 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b240:	bf00      	nop
    }

    if (pclk != 0U)
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	2b00      	cmp	r3, #0
 800b246:	d021      	beq.n	800b28c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	4a1a      	ldr	r2, [pc, #104]	; (800b2b8 <UART_SetConfig+0x4e0>)
 800b24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b252:	461a      	mov	r2, r3
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	fbb3 f2f2 	udiv	r2, r3, r2
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	085b      	lsrs	r3, r3, #1
 800b260:	441a      	add	r2, r3
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b26c:	6a3b      	ldr	r3, [r7, #32]
 800b26e:	2b0f      	cmp	r3, #15
 800b270:	d909      	bls.n	800b286 <UART_SetConfig+0x4ae>
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b278:	d205      	bcs.n	800b286 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	60da      	str	r2, [r3, #12]
 800b284:	e002      	b.n	800b28c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2201      	movs	r2, #1
 800b290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2201      	movs	r2, #1
 800b298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b2a8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3730      	adds	r7, #48	; 0x30
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2b6:	bf00      	nop
 800b2b8:	0801f06c 	.word	0x0801f06c
 800b2bc:	00f42400 	.word	0x00f42400

0800b2c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00a      	beq.n	800b2ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	430a      	orrs	r2, r1
 800b2e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00a      	beq.n	800b30c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	430a      	orrs	r2, r1
 800b30a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b310:	f003 0304 	and.w	r3, r3, #4
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00a      	beq.n	800b32e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	430a      	orrs	r2, r1
 800b32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b332:	f003 0308 	and.w	r3, r3, #8
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	430a      	orrs	r2, r1
 800b34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b354:	f003 0310 	and.w	r3, r3, #16
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00a      	beq.n	800b372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	430a      	orrs	r2, r1
 800b370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b376:	f003 0320 	and.w	r3, r3, #32
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00a      	beq.n	800b394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01a      	beq.n	800b3d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3be:	d10a      	bne.n	800b3d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	430a      	orrs	r2, r1
 800b3d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	605a      	str	r2, [r3, #4]
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bc80      	pop	{r7}
 800b400:	4770      	bx	lr

0800b402 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af02      	add	r7, sp, #8
 800b408:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b412:	f7f7 fa53 	bl	80028bc <HAL_GetTick>
 800b416:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b08      	cmp	r3, #8
 800b424:	d10e      	bne.n	800b444 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f832 	bl	800b49e <UART_WaitOnFlagUntilTimeout>
 800b43a:	4603      	mov	r3, r0
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e028      	b.n	800b496 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 0304 	and.w	r3, r3, #4
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d10e      	bne.n	800b470 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b452:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f81c 	bl	800b49e <UART_WaitOnFlagUntilTimeout>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e012      	b.n	800b496 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2220      	movs	r2, #32
 800b474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2200      	movs	r2, #0
 800b48a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b09c      	sub	sp, #112	; 0x70
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	60f8      	str	r0, [r7, #12]
 800b4a6:	60b9      	str	r1, [r7, #8]
 800b4a8:	603b      	str	r3, [r7, #0]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4ae:	e0a9      	b.n	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b6:	f000 80a5 	beq.w	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ba:	f7f7 f9ff 	bl	80028bc <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d302      	bcc.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d140      	bne.n	800b552 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4e4:	667b      	str	r3, [r7, #100]	; 0x64
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4f6:	e841 2300 	strex	r3, r2, [r1]
 800b4fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b4fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1e6      	bne.n	800b4d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3308      	adds	r3, #8
 800b508:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	f023 0301 	bic.w	r3, r3, #1
 800b518:	663b      	str	r3, [r7, #96]	; 0x60
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b522:	64ba      	str	r2, [r7, #72]	; 0x48
 800b524:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e5      	bne.n	800b502 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2220      	movs	r2, #32
 800b53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2220      	movs	r2, #32
 800b542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e069      	b.n	800b626 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0304 	and.w	r3, r3, #4
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d051      	beq.n	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56e:	d149      	bne.n	800b604 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b578:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b58e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	461a      	mov	r2, r3
 800b596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b598:	637b      	str	r3, [r7, #52]	; 0x34
 800b59a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b59e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a0:	e841 2300 	strex	r3, r2, [r1]
 800b5a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1e6      	bne.n	800b57a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f023 0301 	bic.w	r3, r3, #1
 800b5c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5cc:	623a      	str	r2, [r7, #32]
 800b5ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	69f9      	ldr	r1, [r7, #28]
 800b5d2:	6a3a      	ldr	r2, [r7, #32]
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e5      	bne.n	800b5ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2220      	movs	r2, #32
 800b5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2220      	movs	r2, #32
 800b5f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e010      	b.n	800b626 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69da      	ldr	r2, [r3, #28]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	4013      	ands	r3, r2
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	429a      	cmp	r2, r3
 800b612:	bf0c      	ite	eq
 800b614:	2301      	moveq	r3, #1
 800b616:	2300      	movne	r3, #0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	461a      	mov	r2, r3
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	429a      	cmp	r2, r3
 800b620:	f43f af46 	beq.w	800b4b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3770      	adds	r7, #112	; 0x70
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b630:	b480      	push	{r7}
 800b632:	b0a3      	sub	sp, #140	; 0x8c
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4613      	mov	r3, r2
 800b63c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	88fa      	ldrh	r2, [r7, #6]
 800b648:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	88fa      	ldrh	r2, [r7, #6]
 800b650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b662:	d10e      	bne.n	800b682 <UART_Start_Receive_IT+0x52>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d105      	bne.n	800b678 <UART_Start_Receive_IT+0x48>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b676:	e02d      	b.n	800b6d4 <UART_Start_Receive_IT+0xa4>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	22ff      	movs	r2, #255	; 0xff
 800b67c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b680:	e028      	b.n	800b6d4 <UART_Start_Receive_IT+0xa4>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10d      	bne.n	800b6a6 <UART_Start_Receive_IT+0x76>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d104      	bne.n	800b69c <UART_Start_Receive_IT+0x6c>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	22ff      	movs	r2, #255	; 0xff
 800b696:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b69a:	e01b      	b.n	800b6d4 <UART_Start_Receive_IT+0xa4>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	227f      	movs	r2, #127	; 0x7f
 800b6a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6a4:	e016      	b.n	800b6d4 <UART_Start_Receive_IT+0xa4>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ae:	d10d      	bne.n	800b6cc <UART_Start_Receive_IT+0x9c>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <UART_Start_Receive_IT+0x92>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	227f      	movs	r2, #127	; 0x7f
 800b6bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6c0:	e008      	b.n	800b6d4 <UART_Start_Receive_IT+0xa4>
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	223f      	movs	r2, #63	; 0x3f
 800b6c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b6ca:	e003      	b.n	800b6d4 <UART_Start_Receive_IT+0xa4>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2222      	movs	r2, #34	; 0x22
 800b6e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3308      	adds	r3, #8
 800b6ea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b6f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6f6:	f043 0301 	orr.w	r3, r3, #1
 800b6fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3308      	adds	r3, #8
 800b704:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b708:	673a      	str	r2, [r7, #112]	; 0x70
 800b70a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b70e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b710:	e841 2300 	strex	r3, r2, [r1]
 800b714:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b716:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e3      	bne.n	800b6e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b724:	d14f      	bne.n	800b7c6 <UART_Start_Receive_IT+0x196>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b72c:	88fa      	ldrh	r2, [r7, #6]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d349      	bcc.n	800b7c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b73a:	d107      	bne.n	800b74c <UART_Start_Receive_IT+0x11c>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d103      	bne.n	800b74c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4a46      	ldr	r2, [pc, #280]	; (800b860 <UART_Start_Receive_IT+0x230>)
 800b748:	675a      	str	r2, [r3, #116]	; 0x74
 800b74a:	e002      	b.n	800b752 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4a45      	ldr	r2, [pc, #276]	; (800b864 <UART_Start_Receive_IT+0x234>)
 800b750:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01a      	beq.n	800b790 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b76e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b77c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b77e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b782:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b78a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e4      	bne.n	800b75a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3308      	adds	r3, #8
 800b796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b79a:	e853 3f00 	ldrex	r3, [r3]
 800b79e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b7b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b7b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7b8:	e841 2300 	strex	r3, r2, [r1]
 800b7bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1e5      	bne.n	800b790 <UART_Start_Receive_IT+0x160>
 800b7c4:	e046      	b.n	800b854 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ce:	d107      	bne.n	800b7e0 <UART_Start_Receive_IT+0x1b0>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4a23      	ldr	r2, [pc, #140]	; (800b868 <UART_Start_Receive_IT+0x238>)
 800b7dc:	675a      	str	r2, [r3, #116]	; 0x74
 800b7de:	e002      	b.n	800b7e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	4a22      	ldr	r2, [pc, #136]	; (800b86c <UART_Start_Receive_IT+0x23c>)
 800b7e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d019      	beq.n	800b822 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b802:	677b      	str	r3, [r7, #116]	; 0x74
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	461a      	mov	r2, r3
 800b80a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b80c:	637b      	str	r3, [r7, #52]	; 0x34
 800b80e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1e6      	bne.n	800b7ee <UART_Start_Receive_IT+0x1be>
 800b820:	e018      	b.n	800b854 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	e853 3f00 	ldrex	r3, [r3]
 800b82e:	613b      	str	r3, [r7, #16]
   return(result);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f043 0320 	orr.w	r3, r3, #32
 800b836:	67bb      	str	r3, [r7, #120]	; 0x78
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b844:	69f9      	ldr	r1, [r7, #28]
 800b846:	6a3a      	ldr	r2, [r7, #32]
 800b848:	e841 2300 	strex	r3, r2, [r1]
 800b84c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b84e:	69bb      	ldr	r3, [r7, #24]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1e6      	bne.n	800b822 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	378c      	adds	r7, #140	; 0x8c
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bc80      	pop	{r7}
 800b85e:	4770      	bx	lr
 800b860:	0800c245 	.word	0x0800c245
 800b864:	0800bee5 	.word	0x0800bee5
 800b868:	0800bd2d 	.word	0x0800bd2d
 800b86c:	0800bb75 	.word	0x0800bb75

0800b870 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b870:	b480      	push	{r7}
 800b872:	b08f      	sub	sp, #60	; 0x3c
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	61fb      	str	r3, [r7, #28]
   return(result);
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b88c:	637b      	str	r3, [r7, #52]	; 0x34
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b896:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b898:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b89c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e6      	bne.n	800b878 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b8c0:	633b      	str	r3, [r7, #48]	; 0x30
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3308      	adds	r3, #8
 800b8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ca:	61ba      	str	r2, [r7, #24]
 800b8cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6979      	ldr	r1, [r7, #20]
 800b8d0:	69ba      	ldr	r2, [r7, #24]
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e5      	bne.n	800b8aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b8e6:	bf00      	nop
 800b8e8:	373c      	adds	r7, #60	; 0x3c
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr

0800b8f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b095      	sub	sp, #84	; 0x54
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b900:	e853 3f00 	ldrex	r3, [r3]
 800b904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b90c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b916:	643b      	str	r3, [r7, #64]	; 0x40
 800b918:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b91c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b91e:	e841 2300 	strex	r3, r2, [r1]
 800b922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	2b00      	cmp	r3, #0
 800b928:	d1e6      	bne.n	800b8f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3308      	adds	r3, #8
 800b930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	e853 3f00 	ldrex	r3, [r3]
 800b938:	61fb      	str	r3, [r7, #28]
   return(result);
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b940:	f023 0301 	bic.w	r3, r3, #1
 800b944:	64bb      	str	r3, [r7, #72]	; 0x48
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3308      	adds	r3, #8
 800b94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b94e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b952:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b956:	e841 2300 	strex	r3, r2, [r1]
 800b95a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e3      	bne.n	800b92a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b966:	2b01      	cmp	r3, #1
 800b968:	d118      	bne.n	800b99c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	60bb      	str	r3, [r7, #8]
   return(result);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	f023 0310 	bic.w	r3, r3, #16
 800b97e:	647b      	str	r3, [r7, #68]	; 0x44
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	461a      	mov	r2, r3
 800b986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6979      	ldr	r1, [r7, #20]
 800b98e:	69ba      	ldr	r2, [r7, #24]
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	613b      	str	r3, [r7, #16]
   return(result);
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e6      	bne.n	800b96a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b9b0:	bf00      	nop
 800b9b2:	3754      	adds	r7, #84	; 0x54
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bc80      	pop	{r7}
 800b9b8:	4770      	bx	lr

0800b9ba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b090      	sub	sp, #64	; 0x40
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d137      	bne.n	800ba46 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	e853 3f00 	ldrex	r3, [r3]
 800b9ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b9ee:	6a3b      	ldr	r3, [r7, #32]
 800b9f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9f4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3308      	adds	r3, #8
 800b9fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9fe:	633a      	str	r2, [r7, #48]	; 0x30
 800ba00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba06:	e841 2300 	strex	r3, r2, [r1]
 800ba0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1e5      	bne.n	800b9de <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	e853 3f00 	ldrex	r3, [r3]
 800ba1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba26:	637b      	str	r3, [r7, #52]	; 0x34
 800ba28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	61fb      	str	r3, [r7, #28]
 800ba32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba34:	69b9      	ldr	r1, [r7, #24]
 800ba36:	69fa      	ldr	r2, [r7, #28]
 800ba38:	e841 2300 	strex	r3, r2, [r1]
 800ba3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d1e6      	bne.n	800ba12 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ba44:	e002      	b.n	800ba4c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ba46:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ba48:	f7f7 fdd6 	bl	80035f8 <HAL_UART_TxCpltCallback>
}
 800ba4c:	bf00      	nop
 800ba4e:	3740      	adds	r7, #64	; 0x40
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba60:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff f99a 	bl	800ad9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba68:	bf00      	nop
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba84:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba8c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba98:	2b80      	cmp	r3, #128	; 0x80
 800ba9a:	d109      	bne.n	800bab0 <UART_DMAError+0x40>
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2b21      	cmp	r3, #33	; 0x21
 800baa0:	d106      	bne.n	800bab0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800baaa:	6978      	ldr	r0, [r7, #20]
 800baac:	f7ff fee0 	bl	800b870 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baba:	2b40      	cmp	r3, #64	; 0x40
 800babc:	d109      	bne.n	800bad2 <UART_DMAError+0x62>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2b22      	cmp	r3, #34	; 0x22
 800bac2:	d106      	bne.n	800bad2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bacc:	6978      	ldr	r0, [r7, #20]
 800bace:	f7ff ff0f 	bl	800b8f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bad8:	f043 0210 	orr.w	r2, r3, #16
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bae2:	6978      	ldr	r0, [r7, #20]
 800bae4:	f7ff f963 	bl	800adae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bae8:	bf00      	nop
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f7ff f94d 	bl	800adae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb14:	bf00      	nop
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b088      	sub	sp, #32
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb38:	61fb      	str	r3, [r7, #28]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	61bb      	str	r3, [r7, #24]
 800bb44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb46:	6979      	ldr	r1, [r7, #20]
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	e841 2300 	strex	r3, r2, [r1]
 800bb4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1e6      	bne.n	800bb24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7f7 fd47 	bl	80035f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb6a:	bf00      	nop
 800bb6c:	3720      	adds	r7, #32
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b09c      	sub	sp, #112	; 0x70
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8c:	2b22      	cmp	r3, #34	; 0x22
 800bb8e:	f040 80be 	bne.w	800bd0e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bb9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bba0:	b2d9      	uxtb	r1, r3
 800bba2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbac:	400a      	ands	r2, r1
 800bbae:	b2d2      	uxtb	r2, r2
 800bbb0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbb6:	1c5a      	adds	r2, r3, #1
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f040 80a1 	bne.w	800bd1e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe4:	e853 3f00 	ldrex	r3, [r3]
 800bbe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bbea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbf0:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bbfa:	65bb      	str	r3, [r7, #88]	; 0x58
 800bbfc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bc00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bc08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1e6      	bne.n	800bbdc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	e853 3f00 	ldrex	r3, [r3]
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	f023 0301 	bic.w	r3, r3, #1
 800bc24:	667b      	str	r3, [r7, #100]	; 0x64
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc2e:	647a      	str	r2, [r7, #68]	; 0x44
 800bc30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc36:	e841 2300 	strex	r3, r2, [r1]
 800bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1e5      	bne.n	800bc0e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2220      	movs	r2, #32
 800bc46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a33      	ldr	r2, [pc, #204]	; (800bd28 <UART_RxISR_8BIT+0x1b4>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d01f      	beq.n	800bca0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d018      	beq.n	800bca0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	e853 3f00 	ldrex	r3, [r3]
 800bc7a:	623b      	str	r3, [r7, #32]
   return(result);
 800bc7c:	6a3b      	ldr	r3, [r7, #32]
 800bc7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc82:	663b      	str	r3, [r7, #96]	; 0x60
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc8c:	633b      	str	r3, [r7, #48]	; 0x30
 800bc8e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc94:	e841 2300 	strex	r3, r2, [r1]
 800bc98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1e6      	bne.n	800bc6e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d12e      	bne.n	800bd06 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	e853 3f00 	ldrex	r3, [r3]
 800bcba:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f023 0310 	bic.w	r3, r3, #16
 800bcc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd0:	69b9      	ldr	r1, [r7, #24]
 800bcd2:	69fa      	ldr	r2, [r7, #28]
 800bcd4:	e841 2300 	strex	r3, r2, [r1]
 800bcd8:	617b      	str	r3, [r7, #20]
   return(result);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e6      	bne.n	800bcae <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	f003 0310 	and.w	r3, r3, #16
 800bcea:	2b10      	cmp	r3, #16
 800bcec:	d103      	bne.n	800bcf6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2210      	movs	r2, #16
 800bcf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff f85e 	bl	800adc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd04:	e00b      	b.n	800bd1e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7f7 fc8c 	bl	8003624 <HAL_UART_RxCpltCallback>
}
 800bd0c:	e007      	b.n	800bd1e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	699a      	ldr	r2, [r3, #24]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f042 0208 	orr.w	r2, r2, #8
 800bd1c:	619a      	str	r2, [r3, #24]
}
 800bd1e:	bf00      	nop
 800bd20:	3770      	adds	r7, #112	; 0x70
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	40008000 	.word	0x40008000

0800bd2c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b09c      	sub	sp, #112	; 0x70
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd3a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd44:	2b22      	cmp	r3, #34	; 0x22
 800bd46:	f040 80be 	bne.w	800bec6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd58:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bd5a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bd5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bd62:	4013      	ands	r3, r2
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd68:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6e:	1c9a      	adds	r2, r3, #2
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f040 80a1 	bne.w	800bed6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bda2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bda4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bda8:	667b      	str	r3, [r7, #100]	; 0x64
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdb2:	657b      	str	r3, [r7, #84]	; 0x54
 800bdb4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdba:	e841 2300 	strex	r3, r2, [r1]
 800bdbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bdc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e6      	bne.n	800bd94 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3308      	adds	r3, #8
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd0:	e853 3f00 	ldrex	r3, [r3]
 800bdd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	f023 0301 	bic.w	r3, r3, #1
 800bddc:	663b      	str	r3, [r7, #96]	; 0x60
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	3308      	adds	r3, #8
 800bde4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bde6:	643a      	str	r2, [r7, #64]	; 0x40
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdee:	e841 2300 	strex	r3, r2, [r1]
 800bdf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e5      	bne.n	800bdc6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a33      	ldr	r2, [pc, #204]	; (800bee0 <UART_RxISR_16BIT+0x1b4>)
 800be14:	4293      	cmp	r3, r2
 800be16:	d01f      	beq.n	800be58 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be22:	2b00      	cmp	r3, #0
 800be24:	d018      	beq.n	800be58 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	e853 3f00 	ldrex	r3, [r3]
 800be32:	61fb      	str	r3, [r7, #28]
   return(result);
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be46:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e6      	bne.n	800be26 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d12e      	bne.n	800bebe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	e853 3f00 	ldrex	r3, [r3]
 800be72:	60bb      	str	r3, [r7, #8]
   return(result);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f023 0310 	bic.w	r3, r3, #16
 800be7a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be84:	61bb      	str	r3, [r7, #24]
 800be86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be88:	6979      	ldr	r1, [r7, #20]
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	e841 2300 	strex	r3, r2, [r1]
 800be90:	613b      	str	r3, [r7, #16]
   return(result);
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d1e6      	bne.n	800be66 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	f003 0310 	and.w	r3, r3, #16
 800bea2:	2b10      	cmp	r3, #16
 800bea4:	d103      	bne.n	800beae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2210      	movs	r2, #16
 800beac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f7fe ff82 	bl	800adc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bebc:	e00b      	b.n	800bed6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7f7 fbb0 	bl	8003624 <HAL_UART_RxCpltCallback>
}
 800bec4:	e007      	b.n	800bed6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	699a      	ldr	r2, [r3, #24]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f042 0208 	orr.w	r2, r2, #8
 800bed4:	619a      	str	r2, [r3, #24]
}
 800bed6:	bf00      	nop
 800bed8:	3770      	adds	r7, #112	; 0x70
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	40008000 	.word	0x40008000

0800bee4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b0ac      	sub	sp, #176	; 0xb0
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bef2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf1a:	2b22      	cmp	r3, #34	; 0x22
 800bf1c:	f040 8182 	bne.w	800c224 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf26:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf2a:	e125      	b.n	800c178 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf32:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf36:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bf3a:	b2d9      	uxtb	r1, r3
 800bf3c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	400a      	ands	r2, r1
 800bf48:	b2d2      	uxtb	r2, r2
 800bf4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	69db      	ldr	r3, [r3, #28]
 800bf6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bf72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d053      	beq.n	800c026 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf82:	f003 0301 	and.w	r3, r3, #1
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d011      	beq.n	800bfae <UART_RxISR_8BIT_FIFOEN+0xca>
 800bf8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bf8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa4:	f043 0201 	orr.w	r2, r3, #1
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d011      	beq.n	800bfde <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bfba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00b      	beq.n	800bfde <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfd4:	f043 0204 	orr.w	r2, r3, #4
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bfe2:	f003 0304 	and.w	r3, r3, #4
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d011      	beq.n	800c00e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bfea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00b      	beq.n	800c00e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2204      	movs	r2, #4
 800bffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c004:	f043 0202 	orr.w	r2, r3, #2
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f7fe fec8 	bl	800adae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	f040 80a2 	bne.w	800c178 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	461a      	mov	r2, r3
 800c052:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c056:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c058:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c05c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c05e:	e841 2300 	strex	r3, r2, [r1]
 800c062:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e4      	bne.n	800c034 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3308      	adds	r3, #8
 800c070:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c07a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c07c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c080:	f023 0301 	bic.w	r3, r3, #1
 800c084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c092:	66ba      	str	r2, [r7, #104]	; 0x68
 800c094:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c098:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c0a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e1      	bne.n	800c06a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a5f      	ldr	r2, [pc, #380]	; (800c23c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d021      	beq.n	800c108 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d01a      	beq.n	800c108 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0da:	e853 3f00 	ldrex	r3, [r3]
 800c0de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c0e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c0f4:	657b      	str	r3, [r7, #84]	; 0x54
 800c0f6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0fc:	e841 2300 	strex	r3, r2, [r1]
 800c100:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e4      	bne.n	800c0d2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d130      	bne.n	800c172 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11e:	e853 3f00 	ldrex	r3, [r3]
 800c122:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f023 0310 	bic.w	r3, r3, #16
 800c12a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c138:	643b      	str	r3, [r7, #64]	; 0x40
 800c13a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c13e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c140:	e841 2300 	strex	r3, r2, [r1]
 800c144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1e4      	bne.n	800c116 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	f003 0310 	and.w	r3, r3, #16
 800c156:	2b10      	cmp	r3, #16
 800c158:	d103      	bne.n	800c162 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2210      	movs	r2, #16
 800c160:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7fe fe28 	bl	800adc0 <HAL_UARTEx_RxEventCallback>
 800c170:	e002      	b.n	800c178 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7f7 fa56 	bl	8003624 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c178:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d006      	beq.n	800c18e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c184:	f003 0320 	and.w	r3, r3, #32
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f47f aecf 	bne.w	800bf2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c194:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c198:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d049      	beq.n	800c234 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1a6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d242      	bcs.n	800c234 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b6:	6a3b      	ldr	r3, [r7, #32]
 800c1b8:	e853 3f00 	ldrex	r3, [r3]
 800c1bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c1d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1da:	e841 2300 	strex	r3, r2, [r1]
 800c1de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d1e3      	bne.n	800c1ae <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a15      	ldr	r2, [pc, #84]	; (800c240 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c1ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f043 0320 	orr.w	r3, r3, #32
 800c200:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	461a      	mov	r2, r3
 800c20a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c20e:	61bb      	str	r3, [r7, #24]
 800c210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c212:	6979      	ldr	r1, [r7, #20]
 800c214:	69ba      	ldr	r2, [r7, #24]
 800c216:	e841 2300 	strex	r3, r2, [r1]
 800c21a:	613b      	str	r3, [r7, #16]
   return(result);
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e4      	bne.n	800c1ec <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c222:	e007      	b.n	800c234 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f042 0208 	orr.w	r2, r2, #8
 800c232:	619a      	str	r2, [r3, #24]
}
 800c234:	bf00      	nop
 800c236:	37b0      	adds	r7, #176	; 0xb0
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	40008000 	.word	0x40008000
 800c240:	0800bb75 	.word	0x0800bb75

0800c244 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b0ae      	sub	sp, #184	; 0xb8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c252:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	69db      	ldr	r3, [r3, #28]
 800c25c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c27a:	2b22      	cmp	r3, #34	; 0x22
 800c27c:	f040 8186 	bne.w	800c58c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c286:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c28a:	e129      	b.n	800c4e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c292:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c29e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c2a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b4:	1c9a      	adds	r2, r3, #2
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	69db      	ldr	r3, [r3, #28]
 800c2d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c2d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c2da:	f003 0307 	and.w	r3, r3, #7
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d053      	beq.n	800c38a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d011      	beq.n	800c312 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c2ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00b      	beq.n	800c312 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2201      	movs	r2, #1
 800c300:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c308:	f043 0201 	orr.w	r2, r3, #1
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d011      	beq.n	800c342 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c31e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00b      	beq.n	800c342 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2202      	movs	r2, #2
 800c330:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c338:	f043 0204 	orr.w	r2, r3, #4
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c342:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c346:	f003 0304 	and.w	r3, r3, #4
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d011      	beq.n	800c372 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c34e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c352:	f003 0301 	and.w	r3, r3, #1
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00b      	beq.n	800c372 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2204      	movs	r2, #4
 800c360:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c368:	f043 0202 	orr.w	r2, r3, #2
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d006      	beq.n	800c38a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7fe fd16 	bl	800adae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c390:	b29b      	uxth	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	f040 80a4 	bne.w	800c4e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3a0:	e853 3f00 	ldrex	r3, [r3]
 800c3a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c3a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3be:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c3c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3c6:	e841 2300 	strex	r3, r2, [r1]
 800c3ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c3cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e2      	bne.n	800c398 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3dc:	e853 3f00 	ldrex	r3, [r3]
 800c3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c3e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3e8:	f023 0301 	bic.w	r3, r3, #1
 800c3ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c3fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c3fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c400:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e1      	bne.n	800c3d2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2220      	movs	r2, #32
 800c412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a5f      	ldr	r2, [pc, #380]	; (800c5a4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d021      	beq.n	800c470 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d01a      	beq.n	800c470 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c442:	e853 3f00 	ldrex	r3, [r3]
 800c446:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c44a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c44e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	461a      	mov	r2, r3
 800c458:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c45c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c45e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c464:	e841 2300 	strex	r3, r2, [r1]
 800c468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e4      	bne.n	800c43a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c474:	2b01      	cmp	r3, #1
 800c476:	d130      	bne.n	800c4da <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	e853 3f00 	ldrex	r3, [r3]
 800c48a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48e:	f023 0310 	bic.w	r3, r3, #16
 800c492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c4a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4a8:	e841 2300 	strex	r3, r2, [r1]
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d1e4      	bne.n	800c47e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	69db      	ldr	r3, [r3, #28]
 800c4ba:	f003 0310 	and.w	r3, r3, #16
 800c4be:	2b10      	cmp	r3, #16
 800c4c0:	d103      	bne.n	800c4ca <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2210      	movs	r2, #16
 800c4c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7fe fc74 	bl	800adc0 <HAL_UARTEx_RxEventCallback>
 800c4d8:	e002      	b.n	800c4e0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7f7 f8a2 	bl	8003624 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c4e0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c4e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4ec:	f003 0320 	and.w	r3, r3, #32
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	f47f aecb 	bne.w	800c28c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c500:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c504:	2b00      	cmp	r3, #0
 800c506:	d049      	beq.n	800c59c <UART_RxISR_16BIT_FIFOEN+0x358>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c50e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c512:	429a      	cmp	r2, r3
 800c514:	d242      	bcs.n	800c59c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3308      	adds	r3, #8
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c520:	e853 3f00 	ldrex	r3, [r3]
 800c524:	623b      	str	r3, [r7, #32]
   return(result);
 800c526:	6a3b      	ldr	r3, [r7, #32]
 800c528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c52c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3308      	adds	r3, #8
 800c536:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c53a:	633a      	str	r2, [r7, #48]	; 0x30
 800c53c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c542:	e841 2300 	strex	r3, r2, [r1]
 800c546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1e3      	bne.n	800c516 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a15      	ldr	r2, [pc, #84]	; (800c5a8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c552:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	e853 3f00 	ldrex	r3, [r3]
 800c560:	60fb      	str	r3, [r7, #12]
   return(result);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f043 0320 	orr.w	r3, r3, #32
 800c568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	461a      	mov	r2, r3
 800c572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c576:	61fb      	str	r3, [r7, #28]
 800c578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57a:	69b9      	ldr	r1, [r7, #24]
 800c57c:	69fa      	ldr	r2, [r7, #28]
 800c57e:	e841 2300 	strex	r3, r2, [r1]
 800c582:	617b      	str	r3, [r7, #20]
   return(result);
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1e4      	bne.n	800c554 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c58a:	e007      	b.n	800c59c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	699a      	ldr	r2, [r3, #24]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0208 	orr.w	r2, r2, #8
 800c59a:	619a      	str	r2, [r3, #24]
}
 800c59c:	bf00      	nop
 800c59e:	37b8      	adds	r7, #184	; 0xb8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	40008000 	.word	0x40008000
 800c5a8:	0800bd2d 	.word	0x0800bd2d

0800c5ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c5b4:	bf00      	nop
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bc80      	pop	{r7}
 800c5bc:	4770      	bx	lr

0800c5be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b083      	sub	sp, #12
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c5c6:	bf00      	nop
 800c5c8:	370c      	adds	r7, #12
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bc80      	pop	{r7}
 800c5ce:	4770      	bx	lr

0800c5d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bc80      	pop	{r7}
 800c5e0:	4770      	bx	lr

0800c5e2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b088      	sub	sp, #32
 800c5e6:	af02      	add	r7, sp, #8
 800c5e8:	60f8      	str	r0, [r7, #12]
 800c5ea:	1d3b      	adds	r3, r7, #4
 800c5ec:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d101      	bne.n	800c602 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c5fe:	2302      	movs	r3, #2
 800c600:	e046      	b.n	800c690 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2201      	movs	r2, #1
 800c606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2224      	movs	r2, #36	; 0x24
 800c60e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f022 0201 	bic.w	r2, r2, #1
 800c620:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	430a      	orrs	r2, r1
 800c634:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d105      	bne.n	800c648 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c63c:	1d3b      	adds	r3, r7, #4
 800c63e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	f000 fa4b 	bl	800cade <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	681a      	ldr	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f042 0201 	orr.w	r2, r2, #1
 800c656:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c658:	f7f6 f930 	bl	80028bc <HAL_GetTick>
 800c65c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c65e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2200      	movs	r2, #0
 800c668:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7fe ff16 	bl	800b49e <UART_WaitOnFlagUntilTimeout>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c678:	2303      	movs	r3, #3
 800c67a:	75fb      	strb	r3, [r7, #23]
 800c67c:	e003      	b.n	800c686 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2220      	movs	r2, #32
 800c682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800c68e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3718      	adds	r7, #24
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c698:	b480      	push	{r7}
 800c69a:	b089      	sub	sp, #36	; 0x24
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d101      	bne.n	800c6ae <HAL_UARTEx_EnableStopMode+0x16>
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	e021      	b.n	800c6f2 <HAL_UARTEx_EnableStopMode+0x5a>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	e853 3f00 	ldrex	r3, [r3]
 800c6c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f043 0302 	orr.w	r3, r3, #2
 800c6ca:	61fb      	str	r3, [r7, #28]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	61bb      	str	r3, [r7, #24]
 800c6d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d8:	6979      	ldr	r1, [r7, #20]
 800c6da:	69ba      	ldr	r2, [r7, #24]
 800c6dc:	e841 2300 	strex	r3, r2, [r1]
 800c6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1e6      	bne.n	800c6b6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3724      	adds	r7, #36	; 0x24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bc80      	pop	{r7}
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d101      	bne.n	800c712 <HAL_UARTEx_EnableFifoMode+0x16>
 800c70e:	2302      	movs	r3, #2
 800c710:	e02b      	b.n	800c76a <HAL_UARTEx_EnableFifoMode+0x6e>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2224      	movs	r2, #36	; 0x24
 800c71e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f022 0201 	bic.w	r2, r2, #1
 800c738:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c740:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c748:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f9e6 	bl	800cb24 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2220      	movs	r2, #32
 800c75c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c772:	b480      	push	{r7}
 800c774:	b085      	sub	sp, #20
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_UARTEx_DisableFifoMode+0x16>
 800c784:	2302      	movs	r3, #2
 800c786:	e027      	b.n	800c7d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2224      	movs	r2, #36	; 0x24
 800c794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f022 0201 	bic.w	r2, r2, #1
 800c7ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c7b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr

0800c7e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d101      	bne.n	800c7fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	e02d      	b.n	800c856 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2224      	movs	r2, #36	; 0x24
 800c806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f022 0201 	bic.w	r2, r2, #1
 800c820:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	683a      	ldr	r2, [r7, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f974 	bl	800cb24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	68fa      	ldr	r2, [r7, #12]
 800c842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2220      	movs	r2, #32
 800c848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d101      	bne.n	800c876 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c872:	2302      	movs	r3, #2
 800c874:	e02d      	b.n	800c8d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2224      	movs	r2, #36	; 0x24
 800c882:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f022 0201 	bic.w	r2, r2, #1
 800c89c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f936 	bl	800cb24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2220      	movs	r2, #32
 800c8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b088      	sub	sp, #32
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	603b      	str	r3, [r7, #0]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	f040 80ef 	bne.w	800cad4 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <HAL_UARTEx_ReceiveToIdle+0x28>
 800c8fc:	88fb      	ldrh	r3, [r7, #6]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e0e7      	b.n	800cad6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2222      	movs	r2, #34	; 0x22
 800c912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2201      	movs	r2, #1
 800c91a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c922:	f7f5 ffcb 	bl	80028bc <HAL_GetTick>
 800c926:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	88fa      	ldrh	r2, [r7, #6]
 800c92c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	88fa      	ldrh	r2, [r7, #6]
 800c934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c940:	d10e      	bne.n	800c960 <HAL_UARTEx_ReceiveToIdle+0x86>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d105      	bne.n	800c956 <HAL_UARTEx_ReceiveToIdle+0x7c>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c954:	e02d      	b.n	800c9b2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	22ff      	movs	r2, #255	; 0xff
 800c95a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c95e:	e028      	b.n	800c9b2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10d      	bne.n	800c984 <HAL_UARTEx_ReceiveToIdle+0xaa>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d104      	bne.n	800c97a <HAL_UARTEx_ReceiveToIdle+0xa0>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	22ff      	movs	r2, #255	; 0xff
 800c974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c978:	e01b      	b.n	800c9b2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	227f      	movs	r2, #127	; 0x7f
 800c97e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c982:	e016      	b.n	800c9b2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c98c:	d10d      	bne.n	800c9aa <HAL_UARTEx_ReceiveToIdle+0xd0>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d104      	bne.n	800c9a0 <HAL_UARTEx_ReceiveToIdle+0xc6>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	227f      	movs	r2, #127	; 0x7f
 800c99a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c99e:	e008      	b.n	800c9b2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	223f      	movs	r2, #63	; 0x3f
 800c9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c9a8:	e003      	b.n	800c9b2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9c2:	d108      	bne.n	800c9d6 <HAL_UARTEx_ReceiveToIdle+0xfc>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	691b      	ldr	r3, [r3, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	61bb      	str	r3, [r7, #24]
 800c9d4:	e003      	b.n	800c9de <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c9e4:	e05f      	b.n	800caa6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	69db      	ldr	r3, [r3, #28]
 800c9ec:	f003 0310 	and.w	r3, r3, #16
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	d110      	bne.n	800ca16 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2210      	movs	r2, #16
 800c9fa:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d008      	beq.n	800ca16 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2202      	movs	r2, #2
 800ca08:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800ca12:	2300      	movs	r3, #0
 800ca14:	e05f      	b.n	800cad6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b20      	cmp	r3, #32
 800ca22:	d12b      	bne.n	800ca7c <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10c      	bne.n	800ca44 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	8a7b      	ldrh	r3, [r7, #18]
 800ca34:	4013      	ands	r3, r2
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	3302      	adds	r3, #2
 800ca40:	61bb      	str	r3, [r7, #24]
 800ca42:	e00c      	b.n	800ca5e <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	8a7b      	ldrh	r3, [r7, #18]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	4013      	ands	r3, r2
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	3301      	adds	r3, #1
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	3b01      	subs	r3, #1
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca82:	d010      	beq.n	800caa6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ca84:	f7f5 ff1a 	bl	80028bc <HAL_GetTick>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d302      	bcc.n	800ca9a <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800ca94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d105      	bne.n	800caa6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e017      	b.n	800cad6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caac:	b29b      	uxth	r3, r3
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d199      	bne.n	800c9e6 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	1ad3      	subs	r3, r2, r3
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2220      	movs	r2, #32
 800cacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	e000      	b.n	800cad6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800cad4:	2302      	movs	r3, #2
  }
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3720      	adds	r7, #32
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cade:	b480      	push	{r7}
 800cae0:	b085      	sub	sp, #20
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	60f8      	str	r0, [r7, #12]
 800cae6:	1d3b      	adds	r3, r7, #4
 800cae8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f023 0210 	bic.w	r2, r3, #16
 800caf6:	893b      	ldrh	r3, [r7, #8]
 800caf8:	4619      	mov	r1, r3
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cb0c:	7abb      	ldrb	r3, [r7, #10]
 800cb0e:	061a      	lsls	r2, r3, #24
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	430a      	orrs	r2, r1
 800cb16:	605a      	str	r2, [r3, #4]
}
 800cb18:	bf00      	nop
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bc80      	pop	{r7}
 800cb20:	4770      	bx	lr
	...

0800cb24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d108      	bne.n	800cb46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb44:	e031      	b.n	800cbaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb46:	2308      	movs	r3, #8
 800cb48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb4a:	2308      	movs	r3, #8
 800cb4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	0e5b      	lsrs	r3, r3, #25
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	f003 0307 	and.w	r3, r3, #7
 800cb5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	0f5b      	lsrs	r3, r3, #29
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	f003 0307 	and.w	r3, r3, #7
 800cb6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
 800cb70:	7b3a      	ldrb	r2, [r7, #12]
 800cb72:	4910      	ldr	r1, [pc, #64]	; (800cbb4 <UARTEx_SetNbDataToProcess+0x90>)
 800cb74:	5c8a      	ldrb	r2, [r1, r2]
 800cb76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb7a:	7b3a      	ldrb	r2, [r7, #12]
 800cb7c:	490e      	ldr	r1, [pc, #56]	; (800cbb8 <UARTEx_SetNbDataToProcess+0x94>)
 800cb7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb80:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	7b7a      	ldrb	r2, [r7, #13]
 800cb90:	4908      	ldr	r1, [pc, #32]	; (800cbb4 <UARTEx_SetNbDataToProcess+0x90>)
 800cb92:	5c8a      	ldrb	r2, [r1, r2]
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb98:	7b7a      	ldrb	r2, [r7, #13]
 800cb9a:	4907      	ldr	r1, [pc, #28]	; (800cbb8 <UARTEx_SetNbDataToProcess+0x94>)
 800cb9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cbaa:	bf00      	nop
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bc80      	pop	{r7}
 800cbb2:	4770      	bx	lr
 800cbb4:	0801f084 	.word	0x0801f084
 800cbb8:	0801f08c 	.word	0x0801f08c

0800cbbc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800cbc0:	f7f5 fd18 	bl	80025f4 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800cbc4:	f000 f820 	bl	800cc08 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800cbc8:	bf00      	nop
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd4:	f010 fdae 	bl	801d734 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800cbd8:	bf00      	nop
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cbe0:	f3bf 8f4f 	dsb	sy
}
 800cbe4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cbe6:	4b06      	ldr	r3, [pc, #24]	; (800cc00 <__NVIC_SystemReset+0x24>)
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cbee:	4904      	ldr	r1, [pc, #16]	; (800cc00 <__NVIC_SystemReset+0x24>)
 800cbf0:	4b04      	ldr	r3, [pc, #16]	; (800cc04 <__NVIC_SystemReset+0x28>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cbf6:	f3bf 8f4f 	dsb	sy
}
 800cbfa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cbfc:	bf00      	nop
 800cbfe:	e7fd      	b.n	800cbfc <__NVIC_SystemReset+0x20>
 800cc00:	e000ed00 	.word	0xe000ed00
 800cc04:	05fa0004 	.word	0x05fa0004

0800cc08 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800cc12:	2300      	movs	r3, #0
 800cc14:	9302      	str	r3, [sp, #8]
 800cc16:	2303      	movs	r3, #3
 800cc18:	9301      	str	r3, [sp, #4]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	4b59      	ldr	r3, [pc, #356]	; (800cd84 <LoRaWAN_Init+0x17c>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	2100      	movs	r1, #0
 800cc24:	2002      	movs	r0, #2
 800cc26:	f011 f9d3 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9302      	str	r3, [sp, #8]
 800cc2e:	2305      	movs	r3, #5
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	2302      	movs	r3, #2
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	4b54      	ldr	r3, [pc, #336]	; (800cd88 <LoRaWAN_Init+0x180>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	2002      	movs	r0, #2
 800cc3e:	f011 f9c7 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800cc42:	2300      	movs	r3, #0
 800cc44:	9302      	str	r3, [sp, #8]
 800cc46:	2303      	movs	r3, #3
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	4b4f      	ldr	r3, [pc, #316]	; (800cd8c <LoRaWAN_Init+0x184>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	2100      	movs	r1, #0
 800cc54:	2002      	movs	r0, #2
 800cc56:	f011 f9bb 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800cc5a:	1d3b      	adds	r3, r7, #4
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	2000      	movs	r0, #0
 800cc60:	f003 f96c 	bl	800ff3c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	0e1b      	lsrs	r3, r3, #24
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	0c1b      	lsrs	r3, r3, #16
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	4619      	mov	r1, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	9302      	str	r3, [sp, #8]
 800cc7c:	9101      	str	r1, [sp, #4]
 800cc7e:	9200      	str	r2, [sp, #0]
 800cc80:	4b43      	ldr	r3, [pc, #268]	; (800cd90 <LoRaWAN_Init+0x188>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	2100      	movs	r1, #0
 800cc86:	2002      	movs	r0, #2
 800cc88:	f011 f9a2 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800cc8c:	1d3b      	adds	r3, r7, #4
 800cc8e:	4619      	mov	r1, r3
 800cc90:	2001      	movs	r0, #1
 800cc92:	f003 f953 	bl	800ff3c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	0e1b      	lsrs	r3, r3, #24
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	0c1b      	lsrs	r3, r3, #16
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	4619      	mov	r1, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	0a1b      	lsrs	r3, r3, #8
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	b2c0      	uxtb	r0, r0
 800ccb0:	9003      	str	r0, [sp, #12]
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	9101      	str	r1, [sp, #4]
 800ccb6:	9200      	str	r2, [sp, #0]
 800ccb8:	4b36      	ldr	r3, [pc, #216]	; (800cd94 <LoRaWAN_Init+0x18c>)
 800ccba:	2200      	movs	r2, #0
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	2002      	movs	r0, #2
 800ccc0:	f011 f986 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	4b33      	ldr	r3, [pc, #204]	; (800cd98 <LoRaWAN_Init+0x190>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ccd0:	4832      	ldr	r0, [pc, #200]	; (800cd9c <LoRaWAN_Init+0x194>)
 800ccd2:	f010 fecf 	bl	801da74 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	4b31      	ldr	r3, [pc, #196]	; (800cda0 <LoRaWAN_Init+0x198>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cce2:	4830      	ldr	r0, [pc, #192]	; (800cda4 <LoRaWAN_Init+0x19c>)
 800cce4:	f010 fec6 	bl	801da74 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800cce8:	2300      	movs	r3, #0
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	4b2e      	ldr	r3, [pc, #184]	; (800cda8 <LoRaWAN_Init+0x1a0>)
 800ccee:	2201      	movs	r2, #1
 800ccf0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ccf4:	482d      	ldr	r0, [pc, #180]	; (800cdac <LoRaWAN_Init+0x1a4>)
 800ccf6:	f010 febd 	bl	801da74 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	4b2c      	ldr	r3, [pc, #176]	; (800cdb0 <LoRaWAN_Init+0x1a8>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cd06:	482b      	ldr	r0, [pc, #172]	; (800cdb4 <LoRaWAN_Init+0x1ac>)
 800cd08:	f010 feb4 	bl	801da74 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800cd0c:	4a2a      	ldr	r2, [pc, #168]	; (800cdb8 <LoRaWAN_Init+0x1b0>)
 800cd0e:	2100      	movs	r1, #0
 800cd10:	2001      	movs	r0, #1
 800cd12:	f010 fe0b 	bl	801d92c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800cd16:	4a29      	ldr	r2, [pc, #164]	; (800cdbc <LoRaWAN_Init+0x1b4>)
 800cd18:	2100      	movs	r1, #0
 800cd1a:	2002      	movs	r0, #2
 800cd1c:	f010 fe06 	bl	801d92c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800cd20:	4a27      	ldr	r2, [pc, #156]	; (800cdc0 <LoRaWAN_Init+0x1b8>)
 800cd22:	2100      	movs	r1, #0
 800cd24:	2004      	movs	r0, #4
 800cd26:	f010 fe01 	bl	801d92c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800cd2a:	4a26      	ldr	r2, [pc, #152]	; (800cdc4 <LoRaWAN_Init+0x1bc>)
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	2008      	movs	r0, #8
 800cd30:	f010 fdfc 	bl	801d92c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800cd34:	f000 fcee 	bl	800d714 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800cd38:	4923      	ldr	r1, [pc, #140]	; (800cdc8 <LoRaWAN_Init+0x1c0>)
 800cd3a:	4824      	ldr	r0, [pc, #144]	; (800cdcc <LoRaWAN_Init+0x1c4>)
 800cd3c:	f002 fa14 	bl	800f168 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800cd40:	4823      	ldr	r0, [pc, #140]	; (800cdd0 <LoRaWAN_Init+0x1c8>)
 800cd42:	f002 fa6d 	bl	800f220 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800cd46:	4819      	ldr	r0, [pc, #100]	; (800cdac <LoRaWAN_Init+0x1a4>)
 800cd48:	f010 feca 	bl	801dae0 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800cd4c:	4b21      	ldr	r3, [pc, #132]	; (800cdd4 <LoRaWAN_Init+0x1cc>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	4a21      	ldr	r2, [pc, #132]	; (800cdd8 <LoRaWAN_Init+0x1d0>)
 800cd52:	7812      	ldrb	r2, [r2, #0]
 800cd54:	4611      	mov	r1, r2
 800cd56:	4618      	mov	r0, r3
 800cd58:	f002 fb30 	bl	800f3bc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800cd5c:	4b1f      	ldr	r3, [pc, #124]	; (800cddc <LoRaWAN_Init+0x1d4>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10b      	bne.n	800cd7c <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800cd64:	4b1e      	ldr	r3, [pc, #120]	; (800cde0 <LoRaWAN_Init+0x1d8>)
 800cd66:	6819      	ldr	r1, [r3, #0]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4b1d      	ldr	r3, [pc, #116]	; (800cde4 <LoRaWAN_Init+0x1dc>)
 800cd6e:	2200      	movs	r2, #0
 800cd70:	481d      	ldr	r0, [pc, #116]	; (800cde8 <LoRaWAN_Init+0x1e0>)
 800cd72:	f010 fe7f 	bl	801da74 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800cd76:	481c      	ldr	r0, [pc, #112]	; (800cde8 <LoRaWAN_Init+0x1e0>)
 800cd78:	f010 feb2 	bl	801dae0 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0801e748 	.word	0x0801e748
 800cd88:	0801e76c 	.word	0x0801e76c
 800cd8c:	0801e78c 	.word	0x0801e78c
 800cd90:	0801e7ac 	.word	0x0801e7ac
 800cd94:	0801e7d0 	.word	0x0801e7d0
 800cd98:	0800d23d 	.word	0x0800d23d
 800cd9c:	2000074c 	.word	0x2000074c
 800cda0:	0800d24f 	.word	0x0800d24f
 800cda4:	20000764 	.word	0x20000764
 800cda8:	0800d261 	.word	0x0800d261
 800cdac:	2000077c 	.word	0x2000077c
 800cdb0:	0800d615 	.word	0x0800d615
 800cdb4:	20000640 	.word	0x20000640
 800cdb8:	0800f391 	.word	0x0800f391
 800cdbc:	0800cf35 	.word	0x0800cf35
 800cdc0:	0800d639 	.word	0x0800d639
 800cdc4:	0800d595 	.word	0x0800d595
 800cdc8:	01030000 	.word	0x01030000
 800cdcc:	2000002c 	.word	0x2000002c
 800cdd0:	20000078 	.word	0x20000078
 800cdd4:	20000028 	.word	0x20000028
 800cdd8:	20000029 	.word	0x20000029
 800cddc:	20000624 	.word	0x20000624
 800cde0:	20000090 	.word	0x20000090
 800cde4:	0800d219 	.word	0x0800d219
 800cde8:	20000628 	.word	0x20000628

0800cdec <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800cdec:	b5b0      	push	{r4, r5, r7, lr}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	af06      	add	r7, sp, #24
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f000 8086 	beq.w	800cf0e <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800ce02:	4845      	ldr	r0, [pc, #276]	; (800cf18 <OnRxData+0x12c>)
 800ce04:	f010 fe6c 	bl	801dae0 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d05a      	beq.n	800cec6 <OnRxData+0xda>
    {
      if (appData != NULL)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d057      	beq.n	800cec6 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d050      	beq.n	800cec6 <OnRxData+0xda>
        {
    switch (appData->Port)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	d01f      	beq.n	800ce6c <OnRxData+0x80>
 800ce2c:	2b03      	cmp	r3, #3
 800ce2e:	d145      	bne.n	800cebc <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	785b      	ldrb	r3, [r3, #1]
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d143      	bne.n	800cec0 <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d00e      	beq.n	800ce60 <OnRxData+0x74>
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	dc10      	bgt.n	800ce68 <OnRxData+0x7c>
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d002      	beq.n	800ce50 <OnRxData+0x64>
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d004      	beq.n	800ce58 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800ce4e:	e00b      	b.n	800ce68 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800ce50:	2000      	movs	r0, #0
 800ce52:	f002 fc7b 	bl	800f74c <LmHandlerRequestClass>
              break;
 800ce56:	e008      	b.n	800ce6a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f002 fc77 	bl	800f74c <LmHandlerRequestClass>
              break;
 800ce5e:	e004      	b.n	800ce6a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800ce60:	2002      	movs	r0, #2
 800ce62:	f002 fc73 	bl	800f74c <LmHandlerRequestClass>
              break;
 800ce66:	e000      	b.n	800ce6a <OnRxData+0x7e>
              break;
 800ce68:	bf00      	nop
          }
        }
        break;
 800ce6a:	e029      	b.n	800cec0 <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	785b      	ldrb	r3, [r3, #1]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d127      	bne.n	800cec4 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	4b26      	ldr	r3, [pc, #152]	; (800cf1c <OnRxData+0x130>)
 800ce82:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800ce84:	4b25      	ldr	r3, [pc, #148]	; (800cf1c <OnRxData+0x130>)
 800ce86:	781b      	ldrb	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10b      	bne.n	800cea4 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800ce8c:	4b24      	ldr	r3, [pc, #144]	; (800cf20 <OnRxData+0x134>)
 800ce8e:	2200      	movs	r2, #0
 800ce90:	2100      	movs	r1, #0
 800ce92:	2003      	movs	r0, #3
 800ce94:	f011 f89c 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800ce98:	2201      	movs	r2, #1
 800ce9a:	2120      	movs	r1, #32
 800ce9c:	4821      	ldr	r0, [pc, #132]	; (800cf24 <OnRxData+0x138>)
 800ce9e:	f7f8 ffa9 	bl	8005df4 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800cea2:	e00f      	b.n	800cec4 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800cea4:	4b20      	ldr	r3, [pc, #128]	; (800cf28 <OnRxData+0x13c>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	2100      	movs	r1, #0
 800ceaa:	2003      	movs	r0, #3
 800ceac:	f011 f890 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2120      	movs	r1, #32
 800ceb4:	481b      	ldr	r0, [pc, #108]	; (800cf24 <OnRxData+0x138>)
 800ceb6:	f7f8 ff9d 	bl	8005df4 <HAL_GPIO_WritePin>
        break;
 800ceba:	e003      	b.n	800cec4 <OnRxData+0xd8>

      default:

        break;
 800cebc:	bf00      	nop
 800cebe:	e002      	b.n	800cec6 <OnRxData+0xda>
        break;
 800cec0:	bf00      	nop
 800cec2:	e000      	b.n	800cec6 <OnRxData+0xda>
        break;
 800cec4:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	7c1b      	ldrb	r3, [r3, #16]
 800ceca:	2b05      	cmp	r3, #5
 800cecc:	d81f      	bhi.n	800cf0e <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	7bfa      	ldrb	r2, [r7, #15]
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800ceda:	460c      	mov	r4, r1
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	7c09      	ldrb	r1, [r1, #16]
 800cee0:	4608      	mov	r0, r1
 800cee2:	4912      	ldr	r1, [pc, #72]	; (800cf2c <OnRxData+0x140>)
 800cee4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cee8:	6838      	ldr	r0, [r7, #0]
 800ceea:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800ceee:	4605      	mov	r5, r0
 800cef0:	6838      	ldr	r0, [r7, #0]
 800cef2:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800cef6:	9005      	str	r0, [sp, #20]
 800cef8:	9504      	str	r5, [sp, #16]
 800cefa:	9103      	str	r1, [sp, #12]
 800cefc:	9402      	str	r4, [sp, #8]
 800cefe:	9201      	str	r2, [sp, #4]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	4b0b      	ldr	r3, [pc, #44]	; (800cf30 <OnRxData+0x144>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	2100      	movs	r1, #0
 800cf08:	2003      	movs	r0, #3
 800cf0a:	f011 f861 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bdb0      	pop	{r4, r5, r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20000764 	.word	0x20000764
 800cf1c:	2000074a 	.word	0x2000074a
 800cf20:	0801e7f4 	.word	0x0801e7f4
 800cf24:	48000400 	.word	0x48000400
 800cf28:	0801e800 	.word	0x0801e800
 800cf2c:	20000010 	.word	0x20000010
 800cf30:	0801e80c 	.word	0x0801e80c

0800cf34 <SendTxData>:

static void SendTxData(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08c      	sub	sp, #48	; 0x30
 800cf38:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800cf3a:	23ff      	movs	r3, #255	; 0xff
 800cf3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800cf40:	f7f5 fb8c 	bl	800265c <GetBatteryLevel>
 800cf44:	4603      	mov	r3, r0
 800cf46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800cf56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	4b9c      	ldr	r3, [pc, #624]	; (800d1d0 <SendTxData+0x29c>)
 800cf5e:	2201      	movs	r2, #1
 800cf60:	2100      	movs	r1, #0
 800cf62:	2002      	movs	r0, #2
 800cf64:	f011 f834 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800cf68:	4b9a      	ldr	r3, [pc, #616]	; (800d1d4 <SendTxData+0x2a0>)
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100) >> 8;
 800cf6e:	4b9a      	ldr	r3, [pc, #616]	; (800d1d8 <SendTxData+0x2a4>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a9a      	ldr	r2, [pc, #616]	; (800d1dc <SendTxData+0x2a8>)
 800cf74:	fba2 2303 	umull	r2, r3, r2, r3
 800cf78:	095b      	lsrs	r3, r3, #5
 800cf7a:	0a18      	lsrs	r0, r3, #8
 800cf7c:	4b95      	ldr	r3, [pc, #596]	; (800d1d4 <SendTxData+0x2a0>)
 800cf7e:	685a      	ldr	r2, [r3, #4]
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	1c59      	adds	r1, r3, #1
 800cf84:	61f9      	str	r1, [r7, #28]
 800cf86:	4413      	add	r3, r2
 800cf88:	b2c2      	uxtb	r2, r0
 800cf8a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100)%256;
 800cf8c:	4b92      	ldr	r3, [pc, #584]	; (800d1d8 <SendTxData+0x2a4>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a92      	ldr	r2, [pc, #584]	; (800d1dc <SendTxData+0x2a8>)
 800cf92:	fba2 2303 	umull	r2, r3, r2, r3
 800cf96:	0958      	lsrs	r0, r3, #5
 800cf98:	4b8e      	ldr	r3, [pc, #568]	; (800d1d4 <SendTxData+0x2a0>)
 800cf9a:	685a      	ldr	r2, [r3, #4]
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	1c59      	adds	r1, r3, #1
 800cfa0:	61f9      	str	r1, [r7, #28]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	b2c2      	uxtb	r2, r0
 800cfa6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)>>8;
 800cfa8:	4b8d      	ldr	r3, [pc, #564]	; (800d1e0 <SendTxData+0x2ac>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a8b      	ldr	r2, [pc, #556]	; (800d1dc <SendTxData+0x2a8>)
 800cfae:	fba2 2303 	umull	r2, r3, r2, r3
 800cfb2:	095b      	lsrs	r3, r3, #5
 800cfb4:	0a18      	lsrs	r0, r3, #8
 800cfb6:	4b87      	ldr	r3, [pc, #540]	; (800d1d4 <SendTxData+0x2a0>)
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	1c59      	adds	r1, r3, #1
 800cfbe:	61f9      	str	r1, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	b2c2      	uxtb	r2, r0
 800cfc4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)%256;
 800cfc6:	4b86      	ldr	r3, [pc, #536]	; (800d1e0 <SendTxData+0x2ac>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a84      	ldr	r2, [pc, #528]	; (800d1dc <SendTxData+0x2a8>)
 800cfcc:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd0:	0958      	lsrs	r0, r3, #5
 800cfd2:	4b80      	ldr	r3, [pc, #512]	; (800d1d4 <SendTxData+0x2a0>)
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	1c59      	adds	r1, r3, #1
 800cfda:	61f9      	str	r1, [r7, #28]
 800cfdc:	4413      	add	r3, r2
 800cfde:	b2c2      	uxtb	r2, r0
 800cfe0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)>>8;
 800cfe2:	4b80      	ldr	r3, [pc, #512]	; (800d1e4 <SendTxData+0x2b0>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a7d      	ldr	r2, [pc, #500]	; (800d1dc <SendTxData+0x2a8>)
 800cfe8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfec:	095b      	lsrs	r3, r3, #5
 800cfee:	0a18      	lsrs	r0, r3, #8
 800cff0:	4b78      	ldr	r3, [pc, #480]	; (800d1d4 <SendTxData+0x2a0>)
 800cff2:	685a      	ldr	r2, [r3, #4]
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	1c59      	adds	r1, r3, #1
 800cff8:	61f9      	str	r1, [r7, #28]
 800cffa:	4413      	add	r3, r2
 800cffc:	b2c2      	uxtb	r2, r0
 800cffe:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)%256;
 800d000:	4b78      	ldr	r3, [pc, #480]	; (800d1e4 <SendTxData+0x2b0>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a75      	ldr	r2, [pc, #468]	; (800d1dc <SendTxData+0x2a8>)
 800d006:	fba2 2303 	umull	r2, r3, r2, r3
 800d00a:	0958      	lsrs	r0, r3, #5
 800d00c:	4b71      	ldr	r3, [pc, #452]	; (800d1d4 <SendTxData+0x2a0>)
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	1c59      	adds	r1, r3, #1
 800d014:	61f9      	str	r1, [r7, #28]
 800d016:	4413      	add	r3, r2
 800d018:	b2c2      	uxtb	r2, r0
 800d01a:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d01c:	4b72      	ldr	r3, [pc, #456]	; (800d1e8 <SendTxData+0x2b4>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	f7f3 fa15 	bl	8000450 <__aeabi_f2d>
 800d026:	f04f 0200 	mov.w	r2, #0
 800d02a:	4b70      	ldr	r3, [pc, #448]	; (800d1ec <SendTxData+0x2b8>)
 800d02c:	f7f3 fa68 	bl	8000500 <__aeabi_dmul>
 800d030:	4602      	mov	r2, r0
 800d032:	460b      	mov	r3, r1
 800d034:	4610      	mov	r0, r2
 800d036:	4619      	mov	r1, r3
 800d038:	f7f3 fcfc 	bl	8000a34 <__aeabi_d2iz>
 800d03c:	4603      	mov	r3, r0
 800d03e:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d040:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d044:	4a65      	ldr	r2, [pc, #404]	; (800d1dc <SendTxData+0x2a8>)
 800d046:	fb82 1203 	smull	r1, r2, r2, r3
 800d04a:	1152      	asrs	r2, r2, #5
 800d04c:	17db      	asrs	r3, r3, #31
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	b218      	sxth	r0, r3
 800d052:	4b60      	ldr	r3, [pc, #384]	; (800d1d4 <SendTxData+0x2a0>)
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	1c59      	adds	r1, r3, #1
 800d05a:	61f9      	str	r1, [r7, #28]
 800d05c:	4413      	add	r3, r2
 800d05e:	b2c2      	uxtb	r2, r0
 800d060:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d062:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d066:	4a5d      	ldr	r2, [pc, #372]	; (800d1dc <SendTxData+0x2a8>)
 800d068:	fb82 1203 	smull	r1, r2, r2, r3
 800d06c:	1151      	asrs	r1, r2, #5
 800d06e:	17da      	asrs	r2, r3, #31
 800d070:	1a8a      	subs	r2, r1, r2
 800d072:	2164      	movs	r1, #100	; 0x64
 800d074:	fb01 f202 	mul.w	r2, r1, r2
 800d078:	1a9b      	subs	r3, r3, r2
 800d07a:	b218      	sxth	r0, r3
 800d07c:	4b55      	ldr	r3, [pc, #340]	; (800d1d4 <SendTxData+0x2a0>)
 800d07e:	685a      	ldr	r2, [r3, #4]
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	1c59      	adds	r1, r3, #1
 800d084:	61f9      	str	r1, [r7, #28]
 800d086:	4413      	add	r3, r2
 800d088:	b2c2      	uxtb	r2, r0
 800d08a:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d08c:	4b58      	ldr	r3, [pc, #352]	; (800d1f0 <SendTxData+0x2bc>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4618      	mov	r0, r3
 800d092:	f7f3 f9dd 	bl	8000450 <__aeabi_f2d>
 800d096:	f04f 0200 	mov.w	r2, #0
 800d09a:	4b54      	ldr	r3, [pc, #336]	; (800d1ec <SendTxData+0x2b8>)
 800d09c:	f7f3 fa30 	bl	8000500 <__aeabi_dmul>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	f7f3 fcc4 	bl	8000a34 <__aeabi_d2iz>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d0b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d0b4:	4a49      	ldr	r2, [pc, #292]	; (800d1dc <SendTxData+0x2a8>)
 800d0b6:	fb82 1203 	smull	r1, r2, r2, r3
 800d0ba:	1152      	asrs	r2, r2, #5
 800d0bc:	17db      	asrs	r3, r3, #31
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	b218      	sxth	r0, r3
 800d0c2:	4b44      	ldr	r3, [pc, #272]	; (800d1d4 <SendTxData+0x2a0>)
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	1c59      	adds	r1, r3, #1
 800d0ca:	61f9      	str	r1, [r7, #28]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	b2c2      	uxtb	r2, r0
 800d0d0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d0d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d0d6:	4a41      	ldr	r2, [pc, #260]	; (800d1dc <SendTxData+0x2a8>)
 800d0d8:	fb82 1203 	smull	r1, r2, r2, r3
 800d0dc:	1151      	asrs	r1, r2, #5
 800d0de:	17da      	asrs	r2, r3, #31
 800d0e0:	1a8a      	subs	r2, r1, r2
 800d0e2:	2164      	movs	r1, #100	; 0x64
 800d0e4:	fb01 f202 	mul.w	r2, r1, r2
 800d0e8:	1a9b      	subs	r3, r3, r2
 800d0ea:	b218      	sxth	r0, r3
 800d0ec:	4b39      	ldr	r3, [pc, #228]	; (800d1d4 <SendTxData+0x2a0>)
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	1c59      	adds	r1, r3, #1
 800d0f4:	61f9      	str	r1, [r7, #28]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	b2c2      	uxtb	r2, r0
 800d0fa:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = OzonePPB/256;
 800d0fc:	4b3d      	ldr	r3, [pc, #244]	; (800d1f4 <SendTxData+0x2c0>)
 800d0fe:	881b      	ldrh	r3, [r3, #0]
 800d100:	0a1b      	lsrs	r3, r3, #8
 800d102:	b298      	uxth	r0, r3
 800d104:	4b33      	ldr	r3, [pc, #204]	; (800d1d4 <SendTxData+0x2a0>)
 800d106:	685a      	ldr	r2, [r3, #4]
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	1c59      	adds	r1, r3, #1
 800d10c:	61f9      	str	r1, [r7, #28]
 800d10e:	4413      	add	r3, r2
 800d110:	b2c2      	uxtb	r2, r0
 800d112:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = OzonePPB%256;
 800d114:	4b37      	ldr	r3, [pc, #220]	; (800d1f4 <SendTxData+0x2c0>)
 800d116:	8818      	ldrh	r0, [r3, #0]
 800d118:	4b2e      	ldr	r3, [pc, #184]	; (800d1d4 <SendTxData+0x2a0>)
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	1c59      	adds	r1, r3, #1
 800d120:	61f9      	str	r1, [r7, #28]
 800d122:	4413      	add	r3, r2
 800d124:	b2c2      	uxtb	r2, r0
 800d126:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	4b29      	ldr	r3, [pc, #164]	; (800d1d4 <SendTxData+0x2a0>)
 800d12e:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d130:	4b31      	ldr	r3, [pc, #196]	; (800d1f8 <SendTxData+0x2c4>)
 800d132:	7a5b      	ldrb	r3, [r3, #9]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d007      	beq.n	800d148 <SendTxData+0x214>
 800d138:	f002 f9e4 	bl	800f504 <LmHandlerJoinStatus>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d102      	bne.n	800d148 <SendTxData+0x214>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d142:	482d      	ldr	r0, [pc, #180]	; (800d1f8 <SendTxData+0x2c4>)
 800d144:	f010 fd3a 	bl	801dbbc <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d148:	4b2c      	ldr	r3, [pc, #176]	; (800d1fc <SendTxData+0x2c8>)
 800d14a:	78db      	ldrb	r3, [r3, #3]
 800d14c:	2200      	movs	r2, #0
 800d14e:	4619      	mov	r1, r3
 800d150:	4820      	ldr	r0, [pc, #128]	; (800d1d4 <SendTxData+0x2a0>)
 800d152:	f002 f9f3 	bl	800f53c <LmHandlerSend>
 800d156:	4603      	mov	r3, r0
 800d158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d15c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d160:	2b00      	cmp	r3, #0
 800d162:	d106      	bne.n	800d172 <SendTxData+0x23e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d164:	4b26      	ldr	r3, [pc, #152]	; (800d200 <SendTxData+0x2cc>)
 800d166:	2201      	movs	r2, #1
 800d168:	2100      	movs	r1, #0
 800d16a:	2001      	movs	r0, #1
 800d16c:	f010 ff30 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
 800d170:	e016      	b.n	800d1a0 <SendTxData+0x26c>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d172:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d176:	f113 0f06 	cmn.w	r3, #6
 800d17a:	d111      	bne.n	800d1a0 <SendTxData+0x26c>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d17c:	f002 f914 	bl	800f3a8 <LmHandlerGetDutyCycleWaitTime>
 800d180:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	2b00      	cmp	r3, #0
 800d186:	d00b      	beq.n	800d1a0 <SendTxData+0x26c>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	4a1e      	ldr	r2, [pc, #120]	; (800d204 <SendTxData+0x2d0>)
 800d18c:	fba2 2303 	umull	r2, r3, r2, r3
 800d190:	099b      	lsrs	r3, r3, #6
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	4b1c      	ldr	r3, [pc, #112]	; (800d208 <SendTxData+0x2d4>)
 800d196:	2201      	movs	r2, #1
 800d198:	2100      	movs	r1, #0
 800d19a:	2001      	movs	r0, #1
 800d19c:	f010 ff18 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d1a0:	4b1a      	ldr	r3, [pc, #104]	; (800d20c <SendTxData+0x2d8>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10f      	bne.n	800d1c8 <SendTxData+0x294>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d1a8:	4819      	ldr	r0, [pc, #100]	; (800d210 <SendTxData+0x2dc>)
 800d1aa:	f010 fd07 	bl	801dbbc <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d1ae:	4b19      	ldr	r3, [pc, #100]	; (800d214 <SendTxData+0x2e0>)
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	bf38      	it	cc
 800d1b8:	4613      	movcc	r3, r2
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	4814      	ldr	r0, [pc, #80]	; (800d210 <SendTxData+0x2dc>)
 800d1be:	f010 fd6d 	bl	801dc9c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d1c2:	4813      	ldr	r0, [pc, #76]	; (800d210 <SendTxData+0x2dc>)
 800d1c4:	f010 fc8c 	bl	801dae0 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d1c8:	bf00      	nop
 800d1ca:	3728      	adds	r7, #40	; 0x28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	0801e854 	.word	0x0801e854
 800d1d4:	20000094 	.word	0x20000094
 800d1d8:	2000024c 	.word	0x2000024c
 800d1dc:	51eb851f 	.word	0x51eb851f
 800d1e0:	20000248 	.word	0x20000248
 800d1e4:	20000250 	.word	0x20000250
 800d1e8:	20000258 	.word	0x20000258
 800d1ec:	40590000 	.word	0x40590000
 800d1f0:	2000025c 	.word	0x2000025c
 800d1f4:	20000254 	.word	0x20000254
 800d1f8:	2000077c 	.word	0x2000077c
 800d1fc:	20000078 	.word	0x20000078
 800d200:	0801e860 	.word	0x0801e860
 800d204:	10624dd3 	.word	0x10624dd3
 800d208:	0801e870 	.word	0x0801e870
 800d20c:	20000624 	.word	0x20000624
 800d210:	20000628 	.word	0x20000628
 800d214:	20000090 	.word	0x20000090

0800d218 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d220:	2100      	movs	r1, #0
 800d222:	2002      	movs	r0, #2
 800d224:	f010 fba4 	bl	801d970 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d228:	4803      	ldr	r0, [pc, #12]	; (800d238 <OnTxTimerEvent+0x20>)
 800d22a:	f010 fc59 	bl	801dae0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d22e:	bf00      	nop
 800d230:	3708      	adds	r7, #8
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20000628 	.word	0x20000628

0800d23c <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d244:	bf00      	nop
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	bc80      	pop	{r7}
 800d24c:	4770      	bx	lr

0800d24e <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d24e:	b480      	push	{r7}
 800d250:	b083      	sub	sp, #12
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bc80      	pop	{r7}
 800d25e:	4770      	bx	lr

0800d260 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bc80      	pop	{r7}
 800d270:	4770      	bx	lr
	...

0800d274 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af04      	add	r7, sp, #16
 800d27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d041      	beq.n	800d306 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d03d      	beq.n	800d306 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d28a:	4821      	ldr	r0, [pc, #132]	; (800d310 <OnTxData+0x9c>)
 800d28c:	f010 fc28 	bl	801dae0 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d290:	4b20      	ldr	r3, [pc, #128]	; (800d314 <OnTxData+0xa0>)
 800d292:	2200      	movs	r2, #0
 800d294:	2100      	movs	r1, #0
 800d296:	2002      	movs	r0, #2
 800d298:	f010 fe9a 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	7c12      	ldrb	r2, [r2, #16]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d2b4:	9203      	str	r2, [sp, #12]
 800d2b6:	9002      	str	r0, [sp, #8]
 800d2b8:	9101      	str	r1, [sp, #4]
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	4b16      	ldr	r3, [pc, #88]	; (800d318 <OnTxData+0xa4>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	2003      	movs	r0, #3
 800d2c4:	f010 fe84 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d2c8:	4b14      	ldr	r3, [pc, #80]	; (800d31c <OnTxData+0xa8>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	2003      	movs	r0, #3
 800d2d0:	f010 fe7e 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	7a1b      	ldrb	r3, [r3, #8]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d10e      	bne.n	800d2fa <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7a5b      	ldrb	r3, [r3, #9]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <OnTxData+0x74>
 800d2e4:	4b0e      	ldr	r3, [pc, #56]	; (800d320 <OnTxData+0xac>)
 800d2e6:	e000      	b.n	800d2ea <OnTxData+0x76>
 800d2e8:	4b0e      	ldr	r3, [pc, #56]	; (800d324 <OnTxData+0xb0>)
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	4b0e      	ldr	r3, [pc, #56]	; (800d328 <OnTxData+0xb4>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	2003      	movs	r0, #3
 800d2f4:	f010 fe6c 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d2f8:	e005      	b.n	800d306 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d2fa:	4b0c      	ldr	r3, [pc, #48]	; (800d32c <OnTxData+0xb8>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	2100      	movs	r1, #0
 800d300:	2003      	movs	r0, #3
 800d302:	f010 fe65 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d306:	bf00      	nop
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	2000074c 	.word	0x2000074c
 800d314:	0801e890 	.word	0x0801e890
 800d318:	0801e8c4 	.word	0x0801e8c4
 800d31c:	0801e8f8 	.word	0x0801e8f8
 800d320:	0801e908 	.word	0x0801e908
 800d324:	0801e90c 	.word	0x0801e90c
 800d328:	0801e914 	.word	0x0801e914
 800d32c:	0801e928 	.word	0x0801e928

0800d330 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d035      	beq.n	800d3aa <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d11a      	bne.n	800d37e <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d348:	481a      	ldr	r0, [pc, #104]	; (800d3b4 <OnJoinRequest+0x84>)
 800d34a:	f010 fc37 	bl	801dbbc <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d34e:	4b1a      	ldr	r3, [pc, #104]	; (800d3b8 <OnJoinRequest+0x88>)
 800d350:	2200      	movs	r2, #0
 800d352:	2100      	movs	r1, #0
 800d354:	2002      	movs	r0, #2
 800d356:	f010 fe3b 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	79db      	ldrb	r3, [r3, #7]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d106      	bne.n	800d370 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d362:	4b16      	ldr	r3, [pc, #88]	; (800d3bc <OnJoinRequest+0x8c>)
 800d364:	2200      	movs	r2, #0
 800d366:	2100      	movs	r1, #0
 800d368:	2002      	movs	r0, #2
 800d36a:	f010 fe31 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d36e:	e01c      	b.n	800d3aa <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d370:	4b13      	ldr	r3, [pc, #76]	; (800d3c0 <OnJoinRequest+0x90>)
 800d372:	2200      	movs	r2, #0
 800d374:	2100      	movs	r1, #0
 800d376:	2002      	movs	r0, #2
 800d378:	f010 fe2a 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d37c:	e015      	b.n	800d3aa <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d37e:	4b11      	ldr	r3, [pc, #68]	; (800d3c4 <OnJoinRequest+0x94>)
 800d380:	2200      	movs	r2, #0
 800d382:	2100      	movs	r1, #0
 800d384:	2002      	movs	r0, #2
 800d386:	f010 fe23 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	79db      	ldrb	r3, [r3, #7]
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d10b      	bne.n	800d3aa <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d392:	4b0d      	ldr	r3, [pc, #52]	; (800d3c8 <OnJoinRequest+0x98>)
 800d394:	2200      	movs	r2, #0
 800d396:	2100      	movs	r1, #0
 800d398:	2002      	movs	r0, #2
 800d39a:	f010 fe19 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d39e:	4b0b      	ldr	r3, [pc, #44]	; (800d3cc <OnJoinRequest+0x9c>)
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2101      	movs	r1, #1
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f002 f809 	bl	800f3bc <LmHandlerJoin>
}
 800d3aa:	bf00      	nop
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	2000077c 	.word	0x2000077c
 800d3b8:	0801e938 	.word	0x0801e938
 800d3bc:	0801e950 	.word	0x0801e950
 800d3c0:	0801e970 	.word	0x0801e970
 800d3c4:	0801e990 	.word	0x0801e990
 800d3c8:	0801e9ac 	.word	0x0801e9ac
 800d3cc:	20000028 	.word	0x20000028

0800d3d0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3d2:	b093      	sub	sp, #76	; 0x4c
 800d3d4:	af0c      	add	r7, sp, #48	; 0x30
 800d3d6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d056      	beq.n	800d48c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	785b      	ldrb	r3, [r3, #1]
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d008      	beq.n	800d3f8 <OnBeaconStatusChange+0x28>
 800d3e6:	2b03      	cmp	r3, #3
 800d3e8:	d049      	beq.n	800d47e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d3ea:	4b2a      	ldr	r3, [pc, #168]	; (800d494 <OnBeaconStatusChange+0xc4>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	2002      	movs	r0, #2
 800d3f2:	f010 fded 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d3f6:	e049      	b.n	800d48c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	7c1b      	ldrb	r3, [r3, #16]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d404:	461c      	mov	r4, r3
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d40c:	461d      	mov	r5, r3
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	6852      	ldr	r2, [r2, #4]
 800d416:	6979      	ldr	r1, [r7, #20]
 800d418:	7d49      	ldrb	r1, [r1, #21]
 800d41a:	460e      	mov	r6, r1
 800d41c:	6979      	ldr	r1, [r7, #20]
 800d41e:	7d89      	ldrb	r1, [r1, #22]
 800d420:	6139      	str	r1, [r7, #16]
 800d422:	6979      	ldr	r1, [r7, #20]
 800d424:	7dc9      	ldrb	r1, [r1, #23]
 800d426:	60f9      	str	r1, [r7, #12]
 800d428:	6979      	ldr	r1, [r7, #20]
 800d42a:	7e09      	ldrb	r1, [r1, #24]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	6979      	ldr	r1, [r7, #20]
 800d430:	7e49      	ldrb	r1, [r1, #25]
 800d432:	6079      	str	r1, [r7, #4]
 800d434:	6979      	ldr	r1, [r7, #20]
 800d436:	7e89      	ldrb	r1, [r1, #26]
 800d438:	6039      	str	r1, [r7, #0]
 800d43a:	6979      	ldr	r1, [r7, #20]
 800d43c:	7ec9      	ldrb	r1, [r1, #27]
 800d43e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d440:	f8d7 c000 	ldr.w	ip, [r7]
 800d444:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d448:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d44c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d450:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d454:	f8cd c020 	str.w	ip, [sp, #32]
 800d458:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d45c:	f8cd c01c 	str.w	ip, [sp, #28]
 800d460:	6939      	ldr	r1, [r7, #16]
 800d462:	9106      	str	r1, [sp, #24]
 800d464:	9605      	str	r6, [sp, #20]
 800d466:	9204      	str	r2, [sp, #16]
 800d468:	9303      	str	r3, [sp, #12]
 800d46a:	9502      	str	r5, [sp, #8]
 800d46c:	9401      	str	r4, [sp, #4]
 800d46e:	9000      	str	r0, [sp, #0]
 800d470:	4b09      	ldr	r3, [pc, #36]	; (800d498 <OnBeaconStatusChange+0xc8>)
 800d472:	2200      	movs	r2, #0
 800d474:	2100      	movs	r1, #0
 800d476:	2002      	movs	r0, #2
 800d478:	f010 fdaa 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d47c:	e006      	b.n	800d48c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d47e:	4b07      	ldr	r3, [pc, #28]	; (800d49c <OnBeaconStatusChange+0xcc>)
 800d480:	2200      	movs	r2, #0
 800d482:	2100      	movs	r1, #0
 800d484:	2002      	movs	r0, #2
 800d486:	f010 fda3 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d48a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d48c:	bf00      	nop
 800d48e:	371c      	adds	r7, #28
 800d490:	46bd      	mov	sp, r7
 800d492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d494:	0801e9d0 	.word	0x0801e9d0
 800d498:	0801e9e8 	.word	0x0801e9e8
 800d49c:	0801ea5c 	.word	0x0801ea5c

0800d4a0 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d4a4:	bf00      	nop
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bc80      	pop	{r7}
 800d4aa:	4770      	bx	lr

0800d4ac <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af02      	add	r7, sp, #8
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d4b6:	79fb      	ldrb	r3, [r7, #7]
 800d4b8:	4a06      	ldr	r2, [pc, #24]	; (800d4d4 <OnClassChange+0x28>)
 800d4ba:	5cd3      	ldrb	r3, [r2, r3]
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	4b06      	ldr	r3, [pc, #24]	; (800d4d8 <OnClassChange+0x2c>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	2002      	movs	r0, #2
 800d4c6:	f010 fd83 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d4ca:	bf00      	nop
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0801ea98 	.word	0x0801ea98
 800d4d8:	0801ea7c 	.word	0x0801ea7c

0800d4dc <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	2001      	movs	r0, #1
 800d4e4:	f010 fa44 	bl	801d970 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d4e8:	bf00      	nop
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d4f4:	4a0d      	ldr	r2, [pc, #52]	; (800d52c <OnTxPeriodicityChanged+0x40>)
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d4fa:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <OnTxPeriodicityChanged+0x40>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d103      	bne.n	800d50a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d502:	4b0a      	ldr	r3, [pc, #40]	; (800d52c <OnTxPeriodicityChanged+0x40>)
 800d504:	f242 7210 	movw	r2, #10000	; 0x2710
 800d508:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d50a:	4809      	ldr	r0, [pc, #36]	; (800d530 <OnTxPeriodicityChanged+0x44>)
 800d50c:	f010 fb56 	bl	801dbbc <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d510:	4b06      	ldr	r3, [pc, #24]	; (800d52c <OnTxPeriodicityChanged+0x40>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4619      	mov	r1, r3
 800d516:	4806      	ldr	r0, [pc, #24]	; (800d530 <OnTxPeriodicityChanged+0x44>)
 800d518:	f010 fbc0 	bl	801dc9c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d51c:	4804      	ldr	r0, [pc, #16]	; (800d530 <OnTxPeriodicityChanged+0x44>)
 800d51e:	f010 fadf 	bl	801dae0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d522:	bf00      	nop
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	20000090 	.word	0x20000090
 800d530:	20000628 	.word	0x20000628

0800d534 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	4603      	mov	r3, r0
 800d53c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d53e:	4a04      	ldr	r2, [pc, #16]	; (800d550 <OnTxFrameCtrlChanged+0x1c>)
 800d540:	79fb      	ldrb	r3, [r7, #7]
 800d542:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	bc80      	pop	{r7}
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop
 800d550:	20000078 	.word	0x20000078

0800d554 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d55e:	4a04      	ldr	r2, [pc, #16]	; (800d570 <OnPingSlotPeriodicityChanged+0x1c>)
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d564:	bf00      	nop
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	bc80      	pop	{r7}
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20000078 	.word	0x20000078

0800d574 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d578:	f002 fd11 	bl	800ff9e <LmHandlerHalt>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <OnSystemReset+0x1c>
 800d582:	f001 ffbf 	bl	800f504 <LmHandlerJoinStatus>
 800d586:	4603      	mov	r3, r0
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d101      	bne.n	800d590 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d58c:	f7ff fb26 	bl	800cbdc <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d590:	bf00      	nop
 800d592:	bd80      	pop	{r7, pc}

0800d594 <StopJoin>:

static void StopJoin(void)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d598:	4817      	ldr	r0, [pc, #92]	; (800d5f8 <StopJoin+0x64>)
 800d59a:	f010 fb0f 	bl	801dbbc <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d59e:	f002 fcf1 	bl	800ff84 <LmHandlerStop>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d006      	beq.n	800d5b6 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d5a8:	4b14      	ldr	r3, [pc, #80]	; (800d5fc <StopJoin+0x68>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	2002      	movs	r0, #2
 800d5b0:	f010 fd0e 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
 800d5b4:	e01a      	b.n	800d5ec <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d5b6:	4b12      	ldr	r3, [pc, #72]	; (800d600 <StopJoin+0x6c>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	2002      	movs	r0, #2
 800d5be:	f010 fd07 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d5c2:	4b10      	ldr	r3, [pc, #64]	; (800d604 <StopJoin+0x70>)
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d5c8:	4b0f      	ldr	r3, [pc, #60]	; (800d608 <StopJoin+0x74>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	2002      	movs	r0, #2
 800d5d0:	f010 fcfe 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d5d4:	480d      	ldr	r0, [pc, #52]	; (800d60c <StopJoin+0x78>)
 800d5d6:	f001 fe23 	bl	800f220 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d5da:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <StopJoin+0x70>)
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2101      	movs	r1, #1
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f001 feeb 	bl	800f3bc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d5e6:	4804      	ldr	r0, [pc, #16]	; (800d5f8 <StopJoin+0x64>)
 800d5e8:	f010 fa7a 	bl	801dae0 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d5ec:	4808      	ldr	r0, [pc, #32]	; (800d610 <StopJoin+0x7c>)
 800d5ee:	f010 fa77 	bl	801dae0 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d5f2:	bf00      	nop
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20000628 	.word	0x20000628
 800d5fc:	0801ea9c 	.word	0x0801ea9c
 800d600:	0801eabc 	.word	0x0801eabc
 800d604:	20000028 	.word	0x20000028
 800d608:	0801ead0 	.word	0x0801ead0
 800d60c:	20000078 	.word	0x20000078
 800d610:	20000640 	.word	0x20000640

0800d614 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d61c:	4b05      	ldr	r3, [pc, #20]	; (800d634 <OnStopJoinTimerEvent+0x20>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	2b02      	cmp	r3, #2
 800d622:	d103      	bne.n	800d62c <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d624:	2100      	movs	r1, #0
 800d626:	2008      	movs	r0, #8
 800d628:	f010 f9a2 	bl	801d970 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d62c:	bf00      	nop
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	20000028 	.word	0x20000028

0800d638 <StoreContext>:

static void StoreContext(void)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d63e:	23ff      	movs	r3, #255	; 0xff
 800d640:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d642:	f002 fce1 	bl	8010008 <LmHandlerNvmDataStore>
 800d646:	4603      	mov	r3, r0
 800d648:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d64a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d64e:	f113 0f08 	cmn.w	r3, #8
 800d652:	d106      	bne.n	800d662 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d654:	4b0a      	ldr	r3, [pc, #40]	; (800d680 <StoreContext+0x48>)
 800d656:	2200      	movs	r2, #0
 800d658:	2100      	movs	r1, #0
 800d65a:	2002      	movs	r0, #2
 800d65c:	f010 fcb8 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d660:	e00a      	b.n	800d678 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d66a:	d105      	bne.n	800d678 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d66c:	4b05      	ldr	r3, [pc, #20]	; (800d684 <StoreContext+0x4c>)
 800d66e:	2200      	movs	r2, #0
 800d670:	2100      	movs	r1, #0
 800d672:	2002      	movs	r0, #2
 800d674:	f010 fcac 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0801eaf0 	.word	0x0801eaf0
 800d684:	0801eb08 	.word	0x0801eb08

0800d688 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d106      	bne.n	800d6a6 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d698:	4b08      	ldr	r3, [pc, #32]	; (800d6bc <OnNvmDataChange+0x34>)
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	2002      	movs	r0, #2
 800d6a0:	f010 fc96 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d6a4:	e005      	b.n	800d6b2 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <OnNvmDataChange+0x38>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	2100      	movs	r1, #0
 800d6ac:	2002      	movs	r0, #2
 800d6ae:	f010 fc8f 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0801eb20 	.word	0x0801eb20
 800d6c0:	0801eb34 	.word	0x0801eb34

0800d6c4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800d6ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d6d2:	4807      	ldr	r0, [pc, #28]	; (800d6f0 <OnStoreContextRequest+0x2c>)
 800d6d4:	f7f3 fece 	bl	8001474 <FLASH_IF_Erase>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d104      	bne.n	800d6e8 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800d6de:	683a      	ldr	r2, [r7, #0]
 800d6e0:	6879      	ldr	r1, [r7, #4]
 800d6e2:	4803      	ldr	r0, [pc, #12]	; (800d6f0 <OnStoreContextRequest+0x2c>)
 800d6e4:	f7f3 fe76 	bl	80013d4 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d6e8:	bf00      	nop
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	0803f000 	.word	0x0803f000

0800d6f4 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d6fe:	683a      	ldr	r2, [r7, #0]
 800d700:	4903      	ldr	r1, [pc, #12]	; (800d710 <OnRestoreContextRequest+0x1c>)
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7f3 fe8e 	bl	8001424 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d708:	bf00      	nop
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	0803f000 	.word	0x0803f000

0800d714 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800d718:	4b15      	ldr	r3, [pc, #84]	; (800d770 <LoraInfo_Init+0x5c>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d71e:	4b14      	ldr	r3, [pc, #80]	; (800d770 <LoraInfo_Init+0x5c>)
 800d720:	2200      	movs	r2, #0
 800d722:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d724:	4b12      	ldr	r3, [pc, #72]	; (800d770 <LoraInfo_Init+0x5c>)
 800d726:	2200      	movs	r2, #0
 800d728:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d72a:	4b11      	ldr	r3, [pc, #68]	; (800d770 <LoraInfo_Init+0x5c>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d730:	4b0f      	ldr	r3, [pc, #60]	; (800d770 <LoraInfo_Init+0x5c>)
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	f043 0320 	orr.w	r3, r3, #32
 800d738:	4a0d      	ldr	r2, [pc, #52]	; (800d770 <LoraInfo_Init+0x5c>)
 800d73a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d73c:	4b0c      	ldr	r3, [pc, #48]	; (800d770 <LoraInfo_Init+0x5c>)
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10c      	bne.n	800d75e <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d744:	4b0b      	ldr	r3, [pc, #44]	; (800d774 <LoraInfo_Init+0x60>)
 800d746:	2200      	movs	r2, #0
 800d748:	2100      	movs	r1, #0
 800d74a:	2000      	movs	r0, #0
 800d74c:	f010 fc40 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d750:	bf00      	nop
 800d752:	f010 fc2b 	bl	801dfac <UTIL_ADV_TRACE_IsBufferEmpty>
 800d756:	4603      	mov	r3, r0
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d1fa      	bne.n	800d752 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d75c:	e7fe      	b.n	800d75c <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d75e:	4b04      	ldr	r3, [pc, #16]	; (800d770 <LoraInfo_Init+0x5c>)
 800d760:	2200      	movs	r2, #0
 800d762:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800d764:	4b02      	ldr	r3, [pc, #8]	; (800d770 <LoraInfo_Init+0x5c>)
 800d766:	2200      	movs	r2, #0
 800d768:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d76a:	bf00      	nop
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20000794 	.word	0x20000794
 800d774:	0801eb48 	.word	0x0801eb48

0800d778 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d778:	b480      	push	{r7}
 800d77a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d77c:	4b02      	ldr	r3, [pc, #8]	; (800d788 <LoraInfo_GetPtr+0x10>)
}
 800d77e:	4618      	mov	r0, r3
 800d780:	46bd      	mov	sp, r7
 800d782:	bc80      	pop	{r7}
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	20000794 	.word	0x20000794

0800d78c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d790:	f7f5 ffa5 	bl	80036de <BSP_RADIO_Init>
 800d794:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d796:	4618      	mov	r0, r3
 800d798:	bd80      	pop	{r7, pc}

0800d79a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7f5 ffca 	bl	8003740 <BSP_RADIO_ConfigRFSwitch>
 800d7ac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d7ba:	f7f6 f80f 	bl	80037dc <BSP_RADIO_GetTxConfig>
 800d7be:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d7c8:	f7f6 f80f 	bl	80037ea <BSP_RADIO_IsTCXO>
 800d7cc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d7d6:	f7f6 f80f 	bl	80037f8 <BSP_RADIO_IsDCDC>
 800d7da:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7f6 f80a 	bl	8003806 <BSP_RADIO_GetRFOMaxPowerConfig>
 800d7f2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	33f1      	adds	r3, #241	; 0xf1
 800d808:	2210      	movs	r2, #16
 800d80a:	2100      	movs	r1, #0
 800d80c:	4618      	mov	r0, r3
 800d80e:	f00c f875 	bl	80198fc <memset1>
    ctx->M_n = 0;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	22f0      	movs	r2, #240	; 0xf0
 800d81e:	2100      	movs	r1, #0
 800d820:	4618      	mov	r0, r3
 800d822:	f00c f86b 	bl	80198fc <memset1>
}
 800d826:	bf00      	nop
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	461a      	mov	r2, r3
 800d83c:	2110      	movs	r1, #16
 800d83e:	6838      	ldr	r0, [r7, #0]
 800d840:	f000 fe5c 	bl	800e4fc <lorawan_aes_set_key>
}
 800d844:	bf00      	nop
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b08c      	sub	sp, #48	; 0x30
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 80a1 	beq.w	800d9a6 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d86a:	f1c3 0310 	rsb	r3, r3, #16
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	4293      	cmp	r3, r2
 800d872:	bf28      	it	cs
 800d874:	4613      	movcs	r3, r2
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d884:	4413      	add	r3, r2
 800d886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d888:	b292      	uxth	r2, r2
 800d88a:	68b9      	ldr	r1, [r7, #8]
 800d88c:	4618      	mov	r0, r3
 800d88e:	f00b fffa 	bl	8019886 <memcpy1>
        ctx->M_n += mlen;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	441a      	add	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d8a8:	2b0f      	cmp	r3, #15
 800d8aa:	f240 808d 	bls.w	800d9c8 <AES_CMAC_Update+0x17c>
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	f000 8088 	beq.w	800d9c8 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8bc:	e015      	b.n	800d8ea <AES_CMAC_Update+0x9e>
 800d8be:	68fa      	ldr	r2, [r7, #12]
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	4413      	add	r3, r2
 800d8c4:	33f1      	adds	r3, #241	; 0xf1
 800d8c6:	781a      	ldrb	r2, [r3, #0]
 800d8c8:	68f9      	ldr	r1, [r7, #12]
 800d8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8cc:	440b      	add	r3, r1
 800d8ce:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	4053      	eors	r3, r2
 800d8d6:	b2d9      	uxtb	r1, r3
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	4413      	add	r3, r2
 800d8de:	33f1      	adds	r3, #241	; 0xf1
 800d8e0:	460a      	mov	r2, r1
 800d8e2:	701a      	strb	r2, [r3, #0]
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	2b0f      	cmp	r3, #15
 800d8ee:	dde6      	ble.n	800d8be <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d8f6:	f107 0314 	add.w	r3, r7, #20
 800d8fa:	2210      	movs	r2, #16
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f00b ffc2 	bl	8019886 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d902:	68fa      	ldr	r2, [r7, #12]
 800d904:	f107 0114 	add.w	r1, r7, #20
 800d908:	f107 0314 	add.w	r3, r7, #20
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 fed3 	bl	800e6b8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	33f1      	adds	r3, #241	; 0xf1
 800d916:	f107 0114 	add.w	r1, r7, #20
 800d91a:	2210      	movs	r2, #16
 800d91c:	4618      	mov	r0, r3
 800d91e:	f00b ffb2 	bl	8019886 <memcpy1>

        data += mlen;
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d926:	4413      	add	r3, r2
 800d928:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800d932:	e038      	b.n	800d9a6 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800d934:	2300      	movs	r3, #0
 800d936:	62bb      	str	r3, [r7, #40]	; 0x28
 800d938:	e013      	b.n	800d962 <AES_CMAC_Update+0x116>
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93e:	4413      	add	r3, r2
 800d940:	33f1      	adds	r3, #241	; 0xf1
 800d942:	781a      	ldrb	r2, [r3, #0]
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	440b      	add	r3, r1
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	4053      	eors	r3, r2
 800d94e:	b2d9      	uxtb	r1, r3
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d954:	4413      	add	r3, r2
 800d956:	33f1      	adds	r3, #241	; 0xf1
 800d958:	460a      	mov	r2, r1
 800d95a:	701a      	strb	r2, [r3, #0]
 800d95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95e:	3301      	adds	r3, #1
 800d960:	62bb      	str	r3, [r7, #40]	; 0x28
 800d962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d964:	2b0f      	cmp	r3, #15
 800d966:	dde8      	ble.n	800d93a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d96e:	f107 0314 	add.w	r3, r7, #20
 800d972:	2210      	movs	r2, #16
 800d974:	4618      	mov	r0, r3
 800d976:	f00b ff86 	bl	8019886 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	f107 0114 	add.w	r1, r7, #20
 800d980:	f107 0314 	add.w	r3, r7, #20
 800d984:	4618      	mov	r0, r3
 800d986:	f000 fe97 	bl	800e6b8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	33f1      	adds	r3, #241	; 0xf1
 800d98e:	f107 0114 	add.w	r1, r7, #20
 800d992:	2210      	movs	r2, #16
 800d994:	4618      	mov	r0, r3
 800d996:	f00b ff76 	bl	8019886 <memcpy1>

        data += 16;
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	3310      	adds	r3, #16
 800d99e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3b10      	subs	r3, #16
 800d9a4:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b10      	cmp	r3, #16
 800d9aa:	d8c3      	bhi.n	800d934 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	68b9      	ldr	r1, [r7, #8]
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f00b ff64 	bl	8019886 <memcpy1>
    ctx->M_n = len;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d9c6:	e000      	b.n	800d9ca <AES_CMAC_Update+0x17e>
            return;
 800d9c8:	bf00      	nop
}
 800d9ca:	3730      	adds	r7, #48	; 0x30
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b092      	sub	sp, #72	; 0x48
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d9da:	f107 031c 	add.w	r3, r7, #28
 800d9de:	2210      	movs	r2, #16
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f00b ff8a 	bl	80198fc <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d9e8:	683a      	ldr	r2, [r7, #0]
 800d9ea:	f107 011c 	add.w	r1, r7, #28
 800d9ee:	f107 031c 	add.w	r3, r7, #28
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 fe60 	bl	800e6b8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d9f8:	7f3b      	ldrb	r3, [r7, #28]
 800d9fa:	b25b      	sxtb	r3, r3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	da30      	bge.n	800da62 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800da00:	2300      	movs	r3, #0
 800da02:	647b      	str	r3, [r7, #68]	; 0x44
 800da04:	e01b      	b.n	800da3e <AES_CMAC_Final+0x6e>
 800da06:	f107 021c 	add.w	r2, r7, #28
 800da0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da0c:	4413      	add	r3, r2
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	b25a      	sxtb	r2, r3
 800da14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da16:	3301      	adds	r3, #1
 800da18:	3348      	adds	r3, #72	; 0x48
 800da1a:	443b      	add	r3, r7
 800da1c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800da20:	09db      	lsrs	r3, r3, #7
 800da22:	b2db      	uxtb	r3, r3
 800da24:	b25b      	sxtb	r3, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	b2d9      	uxtb	r1, r3
 800da2c:	f107 021c 	add.w	r2, r7, #28
 800da30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da32:	4413      	add	r3, r2
 800da34:	460a      	mov	r2, r1
 800da36:	701a      	strb	r2, [r3, #0]
 800da38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da3a:	3301      	adds	r3, #1
 800da3c:	647b      	str	r3, [r7, #68]	; 0x44
 800da3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da40:	2b0e      	cmp	r3, #14
 800da42:	dde0      	ble.n	800da06 <AES_CMAC_Final+0x36>
 800da44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da48:	005b      	lsls	r3, r3, #1
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800da50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da54:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800da58:	43db      	mvns	r3, r3
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da60:	e027      	b.n	800dab2 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800da62:	2300      	movs	r3, #0
 800da64:	643b      	str	r3, [r7, #64]	; 0x40
 800da66:	e01b      	b.n	800daa0 <AES_CMAC_Final+0xd0>
 800da68:	f107 021c 	add.w	r2, r7, #28
 800da6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da6e:	4413      	add	r3, r2
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	005b      	lsls	r3, r3, #1
 800da74:	b25a      	sxtb	r2, r3
 800da76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da78:	3301      	adds	r3, #1
 800da7a:	3348      	adds	r3, #72	; 0x48
 800da7c:	443b      	add	r3, r7
 800da7e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800da82:	09db      	lsrs	r3, r3, #7
 800da84:	b2db      	uxtb	r3, r3
 800da86:	b25b      	sxtb	r3, r3
 800da88:	4313      	orrs	r3, r2
 800da8a:	b25b      	sxtb	r3, r3
 800da8c:	b2d9      	uxtb	r1, r3
 800da8e:	f107 021c 	add.w	r2, r7, #28
 800da92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da94:	4413      	add	r3, r2
 800da96:	460a      	mov	r2, r1
 800da98:	701a      	strb	r2, [r3, #0]
 800da9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9c:	3301      	adds	r3, #1
 800da9e:	643b      	str	r3, [r7, #64]	; 0x40
 800daa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa2:	2b0e      	cmp	r3, #14
 800daa4:	dde0      	ble.n	800da68 <AES_CMAC_Final+0x98>
 800daa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800daaa:	005b      	lsls	r3, r3, #1
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dab8:	2b10      	cmp	r3, #16
 800daba:	d11d      	bne.n	800daf8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dabc:	2300      	movs	r3, #0
 800dabe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac0:	e016      	b.n	800daf0 <AES_CMAC_Final+0x120>
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac6:	4413      	add	r3, r2
 800dac8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dacc:	781a      	ldrb	r2, [r3, #0]
 800dace:	f107 011c 	add.w	r1, r7, #28
 800dad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad4:	440b      	add	r3, r1
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	4053      	eors	r3, r2
 800dada:	b2d9      	uxtb	r1, r3
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae0:	4413      	add	r3, r2
 800dae2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dae6:	460a      	mov	r2, r1
 800dae8:	701a      	strb	r2, [r3, #0]
 800daea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daec:	3301      	adds	r3, #1
 800daee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf2:	2b0f      	cmp	r3, #15
 800daf4:	dde5      	ble.n	800dac2 <AES_CMAC_Final+0xf2>
 800daf6:	e096      	b.n	800dc26 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800daf8:	7f3b      	ldrb	r3, [r7, #28]
 800dafa:	b25b      	sxtb	r3, r3
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	da30      	bge.n	800db62 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800db00:	2300      	movs	r3, #0
 800db02:	63bb      	str	r3, [r7, #56]	; 0x38
 800db04:	e01b      	b.n	800db3e <AES_CMAC_Final+0x16e>
 800db06:	f107 021c 	add.w	r2, r7, #28
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	4413      	add	r3, r2
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	b25a      	sxtb	r2, r3
 800db14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db16:	3301      	adds	r3, #1
 800db18:	3348      	adds	r3, #72	; 0x48
 800db1a:	443b      	add	r3, r7
 800db1c:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800db20:	09db      	lsrs	r3, r3, #7
 800db22:	b2db      	uxtb	r3, r3
 800db24:	b25b      	sxtb	r3, r3
 800db26:	4313      	orrs	r3, r2
 800db28:	b25b      	sxtb	r3, r3
 800db2a:	b2d9      	uxtb	r1, r3
 800db2c:	f107 021c 	add.w	r2, r7, #28
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	4413      	add	r3, r2
 800db34:	460a      	mov	r2, r1
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3a:	3301      	adds	r3, #1
 800db3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800db3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db40:	2b0e      	cmp	r3, #14
 800db42:	dde0      	ble.n	800db06 <AES_CMAC_Final+0x136>
 800db44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800db50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db54:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800db58:	43db      	mvns	r3, r3
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db60:	e027      	b.n	800dbb2 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800db62:	2300      	movs	r3, #0
 800db64:	637b      	str	r3, [r7, #52]	; 0x34
 800db66:	e01b      	b.n	800dba0 <AES_CMAC_Final+0x1d0>
 800db68:	f107 021c 	add.w	r2, r7, #28
 800db6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6e:	4413      	add	r3, r2
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	005b      	lsls	r3, r3, #1
 800db74:	b25a      	sxtb	r2, r3
 800db76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db78:	3301      	adds	r3, #1
 800db7a:	3348      	adds	r3, #72	; 0x48
 800db7c:	443b      	add	r3, r7
 800db7e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800db82:	09db      	lsrs	r3, r3, #7
 800db84:	b2db      	uxtb	r3, r3
 800db86:	b25b      	sxtb	r3, r3
 800db88:	4313      	orrs	r3, r2
 800db8a:	b25b      	sxtb	r3, r3
 800db8c:	b2d9      	uxtb	r1, r3
 800db8e:	f107 021c 	add.w	r2, r7, #28
 800db92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db94:	4413      	add	r3, r2
 800db96:	460a      	mov	r2, r1
 800db98:	701a      	strb	r2, [r3, #0]
 800db9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9c:	3301      	adds	r3, #1
 800db9e:	637b      	str	r3, [r7, #52]	; 0x34
 800dba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dba2:	2b0e      	cmp	r3, #14
 800dba4:	dde0      	ble.n	800db68 <AES_CMAC_Final+0x198>
 800dba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbb8:	683a      	ldr	r2, [r7, #0]
 800dbba:	4413      	add	r3, r2
 800dbbc:	2280      	movs	r2, #128	; 0x80
 800dbbe:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dbc2:	e007      	b.n	800dbd4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbca:	683a      	ldr	r2, [r7, #0]
 800dbcc:	4413      	add	r3, r2
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbda:	1c5a      	adds	r2, r3, #1
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbe8:	2b0f      	cmp	r3, #15
 800dbea:	d9eb      	bls.n	800dbc4 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800dbec:	2300      	movs	r3, #0
 800dbee:	633b      	str	r3, [r7, #48]	; 0x30
 800dbf0:	e016      	b.n	800dc20 <AES_CMAC_Final+0x250>
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf6:	4413      	add	r3, r2
 800dbf8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbfc:	781a      	ldrb	r2, [r3, #0]
 800dbfe:	f107 011c 	add.w	r1, r7, #28
 800dc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc04:	440b      	add	r3, r1
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	4053      	eors	r3, r2
 800dc0a:	b2d9      	uxtb	r1, r3
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	4413      	add	r3, r2
 800dc12:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc16:	460a      	mov	r2, r1
 800dc18:	701a      	strb	r2, [r3, #0]
 800dc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	633b      	str	r3, [r7, #48]	; 0x30
 800dc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc22:	2b0f      	cmp	r3, #15
 800dc24:	dde5      	ble.n	800dbf2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800dc26:	2300      	movs	r3, #0
 800dc28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc2a:	e015      	b.n	800dc58 <AES_CMAC_Final+0x288>
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	4413      	add	r3, r2
 800dc32:	33f1      	adds	r3, #241	; 0xf1
 800dc34:	781a      	ldrb	r2, [r3, #0]
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	440b      	add	r3, r1
 800dc3c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	4053      	eors	r3, r2
 800dc44:	b2d9      	uxtb	r1, r3
 800dc46:	683a      	ldr	r2, [r7, #0]
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	4413      	add	r3, r2
 800dc4c:	33f1      	adds	r3, #241	; 0xf1
 800dc4e:	460a      	mov	r2, r1
 800dc50:	701a      	strb	r2, [r3, #0]
 800dc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc54:	3301      	adds	r3, #1
 800dc56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	2b0f      	cmp	r3, #15
 800dc5c:	dde6      	ble.n	800dc2c <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dc64:	f107 030c 	add.w	r3, r7, #12
 800dc68:	2210      	movs	r2, #16
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f00b fe0b 	bl	8019886 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800dc70:	683a      	ldr	r2, [r7, #0]
 800dc72:	f107 030c 	add.w	r3, r7, #12
 800dc76:	6879      	ldr	r1, [r7, #4]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 fd1d 	bl	800e6b8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800dc7e:	f107 031c 	add.w	r3, r7, #28
 800dc82:	2210      	movs	r2, #16
 800dc84:	2100      	movs	r1, #0
 800dc86:	4618      	mov	r0, r3
 800dc88:	f00b fe38 	bl	80198fc <memset1>
}
 800dc8c:	bf00      	nop
 800dc8e:	3748      	adds	r7, #72	; 0x48
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	781a      	ldrb	r2, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	7852      	ldrb	r2, [r2, #1]
 800dcae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3302      	adds	r3, #2
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	7892      	ldrb	r2, [r2, #2]
 800dcb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	3303      	adds	r3, #3
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	78d2      	ldrb	r2, [r2, #3]
 800dcc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	683a      	ldr	r2, [r7, #0]
 800dcca:	7912      	ldrb	r2, [r2, #4]
 800dccc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3305      	adds	r3, #5
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	7952      	ldrb	r2, [r2, #5]
 800dcd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	3306      	adds	r3, #6
 800dcdc:	683a      	ldr	r2, [r7, #0]
 800dcde:	7992      	ldrb	r2, [r2, #6]
 800dce0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	3307      	adds	r3, #7
 800dce6:	683a      	ldr	r2, [r7, #0]
 800dce8:	79d2      	ldrb	r2, [r2, #7]
 800dcea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	3308      	adds	r3, #8
 800dcf0:	683a      	ldr	r2, [r7, #0]
 800dcf2:	7a12      	ldrb	r2, [r2, #8]
 800dcf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	3309      	adds	r3, #9
 800dcfa:	683a      	ldr	r2, [r7, #0]
 800dcfc:	7a52      	ldrb	r2, [r2, #9]
 800dcfe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	330a      	adds	r3, #10
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	7a92      	ldrb	r2, [r2, #10]
 800dd08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	330b      	adds	r3, #11
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	7ad2      	ldrb	r2, [r2, #11]
 800dd12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	330c      	adds	r3, #12
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	7b12      	ldrb	r2, [r2, #12]
 800dd1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	330d      	adds	r3, #13
 800dd22:	683a      	ldr	r2, [r7, #0]
 800dd24:	7b52      	ldrb	r2, [r2, #13]
 800dd26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	330e      	adds	r3, #14
 800dd2c:	683a      	ldr	r2, [r7, #0]
 800dd2e:	7b92      	ldrb	r2, [r2, #14]
 800dd30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	330f      	adds	r3, #15
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	7bd2      	ldrb	r2, [r2, #15]
 800dd3a:	701a      	strb	r2, [r3, #0]
#endif
}
 800dd3c:	bf00      	nop
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bc80      	pop	{r7}
 800dd44:	4770      	bx	lr

0800dd46 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800dd46:	b480      	push	{r7}
 800dd48:	b085      	sub	sp, #20
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	60f8      	str	r0, [r7, #12]
 800dd4e:	60b9      	str	r1, [r7, #8]
 800dd50:	4613      	mov	r3, r2
 800dd52:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800dd54:	e007      	b.n	800dd66 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	1c53      	adds	r3, r2, #1
 800dd5a:	60bb      	str	r3, [r7, #8]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	1c59      	adds	r1, r3, #1
 800dd60:	60f9      	str	r1, [r7, #12]
 800dd62:	7812      	ldrb	r2, [r2, #0]
 800dd64:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800dd66:	79fb      	ldrb	r3, [r7, #7]
 800dd68:	1e5a      	subs	r2, r3, #1
 800dd6a:	71fa      	strb	r2, [r7, #7]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d1f2      	bne.n	800dd56 <copy_block_nn+0x10>
}
 800dd70:	bf00      	nop
 800dd72:	bf00      	nop
 800dd74:	3714      	adds	r7, #20
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bc80      	pop	{r7}
 800dd7a:	4770      	bx	lr

0800dd7c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	781a      	ldrb	r2, [r3, #0]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	4053      	eors	r3, r2
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	7819      	ldrb	r1, [r3, #0]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	781a      	ldrb	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	3301      	adds	r3, #1
 800dda6:	404a      	eors	r2, r1
 800dda8:	b2d2      	uxtb	r2, r2
 800ddaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	3302      	adds	r3, #2
 800ddb0:	7819      	ldrb	r1, [r3, #0]
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	3302      	adds	r3, #2
 800ddb6:	781a      	ldrb	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	3302      	adds	r3, #2
 800ddbc:	404a      	eors	r2, r1
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	3303      	adds	r3, #3
 800ddc6:	7819      	ldrb	r1, [r3, #0]
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	3303      	adds	r3, #3
 800ddcc:	781a      	ldrb	r2, [r3, #0]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	3303      	adds	r3, #3
 800ddd2:	404a      	eors	r2, r1
 800ddd4:	b2d2      	uxtb	r2, r2
 800ddd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	3304      	adds	r3, #4
 800dddc:	7819      	ldrb	r1, [r3, #0]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	3304      	adds	r3, #4
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3304      	adds	r3, #4
 800dde8:	404a      	eors	r2, r1
 800ddea:	b2d2      	uxtb	r2, r2
 800ddec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3305      	adds	r3, #5
 800ddf2:	7819      	ldrb	r1, [r3, #0]
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	3305      	adds	r3, #5
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3305      	adds	r3, #5
 800ddfe:	404a      	eors	r2, r1
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3306      	adds	r3, #6
 800de08:	7819      	ldrb	r1, [r3, #0]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	3306      	adds	r3, #6
 800de0e:	781a      	ldrb	r2, [r3, #0]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	3306      	adds	r3, #6
 800de14:	404a      	eors	r2, r1
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	3307      	adds	r3, #7
 800de1e:	7819      	ldrb	r1, [r3, #0]
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	3307      	adds	r3, #7
 800de24:	781a      	ldrb	r2, [r3, #0]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	3307      	adds	r3, #7
 800de2a:	404a      	eors	r2, r1
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3308      	adds	r3, #8
 800de34:	7819      	ldrb	r1, [r3, #0]
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	3308      	adds	r3, #8
 800de3a:	781a      	ldrb	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3308      	adds	r3, #8
 800de40:	404a      	eors	r2, r1
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	3309      	adds	r3, #9
 800de4a:	7819      	ldrb	r1, [r3, #0]
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	3309      	adds	r3, #9
 800de50:	781a      	ldrb	r2, [r3, #0]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	3309      	adds	r3, #9
 800de56:	404a      	eors	r2, r1
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	330a      	adds	r3, #10
 800de60:	7819      	ldrb	r1, [r3, #0]
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	330a      	adds	r3, #10
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	330a      	adds	r3, #10
 800de6c:	404a      	eors	r2, r1
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	330b      	adds	r3, #11
 800de76:	7819      	ldrb	r1, [r3, #0]
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	330b      	adds	r3, #11
 800de7c:	781a      	ldrb	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	330b      	adds	r3, #11
 800de82:	404a      	eors	r2, r1
 800de84:	b2d2      	uxtb	r2, r2
 800de86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	330c      	adds	r3, #12
 800de8c:	7819      	ldrb	r1, [r3, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	330c      	adds	r3, #12
 800de92:	781a      	ldrb	r2, [r3, #0]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	330c      	adds	r3, #12
 800de98:	404a      	eors	r2, r1
 800de9a:	b2d2      	uxtb	r2, r2
 800de9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	330d      	adds	r3, #13
 800dea2:	7819      	ldrb	r1, [r3, #0]
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	330d      	adds	r3, #13
 800dea8:	781a      	ldrb	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	330d      	adds	r3, #13
 800deae:	404a      	eors	r2, r1
 800deb0:	b2d2      	uxtb	r2, r2
 800deb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	330e      	adds	r3, #14
 800deb8:	7819      	ldrb	r1, [r3, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	330e      	adds	r3, #14
 800debe:	781a      	ldrb	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	330e      	adds	r3, #14
 800dec4:	404a      	eors	r2, r1
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	330f      	adds	r3, #15
 800dece:	7819      	ldrb	r1, [r3, #0]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	330f      	adds	r3, #15
 800ded4:	781a      	ldrb	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	330f      	adds	r3, #15
 800deda:	404a      	eors	r2, r1
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
#endif
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bc80      	pop	{r7}
 800dee8:	4770      	bx	lr

0800deea <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800deea:	b480      	push	{r7}
 800deec:	b085      	sub	sp, #20
 800deee:	af00      	add	r7, sp, #0
 800def0:	60f8      	str	r0, [r7, #12]
 800def2:	60b9      	str	r1, [r7, #8]
 800def4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	781a      	ldrb	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	4053      	eors	r3, r2
 800df00:	b2da      	uxtb	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	3301      	adds	r3, #1
 800df0a:	7819      	ldrb	r1, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	3301      	adds	r3, #1
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	3301      	adds	r3, #1
 800df16:	404a      	eors	r2, r1
 800df18:	b2d2      	uxtb	r2, r2
 800df1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	3302      	adds	r3, #2
 800df20:	7819      	ldrb	r1, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3302      	adds	r3, #2
 800df26:	781a      	ldrb	r2, [r3, #0]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3302      	adds	r3, #2
 800df2c:	404a      	eors	r2, r1
 800df2e:	b2d2      	uxtb	r2, r2
 800df30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	3303      	adds	r3, #3
 800df36:	7819      	ldrb	r1, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	3303      	adds	r3, #3
 800df3c:	781a      	ldrb	r2, [r3, #0]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3303      	adds	r3, #3
 800df42:	404a      	eors	r2, r1
 800df44:	b2d2      	uxtb	r2, r2
 800df46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	3304      	adds	r3, #4
 800df4c:	7819      	ldrb	r1, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	3304      	adds	r3, #4
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	3304      	adds	r3, #4
 800df58:	404a      	eors	r2, r1
 800df5a:	b2d2      	uxtb	r2, r2
 800df5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	3305      	adds	r3, #5
 800df62:	7819      	ldrb	r1, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3305      	adds	r3, #5
 800df68:	781a      	ldrb	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3305      	adds	r3, #5
 800df6e:	404a      	eors	r2, r1
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	3306      	adds	r3, #6
 800df78:	7819      	ldrb	r1, [r3, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3306      	adds	r3, #6
 800df7e:	781a      	ldrb	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3306      	adds	r3, #6
 800df84:	404a      	eors	r2, r1
 800df86:	b2d2      	uxtb	r2, r2
 800df88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	3307      	adds	r3, #7
 800df8e:	7819      	ldrb	r1, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	3307      	adds	r3, #7
 800df94:	781a      	ldrb	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	3307      	adds	r3, #7
 800df9a:	404a      	eors	r2, r1
 800df9c:	b2d2      	uxtb	r2, r2
 800df9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	3308      	adds	r3, #8
 800dfa4:	7819      	ldrb	r1, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3308      	adds	r3, #8
 800dfaa:	781a      	ldrb	r2, [r3, #0]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	404a      	eors	r2, r1
 800dfb2:	b2d2      	uxtb	r2, r2
 800dfb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	3309      	adds	r3, #9
 800dfba:	7819      	ldrb	r1, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3309      	adds	r3, #9
 800dfc0:	781a      	ldrb	r2, [r3, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	3309      	adds	r3, #9
 800dfc6:	404a      	eors	r2, r1
 800dfc8:	b2d2      	uxtb	r2, r2
 800dfca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	330a      	adds	r3, #10
 800dfd0:	7819      	ldrb	r1, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	330a      	adds	r3, #10
 800dfd6:	781a      	ldrb	r2, [r3, #0]
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	330a      	adds	r3, #10
 800dfdc:	404a      	eors	r2, r1
 800dfde:	b2d2      	uxtb	r2, r2
 800dfe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	330b      	adds	r3, #11
 800dfe6:	7819      	ldrb	r1, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	330b      	adds	r3, #11
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	330b      	adds	r3, #11
 800dff2:	404a      	eors	r2, r1
 800dff4:	b2d2      	uxtb	r2, r2
 800dff6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	330c      	adds	r3, #12
 800dffc:	7819      	ldrb	r1, [r3, #0]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	330c      	adds	r3, #12
 800e002:	781a      	ldrb	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	330c      	adds	r3, #12
 800e008:	404a      	eors	r2, r1
 800e00a:	b2d2      	uxtb	r2, r2
 800e00c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	330d      	adds	r3, #13
 800e012:	7819      	ldrb	r1, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	330d      	adds	r3, #13
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	330d      	adds	r3, #13
 800e01e:	404a      	eors	r2, r1
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	330e      	adds	r3, #14
 800e028:	7819      	ldrb	r1, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	330e      	adds	r3, #14
 800e02e:	781a      	ldrb	r2, [r3, #0]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	330e      	adds	r3, #14
 800e034:	404a      	eors	r2, r1
 800e036:	b2d2      	uxtb	r2, r2
 800e038:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	330f      	adds	r3, #15
 800e03e:	7819      	ldrb	r1, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	330f      	adds	r3, #15
 800e044:	781a      	ldrb	r2, [r3, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	330f      	adds	r3, #15
 800e04a:	404a      	eors	r2, r1
 800e04c:	b2d2      	uxtb	r2, r2
 800e04e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	bc80      	pop	{r7}
 800e058:	4770      	bx	lr

0800e05a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff fe88 	bl	800dd7c <xor_block>
}
 800e06c:	bf00      	nop
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	461a      	mov	r2, r3
 800e082:	4b48      	ldr	r3, [pc, #288]	; (800e1a4 <shift_sub_rows+0x130>)
 800e084:	5c9a      	ldrb	r2, [r3, r2]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	701a      	strb	r2, [r3, #0]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	3304      	adds	r3, #4
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	4619      	mov	r1, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	3304      	adds	r3, #4
 800e096:	4a43      	ldr	r2, [pc, #268]	; (800e1a4 <shift_sub_rows+0x130>)
 800e098:	5c52      	ldrb	r2, [r2, r1]
 800e09a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	3308      	adds	r3, #8
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3308      	adds	r3, #8
 800e0a8:	4a3e      	ldr	r2, [pc, #248]	; (800e1a4 <shift_sub_rows+0x130>)
 800e0aa:	5c52      	ldrb	r2, [r2, r1]
 800e0ac:	701a      	strb	r2, [r3, #0]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	330c      	adds	r3, #12
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	330c      	adds	r3, #12
 800e0ba:	4a3a      	ldr	r2, [pc, #232]	; (800e1a4 <shift_sub_rows+0x130>)
 800e0bc:	5c52      	ldrb	r2, [r2, r1]
 800e0be:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	785b      	ldrb	r3, [r3, #1]
 800e0c4:	73fb      	strb	r3, [r7, #15]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	3305      	adds	r3, #5
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	4a34      	ldr	r2, [pc, #208]	; (800e1a4 <shift_sub_rows+0x130>)
 800e0d4:	5c52      	ldrb	r2, [r2, r1]
 800e0d6:	701a      	strb	r2, [r3, #0]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	3309      	adds	r3, #9
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	4619      	mov	r1, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	3305      	adds	r3, #5
 800e0e4:	4a2f      	ldr	r2, [pc, #188]	; (800e1a4 <shift_sub_rows+0x130>)
 800e0e6:	5c52      	ldrb	r2, [r2, r1]
 800e0e8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	330d      	adds	r3, #13
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	3309      	adds	r3, #9
 800e0f6:	4a2b      	ldr	r2, [pc, #172]	; (800e1a4 <shift_sub_rows+0x130>)
 800e0f8:	5c52      	ldrb	r2, [r2, r1]
 800e0fa:	701a      	strb	r2, [r3, #0]
 800e0fc:	7bfa      	ldrb	r2, [r7, #15]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	330d      	adds	r3, #13
 800e102:	4928      	ldr	r1, [pc, #160]	; (800e1a4 <shift_sub_rows+0x130>)
 800e104:	5c8a      	ldrb	r2, [r1, r2]
 800e106:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	789b      	ldrb	r3, [r3, #2]
 800e10c:	73fb      	strb	r3, [r7, #15]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	330a      	adds	r3, #10
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	4619      	mov	r1, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3302      	adds	r3, #2
 800e11a:	4a22      	ldr	r2, [pc, #136]	; (800e1a4 <shift_sub_rows+0x130>)
 800e11c:	5c52      	ldrb	r2, [r2, r1]
 800e11e:	701a      	strb	r2, [r3, #0]
 800e120:	7bfa      	ldrb	r2, [r7, #15]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	330a      	adds	r3, #10
 800e126:	491f      	ldr	r1, [pc, #124]	; (800e1a4 <shift_sub_rows+0x130>)
 800e128:	5c8a      	ldrb	r2, [r1, r2]
 800e12a:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	799b      	ldrb	r3, [r3, #6]
 800e130:	73fb      	strb	r3, [r7, #15]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	330e      	adds	r3, #14
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	4619      	mov	r1, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	3306      	adds	r3, #6
 800e13e:	4a19      	ldr	r2, [pc, #100]	; (800e1a4 <shift_sub_rows+0x130>)
 800e140:	5c52      	ldrb	r2, [r2, r1]
 800e142:	701a      	strb	r2, [r3, #0]
 800e144:	7bfa      	ldrb	r2, [r7, #15]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	330e      	adds	r3, #14
 800e14a:	4916      	ldr	r1, [pc, #88]	; (800e1a4 <shift_sub_rows+0x130>)
 800e14c:	5c8a      	ldrb	r2, [r1, r2]
 800e14e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	7bdb      	ldrb	r3, [r3, #15]
 800e154:	73fb      	strb	r3, [r7, #15]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	330b      	adds	r3, #11
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	4619      	mov	r1, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	330f      	adds	r3, #15
 800e162:	4a10      	ldr	r2, [pc, #64]	; (800e1a4 <shift_sub_rows+0x130>)
 800e164:	5c52      	ldrb	r2, [r2, r1]
 800e166:	701a      	strb	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3307      	adds	r3, #7
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	4619      	mov	r1, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	330b      	adds	r3, #11
 800e174:	4a0b      	ldr	r2, [pc, #44]	; (800e1a4 <shift_sub_rows+0x130>)
 800e176:	5c52      	ldrb	r2, [r2, r1]
 800e178:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	3303      	adds	r3, #3
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	4619      	mov	r1, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3307      	adds	r3, #7
 800e186:	4a07      	ldr	r2, [pc, #28]	; (800e1a4 <shift_sub_rows+0x130>)
 800e188:	5c52      	ldrb	r2, [r2, r1]
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	7bfa      	ldrb	r2, [r7, #15]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	3303      	adds	r3, #3
 800e192:	4904      	ldr	r1, [pc, #16]	; (800e1a4 <shift_sub_rows+0x130>)
 800e194:	5c8a      	ldrb	r2, [r1, r2]
 800e196:	701a      	strb	r2, [r3, #0]
}
 800e198:	bf00      	nop
 800e19a:	3714      	adds	r7, #20
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bc80      	pop	{r7}
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	0801f094 	.word	0x0801f094

0800e1a8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e1b0:	f107 0308 	add.w	r3, r7, #8
 800e1b4:	6879      	ldr	r1, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7ff fd6c 	bl	800dc94 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e1bc:	7a3b      	ldrb	r3, [r7, #8]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	4b9a      	ldr	r3, [pc, #616]	; (800e42c <mix_sub_columns+0x284>)
 800e1c2:	5c9a      	ldrb	r2, [r3, r2]
 800e1c4:	7b7b      	ldrb	r3, [r7, #13]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4b99      	ldr	r3, [pc, #612]	; (800e430 <mix_sub_columns+0x288>)
 800e1ca:	5c5b      	ldrb	r3, [r3, r1]
 800e1cc:	4053      	eors	r3, r2
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	7cbb      	ldrb	r3, [r7, #18]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4b97      	ldr	r3, [pc, #604]	; (800e434 <mix_sub_columns+0x28c>)
 800e1d6:	5c5b      	ldrb	r3, [r3, r1]
 800e1d8:	4053      	eors	r3, r2
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	4b94      	ldr	r3, [pc, #592]	; (800e434 <mix_sub_columns+0x28c>)
 800e1e2:	5c5b      	ldrb	r3, [r3, r1]
 800e1e4:	4053      	eors	r3, r2
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e1ec:	7a3b      	ldrb	r3, [r7, #8]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	4b90      	ldr	r3, [pc, #576]	; (800e434 <mix_sub_columns+0x28c>)
 800e1f2:	5c9a      	ldrb	r2, [r3, r2]
 800e1f4:	7b7b      	ldrb	r3, [r7, #13]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	4b8c      	ldr	r3, [pc, #560]	; (800e42c <mix_sub_columns+0x284>)
 800e1fa:	5c5b      	ldrb	r3, [r3, r1]
 800e1fc:	4053      	eors	r3, r2
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	7cbb      	ldrb	r3, [r7, #18]
 800e202:	4619      	mov	r1, r3
 800e204:	4b8a      	ldr	r3, [pc, #552]	; (800e430 <mix_sub_columns+0x288>)
 800e206:	5c5b      	ldrb	r3, [r3, r1]
 800e208:	4053      	eors	r3, r2
 800e20a:	b2d9      	uxtb	r1, r3
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	461a      	mov	r2, r3
 800e210:	4b88      	ldr	r3, [pc, #544]	; (800e434 <mix_sub_columns+0x28c>)
 800e212:	5c9a      	ldrb	r2, [r3, r2]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	3301      	adds	r3, #1
 800e218:	404a      	eors	r2, r1
 800e21a:	b2d2      	uxtb	r2, r2
 800e21c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e21e:	7a3b      	ldrb	r3, [r7, #8]
 800e220:	461a      	mov	r2, r3
 800e222:	4b84      	ldr	r3, [pc, #528]	; (800e434 <mix_sub_columns+0x28c>)
 800e224:	5c9a      	ldrb	r2, [r3, r2]
 800e226:	7b7b      	ldrb	r3, [r7, #13]
 800e228:	4619      	mov	r1, r3
 800e22a:	4b82      	ldr	r3, [pc, #520]	; (800e434 <mix_sub_columns+0x28c>)
 800e22c:	5c5b      	ldrb	r3, [r3, r1]
 800e22e:	4053      	eors	r3, r2
 800e230:	b2da      	uxtb	r2, r3
 800e232:	7cbb      	ldrb	r3, [r7, #18]
 800e234:	4619      	mov	r1, r3
 800e236:	4b7d      	ldr	r3, [pc, #500]	; (800e42c <mix_sub_columns+0x284>)
 800e238:	5c5b      	ldrb	r3, [r3, r1]
 800e23a:	4053      	eors	r3, r2
 800e23c:	b2d9      	uxtb	r1, r3
 800e23e:	7dfb      	ldrb	r3, [r7, #23]
 800e240:	461a      	mov	r2, r3
 800e242:	4b7b      	ldr	r3, [pc, #492]	; (800e430 <mix_sub_columns+0x288>)
 800e244:	5c9a      	ldrb	r2, [r3, r2]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3302      	adds	r3, #2
 800e24a:	404a      	eors	r2, r1
 800e24c:	b2d2      	uxtb	r2, r2
 800e24e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e250:	7a3b      	ldrb	r3, [r7, #8]
 800e252:	461a      	mov	r2, r3
 800e254:	4b76      	ldr	r3, [pc, #472]	; (800e430 <mix_sub_columns+0x288>)
 800e256:	5c9a      	ldrb	r2, [r3, r2]
 800e258:	7b7b      	ldrb	r3, [r7, #13]
 800e25a:	4619      	mov	r1, r3
 800e25c:	4b75      	ldr	r3, [pc, #468]	; (800e434 <mix_sub_columns+0x28c>)
 800e25e:	5c5b      	ldrb	r3, [r3, r1]
 800e260:	4053      	eors	r3, r2
 800e262:	b2da      	uxtb	r2, r3
 800e264:	7cbb      	ldrb	r3, [r7, #18]
 800e266:	4619      	mov	r1, r3
 800e268:	4b72      	ldr	r3, [pc, #456]	; (800e434 <mix_sub_columns+0x28c>)
 800e26a:	5c5b      	ldrb	r3, [r3, r1]
 800e26c:	4053      	eors	r3, r2
 800e26e:	b2d9      	uxtb	r1, r3
 800e270:	7dfb      	ldrb	r3, [r7, #23]
 800e272:	461a      	mov	r2, r3
 800e274:	4b6d      	ldr	r3, [pc, #436]	; (800e42c <mix_sub_columns+0x284>)
 800e276:	5c9a      	ldrb	r2, [r3, r2]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3303      	adds	r3, #3
 800e27c:	404a      	eors	r2, r1
 800e27e:	b2d2      	uxtb	r2, r2
 800e280:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e282:	7b3b      	ldrb	r3, [r7, #12]
 800e284:	461a      	mov	r2, r3
 800e286:	4b69      	ldr	r3, [pc, #420]	; (800e42c <mix_sub_columns+0x284>)
 800e288:	5c9a      	ldrb	r2, [r3, r2]
 800e28a:	7c7b      	ldrb	r3, [r7, #17]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4b68      	ldr	r3, [pc, #416]	; (800e430 <mix_sub_columns+0x288>)
 800e290:	5c5b      	ldrb	r3, [r3, r1]
 800e292:	4053      	eors	r3, r2
 800e294:	b2da      	uxtb	r2, r3
 800e296:	7dbb      	ldrb	r3, [r7, #22]
 800e298:	4619      	mov	r1, r3
 800e29a:	4b66      	ldr	r3, [pc, #408]	; (800e434 <mix_sub_columns+0x28c>)
 800e29c:	5c5b      	ldrb	r3, [r3, r1]
 800e29e:	4053      	eors	r3, r2
 800e2a0:	b2d9      	uxtb	r1, r3
 800e2a2:	7afb      	ldrb	r3, [r7, #11]
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	4b63      	ldr	r3, [pc, #396]	; (800e434 <mix_sub_columns+0x28c>)
 800e2a8:	5c9a      	ldrb	r2, [r3, r2]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	404a      	eors	r2, r1
 800e2b0:	b2d2      	uxtb	r2, r2
 800e2b2:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e2b4:	7b3b      	ldrb	r3, [r7, #12]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4b5e      	ldr	r3, [pc, #376]	; (800e434 <mix_sub_columns+0x28c>)
 800e2ba:	5c9a      	ldrb	r2, [r3, r2]
 800e2bc:	7c7b      	ldrb	r3, [r7, #17]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	4b5a      	ldr	r3, [pc, #360]	; (800e42c <mix_sub_columns+0x284>)
 800e2c2:	5c5b      	ldrb	r3, [r3, r1]
 800e2c4:	4053      	eors	r3, r2
 800e2c6:	b2da      	uxtb	r2, r3
 800e2c8:	7dbb      	ldrb	r3, [r7, #22]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	4b58      	ldr	r3, [pc, #352]	; (800e430 <mix_sub_columns+0x288>)
 800e2ce:	5c5b      	ldrb	r3, [r3, r1]
 800e2d0:	4053      	eors	r3, r2
 800e2d2:	b2d9      	uxtb	r1, r3
 800e2d4:	7afb      	ldrb	r3, [r7, #11]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4b56      	ldr	r3, [pc, #344]	; (800e434 <mix_sub_columns+0x28c>)
 800e2da:	5c9a      	ldrb	r2, [r3, r2]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3305      	adds	r3, #5
 800e2e0:	404a      	eors	r2, r1
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e2e6:	7b3b      	ldrb	r3, [r7, #12]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	4b52      	ldr	r3, [pc, #328]	; (800e434 <mix_sub_columns+0x28c>)
 800e2ec:	5c9a      	ldrb	r2, [r3, r2]
 800e2ee:	7c7b      	ldrb	r3, [r7, #17]
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	4b50      	ldr	r3, [pc, #320]	; (800e434 <mix_sub_columns+0x28c>)
 800e2f4:	5c5b      	ldrb	r3, [r3, r1]
 800e2f6:	4053      	eors	r3, r2
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	7dbb      	ldrb	r3, [r7, #22]
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	4b4b      	ldr	r3, [pc, #300]	; (800e42c <mix_sub_columns+0x284>)
 800e300:	5c5b      	ldrb	r3, [r3, r1]
 800e302:	4053      	eors	r3, r2
 800e304:	b2d9      	uxtb	r1, r3
 800e306:	7afb      	ldrb	r3, [r7, #11]
 800e308:	461a      	mov	r2, r3
 800e30a:	4b49      	ldr	r3, [pc, #292]	; (800e430 <mix_sub_columns+0x288>)
 800e30c:	5c9a      	ldrb	r2, [r3, r2]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	3306      	adds	r3, #6
 800e312:	404a      	eors	r2, r1
 800e314:	b2d2      	uxtb	r2, r2
 800e316:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e318:	7b3b      	ldrb	r3, [r7, #12]
 800e31a:	461a      	mov	r2, r3
 800e31c:	4b44      	ldr	r3, [pc, #272]	; (800e430 <mix_sub_columns+0x288>)
 800e31e:	5c9a      	ldrb	r2, [r3, r2]
 800e320:	7c7b      	ldrb	r3, [r7, #17]
 800e322:	4619      	mov	r1, r3
 800e324:	4b43      	ldr	r3, [pc, #268]	; (800e434 <mix_sub_columns+0x28c>)
 800e326:	5c5b      	ldrb	r3, [r3, r1]
 800e328:	4053      	eors	r3, r2
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	7dbb      	ldrb	r3, [r7, #22]
 800e32e:	4619      	mov	r1, r3
 800e330:	4b40      	ldr	r3, [pc, #256]	; (800e434 <mix_sub_columns+0x28c>)
 800e332:	5c5b      	ldrb	r3, [r3, r1]
 800e334:	4053      	eors	r3, r2
 800e336:	b2d9      	uxtb	r1, r3
 800e338:	7afb      	ldrb	r3, [r7, #11]
 800e33a:	461a      	mov	r2, r3
 800e33c:	4b3b      	ldr	r3, [pc, #236]	; (800e42c <mix_sub_columns+0x284>)
 800e33e:	5c9a      	ldrb	r2, [r3, r2]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	3307      	adds	r3, #7
 800e344:	404a      	eors	r2, r1
 800e346:	b2d2      	uxtb	r2, r2
 800e348:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e34a:	7c3b      	ldrb	r3, [r7, #16]
 800e34c:	461a      	mov	r2, r3
 800e34e:	4b37      	ldr	r3, [pc, #220]	; (800e42c <mix_sub_columns+0x284>)
 800e350:	5c9a      	ldrb	r2, [r3, r2]
 800e352:	7d7b      	ldrb	r3, [r7, #21]
 800e354:	4619      	mov	r1, r3
 800e356:	4b36      	ldr	r3, [pc, #216]	; (800e430 <mix_sub_columns+0x288>)
 800e358:	5c5b      	ldrb	r3, [r3, r1]
 800e35a:	4053      	eors	r3, r2
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	7abb      	ldrb	r3, [r7, #10]
 800e360:	4619      	mov	r1, r3
 800e362:	4b34      	ldr	r3, [pc, #208]	; (800e434 <mix_sub_columns+0x28c>)
 800e364:	5c5b      	ldrb	r3, [r3, r1]
 800e366:	4053      	eors	r3, r2
 800e368:	b2d9      	uxtb	r1, r3
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	461a      	mov	r2, r3
 800e36e:	4b31      	ldr	r3, [pc, #196]	; (800e434 <mix_sub_columns+0x28c>)
 800e370:	5c9a      	ldrb	r2, [r3, r2]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3308      	adds	r3, #8
 800e376:	404a      	eors	r2, r1
 800e378:	b2d2      	uxtb	r2, r2
 800e37a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e37c:	7c3b      	ldrb	r3, [r7, #16]
 800e37e:	461a      	mov	r2, r3
 800e380:	4b2c      	ldr	r3, [pc, #176]	; (800e434 <mix_sub_columns+0x28c>)
 800e382:	5c9a      	ldrb	r2, [r3, r2]
 800e384:	7d7b      	ldrb	r3, [r7, #21]
 800e386:	4619      	mov	r1, r3
 800e388:	4b28      	ldr	r3, [pc, #160]	; (800e42c <mix_sub_columns+0x284>)
 800e38a:	5c5b      	ldrb	r3, [r3, r1]
 800e38c:	4053      	eors	r3, r2
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	7abb      	ldrb	r3, [r7, #10]
 800e392:	4619      	mov	r1, r3
 800e394:	4b26      	ldr	r3, [pc, #152]	; (800e430 <mix_sub_columns+0x288>)
 800e396:	5c5b      	ldrb	r3, [r3, r1]
 800e398:	4053      	eors	r3, r2
 800e39a:	b2d9      	uxtb	r1, r3
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4b24      	ldr	r3, [pc, #144]	; (800e434 <mix_sub_columns+0x28c>)
 800e3a2:	5c9a      	ldrb	r2, [r3, r2]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3309      	adds	r3, #9
 800e3a8:	404a      	eors	r2, r1
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e3ae:	7c3b      	ldrb	r3, [r7, #16]
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4b20      	ldr	r3, [pc, #128]	; (800e434 <mix_sub_columns+0x28c>)
 800e3b4:	5c9a      	ldrb	r2, [r3, r2]
 800e3b6:	7d7b      	ldrb	r3, [r7, #21]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	4b1e      	ldr	r3, [pc, #120]	; (800e434 <mix_sub_columns+0x28c>)
 800e3bc:	5c5b      	ldrb	r3, [r3, r1]
 800e3be:	4053      	eors	r3, r2
 800e3c0:	b2da      	uxtb	r2, r3
 800e3c2:	7abb      	ldrb	r3, [r7, #10]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4b19      	ldr	r3, [pc, #100]	; (800e42c <mix_sub_columns+0x284>)
 800e3c8:	5c5b      	ldrb	r3, [r3, r1]
 800e3ca:	4053      	eors	r3, r2
 800e3cc:	b2d9      	uxtb	r1, r3
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	4b17      	ldr	r3, [pc, #92]	; (800e430 <mix_sub_columns+0x288>)
 800e3d4:	5c9a      	ldrb	r2, [r3, r2]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	330a      	adds	r3, #10
 800e3da:	404a      	eors	r2, r1
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e3e0:	7c3b      	ldrb	r3, [r7, #16]
 800e3e2:	461a      	mov	r2, r3
 800e3e4:	4b12      	ldr	r3, [pc, #72]	; (800e430 <mix_sub_columns+0x288>)
 800e3e6:	5c9a      	ldrb	r2, [r3, r2]
 800e3e8:	7d7b      	ldrb	r3, [r7, #21]
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	4b11      	ldr	r3, [pc, #68]	; (800e434 <mix_sub_columns+0x28c>)
 800e3ee:	5c5b      	ldrb	r3, [r3, r1]
 800e3f0:	4053      	eors	r3, r2
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	7abb      	ldrb	r3, [r7, #10]
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	4b0e      	ldr	r3, [pc, #56]	; (800e434 <mix_sub_columns+0x28c>)
 800e3fa:	5c5b      	ldrb	r3, [r3, r1]
 800e3fc:	4053      	eors	r3, r2
 800e3fe:	b2d9      	uxtb	r1, r3
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	461a      	mov	r2, r3
 800e404:	4b09      	ldr	r3, [pc, #36]	; (800e42c <mix_sub_columns+0x284>)
 800e406:	5c9a      	ldrb	r2, [r3, r2]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	330b      	adds	r3, #11
 800e40c:	404a      	eors	r2, r1
 800e40e:	b2d2      	uxtb	r2, r2
 800e410:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e412:	7d3b      	ldrb	r3, [r7, #20]
 800e414:	461a      	mov	r2, r3
 800e416:	4b05      	ldr	r3, [pc, #20]	; (800e42c <mix_sub_columns+0x284>)
 800e418:	5c9a      	ldrb	r2, [r3, r2]
 800e41a:	7a7b      	ldrb	r3, [r7, #9]
 800e41c:	4619      	mov	r1, r3
 800e41e:	4b04      	ldr	r3, [pc, #16]	; (800e430 <mix_sub_columns+0x288>)
 800e420:	5c5b      	ldrb	r3, [r3, r1]
 800e422:	4053      	eors	r3, r2
 800e424:	b2da      	uxtb	r2, r3
 800e426:	7bbb      	ldrb	r3, [r7, #14]
 800e428:	4619      	mov	r1, r3
 800e42a:	e005      	b.n	800e438 <mix_sub_columns+0x290>
 800e42c:	0801f194 	.word	0x0801f194
 800e430:	0801f294 	.word	0x0801f294
 800e434:	0801f094 	.word	0x0801f094
 800e438:	4b2d      	ldr	r3, [pc, #180]	; (800e4f0 <mix_sub_columns+0x348>)
 800e43a:	5c5b      	ldrb	r3, [r3, r1]
 800e43c:	4053      	eors	r3, r2
 800e43e:	b2d9      	uxtb	r1, r3
 800e440:	7cfb      	ldrb	r3, [r7, #19]
 800e442:	461a      	mov	r2, r3
 800e444:	4b2a      	ldr	r3, [pc, #168]	; (800e4f0 <mix_sub_columns+0x348>)
 800e446:	5c9a      	ldrb	r2, [r3, r2]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	330c      	adds	r3, #12
 800e44c:	404a      	eors	r2, r1
 800e44e:	b2d2      	uxtb	r2, r2
 800e450:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e452:	7d3b      	ldrb	r3, [r7, #20]
 800e454:	461a      	mov	r2, r3
 800e456:	4b26      	ldr	r3, [pc, #152]	; (800e4f0 <mix_sub_columns+0x348>)
 800e458:	5c9a      	ldrb	r2, [r3, r2]
 800e45a:	7a7b      	ldrb	r3, [r7, #9]
 800e45c:	4619      	mov	r1, r3
 800e45e:	4b25      	ldr	r3, [pc, #148]	; (800e4f4 <mix_sub_columns+0x34c>)
 800e460:	5c5b      	ldrb	r3, [r3, r1]
 800e462:	4053      	eors	r3, r2
 800e464:	b2da      	uxtb	r2, r3
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	4619      	mov	r1, r3
 800e46a:	4b23      	ldr	r3, [pc, #140]	; (800e4f8 <mix_sub_columns+0x350>)
 800e46c:	5c5b      	ldrb	r3, [r3, r1]
 800e46e:	4053      	eors	r3, r2
 800e470:	b2d9      	uxtb	r1, r3
 800e472:	7cfb      	ldrb	r3, [r7, #19]
 800e474:	461a      	mov	r2, r3
 800e476:	4b1e      	ldr	r3, [pc, #120]	; (800e4f0 <mix_sub_columns+0x348>)
 800e478:	5c9a      	ldrb	r2, [r3, r2]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	330d      	adds	r3, #13
 800e47e:	404a      	eors	r2, r1
 800e480:	b2d2      	uxtb	r2, r2
 800e482:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e484:	7d3b      	ldrb	r3, [r7, #20]
 800e486:	461a      	mov	r2, r3
 800e488:	4b19      	ldr	r3, [pc, #100]	; (800e4f0 <mix_sub_columns+0x348>)
 800e48a:	5c9a      	ldrb	r2, [r3, r2]
 800e48c:	7a7b      	ldrb	r3, [r7, #9]
 800e48e:	4619      	mov	r1, r3
 800e490:	4b17      	ldr	r3, [pc, #92]	; (800e4f0 <mix_sub_columns+0x348>)
 800e492:	5c5b      	ldrb	r3, [r3, r1]
 800e494:	4053      	eors	r3, r2
 800e496:	b2da      	uxtb	r2, r3
 800e498:	7bbb      	ldrb	r3, [r7, #14]
 800e49a:	4619      	mov	r1, r3
 800e49c:	4b15      	ldr	r3, [pc, #84]	; (800e4f4 <mix_sub_columns+0x34c>)
 800e49e:	5c5b      	ldrb	r3, [r3, r1]
 800e4a0:	4053      	eors	r3, r2
 800e4a2:	b2d9      	uxtb	r1, r3
 800e4a4:	7cfb      	ldrb	r3, [r7, #19]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	4b13      	ldr	r3, [pc, #76]	; (800e4f8 <mix_sub_columns+0x350>)
 800e4aa:	5c9a      	ldrb	r2, [r3, r2]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	330e      	adds	r3, #14
 800e4b0:	404a      	eors	r2, r1
 800e4b2:	b2d2      	uxtb	r2, r2
 800e4b4:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e4b6:	7d3b      	ldrb	r3, [r7, #20]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <mix_sub_columns+0x350>)
 800e4bc:	5c9a      	ldrb	r2, [r3, r2]
 800e4be:	7a7b      	ldrb	r3, [r7, #9]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4b0b      	ldr	r3, [pc, #44]	; (800e4f0 <mix_sub_columns+0x348>)
 800e4c4:	5c5b      	ldrb	r3, [r3, r1]
 800e4c6:	4053      	eors	r3, r2
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	7bbb      	ldrb	r3, [r7, #14]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	4b08      	ldr	r3, [pc, #32]	; (800e4f0 <mix_sub_columns+0x348>)
 800e4d0:	5c5b      	ldrb	r3, [r3, r1]
 800e4d2:	4053      	eors	r3, r2
 800e4d4:	b2d9      	uxtb	r1, r3
 800e4d6:	7cfb      	ldrb	r3, [r7, #19]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <mix_sub_columns+0x34c>)
 800e4dc:	5c9a      	ldrb	r2, [r3, r2]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	330f      	adds	r3, #15
 800e4e2:	404a      	eors	r2, r1
 800e4e4:	b2d2      	uxtb	r2, r2
 800e4e6:	701a      	strb	r2, [r3, #0]
  }
 800e4e8:	bf00      	nop
 800e4ea:	3718      	adds	r7, #24
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	0801f094 	.word	0x0801f094
 800e4f4:	0801f194 	.word	0x0801f194
 800e4f8:	0801f294 	.word	0x0801f294

0800e4fc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b086      	sub	sp, #24
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	460b      	mov	r3, r1
 800e506:	607a      	str	r2, [r7, #4]
 800e508:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e50a:	7afb      	ldrb	r3, [r7, #11]
 800e50c:	3b10      	subs	r3, #16
 800e50e:	2b10      	cmp	r3, #16
 800e510:	bf8c      	ite	hi
 800e512:	2201      	movhi	r2, #1
 800e514:	2200      	movls	r2, #0
 800e516:	b2d2      	uxtb	r2, r2
 800e518:	2a00      	cmp	r2, #0
 800e51a:	d10b      	bne.n	800e534 <lorawan_aes_set_key+0x38>
 800e51c:	4a64      	ldr	r2, [pc, #400]	; (800e6b0 <lorawan_aes_set_key+0x1b4>)
 800e51e:	fa22 f303 	lsr.w	r3, r2, r3
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b00      	cmp	r3, #0
 800e528:	bf14      	ite	ne
 800e52a:	2301      	movne	r3, #1
 800e52c:	2300      	moveq	r3, #0
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	2b00      	cmp	r3, #0
 800e532:	d105      	bne.n	800e540 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e53c:	23ff      	movs	r3, #255	; 0xff
 800e53e:	e0b2      	b.n	800e6a6 <lorawan_aes_set_key+0x1aa>
        break;
 800e540:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	7afa      	ldrb	r2, [r7, #11]
 800e546:	68f9      	ldr	r1, [r7, #12]
 800e548:	4618      	mov	r0, r3
 800e54a:	f7ff fbfc 	bl	800dd46 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e54e:	7afb      	ldrb	r3, [r7, #11]
 800e550:	331c      	adds	r3, #28
 800e552:	b2db      	uxtb	r3, r3
 800e554:	009b      	lsls	r3, r3, #2
 800e556:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e558:	7c7b      	ldrb	r3, [r7, #17]
 800e55a:	091b      	lsrs	r3, r3, #4
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	3b01      	subs	r3, #1
 800e560:	b2da      	uxtb	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e568:	7afb      	ldrb	r3, [r7, #11]
 800e56a:	75fb      	strb	r3, [r7, #23]
 800e56c:	2301      	movs	r3, #1
 800e56e:	75bb      	strb	r3, [r7, #22]
 800e570:	e093      	b.n	800e69a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e572:	7dfb      	ldrb	r3, [r7, #23]
 800e574:	3b04      	subs	r3, #4
 800e576:	687a      	ldr	r2, [r7, #4]
 800e578:	5cd3      	ldrb	r3, [r2, r3]
 800e57a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e57c:	7dfb      	ldrb	r3, [r7, #23]
 800e57e:	3b03      	subs	r3, #3
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	5cd3      	ldrb	r3, [r2, r3]
 800e584:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e586:	7dfb      	ldrb	r3, [r7, #23]
 800e588:	3b02      	subs	r3, #2
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	5cd3      	ldrb	r3, [r2, r3]
 800e58e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e590:	7dfb      	ldrb	r3, [r7, #23]
 800e592:	3b01      	subs	r3, #1
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	5cd3      	ldrb	r3, [r2, r3]
 800e598:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	7afa      	ldrb	r2, [r7, #11]
 800e59e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5a2:	fb01 f202 	mul.w	r2, r1, r2
 800e5a6:	1a9b      	subs	r3, r3, r2
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d127      	bne.n	800e5fe <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e5ae:	7d7b      	ldrb	r3, [r7, #21]
 800e5b0:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e5b2:	7d3b      	ldrb	r3, [r7, #20]
 800e5b4:	4a3f      	ldr	r2, [pc, #252]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e5b6:	5cd2      	ldrb	r2, [r2, r3]
 800e5b8:	7dbb      	ldrb	r3, [r7, #22]
 800e5ba:	4053      	eors	r3, r2
 800e5bc:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e5be:	7cfb      	ldrb	r3, [r7, #19]
 800e5c0:	4a3c      	ldr	r2, [pc, #240]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e5c2:	5cd3      	ldrb	r3, [r2, r3]
 800e5c4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e5c6:	7cbb      	ldrb	r3, [r7, #18]
 800e5c8:	4a3a      	ldr	r2, [pc, #232]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e5ca:	5cd3      	ldrb	r3, [r2, r3]
 800e5cc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e5ce:	7c3b      	ldrb	r3, [r7, #16]
 800e5d0:	4a38      	ldr	r2, [pc, #224]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e5d2:	5cd3      	ldrb	r3, [r2, r3]
 800e5d4:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e5d6:	7dbb      	ldrb	r3, [r7, #22]
 800e5d8:	005b      	lsls	r3, r3, #1
 800e5da:	b25a      	sxtb	r2, r3
 800e5dc:	7dbb      	ldrb	r3, [r7, #22]
 800e5de:	09db      	lsrs	r3, r3, #7
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	0049      	lsls	r1, r1, #1
 800e5e6:	440b      	add	r3, r1
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	00c8      	lsls	r0, r1, #3
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	440b      	add	r3, r1
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	b25b      	sxtb	r3, r3
 800e5f6:	4053      	eors	r3, r2
 800e5f8:	b25b      	sxtb	r3, r3
 800e5fa:	75bb      	strb	r3, [r7, #22]
 800e5fc:	e01c      	b.n	800e638 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e5fe:	7afb      	ldrb	r3, [r7, #11]
 800e600:	2b18      	cmp	r3, #24
 800e602:	d919      	bls.n	800e638 <lorawan_aes_set_key+0x13c>
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	7afa      	ldrb	r2, [r7, #11]
 800e608:	fbb3 f1f2 	udiv	r1, r3, r2
 800e60c:	fb01 f202 	mul.w	r2, r1, r2
 800e610:	1a9b      	subs	r3, r3, r2
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b10      	cmp	r3, #16
 800e616:	d10f      	bne.n	800e638 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e618:	7d7b      	ldrb	r3, [r7, #21]
 800e61a:	4a26      	ldr	r2, [pc, #152]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e61c:	5cd3      	ldrb	r3, [r2, r3]
 800e61e:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e620:	7d3b      	ldrb	r3, [r7, #20]
 800e622:	4a24      	ldr	r2, [pc, #144]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e624:	5cd3      	ldrb	r3, [r2, r3]
 800e626:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e628:	7cfb      	ldrb	r3, [r7, #19]
 800e62a:	4a22      	ldr	r2, [pc, #136]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e62c:	5cd3      	ldrb	r3, [r2, r3]
 800e62e:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e630:	7cbb      	ldrb	r3, [r7, #18]
 800e632:	4a20      	ldr	r2, [pc, #128]	; (800e6b4 <lorawan_aes_set_key+0x1b8>)
 800e634:	5cd3      	ldrb	r3, [r2, r3]
 800e636:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e638:	7dfa      	ldrb	r2, [r7, #23]
 800e63a:	7afb      	ldrb	r3, [r7, #11]
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e640:	7c3b      	ldrb	r3, [r7, #16]
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	5cd1      	ldrb	r1, [r2, r3]
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	7d7a      	ldrb	r2, [r7, #21]
 800e64a:	404a      	eors	r2, r1
 800e64c:	b2d1      	uxtb	r1, r2
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e652:	7c3b      	ldrb	r3, [r7, #16]
 800e654:	3301      	adds	r3, #1
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	5cd1      	ldrb	r1, [r2, r3]
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	3301      	adds	r3, #1
 800e65e:	7d3a      	ldrb	r2, [r7, #20]
 800e660:	404a      	eors	r2, r1
 800e662:	b2d1      	uxtb	r1, r2
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e668:	7c3b      	ldrb	r3, [r7, #16]
 800e66a:	3302      	adds	r3, #2
 800e66c:	687a      	ldr	r2, [r7, #4]
 800e66e:	5cd1      	ldrb	r1, [r2, r3]
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	3302      	adds	r3, #2
 800e674:	7cfa      	ldrb	r2, [r7, #19]
 800e676:	404a      	eors	r2, r1
 800e678:	b2d1      	uxtb	r1, r2
 800e67a:	687a      	ldr	r2, [r7, #4]
 800e67c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e67e:	7c3b      	ldrb	r3, [r7, #16]
 800e680:	3303      	adds	r3, #3
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	5cd1      	ldrb	r1, [r2, r3]
 800e686:	7dfb      	ldrb	r3, [r7, #23]
 800e688:	3303      	adds	r3, #3
 800e68a:	7cba      	ldrb	r2, [r7, #18]
 800e68c:	404a      	eors	r2, r1
 800e68e:	b2d1      	uxtb	r1, r2
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e694:	7dfb      	ldrb	r3, [r7, #23]
 800e696:	3304      	adds	r3, #4
 800e698:	75fb      	strb	r3, [r7, #23]
 800e69a:	7dfa      	ldrb	r2, [r7, #23]
 800e69c:	7c7b      	ldrb	r3, [r7, #17]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	f4ff af67 	bcc.w	800e572 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	00010101 	.word	0x00010101
 800e6b4:	0801f094 	.word	0x0801f094

0800e6b8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b08a      	sub	sp, #40	; 0x28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d038      	beq.n	800e740 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	f107 0314 	add.w	r3, r7, #20
 800e6d4:	68f9      	ldr	r1, [r7, #12]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7ff fc07 	bl	800deea <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e6dc:	2301      	movs	r3, #1
 800e6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6e2:	e014      	b.n	800e70e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e6e4:	f107 0314 	add.w	r3, r7, #20
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff fd5d 	bl	800e1a8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6f4:	0112      	lsls	r2, r2, #4
 800e6f6:	441a      	add	r2, r3
 800e6f8:	f107 0314 	add.w	r3, r7, #20
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7ff fcab 	bl	800e05a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e708:	3301      	adds	r3, #1
 800e70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e714:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e718:	429a      	cmp	r2, r3
 800e71a:	d3e3      	bcc.n	800e6e4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e71c:	f107 0314 	add.w	r3, r7, #20
 800e720:	4618      	mov	r0, r3
 800e722:	f7ff fca7 	bl	800e074 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e72c:	0112      	lsls	r2, r2, #4
 800e72e:	441a      	add	r2, r3
 800e730:	f107 0314 	add.w	r3, r7, #20
 800e734:	4619      	mov	r1, r3
 800e736:	68b8      	ldr	r0, [r7, #8]
 800e738:	f7ff fbd7 	bl	800deea <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	e000      	b.n	800e742 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e740:	23ff      	movs	r3, #255	; 0xff
}
 800e742:	4618      	mov	r0, r3
 800e744:	3728      	adds	r7, #40	; 0x28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
	...

0800e74c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e74e:	b0a1      	sub	sp, #132	; 0x84
 800e750:	af12      	add	r7, sp, #72	; 0x48
 800e752:	4603      	mov	r3, r0
 800e754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e758:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e75c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e760:	4611      	mov	r1, r2
 800e762:	4618      	mov	r0, r3
 800e764:	f000 fa12 	bl	800eb8c <SecureElementGetKeyByID>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d174      	bne.n	800e858 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e76e:	2300      	movs	r3, #0
 800e770:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e774:	e06c      	b.n	800e850 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800e776:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e77a:	4939      	ldr	r1, [pc, #228]	; (800e860 <PrintKey+0x114>)
 800e77c:	4613      	mov	r3, r2
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	4413      	add	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	440b      	add	r3, r1
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d15a      	bne.n	800e846 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800e790:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e794:	4932      	ldr	r1, [pc, #200]	; (800e860 <PrintKey+0x114>)
 800e796:	4613      	mov	r3, r2
 800e798:	005b      	lsls	r3, r3, #1
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	440b      	add	r3, r1
 800e7a0:	3308      	adds	r3, #8
 800e7a2:	6819      	ldr	r1, [r3, #0]
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	785b      	ldrb	r3, [r3, #1]
 800e7a8:	461d      	mov	r5, r3
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	789b      	ldrb	r3, [r3, #2]
 800e7ae:	461e      	mov	r6, r3
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	78db      	ldrb	r3, [r3, #3]
 800e7b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	791b      	ldrb	r3, [r3, #4]
 800e7ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	795b      	ldrb	r3, [r3, #5]
 800e7c0:	623b      	str	r3, [r7, #32]
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	799b      	ldrb	r3, [r3, #6]
 800e7c6:	61fb      	str	r3, [r7, #28]
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	79db      	ldrb	r3, [r3, #7]
 800e7cc:	61bb      	str	r3, [r7, #24]
 800e7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d0:	7a1b      	ldrb	r3, [r3, #8]
 800e7d2:	617b      	str	r3, [r7, #20]
 800e7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d6:	7a5b      	ldrb	r3, [r3, #9]
 800e7d8:	613b      	str	r3, [r7, #16]
 800e7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7dc:	7a9b      	ldrb	r3, [r3, #10]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e2:	7adb      	ldrb	r3, [r3, #11]
 800e7e4:	60bb      	str	r3, [r7, #8]
 800e7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e8:	7b1b      	ldrb	r3, [r3, #12]
 800e7ea:	607b      	str	r3, [r7, #4]
 800e7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ee:	7b5b      	ldrb	r3, [r3, #13]
 800e7f0:	461c      	mov	r4, r3
 800e7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f4:	7b9b      	ldrb	r3, [r3, #14]
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fa:	7bdb      	ldrb	r3, [r3, #15]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e800:	7c1b      	ldrb	r3, [r3, #16]
 800e802:	9310      	str	r3, [sp, #64]	; 0x40
 800e804:	920f      	str	r2, [sp, #60]	; 0x3c
 800e806:	900e      	str	r0, [sp, #56]	; 0x38
 800e808:	940d      	str	r4, [sp, #52]	; 0x34
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	920c      	str	r2, [sp, #48]	; 0x30
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	920b      	str	r2, [sp, #44]	; 0x2c
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	920a      	str	r2, [sp, #40]	; 0x28
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	9209      	str	r2, [sp, #36]	; 0x24
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	9208      	str	r2, [sp, #32]
 800e81e:	69ba      	ldr	r2, [r7, #24]
 800e820:	9207      	str	r2, [sp, #28]
 800e822:	69fa      	ldr	r2, [r7, #28]
 800e824:	9206      	str	r2, [sp, #24]
 800e826:	6a3a      	ldr	r2, [r7, #32]
 800e828:	9205      	str	r2, [sp, #20]
 800e82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e82c:	9204      	str	r2, [sp, #16]
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	9303      	str	r3, [sp, #12]
 800e832:	9602      	str	r6, [sp, #8]
 800e834:	9501      	str	r5, [sp, #4]
 800e836:	9100      	str	r1, [sp, #0]
 800e838:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <PrintKey+0x118>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	2100      	movs	r1, #0
 800e83e:	2002      	movs	r0, #2
 800e840:	f00f fbc6 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
 800e844:	e008      	b.n	800e858 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e84a:	3301      	adds	r3, #1
 800e84c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e850:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e854:	2b0a      	cmp	r3, #10
 800e856:	d98e      	bls.n	800e776 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e858:	373c      	adds	r7, #60	; 0x3c
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e85e:	bf00      	nop
 800e860:	0801f394 	.word	0x0801f394
 800e864:	0801ec2c 	.word	0x0801ec2c

0800e868 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e86a:	b091      	sub	sp, #68	; 0x44
 800e86c:	af08      	add	r7, sp, #32
 800e86e:	4603      	mov	r3, r0
 800e870:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e876:	f107 0310 	add.w	r3, r7, #16
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fbf0 	bl	800f060 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800e880:	7c3b      	ldrb	r3, [r7, #16]
 800e882:	7c7a      	ldrb	r2, [r7, #17]
 800e884:	7cb9      	ldrb	r1, [r7, #18]
 800e886:	7cf8      	ldrb	r0, [r7, #19]
 800e888:	7d3c      	ldrb	r4, [r7, #20]
 800e88a:	7d7d      	ldrb	r5, [r7, #21]
 800e88c:	7dbe      	ldrb	r6, [r7, #22]
 800e88e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800e892:	f8cd c01c 	str.w	ip, [sp, #28]
 800e896:	9606      	str	r6, [sp, #24]
 800e898:	9505      	str	r5, [sp, #20]
 800e89a:	9404      	str	r4, [sp, #16]
 800e89c:	9003      	str	r0, [sp, #12]
 800e89e:	9102      	str	r1, [sp, #8]
 800e8a0:	9201      	str	r2, [sp, #4]
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	4b24      	ldr	r3, [pc, #144]	; (800e938 <PrintIds+0xd0>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	2002      	movs	r0, #2
 800e8ac:	f00f fb90 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800e8b0:	f107 0318 	add.w	r3, r7, #24
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f000 fc03 	bl	800f0c0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800e8ba:	7e3b      	ldrb	r3, [r7, #24]
 800e8bc:	7e7a      	ldrb	r2, [r7, #25]
 800e8be:	7eb9      	ldrb	r1, [r7, #26]
 800e8c0:	7ef8      	ldrb	r0, [r7, #27]
 800e8c2:	7f3c      	ldrb	r4, [r7, #28]
 800e8c4:	7f7d      	ldrb	r5, [r7, #29]
 800e8c6:	7fbe      	ldrb	r6, [r7, #30]
 800e8c8:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800e8cc:	f8cd c01c 	str.w	ip, [sp, #28]
 800e8d0:	9606      	str	r6, [sp, #24]
 800e8d2:	9505      	str	r5, [sp, #20]
 800e8d4:	9404      	str	r4, [sp, #16]
 800e8d6:	9003      	str	r0, [sp, #12]
 800e8d8:	9102      	str	r1, [sp, #8]
 800e8da:	9201      	str	r2, [sp, #4]
 800e8dc:	9300      	str	r3, [sp, #0]
 800e8de:	4b17      	ldr	r3, [pc, #92]	; (800e93c <PrintIds+0xd4>)
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	2002      	movs	r0, #2
 800e8e6:	f00f fb73 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800e8ea:	f107 020c 	add.w	r2, r7, #12
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f000 fc16 	bl	800f124 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800e8f8:	f107 030c 	add.w	r3, r7, #12
 800e8fc:	3303      	adds	r3, #3
 800e8fe:	781b      	ldrb	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	f107 030c 	add.w	r3, r7, #12
 800e906:	3302      	adds	r3, #2
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	4619      	mov	r1, r3
 800e90c:	f107 030c 	add.w	r3, r7, #12
 800e910:	3301      	adds	r3, #1
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	4618      	mov	r0, r3
 800e916:	f107 030c 	add.w	r3, r7, #12
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	9303      	str	r3, [sp, #12]
 800e91e:	9002      	str	r0, [sp, #8]
 800e920:	9101      	str	r1, [sp, #4]
 800e922:	9200      	str	r2, [sp, #0]
 800e924:	4b06      	ldr	r3, [pc, #24]	; (800e940 <PrintIds+0xd8>)
 800e926:	2200      	movs	r2, #0
 800e928:	2100      	movs	r1, #0
 800e92a:	2002      	movs	r0, #2
 800e92c:	f00f fb50 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800e930:	bf00      	nop
 800e932:	3724      	adds	r7, #36	; 0x24
 800e934:	46bd      	mov	sp, r7
 800e936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e938:	0801ec88 	.word	0x0801ec88
 800e93c:	0801ecc8 	.word	0x0801ecc8
 800e940:	0801ed08 	.word	0x0801ed08

0800e944 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e944:	b480      	push	{r7}
 800e946:	b085      	sub	sp, #20
 800e948:	af00      	add	r7, sp, #0
 800e94a:	4603      	mov	r3, r0
 800e94c:	6039      	str	r1, [r7, #0]
 800e94e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e950:	2300      	movs	r3, #0
 800e952:	73fb      	strb	r3, [r7, #15]
 800e954:	e01a      	b.n	800e98c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e956:	4b12      	ldr	r3, [pc, #72]	; (800e9a0 <GetKeyByID+0x5c>)
 800e958:	6819      	ldr	r1, [r3, #0]
 800e95a:	7bfa      	ldrb	r2, [r7, #15]
 800e95c:	4613      	mov	r3, r2
 800e95e:	011b      	lsls	r3, r3, #4
 800e960:	4413      	add	r3, r2
 800e962:	440b      	add	r3, r1
 800e964:	3318      	adds	r3, #24
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	79fa      	ldrb	r2, [r7, #7]
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d10b      	bne.n	800e986 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e96e:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <GetKeyByID+0x5c>)
 800e970:	6819      	ldr	r1, [r3, #0]
 800e972:	7bfa      	ldrb	r2, [r7, #15]
 800e974:	4613      	mov	r3, r2
 800e976:	011b      	lsls	r3, r3, #4
 800e978:	4413      	add	r3, r2
 800e97a:	3318      	adds	r3, #24
 800e97c:	18ca      	adds	r2, r1, r3
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e982:	2300      	movs	r3, #0
 800e984:	e006      	b.n	800e994 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e986:	7bfb      	ldrb	r3, [r7, #15]
 800e988:	3301      	adds	r3, #1
 800e98a:	73fb      	strb	r3, [r7, #15]
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b0a      	cmp	r3, #10
 800e990:	d9e1      	bls.n	800e956 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e992:	2303      	movs	r3, #3
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	bc80      	pop	{r7}
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	200007a4 	.word	0x200007a4

0800e9a4 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e9a4:	b590      	push	{r4, r7, lr}
 800e9a6:	b0d1      	sub	sp, #324	; 0x144
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800e9ae:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800e9b2:	6020      	str	r0, [r4, #0]
 800e9b4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800e9b8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e9bc:	6001      	str	r1, [r0, #0]
 800e9be:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e9c2:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800e9c6:	600a      	str	r2, [r1, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9ce:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e9d2:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e9d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <ComputeCmac+0x46>
 800e9e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e05d      	b.n	800eaaa <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e9ee:	f107 0314 	add.w	r3, r7, #20
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7fe ff02 	bl	800d7fc <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e9f8:	f107 0210 	add.w	r2, r7, #16
 800e9fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea00:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	4611      	mov	r1, r2
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff ff9b 	bl	800e944 <GetKeyByID>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ea14:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d144      	bne.n	800eaa6 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ea1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	1c5a      	adds	r2, r3, #1
 800ea28:	f107 0314 	add.w	r3, r7, #20
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fe fefd 	bl	800d82e <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ea34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ea42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea46:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ea4a:	f107 0014 	add.w	r0, r7, #20
 800ea4e:	2210      	movs	r2, #16
 800ea50:	6819      	ldr	r1, [r3, #0]
 800ea52:	f7fe fefb 	bl	800d84c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ea56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea5a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ea5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea62:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ea66:	f107 0014 	add.w	r0, r7, #20
 800ea6a:	6812      	ldr	r2, [r2, #0]
 800ea6c:	6819      	ldr	r1, [r3, #0]
 800ea6e:	f7fe feed 	bl	800d84c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ea72:	f107 0214 	add.w	r2, r7, #20
 800ea76:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe ffa7 	bl	800d9d0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ea82:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800ea86:	461a      	mov	r2, r3
 800ea88:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ea8c:	021b      	lsls	r3, r3, #8
 800ea8e:	431a      	orrs	r2, r3
 800ea90:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ea94:	041b      	lsls	r3, r3, #16
 800ea96:	431a      	orrs	r2, r3
 800ea98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ea9c:	061b      	lsls	r3, r3, #24
 800ea9e:	431a      	orrs	r2, r3
 800eaa0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800eaa4:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800eaa6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd90      	pop	{r4, r7, pc}

0800eab4 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d101      	bne.n	800eac6 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eac2:	2302      	movs	r3, #2
 800eac4:	e00a      	b.n	800eadc <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800eac6:	4a07      	ldr	r2, [pc, #28]	; (800eae4 <SecureElementInit+0x30>)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800eacc:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <SecureElementInit+0x30>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	22d8      	movs	r2, #216	; 0xd8
 800ead2:	4905      	ldr	r1, [pc, #20]	; (800eae8 <SecureElementInit+0x34>)
 800ead4:	4618      	mov	r0, r3
 800ead6:	f00a fed6 	bl	8019886 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	200007a4 	.word	0x200007a4
 800eae8:	0801f5b0 	.word	0x0801f5b0

0800eaec <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b086      	sub	sp, #24
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800eafa:	f107 030c 	add.w	r3, r7, #12
 800eafe:	4618      	mov	r0, r3
 800eb00:	f000 faae 	bl	800f060 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800eb04:	f107 0308 	add.w	r3, r7, #8
 800eb08:	4619      	mov	r1, r3
 800eb0a:	2001      	movs	r0, #1
 800eb0c:	f000 fb0a 	bl	800f124 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d024      	beq.n	800eb60 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800eb16:	2300      	movs	r3, #0
 800eb18:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	75bb      	strb	r3, [r7, #22]
 800eb1e:	e00c      	b.n	800eb3a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800eb20:	7dbb      	ldrb	r3, [r7, #22]
 800eb22:	3318      	adds	r3, #24
 800eb24:	443b      	add	r3, r7
 800eb26:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d002      	beq.n	800eb34 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	75fb      	strb	r3, [r7, #23]
                break;
 800eb32:	e005      	b.n	800eb40 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eb34:	7dbb      	ldrb	r3, [r7, #22]
 800eb36:	3301      	adds	r3, #1
 800eb38:	75bb      	strb	r3, [r7, #22]
 800eb3a:	7dbb      	ldrb	r3, [r7, #22]
 800eb3c:	2b07      	cmp	r3, #7
 800eb3e:	d9ef      	bls.n	800eb20 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	f083 0301 	eor.w	r3, r3, #1
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d009      	beq.n	800eb60 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800eb4c:	f107 020c 	add.w	r2, r7, #12
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4610      	mov	r0, r2
 800eb54:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800eb56:	f107 030c 	add.w	r3, r7, #12
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f000 fa68 	bl	800f030 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d00c      	beq.n	800eb80 <SecureElementInitMcuID+0x94>
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d109      	bne.n	800eb80 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800eb6c:	f107 0208 	add.w	r2, r7, #8
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	4610      	mov	r0, r2
 800eb74:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	f000 fab8 	bl	800f0f0 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3718      	adds	r7, #24
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
	...

0800eb8c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	6039      	str	r1, [r7, #0]
 800eb96:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb98:	2300      	movs	r3, #0
 800eb9a:	73fb      	strb	r3, [r7, #15]
 800eb9c:	e01a      	b.n	800ebd4 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eb9e:	4b12      	ldr	r3, [pc, #72]	; (800ebe8 <SecureElementGetKeyByID+0x5c>)
 800eba0:	6819      	ldr	r1, [r3, #0]
 800eba2:	7bfa      	ldrb	r2, [r7, #15]
 800eba4:	4613      	mov	r3, r2
 800eba6:	011b      	lsls	r3, r3, #4
 800eba8:	4413      	add	r3, r2
 800ebaa:	440b      	add	r3, r1
 800ebac:	3318      	adds	r3, #24
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	79fa      	ldrb	r2, [r7, #7]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d10b      	bne.n	800ebce <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ebb6:	4b0c      	ldr	r3, [pc, #48]	; (800ebe8 <SecureElementGetKeyByID+0x5c>)
 800ebb8:	6819      	ldr	r1, [r3, #0]
 800ebba:	7bfa      	ldrb	r2, [r7, #15]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	011b      	lsls	r3, r3, #4
 800ebc0:	4413      	add	r3, r2
 800ebc2:	3318      	adds	r3, #24
 800ebc4:	18ca      	adds	r2, r1, r3
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e006      	b.n	800ebdc <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ebce:	7bfb      	ldrb	r3, [r7, #15]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	73fb      	strb	r3, [r7, #15]
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	2b0a      	cmp	r3, #10
 800ebd8:	d9e1      	bls.n	800eb9e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ebda:	2303      	movs	r3, #3
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3714      	adds	r7, #20
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bc80      	pop	{r7}
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	200007a4 	.word	0x200007a4

0800ebec <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f7ff fdab 	bl	800e74c <PrintKey>
    PrintKey( NWK_KEY );
 800ebf6:	2001      	movs	r0, #1
 800ebf8:	f7ff fda8 	bl	800e74c <PrintKey>
    PrintKey( APP_S_KEY );
 800ebfc:	2009      	movs	r0, #9
 800ebfe:	f7ff fda5 	bl	800e74c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ec02:	2008      	movs	r0, #8
 800ec04:	f7ff fda2 	bl	800e74c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800ec08:	2000      	movs	r0, #0
 800ec0a:	f7ff fe2d 	bl	800e868 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800ec1e:	200b      	movs	r0, #11
 800ec20:	f7ff fd94 	bl	800e74c <PrintKey>
    PrintKey( MC_KE_KEY );
 800ec24:	200c      	movs	r0, #12
 800ec26:	f7ff fd91 	bl	800e74c <PrintKey>
    PrintKey( APP_S_KEY );
 800ec2a:	2009      	movs	r0, #9
 800ec2c:	f7ff fd8e 	bl	800e74c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ec30:	2008      	movs	r0, #8
 800ec32:	f7ff fd8b 	bl	800e74c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800ec36:	200a      	movs	r0, #10
 800ec38:	f7ff fd88 	bl	800e74c <PrintKey>
    PrintIds( mode );
 800ec3c:	79fb      	ldrb	r3, [r7, #7]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fe12 	bl	800e868 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
	...

0800ec50 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	4603      	mov	r3, r0
 800ec58:	6039      	str	r1, [r7, #0]
 800ec5a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec62:	2302      	movs	r3, #2
 800ec64:	e04c      	b.n	800ed00 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec66:	2300      	movs	r3, #0
 800ec68:	77fb      	strb	r3, [r7, #31]
 800ec6a:	e045      	b.n	800ecf8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ec6c:	4b26      	ldr	r3, [pc, #152]	; (800ed08 <SecureElementSetKey+0xb8>)
 800ec6e:	6819      	ldr	r1, [r3, #0]
 800ec70:	7ffa      	ldrb	r2, [r7, #31]
 800ec72:	4613      	mov	r3, r2
 800ec74:	011b      	lsls	r3, r3, #4
 800ec76:	4413      	add	r3, r2
 800ec78:	440b      	add	r3, r1
 800ec7a:	3318      	adds	r3, #24
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	79fa      	ldrb	r2, [r7, #7]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d136      	bne.n	800ecf2 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800ec84:	79fb      	ldrb	r3, [r7, #7]
 800ec86:	2b0d      	cmp	r3, #13
 800ec88:	d123      	bne.n	800ecd2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ec8a:	2306      	movs	r3, #6
 800ec8c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	f107 0310 	add.w	r3, r7, #16
 800ec96:	2200      	movs	r2, #0
 800ec98:	601a      	str	r2, [r3, #0]
 800ec9a:	605a      	str	r2, [r3, #4]
 800ec9c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ec9e:	f107 030c 	add.w	r3, r7, #12
 800eca2:	220c      	movs	r2, #12
 800eca4:	2110      	movs	r1, #16
 800eca6:	6838      	ldr	r0, [r7, #0]
 800eca8:	f000 f876 	bl	800ed98 <SecureElementAesEncrypt>
 800ecac:	4603      	mov	r3, r0
 800ecae:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ecb0:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <SecureElementSetKey+0xb8>)
 800ecb2:	6819      	ldr	r1, [r3, #0]
 800ecb4:	7ffa      	ldrb	r2, [r7, #31]
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	011b      	lsls	r3, r3, #4
 800ecba:	4413      	add	r3, r2
 800ecbc:	3318      	adds	r3, #24
 800ecbe:	440b      	add	r3, r1
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	f107 010c 	add.w	r1, r7, #12
 800ecc6:	2210      	movs	r2, #16
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f00a fddc 	bl	8019886 <memcpy1>
                return retval;
 800ecce:	7fbb      	ldrb	r3, [r7, #30]
 800ecd0:	e016      	b.n	800ed00 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ecd2:	4b0d      	ldr	r3, [pc, #52]	; (800ed08 <SecureElementSetKey+0xb8>)
 800ecd4:	6819      	ldr	r1, [r3, #0]
 800ecd6:	7ffa      	ldrb	r2, [r7, #31]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	011b      	lsls	r3, r3, #4
 800ecdc:	4413      	add	r3, r2
 800ecde:	3318      	adds	r3, #24
 800ece0:	440b      	add	r3, r1
 800ece2:	3301      	adds	r3, #1
 800ece4:	2210      	movs	r2, #16
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	4618      	mov	r0, r3
 800ecea:	f00a fdcc 	bl	8019886 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e006      	b.n	800ed00 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ecf2:	7ffb      	ldrb	r3, [r7, #31]
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	77fb      	strb	r3, [r7, #31]
 800ecf8:	7ffb      	ldrb	r3, [r7, #31]
 800ecfa:	2b0a      	cmp	r3, #10
 800ecfc:	d9b6      	bls.n	800ec6c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecfe:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3720      	adds	r7, #32
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	200007a4 	.word	0x200007a4

0800ed0c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
 800ed18:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800ed1a:	78fb      	ldrb	r3, [r7, #3]
 800ed1c:	2b0b      	cmp	r3, #11
 800ed1e:	d901      	bls.n	800ed24 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ed20:	2303      	movs	r3, #3
 800ed22:	e009      	b.n	800ed38 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ed24:	78fa      	ldrb	r2, [r7, #3]
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f7ff fe37 	bl	800e9a4 <ComputeCmac>
 800ed36:	4603      	mov	r3, r0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3710      	adds	r7, #16
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b088      	sub	sp, #32
 800ed44:	af02      	add	r7, sp, #8
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d101      	bne.n	800ed58 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed54:	2302      	movs	r3, #2
 800ed56:	e01b      	b.n	800ed90 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ed58:	2306      	movs	r3, #6
 800ed5a:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ed60:	78fa      	ldrb	r2, [r7, #3]
 800ed62:	f107 0310 	add.w	r3, r7, #16
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	4613      	mov	r3, r2
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	68f9      	ldr	r1, [r7, #12]
 800ed6e:	2000      	movs	r0, #0
 800ed70:	f7ff fe18 	bl	800e9a4 <ComputeCmac>
 800ed74:	4603      	mov	r3, r0
 800ed76:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ed78:	7dfb      	ldrb	r3, [r7, #23]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d001      	beq.n	800ed82 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	e006      	b.n	800ed90 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d001      	beq.n	800ed8e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ed8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3718      	adds	r7, #24
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b0c2      	sub	sp, #264	; 0x108
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	60f8      	str	r0, [r7, #12]
 800eda0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eda4:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800eda8:	6001      	str	r1, [r0, #0]
 800edaa:	4611      	mov	r1, r2
 800edac:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800edb0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800edb4:	6013      	str	r3, [r2, #0]
 800edb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edba:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800edbe:	460a      	mov	r2, r1
 800edc0:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d006      	beq.n	800edd6 <SecureElementAesEncrypt+0x3e>
 800edc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d101      	bne.n	800edda <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800edd6:	2302      	movs	r3, #2
 800edd8:	e059      	b.n	800ee8e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800edda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f003 030f 	and.w	r3, r3, #15
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d001      	beq.n	800edf0 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800edec:	2305      	movs	r3, #5
 800edee:	e04e      	b.n	800ee8e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800edf0:	f107 0314 	add.w	r3, r7, #20
 800edf4:	22f0      	movs	r2, #240	; 0xf0
 800edf6:	2100      	movs	r1, #0
 800edf8:	4618      	mov	r0, r3
 800edfa:	f00a fd7f 	bl	80198fc <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800edfe:	f107 0210 	add.w	r2, r7, #16
 800ee02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee06:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7ff fd98 	bl	800e944 <GetKeyByID>
 800ee14:	4603      	mov	r3, r0
 800ee16:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ee1a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d133      	bne.n	800ee8a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	3301      	adds	r3, #1
 800ee26:	f107 0214 	add.w	r2, r7, #20
 800ee2a:	2110      	movs	r1, #16
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fb65 	bl	800e4fc <lorawan_aes_set_key>

        uint8_t block = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800ee38:	e020      	b.n	800ee7c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800ee3a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee3e:	68fa      	ldr	r2, [r7, #12]
 800ee40:	18d0      	adds	r0, r2, r3
 800ee42:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee46:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ee4a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ee4e:	6812      	ldr	r2, [r2, #0]
 800ee50:	4413      	add	r3, r2
 800ee52:	f107 0214 	add.w	r2, r7, #20
 800ee56:	4619      	mov	r1, r3
 800ee58:	f7ff fc2e 	bl	800e6b8 <lorawan_aes_encrypt>
            block = block + 16;
 800ee5c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee60:	3310      	adds	r3, #16
 800ee62:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800ee66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ee6e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ee72:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800ee76:	6812      	ldr	r2, [r2, #0]
 800ee78:	3a10      	subs	r2, #16
 800ee7a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800ee7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1d7      	bne.n	800ee3a <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800ee8a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b088      	sub	sp, #32
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
 800eea0:	460b      	mov	r3, r1
 800eea2:	70fb      	strb	r3, [r7, #3]
 800eea4:	4613      	mov	r3, r2
 800eea6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eeae:	2302      	movs	r3, #2
 800eeb0:	e02e      	b.n	800ef10 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800eeb2:	2306      	movs	r3, #6
 800eeb4:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800eeb6:	78bb      	ldrb	r3, [r7, #2]
 800eeb8:	2b0c      	cmp	r3, #12
 800eeba:	d104      	bne.n	800eec6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800eebc:	78fb      	ldrb	r3, [r7, #3]
 800eebe:	2b0b      	cmp	r3, #11
 800eec0:	d001      	beq.n	800eec6 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eec2:	2303      	movs	r3, #3
 800eec4:	e024      	b.n	800ef10 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800eec6:	2300      	movs	r3, #0
 800eec8:	60fb      	str	r3, [r7, #12]
 800eeca:	f107 0310 	add.w	r3, r7, #16
 800eece:	2200      	movs	r2, #0
 800eed0:	601a      	str	r2, [r3, #0]
 800eed2:	605a      	str	r2, [r3, #4]
 800eed4:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800eed6:	f107 030c 	add.w	r3, r7, #12
 800eeda:	78fa      	ldrb	r2, [r7, #3]
 800eedc:	2110      	movs	r1, #16
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ff5a 	bl	800ed98 <SecureElementAesEncrypt>
 800eee4:	4603      	mov	r3, r0
 800eee6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eee8:	7ffb      	ldrb	r3, [r7, #31]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800eeee:	7ffb      	ldrb	r3, [r7, #31]
 800eef0:	e00e      	b.n	800ef10 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800eef2:	f107 020c 	add.w	r2, r7, #12
 800eef6:	78bb      	ldrb	r3, [r7, #2]
 800eef8:	4611      	mov	r1, r2
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff fea8 	bl	800ec50 <SecureElementSetKey>
 800ef00:	4603      	mov	r3, r0
 800ef02:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ef04:	7ffb      	ldrb	r3, [r7, #31]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d001      	beq.n	800ef0e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800ef0a:	7ffb      	ldrb	r3, [r7, #31]
 800ef0c:	e000      	b.n	800ef10 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ef0e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3720      	adds	r7, #32
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60b9      	str	r1, [r7, #8]
 800ef20:	607b      	str	r3, [r7, #4]
 800ef22:	4603      	mov	r3, r0
 800ef24:	73fb      	strb	r3, [r7, #15]
 800ef26:	4613      	mov	r3, r2
 800ef28:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d005      	beq.n	800ef3c <SecureElementProcessJoinAccept+0x24>
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d002      	beq.n	800ef3c <SecureElementProcessJoinAccept+0x24>
 800ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d101      	bne.n	800ef40 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	e05c      	b.n	800effa <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ef40:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef44:	2b21      	cmp	r3, #33	; 0x21
 800ef46:	d901      	bls.n	800ef4c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ef48:	2305      	movs	r3, #5
 800ef4a:	e056      	b.n	800effa <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ef50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	461a      	mov	r2, r3
 800ef58:	6879      	ldr	r1, [r7, #4]
 800ef5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef5c:	f00a fc93 	bl	8019886 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	1c58      	adds	r0, r3, #1
 800ef64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef68:	3b01      	subs	r3, #1
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	3301      	adds	r3, #1
 800ef70:	7dfa      	ldrb	r2, [r7, #23]
 800ef72:	f7ff ff11 	bl	800ed98 <SecureElementAesEncrypt>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d001      	beq.n	800ef80 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ef7c:	2307      	movs	r3, #7
 800ef7e:	e03c      	b.n	800effa <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	330b      	adds	r3, #11
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	09db      	lsrs	r3, r3, #7
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ef8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef92:	3b04      	subs	r3, #4
 800ef94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef96:	4413      	add	r3, r2
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efa0:	3b03      	subs	r3, #3
 800efa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efa4:	4413      	add	r3, r2
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	021b      	lsls	r3, r3, #8
 800efaa:	ea41 0203 	orr.w	r2, r1, r3
 800efae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efb2:	3b02      	subs	r3, #2
 800efb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efb6:	440b      	add	r3, r1
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	041b      	lsls	r3, r3, #16
 800efbc:	431a      	orrs	r2, r3
 800efbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efc2:	3b01      	subs	r3, #1
 800efc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efc6:	440b      	add	r3, r1
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	061b      	lsls	r3, r3, #24
 800efcc:	4313      	orrs	r3, r2
 800efce:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d10d      	bne.n	800eff4 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800efd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efdc:	3b04      	subs	r3, #4
 800efde:	4619      	mov	r1, r3
 800efe0:	2301      	movs	r3, #1
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efe6:	f7ff feab 	bl	800ed40 <SecureElementVerifyAesCmac>
 800efea:	4603      	mov	r3, r0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d003      	beq.n	800eff8 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800eff0:	2301      	movs	r3, #1
 800eff2:	e002      	b.n	800effa <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800eff4:	2304      	movs	r3, #4
 800eff6:	e000      	b.n	800effa <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eff8:	2300      	movs	r3, #0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3718      	adds	r7, #24
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f012:	2302      	movs	r3, #2
 800f014:	e006      	b.n	800f024 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f016:	4b05      	ldr	r3, [pc, #20]	; (800f02c <SecureElementRandomNumber+0x28>)
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	4798      	blx	r3
 800f01c:	4602      	mov	r2, r0
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f022:	2300      	movs	r3, #0
}
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	0801f460 	.word	0x0801f460

0800f030 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f03e:	2302      	movs	r3, #2
 800f040:	e007      	b.n	800f052 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f042:	4b06      	ldr	r3, [pc, #24]	; (800f05c <SecureElementSetDevEui+0x2c>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	2208      	movs	r2, #8
 800f048:	6879      	ldr	r1, [r7, #4]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f00a fc1b 	bl	8019886 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f050:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
 800f05a:	bf00      	nop
 800f05c:	200007a4 	.word	0x200007a4

0800f060 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f06e:	2302      	movs	r3, #2
 800f070:	e007      	b.n	800f082 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f072:	4b06      	ldr	r3, [pc, #24]	; (800f08c <SecureElementGetDevEui+0x2c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	2208      	movs	r2, #8
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f00a fc03 	bl	8019886 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f080:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f082:	4618      	mov	r0, r3
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	200007a4 	.word	0x200007a4

0800f090 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d101      	bne.n	800f0a2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f09e:	2302      	movs	r3, #2
 800f0a0:	e008      	b.n	800f0b4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f0a2:	4b06      	ldr	r3, [pc, #24]	; (800f0bc <SecureElementSetJoinEui+0x2c>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	2208      	movs	r2, #8
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f00a fbea 	bl	8019886 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f0b2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	200007a4 	.word	0x200007a4

0800f0c0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0ce:	2302      	movs	r3, #2
 800f0d0:	e008      	b.n	800f0e4 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f0d2:	4b06      	ldr	r3, [pc, #24]	; (800f0ec <SecureElementGetJoinEui+0x2c>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	3308      	adds	r3, #8
 800f0d8:	2208      	movs	r2, #8
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f00a fbd2 	bl	8019886 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f0e2:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	200007a4 	.word	0x200007a4

0800f0f0 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	b083      	sub	sp, #12
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	6039      	str	r1, [r7, #0]
 800f0fa:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f0fc:	79fb      	ldrb	r3, [r7, #7]
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d104      	bne.n	800f10c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f102:	4b07      	ldr	r3, [pc, #28]	; (800f120 <SecureElementSetDevAddr+0x30>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	611a      	str	r2, [r3, #16]
 800f10a:	e003      	b.n	800f114 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f10c:	4b04      	ldr	r3, [pc, #16]	; (800f120 <SecureElementSetDevAddr+0x30>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f114:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f116:	4618      	mov	r0, r3
 800f118:	370c      	adds	r7, #12
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bc80      	pop	{r7}
 800f11e:	4770      	bx	lr
 800f120:	200007a4 	.word	0x200007a4

0800f124 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	4603      	mov	r3, r0
 800f12c:	6039      	str	r1, [r7, #0]
 800f12e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d101      	bne.n	800f13a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f136:	2302      	movs	r3, #2
 800f138:	e00e      	b.n	800f158 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f13a:	79fb      	ldrb	r3, [r7, #7]
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d105      	bne.n	800f14c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f140:	4b08      	ldr	r3, [pc, #32]	; (800f164 <SecureElementGetDevAddr+0x40>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	691a      	ldr	r2, [r3, #16]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	601a      	str	r2, [r3, #0]
 800f14a:	e004      	b.n	800f156 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f14c:	4b05      	ldr	r3, [pc, #20]	; (800f164 <SecureElementGetDevAddr+0x40>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	695a      	ldr	r2, [r3, #20]
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f156:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f158:	4618      	mov	r0, r3
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bc80      	pop	{r7}
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	200007a4 	.word	0x200007a4

0800f168 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f172:	4a22      	ldr	r2, [pc, #136]	; (800f1fc <LmHandlerInit+0x94>)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f178:	4b21      	ldr	r3, [pc, #132]	; (800f200 <LmHandlerInit+0x98>)
 800f17a:	4a22      	ldr	r2, [pc, #136]	; (800f204 <LmHandlerInit+0x9c>)
 800f17c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f17e:	4b20      	ldr	r3, [pc, #128]	; (800f200 <LmHandlerInit+0x98>)
 800f180:	4a21      	ldr	r2, [pc, #132]	; (800f208 <LmHandlerInit+0xa0>)
 800f182:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f184:	4b1e      	ldr	r3, [pc, #120]	; (800f200 <LmHandlerInit+0x98>)
 800f186:	4a21      	ldr	r2, [pc, #132]	; (800f20c <LmHandlerInit+0xa4>)
 800f188:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f18a:	4b1d      	ldr	r3, [pc, #116]	; (800f200 <LmHandlerInit+0x98>)
 800f18c:	4a20      	ldr	r2, [pc, #128]	; (800f210 <LmHandlerInit+0xa8>)
 800f18e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f190:	4b1a      	ldr	r3, [pc, #104]	; (800f1fc <LmHandlerInit+0x94>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a1f      	ldr	r2, [pc, #124]	; (800f214 <LmHandlerInit+0xac>)
 800f198:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f19a:	4b18      	ldr	r3, [pc, #96]	; (800f1fc <LmHandlerInit+0x94>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	4a1c      	ldr	r2, [pc, #112]	; (800f214 <LmHandlerInit+0xac>)
 800f1a2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f1a4:	4b15      	ldr	r3, [pc, #84]	; (800f1fc <LmHandlerInit+0x94>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	4a1a      	ldr	r2, [pc, #104]	; (800f214 <LmHandlerInit+0xac>)
 800f1ac:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f1ae:	4b13      	ldr	r3, [pc, #76]	; (800f1fc <LmHandlerInit+0x94>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	4a17      	ldr	r2, [pc, #92]	; (800f214 <LmHandlerInit+0xac>)
 800f1b6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f1b8:	4b16      	ldr	r3, [pc, #88]	; (800f214 <LmHandlerInit+0xac>)
 800f1ba:	4a17      	ldr	r2, [pc, #92]	; (800f218 <LmHandlerInit+0xb0>)
 800f1bc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f1be:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <LmHandlerInit+0x94>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	699b      	ldr	r3, [r3, #24]
 800f1c4:	4a13      	ldr	r2, [pc, #76]	; (800f214 <LmHandlerInit+0xac>)
 800f1c6:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f1c8:	4914      	ldr	r1, [pc, #80]	; (800f21c <LmHandlerInit+0xb4>)
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	f000 fd44 	bl	800fc58 <LmHandlerPackageRegister>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d002      	beq.n	800f1dc <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1da:	e00a      	b.n	800f1f2 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f1dc:	463b      	mov	r3, r7
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f001 fa30 	bl	8010644 <LmhpPackagesRegistrationInit>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ee:	e000      	b.n	800f1f2 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3708      	adds	r7, #8
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	200007ec 	.word	0x200007ec
 800f200:	200007f0 	.word	0x200007f0
 800f204:	0800f91d 	.word	0x0800f91d
 800f208:	0800f991 	.word	0x0800f991
 800f20c:	0800fa71 	.word	0x0800fa71
 800f210:	0800fbc5 	.word	0x0800fbc5
 800f214:	20000800 	.word	0x20000800
 800f218:	08010019 	.word	0x08010019
 800f21c:	2000009c 	.word	0x2000009c

0800f220 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b090      	sub	sp, #64	; 0x40
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f228:	2218      	movs	r2, #24
 800f22a:	6879      	ldr	r1, [r7, #4]
 800f22c:	4852      	ldr	r0, [pc, #328]	; (800f378 <LmHandlerConfigure+0x158>)
 800f22e:	f00a fb2a 	bl	8019886 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f232:	f7fe faa1 	bl	800d778 <LoraInfo_GetPtr>
 800f236:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f238:	4b4f      	ldr	r3, [pc, #316]	; (800f378 <LmHandlerConfigure+0x158>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	461a      	mov	r2, r3
 800f23e:	2301      	movs	r3, #1
 800f240:	4093      	lsls	r3, r2
 800f242:	461a      	mov	r2, r3
 800f244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	4013      	ands	r3, r2
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d106      	bne.n	800f25c <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f24e:	4b4b      	ldr	r3, [pc, #300]	; (800f37c <LmHandlerConfigure+0x15c>)
 800f250:	2201      	movs	r2, #1
 800f252:	2100      	movs	r1, #0
 800f254:	2000      	movs	r0, #0
 800f256:	f00e febb 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f25a:	e7fe      	b.n	800f25a <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f25c:	4b46      	ldr	r3, [pc, #280]	; (800f378 <LmHandlerConfigure+0x158>)
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	461a      	mov	r2, r3
 800f262:	4947      	ldr	r1, [pc, #284]	; (800f380 <LmHandlerConfigure+0x160>)
 800f264:	4847      	ldr	r0, [pc, #284]	; (800f384 <LmHandlerConfigure+0x164>)
 800f266:	f004 fbc3 	bl	80139f0 <LoRaMacInitialization>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f270:	f04f 33ff 	mov.w	r3, #4294967295
 800f274:	e07c      	b.n	800f370 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f276:	2305      	movs	r3, #5
 800f278:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f27a:	2300      	movs	r3, #0
 800f27c:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f27e:	f107 0314 	add.w	r3, r7, #20
 800f282:	4618      	mov	r0, r3
 800f284:	f005 f902 	bl	801448c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f288:	4b3d      	ldr	r3, [pc, #244]	; (800f380 <LmHandlerConfigure+0x160>)
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	4a3c      	ldr	r2, [pc, #240]	; (800f380 <LmHandlerConfigure+0x160>)
 800f28e:	68d2      	ldr	r2, [r2, #12]
 800f290:	4611      	mov	r1, r2
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff fc2a 	bl	800eaec <SecureElementInitMcuID>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d002      	beq.n	800f2a4 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f29e:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a2:	e065      	b.n	800f370 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f2a4:	2306      	movs	r3, #6
 800f2a6:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f2a8:	f107 0314 	add.w	r3, r7, #20
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f004 ff37 	bl	8014120 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	4a34      	ldr	r2, [pc, #208]	; (800f388 <LmHandlerConfigure+0x168>)
 800f2b6:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f2b8:	f107 0314 	add.w	r3, r7, #20
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f005 f8e5 	bl	801448c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f2c2:	2302      	movs	r3, #2
 800f2c4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f2c6:	4b30      	ldr	r3, [pc, #192]	; (800f388 <LmHandlerConfigure+0x168>)
 800f2c8:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f2ca:	f107 0314 	add.w	r3, r7, #20
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f004 ff26 	bl	8014120 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f2d4:	2303      	movs	r3, #3
 800f2d6:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f2d8:	4b2c      	ldr	r3, [pc, #176]	; (800f38c <LmHandlerConfigure+0x16c>)
 800f2da:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f004 ff1d 	bl	8014120 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f2e6:	f7ff fc81 	bl	800ebec <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f2ea:	230f      	movs	r3, #15
 800f2ec:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f2f2:	f107 0314 	add.w	r3, r7, #20
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f005 f8c8 	bl	801448c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f2fc:	2310      	movs	r3, #16
 800f2fe:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f300:	2300      	movs	r3, #0
 800f302:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f304:	f107 0314 	add.w	r3, r7, #20
 800f308:	4618      	mov	r0, r3
 800f30a:	f005 f8bf 	bl	801448c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f30e:	2304      	movs	r3, #4
 800f310:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f312:	4b19      	ldr	r3, [pc, #100]	; (800f378 <LmHandlerConfigure+0x158>)
 800f314:	789b      	ldrb	r3, [r3, #2]
 800f316:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f318:	f107 0314 	add.w	r3, r7, #20
 800f31c:	4618      	mov	r0, r3
 800f31e:	f005 f8b5 	bl	801448c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f322:	2339      	movs	r3, #57	; 0x39
 800f324:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f326:	4b14      	ldr	r3, [pc, #80]	; (800f378 <LmHandlerConfigure+0x158>)
 800f328:	695b      	ldr	r3, [r3, #20]
 800f32a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f32c:	f107 0314 	add.w	r3, r7, #20
 800f330:	4618      	mov	r0, r3
 800f332:	f005 f8ab 	bl	801448c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f336:	230f      	movs	r3, #15
 800f338:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f33a:	4b0f      	ldr	r3, [pc, #60]	; (800f378 <LmHandlerConfigure+0x158>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	f107 020c 	add.w	r2, r7, #12
 800f342:	4611      	mov	r1, r2
 800f344:	4618      	mov	r0, r3
 800f346:	f007 ff84 	bl	8017252 <RegionGetPhyParam>
 800f34a:	4603      	mov	r3, r0
 800f34c:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	bf14      	ite	ne
 800f354:	2301      	movne	r3, #1
 800f356:	2300      	moveq	r3, #0
 800f358:	b2da      	uxtb	r2, r3
 800f35a:	4b07      	ldr	r3, [pc, #28]	; (800f378 <LmHandlerConfigure+0x158>)
 800f35c:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f35e:	2014      	movs	r0, #20
 800f360:	f000 fac4 	bl	800f8ec <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f364:	4b04      	ldr	r3, [pc, #16]	; (800f378 <LmHandlerConfigure+0x158>)
 800f366:	79db      	ldrb	r3, [r3, #7]
 800f368:	4618      	mov	r0, r3
 800f36a:	f005 fe6b 	bl	8015044 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3740      	adds	r7, #64	; 0x40
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	200007d4 	.word	0x200007d4
 800f37c:	0801ed34 	.word	0x0801ed34
 800f380:	20000800 	.word	0x20000800
 800f384:	200007f0 	.word	0x200007f0
 800f388:	200007a8 	.word	0x200007a8
 800f38c:	200007b0 	.word	0x200007b0

0800f390 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f394:	f002 fb36 	bl	8011a04 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f398:	f000 fd9c 	bl	800fed4 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f39c:	f000 fd6c 	bl	800fe78 <LmHandlerPackageIsTxPending>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f3a4:	bd80      	pop	{r7, pc}
	...

0800f3a8 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f3ac:	4b02      	ldr	r3, [pc, #8]	; (800f3b8 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bc80      	pop	{r7}
 800f3b6:	4770      	bx	lr
 800f3b8:	20000818 	.word	0x20000818

0800f3bc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b092      	sub	sp, #72	; 0x48
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	460a      	mov	r2, r1
 800f3c6:	71fb      	strb	r3, [r7, #7]
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f3d2:	4b47      	ldr	r3, [pc, #284]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f3d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f3de:	4b44      	ldr	r3, [pc, #272]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f3e0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f3e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	d110      	bne.n	800f410 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f3f4:	4b3f      	ldr	r3, [pc, #252]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f3f6:	2202      	movs	r2, #2
 800f3f8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f3fa:	4a3e      	ldr	r2, [pc, #248]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f3fc:	79bb      	ldrb	r3, [r7, #6]
 800f3fe:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f400:	f004 fda8 	bl	8013f54 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f408:	4618      	mov	r0, r3
 800f40a:	f005 fbd3 	bl	8014bb4 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f40e:	e06b      	b.n	800f4e8 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f410:	2301      	movs	r3, #1
 800f412:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f416:	4b37      	ldr	r3, [pc, #220]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f418:	2201      	movs	r2, #1
 800f41a:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f41c:	4b34      	ldr	r3, [pc, #208]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f41e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f422:	4b34      	ldr	r3, [pc, #208]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f424:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f426:	4b32      	ldr	r3, [pc, #200]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f428:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f42c:	4b31      	ldr	r3, [pc, #196]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f42e:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f430:	4b30      	ldr	r3, [pc, #192]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f432:	2200      	movs	r2, #0
 800f434:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f436:	4a2f      	ldr	r2, [pc, #188]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f438:	79bb      	ldrb	r3, [r7, #6]
 800f43a:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f43c:	4b2e      	ldr	r3, [pc, #184]	; (800f4f8 <LmHandlerJoin+0x13c>)
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	f083 0301 	eor.w	r3, r3, #1
 800f444:	b2db      	uxtb	r3, r3
 800f446:	2b00      	cmp	r3, #0
 800f448:	d034      	beq.n	800f4b4 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f44a:	231e      	movs	r3, #30
 800f44c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f44e:	4b28      	ldr	r3, [pc, #160]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f450:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f454:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f456:	f107 030c 	add.w	r3, r7, #12
 800f45a:	4618      	mov	r0, r3
 800f45c:	f005 f816 	bl	801448c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f460:	231f      	movs	r3, #31
 800f462:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f464:	4b22      	ldr	r3, [pc, #136]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f466:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f46a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f46c:	f107 030c 	add.w	r3, r7, #12
 800f470:	4618      	mov	r0, r3
 800f472:	f005 f80b 	bl	801448c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f476:	2321      	movs	r3, #33	; 0x21
 800f478:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f47a:	4b1d      	ldr	r3, [pc, #116]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f47c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f480:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f482:	f107 030c 	add.w	r3, r7, #12
 800f486:	4618      	mov	r0, r3
 800f488:	f005 f800 	bl	801448c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f48c:	2320      	movs	r3, #32
 800f48e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f490:	4b17      	ldr	r3, [pc, #92]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f492:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f496:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f498:	f107 030c 	add.w	r3, r7, #12
 800f49c:	4618      	mov	r0, r3
 800f49e:	f004 fff5 	bl	801448c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f4a2:	2328      	movs	r3, #40	; 0x28
 800f4a4:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f4a6:	4b15      	ldr	r3, [pc, #84]	; (800f4fc <LmHandlerJoin+0x140>)
 800f4a8:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f4aa:	f107 030c 	add.w	r3, r7, #12
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f004 ffec 	bl	801448c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f4b4:	f004 fd4e 	bl	8013f54 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f4c0:	f107 030c 	add.w	r3, r7, #12
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f004 ffe1 	bl	801448c <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800f4ca:	4b0d      	ldr	r3, [pc, #52]	; (800f500 <LmHandlerJoin+0x144>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d004      	beq.n	800f4de <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f4d4:	4b0a      	ldr	r3, [pc, #40]	; (800f500 <LmHandlerJoin+0x144>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4da:	4806      	ldr	r0, [pc, #24]	; (800f4f4 <LmHandlerJoin+0x138>)
 800f4dc:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800f4de:	4b04      	ldr	r3, [pc, #16]	; (800f4f0 <LmHandlerJoin+0x134>)
 800f4e0:	785b      	ldrb	r3, [r3, #1]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 f932 	bl	800f74c <LmHandlerRequestClass>
}
 800f4e8:	bf00      	nop
 800f4ea:	3748      	adds	r7, #72	; 0x48
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	200007d4 	.word	0x200007d4
 800f4f4:	200000a8 	.word	0x200000a8
 800f4f8:	2000090e 	.word	0x2000090e
 800f4fc:	01000300 	.word	0x01000300
 800f500:	200007ec 	.word	0x200007ec

0800f504 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b08c      	sub	sp, #48	; 0x30
 800f508:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f50a:	2301      	movs	r3, #1
 800f50c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f50e:	1d3b      	adds	r3, r7, #4
 800f510:	4618      	mov	r0, r3
 800f512:	f004 fe05 	bl	8014120 <LoRaMacMibGetRequestConfirm>
 800f516:	4603      	mov	r3, r0
 800f518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800f51c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f524:	7a3b      	ldrb	r3, [r7, #8]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d101      	bne.n	800f52e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f52a:	2300      	movs	r3, #0
 800f52c:	e002      	b.n	800f534 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f52e:	2301      	movs	r3, #1
 800f530:	e000      	b.n	800f534 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f532:	2300      	movs	r3, #0
    }
}
 800f534:	4618      	mov	r0, r3
 800f536:	3730      	adds	r7, #48	; 0x30
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b08a      	sub	sp, #40	; 0x28
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	460b      	mov	r3, r1
 800f546:	70fb      	strb	r3, [r7, #3]
 800f548:	4613      	mov	r3, r2
 800f54a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f54c:	23ff      	movs	r3, #255	; 0xff
 800f54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800f552:	f001 ffe3 	bl	801151c <LoRaMacIsBusy>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d002      	beq.n	800f562 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f55c:	f06f 0301 	mvn.w	r3, #1
 800f560:	e0be      	b.n	800f6e0 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800f562:	f001 fff7 	bl	8011554 <LoRaMacIsStopped>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f56c:	f06f 0302 	mvn.w	r3, #2
 800f570:	e0b6      	b.n	800f6e0 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f572:	f7ff ffc7 	bl	800f504 <LmHandlerJoinStatus>
 800f576:	4603      	mov	r3, r0
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d00a      	beq.n	800f592 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f57c:	4b5a      	ldr	r3, [pc, #360]	; (800f6e8 <LmHandlerSend+0x1ac>)
 800f57e:	79db      	ldrb	r3, [r3, #7]
 800f580:	4a59      	ldr	r2, [pc, #356]	; (800f6e8 <LmHandlerSend+0x1ac>)
 800f582:	7a12      	ldrb	r2, [r2, #8]
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7ff ff18 	bl	800f3bc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f58c:	f06f 0302 	mvn.w	r3, #2
 800f590:	e0a6      	b.n	800f6e0 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800f592:	4b56      	ldr	r3, [pc, #344]	; (800f6ec <LmHandlerSend+0x1b0>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	4798      	blx	r3
 800f59a:	4603      	mov	r3, r0
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00d      	beq.n	800f5bc <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	781a      	ldrb	r2, [r3, #0]
 800f5a4:	4b51      	ldr	r3, [pc, #324]	; (800f6ec <LmHandlerSend+0x1b0>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d006      	beq.n	800f5bc <LmHandlerSend+0x80>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d002      	beq.n	800f5bc <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800f5b6:	f06f 0303 	mvn.w	r3, #3
 800f5ba:	e091      	b.n	800f6e0 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f5bc:	4a4c      	ldr	r2, [pc, #304]	; (800f6f0 <LmHandlerSend+0x1b4>)
 800f5be:	78fb      	ldrb	r3, [r7, #3]
 800f5c0:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f5c2:	78fb      	ldrb	r3, [r7, #3]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	bf14      	ite	ne
 800f5c8:	2301      	movne	r3, #1
 800f5ca:	2300      	moveq	r3, #0
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f5d0:	4b48      	ldr	r3, [pc, #288]	; (800f6f4 <LmHandlerSend+0x1b8>)
 800f5d2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f5d6:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	785b      	ldrb	r3, [r3, #1]
 800f5dc:	f107 020c 	add.w	r2, r7, #12
 800f5e0:	4611      	mov	r1, r2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f004 fd16 	bl	8014014 <LoRaMacQueryTxPossible>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f5fa:	23f9      	movs	r3, #249	; 0xf9
 800f5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f600:	e009      	b.n	800f616 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	785b      	ldrb	r3, [r3, #1]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f616:	4b36      	ldr	r3, [pc, #216]	; (800f6f0 <LmHandlerSend+0x1b4>)
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	3310      	adds	r3, #16
 800f61c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f620:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f624:	4b33      	ldr	r3, [pc, #204]	; (800f6f4 <LmHandlerSend+0x1b8>)
 800f626:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f62a:	4b31      	ldr	r3, [pc, #196]	; (800f6f0 <LmHandlerSend+0x1b4>)
 800f62c:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800f62e:	78ba      	ldrb	r2, [r7, #2]
 800f630:	f107 0310 	add.w	r3, r7, #16
 800f634:	4611      	mov	r1, r2
 800f636:	4618      	mov	r0, r3
 800f638:	f005 fc0e 	bl	8014e58 <LoRaMacMcpsRequest>
 800f63c:	4603      	mov	r3, r0
 800f63e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f642:	6a3b      	ldr	r3, [r7, #32]
 800f644:	4a2c      	ldr	r2, [pc, #176]	; (800f6f8 <LmHandlerSend+0x1bc>)
 800f646:	6013      	str	r3, [r2, #0]

    switch( status )
 800f648:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f64c:	2b11      	cmp	r3, #17
 800f64e:	d840      	bhi.n	800f6d2 <LmHandlerSend+0x196>
 800f650:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <LmHandlerSend+0x11c>)
 800f652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f6a1 	.word	0x0800f6a1
 800f65c:	0800f6b3 	.word	0x0800f6b3
 800f660:	0800f6d3 	.word	0x0800f6d3
 800f664:	0800f6d3 	.word	0x0800f6d3
 800f668:	0800f6d3 	.word	0x0800f6d3
 800f66c:	0800f6d3 	.word	0x0800f6d3
 800f670:	0800f6d3 	.word	0x0800f6d3
 800f674:	0800f6bb 	.word	0x0800f6bb
 800f678:	0800f6d3 	.word	0x0800f6d3
 800f67c:	0800f6d3 	.word	0x0800f6d3
 800f680:	0800f6d3 	.word	0x0800f6d3
 800f684:	0800f6cb 	.word	0x0800f6cb
 800f688:	0800f6d3 	.word	0x0800f6d3
 800f68c:	0800f6d3 	.word	0x0800f6d3
 800f690:	0800f6b3 	.word	0x0800f6b3
 800f694:	0800f6b3 	.word	0x0800f6b3
 800f698:	0800f6b3 	.word	0x0800f6b3
 800f69c:	0800f6c3 	.word	0x0800f6c3
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800f6a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f6a4:	f113 0f07 	cmn.w	r3, #7
 800f6a8:	d017      	beq.n	800f6da <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f6b0:	e013      	b.n	800f6da <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f6b2:	23fe      	movs	r3, #254	; 0xfe
 800f6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f6b8:	e010      	b.n	800f6dc <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f6ba:	23fd      	movs	r3, #253	; 0xfd
 800f6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f6c0:	e00c      	b.n	800f6dc <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f6c2:	23fb      	movs	r3, #251	; 0xfb
 800f6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f6c8:	e008      	b.n	800f6dc <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f6ca:	23fa      	movs	r3, #250	; 0xfa
 800f6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f6d0:	e004      	b.n	800f6dc <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f6d2:	23ff      	movs	r3, #255	; 0xff
 800f6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f6d8:	e000      	b.n	800f6dc <LmHandlerSend+0x1a0>
            break;
 800f6da:	bf00      	nop
    }

    return lmhStatus;
 800f6dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3728      	adds	r7, #40	; 0x28
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	200000a8 	.word	0x200000a8
 800f6ec:	200007c0 	.word	0x200007c0
 800f6f0:	200000b4 	.word	0x200000b4
 800f6f4:	200007d4 	.word	0x200007d4
 800f6f8:	20000818 	.word	0x20000818

0800f6fc <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f702:	230a      	movs	r3, #10
 800f704:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f706:	463b      	mov	r3, r7
 800f708:	4618      	mov	r0, r3
 800f70a:	f005 fa53 	bl	8014bb4 <LoRaMacMlmeRequest>
 800f70e:	4603      	mov	r3, r0
 800f710:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	4a06      	ldr	r2, [pc, #24]	; (800f730 <LmHandlerDeviceTimeReq+0x34>)
 800f716:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f718:	7dfb      	ldrb	r3, [r7, #23]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f71e:	2300      	movs	r3, #0
 800f720:	e001      	b.n	800f726 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f722:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f726:	4618      	mov	r0, r3
 800f728:	3718      	adds	r7, #24
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
 800f72e:	bf00      	nop
 800f730:	20000818 	.word	0x20000818

0800f734 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f734:	b480      	push	{r7}
 800f736:	b083      	sub	sp, #12
 800f738:	af00      	add	r7, sp, #0
 800f73a:	4603      	mov	r3, r0
 800f73c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f73e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f742:	4618      	mov	r0, r3
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	bc80      	pop	{r7}
 800f74a:	4770      	bx	lr

0800f74c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b08e      	sub	sp, #56	; 0x38
 800f750:	af00      	add	r7, sp, #0
 800f752:	4603      	mov	r3, r0
 800f754:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f756:	2300      	movs	r3, #0
 800f758:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800f75c:	f001 fede 	bl	801151c <LoRaMacIsBusy>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f766:	f06f 0301 	mvn.w	r3, #1
 800f76a:	e071      	b.n	800f850 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800f76c:	f7ff feca 	bl	800f504 <LmHandlerJoinStatus>
 800f770:	4603      	mov	r3, r0
 800f772:	2b01      	cmp	r3, #1
 800f774:	d002      	beq.n	800f77c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f776:	f06f 0302 	mvn.w	r3, #2
 800f77a:	e069      	b.n	800f850 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f77c:	2300      	movs	r3, #0
 800f77e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f780:	f107 030c 	add.w	r3, r7, #12
 800f784:	4618      	mov	r0, r3
 800f786:	f004 fccb 	bl	8014120 <LoRaMacMibGetRequestConfirm>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d002      	beq.n	800f796 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f790:	f04f 33ff 	mov.w	r3, #4294967295
 800f794:	e05c      	b.n	800f850 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800f796:	7c3b      	ldrb	r3, [r7, #16]
 800f798:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800f79c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f7a0:	79fb      	ldrb	r3, [r7, #7]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d052      	beq.n	800f84c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800f7a6:	79fb      	ldrb	r3, [r7, #7]
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d028      	beq.n	800f7fe <LmHandlerRequestClass+0xb2>
 800f7ac:	2b02      	cmp	r3, #2
 800f7ae:	dc48      	bgt.n	800f842 <LmHandlerRequestClass+0xf6>
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d002      	beq.n	800f7ba <LmHandlerRequestClass+0x6e>
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d01e      	beq.n	800f7f6 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800f7b8:	e043      	b.n	800f842 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800f7ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d041      	beq.n	800f846 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800f7c2:	79fb      	ldrb	r3, [r7, #7]
 800f7c4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f7c6:	f107 030c 	add.w	r3, r7, #12
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f004 fe5e 	bl	801448c <LoRaMacMibSetRequestConfirm>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d10b      	bne.n	800f7ee <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f7d6:	4b20      	ldr	r3, [pc, #128]	; (800f858 <LmHandlerRequestClass+0x10c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d032      	beq.n	800f846 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f7e0:	4b1d      	ldr	r3, [pc, #116]	; (800f858 <LmHandlerRequestClass+0x10c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e6:	79fa      	ldrb	r2, [r7, #7]
 800f7e8:	4610      	mov	r0, r2
 800f7ea:	4798      	blx	r3
                break;
 800f7ec:	e02b      	b.n	800f846 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f7ee:	23ff      	movs	r3, #255	; 0xff
 800f7f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f7f4:	e027      	b.n	800f846 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f7f6:	23ff      	movs	r3, #255	; 0xff
 800f7f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f7fc:	e026      	b.n	800f84c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800f7fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f802:	2b00      	cmp	r3, #0
 800f804:	d003      	beq.n	800f80e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f806:	23ff      	movs	r3, #255	; 0xff
 800f808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f80c:	e01d      	b.n	800f84a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f812:	f107 030c 	add.w	r3, r7, #12
 800f816:	4618      	mov	r0, r3
 800f818:	f004 fe38 	bl	801448c <LoRaMacMibSetRequestConfirm>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10b      	bne.n	800f83a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f822:	4b0d      	ldr	r3, [pc, #52]	; (800f858 <LmHandlerRequestClass+0x10c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00e      	beq.n	800f84a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f82c:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <LmHandlerRequestClass+0x10c>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f832:	79fa      	ldrb	r2, [r7, #7]
 800f834:	4610      	mov	r0, r2
 800f836:	4798      	blx	r3
                break;
 800f838:	e007      	b.n	800f84a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f83a:	23ff      	movs	r3, #255	; 0xff
 800f83c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f840:	e003      	b.n	800f84a <LmHandlerRequestClass+0xfe>
                break;
 800f842:	bf00      	nop
 800f844:	e002      	b.n	800f84c <LmHandlerRequestClass+0x100>
                break;
 800f846:	bf00      	nop
 800f848:	e000      	b.n	800f84c <LmHandlerRequestClass+0x100>
                break;
 800f84a:	bf00      	nop
        }
    }
    return errorStatus;
 800f84c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f850:	4618      	mov	r0, r3
 800f852:	3738      	adds	r7, #56	; 0x38
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	200007ec 	.word	0x200007ec

0800f85c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b08c      	sub	sp, #48	; 0x30
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d102      	bne.n	800f870 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f86a:	f04f 33ff 	mov.w	r3, #4294967295
 800f86e:	e010      	b.n	800f892 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f870:	2300      	movs	r3, #0
 800f872:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f874:	f107 0308 	add.w	r3, r7, #8
 800f878:	4618      	mov	r0, r3
 800f87a:	f004 fc51 	bl	8014120 <LoRaMacMibGetRequestConfirm>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f884:	f04f 33ff 	mov.w	r3, #4294967295
 800f888:	e003      	b.n	800f892 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f88a:	7b3a      	ldrb	r2, [r7, #12]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3730      	adds	r7, #48	; 0x30
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b08c      	sub	sp, #48	; 0x30
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d102      	bne.n	800f8b0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ae:	e016      	b.n	800f8de <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800f8b0:	231f      	movs	r3, #31
 800f8b2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800f8b4:	f107 0308 	add.w	r3, r7, #8
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f004 fc31 	bl	8014120 <LoRaMacMibGetRequestConfirm>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c8:	e009      	b.n	800f8de <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800f8ca:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f993 2000 	ldrsb.w	r2, [r3]
 800f8d8:	4b03      	ldr	r3, [pc, #12]	; (800f8e8 <LmHandlerGetTxDatarate+0x4c>)
 800f8da:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3730      	adds	r7, #48	; 0x30
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
 800f8e6:	bf00      	nop
 800f8e8:	200007d4 	.word	0x200007d4

0800f8ec <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08c      	sub	sp, #48	; 0x30
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800f8f4:	2322      	movs	r3, #34	; 0x22
 800f8f6:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f8fc:	f107 0308 	add.w	r3, r7, #8
 800f900:	4618      	mov	r0, r3
 800f902:	f004 fdc3 	bl	801448c <LoRaMacMibSetRequestConfirm>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800f90c:	f04f 33ff 	mov.w	r3, #4294967295
 800f910:	e000      	b.n	800f914 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3730      	adds	r7, #48	; 0x30
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800f924:	4b18      	ldr	r3, [pc, #96]	; (800f988 <McpsConfirm+0x6c>)
 800f926:	2201      	movs	r2, #1
 800f928:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	785a      	ldrb	r2, [r3, #1]
 800f92e:	4b16      	ldr	r3, [pc, #88]	; (800f988 <McpsConfirm+0x6c>)
 800f930:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	789b      	ldrb	r3, [r3, #2]
 800f936:	b25a      	sxtb	r2, r3
 800f938:	4b13      	ldr	r3, [pc, #76]	; (800f988 <McpsConfirm+0x6c>)
 800f93a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	4a11      	ldr	r2, [pc, #68]	; (800f988 <McpsConfirm+0x6c>)
 800f942:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f94a:	4b0f      	ldr	r3, [pc, #60]	; (800f988 <McpsConfirm+0x6c>)
 800f94c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	691b      	ldr	r3, [r3, #16]
 800f952:	b2da      	uxtb	r2, r3
 800f954:	4b0c      	ldr	r3, [pc, #48]	; (800f988 <McpsConfirm+0x6c>)
 800f956:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	791b      	ldrb	r3, [r3, #4]
 800f95c:	461a      	mov	r2, r3
 800f95e:	4b0a      	ldr	r3, [pc, #40]	; (800f988 <McpsConfirm+0x6c>)
 800f960:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800f962:	4b0a      	ldr	r3, [pc, #40]	; (800f98c <McpsConfirm+0x70>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d004      	beq.n	800f976 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f96c:	4b07      	ldr	r3, [pc, #28]	; (800f98c <McpsConfirm+0x70>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f972:	4805      	ldr	r0, [pc, #20]	; (800f988 <McpsConfirm+0x6c>)
 800f974:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800f976:	6879      	ldr	r1, [r7, #4]
 800f978:	2000      	movs	r0, #0
 800f97a:	f000 f9eb 	bl	800fd54 <LmHandlerPackagesNotify>
}
 800f97e:	bf00      	nop
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	200000b4 	.word	0x200000b4
 800f98c:	200007ec 	.word	0x200007ec

0800f990 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b088      	sub	sp, #32
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800f99a:	2300      	movs	r3, #0
 800f99c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800f99e:	4b32      	ldr	r3, [pc, #200]	; (800fa68 <McpsIndication+0xd8>)
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	785a      	ldrb	r2, [r3, #1]
 800f9a8:	4b2f      	ldr	r3, [pc, #188]	; (800fa68 <McpsIndication+0xd8>)
 800f9aa:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800f9ac:	4b2e      	ldr	r3, [pc, #184]	; (800fa68 <McpsIndication+0xd8>)
 800f9ae:	785b      	ldrb	r3, [r3, #1]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d155      	bne.n	800fa60 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	791b      	ldrb	r3, [r3, #4]
 800f9b8:	b25a      	sxtb	r2, r3
 800f9ba:	4b2b      	ldr	r3, [pc, #172]	; (800fa68 <McpsIndication+0xd8>)
 800f9bc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9c4:	b25a      	sxtb	r2, r3
 800f9c6:	4b28      	ldr	r3, [pc, #160]	; (800fa68 <McpsIndication+0xd8>)
 800f9c8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f9d0:	4b25      	ldr	r3, [pc, #148]	; (800fa68 <McpsIndication+0xd8>)
 800f9d2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	78da      	ldrb	r2, [r3, #3]
 800f9d8:	4b23      	ldr	r3, [pc, #140]	; (800fa68 <McpsIndication+0xd8>)
 800f9da:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	691b      	ldr	r3, [r3, #16]
 800f9e0:	4a21      	ldr	r2, [pc, #132]	; (800fa68 <McpsIndication+0xd8>)
 800f9e2:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	78db      	ldrb	r3, [r3, #3]
 800f9e8:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	7b1b      	ldrb	r3, [r3, #12]
 800f9ee:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	689b      	ldr	r3, [r3, #8]
 800f9f4:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800f9f6:	4b1d      	ldr	r3, [pc, #116]	; (800fa6c <McpsIndication+0xdc>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d007      	beq.n	800fa10 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800fa00:	4b1a      	ldr	r3, [pc, #104]	; (800fa6c <McpsIndication+0xdc>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa06:	f107 0218 	add.w	r2, r7, #24
 800fa0a:	4917      	ldr	r1, [pc, #92]	; (800fa68 <McpsIndication+0xd8>)
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800fa10:	4b16      	ldr	r3, [pc, #88]	; (800fa6c <McpsIndication+0xdc>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d007      	beq.n	800fa2a <McpsIndication+0x9a>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	7e1b      	ldrb	r3, [r3, #24]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d003      	beq.n	800fa2a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fa22:	4b12      	ldr	r3, [pc, #72]	; (800fa6c <McpsIndication+0xdc>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa28:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fa2a:	6879      	ldr	r1, [r7, #4]
 800fa2c:	2001      	movs	r0, #1
 800fa2e:	f000 f991 	bl	800fd54 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800fa32:	f107 0317 	add.w	r3, r7, #23
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7ff ff10 	bl	800f85c <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	795b      	ldrb	r3, [r3, #5]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00e      	beq.n	800fa62 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800fa44:	2300      	movs	r3, #0
 800fa46:	733b      	strb	r3, [r7, #12]
 800fa48:	2300      	movs	r3, #0
 800fa4a:	737b      	strb	r3, [r7, #13]
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800fa50:	f107 030c 	add.w	r3, r7, #12
 800fa54:	2201      	movs	r2, #1
 800fa56:	2100      	movs	r1, #0
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff fd6f 	bl	800f53c <LmHandlerSend>
 800fa5e:	e000      	b.n	800fa62 <McpsIndication+0xd2>
        return;
 800fa60:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800fa62:	3720      	adds	r7, #32
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	200000d0 	.word	0x200000d0
 800fa6c:	200007ec 	.word	0x200007ec

0800fa70 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08c      	sub	sp, #48	; 0x30
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fa78:	4b4a      	ldr	r3, [pc, #296]	; (800fba4 <MlmeConfirm+0x134>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	785a      	ldrb	r2, [r3, #1]
 800fa82:	4b48      	ldr	r3, [pc, #288]	; (800fba4 <MlmeConfirm+0x134>)
 800fa84:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800fa86:	4b48      	ldr	r3, [pc, #288]	; (800fba8 <MlmeConfirm+0x138>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d004      	beq.n	800fa9a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fa90:	4b45      	ldr	r3, [pc, #276]	; (800fba8 <MlmeConfirm+0x138>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa96:	4843      	ldr	r0, [pc, #268]	; (800fba4 <MlmeConfirm+0x134>)
 800fa98:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fa9a:	6879      	ldr	r1, [r7, #4]
 800fa9c:	2002      	movs	r0, #2
 800fa9e:	f000 f959 	bl	800fd54 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	3b01      	subs	r3, #1
 800faa8:	2b0c      	cmp	r3, #12
 800faaa:	d874      	bhi.n	800fb96 <MlmeConfirm+0x126>
 800faac:	a201      	add	r2, pc, #4	; (adr r2, 800fab4 <MlmeConfirm+0x44>)
 800faae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab2:	bf00      	nop
 800fab4:	0800fae9 	.word	0x0800fae9
 800fab8:	0800fb97 	.word	0x0800fb97
 800fabc:	0800fb97 	.word	0x0800fb97
 800fac0:	0800fb97 	.word	0x0800fb97
 800fac4:	0800fb65 	.word	0x0800fb65
 800fac8:	0800fb97 	.word	0x0800fb97
 800facc:	0800fb97 	.word	0x0800fb97
 800fad0:	0800fb97 	.word	0x0800fb97
 800fad4:	0800fb97 	.word	0x0800fb97
 800fad8:	0800fb97 	.word	0x0800fb97
 800fadc:	0800fb97 	.word	0x0800fb97
 800fae0:	0800fb7d 	.word	0x0800fb7d
 800fae4:	0800fb97 	.word	0x0800fb97
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800fae8:	2306      	movs	r3, #6
 800faea:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800faec:	f107 0308 	add.w	r3, r7, #8
 800faf0:	4618      	mov	r0, r3
 800faf2:	f004 fb15 	bl	8014120 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800faf6:	4b2d      	ldr	r3, [pc, #180]	; (800fbac <MlmeConfirm+0x13c>)
 800faf8:	79db      	ldrb	r3, [r3, #7]
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	4611      	mov	r1, r2
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff faf6 	bl	800f0f0 <SecureElementSetDevAddr>
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d102      	bne.n	800fb10 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	4a28      	ldr	r2, [pc, #160]	; (800fbb0 <MlmeConfirm+0x140>)
 800fb0e:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fb10:	4828      	ldr	r0, [pc, #160]	; (800fbb4 <MlmeConfirm+0x144>)
 800fb12:	f7ff fec3 	bl	800f89c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800fb16:	4828      	ldr	r0, [pc, #160]	; (800fbb8 <MlmeConfirm+0x148>)
 800fb18:	f000 fa4e 	bl	800ffb8 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fb1c:	4b21      	ldr	r3, [pc, #132]	; (800fba4 <MlmeConfirm+0x134>)
 800fb1e:	785b      	ldrb	r3, [r3, #1]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d108      	bne.n	800fb36 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fb24:	4b21      	ldr	r3, [pc, #132]	; (800fbac <MlmeConfirm+0x13c>)
 800fb26:	2200      	movs	r2, #0
 800fb28:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fb2a:	4b24      	ldr	r3, [pc, #144]	; (800fbbc <MlmeConfirm+0x14c>)
 800fb2c:	785b      	ldrb	r3, [r3, #1]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7ff fe0c 	bl	800f74c <LmHandlerRequestClass>
 800fb34:	e002      	b.n	800fb3c <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fb36:	4b1d      	ldr	r3, [pc, #116]	; (800fbac <MlmeConfirm+0x13c>)
 800fb38:	22ff      	movs	r2, #255	; 0xff
 800fb3a:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fb3c:	4b1a      	ldr	r3, [pc, #104]	; (800fba8 <MlmeConfirm+0x138>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d004      	beq.n	800fb50 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fb46:	4b18      	ldr	r3, [pc, #96]	; (800fba8 <MlmeConfirm+0x138>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4c:	4817      	ldr	r0, [pc, #92]	; (800fbac <MlmeConfirm+0x13c>)
 800fb4e:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fb50:	4b14      	ldr	r3, [pc, #80]	; (800fba4 <MlmeConfirm+0x134>)
 800fb52:	785b      	ldrb	r3, [r3, #1]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d120      	bne.n	800fb9a <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800fb58:	4b14      	ldr	r3, [pc, #80]	; (800fbac <MlmeConfirm+0x13c>)
 800fb5a:	79db      	ldrb	r3, [r3, #7]
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff f859 	bl	800ec14 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800fb62:	e01a      	b.n	800fb9a <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800fb64:	4b16      	ldr	r3, [pc, #88]	; (800fbc0 <MlmeConfirm+0x150>)
 800fb66:	2201      	movs	r2, #1
 800fb68:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	7a1a      	ldrb	r2, [r3, #8]
 800fb6e:	4b14      	ldr	r3, [pc, #80]	; (800fbc0 <MlmeConfirm+0x150>)
 800fb70:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	7a5a      	ldrb	r2, [r3, #9]
 800fb76:	4b12      	ldr	r3, [pc, #72]	; (800fbc0 <MlmeConfirm+0x150>)
 800fb78:	74da      	strb	r2, [r3, #19]
            }
            break;
 800fb7a:	e00f      	b.n	800fb9c <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	785b      	ldrb	r3, [r3, #1]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d105      	bne.n	800fb90 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800fb84:	4b0d      	ldr	r3, [pc, #52]	; (800fbbc <MlmeConfirm+0x14c>)
 800fb86:	7c1b      	ldrb	r3, [r3, #16]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff fdd3 	bl	800f734 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800fb8e:	e005      	b.n	800fb9c <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800fb90:	f7ff fdb4 	bl	800f6fc <LmHandlerDeviceTimeReq>
            break;
 800fb94:	e002      	b.n	800fb9c <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fb96:	bf00      	nop
 800fb98:	e000      	b.n	800fb9c <MlmeConfirm+0x12c>
            break;
 800fb9a:	bf00      	nop
    }
}
 800fb9c:	bf00      	nop
 800fb9e:	3730      	adds	r7, #48	; 0x30
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	200000b4 	.word	0x200000b4
 800fba8:	200007ec 	.word	0x200007ec
 800fbac:	200000a8 	.word	0x200000a8
 800fbb0:	200007a8 	.word	0x200007a8
 800fbb4:	200000ac 	.word	0x200000ac
 800fbb8:	200000ad 	.word	0x200000ad
 800fbbc:	200007d4 	.word	0x200007d4
 800fbc0:	200000d0 	.word	0x200000d0

0800fbc4 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b082      	sub	sp, #8
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fbce:	4b20      	ldr	r3, [pc, #128]	; (800fc50 <MlmeIndication+0x8c>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	785a      	ldrb	r2, [r3, #1]
 800fbd8:	4b1d      	ldr	r3, [pc, #116]	; (800fc50 <MlmeIndication+0x8c>)
 800fbda:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	789b      	ldrb	r3, [r3, #2]
 800fbe0:	b25a      	sxtb	r2, r3
 800fbe2:	4b1b      	ldr	r3, [pc, #108]	; (800fc50 <MlmeIndication+0x8c>)
 800fbe4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbec:	b25a      	sxtb	r2, r3
 800fbee:	4b18      	ldr	r3, [pc, #96]	; (800fc50 <MlmeIndication+0x8c>)
 800fbf0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fbf8:	4b15      	ldr	r3, [pc, #84]	; (800fc50 <MlmeIndication+0x8c>)
 800fbfa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	78da      	ldrb	r2, [r3, #3]
 800fc00:	4b13      	ldr	r3, [pc, #76]	; (800fc50 <MlmeIndication+0x8c>)
 800fc02:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	4a11      	ldr	r2, [pc, #68]	; (800fc50 <MlmeIndication+0x8c>)
 800fc0a:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800fc0c:	4b11      	ldr	r3, [pc, #68]	; (800fc54 <MlmeIndication+0x90>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d00d      	beq.n	800fc32 <MlmeIndication+0x6e>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	2b0b      	cmp	r3, #11
 800fc1c:	d009      	beq.n	800fc32 <MlmeIndication+0x6e>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b0f      	cmp	r3, #15
 800fc24:	d005      	beq.n	800fc32 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fc26:	4b0b      	ldr	r3, [pc, #44]	; (800fc54 <MlmeIndication+0x90>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc2c:	4908      	ldr	r1, [pc, #32]	; (800fc50 <MlmeIndication+0x8c>)
 800fc2e:	2000      	movs	r0, #0
 800fc30:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800fc32:	6879      	ldr	r1, [r7, #4]
 800fc34:	2003      	movs	r0, #3
 800fc36:	f000 f88d 	bl	800fd54 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	2b0b      	cmp	r3, #11
 800fc40:	d001      	beq.n	800fc46 <MlmeIndication+0x82>
 800fc42:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fc44:	e000      	b.n	800fc48 <MlmeIndication+0x84>
            break;
 800fc46:	bf00      	nop
    }
}
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	200000d0 	.word	0x200000d0
 800fc54:	200007ec 	.word	0x200007ec

0800fc58 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	4603      	mov	r3, r0
 800fc60:	6039      	str	r1, [r7, #0]
 800fc62:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fc64:	2300      	movs	r3, #0
 800fc66:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d104      	bne.n	800fc78 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800fc6e:	f000 f9dd 	bl	801002c <LmhpCompliancePackageFactory>
 800fc72:	4603      	mov	r3, r0
 800fc74:	60fb      	str	r3, [r7, #12]
                break;
 800fc76:	e00d      	b.n	800fc94 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800fc78:	f107 020c 	add.w	r2, r7, #12
 800fc7c:	79fb      	ldrb	r3, [r7, #7]
 800fc7e:	4611      	mov	r1, r2
 800fc80:	4618      	mov	r0, r3
 800fc82:	f000 fce9 	bl	8010658 <LmhpPackagesRegister>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d002      	beq.n	800fc92 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800fc8c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc90:	e031      	b.n	800fcf6 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800fc92:	bf00      	nop
            }
    }
    if( package != NULL )
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d02b      	beq.n	800fcf2 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	4918      	ldr	r1, [pc, #96]	; (800fd00 <LmHandlerPackageRegister+0xa8>)
 800fca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	4a16      	ldr	r2, [pc, #88]	; (800fd00 <LmHandlerPackageRegister+0xa8>)
 800fca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcac:	4a15      	ldr	r2, [pc, #84]	; (800fd04 <LmHandlerPackageRegister+0xac>)
 800fcae:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	4a13      	ldr	r2, [pc, #76]	; (800fd00 <LmHandlerPackageRegister+0xa8>)
 800fcb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcb8:	4a13      	ldr	r2, [pc, #76]	; (800fd08 <LmHandlerPackageRegister+0xb0>)
 800fcba:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fcbc:	79fb      	ldrb	r3, [r7, #7]
 800fcbe:	4a10      	ldr	r2, [pc, #64]	; (800fd00 <LmHandlerPackageRegister+0xa8>)
 800fcc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcc4:	4a11      	ldr	r2, [pc, #68]	; (800fd0c <LmHandlerPackageRegister+0xb4>)
 800fcc6:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fcc8:	4b11      	ldr	r3, [pc, #68]	; (800fd10 <LmHandlerPackageRegister+0xb8>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	79fb      	ldrb	r3, [r7, #7]
 800fcce:	490c      	ldr	r1, [pc, #48]	; (800fd00 <LmHandlerPackageRegister+0xa8>)
 800fcd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fcd4:	6992      	ldr	r2, [r2, #24]
 800fcd6:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fcd8:	79fb      	ldrb	r3, [r7, #7]
 800fcda:	4a09      	ldr	r2, [pc, #36]	; (800fd00 <LmHandlerPackageRegister+0xa8>)
 800fcdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	4a0c      	ldr	r2, [pc, #48]	; (800fd14 <LmHandlerPackageRegister+0xbc>)
 800fce4:	6851      	ldr	r1, [r2, #4]
 800fce6:	4a0b      	ldr	r2, [pc, #44]	; (800fd14 <LmHandlerPackageRegister+0xbc>)
 800fce8:	7852      	ldrb	r2, [r2, #1]
 800fcea:	6838      	ldr	r0, [r7, #0]
 800fcec:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e001      	b.n	800fcf6 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	200007c0 	.word	0x200007c0
 800fd04:	0800f3bd 	.word	0x0800f3bd
 800fd08:	0800f53d 	.word	0x0800f53d
 800fd0c:	0800f6fd 	.word	0x0800f6fd
 800fd10:	200007ec 	.word	0x200007ec
 800fd14:	200000e4 	.word	0x200000e4

0800fd18 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	4603      	mov	r3, r0
 800fd20:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fd22:	79fb      	ldrb	r3, [r7, #7]
 800fd24:	2b04      	cmp	r3, #4
 800fd26:	d80e      	bhi.n	800fd46 <LmHandlerPackageIsInitialized+0x2e>
 800fd28:	79fb      	ldrb	r3, [r7, #7]
 800fd2a:	4a09      	ldr	r2, [pc, #36]	; (800fd50 <LmHandlerPackageIsInitialized+0x38>)
 800fd2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d007      	beq.n	800fd46 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	4a05      	ldr	r2, [pc, #20]	; (800fd50 <LmHandlerPackageIsInitialized+0x38>)
 800fd3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	4798      	blx	r3
 800fd42:	4603      	mov	r3, r0
 800fd44:	e000      	b.n	800fd48 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fd46:	2300      	movs	r3, #0
    }
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	200007c0 	.word	0x200007c0

0800fd54 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	6039      	str	r1, [r7, #0]
 800fd5e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fd60:	2300      	movs	r3, #0
 800fd62:	73fb      	strb	r3, [r7, #15]
 800fd64:	e07c      	b.n	800fe60 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800fd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd6a:	4a42      	ldr	r2, [pc, #264]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d06f      	beq.n	800fe54 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	2b03      	cmp	r3, #3
 800fd78:	d863      	bhi.n	800fe42 <LmHandlerPackagesNotify+0xee>
 800fd7a:	a201      	add	r2, pc, #4	; (adr r2, 800fd80 <LmHandlerPackagesNotify+0x2c>)
 800fd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd80:	0800fd91 	.word	0x0800fd91
 800fd84:	0800fdb3 	.word	0x0800fdb3
 800fd88:	0800fdff 	.word	0x0800fdff
 800fd8c:	0800fe21 	.word	0x0800fe21
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd94:	4a37      	ldr	r2, [pc, #220]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fd96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d052      	beq.n	800fe46 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800fda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fda4:	4a33      	ldr	r2, [pc, #204]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fda6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdaa:	69db      	ldr	r3, [r3, #28]
 800fdac:	6838      	ldr	r0, [r7, #0]
 800fdae:	4798      	blx	r3
                        }
                        break;
 800fdb0:	e049      	b.n	800fe46 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800fdb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdb6:	4a2f      	ldr	r2, [pc, #188]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdbc:	6a1b      	ldr	r3, [r3, #32]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d043      	beq.n	800fe4a <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800fdc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdc6:	4a2b      	ldr	r2, [pc, #172]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdcc:	781a      	ldrb	r2, [r3, #0]
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d00a      	beq.n	800fdec <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800fdd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d135      	bne.n	800fe4a <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800fdde:	4b25      	ldr	r3, [pc, #148]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	4798      	blx	r3
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d02e      	beq.n	800fe4a <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800fdec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf0:	4a20      	ldr	r2, [pc, #128]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fdf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf6:	6a1b      	ldr	r3, [r3, #32]
 800fdf8:	6838      	ldr	r0, [r7, #0]
 800fdfa:	4798      	blx	r3
                        }
                        break;
 800fdfc:	e025      	b.n	800fe4a <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800fdfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe02:	4a1c      	ldr	r2, [pc, #112]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fe04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d01f      	beq.n	800fe4e <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800fe0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe12:	4a18      	ldr	r2, [pc, #96]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fe14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1a:	6838      	ldr	r0, [r7, #0]
 800fe1c:	4798      	blx	r3
                        }
                        break;
 800fe1e:	e016      	b.n	800fe4e <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800fe20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe24:	4a13      	ldr	r2, [pc, #76]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fe26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d010      	beq.n	800fe52 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800fe30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe34:	4a0f      	ldr	r2, [pc, #60]	; (800fe74 <LmHandlerPackagesNotify+0x120>)
 800fe36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3c:	6838      	ldr	r0, [r7, #0]
 800fe3e:	4798      	blx	r3
                        }
                        break;
 800fe40:	e007      	b.n	800fe52 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800fe42:	bf00      	nop
 800fe44:	e006      	b.n	800fe54 <LmHandlerPackagesNotify+0x100>
                        break;
 800fe46:	bf00      	nop
 800fe48:	e004      	b.n	800fe54 <LmHandlerPackagesNotify+0x100>
                        break;
 800fe4a:	bf00      	nop
 800fe4c:	e002      	b.n	800fe54 <LmHandlerPackagesNotify+0x100>
                        break;
 800fe4e:	bf00      	nop
 800fe50:	e000      	b.n	800fe54 <LmHandlerPackagesNotify+0x100>
                        break;
 800fe52:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fe54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	73fb      	strb	r3, [r7, #15]
 800fe60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe64:	2b04      	cmp	r3, #4
 800fe66:	f77f af7e 	ble.w	800fd66 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800fe6a:	bf00      	nop
 800fe6c:	bf00      	nop
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	200007c0 	.word	0x200007c0

0800fe78 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fe7e:	2300      	movs	r3, #0
 800fe80:	71fb      	strb	r3, [r7, #7]
 800fe82:	e01c      	b.n	800febe <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800fe84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe88:	4a11      	ldr	r2, [pc, #68]	; (800fed0 <LmHandlerPackageIsTxPending+0x58>)
 800fe8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00f      	beq.n	800feb2 <LmHandlerPackageIsTxPending+0x3a>
 800fe92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00b      	beq.n	800feb2 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800fe9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe9e:	4a0c      	ldr	r2, [pc, #48]	; (800fed0 <LmHandlerPackageIsTxPending+0x58>)
 800fea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	4798      	blx	r3
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d001      	beq.n	800feb2 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800feae:	2301      	movs	r3, #1
 800feb0:	e00a      	b.n	800fec8 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800feb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	3301      	adds	r3, #1
 800feba:	b2db      	uxtb	r3, r3
 800febc:	71fb      	strb	r3, [r7, #7]
 800febe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fec2:	2b04      	cmp	r3, #4
 800fec4:	ddde      	ble.n	800fe84 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	200007c0 	.word	0x200007c0

0800fed4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800feda:	2300      	movs	r3, #0
 800fedc:	71fb      	strb	r3, [r7, #7]
 800fede:	e022      	b.n	800ff26 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fee4:	4a14      	ldr	r2, [pc, #80]	; (800ff38 <LmHandlerPackagesProcess+0x64>)
 800fee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d015      	beq.n	800ff1a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800feee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fef2:	4a11      	ldr	r2, [pc, #68]	; (800ff38 <LmHandlerPackagesProcess+0x64>)
 800fef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fef8:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00d      	beq.n	800ff1a <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7ff ff09 	bl	800fd18 <LmHandlerPackageIsInitialized>
 800ff06:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d006      	beq.n	800ff1a <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ff0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff10:	4a09      	ldr	r2, [pc, #36]	; (800ff38 <LmHandlerPackagesProcess+0x64>)
 800ff12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff16:	695b      	ldr	r3, [r3, #20]
 800ff18:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff1e:	b2db      	uxtb	r3, r3
 800ff20:	3301      	adds	r3, #1
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	71fb      	strb	r3, [r7, #7]
 800ff26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff2a:	2b04      	cmp	r3, #4
 800ff2c:	ddd8      	ble.n	800fee0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ff2e:	bf00      	nop
 800ff30:	bf00      	nop
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}
 800ff38:	200007c0 	.word	0x200007c0

0800ff3c <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	4603      	mov	r3, r0
 800ff44:	6039      	str	r1, [r7, #0]
 800ff46:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d102      	bne.n	800ff54 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ff4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ff52:	e00e      	b.n	800ff72 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800ff54:	79fb      	ldrb	r3, [r7, #7]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d002      	beq.n	800ff60 <LmHandlerGetVersion+0x24>
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	d004      	beq.n	800ff68 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800ff5e:	e007      	b.n	800ff70 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	4a06      	ldr	r2, [pc, #24]	; (800ff7c <LmHandlerGetVersion+0x40>)
 800ff64:	601a      	str	r2, [r3, #0]
            break;
 800ff66:	e003      	b.n	800ff70 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	4a05      	ldr	r2, [pc, #20]	; (800ff80 <LmHandlerGetVersion+0x44>)
 800ff6c:	601a      	str	r2, [r3, #0]
            break;
 800ff6e:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ff70:	2300      	movs	r3, #0
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	370c      	adds	r7, #12
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bc80      	pop	{r7}
 800ff7a:	4770      	bx	lr
 800ff7c:	01000300 	.word	0x01000300
 800ff80:	01010003 	.word	0x01010003

0800ff84 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800ff88:	f005 f882 	bl	8015090 <LoRaMacDeInitialization>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d101      	bne.n	800ff96 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ff92:	2300      	movs	r3, #0
 800ff94:	e001      	b.n	800ff9a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ff96:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800ff9e:	b580      	push	{r7, lr}
 800ffa0:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800ffa2:	f004 f80d 	bl	8013fc0 <LoRaMacHalt>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d101      	bne.n	800ffb0 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ffac:	2300      	movs	r3, #0
 800ffae:	e001      	b.n	800ffb4 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ffb0:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b08c      	sub	sp, #48	; 0x30
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d102      	bne.n	800ffcc <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800ffc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ffca:	e016      	b.n	800fffa <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ffcc:	2320      	movs	r3, #32
 800ffce:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ffd0:	f107 0308 	add.w	r3, r7, #8
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f004 f8a3 	bl	8014120 <LoRaMacMibGetRequestConfirm>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d002      	beq.n	800ffe6 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	e009      	b.n	800fffa <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800ffe6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f993 2000 	ldrsb.w	r2, [r3]
 800fff4:	4b03      	ldr	r3, [pc, #12]	; (8010004 <LmHandlerGetTxPower+0x4c>)
 800fff6:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3730      	adds	r7, #48	; 0x30
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	200007d4 	.word	0x200007d4

08010008 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010008:	b480      	push	{r7}
 801000a:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 801000c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010010:	4618      	mov	r0, r3
 8010012:	46bd      	mov	sp, r7
 8010014:	bc80      	pop	{r7}
 8010016:	4770      	bx	lr

08010018 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
 801001e:	4603      	mov	r3, r0
 8010020:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8010022:	bf00      	nop
 8010024:	370c      	adds	r7, #12
 8010026:	46bd      	mov	sp, r7
 8010028:	bc80      	pop	{r7}
 801002a:	4770      	bx	lr

0801002c <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010030:	4b02      	ldr	r3, [pc, #8]	; (801003c <LmhpCompliancePackageFactory+0x10>)
}
 8010032:	4618      	mov	r0, r3
 8010034:	46bd      	mov	sp, r7
 8010036:	bc80      	pop	{r7}
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop
 801003c:	200000ec 	.word	0x200000ec

08010040 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	4613      	mov	r3, r2
 801004c:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00f      	beq.n	8010074 <LmhpComplianceInit+0x34>
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00c      	beq.n	8010074 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 801005a:	4a0c      	ldr	r2, [pc, #48]	; (801008c <LmhpComplianceInit+0x4c>)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8010060:	4a0b      	ldr	r2, [pc, #44]	; (8010090 <LmhpComplianceInit+0x50>)
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8010066:	4a0a      	ldr	r2, [pc, #40]	; (8010090 <LmhpComplianceInit+0x50>)
 8010068:	79fb      	ldrb	r3, [r7, #7]
 801006a:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 801006c:	4b08      	ldr	r3, [pc, #32]	; (8010090 <LmhpComplianceInit+0x50>)
 801006e:	2201      	movs	r2, #1
 8010070:	701a      	strb	r2, [r3, #0]
 8010072:	e006      	b.n	8010082 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010074:	4b05      	ldr	r3, [pc, #20]	; (801008c <LmhpComplianceInit+0x4c>)
 8010076:	2200      	movs	r2, #0
 8010078:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 801007a:	4b05      	ldr	r3, [pc, #20]	; (8010090 <LmhpComplianceInit+0x50>)
 801007c:	2200      	movs	r2, #0
 801007e:	701a      	strb	r2, [r3, #0]
    }
}
 8010080:	bf00      	nop
 8010082:	bf00      	nop
 8010084:	3714      	adds	r7, #20
 8010086:	46bd      	mov	sp, r7
 8010088:	bc80      	pop	{r7}
 801008a:	4770      	bx	lr
 801008c:	2000093c 	.word	0x2000093c
 8010090:	20000928 	.word	0x20000928

08010094 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010094:	b480      	push	{r7}
 8010096:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010098:	4b02      	ldr	r3, [pc, #8]	; (80100a4 <LmhpComplianceIsInitialized+0x10>)
 801009a:	781b      	ldrb	r3, [r3, #0]
}
 801009c:	4618      	mov	r0, r3
 801009e:	46bd      	mov	sp, r7
 80100a0:	bc80      	pop	{r7}
 80100a2:	4770      	bx	lr
 80100a4:	20000928 	.word	0x20000928

080100a8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80100ac:	4b07      	ldr	r3, [pc, #28]	; (80100cc <LmhpComplianceIsRunning+0x24>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	f083 0301 	eor.w	r3, r3, #1
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80100ba:	2300      	movs	r3, #0
 80100bc:	e001      	b.n	80100c2 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80100be:	4b03      	ldr	r3, [pc, #12]	; (80100cc <LmhpComplianceIsRunning+0x24>)
 80100c0:	785b      	ldrb	r3, [r3, #1]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bc80      	pop	{r7}
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	20000928 	.word	0x20000928

080100d0 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80100d8:	4b0f      	ldr	r3, [pc, #60]	; (8010118 <LmhpComplianceOnMcpsConfirm+0x48>)
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	f083 0301 	eor.w	r3, r3, #1
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d112      	bne.n	801010c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 80100e6:	4b0c      	ldr	r3, [pc, #48]	; (8010118 <LmhpComplianceOnMcpsConfirm+0x48>)
 80100e8:	785b      	ldrb	r3, [r3, #1]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d00f      	beq.n	801010e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d10b      	bne.n	801010e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d007      	beq.n	801010e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80100fe:	4b06      	ldr	r3, [pc, #24]	; (8010118 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	3301      	adds	r3, #1
 8010104:	b29a      	uxth	r2, r3
 8010106:	4b04      	ldr	r3, [pc, #16]	; (8010118 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010108:	819a      	strh	r2, [r3, #12]
 801010a:	e000      	b.n	801010e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 801010c:	bf00      	nop
    }
}
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	bc80      	pop	{r7}
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	20000928 	.word	0x20000928

0801011c <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010124:	4b12      	ldr	r3, [pc, #72]	; (8010170 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	f083 0301 	eor.w	r3, r3, #1
 801012c:	b2db      	uxtb	r3, r3
 801012e:	2b00      	cmp	r3, #0
 8010130:	d116      	bne.n	8010160 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010132:	4b0f      	ldr	r3, [pc, #60]	; (8010170 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010134:	785b      	ldrb	r3, [r3, #1]
 8010136:	f083 0301 	eor.w	r3, r3, #1
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d111      	bne.n	8010164 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	781b      	ldrb	r3, [r3, #0]
 8010144:	2b05      	cmp	r3, #5
 8010146:	d10e      	bne.n	8010166 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010148:	4b09      	ldr	r3, [pc, #36]	; (8010170 <LmhpComplianceOnMlmeConfirm+0x54>)
 801014a:	2201      	movs	r2, #1
 801014c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	7a1a      	ldrb	r2, [r3, #8]
 8010152:	4b07      	ldr	r3, [pc, #28]	; (8010170 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010154:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	7a5a      	ldrb	r2, [r3, #9]
 801015a:	4b05      	ldr	r3, [pc, #20]	; (8010170 <LmhpComplianceOnMlmeConfirm+0x54>)
 801015c:	741a      	strb	r2, [r3, #16]
 801015e:	e002      	b.n	8010166 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010160:	bf00      	nop
 8010162:	e000      	b.n	8010166 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010164:	bf00      	nop
    }
}
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	bc80      	pop	{r7}
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	20000928 	.word	0x20000928

08010174 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 801017a:	4b36      	ldr	r3, [pc, #216]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f083 0301 	eor.w	r3, r3, #1
 8010182:	b2db      	uxtb	r3, r3
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010188:	f04f 33ff 	mov.w	r3, #4294967295
 801018c:	e05e      	b.n	801024c <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 801018e:	4b31      	ldr	r3, [pc, #196]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 8010190:	785b      	ldrb	r3, [r3, #1]
 8010192:	f083 0301 	eor.w	r3, r3, #1
 8010196:	b2db      	uxtb	r3, r3
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801019c:	2300      	movs	r3, #0
 801019e:	e055      	b.n	801024c <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 80101a0:	4b2c      	ldr	r3, [pc, #176]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101a2:	7b9b      	ldrb	r3, [r3, #14]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d019      	beq.n	80101dc <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80101a8:	4b2a      	ldr	r3, [pc, #168]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101aa:	2200      	movs	r2, #0
 80101ac:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80101ae:	4b29      	ldr	r3, [pc, #164]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101b0:	2203      	movs	r2, #3
 80101b2:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80101b4:	4b27      	ldr	r3, [pc, #156]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	2205      	movs	r2, #5
 80101ba:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80101bc:	4b25      	ldr	r3, [pc, #148]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	3301      	adds	r3, #1
 80101c2:	4a24      	ldr	r2, [pc, #144]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101c4:	7bd2      	ldrb	r2, [r2, #15]
 80101c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80101c8:	4b22      	ldr	r3, [pc, #136]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	3302      	adds	r3, #2
 80101ce:	4a21      	ldr	r2, [pc, #132]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101d0:	7c12      	ldrb	r2, [r2, #16]
 80101d2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80101d4:	4b1f      	ldr	r3, [pc, #124]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101d6:	2201      	movs	r2, #1
 80101d8:	709a      	strb	r2, [r3, #2]
 80101da:	e01c      	b.n	8010216 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80101dc:	4b1d      	ldr	r3, [pc, #116]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101de:	789b      	ldrb	r3, [r3, #2]
 80101e0:	2b01      	cmp	r3, #1
 80101e2:	d005      	beq.n	80101f0 <LmhpComplianceTxProcess+0x7c>
 80101e4:	2b04      	cmp	r3, #4
 80101e6:	d116      	bne.n	8010216 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 80101e8:	4b1a      	ldr	r3, [pc, #104]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101ea:	2201      	movs	r2, #1
 80101ec:	709a      	strb	r2, [r3, #2]
                break;
 80101ee:	e012      	b.n	8010216 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 80101f0:	4b18      	ldr	r3, [pc, #96]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101f2:	2202      	movs	r2, #2
 80101f4:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80101f6:	4b17      	ldr	r3, [pc, #92]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 80101f8:	899b      	ldrh	r3, [r3, #12]
 80101fa:	0a1b      	lsrs	r3, r3, #8
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	4b15      	ldr	r3, [pc, #84]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	b2d2      	uxtb	r2, r2
 8010204:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010206:	4b13      	ldr	r3, [pc, #76]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 8010208:	899a      	ldrh	r2, [r3, #12]
 801020a:	4b12      	ldr	r3, [pc, #72]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 801020c:	689b      	ldr	r3, [r3, #8]
 801020e:	3301      	adds	r3, #1
 8010210:	b2d2      	uxtb	r2, r2
 8010212:	701a      	strb	r2, [r3, #0]
                break;
 8010214:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010216:	23e0      	movs	r3, #224	; 0xe0
 8010218:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 801021a:	4b0e      	ldr	r3, [pc, #56]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 801021c:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 801021e:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010220:	4b0c      	ldr	r3, [pc, #48]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 8010222:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8010224:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 8010226:	480c      	ldr	r0, [pc, #48]	; (8010258 <LmhpComplianceTxProcess+0xe4>)
 8010228:	f00d fc5a 	bl	801dae0 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 801022c:	4b0b      	ldr	r3, [pc, #44]	; (801025c <LmhpComplianceTxProcess+0xe8>)
 801022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 8010234:	f04f 33ff 	mov.w	r3, #4294967295
 8010238:	e008      	b.n	801024c <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 801023a:	4b08      	ldr	r3, [pc, #32]	; (801025c <LmhpComplianceTxProcess+0xe8>)
 801023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023e:	4a05      	ldr	r2, [pc, #20]	; (8010254 <LmhpComplianceTxProcess+0xe0>)
 8010240:	78d2      	ldrb	r2, [r2, #3]
 8010242:	4611      	mov	r1, r2
 8010244:	4638      	mov	r0, r7
 8010246:	2201      	movs	r2, #1
 8010248:	4798      	blx	r3
 801024a:	4603      	mov	r3, r0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	20000928 	.word	0x20000928
 8010258:	20000910 	.word	0x20000910
 801025c:	200000ec 	.word	0x200000ec

08010260 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b0a4      	sub	sp, #144	; 0x90
 8010264:	af02      	add	r7, sp, #8
 8010266:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010268:	4ba5      	ldr	r3, [pc, #660]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	f083 0301 	eor.w	r3, r3, #1
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	f040 81c6 	bne.w	8010604 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	7b5b      	ldrb	r3, [r3, #13]
 801027c:	f083 0301 	eor.w	r3, r3, #1
 8010280:	b2db      	uxtb	r3, r3
 8010282:	2b00      	cmp	r3, #0
 8010284:	f040 81c0 	bne.w	8010608 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010288:	4b9d      	ldr	r3, [pc, #628]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801028a:	785b      	ldrb	r3, [r3, #1]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00c      	beq.n	80102aa <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	7b9b      	ldrb	r3, [r3, #14]
 8010294:	f083 0301 	eor.w	r3, r3, #1
 8010298:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 801029a:	2b00      	cmp	r3, #0
 801029c:	d005      	beq.n	80102aa <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801029e:	4b98      	ldr	r3, [pc, #608]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80102a0:	899b      	ldrh	r3, [r3, #12]
 80102a2:	3301      	adds	r3, #1
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	4b96      	ldr	r3, [pc, #600]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80102a8:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	78db      	ldrb	r3, [r3, #3]
 80102ae:	2be0      	cmp	r3, #224	; 0xe0
 80102b0:	f040 81ac 	bne.w	801060c <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80102b4:	4b92      	ldr	r3, [pc, #584]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80102b6:	785b      	ldrb	r3, [r3, #1]
 80102b8:	f083 0301 	eor.w	r3, r3, #1
 80102bc:	b2db      	uxtb	r3, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d060      	beq.n	8010384 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7b1b      	ldrb	r3, [r3, #12]
 80102c6:	2b04      	cmp	r3, #4
 80102c8:	f040 81a7 	bne.w	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	f040 81a1 	bne.w	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	3301      	adds	r3, #1
 80102de:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	f040 819a 	bne.w	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	3302      	adds	r3, #2
 80102ec:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	f040 8193 	bne.w	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	689b      	ldr	r3, [r3, #8]
 80102f8:	3303      	adds	r3, #3
 80102fa:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	f040 818c 	bne.w	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 8010302:	4b7f      	ldr	r3, [pc, #508]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010304:	2200      	movs	r2, #0
 8010306:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010308:	4b7d      	ldr	r3, [pc, #500]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801030a:	22e0      	movs	r2, #224	; 0xe0
 801030c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 801030e:	4b7c      	ldr	r3, [pc, #496]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010310:	2202      	movs	r2, #2
 8010312:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010314:	4b7a      	ldr	r3, [pc, #488]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010316:	2200      	movs	r2, #0
 8010318:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 801031a:	4b79      	ldr	r3, [pc, #484]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801031c:	2200      	movs	r2, #0
 801031e:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010320:	4b77      	ldr	r3, [pc, #476]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010322:	2200      	movs	r2, #0
 8010324:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8010326:	4b76      	ldr	r3, [pc, #472]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010328:	2200      	movs	r2, #0
 801032a:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 801032c:	4b74      	ldr	r3, [pc, #464]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801032e:	2201      	movs	r2, #1
 8010330:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8010332:	4b73      	ldr	r3, [pc, #460]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010334:	2201      	movs	r2, #1
 8010336:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 8010338:	2304      	movs	r3, #4
 801033a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 801033c:	2301      	movs	r3, #1
 801033e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010340:	f107 030c 	add.w	r3, r7, #12
 8010344:	4618      	mov	r0, r3
 8010346:	f004 f8a1 	bl	801448c <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 801034a:	2000      	movs	r0, #0
 801034c:	f004 fe7a 	bl	8015044 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010350:	4b6c      	ldr	r3, [pc, #432]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d003      	beq.n	8010362 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 801035a:	4b6a      	ldr	r3, [pc, #424]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	685b      	ldr	r3, [r3, #4]
 8010360:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8010362:	2300      	movs	r3, #0
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	4b68      	ldr	r3, [pc, #416]	; (8010508 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010368:	2200      	movs	r2, #0
 801036a:	f04f 31ff 	mov.w	r1, #4294967295
 801036e:	4867      	ldr	r0, [pc, #412]	; (801050c <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010370:	f00d fb80 	bl	801da74 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010374:	f241 3188 	movw	r1, #5000	; 0x1388
 8010378:	4864      	ldr	r0, [pc, #400]	; (801050c <LmhpComplianceOnMcpsIndication+0x2ac>)
 801037a:	f00d fc8f 	bl	801dc9c <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 801037e:	f7ff fef9 	bl	8010174 <LmhpComplianceTxProcess>
 8010382:	e14a      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	689b      	ldr	r3, [r3, #8]
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	4b5d      	ldr	r3, [pc, #372]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801038c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801038e:	4b5c      	ldr	r3, [pc, #368]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010390:	789b      	ldrb	r3, [r3, #2]
 8010392:	2b0a      	cmp	r3, #10
 8010394:	f200 813c 	bhi.w	8010610 <LmhpComplianceOnMcpsIndication+0x3b0>
 8010398:	a201      	add	r2, pc, #4	; (adr r2, 80103a0 <LmhpComplianceOnMcpsIndication+0x140>)
 801039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039e:	bf00      	nop
 80103a0:	080103cd 	.word	0x080103cd
 80103a4:	08010417 	.word	0x08010417
 80103a8:	0801041f 	.word	0x0801041f
 80103ac:	0801042d 	.word	0x0801042d
 80103b0:	0801043b 	.word	0x0801043b
 80103b4:	08010493 	.word	0x08010493
 80103b8:	080104a5 	.word	0x080104a5
 80103bc:	08010515 	.word	0x08010515
 80103c0:	080105bd 	.word	0x080105bd
 80103c4:	080105cf 	.word	0x080105cf
 80103c8:	080105e9 	.word	0x080105e9
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80103cc:	484f      	ldr	r0, [pc, #316]	; (801050c <LmhpComplianceOnMcpsIndication+0x2ac>)
 80103ce:	f00d fbf5 	bl	801dbbc <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80103d2:	4b4b      	ldr	r3, [pc, #300]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80103d4:	2200      	movs	r2, #0
 80103d6:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80103d8:	4b49      	ldr	r3, [pc, #292]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80103da:	2200      	movs	r2, #0
 80103dc:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80103de:	2304      	movs	r3, #4
 80103e0:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80103e2:	4b48      	ldr	r3, [pc, #288]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80103ea:	f107 030c 	add.w	r3, r7, #12
 80103ee:	4618      	mov	r0, r3
 80103f0:	f004 f84c 	bl	801448c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80103f4:	4b43      	ldr	r3, [pc, #268]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	785b      	ldrb	r3, [r3, #1]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f004 fe22 	bl	8015044 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010400:	4b40      	ldr	r3, [pc, #256]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	2b00      	cmp	r3, #0
 8010408:	f000 8104 	beq.w	8010614 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 801040c:	4b3d      	ldr	r3, [pc, #244]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	4798      	blx	r3
                    }
                }
                break;
 8010414:	e0fe      	b.n	8010614 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 8010416:	4b3a      	ldr	r3, [pc, #232]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010418:	2202      	movs	r2, #2
 801041a:	719a      	strb	r2, [r3, #6]
                break;
 801041c:	e0fd      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 801041e:	4b38      	ldr	r3, [pc, #224]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010420:	2201      	movs	r2, #1
 8010422:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8010424:	4b36      	ldr	r3, [pc, #216]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010426:	2201      	movs	r2, #1
 8010428:	709a      	strb	r2, [r3, #2]
                break;
 801042a:	e0f6      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 801042c:	4b34      	ldr	r3, [pc, #208]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801042e:	2200      	movs	r2, #0
 8010430:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 8010432:	4b33      	ldr	r3, [pc, #204]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010434:	2201      	movs	r2, #1
 8010436:	709a      	strb	r2, [r3, #2]
                break;
 8010438:	e0ef      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	7b1a      	ldrb	r2, [r3, #12]
 801043e:	4b30      	ldr	r3, [pc, #192]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010440:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 8010442:	4b2f      	ldr	r3, [pc, #188]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010444:	689b      	ldr	r3, [r3, #8]
 8010446:	2204      	movs	r2, #4
 8010448:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801044a:	2301      	movs	r3, #1
 801044c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010450:	e012      	b.n	8010478 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	689a      	ldr	r2, [r3, #8]
 8010456:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801045a:	4413      	add	r3, r2
 801045c:	781a      	ldrb	r2, [r3, #0]
 801045e:	4b28      	ldr	r3, [pc, #160]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010460:	6899      	ldr	r1, [r3, #8]
 8010462:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010466:	440b      	add	r3, r1
 8010468:	3201      	adds	r2, #1
 801046a:	b2d2      	uxtb	r2, r2
 801046c:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 801046e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010472:	3301      	adds	r3, #1
 8010474:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010478:	4b21      	ldr	r3, [pc, #132]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801047a:	795a      	ldrb	r2, [r3, #5]
 801047c:	4b20      	ldr	r3, [pc, #128]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801047e:	799b      	ldrb	r3, [r3, #6]
 8010480:	4293      	cmp	r3, r2
 8010482:	bf28      	it	cs
 8010484:	4613      	movcs	r3, r2
 8010486:	b2db      	uxtb	r3, r3
 8010488:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 801048c:	429a      	cmp	r2, r3
 801048e:	d3e0      	bcc.n	8010452 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8010490:	e0c3      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8010492:	2305      	movs	r3, #5
 8010494:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8010498:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801049c:	4618      	mov	r0, r3
 801049e:	f004 fb89 	bl	8014bb4 <LoRaMacMlmeRequest>
                }
                break;
 80104a2:	e0ba      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80104a4:	4819      	ldr	r0, [pc, #100]	; (801050c <LmhpComplianceOnMcpsIndication+0x2ac>)
 80104a6:	f00d fb89 	bl	801dbbc <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80104aa:	4b15      	ldr	r3, [pc, #84]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104ac:	2200      	movs	r2, #0
 80104ae:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80104b0:	4b13      	ldr	r3, [pc, #76]	; (8010500 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80104b6:	2304      	movs	r3, #4
 80104b8:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80104ba:	4b12      	ldr	r3, [pc, #72]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80104c2:	f107 030c 	add.w	r3, r7, #12
 80104c6:	4618      	mov	r0, r3
 80104c8:	f003 ffe0 	bl	801448c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80104cc:	4b0d      	ldr	r3, [pc, #52]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	785b      	ldrb	r3, [r3, #1]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f004 fdb6 	bl	8015044 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80104d8:	4b0a      	ldr	r3, [pc, #40]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d003      	beq.n	80104ea <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 80104e2:	4b08      	ldr	r3, [pc, #32]	; (8010504 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	689b      	ldr	r3, [r3, #8]
 80104e8:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 80104ea:	4b09      	ldr	r3, [pc, #36]	; (8010510 <LmhpComplianceOnMcpsIndication+0x2b0>)
 80104ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	f000 8092 	beq.w	8010618 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80104f4:	4b06      	ldr	r3, [pc, #24]	; (8010510 <LmhpComplianceOnMcpsIndication+0x2b0>)
 80104f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f8:	2101      	movs	r1, #1
 80104fa:	2002      	movs	r0, #2
 80104fc:	4798      	blx	r3
                    }
                }
                break;
 80104fe:	e08b      	b.n	8010618 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010500:	20000928 	.word	0x20000928
 8010504:	2000093c 	.word	0x2000093c
 8010508:	08010631 	.word	0x08010631
 801050c:	20000910 	.word	0x20000910
 8010510:	200000ec 	.word	0x200000ec
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	7b1b      	ldrb	r3, [r3, #12]
 8010518:	2b03      	cmp	r3, #3
 801051a:	d113      	bne.n	8010544 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 801051c:	2306      	movs	r3, #6
 801051e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	3301      	adds	r3, #1
 8010528:	781b      	ldrb	r3, [r3, #0]
 801052a:	021b      	lsls	r3, r3, #8
 801052c:	b21a      	sxth	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	3302      	adds	r3, #2
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	b21b      	sxth	r3, r3
 8010538:	4313      	orrs	r3, r2
 801053a:	b21b      	sxth	r3, r3
 801053c:	b29b      	uxth	r3, r3
 801053e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010542:	e032      	b.n	80105aa <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	7b1b      	ldrb	r3, [r3, #12]
 8010548:	2b07      	cmp	r3, #7
 801054a:	d12e      	bne.n	80105aa <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 801054c:	2307      	movs	r3, #7
 801054e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	3301      	adds	r3, #1
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	021b      	lsls	r3, r3, #8
 801055c:	b21a      	sxth	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	3302      	adds	r3, #2
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	b21b      	sxth	r3, r3
 8010568:	4313      	orrs	r3, r2
 801056a:	b21b      	sxth	r3, r3
 801056c:	b29b      	uxth	r3, r3
 801056e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	3303      	adds	r3, #3
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	041a      	lsls	r2, r3, #16
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	3304      	adds	r3, #4
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	021b      	lsls	r3, r3, #8
 8010586:	4313      	orrs	r3, r2
 8010588:	687a      	ldr	r2, [r7, #4]
 801058a:	6892      	ldr	r2, [r2, #8]
 801058c:	3205      	adds	r2, #5
 801058e:	7812      	ldrb	r2, [r2, #0]
 8010590:	4313      	orrs	r3, r2
 8010592:	461a      	mov	r2, r3
 8010594:	2364      	movs	r3, #100	; 0x64
 8010596:	fb02 f303 	mul.w	r3, r2, r3
 801059a:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	3306      	adds	r3, #6
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	b25b      	sxtb	r3, r3
 80105a6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 80105aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80105ae:	4618      	mov	r0, r3
 80105b0:	f004 fb00 	bl	8014bb4 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 80105b4:	4b1a      	ldr	r3, [pc, #104]	; (8010620 <LmhpComplianceOnMcpsIndication+0x3c0>)
 80105b6:	2201      	movs	r2, #1
 80105b8:	709a      	strb	r2, [r3, #2]
                }
                break;
 80105ba:	e02e      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 80105bc:	230a      	movs	r3, #10
 80105be:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 80105c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80105c6:	4618      	mov	r0, r3
 80105c8:	f004 faf4 	bl	8014bb4 <LoRaMacMlmeRequest>
                }
                break;
 80105cc:	e025      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 80105ce:	2300      	movs	r3, #0
 80105d0:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	3301      	adds	r3, #1
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80105dc:	f107 030c 	add.w	r3, r7, #12
 80105e0:	4618      	mov	r0, r3
 80105e2:	f003 ff53 	bl	801448c <LoRaMacMibSetRequestConfirm>
                }
                break;
 80105e6:	e018      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 80105e8:	230d      	movs	r3, #13
 80105ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	785b      	ldrb	r3, [r3, #1]
 80105f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 80105f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80105fc:	4618      	mov	r0, r3
 80105fe:	f004 fad9 	bl	8014bb4 <LoRaMacMlmeRequest>
                }
                break;
 8010602:	e00a      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010604:	bf00      	nop
 8010606:	e008      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010608:	bf00      	nop
 801060a:	e006      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 801060c:	bf00      	nop
 801060e:	e004      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010610:	bf00      	nop
 8010612:	e002      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010614:	bf00      	nop
 8010616:	e000      	b.n	801061a <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010618:	bf00      	nop
        }
    }
}
 801061a:	3788      	adds	r7, #136	; 0x88
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20000928 	.word	0x20000928

08010624 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010624:	b480      	push	{r7}
 8010626:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010628:	bf00      	nop
 801062a:	46bd      	mov	sp, r7
 801062c:	bc80      	pop	{r7}
 801062e:	4770      	bx	lr

08010630 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010638:	f7ff fd9c 	bl	8010174 <LmhpComplianceTxProcess>
}
 801063c:	bf00      	nop
 801063e:	3708      	adds	r7, #8
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010644:	b480      	push	{r7}
 8010646:	b083      	sub	sp, #12
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 801064c:	2300      	movs	r3, #0
}
 801064e:	4618      	mov	r0, r3
 8010650:	370c      	adds	r7, #12
 8010652:	46bd      	mov	sp, r7
 8010654:	bc80      	pop	{r7}
 8010656:	4770      	bx	lr

08010658 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	4603      	mov	r3, r0
 8010660:	6039      	str	r1, [r7, #0]
 8010662:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010664:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010668:	4618      	mov	r0, r3
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	bc80      	pop	{r7}
 8010670:	4770      	bx	lr
	...

08010674 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 801067a:	f00d fbb9 	bl	801ddf0 <UTIL_TIMER_GetCurrentTime>
 801067e:	4603      	mov	r3, r0
 8010680:	4a0f      	ldr	r2, [pc, #60]	; (80106c0 <OnRadioTxDone+0x4c>)
 8010682:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010684:	4c0f      	ldr	r4, [pc, #60]	; (80106c4 <OnRadioTxDone+0x50>)
 8010686:	463b      	mov	r3, r7
 8010688:	4618      	mov	r0, r3
 801068a:	f00c fd2f 	bl	801d0ec <SysTimeGet>
 801068e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010692:	463a      	mov	r2, r7
 8010694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010698:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 801069c:	4a0a      	ldr	r2, [pc, #40]	; (80106c8 <OnRadioTxDone+0x54>)
 801069e:	7813      	ldrb	r3, [r2, #0]
 80106a0:	f043 0310 	orr.w	r3, r3, #16
 80106a4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80106a6:	f003 f8e1 	bl	801386c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80106aa:	4b08      	ldr	r3, [pc, #32]	; (80106cc <OnRadioTxDone+0x58>)
 80106ac:	2201      	movs	r2, #1
 80106ae:	2100      	movs	r1, #0
 80106b0:	2002      	movs	r0, #2
 80106b2:	f00d fc8d 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 80106b6:	bf00      	nop
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd90      	pop	{r4, r7, pc}
 80106be:	bf00      	nop
 80106c0:	200015b4 	.word	0x200015b4
 80106c4:	20000940 	.word	0x20000940
 80106c8:	200015b0 	.word	0x200015b0
 80106cc:	0801ed80 	.word	0x0801ed80

080106d0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	4608      	mov	r0, r1
 80106da:	4611      	mov	r1, r2
 80106dc:	461a      	mov	r2, r3
 80106de:	4603      	mov	r3, r0
 80106e0:	817b      	strh	r3, [r7, #10]
 80106e2:	460b      	mov	r3, r1
 80106e4:	813b      	strh	r3, [r7, #8]
 80106e6:	4613      	mov	r3, r2
 80106e8:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80106ea:	f00d fb81 	bl	801ddf0 <UTIL_TIMER_GetCurrentTime>
 80106ee:	4603      	mov	r3, r0
 80106f0:	4a0f      	ldr	r2, [pc, #60]	; (8010730 <OnRadioRxDone+0x60>)
 80106f2:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 80106f4:	4a0e      	ldr	r2, [pc, #56]	; (8010730 <OnRadioRxDone+0x60>)
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 80106fa:	4a0d      	ldr	r2, [pc, #52]	; (8010730 <OnRadioRxDone+0x60>)
 80106fc:	897b      	ldrh	r3, [r7, #10]
 80106fe:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010700:	4a0b      	ldr	r2, [pc, #44]	; (8010730 <OnRadioRxDone+0x60>)
 8010702:	893b      	ldrh	r3, [r7, #8]
 8010704:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010706:	4a0a      	ldr	r2, [pc, #40]	; (8010730 <OnRadioRxDone+0x60>)
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 801070c:	4a09      	ldr	r2, [pc, #36]	; (8010734 <OnRadioRxDone+0x64>)
 801070e:	7813      	ldrb	r3, [r2, #0]
 8010710:	f043 0308 	orr.w	r3, r3, #8
 8010714:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010716:	f003 f8a9 	bl	801386c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 801071a:	4b07      	ldr	r3, [pc, #28]	; (8010738 <OnRadioRxDone+0x68>)
 801071c:	2201      	movs	r2, #1
 801071e:	2100      	movs	r1, #0
 8010720:	2002      	movs	r0, #2
 8010722:	f00d fc55 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 8010726:	bf00      	nop
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
 801072e:	bf00      	nop
 8010730:	200015b8 	.word	0x200015b8
 8010734:	200015b0 	.word	0x200015b0
 8010738:	0801ed90 	.word	0x0801ed90

0801073c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010740:	4a07      	ldr	r2, [pc, #28]	; (8010760 <OnRadioTxTimeout+0x24>)
 8010742:	7813      	ldrb	r3, [r2, #0]
 8010744:	f043 0304 	orr.w	r3, r3, #4
 8010748:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801074a:	f003 f88f 	bl	801386c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 801074e:	4b05      	ldr	r3, [pc, #20]	; (8010764 <OnRadioTxTimeout+0x28>)
 8010750:	2201      	movs	r2, #1
 8010752:	2100      	movs	r1, #0
 8010754:	2002      	movs	r0, #2
 8010756:	f00d fc3b 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 801075a:	bf00      	nop
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	200015b0 	.word	0x200015b0
 8010764:	0801eda0 	.word	0x0801eda0

08010768 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 801076c:	4a04      	ldr	r2, [pc, #16]	; (8010780 <OnRadioRxError+0x18>)
 801076e:	7813      	ldrb	r3, [r2, #0]
 8010770:	f043 0302 	orr.w	r3, r3, #2
 8010774:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010776:	f003 f879 	bl	801386c <OnMacProcessNotify>
}
 801077a:	bf00      	nop
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	200015b0 	.word	0x200015b0

08010784 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010784:	b580      	push	{r7, lr}
 8010786:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010788:	4a07      	ldr	r2, [pc, #28]	; (80107a8 <OnRadioRxTimeout+0x24>)
 801078a:	7813      	ldrb	r3, [r2, #0]
 801078c:	f043 0301 	orr.w	r3, r3, #1
 8010790:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010792:	f003 f86b 	bl	801386c <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010796:	4b05      	ldr	r3, [pc, #20]	; (80107ac <OnRadioRxTimeout+0x28>)
 8010798:	2201      	movs	r2, #1
 801079a:	2100      	movs	r1, #0
 801079c:	2002      	movs	r0, #2
 801079e:	f00d fc17 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 80107a2:	bf00      	nop
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	200015b0 	.word	0x200015b0
 80107ac:	0801edb0 	.word	0x0801edb0

080107b0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80107b0:	b480      	push	{r7}
 80107b2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80107b4:	4b08      	ldr	r3, [pc, #32]	; (80107d8 <UpdateRxSlotIdleState+0x28>)
 80107b6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d004      	beq.n	80107c8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80107be:	4b07      	ldr	r3, [pc, #28]	; (80107dc <UpdateRxSlotIdleState+0x2c>)
 80107c0:	2206      	movs	r2, #6
 80107c2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80107c6:	e003      	b.n	80107d0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80107c8:	4b04      	ldr	r3, [pc, #16]	; (80107dc <UpdateRxSlotIdleState+0x2c>)
 80107ca:	2202      	movs	r2, #2
 80107cc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 80107d0:	bf00      	nop
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bc80      	pop	{r7}
 80107d6:	4770      	bx	lr
 80107d8:	20000e48 	.word	0x20000e48
 80107dc:	20000940 	.word	0x20000940

080107e0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b092      	sub	sp, #72	; 0x48
 80107e4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80107e6:	4b50      	ldr	r3, [pc, #320]	; (8010928 <ProcessRadioTxDone+0x148>)
 80107e8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80107ec:	2b02      	cmp	r3, #2
 80107ee:	d002      	beq.n	80107f6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 80107f0:	4b4e      	ldr	r3, [pc, #312]	; (801092c <ProcessRadioTxDone+0x14c>)
 80107f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107f6:	f3ef 8310 	mrs	r3, PRIMASK
 80107fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 80107fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010800:	b672      	cpsid	i
}
 8010802:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010804:	f00d faf4 	bl	801ddf0 <UTIL_TIMER_GetCurrentTime>
 8010808:	4602      	mov	r2, r0
 801080a:	4b49      	ldr	r3, [pc, #292]	; (8010930 <ProcessRadioTxDone+0x150>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010812:	4b48      	ldr	r3, [pc, #288]	; (8010934 <ProcessRadioTxDone+0x154>)
 8010814:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	4619      	mov	r1, r3
 801081e:	4846      	ldr	r0, [pc, #280]	; (8010938 <ProcessRadioTxDone+0x158>)
 8010820:	f00d fa3c 	bl	801dc9c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010824:	4844      	ldr	r0, [pc, #272]	; (8010938 <ProcessRadioTxDone+0x158>)
 8010826:	f00d f95b 	bl	801dae0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 801082a:	4b42      	ldr	r3, [pc, #264]	; (8010934 <ProcessRadioTxDone+0x154>)
 801082c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010832:	1ad3      	subs	r3, r2, r3
 8010834:	4619      	mov	r1, r3
 8010836:	4841      	ldr	r0, [pc, #260]	; (801093c <ProcessRadioTxDone+0x15c>)
 8010838:	f00d fa30 	bl	801dc9c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 801083c:	483f      	ldr	r0, [pc, #252]	; (801093c <ProcessRadioTxDone+0x15c>)
 801083e:	f00d f94f 	bl	801dae0 <UTIL_TIMER_Start>
 8010842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010844:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010848:	f383 8810 	msr	PRIMASK, r3
}
 801084c:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 801084e:	4b36      	ldr	r3, [pc, #216]	; (8010928 <ProcessRadioTxDone+0x148>)
 8010850:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010854:	2b02      	cmp	r3, #2
 8010856:	d004      	beq.n	8010862 <ProcessRadioTxDone+0x82>
 8010858:	4b36      	ldr	r3, [pc, #216]	; (8010934 <ProcessRadioTxDone+0x154>)
 801085a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801085e:	2b00      	cmp	r3, #0
 8010860:	d019      	beq.n	8010896 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010862:	2316      	movs	r3, #22
 8010864:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010868:	4b2f      	ldr	r3, [pc, #188]	; (8010928 <ProcessRadioTxDone+0x148>)
 801086a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801086e:	f107 0220 	add.w	r2, r7, #32
 8010872:	4611      	mov	r1, r2
 8010874:	4618      	mov	r0, r3
 8010876:	f006 fcec 	bl	8017252 <RegionGetPhyParam>
 801087a:	4603      	mov	r3, r0
 801087c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 801087e:	4b2d      	ldr	r3, [pc, #180]	; (8010934 <ProcessRadioTxDone+0x154>)
 8010880:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010884:	69fb      	ldr	r3, [r7, #28]
 8010886:	4413      	add	r3, r2
 8010888:	4619      	mov	r1, r3
 801088a:	482d      	ldr	r0, [pc, #180]	; (8010940 <ProcessRadioTxDone+0x160>)
 801088c:	f00d fa06 	bl	801dc9c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010890:	482b      	ldr	r0, [pc, #172]	; (8010940 <ProcessRadioTxDone+0x160>)
 8010892:	f00d f925 	bl	801dae0 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010896:	4b26      	ldr	r3, [pc, #152]	; (8010930 <ProcessRadioTxDone+0x150>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a23      	ldr	r2, [pc, #140]	; (8010928 <ProcessRadioTxDone+0x148>)
 801089c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 801089e:	4b25      	ldr	r3, [pc, #148]	; (8010934 <ProcessRadioTxDone+0x154>)
 80108a0:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80108a4:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80108a6:	4b22      	ldr	r3, [pc, #136]	; (8010930 <ProcessRadioTxDone+0x150>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80108ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108b0:	4618      	mov	r0, r3
 80108b2:	f00c fc53 	bl	801d15c <SysTimeGetMcuTime>
 80108b6:	4638      	mov	r0, r7
 80108b8:	4b1b      	ldr	r3, [pc, #108]	; (8010928 <ProcessRadioTxDone+0x148>)
 80108ba:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80108be:	9200      	str	r2, [sp, #0]
 80108c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80108c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80108c8:	ca06      	ldmia	r2, {r1, r2}
 80108ca:	f00c fba8 	bl	801d01e <SysTimeSub>
 80108ce:	f107 0314 	add.w	r3, r7, #20
 80108d2:	463a      	mov	r2, r7
 80108d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108d8:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80108dc:	4b15      	ldr	r3, [pc, #84]	; (8010934 <ProcessRadioTxDone+0x154>)
 80108de:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80108e2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80108e4:	2301      	movs	r3, #1
 80108e6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80108e8:	4b0f      	ldr	r3, [pc, #60]	; (8010928 <ProcessRadioTxDone+0x148>)
 80108ea:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d101      	bne.n	80108f6 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 80108f2:	2300      	movs	r3, #0
 80108f4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80108f6:	4b0c      	ldr	r3, [pc, #48]	; (8010928 <ProcessRadioTxDone+0x148>)
 80108f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80108fc:	f107 0208 	add.w	r2, r7, #8
 8010900:	4611      	mov	r1, r2
 8010902:	4618      	mov	r0, r3
 8010904:	f006 fcbd 	bl	8017282 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010908:	4b0a      	ldr	r3, [pc, #40]	; (8010934 <ProcessRadioTxDone+0x154>)
 801090a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801090e:	f083 0301 	eor.w	r3, r3, #1
 8010912:	b2db      	uxtb	r3, r3
 8010914:	2b00      	cmp	r3, #0
 8010916:	d003      	beq.n	8010920 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010918:	4b06      	ldr	r3, [pc, #24]	; (8010934 <ProcessRadioTxDone+0x154>)
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010920:	bf00      	nop
 8010922:	3740      	adds	r7, #64	; 0x40
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	20000e48 	.word	0x20000e48
 801092c:	0801f460 	.word	0x0801f460
 8010930:	200015b4 	.word	0x200015b4
 8010934:	20000940 	.word	0x20000940
 8010938:	20000cc0 	.word	0x20000cc0
 801093c:	20000cd8 	.word	0x20000cd8
 8010940:	20000d34 	.word	0x20000d34

08010944 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010948:	4b10      	ldr	r3, [pc, #64]	; (801098c <PrepareRxDoneAbort+0x48>)
 801094a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801094e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010952:	4a0e      	ldr	r2, [pc, #56]	; (801098c <PrepareRxDoneAbort+0x48>)
 8010954:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010958:	4b0c      	ldr	r3, [pc, #48]	; (801098c <PrepareRxDoneAbort+0x48>)
 801095a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801095e:	2b00      	cmp	r3, #0
 8010960:	d002      	beq.n	8010968 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010962:	2000      	movs	r0, #0
 8010964:	f001 f950 	bl	8011c08 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010968:	4a08      	ldr	r2, [pc, #32]	; (801098c <PrepareRxDoneAbort+0x48>)
 801096a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801096e:	f043 0302 	orr.w	r3, r3, #2
 8010972:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010976:	4a05      	ldr	r2, [pc, #20]	; (801098c <PrepareRxDoneAbort+0x48>)
 8010978:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801097c:	f043 0310 	orr.w	r3, r3, #16
 8010980:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010984:	f7ff ff14 	bl	80107b0 <UpdateRxSlotIdleState>
}
 8010988:	bf00      	nop
 801098a:	bd80      	pop	{r7, pc}
 801098c:	20000940 	.word	0x20000940

08010990 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010990:	b5b0      	push	{r4, r5, r7, lr}
 8010992:	b0aa      	sub	sp, #168	; 0xa8
 8010994:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010996:	2313      	movs	r3, #19
 8010998:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 801099c:	4b78      	ldr	r3, [pc, #480]	; (8010b80 <ProcessRadioRxDone+0x1f0>)
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 80109a4:	4b76      	ldr	r3, [pc, #472]	; (8010b80 <ProcessRadioRxDone+0x1f0>)
 80109a6:	891b      	ldrh	r3, [r3, #8]
 80109a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 80109ac:	4b74      	ldr	r3, [pc, #464]	; (8010b80 <ProcessRadioRxDone+0x1f0>)
 80109ae:	895b      	ldrh	r3, [r3, #10]
 80109b0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 80109b4:	4b72      	ldr	r3, [pc, #456]	; (8010b80 <ProcessRadioRxDone+0x1f0>)
 80109b6:	7b1b      	ldrb	r3, [r3, #12]
 80109b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 80109bc:	2300      	movs	r3, #0
 80109be:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 80109c2:	2300      	movs	r3, #0
 80109c4:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80109c6:	4b6f      	ldr	r3, [pc, #444]	; (8010b84 <ProcessRadioRxDone+0x1f4>)
 80109c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80109cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 80109d0:	2300      	movs	r3, #0
 80109d2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 80109d6:	2301      	movs	r3, #1
 80109d8:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 80109dc:	2301      	movs	r3, #1
 80109de:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 80109e2:	4b69      	ldr	r3, [pc, #420]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 80109ea:	4a67      	ldr	r2, [pc, #412]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 80109ec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80109f0:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 80109f4:	4a64      	ldr	r2, [pc, #400]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 80109f6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109fa:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 80109fe:	4b62      	ldr	r3, [pc, #392]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a00:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010a04:	4b60      	ldr	r3, [pc, #384]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a06:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010a0a:	4b5f      	ldr	r3, [pc, #380]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010a12:	4b5d      	ldr	r3, [pc, #372]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010a1a:	4b5b      	ldr	r3, [pc, #364]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010a22:	4b59      	ldr	r3, [pc, #356]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010a2a:	4b57      	ldr	r3, [pc, #348]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010a32:	4b55      	ldr	r3, [pc, #340]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010a3a:	4b53      	ldr	r3, [pc, #332]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010a42:	4b51      	ldr	r3, [pc, #324]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010a4a:	4b4f      	ldr	r3, [pc, #316]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010a52:	4b4d      	ldr	r3, [pc, #308]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a54:	2200      	movs	r2, #0
 8010a56:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010a5a:	4b4b      	ldr	r3, [pc, #300]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010a62:	4b4a      	ldr	r3, [pc, #296]	; (8010b8c <ProcessRadioRxDone+0x1fc>)
 8010a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a66:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010a68:	4849      	ldr	r0, [pc, #292]	; (8010b90 <ProcessRadioRxDone+0x200>)
 8010a6a:	f00d f8a7 	bl	801dbbc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010a6e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010a72:	4619      	mov	r1, r3
 8010a74:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010a78:	f004 fc4b 	bl	8015312 <LoRaMacClassBRxBeacon>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d00b      	beq.n	8010a9a <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010a82:	4a41      	ldr	r2, [pc, #260]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010a88:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010a8c:	4a3e      	ldr	r2, [pc, #248]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010a8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a92:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8010a96:	f000 bc1f 	b.w	80112d8 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010a9a:	4b3a      	ldr	r3, [pc, #232]	; (8010b84 <ProcessRadioRxDone+0x1f4>)
 8010a9c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d11e      	bne.n	8010ae2 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010aa4:	f004 fc48 	bl	8015338 <LoRaMacClassBIsPingExpected>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00a      	beq.n	8010ac4 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010aae:	2000      	movs	r0, #0
 8010ab0:	f004 fbf9 	bl	80152a6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	f004 fc1a 	bl	80152ee <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010aba:	4b33      	ldr	r3, [pc, #204]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010abc:	2204      	movs	r2, #4
 8010abe:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8010ac2:	e00e      	b.n	8010ae2 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010ac4:	f004 fc3f 	bl	8015346 <LoRaMacClassBIsMulticastExpected>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d009      	beq.n	8010ae2 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010ace:	2000      	movs	r0, #0
 8010ad0:	f004 fbf3 	bl	80152ba <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	f004 fc13 	bl	8015300 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010ada:	4b2b      	ldr	r3, [pc, #172]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010adc:	2205      	movs	r2, #5
 8010ade:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8010ae2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010aea:	4b27      	ldr	r3, [pc, #156]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010aec:	2201      	movs	r2, #1
 8010aee:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 8010af2:	f7ff ff27 	bl	8010944 <PrepareRxDoneAbort>
        return;
 8010af6:	e3ef      	b.n	80112d8 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010af8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010afc:	1c5a      	adds	r2, r3, #1
 8010afe:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8010b02:	461a      	mov	r2, r3
 8010b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b08:	4413      	add	r3, r2
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8010b10:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010b14:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	2b06      	cmp	r3, #6
 8010b1e:	f200 83b4 	bhi.w	801128a <ProcessRadioRxDone+0x8fa>
 8010b22:	a201      	add	r2, pc, #4	; (adr r2, 8010b28 <ProcessRadioRxDone+0x198>)
 8010b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b28:	08010b45 	.word	0x08010b45
 8010b2c:	0801128b 	.word	0x0801128b
 8010b30:	08010d25 	.word	0x08010d25
 8010b34:	0801128b 	.word	0x0801128b
 8010b38:	08010d1d 	.word	0x08010d1d
 8010b3c:	0801128b 	.word	0x0801128b
 8010b40:	0801122f 	.word	0x0801122f
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010b44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b48:	2b10      	cmp	r3, #16
 8010b4a:	d806      	bhi.n	8010b5a <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010b4c:	4b0e      	ldr	r3, [pc, #56]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010b54:	f7ff fef6 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010b58:	e3be      	b.n	80112d8 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 8010b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b5e:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 8010b60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b64:	b2db      	uxtb	r3, r3
 8010b66:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010b68:	4b06      	ldr	r3, [pc, #24]	; (8010b84 <ProcessRadioRxDone+0x1f4>)
 8010b6a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d010      	beq.n	8010b94 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <ProcessRadioRxDone+0x1f8>)
 8010b74:	2201      	movs	r2, #1
 8010b76:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010b7a:	f7ff fee3 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010b7e:	e3ab      	b.n	80112d8 <ProcessRadioRxDone+0x948>
 8010b80:	200015b8 	.word	0x200015b8
 8010b84:	20000e48 	.word	0x20000e48
 8010b88:	20000940 	.word	0x20000940
 8010b8c:	0801f460 	.word	0x0801f460
 8010b90:	20000cd8 	.word	0x20000cd8
            }

            SecureElementGetJoinEui( joinEui );
 8010b94:	1d3b      	adds	r3, r7, #4
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fa92 	bl	800f0c0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8010b9c:	f107 0214 	add.w	r2, r7, #20
 8010ba0:	1d3b      	adds	r3, r7, #4
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	20ff      	movs	r0, #255	; 0xff
 8010ba6:	f005 fdd5 	bl	8016754 <LoRaMacCryptoHandleJoinAccept>
 8010baa:	4603      	mov	r3, r0
 8010bac:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010bba:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	b25b      	sxtb	r3, r3
 8010bc2:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010bc4:	4bbb      	ldr	r3, [pc, #748]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010bc6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010bca:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8010bcc:	4bb9      	ldr	r3, [pc, #740]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010bce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010bd2:	4639      	mov	r1, r7
 8010bd4:	2207      	movs	r2, #7
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f006 fb76 	bl	80172c8 <RegionVerify>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8010be2:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f040 808c 	bne.w	8010d04 <ProcessRadioRxDone+0x374>
 8010bec:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f000 8087 	beq.w	8010d04 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010bf6:	7f7b      	ldrb	r3, [r7, #29]
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	4bae      	ldr	r3, [pc, #696]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010bfc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010c00:	4bac      	ldr	r3, [pc, #688]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010c06:	7fbb      	ldrb	r3, [r7, #30]
 8010c08:	021b      	lsls	r3, r3, #8
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	4aa9      	ldr	r2, [pc, #676]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010c12:	4ba8      	ldr	r3, [pc, #672]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010c18:	7ffb      	ldrb	r3, [r7, #31]
 8010c1a:	041b      	lsls	r3, r3, #16
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	4aa5      	ldr	r2, [pc, #660]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010c24:	6a3b      	ldr	r3, [r7, #32]
 8010c26:	4aa3      	ldr	r2, [pc, #652]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c28:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8010c2c:	4ba1      	ldr	r3, [pc, #644]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010c32:	4619      	mov	r1, r3
 8010c34:	2002      	movs	r0, #2
 8010c36:	f7fe fa5b 	bl	800f0f0 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010c3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	461a      	mov	r2, r3
 8010c46:	4b9b      	ldr	r3, [pc, #620]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c48:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	461a      	mov	r2, r3
 8010c58:	4b96      	ldr	r3, [pc, #600]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4b92      	ldr	r3, [pc, #584]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010c70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010c74:	461a      	mov	r2, r3
 8010c76:	4b8f      	ldr	r3, [pc, #572]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c78:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010c7a:	4b8e      	ldr	r3, [pc, #568]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d102      	bne.n	8010c88 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010c82:	4b8c      	ldr	r3, [pc, #560]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c84:	2201      	movs	r2, #1
 8010c86:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010c88:	4b8a      	ldr	r3, [pc, #552]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010c90:	fb02 f303 	mul.w	r3, r2, r3
 8010c94:	4a87      	ldr	r2, [pc, #540]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c96:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010c98:	4b86      	ldr	r3, [pc, #536]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c9c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010ca0:	4a84      	ldr	r2, [pc, #528]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010ca2:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010ca4:	4b83      	ldr	r3, [pc, #524]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010cac:	4b81      	ldr	r3, [pc, #516]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010cb4:	f107 0314 	add.w	r3, r7, #20
 8010cb8:	3312      	adds	r3, #18
 8010cba:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010cbc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	3b11      	subs	r3, #17
 8010cc4:	b2db      	uxtb	r3, r3
 8010cc6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010cca:	4b7a      	ldr	r3, [pc, #488]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010ccc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010cd0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f006 fb0d 	bl	80172f6 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010cdc:	4b75      	ldr	r3, [pc, #468]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010cde:	2202      	movs	r2, #2
 8010ce0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010ce4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f005 f80d 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f000 82d2 	beq.w	801129a <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010cf6:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	f004 ff77 	bl	8015bf0 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010d02:	e2ca      	b.n	801129a <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010d04:	2001      	movs	r0, #1
 8010d06:	f004 ffff 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f000 82c3 	beq.w	8011298 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010d12:	2101      	movs	r1, #1
 8010d14:	2007      	movs	r0, #7
 8010d16:	f004 ff6b 	bl	8015bf0 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8010d1a:	e2bd      	b.n	8011298 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010d1c:	4b66      	ldr	r3, [pc, #408]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010d1e:	2201      	movs	r2, #1
 8010d20:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010d24:	4b63      	ldr	r3, [pc, #396]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010d26:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010d2a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010d2e:	4b62      	ldr	r3, [pc, #392]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010d30:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010d34:	b25b      	sxtb	r3, r3
 8010d36:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010d3a:	230d      	movs	r3, #13
 8010d3c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010d40:	4b5c      	ldr	r3, [pc, #368]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010d42:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d002      	beq.n	8010d50 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010d4a:	230e      	movs	r3, #14
 8010d4c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010d50:	4b58      	ldr	r3, [pc, #352]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010d52:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010d56:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f006 fa78 	bl	8017252 <RegionGetPhyParam>
 8010d62:	4603      	mov	r3, r0
 8010d64:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8010d66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010d6a:	3b0d      	subs	r3, #13
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	b21b      	sxth	r3, r3
 8010d70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010d74:	b21a      	sxth	r2, r3
 8010d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d78:	b21b      	sxth	r3, r3
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	dc03      	bgt.n	8010d86 <ProcessRadioRxDone+0x3f6>
 8010d7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010d82:	2b0b      	cmp	r3, #11
 8010d84:	d806      	bhi.n	8010d94 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d86:	4b4c      	ldr	r3, [pc, #304]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010d8e:	f7ff fdd9 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010d92:	e2a1      	b.n	80112d8 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 8010d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d98:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 8010d9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010da4:	4b45      	ldr	r3, [pc, #276]	; (8010ebc <ProcessRadioRxDone+0x52c>)
 8010da6:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010da8:	23ff      	movs	r3, #255	; 0xff
 8010daa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010dae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010db2:	4618      	mov	r0, r3
 8010db4:	f005 ffd0 	bl	8016d58 <LoRaMacParserData>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d006      	beq.n	8010dcc <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010dbe:	4b3e      	ldr	r3, [pc, #248]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010dc0:	2201      	movs	r2, #1
 8010dc2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010dc6:	f7ff fdbd 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010dca:	e285      	b.n	80112d8 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8010dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dce:	4a3a      	ldr	r2, [pc, #232]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010dd0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010dd4:	f107 020e 	add.w	r2, r7, #14
 8010dd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ddc:	4611      	mov	r1, r2
 8010dde:	4618      	mov	r0, r3
 8010de0:	f002 fc6b 	bl	80136ba <DetermineFrameType>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d006      	beq.n	8010df8 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010dea:	4b33      	ldr	r3, [pc, #204]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010dec:	2201      	movs	r2, #1
 8010dee:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010df2:	f7ff fda7 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010df6:	e26f      	b.n	80112d8 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010e02:	2300      	movs	r3, #0
 8010e04:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8010e08:	e04f      	b.n	8010eaa <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010e0a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010e0e:	4929      	ldr	r1, [pc, #164]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010e10:	4613      	mov	r3, r2
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	4413      	add	r3, r2
 8010e16:	011b      	lsls	r3, r3, #4
 8010e18:	440b      	add	r3, r1
 8010e1a:	33ec      	adds	r3, #236	; 0xec
 8010e1c:	681a      	ldr	r2, [r3, #0]
 8010e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d13d      	bne.n	8010ea0 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8010e24:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010e28:	4922      	ldr	r1, [pc, #136]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	4413      	add	r3, r2
 8010e30:	011b      	lsls	r3, r3, #4
 8010e32:	440b      	add	r3, r1
 8010e34:	33e9      	adds	r3, #233	; 0xe9
 8010e36:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d031      	beq.n	8010ea0 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8010e42:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010e46:	491b      	ldr	r1, [pc, #108]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010e48:	4613      	mov	r3, r2
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	4413      	add	r3, r2
 8010e4e:	011b      	lsls	r3, r3, #4
 8010e50:	440b      	add	r3, r1
 8010e52:	33ea      	adds	r3, #234	; 0xea
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8010e5a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010e5e:	4915      	ldr	r1, [pc, #84]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010e60:	4613      	mov	r3, r2
 8010e62:	005b      	lsls	r3, r3, #1
 8010e64:	4413      	add	r3, r2
 8010e66:	011b      	lsls	r3, r3, #4
 8010e68:	440b      	add	r3, r1
 8010e6a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8010e74:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010e78:	490e      	ldr	r1, [pc, #56]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	4413      	add	r3, r2
 8010e80:	011b      	lsls	r3, r3, #4
 8010e82:	440b      	add	r3, r1
 8010e84:	33ec      	adds	r3, #236	; 0xec
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010e8c:	4b09      	ldr	r3, [pc, #36]	; (8010eb4 <ProcessRadioRxDone+0x524>)
 8010e8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	d114      	bne.n	8010ec0 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010e96:	4b08      	ldr	r3, [pc, #32]	; (8010eb8 <ProcessRadioRxDone+0x528>)
 8010e98:	2203      	movs	r2, #3
 8010e9a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 8010e9e:	e00f      	b.n	8010ec0 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010ea0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8010eaa:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d0ab      	beq.n	8010e0a <ProcessRadioRxDone+0x47a>
 8010eb2:	e006      	b.n	8010ec2 <ProcessRadioRxDone+0x532>
 8010eb4:	20000e48 	.word	0x20000e48
 8010eb8:	20000940 	.word	0x20000940
 8010ebc:	20000b78 	.word	0x20000b78
                    break;
 8010ec0:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010ec2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d117      	bne.n	8010efa <ProcessRadioRxDone+0x56a>
 8010eca:	7bbb      	ldrb	r3, [r7, #14]
 8010ecc:	2b03      	cmp	r3, #3
 8010ece:	d10d      	bne.n	8010eec <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010ed0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010ed4:	f003 0320 	and.w	r3, r3, #32
 8010ed8:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010ede:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ee6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d006      	beq.n	8010efa <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010eec:	4bb3      	ldr	r3, [pc, #716]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010eee:	2201      	movs	r2, #1
 8010ef0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010ef4:	f7ff fd26 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010ef8:	e1ee      	b.n	80112d8 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8010efa:	2315      	movs	r3, #21
 8010efc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f00:	4baf      	ldr	r3, [pc, #700]	; (80111c0 <ProcessRadioRxDone+0x830>)
 8010f02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010f06:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8010f0a:	4611      	mov	r1, r2
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f006 f9a0 	bl	8017252 <RegionGetPhyParam>
 8010f12:	4603      	mov	r3, r0
 8010f14:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 8010f16:	7bb9      	ldrb	r1, [r7, #14]
 8010f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	4da8      	ldr	r5, [pc, #672]	; (80111c0 <ProcessRadioRxDone+0x830>)
 8010f1e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8010f22:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8010f26:	f107 0210 	add.w	r2, r7, #16
 8010f2a:	9202      	str	r2, [sp, #8]
 8010f2c:	f107 020f 	add.w	r2, r7, #15
 8010f30:	9201      	str	r2, [sp, #4]
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8010f38:	4622      	mov	r2, r4
 8010f3a:	f000 fe8d 	bl	8011c58 <GetFCntDown>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010f44:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d035      	beq.n	8010fb8 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8010f4c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010f50:	2b07      	cmp	r3, #7
 8010f52:	d119      	bne.n	8010f88 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8010f54:	4b99      	ldr	r3, [pc, #612]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010f56:	2208      	movs	r2, #8
 8010f58:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8010f5c:	4b98      	ldr	r3, [pc, #608]	; (80111c0 <ProcessRadioRxDone+0x830>)
 8010f5e:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d11d      	bne.n	8010fa2 <ProcessRadioRxDone+0x612>
 8010f66:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010f6a:	f023 031f 	bic.w	r3, r3, #31
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	2ba0      	cmp	r3, #160	; 0xa0
 8010f72:	d116      	bne.n	8010fa2 <ProcessRadioRxDone+0x612>
 8010f74:	4b92      	ldr	r3, [pc, #584]	; (80111c0 <ProcessRadioRxDone+0x830>)
 8010f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d111      	bne.n	8010fa2 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8010f7e:	4b90      	ldr	r3, [pc, #576]	; (80111c0 <ProcessRadioRxDone+0x830>)
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8010f86:	e00c      	b.n	8010fa2 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8010f88:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010f8c:	2b08      	cmp	r3, #8
 8010f8e:	d104      	bne.n	8010f9a <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8010f90:	4b8a      	ldr	r3, [pc, #552]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010f92:	220a      	movs	r2, #10
 8010f94:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8010f98:	e003      	b.n	8010fa2 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010f9a:	4b88      	ldr	r3, [pc, #544]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	4a85      	ldr	r2, [pc, #532]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010fa6:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	4a83      	ldr	r2, [pc, #524]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010fae:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 8010fb2:	f7ff fcc7 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010fb6:	e18f      	b.n	80112d8 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010fb8:	7bfa      	ldrb	r2, [r7, #15]
 8010fba:	6939      	ldr	r1, [r7, #16]
 8010fbc:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8010fc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010fc4:	9300      	str	r3, [sp, #0]
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010fcc:	f005 fd24 	bl	8016a18 <LoRaMacCryptoUnsecureMessage>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010fd6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00f      	beq.n	8010ffe <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8010fde:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	d104      	bne.n	8010ff0 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8010fe6:	4b75      	ldr	r3, [pc, #468]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010fe8:	220b      	movs	r2, #11
 8010fea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8010fee:	e003      	b.n	8010ff8 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8010ff0:	4b72      	ldr	r3, [pc, #456]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8010ff2:	220c      	movs	r2, #12
 8010ff4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8010ff8:	f7ff fca4 	bl	8010944 <PrepareRxDoneAbort>
                return;
 8010ffc:	e16c      	b.n	80112d8 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010ffe:	4b6f      	ldr	r3, [pc, #444]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011000:	2200      	movs	r2, #0
 8011002:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 8011006:	4a6d      	ldr	r2, [pc, #436]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011008:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801100c:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 8011010:	4b6a      	ldr	r3, [pc, #424]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011012:	2200      	movs	r2, #0
 8011014:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 8011018:	4b68      	ldr	r3, [pc, #416]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801101a:	2200      	movs	r2, #0
 801101c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	4a66      	ldr	r2, [pc, #408]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011024:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	4a64      	ldr	r2, [pc, #400]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801102c:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011030:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011034:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011038:	b2db      	uxtb	r3, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	bf14      	ite	ne
 801103e:	2301      	movne	r3, #1
 8011040:	2300      	moveq	r3, #0
 8011042:	b2da      	uxtb	r2, r3
 8011044:	4b5d      	ldr	r3, [pc, #372]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011046:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801104a:	4b5c      	ldr	r3, [pc, #368]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801104c:	2200      	movs	r2, #0
 801104e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011052:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011056:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801105a:	b2db      	uxtb	r3, r3
 801105c:	2b00      	cmp	r3, #0
 801105e:	bf14      	ite	ne
 8011060:	2301      	movne	r3, #1
 8011062:	2300      	moveq	r3, #0
 8011064:	b2da      	uxtb	r2, r3
 8011066:	4b55      	ldr	r3, [pc, #340]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011068:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801106c:	4b53      	ldr	r3, [pc, #332]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801106e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011072:	2b00      	cmp	r3, #0
 8011074:	d004      	beq.n	8011080 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011076:	4b51      	ldr	r3, [pc, #324]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011078:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801107c:	2b01      	cmp	r3, #1
 801107e:	d102      	bne.n	8011086 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011080:	4b4f      	ldr	r3, [pc, #316]	; (80111c0 <ProcessRadioRxDone+0x830>)
 8011082:	2200      	movs	r2, #0
 8011084:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011086:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801108a:	2b01      	cmp	r3, #1
 801108c:	d104      	bne.n	8011098 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801108e:	4b4b      	ldr	r3, [pc, #300]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011090:	2202      	movs	r2, #2
 8011092:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011096:	e01f      	b.n	80110d8 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011098:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801109c:	f023 031f 	bic.w	r3, r3, #31
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	2ba0      	cmp	r3, #160	; 0xa0
 80110a4:	d110      	bne.n	80110c8 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80110a6:	4b46      	ldr	r3, [pc, #280]	; (80111c0 <ProcessRadioRxDone+0x830>)
 80110a8:	2201      	movs	r2, #1
 80110aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80110ae:	4b44      	ldr	r3, [pc, #272]	; (80111c0 <ProcessRadioRxDone+0x830>)
 80110b0:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80110b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80110ba:	4a41      	ldr	r2, [pc, #260]	; (80111c0 <ProcessRadioRxDone+0x830>)
 80110bc:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80110be:	4b3f      	ldr	r3, [pc, #252]	; (80111bc <ProcessRadioRxDone+0x82c>)
 80110c0:	2201      	movs	r2, #1
 80110c2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80110c6:	e007      	b.n	80110d8 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80110c8:	4b3d      	ldr	r3, [pc, #244]	; (80111c0 <ProcessRadioRxDone+0x830>)
 80110ca:	2200      	movs	r2, #0
 80110cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80110d0:	4b3a      	ldr	r3, [pc, #232]	; (80111bc <ProcessRadioRxDone+0x82c>)
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 80110d8:	4b39      	ldr	r3, [pc, #228]	; (80111c0 <ProcessRadioRxDone+0x830>)
 80110da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d106      	bne.n	80110f0 <ProcessRadioRxDone+0x760>
 80110e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80110e6:	f003 0310 	and.w	r3, r3, #16
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d008      	beq.n	8011102 <ProcessRadioRxDone+0x772>
 80110f0:	4b33      	ldr	r3, [pc, #204]	; (80111c0 <ProcessRadioRxDone+0x830>)
 80110f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d103      	bne.n	8011102 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 80110fa:	4b30      	ldr	r3, [pc, #192]	; (80111bc <ProcessRadioRxDone+0x82c>)
 80110fc:	2201      	movs	r2, #1
 80110fe:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011102:	4b2e      	ldr	r3, [pc, #184]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011104:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011108:	4a2c      	ldr	r2, [pc, #176]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801110a:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 801110e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8011112:	4618      	mov	r0, r3
 8011114:	f001 fef2 	bl	8012efc <RemoveMacCommands>

            switch( fType )
 8011118:	7bbb      	ldrb	r3, [r7, #14]
 801111a:	2b03      	cmp	r3, #3
 801111c:	d878      	bhi.n	8011210 <ProcessRadioRxDone+0x880>
 801111e:	a201      	add	r2, pc, #4	; (adr r2, 8011124 <ProcessRadioRxDone+0x794>)
 8011120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011124:	08011135 	.word	0x08011135
 8011128:	08011185 	.word	0x08011185
 801112c:	080111c5 	.word	0x080111c5
 8011130:	080111eb 	.word	0x080111eb
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011134:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011138:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801113c:	b2db      	uxtb	r3, r3
 801113e:	461c      	mov	r4, r3
 8011140:	4b1e      	ldr	r3, [pc, #120]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011142:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011146:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 801114a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801114e:	f102 0010 	add.w	r0, r2, #16
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	460b      	mov	r3, r1
 8011156:	4622      	mov	r2, r4
 8011158:	2100      	movs	r1, #0
 801115a:	f000 fef7 	bl	8011f4c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801115e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8011162:	4b16      	ldr	r3, [pc, #88]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011164:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801116a:	4a14      	ldr	r2, [pc, #80]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801116c:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011170:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011174:	4b11      	ldr	r3, [pc, #68]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011176:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 801117a:	4b10      	ldr	r3, [pc, #64]	; (80111bc <ProcessRadioRxDone+0x82c>)
 801117c:	2201      	movs	r2, #1
 801117e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8011182:	e04c      	b.n	801121e <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011184:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011188:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801118c:	b2db      	uxtb	r3, r3
 801118e:	461c      	mov	r4, r3
 8011190:	4b0a      	ldr	r3, [pc, #40]	; (80111bc <ProcessRadioRxDone+0x82c>)
 8011192:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011196:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 801119a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801119e:	f102 0010 	add.w	r0, r2, #16
 80111a2:	9300      	str	r3, [sp, #0]
 80111a4:	460b      	mov	r3, r1
 80111a6:	4622      	mov	r2, r4
 80111a8:	2100      	movs	r1, #0
 80111aa:	f000 fecf 	bl	8011f4c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80111ae:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80111b2:	4b02      	ldr	r3, [pc, #8]	; (80111bc <ProcessRadioRxDone+0x82c>)
 80111b4:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 80111b8:	e031      	b.n	801121e <ProcessRadioRxDone+0x88e>
 80111ba:	bf00      	nop
 80111bc:	20000940 	.word	0x20000940
 80111c0:	20000e48 	.word	0x20000e48
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80111c4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80111c6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80111ca:	4b45      	ldr	r3, [pc, #276]	; (80112e0 <ProcessRadioRxDone+0x950>)
 80111cc:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80111d0:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80111d4:	9300      	str	r3, [sp, #0]
 80111d6:	460b      	mov	r3, r1
 80111d8:	2100      	movs	r1, #0
 80111da:	f000 feb7 	bl	8011f4c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80111de:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80111e2:	4b3f      	ldr	r3, [pc, #252]	; (80112e0 <ProcessRadioRxDone+0x950>)
 80111e4:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 80111e8:	e019      	b.n	801121e <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80111ea:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80111ee:	4b3c      	ldr	r3, [pc, #240]	; (80112e0 <ProcessRadioRxDone+0x950>)
 80111f0:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80111f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80111f6:	4a3a      	ldr	r2, [pc, #232]	; (80112e0 <ProcessRadioRxDone+0x950>)
 80111f8:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80111fc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011200:	4b37      	ldr	r3, [pc, #220]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011202:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011206:	4b36      	ldr	r3, [pc, #216]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011208:	2201      	movs	r2, #1
 801120a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801120e:	e006      	b.n	801121e <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011210:	4b33      	ldr	r3, [pc, #204]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011212:	2201      	movs	r2, #1
 8011214:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8011218:	f7ff fb94 	bl	8010944 <PrepareRxDoneAbort>
                    break;
 801121c:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801121e:	4a30      	ldr	r2, [pc, #192]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011220:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011224:	f043 0302 	orr.w	r3, r3, #2
 8011228:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 801122c:	e035      	b.n	801129a <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801122e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011232:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011236:	18d1      	adds	r1, r2, r3
 8011238:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801123c:	b29b      	uxth	r3, r3
 801123e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011242:	1ad3      	subs	r3, r2, r3
 8011244:	b29b      	uxth	r3, r3
 8011246:	461a      	mov	r2, r3
 8011248:	4826      	ldr	r0, [pc, #152]	; (80112e4 <ProcessRadioRxDone+0x954>)
 801124a:	f008 fb1c 	bl	8019886 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801124e:	4b24      	ldr	r3, [pc, #144]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011250:	2203      	movs	r2, #3
 8011252:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011256:	4b22      	ldr	r3, [pc, #136]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011258:	2200      	movs	r2, #0
 801125a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801125e:	4b20      	ldr	r3, [pc, #128]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011260:	4a20      	ldr	r2, [pc, #128]	; (80112e4 <ProcessRadioRxDone+0x954>)
 8011262:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011266:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801126a:	b2da      	uxtb	r2, r3
 801126c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011270:	1ad3      	subs	r3, r2, r3
 8011272:	b2da      	uxtb	r2, r3
 8011274:	4b1a      	ldr	r3, [pc, #104]	; (80112e0 <ProcessRadioRxDone+0x950>)
 8011276:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 801127a:	4a19      	ldr	r2, [pc, #100]	; (80112e0 <ProcessRadioRxDone+0x950>)
 801127c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011280:	f043 0302 	orr.w	r3, r3, #2
 8011284:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011288:	e007      	b.n	801129a <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801128a:	4b15      	ldr	r3, [pc, #84]	; (80112e0 <ProcessRadioRxDone+0x950>)
 801128c:	2201      	movs	r2, #1
 801128e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 8011292:	f7ff fb57 	bl	8010944 <PrepareRxDoneAbort>
            break;
 8011296:	e000      	b.n	801129a <ProcessRadioRxDone+0x90a>
            break;
 8011298:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 801129a:	4b11      	ldr	r3, [pc, #68]	; (80112e0 <ProcessRadioRxDone+0x950>)
 801129c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d008      	beq.n	80112b6 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80112a4:	4b0e      	ldr	r3, [pc, #56]	; (80112e0 <ProcessRadioRxDone+0x950>)
 80112a6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00b      	beq.n	80112c6 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 80112ae:	2000      	movs	r0, #0
 80112b0:	f000 fcaa 	bl	8011c08 <OnAckTimeoutTimerEvent>
 80112b4:	e007      	b.n	80112c6 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80112b6:	4b0c      	ldr	r3, [pc, #48]	; (80112e8 <ProcessRadioRxDone+0x958>)
 80112b8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d102      	bne.n	80112c6 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 80112c0:	2000      	movs	r0, #0
 80112c2:	f000 fca1 	bl	8011c08 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80112c6:	4a06      	ldr	r2, [pc, #24]	; (80112e0 <ProcessRadioRxDone+0x950>)
 80112c8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80112cc:	f043 0310 	orr.w	r3, r3, #16
 80112d0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80112d4:	f7ff fa6c 	bl	80107b0 <UpdateRxSlotIdleState>
}
 80112d8:	3798      	adds	r7, #152	; 0x98
 80112da:	46bd      	mov	sp, r7
 80112dc:	bdb0      	pop	{r4, r5, r7, pc}
 80112de:	bf00      	nop
 80112e0:	20000940 	.word	0x20000940
 80112e4:	20000b78 	.word	0x20000b78
 80112e8:	20000e48 	.word	0x20000e48

080112ec <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80112f0:	4b11      	ldr	r3, [pc, #68]	; (8011338 <ProcessRadioTxTimeout+0x4c>)
 80112f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80112f6:	2b02      	cmp	r3, #2
 80112f8:	d002      	beq.n	8011300 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 80112fa:	4b10      	ldr	r3, [pc, #64]	; (801133c <ProcessRadioTxTimeout+0x50>)
 80112fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112fe:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011300:	f7ff fa56 	bl	80107b0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011304:	4b0e      	ldr	r3, [pc, #56]	; (8011340 <ProcessRadioTxTimeout+0x54>)
 8011306:	2202      	movs	r2, #2
 8011308:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801130c:	2002      	movs	r0, #2
 801130e:	f004 fcc7 	bl	8015ca0 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011312:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <ProcessRadioTxTimeout+0x54>)
 8011314:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011318:	2b00      	cmp	r3, #0
 801131a:	d003      	beq.n	8011324 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 801131c:	4b08      	ldr	r3, [pc, #32]	; (8011340 <ProcessRadioTxTimeout+0x54>)
 801131e:	2201      	movs	r2, #1
 8011320:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011324:	4a06      	ldr	r2, [pc, #24]	; (8011340 <ProcessRadioTxTimeout+0x54>)
 8011326:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801132a:	f043 0310 	orr.w	r3, r3, #16
 801132e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8011332:	bf00      	nop
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	20000e48 	.word	0x20000e48
 801133c:	0801f460 	.word	0x0801f460
 8011340:	20000940 	.word	0x20000940

08011344 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	460a      	mov	r2, r1
 801134e:	71fb      	strb	r3, [r7, #7]
 8011350:	4613      	mov	r3, r2
 8011352:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011358:	4b40      	ldr	r3, [pc, #256]	; (801145c <HandleRadioRxErrorTimeout+0x118>)
 801135a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801135e:	2b02      	cmp	r3, #2
 8011360:	d002      	beq.n	8011368 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011362:	4b3f      	ldr	r3, [pc, #252]	; (8011460 <HandleRadioRxErrorTimeout+0x11c>)
 8011364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011366:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011368:	f003 ffdf 	bl	801532a <LoRaMacClassBIsBeaconExpected>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d007      	beq.n	8011382 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011372:	2002      	movs	r0, #2
 8011374:	f003 ff8d 	bl	8015292 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011378:	2000      	movs	r0, #0
 801137a:	f003 ffaf 	bl	80152dc <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801137e:	2301      	movs	r3, #1
 8011380:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011382:	4b36      	ldr	r3, [pc, #216]	; (801145c <HandleRadioRxErrorTimeout+0x118>)
 8011384:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011388:	2b01      	cmp	r3, #1
 801138a:	d119      	bne.n	80113c0 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801138c:	f003 ffd4 	bl	8015338 <LoRaMacClassBIsPingExpected>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d007      	beq.n	80113a6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011396:	2000      	movs	r0, #0
 8011398:	f003 ff85 	bl	80152a6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801139c:	2000      	movs	r0, #0
 801139e:	f003 ffa6 	bl	80152ee <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80113a2:	2301      	movs	r3, #1
 80113a4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80113a6:	f003 ffce 	bl	8015346 <LoRaMacClassBIsMulticastExpected>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d007      	beq.n	80113c0 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80113b0:	2000      	movs	r0, #0
 80113b2:	f003 ff82 	bl	80152ba <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80113b6:	2000      	movs	r0, #0
 80113b8:	f003 ffa2 	bl	8015300 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80113bc:	2301      	movs	r3, #1
 80113be:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80113c0:	7bfb      	ldrb	r3, [r7, #15]
 80113c2:	f083 0301 	eor.w	r3, r3, #1
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d040      	beq.n	801144e <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80113cc:	4b25      	ldr	r3, [pc, #148]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 80113ce:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d122      	bne.n	801141c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80113d6:	4b23      	ldr	r3, [pc, #140]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 80113d8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d003      	beq.n	80113e8 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80113e0:	4a20      	ldr	r2, [pc, #128]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 80113e2:	79fb      	ldrb	r3, [r7, #7]
 80113e4:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f004 fc58 	bl	8015ca0 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80113f0:	4b1a      	ldr	r3, [pc, #104]	; (801145c <HandleRadioRxErrorTimeout+0x118>)
 80113f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f4:	4618      	mov	r0, r3
 80113f6:	f00c fd0d 	bl	801de14 <UTIL_TIMER_GetElapsedTime>
 80113fa:	4602      	mov	r2, r0
 80113fc:	4b19      	ldr	r3, [pc, #100]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 80113fe:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011402:	429a      	cmp	r2, r3
 8011404:	d323      	bcc.n	801144e <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011406:	4818      	ldr	r0, [pc, #96]	; (8011468 <HandleRadioRxErrorTimeout+0x124>)
 8011408:	f00c fbd8 	bl	801dbbc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801140c:	4a15      	ldr	r2, [pc, #84]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 801140e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011412:	f043 0310 	orr.w	r3, r3, #16
 8011416:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 801141a:	e018      	b.n	801144e <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801141c:	4b11      	ldr	r3, [pc, #68]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 801141e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011422:	2b00      	cmp	r3, #0
 8011424:	d003      	beq.n	801142e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011426:	4a0f      	ldr	r2, [pc, #60]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 8011428:	79bb      	ldrb	r3, [r7, #6]
 801142a:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801142e:	79bb      	ldrb	r3, [r7, #6]
 8011430:	4618      	mov	r0, r3
 8011432:	f004 fc35 	bl	8015ca0 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011436:	4b09      	ldr	r3, [pc, #36]	; (801145c <HandleRadioRxErrorTimeout+0x118>)
 8011438:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801143c:	2b02      	cmp	r3, #2
 801143e:	d006      	beq.n	801144e <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011440:	4a08      	ldr	r2, [pc, #32]	; (8011464 <HandleRadioRxErrorTimeout+0x120>)
 8011442:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011446:	f043 0310 	orr.w	r3, r3, #16
 801144a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 801144e:	f7ff f9af 	bl	80107b0 <UpdateRxSlotIdleState>
}
 8011452:	bf00      	nop
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	20000e48 	.word	0x20000e48
 8011460:	0801f460 	.word	0x0801f460
 8011464:	20000940 	.word	0x20000940
 8011468:	20000cd8 	.word	0x20000cd8

0801146c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 801146c:	b580      	push	{r7, lr}
 801146e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011470:	2106      	movs	r1, #6
 8011472:	2005      	movs	r0, #5
 8011474:	f7ff ff66 	bl	8011344 <HandleRadioRxErrorTimeout>
}
 8011478:	bf00      	nop
 801147a:	bd80      	pop	{r7, pc}

0801147c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 801147c:	b580      	push	{r7, lr}
 801147e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011480:	2104      	movs	r1, #4
 8011482:	2003      	movs	r0, #3
 8011484:	f7ff ff5e 	bl	8011344 <HandleRadioRxErrorTimeout>
}
 8011488:	bf00      	nop
 801148a:	bd80      	pop	{r7, pc}

0801148c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011492:	f3ef 8310 	mrs	r3, PRIMASK
 8011496:	607b      	str	r3, [r7, #4]
  return(result);
 8011498:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 801149a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801149c:	b672      	cpsid	i
}
 801149e:	bf00      	nop
    events = LoRaMacRadioEvents;
 80114a0:	4b1d      	ldr	r3, [pc, #116]	; (8011518 <LoRaMacHandleIrqEvents+0x8c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80114a6:	4b1c      	ldr	r3, [pc, #112]	; (8011518 <LoRaMacHandleIrqEvents+0x8c>)
 80114a8:	2200      	movs	r2, #0
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	f383 8810 	msr	PRIMASK, r3
}
 80114b6:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d027      	beq.n	801150e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80114be:	783b      	ldrb	r3, [r7, #0]
 80114c0:	f003 0310 	and.w	r3, r3, #16
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80114ca:	f7ff f989 	bl	80107e0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80114ce:	783b      	ldrb	r3, [r7, #0]
 80114d0:	f003 0308 	and.w	r3, r3, #8
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80114da:	f7ff fa59 	bl	8010990 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80114de:	783b      	ldrb	r3, [r7, #0]
 80114e0:	f003 0304 	and.w	r3, r3, #4
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d001      	beq.n	80114ee <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 80114ea:	f7ff feff 	bl	80112ec <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80114ee:	783b      	ldrb	r3, [r7, #0]
 80114f0:	f003 0302 	and.w	r3, r3, #2
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d001      	beq.n	80114fe <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 80114fa:	f7ff ffb7 	bl	801146c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80114fe:	783b      	ldrb	r3, [r7, #0]
 8011500:	f003 0301 	and.w	r3, r3, #1
 8011504:	b2db      	uxtb	r3, r3
 8011506:	2b00      	cmp	r3, #0
 8011508:	d001      	beq.n	801150e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 801150a:	f7ff ffb7 	bl	801147c <ProcessRadioRxTimeout>
        }
    }
}
 801150e:	bf00      	nop
 8011510:	3710      	adds	r7, #16
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	200015b0 	.word	0x200015b0

0801151c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 801151c:	b480      	push	{r7}
 801151e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011520:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <LoRaMacIsBusy+0x34>)
 8011522:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011526:	2b01      	cmp	r3, #1
 8011528:	d101      	bne.n	801152e <LoRaMacIsBusy+0x12>
    {
        return false;
 801152a:	2300      	movs	r3, #0
 801152c:	e00c      	b.n	8011548 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801152e:	4b08      	ldr	r3, [pc, #32]	; (8011550 <LoRaMacIsBusy+0x34>)
 8011530:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011534:	2b00      	cmp	r3, #0
 8011536:	d106      	bne.n	8011546 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011538:	4b05      	ldr	r3, [pc, #20]	; (8011550 <LoRaMacIsBusy+0x34>)
 801153a:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 801153e:	2b01      	cmp	r3, #1
 8011540:	d101      	bne.n	8011546 <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011542:	2300      	movs	r3, #0
 8011544:	e000      	b.n	8011548 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011546:	2301      	movs	r3, #1
}
 8011548:	4618      	mov	r0, r3
 801154a:	46bd      	mov	sp, r7
 801154c:	bc80      	pop	{r7}
 801154e:	4770      	bx	lr
 8011550:	20000940 	.word	0x20000940

08011554 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011554:	b480      	push	{r7}
 8011556:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011558:	4b05      	ldr	r3, [pc, #20]	; (8011570 <LoRaMacIsStopped+0x1c>)
 801155a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801155e:	2b01      	cmp	r3, #1
 8011560:	d101      	bne.n	8011566 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011562:	2301      	movs	r3, #1
 8011564:	e000      	b.n	8011568 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	46bd      	mov	sp, r7
 801156c:	bc80      	pop	{r7}
 801156e:	4770      	bx	lr
 8011570:	20000940 	.word	0x20000940

08011574 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	4603      	mov	r3, r0
 801157c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 801157e:	4a04      	ldr	r2, [pc, #16]	; (8011590 <LoRaMacEnableRequests+0x1c>)
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011586:	bf00      	nop
 8011588:	370c      	adds	r7, #12
 801158a:	46bd      	mov	sp, r7
 801158c:	bc80      	pop	{r7}
 801158e:	4770      	bx	lr
 8011590:	20000940 	.word	0x20000940

08011594 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801159a:	4b2c      	ldr	r3, [pc, #176]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 801159c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80115a0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80115a2:	4b2a      	ldr	r3, [pc, #168]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 80115a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d14a      	bne.n	8011642 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80115ac:	4b27      	ldr	r3, [pc, #156]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 80115ae:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80115b2:	f003 0301 	and.w	r3, r3, #1
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d006      	beq.n	80115ca <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80115bc:	4a23      	ldr	r2, [pc, #140]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 80115be:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80115c2:	f36f 0300 	bfc	r3, #0, #1
 80115c6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80115ca:	4b20      	ldr	r3, [pc, #128]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 80115cc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80115d0:	f003 0304 	and.w	r3, r3, #4
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d006      	beq.n	80115e8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80115da:	4a1c      	ldr	r2, [pc, #112]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 80115dc:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80115e0:	f36f 0382 	bfc	r3, #2, #1
 80115e4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80115e8:	2001      	movs	r0, #1
 80115ea:	f7ff ffc3 	bl	8011574 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80115ee:	793b      	ldrb	r3, [r7, #4]
 80115f0:	f003 0301 	and.w	r3, r3, #1
 80115f4:	b2db      	uxtb	r3, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d005      	beq.n	8011606 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80115fa:	4b14      	ldr	r3, [pc, #80]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 80115fc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4813      	ldr	r0, [pc, #76]	; (8011650 <LoRaMacHandleRequestEvents+0xbc>)
 8011604:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011606:	793b      	ldrb	r3, [r7, #4]
 8011608:	f003 0304 	and.w	r3, r3, #4
 801160c:	b2db      	uxtb	r3, r3
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00e      	beq.n	8011630 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011612:	4810      	ldr	r0, [pc, #64]	; (8011654 <LoRaMacHandleRequestEvents+0xc0>)
 8011614:	f004 fb92 	bl	8015d3c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011618:	f004 fbe2 	bl	8015de0 <LoRaMacConfirmQueueGetCnt>
 801161c:	4603      	mov	r3, r0
 801161e:	2b00      	cmp	r3, #0
 8011620:	d006      	beq.n	8011630 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011622:	4a0a      	ldr	r2, [pc, #40]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 8011624:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011628:	f043 0304 	orr.w	r3, r3, #4
 801162c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011630:	f003 fea7 	bl	8015382 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011634:	4a05      	ldr	r2, [pc, #20]	; (801164c <LoRaMacHandleRequestEvents+0xb8>)
 8011636:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801163a:	f36f 1304 	bfc	r3, #4, #1
 801163e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011642:	bf00      	nop
 8011644:	3708      	adds	r7, #8
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	20000940 	.word	0x20000940
 8011650:	20000d74 	.word	0x20000d74
 8011654:	20000d88 	.word	0x20000d88

08011658 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 801165c:	4b16      	ldr	r3, [pc, #88]	; (80116b8 <LoRaMacHandleIndicationEvents+0x60>)
 801165e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011662:	f003 0308 	and.w	r3, r3, #8
 8011666:	b2db      	uxtb	r3, r3
 8011668:	2b00      	cmp	r3, #0
 801166a:	d00d      	beq.n	8011688 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 801166c:	4a12      	ldr	r2, [pc, #72]	; (80116b8 <LoRaMacHandleIndicationEvents+0x60>)
 801166e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011672:	f36f 03c3 	bfc	r3, #3, #1
 8011676:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 801167a:	4b0f      	ldr	r3, [pc, #60]	; (80116b8 <LoRaMacHandleIndicationEvents+0x60>)
 801167c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	490e      	ldr	r1, [pc, #56]	; (80116bc <LoRaMacHandleIndicationEvents+0x64>)
 8011684:	480e      	ldr	r0, [pc, #56]	; (80116c0 <LoRaMacHandleIndicationEvents+0x68>)
 8011686:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011688:	4b0b      	ldr	r3, [pc, #44]	; (80116b8 <LoRaMacHandleIndicationEvents+0x60>)
 801168a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801168e:	f003 0302 	and.w	r3, r3, #2
 8011692:	b2db      	uxtb	r3, r3
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00d      	beq.n	80116b4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011698:	4a07      	ldr	r2, [pc, #28]	; (80116b8 <LoRaMacHandleIndicationEvents+0x60>)
 801169a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801169e:	f36f 0341 	bfc	r3, #1, #1
 80116a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80116a6:	4b04      	ldr	r3, [pc, #16]	; (80116b8 <LoRaMacHandleIndicationEvents+0x60>)
 80116a8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	4903      	ldr	r1, [pc, #12]	; (80116bc <LoRaMacHandleIndicationEvents+0x64>)
 80116b0:	4804      	ldr	r0, [pc, #16]	; (80116c4 <LoRaMacHandleIndicationEvents+0x6c>)
 80116b2:	4798      	blx	r3
    }
}
 80116b4:	bf00      	nop
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	20000940 	.word	0x20000940
 80116bc:	20000dbc 	.word	0x20000dbc
 80116c0:	20000d9c 	.word	0x20000d9c
 80116c4:	20000d58 	.word	0x20000d58

080116c8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80116ce:	4b32      	ldr	r3, [pc, #200]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 80116d0:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80116d4:	f003 0301 	and.w	r3, r3, #1
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d058      	beq.n	8011790 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 80116de:	2300      	movs	r3, #0
 80116e0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80116e2:	2300      	movs	r3, #0
 80116e4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80116e6:	4b2c      	ldr	r3, [pc, #176]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 80116e8:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d004      	beq.n	80116fa <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80116f0:	4b29      	ldr	r3, [pc, #164]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 80116f2:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80116f6:	2b03      	cmp	r3, #3
 80116f8:	d104      	bne.n	8011704 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80116fa:	f002 f82d 	bl	8013758 <CheckRetransUnconfirmedUplink>
 80116fe:	4603      	mov	r3, r0
 8011700:	71fb      	strb	r3, [r7, #7]
 8011702:	e020      	b.n	8011746 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011704:	4b24      	ldr	r3, [pc, #144]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 8011706:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 801170a:	2b01      	cmp	r3, #1
 801170c:	d11b      	bne.n	8011746 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 801170e:	4b22      	ldr	r3, [pc, #136]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 8011710:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011714:	2b00      	cmp	r3, #0
 8011716:	d014      	beq.n	8011742 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011718:	f002 f84a 	bl	80137b0 <CheckRetransConfirmedUplink>
 801171c:	4603      	mov	r3, r0
 801171e:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011720:	4b1e      	ldr	r3, [pc, #120]	; (801179c <LoRaMacHandleMcpsRequest+0xd4>)
 8011722:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011726:	2b00      	cmp	r3, #0
 8011728:	d10d      	bne.n	8011746 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 801172a:	79fb      	ldrb	r3, [r7, #7]
 801172c:	f083 0301 	eor.w	r3, r3, #1
 8011730:	b2db      	uxtb	r3, r3
 8011732:	2b00      	cmp	r3, #0
 8011734:	d002      	beq.n	801173c <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011736:	f002 f8cd 	bl	80138d4 <AckTimeoutRetriesProcess>
 801173a:	e004      	b.n	8011746 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 801173c:	f002 f908 	bl	8013950 <AckTimeoutRetriesFinalize>
 8011740:	e001      	b.n	8011746 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011742:	2301      	movs	r3, #1
 8011744:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011746:	79fb      	ldrb	r3, [r7, #7]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d00d      	beq.n	8011768 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 801174c:	4814      	ldr	r0, [pc, #80]	; (80117a0 <LoRaMacHandleMcpsRequest+0xd8>)
 801174e:	f00c fa35 	bl	801dbbc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011752:	4b11      	ldr	r3, [pc, #68]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 8011754:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011758:	f023 0320 	bic.w	r3, r3, #32
 801175c:	4a0e      	ldr	r2, [pc, #56]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 801175e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011762:	f002 f847 	bl	80137f4 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011766:	e013      	b.n	8011790 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011768:	79bb      	ldrb	r3, [r7, #6]
 801176a:	f083 0301 	eor.w	r3, r3, #1
 801176e:	b2db      	uxtb	r3, r3
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00d      	beq.n	8011790 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011774:	4a08      	ldr	r2, [pc, #32]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 8011776:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801177a:	f36f 1304 	bfc	r3, #4, #1
 801177e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011782:	4b05      	ldr	r3, [pc, #20]	; (8011798 <LoRaMacHandleMcpsRequest+0xd0>)
 8011784:	2200      	movs	r2, #0
 8011786:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 801178a:	2000      	movs	r0, #0
 801178c:	f000 f992 	bl	8011ab4 <OnTxDelayedTimerEvent>
}
 8011790:	bf00      	nop
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	20000940 	.word	0x20000940
 801179c:	20000e48 	.word	0x20000e48
 80117a0:	20000ca8 	.word	0x20000ca8

080117a4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80117a8:	4b1b      	ldr	r3, [pc, #108]	; (8011818 <LoRaMacHandleMlmeRequest+0x74>)
 80117aa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80117ae:	f003 0304 	and.w	r3, r3, #4
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d02c      	beq.n	8011812 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80117b8:	2001      	movs	r0, #1
 80117ba:	f004 faa5 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 80117be:	4603      	mov	r3, r0
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d012      	beq.n	80117ea <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80117c4:	2001      	movs	r0, #1
 80117c6:	f004 fa41 	bl	8015c4c <LoRaMacConfirmQueueGetStatus>
 80117ca:	4603      	mov	r3, r0
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d103      	bne.n	80117d8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80117d0:	4b11      	ldr	r3, [pc, #68]	; (8011818 <LoRaMacHandleMlmeRequest+0x74>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80117d8:	4b0f      	ldr	r3, [pc, #60]	; (8011818 <LoRaMacHandleMlmeRequest+0x74>)
 80117da:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80117de:	f023 0302 	bic.w	r3, r3, #2
 80117e2:	4a0d      	ldr	r2, [pc, #52]	; (8011818 <LoRaMacHandleMlmeRequest+0x74>)
 80117e4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 80117e8:	e013      	b.n	8011812 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80117ea:	2006      	movs	r0, #6
 80117ec:	f004 fa8c 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d105      	bne.n	8011802 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80117f6:	2007      	movs	r0, #7
 80117f8:	f004 fa86 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 80117fc:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d007      	beq.n	8011812 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011802:	4b05      	ldr	r3, [pc, #20]	; (8011818 <LoRaMacHandleMlmeRequest+0x74>)
 8011804:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011808:	f023 0302 	bic.w	r3, r3, #2
 801180c:	4a02      	ldr	r2, [pc, #8]	; (8011818 <LoRaMacHandleMlmeRequest+0x74>)
 801180e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011812:	bf00      	nop
 8011814:	bd80      	pop	{r7, pc}
 8011816:	bf00      	nop
 8011818:	20000940 	.word	0x20000940

0801181c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 801181c:	b580      	push	{r7, lr}
 801181e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011820:	200c      	movs	r0, #12
 8011822:	f004 fa71 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 8011826:	4603      	mov	r3, r0
 8011828:	2b00      	cmp	r3, #0
 801182a:	d019      	beq.n	8011860 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801182c:	4b0e      	ldr	r3, [pc, #56]	; (8011868 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801182e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011832:	f003 0301 	and.w	r3, r3, #1
 8011836:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011838:	2b00      	cmp	r3, #0
 801183a:	d111      	bne.n	8011860 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801183c:	4b0a      	ldr	r3, [pc, #40]	; (8011868 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801183e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011842:	f003 0304 	and.w	r3, r3, #4
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2b00      	cmp	r3, #0
 801184a:	d009      	beq.n	8011860 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801184c:	4b06      	ldr	r3, [pc, #24]	; (8011868 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801184e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011852:	f023 0302 	bic.w	r3, r3, #2
 8011856:	4a04      	ldr	r2, [pc, #16]	; (8011868 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011858:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 801185c:	2301      	movs	r3, #1
 801185e:	e000      	b.n	8011862 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	20000940 	.word	0x20000940

0801186c <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 801186c:	b480      	push	{r7}
 801186e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011870:	4b0d      	ldr	r3, [pc, #52]	; (80118a8 <LoRaMacCheckForRxAbort+0x3c>)
 8011872:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801187a:	2b00      	cmp	r3, #0
 801187c:	d00f      	beq.n	801189e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801187e:	4b0a      	ldr	r3, [pc, #40]	; (80118a8 <LoRaMacCheckForRxAbort+0x3c>)
 8011880:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011888:	4a07      	ldr	r2, [pc, #28]	; (80118a8 <LoRaMacCheckForRxAbort+0x3c>)
 801188a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801188e:	4b06      	ldr	r3, [pc, #24]	; (80118a8 <LoRaMacCheckForRxAbort+0x3c>)
 8011890:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011894:	f023 0302 	bic.w	r3, r3, #2
 8011898:	4a03      	ldr	r2, [pc, #12]	; (80118a8 <LoRaMacCheckForRxAbort+0x3c>)
 801189a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801189e:	bf00      	nop
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bc80      	pop	{r7}
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop
 80118a8:	20000940 	.word	0x20000940

080118ac <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80118b4:	2300      	movs	r3, #0
 80118b6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80118b8:	2300      	movs	r3, #0
 80118ba:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80118bc:	4b50      	ldr	r3, [pc, #320]	; (8011a00 <LoRaMacHandleNvm+0x154>)
 80118be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f040 8098 	bne.w	80119f8 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2124      	movs	r1, #36	; 0x24
 80118cc:	4618      	mov	r0, r3
 80118ce:	f008 f82f 	bl	8019930 <Crc32>
 80118d2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d8:	68ba      	ldr	r2, [r7, #8]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d006      	beq.n	80118ec <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	68ba      	ldr	r2, [r7, #8]
 80118e2:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80118e4:	89fb      	ldrh	r3, [r7, #14]
 80118e6:	f043 0301 	orr.w	r3, r3, #1
 80118ea:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	3328      	adds	r3, #40	; 0x28
 80118f0:	211c      	movs	r1, #28
 80118f2:	4618      	mov	r0, r3
 80118f4:	f008 f81c 	bl	8019930 <Crc32>
 80118f8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118fe:	68ba      	ldr	r2, [r7, #8]
 8011900:	429a      	cmp	r2, r3
 8011902:	d006      	beq.n	8011912 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	68ba      	ldr	r2, [r7, #8]
 8011908:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801190a:	89fb      	ldrh	r3, [r7, #14]
 801190c:	f043 0302 	orr.w	r3, r3, #2
 8011910:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	3348      	adds	r3, #72	; 0x48
 8011916:	21fc      	movs	r1, #252	; 0xfc
 8011918:	4618      	mov	r0, r3
 801191a:	f008 f809 	bl	8019930 <Crc32>
 801191e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011926:	68ba      	ldr	r2, [r7, #8]
 8011928:	429a      	cmp	r2, r3
 801192a:	d007      	beq.n	801193c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	68ba      	ldr	r2, [r7, #8]
 8011930:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011934:	89fb      	ldrh	r3, [r7, #14]
 8011936:	f043 0304 	orr.w	r3, r3, #4
 801193a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011942:	21d4      	movs	r1, #212	; 0xd4
 8011944:	4618      	mov	r0, r3
 8011946:	f007 fff3 	bl	8019930 <Crc32>
 801194a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011952:	68ba      	ldr	r2, [r7, #8]
 8011954:	429a      	cmp	r2, r3
 8011956:	d007      	beq.n	8011968 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	68ba      	ldr	r2, [r7, #8]
 801195c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011960:	89fb      	ldrh	r3, [r7, #14]
 8011962:	f043 0308 	orr.w	r3, r3, #8
 8011966:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 801196e:	2190      	movs	r1, #144	; 0x90
 8011970:	4618      	mov	r0, r3
 8011972:	f007 ffdd 	bl	8019930 <Crc32>
 8011976:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	429a      	cmp	r2, r3
 8011982:	d007      	beq.n	8011994 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	68ba      	ldr	r2, [r7, #8]
 8011988:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801198c:	89fb      	ldrh	r3, [r7, #14]
 801198e:	f043 0310 	orr.w	r3, r3, #16
 8011992:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 801199a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 801199e:	4618      	mov	r0, r3
 80119a0:	f007 ffc6 	bl	8019930 <Crc32>
 80119a4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80119ac:	68ba      	ldr	r2, [r7, #8]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d007      	beq.n	80119c2 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	68ba      	ldr	r2, [r7, #8]
 80119b6:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80119ba:	89fb      	ldrh	r3, [r7, #14]
 80119bc:	f043 0320 	orr.w	r3, r3, #32
 80119c0:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 80119c8:	2114      	movs	r1, #20
 80119ca:	4618      	mov	r0, r3
 80119cc:	f007 ffb0 	bl	8019930 <Crc32>
 80119d0:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d007      	beq.n	80119ee <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	68ba      	ldr	r2, [r7, #8]
 80119e2:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80119e6:	89fb      	ldrh	r3, [r7, #14]
 80119e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119ec:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80119ee:	89fb      	ldrh	r3, [r7, #14]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f001 ff51 	bl	8013898 <CallNvmDataChangeCallback>
 80119f6:	e000      	b.n	80119fa <LoRaMacHandleNvm+0x14e>
        return;
 80119f8:	bf00      	nop
}
 80119fa:	3710      	adds	r7, #16
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	20000940 	.word	0x20000940

08011a04 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011a0e:	f7ff fd3d 	bl	801148c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011a12:	f003 fd1a 	bl	801544a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011a16:	4b25      	ldr	r3, [pc, #148]	; (8011aac <LoRaMacProcess+0xa8>)
 8011a18:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011a1c:	f003 0310 	and.w	r3, r3, #16
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d023      	beq.n	8011a6e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011a26:	2000      	movs	r0, #0
 8011a28:	f7ff fda4 	bl	8011574 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011a2c:	f7ff ff1e 	bl	801186c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011a30:	f001 ffc2 	bl	80139b8 <IsRequestPending>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d006      	beq.n	8011a48 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011a3a:	f7ff feef 	bl	801181c <LoRaMacCheckForBeaconAcquisition>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	461a      	mov	r2, r3
 8011a42:	79fb      	ldrb	r3, [r7, #7]
 8011a44:	4313      	orrs	r3, r2
 8011a46:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011a48:	79fb      	ldrb	r3, [r7, #7]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d103      	bne.n	8011a56 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011a4e:	f7ff fea9 	bl	80117a4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011a52:	f7ff fe39 	bl	80116c8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011a56:	f7ff fd9d 	bl	8011594 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	f7ff fd8a 	bl	8011574 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011a60:	4a12      	ldr	r2, [pc, #72]	; (8011aac <LoRaMacProcess+0xa8>)
 8011a62:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a66:	f043 0320 	orr.w	r3, r3, #32
 8011a6a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8011a6e:	f7ff fdf3 	bl	8011658 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011a72:	4b0e      	ldr	r3, [pc, #56]	; (8011aac <LoRaMacProcess+0xa8>)
 8011a74:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	d101      	bne.n	8011a80 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8011a7c:	f001 fbb8 	bl	80131f0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011a80:	4b0a      	ldr	r3, [pc, #40]	; (8011aac <LoRaMacProcess+0xa8>)
 8011a82:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011a86:	f003 0320 	and.w	r3, r3, #32
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d009      	beq.n	8011aa4 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011a90:	4a06      	ldr	r2, [pc, #24]	; (8011aac <LoRaMacProcess+0xa8>)
 8011a92:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a96:	f36f 1345 	bfc	r3, #5, #1
 8011a9a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8011a9e:	4804      	ldr	r0, [pc, #16]	; (8011ab0 <LoRaMacProcess+0xac>)
 8011aa0:	f7ff ff04 	bl	80118ac <LoRaMacHandleNvm>
    }
}
 8011aa4:	bf00      	nop
 8011aa6:	3708      	adds	r7, #8
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	20000940 	.word	0x20000940
 8011ab0:	20000e48 	.word	0x20000e48

08011ab4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011abc:	4817      	ldr	r0, [pc, #92]	; (8011b1c <OnTxDelayedTimerEvent+0x68>)
 8011abe:	f00c f87d 	bl	801dbbc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011ac2:	4b17      	ldr	r3, [pc, #92]	; (8011b20 <OnTxDelayedTimerEvent+0x6c>)
 8011ac4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ac8:	f023 0320 	bic.w	r3, r3, #32
 8011acc:	4a14      	ldr	r2, [pc, #80]	; (8011b20 <OnTxDelayedTimerEvent+0x6c>)
 8011ace:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011ad2:	2001      	movs	r0, #1
 8011ad4:	f001 f8e4 	bl	8012ca0 <ScheduleTx>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d018      	beq.n	8011b10 <OnTxDelayedTimerEvent+0x5c>
 8011ade:	2b0b      	cmp	r3, #11
 8011ae0:	d016      	beq.n	8011b10 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011ae2:	4b10      	ldr	r3, [pc, #64]	; (8011b24 <OnTxDelayedTimerEvent+0x70>)
 8011ae4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	4b0d      	ldr	r3, [pc, #52]	; (8011b20 <OnTxDelayedTimerEvent+0x6c>)
 8011aec:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011af0:	4b0b      	ldr	r3, [pc, #44]	; (8011b20 <OnTxDelayedTimerEvent+0x6c>)
 8011af2:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8011af6:	4b0a      	ldr	r3, [pc, #40]	; (8011b20 <OnTxDelayedTimerEvent+0x6c>)
 8011af8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011afc:	4b08      	ldr	r3, [pc, #32]	; (8011b20 <OnTxDelayedTimerEvent+0x6c>)
 8011afe:	2209      	movs	r2, #9
 8011b00:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8011b04:	2009      	movs	r0, #9
 8011b06:	f004 f8cb 	bl	8015ca0 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011b0a:	f001 fe73 	bl	80137f4 <StopRetransmission>
            break;
 8011b0e:	e000      	b.n	8011b12 <OnTxDelayedTimerEvent+0x5e>
            break;
 8011b10:	bf00      	nop
        }
    }
}
 8011b12:	bf00      	nop
 8011b14:	3708      	adds	r7, #8
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	20000ca8 	.word	0x20000ca8
 8011b20:	20000940 	.word	0x20000940
 8011b24:	20000e48 	.word	0x20000e48

08011b28 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011b30:	4b14      	ldr	r3, [pc, #80]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b32:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011b36:	4b13      	ldr	r3, [pc, #76]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b38:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011b3c:	4b12      	ldr	r3, [pc, #72]	; (8011b88 <OnRxWindow1TimerEvent+0x60>)
 8011b3e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011b42:	b25a      	sxtb	r2, r3
 8011b44:	4b0f      	ldr	r3, [pc, #60]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b46:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b4a:	4b0f      	ldr	r3, [pc, #60]	; (8011b88 <OnRxWindow1TimerEvent+0x60>)
 8011b4c:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011b50:	4b0c      	ldr	r3, [pc, #48]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b52:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011b56:	4b0c      	ldr	r3, [pc, #48]	; (8011b88 <OnRxWindow1TimerEvent+0x60>)
 8011b58:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011b5c:	4b09      	ldr	r3, [pc, #36]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b5e:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011b62:	4b08      	ldr	r3, [pc, #32]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b64:	2200      	movs	r2, #0
 8011b66:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011b6a:	4b06      	ldr	r3, [pc, #24]	; (8011b84 <OnRxWindow1TimerEvent+0x5c>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011b72:	4906      	ldr	r1, [pc, #24]	; (8011b8c <OnRxWindow1TimerEvent+0x64>)
 8011b74:	4806      	ldr	r0, [pc, #24]	; (8011b90 <OnRxWindow1TimerEvent+0x68>)
 8011b76:	f001 fb07 	bl	8013188 <RxWindowSetup>
}
 8011b7a:	bf00      	nop
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20000940 	.word	0x20000940
 8011b88:	20000e48 	.word	0x20000e48
 8011b8c:	20000cf8 	.word	0x20000cf8
 8011b90:	20000cc0 	.word	0x20000cc0

08011b94 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b082      	sub	sp, #8
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011b9c:	4b16      	ldr	r3, [pc, #88]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011b9e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d023      	beq.n	8011bee <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011ba6:	4b14      	ldr	r3, [pc, #80]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011ba8:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011bac:	4b12      	ldr	r3, [pc, #72]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011bae:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011bb2:	4b12      	ldr	r3, [pc, #72]	; (8011bfc <OnRxWindow2TimerEvent+0x68>)
 8011bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb6:	4a10      	ldr	r2, [pc, #64]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011bb8:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bbc:	4b0f      	ldr	r3, [pc, #60]	; (8011bfc <OnRxWindow2TimerEvent+0x68>)
 8011bbe:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011bc2:	4b0d      	ldr	r3, [pc, #52]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011bc4:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011bc8:	4b0c      	ldr	r3, [pc, #48]	; (8011bfc <OnRxWindow2TimerEvent+0x68>)
 8011bca:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011bce:	4b0a      	ldr	r3, [pc, #40]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011bd0:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011bd4:	4b08      	ldr	r3, [pc, #32]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011bdc:	4b06      	ldr	r3, [pc, #24]	; (8011bf8 <OnRxWindow2TimerEvent+0x64>)
 8011bde:	2201      	movs	r2, #1
 8011be0:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011be4:	4906      	ldr	r1, [pc, #24]	; (8011c00 <OnRxWindow2TimerEvent+0x6c>)
 8011be6:	4807      	ldr	r0, [pc, #28]	; (8011c04 <OnRxWindow2TimerEvent+0x70>)
 8011be8:	f001 face 	bl	8013188 <RxWindowSetup>
 8011bec:	e000      	b.n	8011bf0 <OnRxWindow2TimerEvent+0x5c>
        return;
 8011bee:	bf00      	nop
}
 8011bf0:	3708      	adds	r7, #8
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	20000940 	.word	0x20000940
 8011bfc:	20000e48 	.word	0x20000e48
 8011c00:	20000d0c 	.word	0x20000d0c
 8011c04:	20000cd8 	.word	0x20000cd8

08011c08 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011c10:	480e      	ldr	r0, [pc, #56]	; (8011c4c <OnAckTimeoutTimerEvent+0x44>)
 8011c12:	f00b ffd3 	bl	801dbbc <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011c16:	4b0e      	ldr	r3, [pc, #56]	; (8011c50 <OnAckTimeoutTimerEvent+0x48>)
 8011c18:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d003      	beq.n	8011c28 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8011c20:	4b0b      	ldr	r3, [pc, #44]	; (8011c50 <OnAckTimeoutTimerEvent+0x48>)
 8011c22:	2201      	movs	r2, #1
 8011c24:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011c28:	4b0a      	ldr	r3, [pc, #40]	; (8011c54 <OnAckTimeoutTimerEvent+0x4c>)
 8011c2a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011c2e:	2b02      	cmp	r3, #2
 8011c30:	d106      	bne.n	8011c40 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011c32:	4a07      	ldr	r2, [pc, #28]	; (8011c50 <OnAckTimeoutTimerEvent+0x48>)
 8011c34:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c38:	f043 0310 	orr.w	r3, r3, #16
 8011c3c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 8011c40:	f001 fe14 	bl	801386c <OnMacProcessNotify>
}
 8011c44:	bf00      	nop
 8011c46:	3708      	adds	r7, #8
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	20000d34 	.word	0x20000d34
 8011c50:	20000940 	.word	0x20000940
 8011c54:	20000e48 	.word	0x20000e48

08011c58 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b084      	sub	sp, #16
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60ba      	str	r2, [r7, #8]
 8011c60:	607b      	str	r3, [r7, #4]
 8011c62:	4603      	mov	r3, r0
 8011c64:	73fb      	strb	r3, [r7, #15]
 8011c66:	460b      	mov	r3, r1
 8011c68:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d005      	beq.n	8011c7c <GetFCntDown+0x24>
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d002      	beq.n	8011c7c <GetFCntDown+0x24>
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d101      	bne.n	8011c80 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c7c:	230a      	movs	r3, #10
 8011c7e:	e029      	b.n	8011cd4 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011c80:	7bfb      	ldrb	r3, [r7, #15]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d016      	beq.n	8011cb4 <GetFCntDown+0x5c>
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d118      	bne.n	8011cbc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8011c8a:	79bb      	ldrb	r3, [r7, #6]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d10d      	bne.n	8011cac <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011c90:	7bbb      	ldrb	r3, [r7, #14]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d002      	beq.n	8011c9c <GetFCntDown+0x44>
 8011c96:	7bbb      	ldrb	r3, [r7, #14]
 8011c98:	2b03      	cmp	r3, #3
 8011c9a:	d103      	bne.n	8011ca4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8011ca2:	e00d      	b.n	8011cc0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8011ca4:	69fb      	ldr	r3, [r7, #28]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	701a      	strb	r2, [r3, #0]
            break;
 8011caa:	e009      	b.n	8011cc0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	2203      	movs	r2, #3
 8011cb0:	701a      	strb	r2, [r3, #0]
            break;
 8011cb2:	e005      	b.n	8011cc0 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	2204      	movs	r2, #4
 8011cb8:	701a      	strb	r2, [r3, #0]
            break;
 8011cba:	e001      	b.n	8011cc0 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011cbc:	2305      	movs	r3, #5
 8011cbe:	e009      	b.n	8011cd4 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8011cc0:	69fb      	ldr	r3, [r7, #28]
 8011cc2:	7818      	ldrb	r0, [r3, #0]
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	89db      	ldrh	r3, [r3, #14]
 8011cc8:	461a      	mov	r2, r3
 8011cca:	8b39      	ldrh	r1, [r7, #24]
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	f004 fc25 	bl	801651c <LoRaMacCryptoGetFCntDown>
 8011cd2:	4603      	mov	r3, r0
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8011cdc:	b5b0      	push	{r4, r5, r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8011cea:	4b6d      	ldr	r3, [pc, #436]	; (8011ea0 <SwitchClass+0x1c4>)
 8011cec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	f000 80b9 	beq.w	8011e68 <SwitchClass+0x18c>
 8011cf6:	2b02      	cmp	r3, #2
 8011cf8:	f300 80cc 	bgt.w	8011e94 <SwitchClass+0x1b8>
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d003      	beq.n	8011d08 <SwitchClass+0x2c>
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	f000 80a3 	beq.w	8011e4c <SwitchClass+0x170>
 8011d06:	e0c5      	b.n	8011e94 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8011d08:	79fb      	ldrb	r3, [r7, #7]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d109      	bne.n	8011d22 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011d0e:	4b64      	ldr	r3, [pc, #400]	; (8011ea0 <SwitchClass+0x1c4>)
 8011d10:	4a63      	ldr	r2, [pc, #396]	; (8011ea0 <SwitchClass+0x1c4>)
 8011d12:	3374      	adds	r3, #116	; 0x74
 8011d14:	326c      	adds	r2, #108	; 0x6c
 8011d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d1a:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8011d22:	79fb      	ldrb	r3, [r7, #7]
 8011d24:	2b01      	cmp	r3, #1
 8011d26:	d10c      	bne.n	8011d42 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011d28:	79fb      	ldrb	r3, [r7, #7]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f003 fb2f 	bl	801538e <LoRaMacClassBSwitchClass>
 8011d30:	4603      	mov	r3, r0
 8011d32:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d103      	bne.n	8011d42 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8011d3a:	4a59      	ldr	r2, [pc, #356]	; (8011ea0 <SwitchClass+0x1c4>)
 8011d3c:	79fb      	ldrb	r3, [r7, #7]
 8011d3e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8011d42:	79fb      	ldrb	r3, [r7, #7]
 8011d44:	2b02      	cmp	r3, #2
 8011d46:	f040 80a0 	bne.w	8011e8a <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011d4a:	4a55      	ldr	r2, [pc, #340]	; (8011ea0 <SwitchClass+0x1c4>)
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011d52:	4a54      	ldr	r2, [pc, #336]	; (8011ea4 <SwitchClass+0x1c8>)
 8011d54:	4b53      	ldr	r3, [pc, #332]	; (8011ea4 <SwitchClass+0x1c8>)
 8011d56:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011d5a:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011d62:	682b      	ldr	r3, [r5, #0]
 8011d64:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011d66:	4b4f      	ldr	r3, [pc, #316]	; (8011ea4 <SwitchClass+0x1c8>)
 8011d68:	2202      	movs	r2, #2
 8011d6a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011d6e:	2300      	movs	r3, #0
 8011d70:	73bb      	strb	r3, [r7, #14]
 8011d72:	e05b      	b.n	8011e2c <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011d74:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011d78:	4949      	ldr	r1, [pc, #292]	; (8011ea0 <SwitchClass+0x1c4>)
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	005b      	lsls	r3, r3, #1
 8011d7e:	4413      	add	r3, r2
 8011d80:	011b      	lsls	r3, r3, #4
 8011d82:	440b      	add	r3, r1
 8011d84:	33e9      	adds	r3, #233	; 0xe9
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d049      	beq.n	8011e20 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8011d8c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011d90:	4943      	ldr	r1, [pc, #268]	; (8011ea0 <SwitchClass+0x1c4>)
 8011d92:	4613      	mov	r3, r2
 8011d94:	005b      	lsls	r3, r3, #1
 8011d96:	4413      	add	r3, r2
 8011d98:	011b      	lsls	r3, r3, #4
 8011d9a:	440b      	add	r3, r1
 8011d9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011da0:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011da2:	2b02      	cmp	r3, #2
 8011da4:	d13c      	bne.n	8011e20 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8011da6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011daa:	493d      	ldr	r1, [pc, #244]	; (8011ea0 <SwitchClass+0x1c4>)
 8011dac:	4613      	mov	r3, r2
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	4413      	add	r3, r2
 8011db2:	011b      	lsls	r3, r3, #4
 8011db4:	440b      	add	r3, r1
 8011db6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4a38      	ldr	r2, [pc, #224]	; (8011ea0 <SwitchClass+0x1c4>)
 8011dbe:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8011dc0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011dc4:	4936      	ldr	r1, [pc, #216]	; (8011ea0 <SwitchClass+0x1c4>)
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	4413      	add	r3, r2
 8011dcc:	011b      	lsls	r3, r3, #4
 8011dce:	440b      	add	r3, r1
 8011dd0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8011dd8:	b2da      	uxtb	r2, r3
 8011dda:	4b31      	ldr	r3, [pc, #196]	; (8011ea0 <SwitchClass+0x1c4>)
 8011ddc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011de0:	4b30      	ldr	r3, [pc, #192]	; (8011ea4 <SwitchClass+0x1c8>)
 8011de2:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011de6:	4b2f      	ldr	r3, [pc, #188]	; (8011ea4 <SwitchClass+0x1c8>)
 8011de8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011dec:	4b2c      	ldr	r3, [pc, #176]	; (8011ea0 <SwitchClass+0x1c4>)
 8011dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011df0:	4a2c      	ldr	r2, [pc, #176]	; (8011ea4 <SwitchClass+0x1c8>)
 8011df2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011df6:	4b2a      	ldr	r3, [pc, #168]	; (8011ea0 <SwitchClass+0x1c4>)
 8011df8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011dfc:	4b29      	ldr	r3, [pc, #164]	; (8011ea4 <SwitchClass+0x1c8>)
 8011dfe:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011e02:	4b27      	ldr	r3, [pc, #156]	; (8011ea0 <SwitchClass+0x1c4>)
 8011e04:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011e08:	4b26      	ldr	r3, [pc, #152]	; (8011ea4 <SwitchClass+0x1c8>)
 8011e0a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011e0e:	4b25      	ldr	r3, [pc, #148]	; (8011ea4 <SwitchClass+0x1c8>)
 8011e10:	2203      	movs	r2, #3
 8011e12:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011e16:	4b23      	ldr	r3, [pc, #140]	; (8011ea4 <SwitchClass+0x1c8>)
 8011e18:	2201      	movs	r2, #1
 8011e1a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8011e1e:	e009      	b.n	8011e34 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	3301      	adds	r3, #1
 8011e28:	b2db      	uxtb	r3, r3
 8011e2a:	73bb      	strb	r3, [r7, #14]
 8011e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	dd9f      	ble.n	8011d74 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011e34:	4b1b      	ldr	r3, [pc, #108]	; (8011ea4 <SwitchClass+0x1c8>)
 8011e36:	2200      	movs	r2, #0
 8011e38:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011e3c:	4b1a      	ldr	r3, [pc, #104]	; (8011ea8 <SwitchClass+0x1cc>)
 8011e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e40:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8011e42:	f001 f9d5 	bl	80131f0 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8011e46:	2300      	movs	r3, #0
 8011e48:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011e4a:	e01e      	b.n	8011e8a <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011e4c:	79fb      	ldrb	r3, [r7, #7]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f003 fa9d 	bl	801538e <LoRaMacClassBSwitchClass>
 8011e54:	4603      	mov	r3, r0
 8011e56:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8011e58:	7bfb      	ldrb	r3, [r7, #15]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d117      	bne.n	8011e8e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e5e:	4a10      	ldr	r2, [pc, #64]	; (8011ea0 <SwitchClass+0x1c4>)
 8011e60:	79fb      	ldrb	r3, [r7, #7]
 8011e62:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8011e66:	e012      	b.n	8011e8e <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011e68:	79fb      	ldrb	r3, [r7, #7]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d111      	bne.n	8011e92 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8011e6e:	4b0d      	ldr	r3, [pc, #52]	; (8011ea4 <SwitchClass+0x1c8>)
 8011e70:	2206      	movs	r2, #6
 8011e72:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e76:	4a0a      	ldr	r2, [pc, #40]	; (8011ea0 <SwitchClass+0x1c4>)
 8011e78:	79fb      	ldrb	r3, [r7, #7]
 8011e7a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011e7e:	4b0a      	ldr	r3, [pc, #40]	; (8011ea8 <SwitchClass+0x1cc>)
 8011e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e82:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011e84:	2300      	movs	r3, #0
 8011e86:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8011e88:	e003      	b.n	8011e92 <SwitchClass+0x1b6>
            break;
 8011e8a:	bf00      	nop
 8011e8c:	e002      	b.n	8011e94 <SwitchClass+0x1b8>
            break;
 8011e8e:	bf00      	nop
 8011e90:	e000      	b.n	8011e94 <SwitchClass+0x1b8>
            break;
 8011e92:	bf00      	nop
        }
    }

    return status;
 8011e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3710      	adds	r7, #16
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	20000e48 	.word	0x20000e48
 8011ea4:	20000940 	.word	0x20000940
 8011ea8:	0801f460 	.word	0x0801f460

08011eac <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011eb6:	4b10      	ldr	r3, [pc, #64]	; (8011ef8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011eb8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011ebc:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011ebe:	79fb      	ldrb	r3, [r7, #7]
 8011ec0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011ec2:	230d      	movs	r3, #13
 8011ec4:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011ec6:	4b0c      	ldr	r3, [pc, #48]	; (8011ef8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011ec8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d001      	beq.n	8011ed4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011ed0:	230e      	movs	r3, #14
 8011ed2:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ed4:	4b08      	ldr	r3, [pc, #32]	; (8011ef8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011ed6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011eda:	f107 0210 	add.w	r2, r7, #16
 8011ede:	4611      	mov	r1, r2
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f005 f9b6 	bl	8017252 <RegionGetPhyParam>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	b2db      	uxtb	r3, r3
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3718      	adds	r7, #24
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	20000e48 	.word	0x20000e48

08011efc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	4603      	mov	r3, r0
 8011f04:	71fb      	strb	r3, [r7, #7]
 8011f06:	460b      	mov	r3, r1
 8011f08:	71bb      	strb	r3, [r7, #6]
 8011f0a:	4613      	mov	r3, r2
 8011f0c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011f16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7ff ffc6 	bl	8011eac <GetMaxAppPayloadWithoutFOptsLength>
 8011f20:	4603      	mov	r3, r0
 8011f22:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	797b      	ldrb	r3, [r7, #5]
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	4413      	add	r3, r2
 8011f2e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8011f30:	89ba      	ldrh	r2, [r7, #12]
 8011f32:	89fb      	ldrh	r3, [r7, #14]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d804      	bhi.n	8011f42 <ValidatePayloadLength+0x46>
 8011f38:	89bb      	ldrh	r3, [r7, #12]
 8011f3a:	2bff      	cmp	r3, #255	; 0xff
 8011f3c:	d801      	bhi.n	8011f42 <ValidatePayloadLength+0x46>
    {
        return true;
 8011f3e:	2301      	movs	r3, #1
 8011f40:	e000      	b.n	8011f44 <ValidatePayloadLength+0x48>
    }
    return false;
 8011f42:	2300      	movs	r3, #0
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3710      	adds	r7, #16
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}

08011f4c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011f4c:	b590      	push	{r4, r7, lr}
 8011f4e:	b0a5      	sub	sp, #148	; 0x94
 8011f50:	af02      	add	r7, sp, #8
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	4608      	mov	r0, r1
 8011f56:	4611      	mov	r1, r2
 8011f58:	461a      	mov	r2, r3
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	70fb      	strb	r3, [r7, #3]
 8011f5e:	460b      	mov	r3, r1
 8011f60:	70bb      	strb	r3, [r7, #2]
 8011f62:	4613      	mov	r3, r2
 8011f64:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011f72:	2300      	movs	r3, #0
 8011f74:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8011f78:	f000 bc6d 	b.w	8012856 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8011f7c:	78fb      	ldrb	r3, [r7, #3]
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	4413      	add	r3, r2
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f003 fce7 	bl	8015958 <LoRaMacCommandsGetCmdSize>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	78fb      	ldrb	r3, [r7, #3]
 8011f90:	441a      	add	r2, r3
 8011f92:	78bb      	ldrb	r3, [r7, #2]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	f300 8464 	bgt.w	8012862 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8011f9a:	78fb      	ldrb	r3, [r7, #3]
 8011f9c:	1c5a      	adds	r2, r3, #1
 8011f9e:	70fa      	strb	r2, [r7, #3]
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	3b02      	subs	r3, #2
 8011faa:	2b11      	cmp	r3, #17
 8011fac:	f200 845b 	bhi.w	8012866 <ProcessMacCommands+0x91a>
 8011fb0:	a201      	add	r2, pc, #4	; (adr r2, 8011fb8 <ProcessMacCommands+0x6c>)
 8011fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fb6:	bf00      	nop
 8011fb8:	08012001 	.word	0x08012001
 8011fbc:	08012043 	.word	0x08012043
 8011fc0:	0801215f 	.word	0x0801215f
 8011fc4:	0801219d 	.word	0x0801219d
 8011fc8:	08012289 	.word	0x08012289
 8011fcc:	080122e5 	.word	0x080122e5
 8011fd0:	080123a1 	.word	0x080123a1
 8011fd4:	080123f7 	.word	0x080123f7
 8011fd8:	080124dd 	.word	0x080124dd
 8011fdc:	08012867 	.word	0x08012867
 8011fe0:	08012867 	.word	0x08012867
 8011fe4:	08012581 	.word	0x08012581
 8011fe8:	08012867 	.word	0x08012867
 8011fec:	08012867 	.word	0x08012867
 8011ff0:	08012697 	.word	0x08012697
 8011ff4:	080126cb 	.word	0x080126cb
 8011ff8:	0801275b 	.word	0x0801275b
 8011ffc:	080127d1 	.word	0x080127d1
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012000:	2005      	movs	r0, #5
 8012002:	f003 fe81 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	f000 8424 	beq.w	8012856 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801200e:	2105      	movs	r1, #5
 8012010:	2000      	movs	r0, #0
 8012012:	f003 fded 	bl	8015bf0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012016:	78fb      	ldrb	r3, [r7, #3]
 8012018:	1c5a      	adds	r2, r3, #1
 801201a:	70fa      	strb	r2, [r7, #3]
 801201c:	461a      	mov	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	4413      	add	r3, r2
 8012022:	781a      	ldrb	r2, [r3, #0]
 8012024:	4bac      	ldr	r3, [pc, #688]	; (80122d8 <ProcessMacCommands+0x38c>)
 8012026:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801202a:	78fb      	ldrb	r3, [r7, #3]
 801202c:	1c5a      	adds	r2, r3, #1
 801202e:	70fa      	strb	r2, [r7, #3]
 8012030:	461a      	mov	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	4413      	add	r3, r2
 8012036:	781a      	ldrb	r2, [r3, #0]
 8012038:	4ba7      	ldr	r3, [pc, #668]	; (80122d8 <ProcessMacCommands+0x38c>)
 801203a:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 801203e:	f000 bc0a 	b.w	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012042:	2300      	movs	r3, #0
 8012044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012048:	2300      	movs	r3, #0
 801204a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 801204e:	2300      	movs	r3, #0
 8012050:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012054:	2300      	movs	r3, #0
 8012056:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 801205a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801205e:	f083 0301 	eor.w	r3, r3, #1
 8012062:	b2db      	uxtb	r3, r3
 8012064:	2b00      	cmp	r3, #0
 8012066:	d078      	beq.n	801215a <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012068:	2301      	movs	r3, #1
 801206a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801206e:	78fb      	ldrb	r3, [r7, #3]
 8012070:	3b01      	subs	r3, #1
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	4413      	add	r3, r2
 8012076:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012078:	78ba      	ldrb	r2, [r7, #2]
 801207a:	78fb      	ldrb	r3, [r7, #3]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	b2db      	uxtb	r3, r3
 8012080:	3301      	adds	r3, #1
 8012082:	b2db      	uxtb	r3, r3
 8012084:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012088:	4b94      	ldr	r3, [pc, #592]	; (80122dc <ProcessMacCommands+0x390>)
 801208a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801208e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012092:	4b92      	ldr	r3, [pc, #584]	; (80122dc <ProcessMacCommands+0x390>)
 8012094:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012098:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801209c:	4b8f      	ldr	r3, [pc, #572]	; (80122dc <ProcessMacCommands+0x390>)
 801209e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80120a2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80120a6:	4b8d      	ldr	r3, [pc, #564]	; (80122dc <ProcessMacCommands+0x390>)
 80120a8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80120ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80120b0:	4b8a      	ldr	r3, [pc, #552]	; (80122dc <ProcessMacCommands+0x390>)
 80120b2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80120b6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80120ba:	4b88      	ldr	r3, [pc, #544]	; (80122dc <ProcessMacCommands+0x390>)
 80120bc:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80120c0:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80120c2:	4b86      	ldr	r3, [pc, #536]	; (80122dc <ProcessMacCommands+0x390>)
 80120c4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80120c8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80120cc:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80120d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80120d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80120de:	9300      	str	r3, [sp, #0]
 80120e0:	4623      	mov	r3, r4
 80120e2:	f005 f973 	bl	80173cc <RegionLinkAdrReq>
 80120e6:	4603      	mov	r3, r0
 80120e8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80120ec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80120f0:	f003 0307 	and.w	r3, r3, #7
 80120f4:	2b07      	cmp	r3, #7
 80120f6:	d10e      	bne.n	8012116 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80120f8:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80120fc:	4b77      	ldr	r3, [pc, #476]	; (80122dc <ProcessMacCommands+0x390>)
 80120fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012102:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012106:	4b75      	ldr	r3, [pc, #468]	; (80122dc <ProcessMacCommands+0x390>)
 8012108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801210c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012110:	4b72      	ldr	r3, [pc, #456]	; (80122dc <ProcessMacCommands+0x390>)
 8012112:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012116:	2300      	movs	r3, #0
 8012118:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801211c:	e00b      	b.n	8012136 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 801211e:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012122:	2201      	movs	r2, #1
 8012124:	4619      	mov	r1, r3
 8012126:	2003      	movs	r0, #3
 8012128:	f003 fab6 	bl	8015698 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801212c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012130:	3301      	adds	r3, #1
 8012132:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012136:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801213a:	4a69      	ldr	r2, [pc, #420]	; (80122e0 <ProcessMacCommands+0x394>)
 801213c:	fba2 2303 	umull	r2, r3, r2, r3
 8012140:	089b      	lsrs	r3, r3, #2
 8012142:	b2db      	uxtb	r3, r3
 8012144:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012148:	429a      	cmp	r2, r3
 801214a:	d3e8      	bcc.n	801211e <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 801214c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012150:	78fb      	ldrb	r3, [r7, #3]
 8012152:	4413      	add	r3, r2
 8012154:	b2db      	uxtb	r3, r3
 8012156:	3b01      	subs	r3, #1
 8012158:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801215a:	bf00      	nop
 801215c:	e37b      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801215e:	78fb      	ldrb	r3, [r7, #3]
 8012160:	1c5a      	adds	r2, r3, #1
 8012162:	70fa      	strb	r2, [r7, #3]
 8012164:	461a      	mov	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4413      	add	r3, r2
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	f003 030f 	and.w	r3, r3, #15
 8012170:	b2da      	uxtb	r2, r3
 8012172:	4b5a      	ldr	r3, [pc, #360]	; (80122dc <ProcessMacCommands+0x390>)
 8012174:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012178:	4b58      	ldr	r3, [pc, #352]	; (80122dc <ProcessMacCommands+0x390>)
 801217a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801217e:	461a      	mov	r2, r3
 8012180:	2301      	movs	r3, #1
 8012182:	4093      	lsls	r3, r2
 8012184:	b29a      	uxth	r2, r3
 8012186:	4b55      	ldr	r3, [pc, #340]	; (80122dc <ProcessMacCommands+0x390>)
 8012188:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801218c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012190:	2200      	movs	r2, #0
 8012192:	4619      	mov	r1, r3
 8012194:	2004      	movs	r0, #4
 8012196:	f003 fa7f 	bl	8015698 <LoRaMacCommandsAddCmd>
                break;
 801219a:	e35c      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801219c:	2307      	movs	r3, #7
 801219e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80121a2:	78fb      	ldrb	r3, [r7, #3]
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	4413      	add	r3, r2
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	091b      	lsrs	r3, r3, #4
 80121ac:	b2db      	uxtb	r3, r3
 80121ae:	b25b      	sxtb	r3, r3
 80121b0:	f003 0307 	and.w	r3, r3, #7
 80121b4:	b25b      	sxtb	r3, r3
 80121b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80121ba:	78fb      	ldrb	r3, [r7, #3]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	4413      	add	r3, r2
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	b25b      	sxtb	r3, r3
 80121c4:	f003 030f 	and.w	r3, r3, #15
 80121c8:	b25b      	sxtb	r3, r3
 80121ca:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80121ce:	78fb      	ldrb	r3, [r7, #3]
 80121d0:	3301      	adds	r3, #1
 80121d2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80121d4:	78fb      	ldrb	r3, [r7, #3]
 80121d6:	1c5a      	adds	r2, r3, #1
 80121d8:	70fa      	strb	r2, [r7, #3]
 80121da:	461a      	mov	r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	4413      	add	r3, r2
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80121e4:	78fb      	ldrb	r3, [r7, #3]
 80121e6:	1c5a      	adds	r2, r3, #1
 80121e8:	70fa      	strb	r2, [r7, #3]
 80121ea:	461a      	mov	r2, r3
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	4413      	add	r3, r2
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	021a      	lsls	r2, r3, #8
 80121f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121f6:	4313      	orrs	r3, r2
 80121f8:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80121fa:	78fb      	ldrb	r3, [r7, #3]
 80121fc:	1c5a      	adds	r2, r3, #1
 80121fe:	70fa      	strb	r2, [r7, #3]
 8012200:	461a      	mov	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	4413      	add	r3, r2
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	041a      	lsls	r2, r3, #16
 801220a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801220c:	4313      	orrs	r3, r2
 801220e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012212:	2264      	movs	r2, #100	; 0x64
 8012214:	fb02 f303 	mul.w	r3, r2, r3
 8012218:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 801221a:	4b30      	ldr	r3, [pc, #192]	; (80122dc <ProcessMacCommands+0x390>)
 801221c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012220:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012224:	4611      	mov	r1, r2
 8012226:	4618      	mov	r0, r3
 8012228:	f005 f8ea 	bl	8017400 <RegionRxParamSetupReq>
 801222c:	4603      	mov	r3, r0
 801222e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012232:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012236:	f003 0307 	and.w	r3, r3, #7
 801223a:	2b07      	cmp	r3, #7
 801223c:	d117      	bne.n	801226e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801223e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012242:	b2da      	uxtb	r2, r3
 8012244:	4b25      	ldr	r3, [pc, #148]	; (80122dc <ProcessMacCommands+0x390>)
 8012246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801224a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801224e:	b2da      	uxtb	r2, r3
 8012250:	4b22      	ldr	r3, [pc, #136]	; (80122dc <ProcessMacCommands+0x390>)
 8012252:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012258:	4a20      	ldr	r2, [pc, #128]	; (80122dc <ProcessMacCommands+0x390>)
 801225a:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 801225c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225e:	4a1f      	ldr	r2, [pc, #124]	; (80122dc <ProcessMacCommands+0x390>)
 8012260:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012262:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012266:	b2da      	uxtb	r2, r3
 8012268:	4b1c      	ldr	r3, [pc, #112]	; (80122dc <ProcessMacCommands+0x390>)
 801226a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801226e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012272:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012276:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801227a:	2201      	movs	r2, #1
 801227c:	4619      	mov	r1, r3
 801227e:	2005      	movs	r0, #5
 8012280:	f003 fa0a 	bl	8015698 <LoRaMacCommandsAddCmd>
                break;
 8012284:	bf00      	nop
 8012286:	e2e6      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012288:	23ff      	movs	r3, #255	; 0xff
 801228a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801228e:	4b12      	ldr	r3, [pc, #72]	; (80122d8 <ProcessMacCommands+0x38c>)
 8012290:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012294:	2b00      	cmp	r3, #0
 8012296:	d00d      	beq.n	80122b4 <ProcessMacCommands+0x368>
 8012298:	4b0f      	ldr	r3, [pc, #60]	; (80122d8 <ProcessMacCommands+0x38c>)
 801229a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d007      	beq.n	80122b4 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80122a4:	4b0c      	ldr	r3, [pc, #48]	; (80122d8 <ProcessMacCommands+0x38c>)
 80122a6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4798      	blx	r3
 80122ae:	4603      	mov	r3, r0
 80122b0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80122b4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80122b8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80122bc:	787b      	ldrb	r3, [r7, #1]
 80122be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80122c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80122cc:	2202      	movs	r2, #2
 80122ce:	4619      	mov	r1, r3
 80122d0:	2006      	movs	r0, #6
 80122d2:	f003 f9e1 	bl	8015698 <LoRaMacCommandsAddCmd>
                break;
 80122d6:	e2be      	b.n	8012856 <ProcessMacCommands+0x90a>
 80122d8:	20000940 	.word	0x20000940
 80122dc:	20000e48 	.word	0x20000e48
 80122e0:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80122e4:	2303      	movs	r3, #3
 80122e6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80122ea:	78fb      	ldrb	r3, [r7, #3]
 80122ec:	1c5a      	adds	r2, r3, #1
 80122ee:	70fa      	strb	r2, [r7, #3]
 80122f0:	461a      	mov	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	4413      	add	r3, r2
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	b25b      	sxtb	r3, r3
 80122fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 80122fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012302:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012304:	78fb      	ldrb	r3, [r7, #3]
 8012306:	1c5a      	adds	r2, r3, #1
 8012308:	70fa      	strb	r2, [r7, #3]
 801230a:	461a      	mov	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	4413      	add	r3, r2
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012314:	78fb      	ldrb	r3, [r7, #3]
 8012316:	1c5a      	adds	r2, r3, #1
 8012318:	70fa      	strb	r2, [r7, #3]
 801231a:	461a      	mov	r2, r3
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	4413      	add	r3, r2
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	021a      	lsls	r2, r3, #8
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	4313      	orrs	r3, r2
 8012328:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801232a:	78fb      	ldrb	r3, [r7, #3]
 801232c:	1c5a      	adds	r2, r3, #1
 801232e:	70fa      	strb	r2, [r7, #3]
 8012330:	461a      	mov	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4413      	add	r3, r2
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	041a      	lsls	r2, r3, #16
 801233a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233c:	4313      	orrs	r3, r2
 801233e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012342:	2264      	movs	r2, #100	; 0x64
 8012344:	fb02 f303 	mul.w	r3, r2, r3
 8012348:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 801234a:	2300      	movs	r3, #0
 801234c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801234e:	78fb      	ldrb	r3, [r7, #3]
 8012350:	1c5a      	adds	r2, r3, #1
 8012352:	70fa      	strb	r2, [r7, #3]
 8012354:	461a      	mov	r2, r3
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4413      	add	r3, r2
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	b25b      	sxtb	r3, r3
 801235e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012362:	4b85      	ldr	r3, [pc, #532]	; (8012578 <ProcessMacCommands+0x62c>)
 8012364:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012368:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801236c:	4611      	mov	r1, r2
 801236e:	4618      	mov	r0, r3
 8012370:	f005 f859 	bl	8017426 <RegionNewChannelReq>
 8012374:	4603      	mov	r3, r0
 8012376:	b2db      	uxtb	r3, r3
 8012378:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801237c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012380:	b25b      	sxtb	r3, r3
 8012382:	2b00      	cmp	r3, #0
 8012384:	db0a      	blt.n	801239c <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012386:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801238a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801238e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012392:	2201      	movs	r2, #1
 8012394:	4619      	mov	r1, r3
 8012396:	2007      	movs	r0, #7
 8012398:	f003 f97e 	bl	8015698 <LoRaMacCommandsAddCmd>
                }
                break;
 801239c:	bf00      	nop
 801239e:	e25a      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80123a0:	78fb      	ldrb	r3, [r7, #3]
 80123a2:	1c5a      	adds	r2, r3, #1
 80123a4:	70fa      	strb	r2, [r7, #3]
 80123a6:	461a      	mov	r2, r3
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	4413      	add	r3, r2
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	f003 030f 	and.w	r3, r3, #15
 80123b2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80123b6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d104      	bne.n	80123c8 <ProcessMacCommands+0x47c>
                {
                    delay++;
 80123be:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80123c2:	3301      	adds	r3, #1
 80123c4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80123c8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80123cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80123d0:	fb02 f303 	mul.w	r3, r2, r3
 80123d4:	461a      	mov	r2, r3
 80123d6:	4b68      	ldr	r3, [pc, #416]	; (8012578 <ProcessMacCommands+0x62c>)
 80123d8:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80123da:	4b67      	ldr	r3, [pc, #412]	; (8012578 <ProcessMacCommands+0x62c>)
 80123dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80123de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80123e2:	4a65      	ldr	r2, [pc, #404]	; (8012578 <ProcessMacCommands+0x62c>)
 80123e4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80123e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123ea:	2200      	movs	r2, #0
 80123ec:	4619      	mov	r1, r3
 80123ee:	2008      	movs	r0, #8
 80123f0:	f003 f952 	bl	8015698 <LoRaMacCommandsAddCmd>
                break;
 80123f4:	e22f      	b.n	8012856 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80123f6:	78fb      	ldrb	r3, [r7, #3]
 80123f8:	1c5a      	adds	r2, r3, #1
 80123fa:	70fa      	strb	r2, [r7, #3]
 80123fc:	461a      	mov	r2, r3
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	4413      	add	r3, r2
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012408:	2300      	movs	r3, #0
 801240a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801240e:	2300      	movs	r3, #0
 8012410:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012414:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012418:	f003 0320 	and.w	r3, r3, #32
 801241c:	2b00      	cmp	r3, #0
 801241e:	d002      	beq.n	8012426 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012420:	2301      	movs	r3, #1
 8012422:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012426:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801242a:	f003 0310 	and.w	r3, r3, #16
 801242e:	2b00      	cmp	r3, #0
 8012430:	d002      	beq.n	8012438 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012432:	2301      	movs	r3, #1
 8012434:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012438:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801243c:	f003 030f 	and.w	r3, r3, #15
 8012440:	b2db      	uxtb	r3, r3
 8012442:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012446:	4b4c      	ldr	r3, [pc, #304]	; (8012578 <ProcessMacCommands+0x62c>)
 8012448:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801244c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012450:	4611      	mov	r1, r2
 8012452:	4618      	mov	r0, r3
 8012454:	f004 fffa 	bl	801744c <RegionTxParamSetupReq>
 8012458:	4603      	mov	r3, r0
 801245a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801245e:	d03b      	beq.n	80124d8 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012460:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012464:	4b44      	ldr	r3, [pc, #272]	; (8012578 <ProcessMacCommands+0x62c>)
 8012466:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801246a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801246e:	4b42      	ldr	r3, [pc, #264]	; (8012578 <ProcessMacCommands+0x62c>)
 8012470:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012474:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012478:	461a      	mov	r2, r3
 801247a:	4b40      	ldr	r3, [pc, #256]	; (801257c <ProcessMacCommands+0x630>)
 801247c:	5c9b      	ldrb	r3, [r3, r2]
 801247e:	4618      	mov	r0, r3
 8012480:	f7ee fc06 	bl	8000c90 <__aeabi_ui2f>
 8012484:	4603      	mov	r3, r0
 8012486:	4a3c      	ldr	r2, [pc, #240]	; (8012578 <ProcessMacCommands+0x62c>)
 8012488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801248c:	2302      	movs	r3, #2
 801248e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012492:	4b39      	ldr	r3, [pc, #228]	; (8012578 <ProcessMacCommands+0x62c>)
 8012494:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012498:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801249c:	4b36      	ldr	r3, [pc, #216]	; (8012578 <ProcessMacCommands+0x62c>)
 801249e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80124a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80124a6:	4611      	mov	r1, r2
 80124a8:	4618      	mov	r0, r3
 80124aa:	f004 fed2 	bl	8017252 <RegionGetPhyParam>
 80124ae:	4603      	mov	r3, r0
 80124b0:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80124b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b4:	b25a      	sxtb	r2, r3
 80124b6:	4b30      	ldr	r3, [pc, #192]	; (8012578 <ProcessMacCommands+0x62c>)
 80124b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80124bc:	4293      	cmp	r3, r2
 80124be:	bfb8      	it	lt
 80124c0:	4613      	movlt	r3, r2
 80124c2:	b25a      	sxtb	r2, r3
 80124c4:	4b2c      	ldr	r3, [pc, #176]	; (8012578 <ProcessMacCommands+0x62c>)
 80124c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80124ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80124ce:	2200      	movs	r2, #0
 80124d0:	4619      	mov	r1, r3
 80124d2:	2009      	movs	r0, #9
 80124d4:	f003 f8e0 	bl	8015698 <LoRaMacCommandsAddCmd>
                }
                break;
 80124d8:	bf00      	nop
 80124da:	e1bc      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80124dc:	2303      	movs	r3, #3
 80124de:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80124e2:	78fb      	ldrb	r3, [r7, #3]
 80124e4:	1c5a      	adds	r2, r3, #1
 80124e6:	70fa      	strb	r2, [r7, #3]
 80124e8:	461a      	mov	r2, r3
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4413      	add	r3, r2
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80124f4:	78fb      	ldrb	r3, [r7, #3]
 80124f6:	1c5a      	adds	r2, r3, #1
 80124f8:	70fa      	strb	r2, [r7, #3]
 80124fa:	461a      	mov	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	4413      	add	r3, r2
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012504:	78fb      	ldrb	r3, [r7, #3]
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	70fa      	strb	r2, [r7, #3]
 801250a:	461a      	mov	r2, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	4413      	add	r3, r2
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	021a      	lsls	r2, r3, #8
 8012514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012516:	4313      	orrs	r3, r2
 8012518:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801251a:	78fb      	ldrb	r3, [r7, #3]
 801251c:	1c5a      	adds	r2, r3, #1
 801251e:	70fa      	strb	r2, [r7, #3]
 8012520:	461a      	mov	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	4413      	add	r3, r2
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	041a      	lsls	r2, r3, #16
 801252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252c:	4313      	orrs	r3, r2
 801252e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012532:	2264      	movs	r2, #100	; 0x64
 8012534:	fb02 f303 	mul.w	r3, r2, r3
 8012538:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 801253a:	4b0f      	ldr	r3, [pc, #60]	; (8012578 <ProcessMacCommands+0x62c>)
 801253c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012540:	f107 0220 	add.w	r2, r7, #32
 8012544:	4611      	mov	r1, r2
 8012546:	4618      	mov	r0, r3
 8012548:	f004 ff93 	bl	8017472 <RegionDlChannelReq>
 801254c:	4603      	mov	r3, r0
 801254e:	b2db      	uxtb	r3, r3
 8012550:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012554:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012558:	b25b      	sxtb	r3, r3
 801255a:	2b00      	cmp	r3, #0
 801255c:	db0a      	blt.n	8012574 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 801255e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012562:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012566:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801256a:	2201      	movs	r2, #1
 801256c:	4619      	mov	r1, r3
 801256e:	200a      	movs	r0, #10
 8012570:	f003 f892 	bl	8015698 <LoRaMacCommandsAddCmd>
                }
                break;
 8012574:	bf00      	nop
 8012576:	e16e      	b.n	8012856 <ProcessMacCommands+0x90a>
 8012578:	20000e48 	.word	0x20000e48
 801257c:	0801f418 	.word	0x0801f418
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012580:	200a      	movs	r0, #10
 8012582:	f003 fbc1 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	f000 8164 	beq.w	8012856 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801258e:	210a      	movs	r1, #10
 8012590:	2000      	movs	r0, #0
 8012592:	f003 fb2d 	bl	8015bf0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012596:	f107 0318 	add.w	r3, r7, #24
 801259a:	2200      	movs	r2, #0
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80125a0:	f107 0310 	add.w	r3, r7, #16
 80125a4:	2200      	movs	r2, #0
 80125a6:	601a      	str	r2, [r3, #0]
 80125a8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80125aa:	f107 0308 	add.w	r3, r7, #8
 80125ae:	2200      	movs	r2, #0
 80125b0:	601a      	str	r2, [r3, #0]
 80125b2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80125b4:	78fb      	ldrb	r3, [r7, #3]
 80125b6:	1c5a      	adds	r2, r3, #1
 80125b8:	70fa      	strb	r2, [r7, #3]
 80125ba:	461a      	mov	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4413      	add	r3, r2
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80125c4:	78fb      	ldrb	r3, [r7, #3]
 80125c6:	1c5a      	adds	r2, r3, #1
 80125c8:	70fa      	strb	r2, [r7, #3]
 80125ca:	461a      	mov	r2, r3
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	4413      	add	r3, r2
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	021a      	lsls	r2, r3, #8
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	4313      	orrs	r3, r2
 80125d8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80125da:	78fb      	ldrb	r3, [r7, #3]
 80125dc:	1c5a      	adds	r2, r3, #1
 80125de:	70fa      	strb	r2, [r7, #3]
 80125e0:	461a      	mov	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4413      	add	r3, r2
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	041a      	lsls	r2, r3, #16
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	4313      	orrs	r3, r2
 80125ee:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80125f0:	78fb      	ldrb	r3, [r7, #3]
 80125f2:	1c5a      	adds	r2, r3, #1
 80125f4:	70fa      	strb	r2, [r7, #3]
 80125f6:	461a      	mov	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4413      	add	r3, r2
 80125fc:	781b      	ldrb	r3, [r3, #0]
 80125fe:	061a      	lsls	r2, r3, #24
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	4313      	orrs	r3, r2
 8012604:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012606:	78fb      	ldrb	r3, [r7, #3]
 8012608:	1c5a      	adds	r2, r3, #1
 801260a:	70fa      	strb	r2, [r7, #3]
 801260c:	461a      	mov	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	b21b      	sxth	r3, r3
 8012616:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012618:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801261c:	461a      	mov	r2, r3
 801261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012622:	fb02 f303 	mul.w	r3, r2, r3
 8012626:	121b      	asrs	r3, r3, #8
 8012628:	b21b      	sxth	r3, r3
 801262a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801262c:	f107 0310 	add.w	r3, r7, #16
 8012630:	f107 0218 	add.w	r2, r7, #24
 8012634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012638:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801263c:	693a      	ldr	r2, [r7, #16]
 801263e:	4b8c      	ldr	r3, [pc, #560]	; (8012870 <ProcessMacCommands+0x924>)
 8012640:	4413      	add	r3, r2
 8012642:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012644:	f107 0308 	add.w	r3, r7, #8
 8012648:	4618      	mov	r0, r3
 801264a:	f00a fd4f 	bl	801d0ec <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 801264e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012652:	4b88      	ldr	r3, [pc, #544]	; (8012874 <ProcessMacCommands+0x928>)
 8012654:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012658:	9200      	str	r2, [sp, #0]
 801265a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 801265e:	f107 0210 	add.w	r2, r7, #16
 8012662:	ca06      	ldmia	r2, {r1, r2}
 8012664:	f00a fcdb 	bl	801d01e <SysTimeSub>
 8012668:	f107 0010 	add.w	r0, r7, #16
 801266c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012672:	f107 0208 	add.w	r2, r7, #8
 8012676:	ca06      	ldmia	r2, {r1, r2}
 8012678:	f00a fc98 	bl	801cfac <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 801267c:	f107 0310 	add.w	r3, r7, #16
 8012680:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012684:	f00a fd04 	bl	801d090 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012688:	f002 febf 	bl	801540a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801268c:	4b79      	ldr	r3, [pc, #484]	; (8012874 <ProcessMacCommands+0x928>)
 801268e:	2201      	movs	r2, #1
 8012690:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012694:	e0df      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012696:	200d      	movs	r0, #13
 8012698:	f003 fb36 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	f000 80d9 	beq.w	8012856 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80126a4:	210d      	movs	r1, #13
 80126a6:	2000      	movs	r0, #0
 80126a8:	f003 faa2 	bl	8015bf0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80126ac:	4b71      	ldr	r3, [pc, #452]	; (8012874 <ProcessMacCommands+0x928>)
 80126ae:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80126b2:	2b04      	cmp	r3, #4
 80126b4:	f000 80cf 	beq.w	8012856 <ProcessMacCommands+0x90a>
 80126b8:	4b6e      	ldr	r3, [pc, #440]	; (8012874 <ProcessMacCommands+0x928>)
 80126ba:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80126be:	2b05      	cmp	r3, #5
 80126c0:	f000 80c9 	beq.w	8012856 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80126c4:	f002 fe82 	bl	80153cc <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80126c8:	e0c5      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80126ca:	2303      	movs	r3, #3
 80126cc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80126d0:	2300      	movs	r3, #0
 80126d2:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80126d4:	78fb      	ldrb	r3, [r7, #3]
 80126d6:	1c5a      	adds	r2, r3, #1
 80126d8:	70fa      	strb	r2, [r7, #3]
 80126da:	461a      	mov	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	4413      	add	r3, r2
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80126e4:	78fb      	ldrb	r3, [r7, #3]
 80126e6:	1c5a      	adds	r2, r3, #1
 80126e8:	70fa      	strb	r2, [r7, #3]
 80126ea:	461a      	mov	r2, r3
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4413      	add	r3, r2
 80126f0:	781b      	ldrb	r3, [r3, #0]
 80126f2:	021b      	lsls	r3, r3, #8
 80126f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80126f6:	4313      	orrs	r3, r2
 80126f8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80126fa:	78fb      	ldrb	r3, [r7, #3]
 80126fc:	1c5a      	adds	r2, r3, #1
 80126fe:	70fa      	strb	r2, [r7, #3]
 8012700:	461a      	mov	r2, r3
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4413      	add	r3, r2
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	041b      	lsls	r3, r3, #16
 801270a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801270c:	4313      	orrs	r3, r2
 801270e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012712:	2264      	movs	r2, #100	; 0x64
 8012714:	fb02 f303 	mul.w	r3, r2, r3
 8012718:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 801271a:	78fb      	ldrb	r3, [r7, #3]
 801271c:	1c5a      	adds	r2, r3, #1
 801271e:	70fa      	strb	r2, [r7, #3]
 8012720:	461a      	mov	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4413      	add	r3, r2
 8012726:	781b      	ldrb	r3, [r3, #0]
 8012728:	f003 030f 	and.w	r3, r3, #15
 801272c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012730:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012734:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012736:	4618      	mov	r0, r3
 8012738:	f002 fe4e 	bl	80153d8 <LoRaMacClassBPingSlotChannelReq>
 801273c:	4603      	mov	r3, r0
 801273e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012742:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012746:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801274a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801274e:	2201      	movs	r2, #1
 8012750:	4619      	mov	r1, r3
 8012752:	2011      	movs	r0, #17
 8012754:	f002 ffa0 	bl	8015698 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012758:	e07d      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801275a:	200e      	movs	r0, #14
 801275c:	f003 fad4 	bl	8015d08 <LoRaMacConfirmQueueIsCmdActive>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	d077      	beq.n	8012856 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012766:	210e      	movs	r1, #14
 8012768:	2000      	movs	r0, #0
 801276a:	f003 fa41 	bl	8015bf0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801276e:	2300      	movs	r3, #0
 8012770:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012774:	2300      	movs	r3, #0
 8012776:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 801277a:	78fb      	ldrb	r3, [r7, #3]
 801277c:	1c5a      	adds	r2, r3, #1
 801277e:	70fa      	strb	r2, [r7, #3]
 8012780:	461a      	mov	r2, r3
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	4413      	add	r3, r2
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801278c:	78fb      	ldrb	r3, [r7, #3]
 801278e:	1c5a      	adds	r2, r3, #1
 8012790:	70fa      	strb	r2, [r7, #3]
 8012792:	461a      	mov	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	4413      	add	r3, r2
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	021b      	lsls	r3, r3, #8
 801279c:	b21a      	sxth	r2, r3
 801279e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80127a2:	4313      	orrs	r3, r2
 80127a4:	b21b      	sxth	r3, r3
 80127a6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80127aa:	78fb      	ldrb	r3, [r7, #3]
 80127ac:	1c5a      	adds	r2, r3, #1
 80127ae:	70fa      	strb	r2, [r7, #3]
 80127b0:	461a      	mov	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4413      	add	r3, r2
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80127bc:	4b2e      	ldr	r3, [pc, #184]	; (8012878 <ProcessMacCommands+0x92c>)
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80127c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80127c8:	4618      	mov	r0, r3
 80127ca:	f002 fe11 	bl	80153f0 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80127ce:	e042      	b.n	8012856 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80127d0:	2300      	movs	r3, #0
 80127d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80127d6:	78fb      	ldrb	r3, [r7, #3]
 80127d8:	1c5a      	adds	r2, r3, #1
 80127da:	70fa      	strb	r2, [r7, #3]
 80127dc:	461a      	mov	r2, r3
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	4413      	add	r3, r2
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80127e8:	78fb      	ldrb	r3, [r7, #3]
 80127ea:	1c5a      	adds	r2, r3, #1
 80127ec:	70fa      	strb	r2, [r7, #3]
 80127ee:	461a      	mov	r2, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	4413      	add	r3, r2
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	021b      	lsls	r3, r3, #8
 80127f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80127fc:	4313      	orrs	r3, r2
 80127fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012802:	78fb      	ldrb	r3, [r7, #3]
 8012804:	1c5a      	adds	r2, r3, #1
 8012806:	70fa      	strb	r2, [r7, #3]
 8012808:	461a      	mov	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4413      	add	r3, r2
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	041b      	lsls	r3, r3, #16
 8012812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012816:	4313      	orrs	r3, r2
 8012818:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 801281c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012820:	2264      	movs	r2, #100	; 0x64
 8012822:	fb02 f303 	mul.w	r3, r2, r3
 8012826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801282a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801282e:	f002 fdf2 	bl	8015416 <LoRaMacClassBBeaconFreqReq>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d003      	beq.n	8012840 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012838:	2301      	movs	r3, #1
 801283a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801283e:	e002      	b.n	8012846 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012840:	2300      	movs	r3, #0
 8012842:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012846:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801284a:	2201      	movs	r2, #1
 801284c:	4619      	mov	r1, r3
 801284e:	2013      	movs	r0, #19
 8012850:	f002 ff22 	bl	8015698 <LoRaMacCommandsAddCmd>
                }
                break;
 8012854:	bf00      	nop
    while( macIndex < commandsSize )
 8012856:	78fa      	ldrb	r2, [r7, #3]
 8012858:	78bb      	ldrb	r3, [r7, #2]
 801285a:	429a      	cmp	r2, r3
 801285c:	f4ff ab8e 	bcc.w	8011f7c <ProcessMacCommands+0x30>
 8012860:	e002      	b.n	8012868 <ProcessMacCommands+0x91c>
            return;
 8012862:	bf00      	nop
 8012864:	e000      	b.n	8012868 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012866:	bf00      	nop
        }
    }
}
 8012868:	378c      	adds	r7, #140	; 0x8c
 801286a:	46bd      	mov	sp, r7
 801286c:	bd90      	pop	{r4, r7, pc}
 801286e:	bf00      	nop
 8012870:	12d53d80 	.word	0x12d53d80
 8012874:	20000940 	.word	0x20000940
 8012878:	200015b8 	.word	0x200015b8

0801287c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b08e      	sub	sp, #56	; 0x38
 8012880:	af02      	add	r7, sp, #8
 8012882:	60f8      	str	r0, [r7, #12]
 8012884:	607a      	str	r2, [r7, #4]
 8012886:	461a      	mov	r2, r3
 8012888:	460b      	mov	r3, r1
 801288a:	72fb      	strb	r3, [r7, #11]
 801288c:	4613      	mov	r3, r2
 801288e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012890:	2303      	movs	r3, #3
 8012892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012896:	4b65      	ldr	r3, [pc, #404]	; (8012a2c <Send+0x1b0>)
 8012898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801289c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80128a0:	4b62      	ldr	r3, [pc, #392]	; (8012a2c <Send+0x1b0>)
 80128a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80128a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80128aa:	4b60      	ldr	r3, [pc, #384]	; (8012a2c <Send+0x1b0>)
 80128ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ae:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80128b0:	4b5e      	ldr	r3, [pc, #376]	; (8012a2c <Send+0x1b0>)
 80128b2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d101      	bne.n	80128be <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80128ba:	2307      	movs	r3, #7
 80128bc:	e0b1      	b.n	8012a22 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80128be:	4b5b      	ldr	r3, [pc, #364]	; (8012a2c <Send+0x1b0>)
 80128c0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d102      	bne.n	80128ce <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80128c8:	4b58      	ldr	r3, [pc, #352]	; (8012a2c <Send+0x1b0>)
 80128ca:	2200      	movs	r2, #0
 80128cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80128ce:	2300      	movs	r3, #0
 80128d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80128d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128d8:	f36f 0303 	bfc	r3, #0, #4
 80128dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80128e0:	4b52      	ldr	r3, [pc, #328]	; (8012a2c <Send+0x1b0>)
 80128e2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80128e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80128ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80128f2:	4b4e      	ldr	r3, [pc, #312]	; (8012a2c <Send+0x1b0>)
 80128f4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d106      	bne.n	801290a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80128fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012900:	f043 0310 	orr.w	r3, r3, #16
 8012904:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012908:	e005      	b.n	8012916 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801290a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801290e:	f36f 1304 	bfc	r3, #4, #1
 8012912:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012916:	4b45      	ldr	r3, [pc, #276]	; (8012a2c <Send+0x1b0>)
 8012918:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801291c:	2b00      	cmp	r3, #0
 801291e:	d005      	beq.n	801292c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012920:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012924:	f043 0320 	orr.w	r3, r3, #32
 8012928:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 801292c:	2301      	movs	r3, #1
 801292e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012930:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012934:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012938:	b2db      	uxtb	r3, r3
 801293a:	2b00      	cmp	r3, #0
 801293c:	bf14      	ite	ne
 801293e:	2301      	movne	r3, #1
 8012940:	2300      	moveq	r3, #0
 8012942:	b2db      	uxtb	r3, r3
 8012944:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012946:	4b39      	ldr	r3, [pc, #228]	; (8012a2c <Send+0x1b0>)
 8012948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801294a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801294c:	4b37      	ldr	r3, [pc, #220]	; (8012a2c <Send+0x1b0>)
 801294e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012952:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012954:	4b35      	ldr	r3, [pc, #212]	; (8012a2c <Send+0x1b0>)
 8012956:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801295a:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801295c:	4b33      	ldr	r3, [pc, #204]	; (8012a2c <Send+0x1b0>)
 801295e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012962:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012966:	4b31      	ldr	r3, [pc, #196]	; (8012a2c <Send+0x1b0>)
 8012968:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801296c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012970:	4b2e      	ldr	r3, [pc, #184]	; (8012a2c <Send+0x1b0>)
 8012972:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801297a:	4b2c      	ldr	r3, [pc, #176]	; (8012a2c <Send+0x1b0>)
 801297c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012984:	4b29      	ldr	r3, [pc, #164]	; (8012a2c <Send+0x1b0>)
 8012986:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801298a:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801298c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012990:	f107 0014 	add.w	r0, r7, #20
 8012994:	4a26      	ldr	r2, [pc, #152]	; (8012a30 <Send+0x1b4>)
 8012996:	4927      	ldr	r1, [pc, #156]	; (8012a34 <Send+0x1b8>)
 8012998:	f002 fc58 	bl	801524c <LoRaMacAdrCalcNext>
 801299c:	4603      	mov	r3, r0
 801299e:	461a      	mov	r2, r3
 80129a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129a4:	f362 1386 	bfi	r3, r2, #6, #1
 80129a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80129ac:	7afa      	ldrb	r2, [r7, #11]
 80129ae:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80129b2:	893b      	ldrh	r3, [r7, #8]
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	68f8      	ldr	r0, [r7, #12]
 80129ba:	f000 fc5d 	bl	8013278 <PrepareFrame>
 80129be:	4603      	mov	r3, r0
 80129c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80129c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d003      	beq.n	80129d4 <Send+0x158>
 80129cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129d0:	2b0a      	cmp	r3, #10
 80129d2:	d107      	bne.n	80129e4 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80129d4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80129d8:	4618      	mov	r0, r3
 80129da:	f000 f961 	bl	8012ca0 <ScheduleTx>
 80129de:	4603      	mov	r3, r0
 80129e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80129e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00a      	beq.n	8012a02 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80129ec:	4a0f      	ldr	r2, [pc, #60]	; (8012a2c <Send+0x1b0>)
 80129ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80129f2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80129f6:	4a0d      	ldr	r2, [pc, #52]	; (8012a2c <Send+0x1b0>)
 80129f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80129fc:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012a00:	e00d      	b.n	8012a1e <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012a02:	4b0a      	ldr	r3, [pc, #40]	; (8012a2c <Send+0x1b0>)
 8012a04:	2200      	movs	r2, #0
 8012a06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a0c:	4a07      	ldr	r2, [pc, #28]	; (8012a2c <Send+0x1b0>)
 8012a0e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012a10:	f002 fee8 	bl	80157e4 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d001      	beq.n	8012a1e <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a1a:	2313      	movs	r3, #19
 8012a1c:	e001      	b.n	8012a22 <Send+0x1a6>
        }
    }
    return status;
 8012a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3730      	adds	r7, #48	; 0x30
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	20000e48 	.word	0x20000e48
 8012a30:	20000e80 	.word	0x20000e80
 8012a34:	20000e81 	.word	0x20000e81

08012a38 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	4603      	mov	r3, r0
 8012a40:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012a46:	2300      	movs	r3, #0
 8012a48:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012a4e:	79fb      	ldrb	r3, [r7, #7]
 8012a50:	2bff      	cmp	r3, #255	; 0xff
 8012a52:	d11f      	bne.n	8012a94 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012a54:	2000      	movs	r0, #0
 8012a56:	f7ff f941 	bl	8011cdc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012a5a:	4b15      	ldr	r3, [pc, #84]	; (8012ab0 <SendReJoinReq+0x78>)
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012a62:	4b13      	ldr	r3, [pc, #76]	; (8012ab0 <SendReJoinReq+0x78>)
 8012a64:	4a13      	ldr	r2, [pc, #76]	; (8012ab4 <SendReJoinReq+0x7c>)
 8012a66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012a6a:	4b11      	ldr	r3, [pc, #68]	; (8012ab0 <SendReJoinReq+0x78>)
 8012a6c:	22ff      	movs	r2, #255	; 0xff
 8012a6e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012a72:	7b3b      	ldrb	r3, [r7, #12]
 8012a74:	f36f 1347 	bfc	r3, #5, #3
 8012a78:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012a7a:	7b3a      	ldrb	r2, [r7, #12]
 8012a7c:	4b0c      	ldr	r3, [pc, #48]	; (8012ab0 <SendReJoinReq+0x78>)
 8012a7e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012a82:	480d      	ldr	r0, [pc, #52]	; (8012ab8 <SendReJoinReq+0x80>)
 8012a84:	f7fc fb1c 	bl	800f0c0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012a88:	480c      	ldr	r0, [pc, #48]	; (8012abc <SendReJoinReq+0x84>)
 8012a8a:	f7fc fae9 	bl	800f060 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	73fb      	strb	r3, [r7, #15]

            break;
 8012a92:	e002      	b.n	8012a9a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012a94:	2302      	movs	r3, #2
 8012a96:	73bb      	strb	r3, [r7, #14]
            break;
 8012a98:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012a9a:	7bfb      	ldrb	r3, [r7, #15]
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f000 f8ff 	bl	8012ca0 <ScheduleTx>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	73bb      	strb	r3, [r7, #14]
    return status;
 8012aa6:	7bbb      	ldrb	r3, [r7, #14]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	20000940 	.word	0x20000940
 8012ab4:	20000942 	.word	0x20000942
 8012ab8:	20000a4e 	.word	0x20000a4e
 8012abc:	20000a56 	.word	0x20000a56

08012ac0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012ac4:	f002 fc31 	bl	801532a <LoRaMacClassBIsBeaconExpected>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d001      	beq.n	8012ad2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012ace:	230e      	movs	r3, #14
 8012ad0:	e013      	b.n	8012afa <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012ad2:	4b0b      	ldr	r3, [pc, #44]	; (8012b00 <CheckForClassBCollision+0x40>)
 8012ad4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d10d      	bne.n	8012af8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012adc:	f002 fc2c 	bl	8015338 <LoRaMacClassBIsPingExpected>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d001      	beq.n	8012aea <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012ae6:	230f      	movs	r3, #15
 8012ae8:	e007      	b.n	8012afa <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012aea:	f002 fc2c 	bl	8015346 <LoRaMacClassBIsMulticastExpected>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d001      	beq.n	8012af8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012af4:	230f      	movs	r3, #15
 8012af6:	e000      	b.n	8012afa <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012af8:	2300      	movs	r3, #0
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	20000e48 	.word	0x20000e48

08012b04 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012b04:	b590      	push	{r4, r7, lr}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012b0a:	4b2d      	ldr	r3, [pc, #180]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b0c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012b10:	4b2b      	ldr	r3, [pc, #172]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b12:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012b16:	4b2a      	ldr	r3, [pc, #168]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b18:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8012b1c:	4b28      	ldr	r3, [pc, #160]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b1e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8012b22:	4b27      	ldr	r3, [pc, #156]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b24:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012b28:	b25b      	sxtb	r3, r3
 8012b2a:	f004 fcf9 	bl	8017520 <RegionApplyDrOffset>
 8012b2e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012b30:	b259      	sxtb	r1, r3
 8012b32:	4b23      	ldr	r3, [pc, #140]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b34:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012b38:	4b21      	ldr	r3, [pc, #132]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b3c:	4821      	ldr	r0, [pc, #132]	; (8012bc4 <ComputeRxWindowParameters+0xc0>)
 8012b3e:	9000      	str	r0, [sp, #0]
 8012b40:	4620      	mov	r0, r4
 8012b42:	f004 fbfd 	bl	8017340 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012b46:	4b1e      	ldr	r3, [pc, #120]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b48:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012b4c:	4b1c      	ldr	r3, [pc, #112]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012b52:	b259      	sxtb	r1, r3
 8012b54:	4b1a      	ldr	r3, [pc, #104]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b56:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012b5a:	4b19      	ldr	r3, [pc, #100]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b5e:	4c1a      	ldr	r4, [pc, #104]	; (8012bc8 <ComputeRxWindowParameters+0xc4>)
 8012b60:	9400      	str	r4, [sp, #0]
 8012b62:	f004 fbed 	bl	8017340 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012b66:	4b16      	ldr	r3, [pc, #88]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b6a:	4a18      	ldr	r2, [pc, #96]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012b6c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012b70:	4413      	add	r3, r2
 8012b72:	4a16      	ldr	r2, [pc, #88]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012b74:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012b78:	4b11      	ldr	r3, [pc, #68]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b7c:	4a13      	ldr	r2, [pc, #76]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012b7e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012b82:	4413      	add	r3, r2
 8012b84:	4a11      	ldr	r2, [pc, #68]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012b86:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8012b8a:	4b10      	ldr	r3, [pc, #64]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012b8c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012b90:	2b04      	cmp	r3, #4
 8012b92:	d011      	beq.n	8012bb8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012b94:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012b98:	4a0c      	ldr	r2, [pc, #48]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012b9a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012b9e:	4413      	add	r3, r2
 8012ba0:	4a0a      	ldr	r2, [pc, #40]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012ba2:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012ba6:	4b06      	ldr	r3, [pc, #24]	; (8012bc0 <ComputeRxWindowParameters+0xbc>)
 8012ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012baa:	4a08      	ldr	r2, [pc, #32]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012bac:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012bb0:	4413      	add	r3, r2
 8012bb2:	4a06      	ldr	r2, [pc, #24]	; (8012bcc <ComputeRxWindowParameters+0xc8>)
 8012bb4:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012bb8:	bf00      	nop
 8012bba:	3704      	adds	r7, #4
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd90      	pop	{r4, r7, pc}
 8012bc0:	20000e48 	.word	0x20000e48
 8012bc4:	20000cf8 	.word	0x20000cf8
 8012bc8:	20000d0c 	.word	0x20000d0c
 8012bcc:	20000940 	.word	0x20000940

08012bd0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012bda:	4b13      	ldr	r3, [pc, #76]	; (8012c28 <VerifyTxFrame+0x58>)
 8012bdc:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d01b      	beq.n	8012c1c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012be4:	1d3b      	adds	r3, r7, #4
 8012be6:	4618      	mov	r0, r3
 8012be8:	f002 fe4c 	bl	8015884 <LoRaMacCommandsGetSizeSerializedCmds>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d001      	beq.n	8012bf6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012bf2:	2313      	movs	r3, #19
 8012bf4:	e013      	b.n	8012c1e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012bf6:	4b0d      	ldr	r3, [pc, #52]	; (8012c2c <VerifyTxFrame+0x5c>)
 8012bf8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012bfc:	4a0a      	ldr	r2, [pc, #40]	; (8012c28 <VerifyTxFrame+0x58>)
 8012bfe:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8012c02:	687a      	ldr	r2, [r7, #4]
 8012c04:	b2d2      	uxtb	r2, r2
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7ff f978 	bl	8011efc <ValidatePayloadLength>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	f083 0301 	eor.w	r3, r3, #1
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d001      	beq.n	8012c1c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012c18:	2308      	movs	r3, #8
 8012c1a:	e000      	b.n	8012c1e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8012c1c:	2300      	movs	r3, #0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3708      	adds	r7, #8
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	20000e48 	.word	0x20000e48
 8012c2c:	20000940 	.word	0x20000940

08012c30 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b082      	sub	sp, #8
 8012c34:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8012c36:	4b18      	ldr	r3, [pc, #96]	; (8012c98 <SerializeTxFrame+0x68>)
 8012c38:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d002      	beq.n	8012c46 <SerializeTxFrame+0x16>
 8012c40:	2b04      	cmp	r3, #4
 8012c42:	d011      	beq.n	8012c68 <SerializeTxFrame+0x38>
 8012c44:	e021      	b.n	8012c8a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012c46:	4815      	ldr	r0, [pc, #84]	; (8012c9c <SerializeTxFrame+0x6c>)
 8012c48:	f004 f97a 	bl	8016f40 <LoRaMacSerializerJoinRequest>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012c50:	79fb      	ldrb	r3, [r7, #7]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012c56:	2311      	movs	r3, #17
 8012c58:	e01a      	b.n	8012c90 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012c5a:	4b0f      	ldr	r3, [pc, #60]	; (8012c98 <SerializeTxFrame+0x68>)
 8012c5c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	4b0d      	ldr	r3, [pc, #52]	; (8012c98 <SerializeTxFrame+0x68>)
 8012c64:	801a      	strh	r2, [r3, #0]
            break;
 8012c66:	e012      	b.n	8012c8e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8012c68:	480c      	ldr	r0, [pc, #48]	; (8012c9c <SerializeTxFrame+0x6c>)
 8012c6a:	f004 f9eb 	bl	8017044 <LoRaMacSerializerData>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012c72:	79fb      	ldrb	r3, [r7, #7]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d001      	beq.n	8012c7c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012c78:	2311      	movs	r3, #17
 8012c7a:	e009      	b.n	8012c90 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012c7c:	4b06      	ldr	r3, [pc, #24]	; (8012c98 <SerializeTxFrame+0x68>)
 8012c7e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012c82:	b29a      	uxth	r2, r3
 8012c84:	4b04      	ldr	r3, [pc, #16]	; (8012c98 <SerializeTxFrame+0x68>)
 8012c86:	801a      	strh	r2, [r3, #0]
            break;
 8012c88:	e001      	b.n	8012c8e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012c8a:	2303      	movs	r3, #3
 8012c8c:	e000      	b.n	8012c90 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012c8e:	2300      	movs	r3, #0
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3708      	adds	r7, #8
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	20000940 	.word	0x20000940
 8012c9c:	20000a48 	.word	0x20000a48

08012ca0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b090      	sub	sp, #64	; 0x40
 8012ca4:	af02      	add	r7, sp, #8
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012caa:	2303      	movs	r3, #3
 8012cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012cb0:	f7ff ff06 	bl	8012ac0 <CheckForClassBCollision>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012cba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d002      	beq.n	8012cc8 <ScheduleTx+0x28>
    {
        return status;
 8012cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cc6:	e092      	b.n	8012dee <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8012cc8:	f000 f8fe 	bl	8012ec8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8012ccc:	f7ff ffb0 	bl	8012c30 <SerializeTxFrame>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d002      	beq.n	8012ce4 <ScheduleTx+0x44>
    {
        return status;
 8012cde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ce2:	e084      	b.n	8012dee <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8012ce4:	4b44      	ldr	r3, [pc, #272]	; (8012df8 <ScheduleTx+0x158>)
 8012ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012cea:	4b43      	ldr	r3, [pc, #268]	; (8012df8 <ScheduleTx+0x158>)
 8012cec:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012cf0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8012cf2:	4b41      	ldr	r3, [pc, #260]	; (8012df8 <ScheduleTx+0x158>)
 8012cf4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012cf8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f00a fa2c 	bl	801d15c <SysTimeGetMcuTime>
 8012d04:	4638      	mov	r0, r7
 8012d06:	4b3c      	ldr	r3, [pc, #240]	; (8012df8 <ScheduleTx+0x158>)
 8012d08:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8012d0c:	9200      	str	r2, [sp, #0]
 8012d0e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012d12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012d16:	ca06      	ldmia	r2, {r1, r2}
 8012d18:	f00a f981 	bl	801d01e <SysTimeSub>
 8012d1c:	f107 0320 	add.w	r3, r7, #32
 8012d20:	463a      	mov	r2, r7
 8012d22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d26:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8012d2a:	4b33      	ldr	r3, [pc, #204]	; (8012df8 <ScheduleTx+0x158>)
 8012d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d2e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012d30:	2300      	movs	r3, #0
 8012d32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8012d36:	2301      	movs	r3, #1
 8012d38:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8012d3a:	4b30      	ldr	r3, [pc, #192]	; (8012dfc <ScheduleTx+0x15c>)
 8012d3c:	881b      	ldrh	r3, [r3, #0]
 8012d3e:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012d40:	4b2d      	ldr	r3, [pc, #180]	; (8012df8 <ScheduleTx+0x158>)
 8012d42:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d104      	bne.n	8012d54 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8012d50:	2300      	movs	r3, #0
 8012d52:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8012d54:	4b28      	ldr	r3, [pc, #160]	; (8012df8 <ScheduleTx+0x158>)
 8012d56:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012d5a:	f107 0114 	add.w	r1, r7, #20
 8012d5e:	4b28      	ldr	r3, [pc, #160]	; (8012e00 <ScheduleTx+0x160>)
 8012d60:	9300      	str	r3, [sp, #0]
 8012d62:	4b28      	ldr	r3, [pc, #160]	; (8012e04 <ScheduleTx+0x164>)
 8012d64:	4a28      	ldr	r2, [pc, #160]	; (8012e08 <ScheduleTx+0x168>)
 8012d66:	f004 fbb1 	bl	80174cc <RegionNextChannel>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8012d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d025      	beq.n	8012dc4 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8012d78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d7c:	2b0b      	cmp	r3, #11
 8012d7e:	d11e      	bne.n	8012dbe <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012d80:	4b1e      	ldr	r3, [pc, #120]	; (8012dfc <ScheduleTx+0x15c>)
 8012d82:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d01c      	beq.n	8012dc4 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8012d8a:	7bfb      	ldrb	r3, [r7, #15]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d013      	beq.n	8012db8 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012d90:	4b1a      	ldr	r3, [pc, #104]	; (8012dfc <ScheduleTx+0x15c>)
 8012d92:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012d96:	f043 0320 	orr.w	r3, r3, #32
 8012d9a:	4a18      	ldr	r2, [pc, #96]	; (8012dfc <ScheduleTx+0x15c>)
 8012d9c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012da0:	4b16      	ldr	r3, [pc, #88]	; (8012dfc <ScheduleTx+0x15c>)
 8012da2:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012da6:	4619      	mov	r1, r3
 8012da8:	4818      	ldr	r0, [pc, #96]	; (8012e0c <ScheduleTx+0x16c>)
 8012daa:	f00a ff77 	bl	801dc9c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8012dae:	4817      	ldr	r0, [pc, #92]	; (8012e0c <ScheduleTx+0x16c>)
 8012db0:	f00a fe96 	bl	801dae0 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8012db4:	2300      	movs	r3, #0
 8012db6:	e01a      	b.n	8012dee <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8012db8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dbc:	e017      	b.n	8012dee <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc2:	e014      	b.n	8012dee <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012dc4:	f7ff fe9e 	bl	8012b04 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012dc8:	f7ff ff02 	bl	8012bd0 <VerifyTxFrame>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012dd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <ScheduleTx+0x140>
    {
        return status;
 8012dda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dde:	e006      	b.n	8012dee <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012de0:	4b06      	ldr	r3, [pc, #24]	; (8012dfc <ScheduleTx+0x15c>)
 8012de2:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8012de6:	4618      	mov	r0, r3
 8012de8:	f000 fb62 	bl	80134b0 <SendFrameOnChannel>
 8012dec:	4603      	mov	r3, r0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3738      	adds	r7, #56	; 0x38
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	20000e48 	.word	0x20000e48
 8012dfc:	20000940 	.word	0x20000940
 8012e00:	20000e78 	.word	0x20000e78
 8012e04:	20000dc4 	.word	0x20000dc4
 8012e08:	20000d51 	.word	0x20000d51
 8012e0c:	20000ca8 	.word	0x20000ca8

08012e10 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	4603      	mov	r3, r0
 8012e18:	460a      	mov	r2, r1
 8012e1a:	71fb      	strb	r3, [r7, #7]
 8012e1c:	4613      	mov	r3, r2
 8012e1e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012e20:	2313      	movs	r3, #19
 8012e22:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8012e24:	2300      	movs	r3, #0
 8012e26:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012e28:	4b25      	ldr	r3, [pc, #148]	; (8012ec0 <SecureFrame+0xb0>)
 8012e2a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d002      	beq.n	8012e38 <SecureFrame+0x28>
 8012e32:	2b04      	cmp	r3, #4
 8012e34:	d011      	beq.n	8012e5a <SecureFrame+0x4a>
 8012e36:	e03b      	b.n	8012eb0 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012e38:	4822      	ldr	r0, [pc, #136]	; (8012ec4 <SecureFrame+0xb4>)
 8012e3a:	f003 fc47 	bl	80166cc <LoRaMacCryptoPrepareJoinRequest>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012e42:	7bfb      	ldrb	r3, [r7, #15]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e48:	2311      	movs	r3, #17
 8012e4a:	e034      	b.n	8012eb6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012e4c:	4b1c      	ldr	r3, [pc, #112]	; (8012ec0 <SecureFrame+0xb0>)
 8012e4e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012e52:	b29a      	uxth	r2, r3
 8012e54:	4b1a      	ldr	r3, [pc, #104]	; (8012ec0 <SecureFrame+0xb0>)
 8012e56:	801a      	strh	r2, [r3, #0]
            break;
 8012e58:	e02c      	b.n	8012eb4 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012e5a:	f107 0308 	add.w	r3, r7, #8
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f003 fb44 	bl	80164ec <LoRaMacCryptoGetFCntUp>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d001      	beq.n	8012e6e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012e6a:	2312      	movs	r3, #18
 8012e6c:	e023      	b.n	8012eb6 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8012e6e:	4b14      	ldr	r3, [pc, #80]	; (8012ec0 <SecureFrame+0xb0>)
 8012e70:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d104      	bne.n	8012e82 <SecureFrame+0x72>
 8012e78:	4b11      	ldr	r3, [pc, #68]	; (8012ec0 <SecureFrame+0xb0>)
 8012e7a:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012e7e:	2b01      	cmp	r3, #1
 8012e80:	d902      	bls.n	8012e88 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	3b01      	subs	r3, #1
 8012e86:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012e88:	68b8      	ldr	r0, [r7, #8]
 8012e8a:	79ba      	ldrb	r2, [r7, #6]
 8012e8c:	79f9      	ldrb	r1, [r7, #7]
 8012e8e:	4b0d      	ldr	r3, [pc, #52]	; (8012ec4 <SecureFrame+0xb4>)
 8012e90:	f003 fd4a 	bl	8016928 <LoRaMacCryptoSecureMessage>
 8012e94:	4603      	mov	r3, r0
 8012e96:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012e98:	7bfb      	ldrb	r3, [r7, #15]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d001      	beq.n	8012ea2 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e9e:	2311      	movs	r3, #17
 8012ea0:	e009      	b.n	8012eb6 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012ea2:	4b07      	ldr	r3, [pc, #28]	; (8012ec0 <SecureFrame+0xb0>)
 8012ea4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	4b05      	ldr	r3, [pc, #20]	; (8012ec0 <SecureFrame+0xb0>)
 8012eac:	801a      	strh	r2, [r3, #0]
            break;
 8012eae:	e001      	b.n	8012eb4 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012eb0:	2303      	movs	r3, #3
 8012eb2:	e000      	b.n	8012eb6 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8012eb4:	2300      	movs	r3, #0
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20000940 	.word	0x20000940
 8012ec4:	20000a48 	.word	0x20000a48

08012ec8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012ec8:	b480      	push	{r7}
 8012eca:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012ecc:	4b09      	ldr	r3, [pc, #36]	; (8012ef4 <CalculateBackOff+0x2c>)
 8012ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d10a      	bne.n	8012eea <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012ed4:	4b07      	ldr	r3, [pc, #28]	; (8012ef4 <CalculateBackOff+0x2c>)
 8012ed6:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8012eda:	3b01      	subs	r3, #1
 8012edc:	4a06      	ldr	r2, [pc, #24]	; (8012ef8 <CalculateBackOff+0x30>)
 8012ede:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 8012ee2:	fb02 f303 	mul.w	r3, r2, r3
 8012ee6:	4a03      	ldr	r2, [pc, #12]	; (8012ef4 <CalculateBackOff+0x2c>)
 8012ee8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8012eea:	bf00      	nop
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bc80      	pop	{r7}
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	20000e48 	.word	0x20000e48
 8012ef8:	20000940 	.word	0x20000940

08012efc <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	4603      	mov	r3, r0
 8012f04:	7139      	strb	r1, [r7, #4]
 8012f06:	71fb      	strb	r3, [r7, #7]
 8012f08:	4613      	mov	r3, r2
 8012f0a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012f0c:	79fb      	ldrb	r3, [r7, #7]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d002      	beq.n	8012f18 <RemoveMacCommands+0x1c>
 8012f12:	79fb      	ldrb	r3, [r7, #7]
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d10d      	bne.n	8012f34 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012f18:	79bb      	ldrb	r3, [r7, #6]
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d108      	bne.n	8012f30 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012f1e:	793b      	ldrb	r3, [r7, #4]
 8012f20:	f003 0320 	and.w	r3, r3, #32
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d004      	beq.n	8012f34 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8012f2a:	f002 fc7f 	bl	801582c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8012f2e:	e001      	b.n	8012f34 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012f30:	f002 fc7c 	bl	801582c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8012f34:	bf00      	nop
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8012f3c:	b5b0      	push	{r4, r5, r7, lr}
 8012f3e:	b090      	sub	sp, #64	; 0x40
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	4603      	mov	r3, r0
 8012f44:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	f083 0301 	eor.w	r3, r3, #1
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d003      	beq.n	8012f5a <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8012f52:	4b80      	ldr	r3, [pc, #512]	; (8013154 <ResetMacParameters+0x218>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8012f5a:	4b7e      	ldr	r3, [pc, #504]	; (8013154 <ResetMacParameters+0x218>)
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8012f60:	4b7d      	ldr	r3, [pc, #500]	; (8013158 <ResetMacParameters+0x21c>)
 8012f62:	2200      	movs	r2, #0
 8012f64:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8012f68:	4b7b      	ldr	r3, [pc, #492]	; (8013158 <ResetMacParameters+0x21c>)
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012f70:	4b79      	ldr	r3, [pc, #484]	; (8013158 <ResetMacParameters+0x21c>)
 8012f72:	2201      	movs	r2, #1
 8012f74:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8012f78:	4b77      	ldr	r3, [pc, #476]	; (8013158 <ResetMacParameters+0x21c>)
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012f80:	4b74      	ldr	r3, [pc, #464]	; (8013154 <ResetMacParameters+0x218>)
 8012f82:	2200      	movs	r2, #0
 8012f84:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8012f88:	4b72      	ldr	r3, [pc, #456]	; (8013154 <ResetMacParameters+0x218>)
 8012f8a:	2201      	movs	r2, #1
 8012f8c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012f90:	4b70      	ldr	r3, [pc, #448]	; (8013154 <ResetMacParameters+0x218>)
 8012f92:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8012f96:	4b6f      	ldr	r3, [pc, #444]	; (8013154 <ResetMacParameters+0x218>)
 8012f98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012f9c:	4b6d      	ldr	r3, [pc, #436]	; (8013154 <ResetMacParameters+0x218>)
 8012f9e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8012fa2:	4b6c      	ldr	r3, [pc, #432]	; (8013154 <ResetMacParameters+0x218>)
 8012fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8012fa8:	4b6a      	ldr	r3, [pc, #424]	; (8013154 <ResetMacParameters+0x218>)
 8012faa:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8012fae:	4b69      	ldr	r3, [pc, #420]	; (8013154 <ResetMacParameters+0x218>)
 8012fb0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012fb4:	4b67      	ldr	r3, [pc, #412]	; (8013154 <ResetMacParameters+0x218>)
 8012fb6:	4a67      	ldr	r2, [pc, #412]	; (8013154 <ResetMacParameters+0x218>)
 8012fb8:	336c      	adds	r3, #108	; 0x6c
 8012fba:	32b4      	adds	r2, #180	; 0xb4
 8012fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fc0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012fc4:	4b63      	ldr	r3, [pc, #396]	; (8013154 <ResetMacParameters+0x218>)
 8012fc6:	4a63      	ldr	r2, [pc, #396]	; (8013154 <ResetMacParameters+0x218>)
 8012fc8:	3374      	adds	r3, #116	; 0x74
 8012fca:	32bc      	adds	r2, #188	; 0xbc
 8012fcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fd0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8012fd4:	4b5f      	ldr	r3, [pc, #380]	; (8013154 <ResetMacParameters+0x218>)
 8012fd6:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8012fda:	4b5e      	ldr	r3, [pc, #376]	; (8013154 <ResetMacParameters+0x218>)
 8012fdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8012fe0:	4b5c      	ldr	r3, [pc, #368]	; (8013154 <ResetMacParameters+0x218>)
 8012fe2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8012fe6:	4b5b      	ldr	r3, [pc, #364]	; (8013154 <ResetMacParameters+0x218>)
 8012fe8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8012fec:	4b59      	ldr	r3, [pc, #356]	; (8013154 <ResetMacParameters+0x218>)
 8012fee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012ff2:	4a58      	ldr	r2, [pc, #352]	; (8013154 <ResetMacParameters+0x218>)
 8012ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012ff8:	4b56      	ldr	r3, [pc, #344]	; (8013154 <ResetMacParameters+0x218>)
 8012ffa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012ffe:	4a55      	ldr	r2, [pc, #340]	; (8013154 <ResetMacParameters+0x218>)
 8013000:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013004:	4b53      	ldr	r3, [pc, #332]	; (8013154 <ResetMacParameters+0x218>)
 8013006:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801300a:	4b52      	ldr	r3, [pc, #328]	; (8013154 <ResetMacParameters+0x218>)
 801300c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013010:	4b50      	ldr	r3, [pc, #320]	; (8013154 <ResetMacParameters+0x218>)
 8013012:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8013016:	4b4f      	ldr	r3, [pc, #316]	; (8013154 <ResetMacParameters+0x218>)
 8013018:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 801301c:	4b4e      	ldr	r3, [pc, #312]	; (8013158 <ResetMacParameters+0x21c>)
 801301e:	2200      	movs	r2, #0
 8013020:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 8013024:	4b4b      	ldr	r3, [pc, #300]	; (8013154 <ResetMacParameters+0x218>)
 8013026:	2200      	movs	r2, #0
 8013028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 801302c:	4b49      	ldr	r3, [pc, #292]	; (8013154 <ResetMacParameters+0x218>)
 801302e:	2200      	movs	r2, #0
 8013030:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8013034:	4b47      	ldr	r3, [pc, #284]	; (8013154 <ResetMacParameters+0x218>)
 8013036:	2200      	movs	r2, #0
 8013038:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 801303c:	4b45      	ldr	r3, [pc, #276]	; (8013154 <ResetMacParameters+0x218>)
 801303e:	2200      	movs	r2, #0
 8013040:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8013044:	4b43      	ldr	r3, [pc, #268]	; (8013154 <ResetMacParameters+0x218>)
 8013046:	2200      	movs	r2, #0
 8013048:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 801304c:	4b41      	ldr	r3, [pc, #260]	; (8013154 <ResetMacParameters+0x218>)
 801304e:	2200      	movs	r2, #0
 8013050:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8013054:	4b3f      	ldr	r3, [pc, #252]	; (8013154 <ResetMacParameters+0x218>)
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 801305c:	4b3d      	ldr	r3, [pc, #244]	; (8013154 <ResetMacParameters+0x218>)
 801305e:	2200      	movs	r2, #0
 8013060:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013064:	4b3b      	ldr	r3, [pc, #236]	; (8013154 <ResetMacParameters+0x218>)
 8013066:	2200      	movs	r2, #0
 8013068:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801306c:	2301      	movs	r3, #1
 801306e:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013070:	4b3a      	ldr	r3, [pc, #232]	; (801315c <ResetMacParameters+0x220>)
 8013072:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013074:	4b3a      	ldr	r3, [pc, #232]	; (8013160 <ResetMacParameters+0x224>)
 8013076:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013078:	4b36      	ldr	r3, [pc, #216]	; (8013154 <ResetMacParameters+0x218>)
 801307a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801307e:	f107 020c 	add.w	r2, r7, #12
 8013082:	4611      	mov	r1, r2
 8013084:	4618      	mov	r0, r3
 8013086:	f004 f90d 	bl	80172a4 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801308a:	4b33      	ldr	r3, [pc, #204]	; (8013158 <ResetMacParameters+0x21c>)
 801308c:	2200      	movs	r2, #0
 801308e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013092:	4b31      	ldr	r3, [pc, #196]	; (8013158 <ResetMacParameters+0x21c>)
 8013094:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8013098:	4b2f      	ldr	r3, [pc, #188]	; (8013158 <ResetMacParameters+0x21c>)
 801309a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801309e:	4b2d      	ldr	r3, [pc, #180]	; (8013154 <ResetMacParameters+0x218>)
 80130a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a2:	4a2d      	ldr	r2, [pc, #180]	; (8013158 <ResetMacParameters+0x21c>)
 80130a4:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80130a8:	4b2a      	ldr	r3, [pc, #168]	; (8013154 <ResetMacParameters+0x218>)
 80130aa:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80130ae:	4b2a      	ldr	r3, [pc, #168]	; (8013158 <ResetMacParameters+0x21c>)
 80130b0:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80130b4:	4b27      	ldr	r3, [pc, #156]	; (8013154 <ResetMacParameters+0x218>)
 80130b6:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80130ba:	4b27      	ldr	r3, [pc, #156]	; (8013158 <ResetMacParameters+0x21c>)
 80130bc:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80130c0:	4b25      	ldr	r3, [pc, #148]	; (8013158 <ResetMacParameters+0x21c>)
 80130c2:	2200      	movs	r2, #0
 80130c4:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80130c8:	4b23      	ldr	r3, [pc, #140]	; (8013158 <ResetMacParameters+0x21c>)
 80130ca:	2201      	movs	r2, #1
 80130cc:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80130d0:	4a21      	ldr	r2, [pc, #132]	; (8013158 <ResetMacParameters+0x21c>)
 80130d2:	4b21      	ldr	r3, [pc, #132]	; (8013158 <ResetMacParameters+0x21c>)
 80130d4:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80130d8:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80130dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80130de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80130e0:	682b      	ldr	r3, [r5, #0]
 80130e2:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80130e4:	4b1c      	ldr	r3, [pc, #112]	; (8013158 <ResetMacParameters+0x21c>)
 80130e6:	2201      	movs	r2, #1
 80130e8:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80130ec:	4b1a      	ldr	r3, [pc, #104]	; (8013158 <ResetMacParameters+0x21c>)
 80130ee:	2202      	movs	r2, #2
 80130f0:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80130f4:	2300      	movs	r3, #0
 80130f6:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80130f8:	2300      	movs	r3, #0
 80130fa:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80130fc:	4b16      	ldr	r3, [pc, #88]	; (8013158 <ResetMacParameters+0x21c>)
 80130fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013102:	2b00      	cmp	r3, #0
 8013104:	d009      	beq.n	801311a <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013106:	4b14      	ldr	r3, [pc, #80]	; (8013158 <ResetMacParameters+0x21c>)
 8013108:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013110:	4b11      	ldr	r3, [pc, #68]	; (8013158 <ResetMacParameters+0x21c>)
 8013112:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013116:	695b      	ldr	r3, [r3, #20]
 8013118:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801311a:	4b12      	ldr	r3, [pc, #72]	; (8013164 <ResetMacParameters+0x228>)
 801311c:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801311e:	4b12      	ldr	r3, [pc, #72]	; (8013168 <ResetMacParameters+0x22c>)
 8013120:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013122:	4b12      	ldr	r3, [pc, #72]	; (801316c <ResetMacParameters+0x230>)
 8013124:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013126:	4b12      	ldr	r3, [pc, #72]	; (8013170 <ResetMacParameters+0x234>)
 8013128:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801312a:	4b12      	ldr	r3, [pc, #72]	; (8013174 <ResetMacParameters+0x238>)
 801312c:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 801312e:	4b12      	ldr	r3, [pc, #72]	; (8013178 <ResetMacParameters+0x23c>)
 8013130:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013132:	4b12      	ldr	r3, [pc, #72]	; (801317c <ResetMacParameters+0x240>)
 8013134:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8013136:	4b12      	ldr	r3, [pc, #72]	; (8013180 <ResetMacParameters+0x244>)
 8013138:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 801313a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801313e:	f107 0318 	add.w	r3, r7, #24
 8013142:	4a10      	ldr	r2, [pc, #64]	; (8013184 <ResetMacParameters+0x248>)
 8013144:	4618      	mov	r0, r3
 8013146:	f002 f899 	bl	801527c <LoRaMacClassBInit>
}
 801314a:	bf00      	nop
 801314c:	3740      	adds	r7, #64	; 0x40
 801314e:	46bd      	mov	sp, r7
 8013150:	bdb0      	pop	{r4, r5, r7, pc}
 8013152:	bf00      	nop
 8013154:	20000e48 	.word	0x20000e48
 8013158:	20000940 	.word	0x20000940
 801315c:	20001068 	.word	0x20001068
 8013160:	200010fc 	.word	0x200010fc
 8013164:	20000d9c 	.word	0x20000d9c
 8013168:	20000d58 	.word	0x20000d58
 801316c:	20000d88 	.word	0x20000d88
 8013170:	20000dc1 	.word	0x20000dc1
 8013174:	20000f2c 	.word	0x20000f2c
 8013178:	20000e90 	.word	0x20000e90
 801317c:	20000e94 	.word	0x20000e94
 8013180:	20000f30 	.word	0x20000f30
 8013184:	20001598 	.word	0x20001598

08013188 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f00a fd12 	bl	801dbbc <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013198:	4b11      	ldr	r3, [pc, #68]	; (80131e0 <RxWindowSetup+0x58>)
 801319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801319c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801319e:	4b11      	ldr	r3, [pc, #68]	; (80131e4 <RxWindowSetup+0x5c>)
 80131a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80131a4:	4a10      	ldr	r2, [pc, #64]	; (80131e8 <RxWindowSetup+0x60>)
 80131a6:	6839      	ldr	r1, [r7, #0]
 80131a8:	4618      	mov	r0, r3
 80131aa:	f004 f8e3 	bl	8017374 <RegionRxConfig>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d010      	beq.n	80131d6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80131b4:	4b0d      	ldr	r3, [pc, #52]	; (80131ec <RxWindowSetup+0x64>)
 80131b6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80131ba:	4b0c      	ldr	r3, [pc, #48]	; (80131ec <RxWindowSetup+0x64>)
 80131bc:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80131c0:	4b07      	ldr	r3, [pc, #28]	; (80131e0 <RxWindowSetup+0x58>)
 80131c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131c4:	4a07      	ldr	r2, [pc, #28]	; (80131e4 <RxWindowSetup+0x5c>)
 80131c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80131c8:	4610      	mov	r0, r2
 80131ca:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	7cda      	ldrb	r2, [r3, #19]
 80131d0:	4b06      	ldr	r3, [pc, #24]	; (80131ec <RxWindowSetup+0x64>)
 80131d2:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80131d6:	bf00      	nop
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	0801f460 	.word	0x0801f460
 80131e4:	20000e48 	.word	0x20000e48
 80131e8:	20000d5c 	.word	0x20000d5c
 80131ec:	20000940 	.word	0x20000940

080131f0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80131f0:	b590      	push	{r4, r7, lr}
 80131f2:	b083      	sub	sp, #12
 80131f4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80131f6:	4b1b      	ldr	r3, [pc, #108]	; (8013264 <OpenContinuousRxCWindow+0x74>)
 80131f8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80131fc:	4b19      	ldr	r3, [pc, #100]	; (8013264 <OpenContinuousRxCWindow+0x74>)
 80131fe:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013202:	b259      	sxtb	r1, r3
 8013204:	4b17      	ldr	r3, [pc, #92]	; (8013264 <OpenContinuousRxCWindow+0x74>)
 8013206:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801320a:	4b16      	ldr	r3, [pc, #88]	; (8013264 <OpenContinuousRxCWindow+0x74>)
 801320c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801320e:	4c16      	ldr	r4, [pc, #88]	; (8013268 <OpenContinuousRxCWindow+0x78>)
 8013210:	9400      	str	r4, [sp, #0]
 8013212:	f004 f895 	bl	8017340 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013216:	4b15      	ldr	r3, [pc, #84]	; (801326c <OpenContinuousRxCWindow+0x7c>)
 8013218:	2202      	movs	r2, #2
 801321a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801321e:	4b13      	ldr	r3, [pc, #76]	; (801326c <OpenContinuousRxCWindow+0x7c>)
 8013220:	2201      	movs	r2, #1
 8013222:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013226:	4b0f      	ldr	r3, [pc, #60]	; (8013264 <OpenContinuousRxCWindow+0x74>)
 8013228:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801322c:	4a10      	ldr	r2, [pc, #64]	; (8013270 <OpenContinuousRxCWindow+0x80>)
 801322e:	490e      	ldr	r1, [pc, #56]	; (8013268 <OpenContinuousRxCWindow+0x78>)
 8013230:	4618      	mov	r0, r3
 8013232:	f004 f89f 	bl	8017374 <RegionRxConfig>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00f      	beq.n	801325c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801323c:	4b0b      	ldr	r3, [pc, #44]	; (801326c <OpenContinuousRxCWindow+0x7c>)
 801323e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8013242:	4b0a      	ldr	r3, [pc, #40]	; (801326c <OpenContinuousRxCWindow+0x7c>)
 8013244:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <OpenContinuousRxCWindow+0x84>)
 801324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801324c:	2000      	movs	r0, #0
 801324e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013250:	4b06      	ldr	r3, [pc, #24]	; (801326c <OpenContinuousRxCWindow+0x7c>)
 8013252:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 8013256:	4b05      	ldr	r3, [pc, #20]	; (801326c <OpenContinuousRxCWindow+0x7c>)
 8013258:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801325c:	bf00      	nop
 801325e:	3704      	adds	r7, #4
 8013260:	46bd      	mov	sp, r7
 8013262:	bd90      	pop	{r4, r7, pc}
 8013264:	20000e48 	.word	0x20000e48
 8013268:	20000d20 	.word	0x20000d20
 801326c:	20000940 	.word	0x20000940
 8013270:	20000d5c 	.word	0x20000d5c
 8013274:	0801f460 	.word	0x0801f460

08013278 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b088      	sub	sp, #32
 801327c:	af00      	add	r7, sp, #0
 801327e:	60f8      	str	r0, [r7, #12]
 8013280:	60b9      	str	r1, [r7, #8]
 8013282:	603b      	str	r3, [r7, #0]
 8013284:	4613      	mov	r3, r2
 8013286:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013288:	4b82      	ldr	r3, [pc, #520]	; (8013494 <PrepareFrame+0x21c>)
 801328a:	2200      	movs	r2, #0
 801328c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801328e:	4b81      	ldr	r3, [pc, #516]	; (8013494 <PrepareFrame+0x21c>)
 8013290:	2200      	movs	r2, #0
 8013292:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8013296:	2300      	movs	r3, #0
 8013298:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801329a:	2300      	movs	r3, #0
 801329c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801329e:	2300      	movs	r3, #0
 80132a0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d101      	bne.n	80132ac <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80132a8:	2300      	movs	r3, #0
 80132aa:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80132ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80132ae:	461a      	mov	r2, r3
 80132b0:	6839      	ldr	r1, [r7, #0]
 80132b2:	4879      	ldr	r0, [pc, #484]	; (8013498 <PrepareFrame+0x220>)
 80132b4:	f006 fae7 	bl	8019886 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80132b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80132ba:	b2da      	uxtb	r2, r3
 80132bc:	4b75      	ldr	r3, [pc, #468]	; (8013494 <PrepareFrame+0x21c>)
 80132be:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	781a      	ldrb	r2, [r3, #0]
 80132c6:	4b73      	ldr	r3, [pc, #460]	; (8013494 <PrepareFrame+0x21c>)
 80132c8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80132d2:	b2db      	uxtb	r3, r3
 80132d4:	2b07      	cmp	r3, #7
 80132d6:	f000 80b9 	beq.w	801344c <PrepareFrame+0x1d4>
 80132da:	2b07      	cmp	r3, #7
 80132dc:	f300 80d0 	bgt.w	8013480 <PrepareFrame+0x208>
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	d006      	beq.n	80132f2 <PrepareFrame+0x7a>
 80132e4:	2b04      	cmp	r3, #4
 80132e6:	f040 80cb 	bne.w	8013480 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80132ea:	4b6a      	ldr	r3, [pc, #424]	; (8013494 <PrepareFrame+0x21c>)
 80132ec:	2201      	movs	r2, #1
 80132ee:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80132f2:	4b68      	ldr	r3, [pc, #416]	; (8013494 <PrepareFrame+0x21c>)
 80132f4:	2204      	movs	r2, #4
 80132f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80132fa:	4b66      	ldr	r3, [pc, #408]	; (8013494 <PrepareFrame+0x21c>)
 80132fc:	4a67      	ldr	r2, [pc, #412]	; (801349c <PrepareFrame+0x224>)
 80132fe:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013302:	4b64      	ldr	r3, [pc, #400]	; (8013494 <PrepareFrame+0x21c>)
 8013304:	22ff      	movs	r2, #255	; 0xff
 8013306:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	781a      	ldrb	r2, [r3, #0]
 801330e:	4b61      	ldr	r3, [pc, #388]	; (8013494 <PrepareFrame+0x21c>)
 8013310:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013314:	4a5f      	ldr	r2, [pc, #380]	; (8013494 <PrepareFrame+0x21c>)
 8013316:	79fb      	ldrb	r3, [r7, #7]
 8013318:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 801331c:	4b60      	ldr	r3, [pc, #384]	; (80134a0 <PrepareFrame+0x228>)
 801331e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013322:	4a5c      	ldr	r2, [pc, #368]	; (8013494 <PrepareFrame+0x21c>)
 8013324:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	781a      	ldrb	r2, [r3, #0]
 801332c:	4b59      	ldr	r3, [pc, #356]	; (8013494 <PrepareFrame+0x21c>)
 801332e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013332:	4b58      	ldr	r3, [pc, #352]	; (8013494 <PrepareFrame+0x21c>)
 8013334:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013338:	4b56      	ldr	r3, [pc, #344]	; (8013494 <PrepareFrame+0x21c>)
 801333a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801333e:	4b55      	ldr	r3, [pc, #340]	; (8013494 <PrepareFrame+0x21c>)
 8013340:	4a55      	ldr	r2, [pc, #340]	; (8013498 <PrepareFrame+0x220>)
 8013342:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013346:	f107 0318 	add.w	r3, r7, #24
 801334a:	4618      	mov	r0, r3
 801334c:	f003 f8ce 	bl	80164ec <LoRaMacCryptoGetFCntUp>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d001      	beq.n	801335a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013356:	2312      	movs	r3, #18
 8013358:	e098      	b.n	801348c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	b29a      	uxth	r2, r3
 801335e:	4b4d      	ldr	r3, [pc, #308]	; (8013494 <PrepareFrame+0x21c>)
 8013360:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 8013364:	4b4b      	ldr	r3, [pc, #300]	; (8013494 <PrepareFrame+0x21c>)
 8013366:	2200      	movs	r2, #0
 8013368:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 801336c:	4b49      	ldr	r3, [pc, #292]	; (8013494 <PrepareFrame+0x21c>)
 801336e:	2200      	movs	r2, #0
 8013370:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	4a47      	ldr	r2, [pc, #284]	; (8013494 <PrepareFrame+0x21c>)
 8013378:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801337c:	f107 0314 	add.w	r3, r7, #20
 8013380:	4618      	mov	r0, r3
 8013382:	f002 fa7f 	bl	8015884 <LoRaMacCommandsGetSizeSerializedCmds>
 8013386:	4603      	mov	r3, r0
 8013388:	2b00      	cmp	r3, #0
 801338a:	d001      	beq.n	8013390 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801338c:	2313      	movs	r3, #19
 801338e:	e07d      	b.n	801348c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d076      	beq.n	8013484 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013396:	4b42      	ldr	r3, [pc, #264]	; (80134a0 <PrepareFrame+0x228>)
 8013398:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801339c:	4618      	mov	r0, r3
 801339e:	f7fe fd85 	bl	8011eac <GetMaxAppPayloadWithoutFOptsLength>
 80133a2:	4603      	mov	r3, r0
 80133a4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80133a6:	4b3b      	ldr	r3, [pc, #236]	; (8013494 <PrepareFrame+0x21c>)
 80133a8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d01d      	beq.n	80133ec <PrepareFrame+0x174>
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	2b0f      	cmp	r3, #15
 80133b4:	d81a      	bhi.n	80133ec <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80133b6:	f107 0314 	add.w	r3, r7, #20
 80133ba:	4a3a      	ldr	r2, [pc, #232]	; (80134a4 <PrepareFrame+0x22c>)
 80133bc:	4619      	mov	r1, r3
 80133be:	200f      	movs	r0, #15
 80133c0:	f002 fa76 	bl	80158b0 <LoRaMacCommandsSerializeCmds>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80133ca:	2313      	movs	r3, #19
 80133cc:	e05e      	b.n	801348c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	f003 030f 	and.w	r3, r3, #15
 80133d4:	b2d9      	uxtb	r1, r3
 80133d6:	68ba      	ldr	r2, [r7, #8]
 80133d8:	7813      	ldrb	r3, [r2, #0]
 80133da:	f361 0303 	bfi	r3, r1, #0, #4
 80133de:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	781a      	ldrb	r2, [r3, #0]
 80133e4:	4b2b      	ldr	r3, [pc, #172]	; (8013494 <PrepareFrame+0x21c>)
 80133e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80133ea:	e04b      	b.n	8013484 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80133ec:	4b29      	ldr	r3, [pc, #164]	; (8013494 <PrepareFrame+0x21c>)
 80133ee:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d010      	beq.n	8013418 <PrepareFrame+0x1a0>
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	2b0f      	cmp	r3, #15
 80133fa:	d90d      	bls.n	8013418 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80133fc:	7ffb      	ldrb	r3, [r7, #31]
 80133fe:	f107 0114 	add.w	r1, r7, #20
 8013402:	4a29      	ldr	r2, [pc, #164]	; (80134a8 <PrepareFrame+0x230>)
 8013404:	4618      	mov	r0, r3
 8013406:	f002 fa53 	bl	80158b0 <LoRaMacCommandsSerializeCmds>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d001      	beq.n	8013414 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013410:	2313      	movs	r3, #19
 8013412:	e03b      	b.n	801348c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013414:	230a      	movs	r3, #10
 8013416:	e039      	b.n	801348c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013418:	7ffb      	ldrb	r3, [r7, #31]
 801341a:	f107 0114 	add.w	r1, r7, #20
 801341e:	4a22      	ldr	r2, [pc, #136]	; (80134a8 <PrepareFrame+0x230>)
 8013420:	4618      	mov	r0, r3
 8013422:	f002 fa45 	bl	80158b0 <LoRaMacCommandsSerializeCmds>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d001      	beq.n	8013430 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801342c:	2313      	movs	r3, #19
 801342e:	e02d      	b.n	801348c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013430:	4b18      	ldr	r3, [pc, #96]	; (8013494 <PrepareFrame+0x21c>)
 8013432:	2200      	movs	r2, #0
 8013434:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013438:	4b16      	ldr	r3, [pc, #88]	; (8013494 <PrepareFrame+0x21c>)
 801343a:	4a1b      	ldr	r2, [pc, #108]	; (80134a8 <PrepareFrame+0x230>)
 801343c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	b2da      	uxtb	r2, r3
 8013444:	4b13      	ldr	r3, [pc, #76]	; (8013494 <PrepareFrame+0x21c>)
 8013446:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 801344a:	e01b      	b.n	8013484 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d01a      	beq.n	8013488 <PrepareFrame+0x210>
 8013452:	4b10      	ldr	r3, [pc, #64]	; (8013494 <PrepareFrame+0x21c>)
 8013454:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013458:	2b00      	cmp	r3, #0
 801345a:	d015      	beq.n	8013488 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801345c:	4813      	ldr	r0, [pc, #76]	; (80134ac <PrepareFrame+0x234>)
 801345e:	4b0d      	ldr	r3, [pc, #52]	; (8013494 <PrepareFrame+0x21c>)
 8013460:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013464:	b29b      	uxth	r3, r3
 8013466:	461a      	mov	r2, r3
 8013468:	6839      	ldr	r1, [r7, #0]
 801346a:	f006 fa0c 	bl	8019886 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801346e:	4b09      	ldr	r3, [pc, #36]	; (8013494 <PrepareFrame+0x21c>)
 8013470:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013474:	b29b      	uxth	r3, r3
 8013476:	3301      	adds	r3, #1
 8013478:	b29a      	uxth	r2, r3
 801347a:	4b06      	ldr	r3, [pc, #24]	; (8013494 <PrepareFrame+0x21c>)
 801347c:	801a      	strh	r2, [r3, #0]
            }
            break;
 801347e:	e003      	b.n	8013488 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013480:	2302      	movs	r3, #2
 8013482:	e003      	b.n	801348c <PrepareFrame+0x214>
            break;
 8013484:	bf00      	nop
 8013486:	e000      	b.n	801348a <PrepareFrame+0x212>
            break;
 8013488:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3720      	adds	r7, #32
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	20000940 	.word	0x20000940
 8013498:	20000a78 	.word	0x20000a78
 801349c:	20000942 	.word	0x20000942
 80134a0:	20000e48 	.word	0x20000e48
 80134a4:	20000a58 	.word	0x20000a58
 80134a8:	20000dc8 	.word	0x20000dc8
 80134ac:	20000943 	.word	0x20000943

080134b0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b08a      	sub	sp, #40	; 0x28
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	4603      	mov	r3, r0
 80134b8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80134ba:	2303      	movs	r3, #3
 80134bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80134c0:	2300      	movs	r3, #0
 80134c2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80134c4:	79fb      	ldrb	r3, [r7, #7]
 80134c6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80134c8:	4b48      	ldr	r3, [pc, #288]	; (80135ec <SendFrameOnChannel+0x13c>)
 80134ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80134ce:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80134d0:	4b46      	ldr	r3, [pc, #280]	; (80135ec <SendFrameOnChannel+0x13c>)
 80134d2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80134d6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80134d8:	4b44      	ldr	r3, [pc, #272]	; (80135ec <SendFrameOnChannel+0x13c>)
 80134da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134de:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80134e0:	4b42      	ldr	r3, [pc, #264]	; (80135ec <SendFrameOnChannel+0x13c>)
 80134e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80134e6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80134e8:	4b41      	ldr	r3, [pc, #260]	; (80135f0 <SendFrameOnChannel+0x140>)
 80134ea:	881b      	ldrh	r3, [r3, #0]
 80134ec:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80134ee:	4b3f      	ldr	r3, [pc, #252]	; (80135ec <SendFrameOnChannel+0x13c>)
 80134f0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80134f4:	f107 020f 	add.w	r2, r7, #15
 80134f8:	f107 0110 	add.w	r1, r7, #16
 80134fc:	4b3d      	ldr	r3, [pc, #244]	; (80135f4 <SendFrameOnChannel+0x144>)
 80134fe:	f003 ff4e 	bl	801739e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013502:	4b3b      	ldr	r3, [pc, #236]	; (80135f0 <SendFrameOnChannel+0x140>)
 8013504:	2201      	movs	r2, #1
 8013506:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801350a:	4b38      	ldr	r3, [pc, #224]	; (80135ec <SendFrameOnChannel+0x13c>)
 801350c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013510:	b2da      	uxtb	r2, r3
 8013512:	4b37      	ldr	r3, [pc, #220]	; (80135f0 <SendFrameOnChannel+0x140>)
 8013514:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013518:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801351c:	4b34      	ldr	r3, [pc, #208]	; (80135f0 <SendFrameOnChannel+0x140>)
 801351e:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013522:	79fb      	ldrb	r3, [r7, #7]
 8013524:	4a32      	ldr	r2, [pc, #200]	; (80135f0 <SendFrameOnChannel+0x140>)
 8013526:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801352a:	4b31      	ldr	r3, [pc, #196]	; (80135f0 <SendFrameOnChannel+0x140>)
 801352c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013530:	4a2f      	ldr	r2, [pc, #188]	; (80135f0 <SendFrameOnChannel+0x140>)
 8013532:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013536:	4b2e      	ldr	r3, [pc, #184]	; (80135f0 <SendFrameOnChannel+0x140>)
 8013538:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 801353c:	4a2c      	ldr	r2, [pc, #176]	; (80135f0 <SendFrameOnChannel+0x140>)
 801353e:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013542:	f001 ff07 	bl	8015354 <LoRaMacClassBIsBeaconModeActive>
 8013546:	4603      	mov	r3, r0
 8013548:	2b00      	cmp	r3, #0
 801354a:	d00b      	beq.n	8013564 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801354c:	4b28      	ldr	r3, [pc, #160]	; (80135f0 <SendFrameOnChannel+0x140>)
 801354e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013552:	4618      	mov	r0, r3
 8013554:	f001 ff69 	bl	801542a <LoRaMacClassBIsUplinkCollision>
 8013558:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801355a:	6a3b      	ldr	r3, [r7, #32]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d001      	beq.n	8013564 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013560:	2310      	movs	r3, #16
 8013562:	e03e      	b.n	80135e2 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013564:	4b21      	ldr	r3, [pc, #132]	; (80135ec <SendFrameOnChannel+0x13c>)
 8013566:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801356a:	2b01      	cmp	r3, #1
 801356c:	d101      	bne.n	8013572 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801356e:	f001 ff66 	bl	801543e <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013572:	f001 ff00 	bl	8015376 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013576:	4b1d      	ldr	r3, [pc, #116]	; (80135ec <SendFrameOnChannel+0x13c>)
 8013578:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801357c:	b2db      	uxtb	r3, r3
 801357e:	4a1c      	ldr	r2, [pc, #112]	; (80135f0 <SendFrameOnChannel+0x140>)
 8013580:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013584:	4611      	mov	r1, r2
 8013586:	4618      	mov	r0, r3
 8013588:	f7ff fc42 	bl	8012e10 <SecureFrame>
 801358c:	4603      	mov	r3, r0
 801358e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013596:	2b00      	cmp	r3, #0
 8013598:	d002      	beq.n	80135a0 <SendFrameOnChannel+0xf0>
    {
        return status;
 801359a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801359e:	e020      	b.n	80135e2 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80135a0:	4b13      	ldr	r3, [pc, #76]	; (80135f0 <SendFrameOnChannel+0x140>)
 80135a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80135a6:	f043 0302 	orr.w	r3, r3, #2
 80135aa:	4a11      	ldr	r2, [pc, #68]	; (80135f0 <SendFrameOnChannel+0x140>)
 80135ac:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80135b0:	4b0f      	ldr	r3, [pc, #60]	; (80135f0 <SendFrameOnChannel+0x140>)
 80135b2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80135b6:	f083 0301 	eor.w	r3, r3, #1
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d007      	beq.n	80135d0 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 80135c0:	4b0b      	ldr	r3, [pc, #44]	; (80135f0 <SendFrameOnChannel+0x140>)
 80135c2:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80135c6:	3301      	adds	r3, #1
 80135c8:	b2da      	uxtb	r2, r3
 80135ca:	4b09      	ldr	r3, [pc, #36]	; (80135f0 <SendFrameOnChannel+0x140>)
 80135cc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80135d0:	4b09      	ldr	r3, [pc, #36]	; (80135f8 <SendFrameOnChannel+0x148>)
 80135d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135d4:	4a06      	ldr	r2, [pc, #24]	; (80135f0 <SendFrameOnChannel+0x140>)
 80135d6:	8812      	ldrh	r2, [r2, #0]
 80135d8:	b2d2      	uxtb	r2, r2
 80135da:	4611      	mov	r1, r2
 80135dc:	4807      	ldr	r0, [pc, #28]	; (80135fc <SendFrameOnChannel+0x14c>)
 80135de:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80135e0:	2300      	movs	r3, #0
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3728      	adds	r7, #40	; 0x28
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	20000e48 	.word	0x20000e48
 80135f0:	20000940 	.word	0x20000940
 80135f4:	20000d54 	.word	0x20000d54
 80135f8:	0801f460 	.word	0x0801f460
 80135fc:	20000942 	.word	0x20000942

08013600 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b086      	sub	sp, #24
 8013604:	af00      	add	r7, sp, #0
 8013606:	4603      	mov	r3, r0
 8013608:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801360a:	4b16      	ldr	r3, [pc, #88]	; (8013664 <SetTxContinuousWave+0x64>)
 801360c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013610:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013612:	4b15      	ldr	r3, [pc, #84]	; (8013668 <SetTxContinuousWave+0x68>)
 8013614:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013618:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801361a:	4b13      	ldr	r3, [pc, #76]	; (8013668 <SetTxContinuousWave+0x68>)
 801361c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013620:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013622:	4b11      	ldr	r3, [pc, #68]	; (8013668 <SetTxContinuousWave+0x68>)
 8013624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013628:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801362a:	4b0f      	ldr	r3, [pc, #60]	; (8013668 <SetTxContinuousWave+0x68>)
 801362c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013630:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013632:	88fb      	ldrh	r3, [r7, #6]
 8013634:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013636:	4b0c      	ldr	r3, [pc, #48]	; (8013668 <SetTxContinuousWave+0x68>)
 8013638:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801363c:	f107 0208 	add.w	r2, r7, #8
 8013640:	4611      	mov	r1, r2
 8013642:	4618      	mov	r0, r3
 8013644:	f003 ff5a 	bl	80174fc <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013648:	4b06      	ldr	r3, [pc, #24]	; (8013664 <SetTxContinuousWave+0x64>)
 801364a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801364e:	f043 0302 	orr.w	r3, r3, #2
 8013652:	4a04      	ldr	r2, [pc, #16]	; (8013664 <SetTxContinuousWave+0x64>)
 8013654:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013658:	2300      	movs	r3, #0
}
 801365a:	4618      	mov	r0, r3
 801365c:	3718      	adds	r7, #24
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	20000940 	.word	0x20000940
 8013668:	20000e48 	.word	0x20000e48

0801366c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	4603      	mov	r3, r0
 8013674:	6039      	str	r1, [r7, #0]
 8013676:	80fb      	strh	r3, [r7, #6]
 8013678:	4613      	mov	r3, r2
 801367a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801367c:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <SetTxContinuousWave1+0x38>)
 801367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013680:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013684:	88fa      	ldrh	r2, [r7, #6]
 8013686:	6838      	ldr	r0, [r7, #0]
 8013688:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801368a:	4b07      	ldr	r3, [pc, #28]	; (80136a8 <SetTxContinuousWave1+0x3c>)
 801368c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013690:	f043 0302 	orr.w	r3, r3, #2
 8013694:	4a04      	ldr	r2, [pc, #16]	; (80136a8 <SetTxContinuousWave1+0x3c>)
 8013696:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801369a:	2300      	movs	r3, #0
}
 801369c:	4618      	mov	r0, r3
 801369e:	3708      	adds	r7, #8
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	0801f460 	.word	0x0801f460
 80136a8:	20000940 	.word	0x20000940

080136ac <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80136ac:	b480      	push	{r7}
 80136ae:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bc80      	pop	{r7}
 80136b8:	4770      	bx	lr

080136ba <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80136ba:	b480      	push	{r7}
 80136bc:	b083      	sub	sp, #12
 80136be:	af00      	add	r7, sp, #0
 80136c0:	6078      	str	r0, [r7, #4]
 80136c2:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d002      	beq.n	80136d0 <DetermineFrameType+0x16>
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80136d0:	2303      	movs	r3, #3
 80136d2:	e03b      	b.n	801374c <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	7b1b      	ldrb	r3, [r3, #12]
 80136d8:	f003 030f 	and.w	r3, r3, #15
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d008      	beq.n	80136f4 <DetermineFrameType+0x3a>
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d003      	beq.n	80136f4 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	2200      	movs	r2, #0
 80136f0:	701a      	strb	r2, [r3, #0]
 80136f2:	e02a      	b.n	801374a <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d103      	bne.n	8013706 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	2201      	movs	r2, #1
 8013702:	701a      	strb	r2, [r3, #0]
 8013704:	e021      	b.n	801374a <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	7b1b      	ldrb	r3, [r3, #12]
 801370a:	f003 030f 	and.w	r3, r3, #15
 801370e:	b2db      	uxtb	r3, r3
 8013710:	2b00      	cmp	r3, #0
 8013712:	d108      	bne.n	8013726 <DetermineFrameType+0x6c>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f893 3020 	ldrb.w	r3, [r3, #32]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d103      	bne.n	8013726 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	2202      	movs	r2, #2
 8013722:	701a      	strb	r2, [r3, #0]
 8013724:	e011      	b.n	801374a <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	7b1b      	ldrb	r3, [r3, #12]
 801372a:	f003 030f 	and.w	r3, r3, #15
 801372e:	b2db      	uxtb	r3, r3
 8013730:	2b00      	cmp	r3, #0
 8013732:	d108      	bne.n	8013746 <DetermineFrameType+0x8c>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f893 3020 	ldrb.w	r3, [r3, #32]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d003      	beq.n	8013746 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	2203      	movs	r2, #3
 8013742:	701a      	strb	r2, [r3, #0]
 8013744:	e001      	b.n	801374a <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013746:	2318      	movs	r3, #24
 8013748:	e000      	b.n	801374c <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801374a:	2300      	movs	r3, #0
}
 801374c:	4618      	mov	r0, r3
 801374e:	370c      	adds	r7, #12
 8013750:	46bd      	mov	sp, r7
 8013752:	bc80      	pop	{r7}
 8013754:	4770      	bx	lr
	...

08013758 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013758:	b480      	push	{r7}
 801375a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801375c:	4b12      	ldr	r3, [pc, #72]	; (80137a8 <CheckRetransUnconfirmedUplink+0x50>)
 801375e:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013762:	4b12      	ldr	r3, [pc, #72]	; (80137ac <CheckRetransUnconfirmedUplink+0x54>)
 8013764:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013768:	429a      	cmp	r2, r3
 801376a:	d301      	bcc.n	8013770 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801376c:	2301      	movs	r3, #1
 801376e:	e016      	b.n	801379e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013770:	4b0d      	ldr	r3, [pc, #52]	; (80137a8 <CheckRetransUnconfirmedUplink+0x50>)
 8013772:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013776:	f003 0302 	and.w	r3, r3, #2
 801377a:	b2db      	uxtb	r3, r3
 801377c:	2b00      	cmp	r3, #0
 801377e:	d00d      	beq.n	801379c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013780:	4b0a      	ldr	r3, [pc, #40]	; (80137ac <CheckRetransUnconfirmedUplink+0x54>)
 8013782:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013786:	2b00      	cmp	r3, #0
 8013788:	d101      	bne.n	801378e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801378a:	2301      	movs	r3, #1
 801378c:	e007      	b.n	801379e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801378e:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <CheckRetransUnconfirmedUplink+0x50>)
 8013790:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013794:	2b00      	cmp	r3, #0
 8013796:	d101      	bne.n	801379c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013798:	2301      	movs	r3, #1
 801379a:	e000      	b.n	801379e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801379c:	2300      	movs	r3, #0
}
 801379e:	4618      	mov	r0, r3
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bc80      	pop	{r7}
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	20000940 	.word	0x20000940
 80137ac:	20000e48 	.word	0x20000e48

080137b0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80137b0:	b480      	push	{r7}
 80137b2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80137b4:	4b0e      	ldr	r3, [pc, #56]	; (80137f0 <CheckRetransConfirmedUplink+0x40>)
 80137b6:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 80137ba:	4b0d      	ldr	r3, [pc, #52]	; (80137f0 <CheckRetransConfirmedUplink+0x40>)
 80137bc:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d301      	bcc.n	80137c8 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80137c4:	2301      	movs	r3, #1
 80137c6:	e00f      	b.n	80137e8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80137c8:	4b09      	ldr	r3, [pc, #36]	; (80137f0 <CheckRetransConfirmedUplink+0x40>)
 80137ca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80137ce:	f003 0302 	and.w	r3, r3, #2
 80137d2:	b2db      	uxtb	r3, r3
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d006      	beq.n	80137e6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80137d8:	4b05      	ldr	r3, [pc, #20]	; (80137f0 <CheckRetransConfirmedUplink+0x40>)
 80137da:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d001      	beq.n	80137e6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80137e2:	2301      	movs	r3, #1
 80137e4:	e000      	b.n	80137e8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80137e6:	2300      	movs	r3, #0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bc80      	pop	{r7}
 80137ee:	4770      	bx	lr
 80137f0:	20000940 	.word	0x20000940

080137f4 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80137f4:	b480      	push	{r7}
 80137f6:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80137f8:	4b1a      	ldr	r3, [pc, #104]	; (8013864 <StopRetransmission+0x70>)
 80137fa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80137fe:	f003 0302 	and.w	r3, r3, #2
 8013802:	b2db      	uxtb	r3, r3
 8013804:	2b00      	cmp	r3, #0
 8013806:	d009      	beq.n	801381c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013808:	4b16      	ldr	r3, [pc, #88]	; (8013864 <StopRetransmission+0x70>)
 801380a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801380e:	2b00      	cmp	r3, #0
 8013810:	d00e      	beq.n	8013830 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013812:	4b14      	ldr	r3, [pc, #80]	; (8013864 <StopRetransmission+0x70>)
 8013814:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013818:	2b01      	cmp	r3, #1
 801381a:	d009      	beq.n	8013830 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801381c:	4b12      	ldr	r3, [pc, #72]	; (8013868 <StopRetransmission+0x74>)
 801381e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013822:	2b00      	cmp	r3, #0
 8013824:	d004      	beq.n	8013830 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013826:	4b10      	ldr	r3, [pc, #64]	; (8013868 <StopRetransmission+0x74>)
 8013828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801382a:	3301      	adds	r3, #1
 801382c:	4a0e      	ldr	r2, [pc, #56]	; (8013868 <StopRetransmission+0x74>)
 801382e:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013830:	4b0c      	ldr	r3, [pc, #48]	; (8013864 <StopRetransmission+0x70>)
 8013832:	2200      	movs	r2, #0
 8013834:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013838:	4b0a      	ldr	r3, [pc, #40]	; (8013864 <StopRetransmission+0x70>)
 801383a:	2200      	movs	r2, #0
 801383c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013840:	4b08      	ldr	r3, [pc, #32]	; (8013864 <StopRetransmission+0x70>)
 8013842:	2200      	movs	r2, #0
 8013844:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013848:	4b06      	ldr	r3, [pc, #24]	; (8013864 <StopRetransmission+0x70>)
 801384a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801384e:	f023 0302 	bic.w	r3, r3, #2
 8013852:	4a04      	ldr	r2, [pc, #16]	; (8013864 <StopRetransmission+0x70>)
 8013854:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013858:	2301      	movs	r3, #1
}
 801385a:	4618      	mov	r0, r3
 801385c:	46bd      	mov	sp, r7
 801385e:	bc80      	pop	{r7}
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	20000940 	.word	0x20000940
 8013868:	20000e48 	.word	0x20000e48

0801386c <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 801386c:	b580      	push	{r7, lr}
 801386e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013870:	4b08      	ldr	r3, [pc, #32]	; (8013894 <OnMacProcessNotify+0x28>)
 8013872:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013876:	2b00      	cmp	r3, #0
 8013878:	d00a      	beq.n	8013890 <OnMacProcessNotify+0x24>
 801387a:	4b06      	ldr	r3, [pc, #24]	; (8013894 <OnMacProcessNotify+0x28>)
 801387c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013880:	695b      	ldr	r3, [r3, #20]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d004      	beq.n	8013890 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013886:	4b03      	ldr	r3, [pc, #12]	; (8013894 <OnMacProcessNotify+0x28>)
 8013888:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801388c:	695b      	ldr	r3, [r3, #20]
 801388e:	4798      	blx	r3
    }
}
 8013890:	bf00      	nop
 8013892:	bd80      	pop	{r7, pc}
 8013894:	20000940 	.word	0x20000940

08013898 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	4603      	mov	r3, r0
 80138a0:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80138a2:	4b0b      	ldr	r3, [pc, #44]	; (80138d0 <CallNvmDataChangeCallback+0x38>)
 80138a4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d00c      	beq.n	80138c6 <CallNvmDataChangeCallback+0x2e>
 80138ac:	4b08      	ldr	r3, [pc, #32]	; (80138d0 <CallNvmDataChangeCallback+0x38>)
 80138ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80138b2:	691b      	ldr	r3, [r3, #16]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d006      	beq.n	80138c6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80138b8:	4b05      	ldr	r3, [pc, #20]	; (80138d0 <CallNvmDataChangeCallback+0x38>)
 80138ba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80138be:	691b      	ldr	r3, [r3, #16]
 80138c0:	88fa      	ldrh	r2, [r7, #6]
 80138c2:	4610      	mov	r0, r2
 80138c4:	4798      	blx	r3
    }
}
 80138c6:	bf00      	nop
 80138c8:	3708      	adds	r7, #8
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
 80138ce:	bf00      	nop
 80138d0:	20000940 	.word	0x20000940

080138d4 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80138da:	4b1b      	ldr	r3, [pc, #108]	; (8013948 <AckTimeoutRetriesProcess+0x74>)
 80138dc:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 80138e0:	4b19      	ldr	r3, [pc, #100]	; (8013948 <AckTimeoutRetriesProcess+0x74>)
 80138e2:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d229      	bcs.n	801393e <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80138ea:	4b17      	ldr	r3, [pc, #92]	; (8013948 <AckTimeoutRetriesProcess+0x74>)
 80138ec:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 80138f0:	3301      	adds	r3, #1
 80138f2:	b2da      	uxtb	r2, r3
 80138f4:	4b14      	ldr	r3, [pc, #80]	; (8013948 <AckTimeoutRetriesProcess+0x74>)
 80138f6:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80138fa:	4b13      	ldr	r3, [pc, #76]	; (8013948 <AckTimeoutRetriesProcess+0x74>)
 80138fc:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013900:	f003 0301 	and.w	r3, r3, #1
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d019      	beq.n	801393e <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801390a:	2322      	movs	r3, #34	; 0x22
 801390c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801390e:	4b0f      	ldr	r3, [pc, #60]	; (801394c <AckTimeoutRetriesProcess+0x78>)
 8013910:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013914:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013916:	4b0d      	ldr	r3, [pc, #52]	; (801394c <AckTimeoutRetriesProcess+0x78>)
 8013918:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801391c:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801391e:	4b0b      	ldr	r3, [pc, #44]	; (801394c <AckTimeoutRetriesProcess+0x78>)
 8013920:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013924:	f107 0208 	add.w	r2, r7, #8
 8013928:	4611      	mov	r1, r2
 801392a:	4618      	mov	r0, r3
 801392c:	f003 fc91 	bl	8017252 <RegionGetPhyParam>
 8013930:	4603      	mov	r3, r0
 8013932:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	b25a      	sxtb	r2, r3
 8013938:	4b04      	ldr	r3, [pc, #16]	; (801394c <AckTimeoutRetriesProcess+0x78>)
 801393a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 801393e:	bf00      	nop
 8013940:	3710      	adds	r7, #16
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	20000940 	.word	0x20000940
 801394c:	20000e48 	.word	0x20000e48

08013950 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b084      	sub	sp, #16
 8013954:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013956:	4b14      	ldr	r3, [pc, #80]	; (80139a8 <AckTimeoutRetriesFinalize+0x58>)
 8013958:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801395c:	f083 0301 	eor.w	r3, r3, #1
 8013960:	b2db      	uxtb	r3, r3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d015      	beq.n	8013992 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013966:	2302      	movs	r3, #2
 8013968:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801396a:	4b10      	ldr	r3, [pc, #64]	; (80139ac <AckTimeoutRetriesFinalize+0x5c>)
 801396c:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 801396e:	4b10      	ldr	r3, [pc, #64]	; (80139b0 <AckTimeoutRetriesFinalize+0x60>)
 8013970:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013972:	4b10      	ldr	r3, [pc, #64]	; (80139b4 <AckTimeoutRetriesFinalize+0x64>)
 8013974:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013978:	1d3a      	adds	r2, r7, #4
 801397a:	4611      	mov	r1, r2
 801397c:	4618      	mov	r0, r3
 801397e:	f003 fc91 	bl	80172a4 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013982:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <AckTimeoutRetriesFinalize+0x58>)
 8013984:	2200      	movs	r2, #0
 8013986:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 801398a:	4b07      	ldr	r3, [pc, #28]	; (80139a8 <AckTimeoutRetriesFinalize+0x58>)
 801398c:	2200      	movs	r2, #0
 801398e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013992:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <AckTimeoutRetriesFinalize+0x58>)
 8013994:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013998:	4b03      	ldr	r3, [pc, #12]	; (80139a8 <AckTimeoutRetriesFinalize+0x58>)
 801399a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 801399e:	bf00      	nop
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20000940 	.word	0x20000940
 80139ac:	20001068 	.word	0x20001068
 80139b0:	200010fc 	.word	0x200010fc
 80139b4:	20000e48 	.word	0x20000e48

080139b8 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80139b8:	b480      	push	{r7}
 80139ba:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80139bc:	4b0b      	ldr	r3, [pc, #44]	; (80139ec <IsRequestPending+0x34>)
 80139be:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80139c2:	f003 0304 	and.w	r3, r3, #4
 80139c6:	b2db      	uxtb	r3, r3
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d107      	bne.n	80139dc <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80139cc:	4b07      	ldr	r3, [pc, #28]	; (80139ec <IsRequestPending+0x34>)
 80139ce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80139d2:	f003 0301 	and.w	r3, r3, #1
 80139d6:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d001      	beq.n	80139e0 <IsRequestPending+0x28>
    {
        return 1;
 80139dc:	2301      	movs	r3, #1
 80139de:	e000      	b.n	80139e2 <IsRequestPending+0x2a>
    }
    return 0;
 80139e0:	2300      	movs	r3, #0
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bc80      	pop	{r7}
 80139e8:	4770      	bx	lr
 80139ea:	bf00      	nop
 80139ec:	20000940 	.word	0x20000940

080139f0 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80139f0:	b590      	push	{r4, r7, lr}
 80139f2:	b08f      	sub	sp, #60	; 0x3c
 80139f4:	af02      	add	r7, sp, #8
 80139f6:	6178      	str	r0, [r7, #20]
 80139f8:	6139      	str	r1, [r7, #16]
 80139fa:	4613      	mov	r3, r2
 80139fc:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d002      	beq.n	8013a0a <LoRaMacInitialization+0x1a>
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d101      	bne.n	8013a0e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a0a:	2303      	movs	r3, #3
 8013a0c:	e273      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013a0e:	697b      	ldr	r3, [r7, #20]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00b      	beq.n	8013a2e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d007      	beq.n	8013a2e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d003      	beq.n	8013a2e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d101      	bne.n	8013a32 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a2e:	2303      	movs	r3, #3
 8013a30:	e261      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013a32:	7bfb      	ldrb	r3, [r7, #15]
 8013a34:	4618      	mov	r0, r3
 8013a36:	f003 fbfc 	bl	8017232 <RegionIsActive>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	f083 0301 	eor.w	r3, r3, #1
 8013a40:	b2db      	uxtb	r3, r3
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d001      	beq.n	8013a4a <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013a46:	2309      	movs	r3, #9
 8013a48:	e255      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013a4a:	6978      	ldr	r0, [r7, #20]
 8013a4c:	f002 f852 	bl	8015af4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013a50:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013a54:	2100      	movs	r1, #0
 8013a56:	48c7      	ldr	r0, [pc, #796]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013a58:	f005 ff50 	bl	80198fc <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013a5c:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013a60:	2100      	movs	r1, #0
 8013a62:	48c5      	ldr	r0, [pc, #788]	; (8013d78 <LoRaMacInitialization+0x388>)
 8013a64:	f005 ff4a 	bl	80198fc <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013a68:	4bc3      	ldr	r3, [pc, #780]	; (8013d78 <LoRaMacInitialization+0x388>)
 8013a6a:	2201      	movs	r2, #1
 8013a6c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8013a70:	4bc1      	ldr	r3, [pc, #772]	; (8013d78 <LoRaMacInitialization+0x388>)
 8013a72:	2201      	movs	r2, #1
 8013a74:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013a78:	4abe      	ldr	r2, [pc, #760]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013a7a:	7bfb      	ldrb	r3, [r7, #15]
 8013a7c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013a80:	4bbc      	ldr	r3, [pc, #752]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013a88:	4bba      	ldr	r3, [pc, #744]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013a90:	4bb8      	ldr	r3, [pc, #736]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013a92:	4aba      	ldr	r2, [pc, #744]	; (8013d7c <LoRaMacInitialization+0x38c>)
 8013a94:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013a98:	230f      	movs	r3, #15
 8013a9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a9e:	4bb5      	ldr	r3, [pc, #724]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013aa0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013aa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f003 fbd1 	bl	8017252 <RegionGetPhyParam>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	bf14      	ite	ne
 8013aba:	2301      	movne	r3, #1
 8013abc:	2300      	moveq	r3, #0
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	4bac      	ldr	r3, [pc, #688]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013ac2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013ac6:	230a      	movs	r3, #10
 8013ac8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013acc:	4ba9      	ldr	r3, [pc, #676]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013ace:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ad2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013ad6:	4611      	mov	r1, r2
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f003 fbba 	bl	8017252 <RegionGetPhyParam>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	b25a      	sxtb	r2, r3
 8013ae6:	4ba3      	ldr	r3, [pc, #652]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013ae8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013aec:	2306      	movs	r3, #6
 8013aee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013af2:	4ba0      	ldr	r3, [pc, #640]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013af4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013af8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013afc:	4611      	mov	r1, r2
 8013afe:	4618      	mov	r0, r3
 8013b00:	f003 fba7 	bl	8017252 <RegionGetPhyParam>
 8013b04:	4603      	mov	r3, r0
 8013b06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0a:	b25a      	sxtb	r2, r3
 8013b0c:	4b99      	ldr	r3, [pc, #612]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b0e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013b12:	2310      	movs	r3, #16
 8013b14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013b18:	4b96      	ldr	r3, [pc, #600]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013b22:	4611      	mov	r1, r2
 8013b24:	4618      	mov	r0, r3
 8013b26:	f003 fb94 	bl	8017252 <RegionGetPhyParam>
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b30:	4a90      	ldr	r2, [pc, #576]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b32:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013b36:	2311      	movs	r3, #17
 8013b38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013b3c:	4b8d      	ldr	r3, [pc, #564]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b3e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013b46:	4611      	mov	r1, r2
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f003 fb82 	bl	8017252 <RegionGetPhyParam>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b54:	4a87      	ldr	r2, [pc, #540]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b56:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013b5a:	2312      	movs	r3, #18
 8013b5c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013b60:	4b84      	ldr	r3, [pc, #528]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013b6a:	4611      	mov	r1, r2
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f003 fb70 	bl	8017252 <RegionGetPhyParam>
 8013b72:	4603      	mov	r3, r0
 8013b74:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b78:	4a7e      	ldr	r2, [pc, #504]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b7a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013b7e:	2313      	movs	r3, #19
 8013b80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013b84:	4b7b      	ldr	r3, [pc, #492]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013b8e:	4611      	mov	r1, r2
 8013b90:	4618      	mov	r0, r3
 8013b92:	f003 fb5e 	bl	8017252 <RegionGetPhyParam>
 8013b96:	4603      	mov	r3, r0
 8013b98:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9c:	4a75      	ldr	r2, [pc, #468]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013b9e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013ba2:	2314      	movs	r3, #20
 8013ba4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ba8:	4b72      	ldr	r3, [pc, #456]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013baa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bb2:	4611      	mov	r1, r2
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f003 fb4c 	bl	8017252 <RegionGetPhyParam>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc0:	4a6c      	ldr	r2, [pc, #432]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013bc2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013bc6:	2317      	movs	r3, #23
 8013bc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bcc:	4b69      	ldr	r3, [pc, #420]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013bce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f003 fb3a 	bl	8017252 <RegionGetPhyParam>
 8013bde:	4603      	mov	r3, r0
 8013be0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be4:	b2da      	uxtb	r2, r3
 8013be6:	4b63      	ldr	r3, [pc, #396]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013be8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013bec:	2318      	movs	r3, #24
 8013bee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bf2:	4b60      	ldr	r3, [pc, #384]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013bf4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bfc:	4611      	mov	r1, r2
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f003 fb27 	bl	8017252 <RegionGetPhyParam>
 8013c04:	4603      	mov	r3, r0
 8013c06:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c0a:	4a5a      	ldr	r2, [pc, #360]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c0c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	4a58      	ldr	r2, [pc, #352]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c14:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013c18:	2319      	movs	r3, #25
 8013c1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c1e:	4b55      	ldr	r3, [pc, #340]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c20:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c28:	4611      	mov	r1, r2
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f003 fb11 	bl	8017252 <RegionGetPhyParam>
 8013c30:	4603      	mov	r3, r0
 8013c32:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c36:	b2da      	uxtb	r2, r3
 8013c38:	4b4e      	ldr	r3, [pc, #312]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c3a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	b2da      	uxtb	r2, r3
 8013c42:	4b4c      	ldr	r3, [pc, #304]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c44:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013c48:	231e      	movs	r3, #30
 8013c4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c4e:	4b49      	ldr	r3, [pc, #292]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c50:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f003 faf9 	bl	8017252 <RegionGetPhyParam>
 8013c60:	4603      	mov	r3, r0
 8013c62:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c66:	b2da      	uxtb	r2, r3
 8013c68:	4b42      	ldr	r3, [pc, #264]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c6a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013c6e:	231f      	movs	r3, #31
 8013c70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c74:	4b3f      	ldr	r3, [pc, #252]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c7e:	4611      	mov	r1, r2
 8013c80:	4618      	mov	r0, r3
 8013c82:	f003 fae6 	bl	8017252 <RegionGetPhyParam>
 8013c86:	4603      	mov	r3, r0
 8013c88:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8c:	b2da      	uxtb	r2, r3
 8013c8e:	4b39      	ldr	r3, [pc, #228]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c90:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013c94:	2320      	movs	r3, #32
 8013c96:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c9a:	4b36      	ldr	r3, [pc, #216]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013c9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ca0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f003 fad3 	bl	8017252 <RegionGetPhyParam>
 8013cac:	4603      	mov	r3, r0
 8013cae:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb2:	4a30      	ldr	r2, [pc, #192]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013cb4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013cb8:	2321      	movs	r3, #33	; 0x21
 8013cba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cbe:	4b2d      	ldr	r3, [pc, #180]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013cc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013cc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cc8:	4611      	mov	r1, r2
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f003 fac1 	bl	8017252 <RegionGetPhyParam>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd6:	4a27      	ldr	r2, [pc, #156]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013cd8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013cdc:	230b      	movs	r3, #11
 8013cde:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ce2:	4b24      	ldr	r3, [pc, #144]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013ce4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ce8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cec:	4611      	mov	r1, r2
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f003 faaf 	bl	8017252 <RegionGetPhyParam>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	4b1d      	ldr	r3, [pc, #116]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013cfe:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013d02:	230c      	movs	r3, #12
 8013d04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d08:	4b1a      	ldr	r3, [pc, #104]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d12:	4611      	mov	r1, r2
 8013d14:	4618      	mov	r0, r3
 8013d16:	f003 fa9c 	bl	8017252 <RegionGetPhyParam>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8013d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	4b14      	ldr	r3, [pc, #80]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d24:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013d28:	4b12      	ldr	r3, [pc, #72]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d2a:	2201      	movs	r2, #1
 8013d2c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013d30:	4b10      	ldr	r3, [pc, #64]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d32:	220a      	movs	r2, #10
 8013d34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013d38:	4b0e      	ldr	r3, [pc, #56]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d3a:	2206      	movs	r2, #6
 8013d3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8013d40:	4b0c      	ldr	r3, [pc, #48]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013d46:	4a0b      	ldr	r2, [pc, #44]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d48:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8013d4a:	4b0a      	ldr	r3, [pc, #40]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d4c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013d50:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8013d56:	4b07      	ldr	r3, [pc, #28]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013d5c:	4a05      	ldr	r2, [pc, #20]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d5e:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8013d60:	4b04      	ldr	r3, [pc, #16]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013d66:	4a03      	ldr	r2, [pc, #12]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d68:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8013d6a:	4b02      	ldr	r3, [pc, #8]	; (8013d74 <LoRaMacInitialization+0x384>)
 8013d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013d70:	e006      	b.n	8013d80 <LoRaMacInitialization+0x390>
 8013d72:	bf00      	nop
 8013d74:	20000e48 	.word	0x20000e48
 8013d78:	20000940 	.word	0x20000940
 8013d7c:	01000300 	.word	0x01000300
 8013d80:	4a5f      	ldr	r2, [pc, #380]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013d82:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8013d84:	4b5e      	ldr	r3, [pc, #376]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013d8a:	4a5d      	ldr	r2, [pc, #372]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013d8c:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8013d8e:	4b5c      	ldr	r3, [pc, #368]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013d94:	4a5a      	ldr	r2, [pc, #360]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013d96:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013d98:	4b59      	ldr	r3, [pc, #356]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013d9a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8013d9e:	4b58      	ldr	r3, [pc, #352]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013da0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013da4:	2300      	movs	r3, #0
 8013da6:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013daa:	4b56      	ldr	r3, [pc, #344]	; (8013f04 <LoRaMacInitialization+0x514>)
 8013dac:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013dae:	4b56      	ldr	r3, [pc, #344]	; (8013f08 <LoRaMacInitialization+0x518>)
 8013db0:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013db2:	4b53      	ldr	r3, [pc, #332]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013db4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013db8:	f107 0218 	add.w	r2, r7, #24
 8013dbc:	4611      	mov	r1, r2
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f003 fa70 	bl	80172a4 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013dc4:	4a51      	ldr	r2, [pc, #324]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8013dcc:	2000      	movs	r0, #0
 8013dce:	f7ff f8b5 	bl	8012f3c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013dd2:	4b4b      	ldr	r3, [pc, #300]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8013dda:	4a4c      	ldr	r2, [pc, #304]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013de2:	4b4a      	ldr	r3, [pc, #296]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013de4:	2200      	movs	r2, #0
 8013de6:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8013dea:	4b48      	ldr	r3, [pc, #288]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013dec:	2201      	movs	r2, #1
 8013dee:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013df2:	4b43      	ldr	r3, [pc, #268]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013df4:	2200      	movs	r2, #0
 8013df6:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013df8:	4b41      	ldr	r3, [pc, #260]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013dfe:	2300      	movs	r3, #0
 8013e00:	9300      	str	r3, [sp, #0]
 8013e02:	4b43      	ldr	r3, [pc, #268]	; (8013f10 <LoRaMacInitialization+0x520>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	f04f 31ff 	mov.w	r1, #4294967295
 8013e0a:	4842      	ldr	r0, [pc, #264]	; (8013f14 <LoRaMacInitialization+0x524>)
 8013e0c:	f009 fe32 	bl	801da74 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013e10:	2300      	movs	r3, #0
 8013e12:	9300      	str	r3, [sp, #0]
 8013e14:	4b40      	ldr	r3, [pc, #256]	; (8013f18 <LoRaMacInitialization+0x528>)
 8013e16:	2200      	movs	r2, #0
 8013e18:	f04f 31ff 	mov.w	r1, #4294967295
 8013e1c:	483f      	ldr	r0, [pc, #252]	; (8013f1c <LoRaMacInitialization+0x52c>)
 8013e1e:	f009 fe29 	bl	801da74 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013e22:	2300      	movs	r3, #0
 8013e24:	9300      	str	r3, [sp, #0]
 8013e26:	4b3e      	ldr	r3, [pc, #248]	; (8013f20 <LoRaMacInitialization+0x530>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8013e2e:	483d      	ldr	r0, [pc, #244]	; (8013f24 <LoRaMacInitialization+0x534>)
 8013e30:	f009 fe20 	bl	801da74 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013e34:	2300      	movs	r3, #0
 8013e36:	9300      	str	r3, [sp, #0]
 8013e38:	4b3b      	ldr	r3, [pc, #236]	; (8013f28 <LoRaMacInitialization+0x538>)
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8013e40:	483a      	ldr	r0, [pc, #232]	; (8013f2c <LoRaMacInitialization+0x53c>)
 8013e42:	f009 fe17 	bl	801da74 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013e46:	4c2e      	ldr	r4, [pc, #184]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013e48:	463b      	mov	r3, r7
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f009 f986 	bl	801d15c <SysTimeGetMcuTime>
 8013e50:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8013e54:	463a      	mov	r2, r7
 8013e56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e5a:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013e5e:	4b2b      	ldr	r3, [pc, #172]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013e60:	4a33      	ldr	r2, [pc, #204]	; (8013f30 <LoRaMacInitialization+0x540>)
 8013e62:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013e66:	4b29      	ldr	r3, [pc, #164]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013e68:	4a32      	ldr	r2, [pc, #200]	; (8013f34 <LoRaMacInitialization+0x544>)
 8013e6a:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013e6e:	4b27      	ldr	r3, [pc, #156]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013e70:	4a31      	ldr	r2, [pc, #196]	; (8013f38 <LoRaMacInitialization+0x548>)
 8013e72:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013e76:	4b25      	ldr	r3, [pc, #148]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013e78:	4a30      	ldr	r2, [pc, #192]	; (8013f3c <LoRaMacInitialization+0x54c>)
 8013e7a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013e7e:	4b23      	ldr	r3, [pc, #140]	; (8013f0c <LoRaMacInitialization+0x51c>)
 8013e80:	4a2f      	ldr	r2, [pc, #188]	; (8013f40 <LoRaMacInitialization+0x550>)
 8013e82:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013e86:	4b2f      	ldr	r3, [pc, #188]	; (8013f44 <LoRaMacInitialization+0x554>)
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	482f      	ldr	r0, [pc, #188]	; (8013f48 <LoRaMacInitialization+0x558>)
 8013e8c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8013e8e:	482f      	ldr	r0, [pc, #188]	; (8013f4c <LoRaMacInitialization+0x55c>)
 8013e90:	f7fa fe10 	bl	800eab4 <SecureElementInit>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d001      	beq.n	8013e9e <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013e9a:	2311      	movs	r3, #17
 8013e9c:	e02b      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013e9e:	4818      	ldr	r0, [pc, #96]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013ea0:	f002 fae8 	bl	8016474 <LoRaMacCryptoInit>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d001      	beq.n	8013eae <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013eaa:	2311      	movs	r3, #17
 8013eac:	e023      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013eae:	f001 fbe3 	bl	8015678 <LoRaMacCommandsInit>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d001      	beq.n	8013ebc <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013eb8:	2313      	movs	r3, #19
 8013eba:	e01c      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013ebc:	4824      	ldr	r0, [pc, #144]	; (8013f50 <LoRaMacInitialization+0x560>)
 8013ebe:	f002 fba3 	bl	8016608 <LoRaMacCryptoSetMulticastReference>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ec8:	2311      	movs	r3, #17
 8013eca:	e014      	b.n	8013ef6 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013ecc:	4b1d      	ldr	r3, [pc, #116]	; (8013f44 <LoRaMacInitialization+0x554>)
 8013ece:	695b      	ldr	r3, [r3, #20]
 8013ed0:	4798      	blx	r3
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f005 fcb1 	bl	801983c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013eda:	4b1a      	ldr	r3, [pc, #104]	; (8013f44 <LoRaMacInitialization+0x554>)
 8013edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ede:	4a08      	ldr	r2, [pc, #32]	; (8013f00 <LoRaMacInitialization+0x510>)
 8013ee0:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013ee4:	4610      	mov	r0, r2
 8013ee6:	4798      	blx	r3
    Radio.Sleep( );
 8013ee8:	4b16      	ldr	r3, [pc, #88]	; (8013f44 <LoRaMacInitialization+0x554>)
 8013eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eec:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013eee:	2001      	movs	r0, #1
 8013ef0:	f7fd fb40 	bl	8011574 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013ef4:	2300      	movs	r3, #0
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3734      	adds	r7, #52	; 0x34
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd90      	pop	{r4, r7, pc}
 8013efe:	bf00      	nop
 8013f00:	20000e48 	.word	0x20000e48
 8013f04:	20001068 	.word	0x20001068
 8013f08:	200010fc 	.word	0x200010fc
 8013f0c:	20000940 	.word	0x20000940
 8013f10:	08011ab5 	.word	0x08011ab5
 8013f14:	20000ca8 	.word	0x20000ca8
 8013f18:	08011b29 	.word	0x08011b29
 8013f1c:	20000cc0 	.word	0x20000cc0
 8013f20:	08011b95 	.word	0x08011b95
 8013f24:	20000cd8 	.word	0x20000cd8
 8013f28:	08011c09 	.word	0x08011c09
 8013f2c:	20000d34 	.word	0x20000d34
 8013f30:	08010675 	.word	0x08010675
 8013f34:	080106d1 	.word	0x080106d1
 8013f38:	08010769 	.word	0x08010769
 8013f3c:	0801073d 	.word	0x0801073d
 8013f40:	08010785 	.word	0x08010785
 8013f44:	0801f460 	.word	0x0801f460
 8013f48:	20000c8c 	.word	0x20000c8c
 8013f4c:	20000f90 	.word	0x20000f90
 8013f50:	20000f30 	.word	0x20000f30

08013f54 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013f58:	4b04      	ldr	r3, [pc, #16]	; (8013f6c <LoRaMacStart+0x18>)
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8013f60:	f7fc fc26 	bl	80107b0 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8013f64:	2300      	movs	r3, #0
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	20000940 	.word	0x20000940

08013f70 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8013f74:	f7fd fad2 	bl	801151c <LoRaMacIsBusy>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	f083 0301 	eor.w	r3, r3, #1
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d00d      	beq.n	8013fa0 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8013f84:	4b0b      	ldr	r3, [pc, #44]	; (8013fb4 <LoRaMacStop+0x44>)
 8013f86:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013f8a:	2b02      	cmp	r3, #2
 8013f8c:	d102      	bne.n	8013f94 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8013f8e:	4b0a      	ldr	r3, [pc, #40]	; (8013fb8 <LoRaMacStop+0x48>)
 8013f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f92:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8013f94:	4b09      	ldr	r3, [pc, #36]	; (8013fbc <LoRaMacStop+0x4c>)
 8013f96:	2201      	movs	r2, #1
 8013f98:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	e007      	b.n	8013fb0 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8013fa0:	4b06      	ldr	r3, [pc, #24]	; (8013fbc <LoRaMacStop+0x4c>)
 8013fa2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d101      	bne.n	8013fae <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8013faa:	2300      	movs	r3, #0
 8013fac:	e000      	b.n	8013fb0 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8013fae:	2301      	movs	r3, #1
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	20000e48 	.word	0x20000e48
 8013fb8:	0801f460 	.word	0x0801f460
 8013fbc:	20000940 	.word	0x20000940

08013fc0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013fc4:	480d      	ldr	r0, [pc, #52]	; (8013ffc <LoRaMacHalt+0x3c>)
 8013fc6:	f009 fdf9 	bl	801dbbc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8013fca:	480d      	ldr	r0, [pc, #52]	; (8014000 <LoRaMacHalt+0x40>)
 8013fcc:	f009 fdf6 	bl	801dbbc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013fd0:	480c      	ldr	r0, [pc, #48]	; (8014004 <LoRaMacHalt+0x44>)
 8013fd2:	f009 fdf3 	bl	801dbbc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8013fd6:	480c      	ldr	r0, [pc, #48]	; (8014008 <LoRaMacHalt+0x48>)
 8013fd8:	f009 fdf0 	bl	801dbbc <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8013fdc:	f001 f9cb 	bl	8015376 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013fe0:	4b0a      	ldr	r3, [pc, #40]	; (801400c <LoRaMacHalt+0x4c>)
 8013fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8013fe6:	4b0a      	ldr	r3, [pc, #40]	; (8014010 <LoRaMacHalt+0x50>)
 8013fe8:	2200      	movs	r2, #0
 8013fea:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013fee:	4b08      	ldr	r3, [pc, #32]	; (8014010 <LoRaMacHalt+0x50>)
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	bd80      	pop	{r7, pc}
 8013ffc:	20000ca8 	.word	0x20000ca8
 8014000:	20000cc0 	.word	0x20000cc0
 8014004:	20000cd8 	.word	0x20000cd8
 8014008:	20000d34 	.word	0x20000d34
 801400c:	0801f460 	.word	0x0801f460
 8014010:	20000940 	.word	0x20000940

08014014 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b08a      	sub	sp, #40	; 0x28
 8014018:	af00      	add	r7, sp, #0
 801401a:	4603      	mov	r3, r0
 801401c:	6039      	str	r1, [r7, #0]
 801401e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014020:	4b3e      	ldr	r3, [pc, #248]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014024:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014026:	4b3d      	ldr	r3, [pc, #244]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014028:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 801402c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801402e:	4b3b      	ldr	r3, [pc, #236]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014030:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8014034:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8014036:	2300      	movs	r3, #0
 8014038:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d101      	bne.n	8014044 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014040:	2303      	movs	r3, #3
 8014042:	e066      	b.n	8014112 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8014044:	4b35      	ldr	r3, [pc, #212]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014046:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801404a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801404c:	2300      	movs	r3, #0
 801404e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014050:	4b32      	ldr	r3, [pc, #200]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014052:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014056:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014058:	4b30      	ldr	r3, [pc, #192]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 801405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801405c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801405e:	4b2f      	ldr	r3, [pc, #188]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014060:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014064:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014066:	4b2d      	ldr	r3, [pc, #180]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014068:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801406c:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801406e:	4b2b      	ldr	r3, [pc, #172]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014070:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014074:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014078:	4b28      	ldr	r3, [pc, #160]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 801407a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801407e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014082:	4b26      	ldr	r3, [pc, #152]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 8014084:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014088:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801408c:	4b23      	ldr	r3, [pc, #140]	; (801411c <LoRaMacQueryTxPossible+0x108>)
 801408e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014096:	f107 0310 	add.w	r3, r7, #16
 801409a:	f107 020e 	add.w	r2, r7, #14
 801409e:	f107 010f 	add.w	r1, r7, #15
 80140a2:	f107 0014 	add.w	r0, r7, #20
 80140a6:	f001 f8d1 	bl	801524c <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80140aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fd fefc 	bl	8011eac <GetMaxAppPayloadWithoutFOptsLength>
 80140b4:	4603      	mov	r3, r0
 80140b6:	461a      	mov	r2, r3
 80140b8:	683b      	ldr	r3, [r7, #0]
 80140ba:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80140bc:	f107 0308 	add.w	r3, r7, #8
 80140c0:	4618      	mov	r0, r3
 80140c2:	f001 fbdf 	bl	8015884 <LoRaMacCommandsGetSizeSerializedCmds>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d001      	beq.n	80140d0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80140cc:	2313      	movs	r3, #19
 80140ce:	e020      	b.n	8014112 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	2b0f      	cmp	r3, #15
 80140d4:	d819      	bhi.n	801410a <LoRaMacQueryTxPossible+0xf6>
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	785b      	ldrb	r3, [r3, #1]
 80140da:	461a      	mov	r2, r3
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	429a      	cmp	r2, r3
 80140e0:	d313      	bcc.n	801410a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	785a      	ldrb	r2, [r3, #1]
 80140e6:	68bb      	ldr	r3, [r7, #8]
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	1ad3      	subs	r3, r2, r3
 80140ec:	b2da      	uxtb	r2, r3
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	785b      	ldrb	r3, [r3, #1]
 80140f6:	4619      	mov	r1, r3
 80140f8:	79fa      	ldrb	r2, [r7, #7]
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	4413      	add	r3, r2
 80140fe:	4299      	cmp	r1, r3
 8014100:	d301      	bcc.n	8014106 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8014102:	2300      	movs	r3, #0
 8014104:	e005      	b.n	8014112 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014106:	2308      	movs	r3, #8
 8014108:	e003      	b.n	8014112 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	2200      	movs	r2, #0
 801410e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014110:	2308      	movs	r3, #8
    }
}
 8014112:	4618      	mov	r0, r3
 8014114:	3728      	adds	r7, #40	; 0x28
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}
 801411a:	bf00      	nop
 801411c:	20000e48 	.word	0x20000e48

08014120 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014120:	b590      	push	{r4, r7, lr}
 8014122:	b087      	sub	sp, #28
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014128:	2300      	movs	r3, #0
 801412a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d101      	bne.n	8014136 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014132:	2303      	movs	r3, #3
 8014134:	e1a4      	b.n	8014480 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	781b      	ldrb	r3, [r3, #0]
 801413a:	2b3f      	cmp	r3, #63	; 0x3f
 801413c:	f200 8199 	bhi.w	8014472 <LoRaMacMibGetRequestConfirm+0x352>
 8014140:	a201      	add	r2, pc, #4	; (adr r2, 8014148 <LoRaMacMibGetRequestConfirm+0x28>)
 8014142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014146:	bf00      	nop
 8014148:	08014249 	.word	0x08014249
 801414c:	08014255 	.word	0x08014255
 8014150:	08014261 	.word	0x08014261
 8014154:	0801426d 	.word	0x0801426d
 8014158:	08014279 	.word	0x08014279
 801415c:	08014285 	.word	0x08014285
 8014160:	08014291 	.word	0x08014291
 8014164:	08014473 	.word	0x08014473
 8014168:	08014473 	.word	0x08014473
 801416c:	08014473 	.word	0x08014473
 8014170:	08014473 	.word	0x08014473
 8014174:	08014473 	.word	0x08014473
 8014178:	08014473 	.word	0x08014473
 801417c:	08014473 	.word	0x08014473
 8014180:	08014473 	.word	0x08014473
 8014184:	080142a5 	.word	0x080142a5
 8014188:	080142b1 	.word	0x080142b1
 801418c:	080142bd 	.word	0x080142bd
 8014190:	080142df 	.word	0x080142df
 8014194:	080142f1 	.word	0x080142f1
 8014198:	08014303 	.word	0x08014303
 801419c:	08014315 	.word	0x08014315
 80141a0:	08014349 	.word	0x08014349
 80141a4:	08014327 	.word	0x08014327
 80141a8:	0801436b 	.word	0x0801436b
 80141ac:	08014377 	.word	0x08014377
 80141b0:	08014381 	.word	0x08014381
 80141b4:	0801438b 	.word	0x0801438b
 80141b8:	08014395 	.word	0x08014395
 80141bc:	0801439f 	.word	0x0801439f
 80141c0:	080143a9 	.word	0x080143a9
 80141c4:	080143b5 	.word	0x080143b5
 80141c8:	080143cd 	.word	0x080143cd
 80141cc:	080143c1 	.word	0x080143c1
 80141d0:	080143d9 	.word	0x080143d9
 80141d4:	080143e3 	.word	0x080143e3
 80141d8:	080143ef 	.word	0x080143ef
 80141dc:	0801440b 	.word	0x0801440b
 80141e0:	080143fb 	.word	0x080143fb
 80141e4:	08014403 	.word	0x08014403
 80141e8:	08014473 	.word	0x08014473
 80141ec:	08014417 	.word	0x08014417
 80141f0:	08014473 	.word	0x08014473
 80141f4:	08014473 	.word	0x08014473
 80141f8:	08014473 	.word	0x08014473
 80141fc:	08014473 	.word	0x08014473
 8014200:	08014473 	.word	0x08014473
 8014204:	08014473 	.word	0x08014473
 8014208:	08014473 	.word	0x08014473
 801420c:	08014473 	.word	0x08014473
 8014210:	08014473 	.word	0x08014473
 8014214:	08014473 	.word	0x08014473
 8014218:	08014473 	.word	0x08014473
 801421c:	08014473 	.word	0x08014473
 8014220:	08014473 	.word	0x08014473
 8014224:	08014473 	.word	0x08014473
 8014228:	08014473 	.word	0x08014473
 801422c:	0801442b 	.word	0x0801442b
 8014230:	08014437 	.word	0x08014437
 8014234:	08014443 	.word	0x08014443
 8014238:	0801444f 	.word	0x0801444f
 801423c:	0801445b 	.word	0x0801445b
 8014240:	08014467 	.word	0x08014467
 8014244:	0801446d 	.word	0x0801446d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014248:	4b8f      	ldr	r3, [pc, #572]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801424a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	711a      	strb	r2, [r3, #4]
            break;
 8014252:	e114      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014254:	4b8c      	ldr	r3, [pc, #560]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014256:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	711a      	strb	r2, [r3, #4]
            break;
 801425e:	e10e      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	4618      	mov	r0, r3
 8014266:	f7fa fefb 	bl	800f060 <SecureElementGetDevEui>
            break;
 801426a:	e108      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	4618      	mov	r0, r3
 8014272:	f7fa ff25 	bl	800f0c0 <SecureElementGetJoinEui>
            break;
 8014276:	e102      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014278:	4b83      	ldr	r3, [pc, #524]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801427a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	711a      	strb	r2, [r3, #4]
            break;
 8014282:	e0fc      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014284:	4b80      	ldr	r3, [pc, #512]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014286:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	605a      	str	r2, [r3, #4]
            break;
 801428e:	e0f6      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014290:	4b7d      	ldr	r3, [pc, #500]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014292:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	3304      	adds	r3, #4
 801429a:	4619      	mov	r1, r3
 801429c:	4610      	mov	r0, r2
 801429e:	f7fa ff41 	bl	800f124 <SecureElementGetDevAddr>
            break;
 80142a2:	e0ec      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80142a4:	4b78      	ldr	r3, [pc, #480]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80142a6:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	711a      	strb	r2, [r3, #4]
            break;
 80142ae:	e0e6      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80142b0:	4b75      	ldr	r3, [pc, #468]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80142b2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	711a      	strb	r2, [r3, #4]
            break;
 80142ba:	e0e0      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80142bc:	231d      	movs	r3, #29
 80142be:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142c0:	4b71      	ldr	r3, [pc, #452]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80142c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142c6:	f107 0210 	add.w	r2, r7, #16
 80142ca:	4611      	mov	r1, r2
 80142cc:	4618      	mov	r0, r3
 80142ce:	f002 ffc0 	bl	8017252 <RegionGetPhyParam>
 80142d2:	4603      	mov	r3, r0
 80142d4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80142d6:	68fa      	ldr	r2, [r7, #12]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	605a      	str	r2, [r3, #4]
            break;
 80142dc:	e0cf      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	4a69      	ldr	r2, [pc, #420]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80142e2:	3304      	adds	r3, #4
 80142e4:	326c      	adds	r2, #108	; 0x6c
 80142e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142ea:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80142ee:	e0c6      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	4a65      	ldr	r2, [pc, #404]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80142f4:	3304      	adds	r3, #4
 80142f6:	32b4      	adds	r2, #180	; 0xb4
 80142f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142fc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014300:	e0bd      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	4a60      	ldr	r2, [pc, #384]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014306:	3304      	adds	r3, #4
 8014308:	3274      	adds	r2, #116	; 0x74
 801430a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801430e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014312:	e0b4      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	4a5c      	ldr	r2, [pc, #368]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014318:	3304      	adds	r3, #4
 801431a:	32bc      	adds	r2, #188	; 0xbc
 801431c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014320:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014324:	e0ab      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014326:	231b      	movs	r3, #27
 8014328:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801432a:	4b57      	ldr	r3, [pc, #348]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801432c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014330:	f107 0210 	add.w	r2, r7, #16
 8014334:	4611      	mov	r1, r2
 8014336:	4618      	mov	r0, r3
 8014338:	f002 ff8b 	bl	8017252 <RegionGetPhyParam>
 801433c:	4603      	mov	r3, r0
 801433e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014340:	68fa      	ldr	r2, [r7, #12]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	605a      	str	r2, [r3, #4]
            break;
 8014346:	e09a      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014348:	231a      	movs	r3, #26
 801434a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801434c:	4b4e      	ldr	r3, [pc, #312]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801434e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014352:	f107 0210 	add.w	r2, r7, #16
 8014356:	4611      	mov	r1, r2
 8014358:	4618      	mov	r0, r3
 801435a:	f002 ff7a 	bl	8017252 <RegionGetPhyParam>
 801435e:	4603      	mov	r3, r0
 8014360:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014362:	68fa      	ldr	r2, [r7, #12]
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	605a      	str	r2, [r3, #4]
            break;
 8014368:	e089      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801436a:	4b47      	ldr	r3, [pc, #284]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801436c:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	711a      	strb	r2, [r3, #4]
            break;
 8014374:	e083      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014376:	4b44      	ldr	r3, [pc, #272]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	605a      	str	r2, [r3, #4]
            break;
 801437e:	e07e      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014380:	4b41      	ldr	r3, [pc, #260]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	605a      	str	r2, [r3, #4]
            break;
 8014388:	e079      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801438a:	4b3f      	ldr	r3, [pc, #252]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801438c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	605a      	str	r2, [r3, #4]
            break;
 8014392:	e074      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014394:	4b3c      	ldr	r3, [pc, #240]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014396:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	605a      	str	r2, [r3, #4]
            break;
 801439c:	e06f      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801439e:	4b3a      	ldr	r3, [pc, #232]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	605a      	str	r2, [r3, #4]
            break;
 80143a6:	e06a      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80143a8:	4b37      	ldr	r3, [pc, #220]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143aa:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	711a      	strb	r2, [r3, #4]
            break;
 80143b2:	e064      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80143b4:	4b34      	ldr	r3, [pc, #208]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143b6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	711a      	strb	r2, [r3, #4]
            break;
 80143be:	e05e      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80143c0:	4b31      	ldr	r3, [pc, #196]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143c2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	711a      	strb	r2, [r3, #4]
            break;
 80143ca:	e058      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80143cc:	4b2e      	ldr	r3, [pc, #184]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143ce:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	711a      	strb	r2, [r3, #4]
            break;
 80143d6:	e052      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80143d8:	4b2b      	ldr	r3, [pc, #172]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	605a      	str	r2, [r3, #4]
            break;
 80143e0:	e04d      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80143e2:	4b29      	ldr	r3, [pc, #164]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143e4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	711a      	strb	r2, [r3, #4]
            break;
 80143ec:	e047      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80143ee:	4b26      	ldr	r3, [pc, #152]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	605a      	str	r2, [r3, #4]
            break;
 80143f8:	e041      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4a22      	ldr	r2, [pc, #136]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 80143fe:	605a      	str	r2, [r3, #4]
            break;
 8014400:	e03d      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	2200      	movs	r2, #0
 8014406:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014408:	e039      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801440a:	4b1f      	ldr	r3, [pc, #124]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801440c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	605a      	str	r2, [r3, #4]
            break;
 8014414:	e033      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	4a1b      	ldr	r2, [pc, #108]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801441a:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 801441e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014420:	687c      	ldr	r4, [r7, #4]
 8014422:	f003 f89f 	bl	8017564 <RegionGetVersion>
 8014426:	60a0      	str	r0, [r4, #8]
            break;
 8014428:	e029      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801442a:	4b17      	ldr	r3, [pc, #92]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801442c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	605a      	str	r2, [r3, #4]
            break;
 8014434:	e023      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014436:	4b14      	ldr	r3, [pc, #80]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014438:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	809a      	strh	r2, [r3, #4]
            break;
 8014440:	e01d      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014442:	4b11      	ldr	r3, [pc, #68]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014444:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	809a      	strh	r2, [r3, #4]
            break;
 801444c:	e017      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801444e:	4b0e      	ldr	r3, [pc, #56]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 8014450:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	809a      	strh	r2, [r3, #4]
            break;
 8014458:	e011      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801445a:	4b0b      	ldr	r3, [pc, #44]	; (8014488 <LoRaMacMibGetRequestConfirm+0x368>)
 801445c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	809a      	strh	r2, [r3, #4]
            break;
 8014464:	e00b      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014466:	2318      	movs	r3, #24
 8014468:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801446a:	e008      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801446c:	2318      	movs	r3, #24
 801446e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014470:	e005      	b.n	801447e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014472:	6878      	ldr	r0, [r7, #4]
 8014474:	f000 ff96 	bl	80153a4 <LoRaMacClassBMibGetRequestConfirm>
 8014478:	4603      	mov	r3, r0
 801447a:	75fb      	strb	r3, [r7, #23]
            break;
 801447c:	bf00      	nop
        }
    }
    return status;
 801447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014480:	4618      	mov	r0, r3
 8014482:	371c      	adds	r7, #28
 8014484:	46bd      	mov	sp, r7
 8014486:	bd90      	pop	{r4, r7, pc}
 8014488:	20000e48 	.word	0x20000e48

0801448c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014494:	2300      	movs	r3, #0
 8014496:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d101      	bne.n	80144a2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801449e:	2303      	movs	r3, #3
 80144a0:	e382      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80144a2:	4bbb      	ldr	r3, [pc, #748]	; (8014790 <LoRaMacMibSetRequestConfirm+0x304>)
 80144a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80144a8:	f003 0302 	and.w	r3, r3, #2
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d001      	beq.n	80144b4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80144b0:	2301      	movs	r3, #1
 80144b2:	e379      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	2b3f      	cmp	r3, #63	; 0x3f
 80144ba:	f200 8353 	bhi.w	8014b64 <LoRaMacMibSetRequestConfirm+0x6d8>
 80144be:	a201      	add	r2, pc, #4	; (adr r2, 80144c4 <LoRaMacMibSetRequestConfirm+0x38>)
 80144c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c4:	080145c5 	.word	0x080145c5
 80144c8:	080145d5 	.word	0x080145d5
 80144cc:	080145ef 	.word	0x080145ef
 80144d0:	08014607 	.word	0x08014607
 80144d4:	0801461f 	.word	0x0801461f
 80144d8:	0801462b 	.word	0x0801462b
 80144dc:	08014637 	.word	0x08014637
 80144e0:	08014661 	.word	0x08014661
 80144e4:	08014687 	.word	0x08014687
 80144e8:	080146ad 	.word	0x080146ad
 80144ec:	080146d3 	.word	0x080146d3
 80144f0:	080146f9 	.word	0x080146f9
 80144f4:	0801471f 	.word	0x0801471f
 80144f8:	08014745 	.word	0x08014745
 80144fc:	0801476b 	.word	0x0801476b
 8014500:	08014799 	.word	0x08014799
 8014504:	080147b9 	.word	0x080147b9
 8014508:	08014b65 	.word	0x08014b65
 801450c:	080147c5 	.word	0x080147c5
 8014510:	08014835 	.word	0x08014835
 8014514:	08014875 	.word	0x08014875
 8014518:	080148d7 	.word	0x080148d7
 801451c:	08014947 	.word	0x08014947
 8014520:	08014917 	.word	0x08014917
 8014524:	08014977 	.word	0x08014977
 8014528:	08014999 	.word	0x08014999
 801452c:	080149a3 	.word	0x080149a3
 8014530:	080149ad 	.word	0x080149ad
 8014534:	080149b7 	.word	0x080149b7
 8014538:	080149c1 	.word	0x080149c1
 801453c:	080149cb 	.word	0x080149cb
 8014540:	080149fd 	.word	0x080149fd
 8014544:	08014a71 	.word	0x08014a71
 8014548:	08014a37 	.word	0x08014a37
 801454c:	08014aa3 	.word	0x08014aa3
 8014550:	08014ab9 	.word	0x08014ab9
 8014554:	08014ad1 	.word	0x08014ad1
 8014558:	08014add 	.word	0x08014add
 801455c:	08014ae9 	.word	0x08014ae9
 8014560:	08014b65 	.word	0x08014b65
 8014564:	08014af3 	.word	0x08014af3
 8014568:	08014b65 	.word	0x08014b65
 801456c:	08014b65 	.word	0x08014b65
 8014570:	08014b65 	.word	0x08014b65
 8014574:	08014b65 	.word	0x08014b65
 8014578:	08014b65 	.word	0x08014b65
 801457c:	08014b65 	.word	0x08014b65
 8014580:	08014b65 	.word	0x08014b65
 8014584:	08014b65 	.word	0x08014b65
 8014588:	08014b65 	.word	0x08014b65
 801458c:	08014b65 	.word	0x08014b65
 8014590:	08014b65 	.word	0x08014b65
 8014594:	08014b65 	.word	0x08014b65
 8014598:	08014b65 	.word	0x08014b65
 801459c:	08014b65 	.word	0x08014b65
 80145a0:	08014b65 	.word	0x08014b65
 80145a4:	08014b65 	.word	0x08014b65
 80145a8:	08014b1d 	.word	0x08014b1d
 80145ac:	08014b29 	.word	0x08014b29
 80145b0:	08014b35 	.word	0x08014b35
 80145b4:	08014b41 	.word	0x08014b41
 80145b8:	08014b4d 	.word	0x08014b4d
 80145bc:	08014b59 	.word	0x08014b59
 80145c0:	08014b5f 	.word	0x08014b5f
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	791b      	ldrb	r3, [r3, #4]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7fd fb87 	bl	8011cdc <SwitchClass>
 80145ce:	4603      	mov	r3, r0
 80145d0:	75fb      	strb	r3, [r7, #23]
            break;
 80145d2:	e2e8      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	791b      	ldrb	r3, [r3, #4]
 80145d8:	2b02      	cmp	r3, #2
 80145da:	d005      	beq.n	80145e8 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	791a      	ldrb	r2, [r3, #4]
 80145e0:	4b6c      	ldr	r3, [pc, #432]	; (8014794 <LoRaMacMibSetRequestConfirm+0x308>)
 80145e2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80145e6:	e2de      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80145e8:	2303      	movs	r3, #3
 80145ea:	75fb      	strb	r3, [r7, #23]
            break;
 80145ec:	e2db      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7fa fd1c 	bl	800f030 <SecureElementSetDevEui>
 80145f8:	4603      	mov	r3, r0
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	f000 82b8 	beq.w	8014b70 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014600:	2303      	movs	r3, #3
 8014602:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014604:	e2b4      	b.n	8014b70 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	4618      	mov	r0, r3
 801460c:	f7fa fd40 	bl	800f090 <SecureElementSetJoinEui>
 8014610:	4603      	mov	r3, r0
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 82ae 	beq.w	8014b74 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014618:	2303      	movs	r3, #3
 801461a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801461c:	e2aa      	b.n	8014b74 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	791a      	ldrb	r2, [r3, #4]
 8014622:	4b5c      	ldr	r3, [pc, #368]	; (8014794 <LoRaMacMibSetRequestConfirm+0x308>)
 8014624:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014628:	e2bd      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	4a59      	ldr	r2, [pc, #356]	; (8014794 <LoRaMacMibSetRequestConfirm+0x308>)
 8014630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014634:	e2b7      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014636:	4b57      	ldr	r3, [pc, #348]	; (8014794 <LoRaMacMibSetRequestConfirm+0x308>)
 8014638:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	685b      	ldr	r3, [r3, #4]
 8014640:	4619      	mov	r1, r3
 8014642:	4610      	mov	r0, r2
 8014644:	f7fa fd54 	bl	800f0f0 <SecureElementSetDevAddr>
 8014648:	4603      	mov	r3, r0
 801464a:	2b00      	cmp	r3, #0
 801464c:	d002      	beq.n	8014654 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801464e:	2303      	movs	r3, #3
 8014650:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014652:	e2a8      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4a4e      	ldr	r2, [pc, #312]	; (8014794 <LoRaMacMibSetRequestConfirm+0x308>)
 801465a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 801465e:	e2a2      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00b      	beq.n	8014680 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	685b      	ldr	r3, [r3, #4]
 801466c:	4619      	mov	r1, r3
 801466e:	2000      	movs	r0, #0
 8014670:	f001 fff4 	bl	801665c <LoRaMacCryptoSetKey>
 8014674:	4603      	mov	r3, r0
 8014676:	2b00      	cmp	r3, #0
 8014678:	f000 827e 	beq.w	8014b78 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801467c:	2311      	movs	r3, #17
 801467e:	e293      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014680:	2303      	movs	r3, #3
 8014682:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014684:	e278      	b.n	8014b78 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d00b      	beq.n	80146a6 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	4619      	mov	r1, r3
 8014694:	2001      	movs	r0, #1
 8014696:	f001 ffe1 	bl	801665c <LoRaMacCryptoSetKey>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	f000 826d 	beq.w	8014b7c <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80146a2:	2311      	movs	r3, #17
 80146a4:	e280      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146a6:	2303      	movs	r3, #3
 80146a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146aa:	e267      	b.n	8014b7c <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d00b      	beq.n	80146cc <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	4619      	mov	r1, r3
 80146ba:	2008      	movs	r0, #8
 80146bc:	f001 ffce 	bl	801665c <LoRaMacCryptoSetKey>
 80146c0:	4603      	mov	r3, r0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	f000 825c 	beq.w	8014b80 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80146c8:	2311      	movs	r3, #17
 80146ca:	e26d      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146cc:	2303      	movs	r3, #3
 80146ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146d0:	e256      	b.n	8014b80 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	685b      	ldr	r3, [r3, #4]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d00b      	beq.n	80146f2 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	4619      	mov	r1, r3
 80146e0:	2009      	movs	r0, #9
 80146e2:	f001 ffbb 	bl	801665c <LoRaMacCryptoSetKey>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	f000 824b 	beq.w	8014b84 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80146ee:	2311      	movs	r3, #17
 80146f0:	e25a      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146f2:	2303      	movs	r3, #3
 80146f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80146f6:	e245      	b.n	8014b84 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d00b      	beq.n	8014718 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	4619      	mov	r1, r3
 8014706:	200c      	movs	r0, #12
 8014708:	f001 ffa8 	bl	801665c <LoRaMacCryptoSetKey>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	f000 823a 	beq.w	8014b88 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014714:	2311      	movs	r3, #17
 8014716:	e247      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014718:	2303      	movs	r3, #3
 801471a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801471c:	e234      	b.n	8014b88 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d00b      	beq.n	801473e <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	4619      	mov	r1, r3
 801472c:	200d      	movs	r0, #13
 801472e:	f001 ff95 	bl	801665c <LoRaMacCryptoSetKey>
 8014732:	4603      	mov	r3, r0
 8014734:	2b00      	cmp	r3, #0
 8014736:	f000 8229 	beq.w	8014b8c <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801473a:	2311      	movs	r3, #17
 801473c:	e234      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801473e:	2303      	movs	r3, #3
 8014740:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014742:	e223      	b.n	8014b8c <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00b      	beq.n	8014764 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	685b      	ldr	r3, [r3, #4]
 8014750:	4619      	mov	r1, r3
 8014752:	200e      	movs	r0, #14
 8014754:	f001 ff82 	bl	801665c <LoRaMacCryptoSetKey>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	f000 8218 	beq.w	8014b90 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014760:	2311      	movs	r3, #17
 8014762:	e221      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014764:	2303      	movs	r3, #3
 8014766:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014768:	e212      	b.n	8014b90 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d00b      	beq.n	801478a <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	4619      	mov	r1, r3
 8014778:	200f      	movs	r0, #15
 801477a:	f001 ff6f 	bl	801665c <LoRaMacCryptoSetKey>
 801477e:	4603      	mov	r3, r0
 8014780:	2b00      	cmp	r3, #0
 8014782:	f000 8207 	beq.w	8014b94 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014786:	2311      	movs	r3, #17
 8014788:	e20e      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801478a:	2303      	movs	r3, #3
 801478c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801478e:	e201      	b.n	8014b94 <LoRaMacMibSetRequestConfirm+0x708>
 8014790:	20000940 	.word	0x20000940
 8014794:	20000e48 	.word	0x20000e48
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	791a      	ldrb	r2, [r3, #4]
 801479c:	4bb2      	ldr	r3, [pc, #712]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801479e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80147a2:	4bb2      	ldr	r3, [pc, #712]	; (8014a6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80147a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80147a6:	4ab0      	ldr	r2, [pc, #704]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80147a8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80147ac:	4610      	mov	r0, r2
 80147ae:	4798      	blx	r3
            Radio.Sleep( );
 80147b0:	4bae      	ldr	r3, [pc, #696]	; (8014a6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80147b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147b4:	4798      	blx	r3
            break;
 80147b6:	e1f6      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	791a      	ldrb	r2, [r3, #4]
 80147bc:	4baa      	ldr	r3, [pc, #680]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80147be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 80147c2:	e1f0      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	7a1b      	ldrb	r3, [r3, #8]
 80147c8:	b25b      	sxtb	r3, r3
 80147ca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80147cc:	4ba6      	ldr	r3, [pc, #664]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80147ce:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80147d2:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80147d4:	4ba4      	ldr	r3, [pc, #656]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80147d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147da:	f107 0108 	add.w	r1, r7, #8
 80147de:	2207      	movs	r2, #7
 80147e0:	4618      	mov	r0, r3
 80147e2:	f002 fd71 	bl	80172c8 <RegionVerify>
 80147e6:	4603      	mov	r3, r0
 80147e8:	f083 0301 	eor.w	r3, r3, #1
 80147ec:	b2db      	uxtb	r3, r3
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d002      	beq.n	80147f8 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147f2:	2303      	movs	r3, #3
 80147f4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80147f6:	e1d6      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80147fe:	4b9a      	ldr	r3, [pc, #616]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014800:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014804:	f107 0108 	add.w	r1, r7, #8
 8014808:	2200      	movs	r2, #0
 801480a:	4618      	mov	r0, r3
 801480c:	f002 fd5c 	bl	80172c8 <RegionVerify>
 8014810:	4603      	mov	r3, r0
 8014812:	f083 0301 	eor.w	r3, r3, #1
 8014816:	b2db      	uxtb	r3, r3
 8014818:	2b00      	cmp	r3, #0
 801481a:	d002      	beq.n	8014822 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801481c:	2303      	movs	r3, #3
 801481e:	75fb      	strb	r3, [r7, #23]
            break;
 8014820:	e1c1      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014822:	4b91      	ldr	r3, [pc, #580]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	336c      	adds	r3, #108	; 0x6c
 8014828:	3204      	adds	r2, #4
 801482a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801482e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014832:	e1b8      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	7a1b      	ldrb	r3, [r3, #8]
 8014838:	b25b      	sxtb	r3, r3
 801483a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801483c:	4b8a      	ldr	r3, [pc, #552]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801483e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014842:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014844:	4b88      	ldr	r3, [pc, #544]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014846:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801484a:	f107 0108 	add.w	r1, r7, #8
 801484e:	2207      	movs	r2, #7
 8014850:	4618      	mov	r0, r3
 8014852:	f002 fd39 	bl	80172c8 <RegionVerify>
 8014856:	4603      	mov	r3, r0
 8014858:	2b00      	cmp	r3, #0
 801485a:	d008      	beq.n	801486e <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801485c:	4b82      	ldr	r3, [pc, #520]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	33b4      	adds	r3, #180	; 0xb4
 8014862:	3204      	adds	r2, #4
 8014864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014868:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801486c:	e19b      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801486e:	2303      	movs	r3, #3
 8014870:	75fb      	strb	r3, [r7, #23]
            break;
 8014872:	e198      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	7a1b      	ldrb	r3, [r3, #8]
 8014878:	b25b      	sxtb	r3, r3
 801487a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801487c:	4b7a      	ldr	r3, [pc, #488]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801487e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014882:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014884:	4b78      	ldr	r3, [pc, #480]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014886:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801488a:	f107 0108 	add.w	r1, r7, #8
 801488e:	2207      	movs	r2, #7
 8014890:	4618      	mov	r0, r3
 8014892:	f002 fd19 	bl	80172c8 <RegionVerify>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d019      	beq.n	80148d0 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801489c:	4b72      	ldr	r3, [pc, #456]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801489e:	687a      	ldr	r2, [r7, #4]
 80148a0:	3374      	adds	r3, #116	; 0x74
 80148a2:	3204      	adds	r2, #4
 80148a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148a8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80148ac:	4b6e      	ldr	r3, [pc, #440]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80148b2:	2b02      	cmp	r3, #2
 80148b4:	f040 8170 	bne.w	8014b98 <LoRaMacMibSetRequestConfirm+0x70c>
 80148b8:	4b6b      	ldr	r3, [pc, #428]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148ba:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80148be:	2b00      	cmp	r3, #0
 80148c0:	f000 816a 	beq.w	8014b98 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80148c4:	4b69      	ldr	r3, [pc, #420]	; (8014a6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 80148c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80148ca:	f7fe fc91 	bl	80131f0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80148ce:	e163      	b.n	8014b98 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148d0:	2303      	movs	r3, #3
 80148d2:	75fb      	strb	r3, [r7, #23]
            break;
 80148d4:	e160      	b.n	8014b98 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	7a1b      	ldrb	r3, [r3, #8]
 80148da:	b25b      	sxtb	r3, r3
 80148dc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80148de:	4b62      	ldr	r3, [pc, #392]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148e0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80148e4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80148e6:	4b60      	ldr	r3, [pc, #384]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148ec:	f107 0108 	add.w	r1, r7, #8
 80148f0:	2207      	movs	r2, #7
 80148f2:	4618      	mov	r0, r3
 80148f4:	f002 fce8 	bl	80172c8 <RegionVerify>
 80148f8:	4603      	mov	r3, r0
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d008      	beq.n	8014910 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80148fe:	4b5a      	ldr	r3, [pc, #360]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	33bc      	adds	r3, #188	; 0xbc
 8014904:	3204      	adds	r2, #4
 8014906:	e892 0003 	ldmia.w	r2, {r0, r1}
 801490a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801490e:	e14a      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014910:	2303      	movs	r3, #3
 8014912:	75fb      	strb	r3, [r7, #23]
            break;
 8014914:	e147      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801491c:	2301      	movs	r3, #1
 801491e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014920:	4b51      	ldr	r3, [pc, #324]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014922:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014926:	f107 020c 	add.w	r2, r7, #12
 801492a:	4611      	mov	r1, r2
 801492c:	4618      	mov	r0, r3
 801492e:	f002 fcf4 	bl	801731a <RegionChanMaskSet>
 8014932:	4603      	mov	r3, r0
 8014934:	f083 0301 	eor.w	r3, r3, #1
 8014938:	b2db      	uxtb	r3, r3
 801493a:	2b00      	cmp	r3, #0
 801493c:	f000 812e 	beq.w	8014b9c <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014940:	2303      	movs	r3, #3
 8014942:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014944:	e12a      	b.n	8014b9c <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801494c:	2300      	movs	r3, #0
 801494e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014950:	4b45      	ldr	r3, [pc, #276]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014952:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014956:	f107 020c 	add.w	r2, r7, #12
 801495a:	4611      	mov	r1, r2
 801495c:	4618      	mov	r0, r3
 801495e:	f002 fcdc 	bl	801731a <RegionChanMaskSet>
 8014962:	4603      	mov	r3, r0
 8014964:	f083 0301 	eor.w	r3, r3, #1
 8014968:	b2db      	uxtb	r3, r3
 801496a:	2b00      	cmp	r3, #0
 801496c:	f000 8118 	beq.w	8014ba0 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014970:	2303      	movs	r3, #3
 8014972:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014974:	e114      	b.n	8014ba0 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	791b      	ldrb	r3, [r3, #4]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d009      	beq.n	8014992 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014982:	2b0f      	cmp	r3, #15
 8014984:	d805      	bhi.n	8014992 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	791a      	ldrb	r2, [r3, #4]
 801498a:	4b37      	ldr	r3, [pc, #220]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801498c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014990:	e109      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014992:	2303      	movs	r3, #3
 8014994:	75fb      	strb	r3, [r7, #23]
            break;
 8014996:	e106      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	4a32      	ldr	r2, [pc, #200]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801499e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80149a0:	e101      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	4a30      	ldr	r2, [pc, #192]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149a8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80149aa:	e0fc      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	4a2d      	ldr	r2, [pc, #180]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149b2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80149b4:	e0f7      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	4a2b      	ldr	r2, [pc, #172]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149bc:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 80149be:	e0f2      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	4a28      	ldr	r2, [pc, #160]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149c6:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 80149c8:	e0ed      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80149d0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80149d2:	4b25      	ldr	r3, [pc, #148]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80149d8:	f107 0108 	add.w	r1, r7, #8
 80149dc:	2206      	movs	r2, #6
 80149de:	4618      	mov	r0, r3
 80149e0:	f002 fc72 	bl	80172c8 <RegionVerify>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d005      	beq.n	80149f6 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80149ea:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80149ee:	4b1e      	ldr	r3, [pc, #120]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149f0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80149f4:	e0d7      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80149f6:	2303      	movs	r3, #3
 80149f8:	75fb      	strb	r3, [r7, #23]
            break;
 80149fa:	e0d4      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014a02:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014a04:	4b18      	ldr	r3, [pc, #96]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014a0a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014a0c:	4b16      	ldr	r3, [pc, #88]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a12:	f107 0108 	add.w	r1, r7, #8
 8014a16:	2205      	movs	r2, #5
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f002 fc55 	bl	80172c8 <RegionVerify>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d005      	beq.n	8014a30 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014a24:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014a28:	4b0f      	ldr	r3, [pc, #60]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a2e:	e0ba      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a30:	2303      	movs	r3, #3
 8014a32:	75fb      	strb	r3, [r7, #23]
            break;
 8014a34:	e0b7      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014a3c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014a3e:	4b0a      	ldr	r3, [pc, #40]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a40:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a44:	f107 0108 	add.w	r1, r7, #8
 8014a48:	220a      	movs	r2, #10
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f002 fc3c 	bl	80172c8 <RegionVerify>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d005      	beq.n	8014a62 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014a56:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014a5a:	4b03      	ldr	r3, [pc, #12]	; (8014a68 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a5c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a60:	e0a1      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a62:	2303      	movs	r3, #3
 8014a64:	75fb      	strb	r3, [r7, #23]
            break;
 8014a66:	e09e      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
 8014a68:	20000e48 	.word	0x20000e48
 8014a6c:	0801f460 	.word	0x0801f460
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014a76:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014a78:	4b4d      	ldr	r3, [pc, #308]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014a7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a7e:	f107 0108 	add.w	r1, r7, #8
 8014a82:	2209      	movs	r2, #9
 8014a84:	4618      	mov	r0, r3
 8014a86:	f002 fc1f 	bl	80172c8 <RegionVerify>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d005      	beq.n	8014a9c <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014a90:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014a94:	4b46      	ldr	r3, [pc, #280]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a9a:	e084      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a9c:	2303      	movs	r3, #3
 8014a9e:	75fb      	strb	r3, [r7, #23]
            break;
 8014aa0:	e081      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	685b      	ldr	r3, [r3, #4]
 8014aa6:	4a42      	ldr	r2, [pc, #264]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014aac:	4b40      	ldr	r3, [pc, #256]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014ab2:	4a3f      	ldr	r2, [pc, #252]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014ab6:	e076      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	791a      	ldrb	r2, [r3, #4]
 8014abc:	4b3c      	ldr	r3, [pc, #240]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014abe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8014ac2:	4b3b      	ldr	r3, [pc, #236]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014ac4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014ac8:	4b39      	ldr	r3, [pc, #228]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8014ace:	e06a      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	4a36      	ldr	r2, [pc, #216]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014ad6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8014ada:	e064      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	4a33      	ldr	r2, [pc, #204]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014ae2:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8014ae6:	e05e      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014ae8:	f7fe fde0 	bl	80136ac <RestoreNvmData>
 8014aec:	4603      	mov	r3, r0
 8014aee:	75fb      	strb	r3, [r7, #23]
            break;
 8014af0:	e059      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	799b      	ldrb	r3, [r3, #6]
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d80d      	bhi.n	8014b16 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8014afa:	4a2d      	ldr	r2, [pc, #180]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	685b      	ldr	r3, [r3, #4]
 8014b00:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6858      	ldr	r0, [r3, #4]
 8014b08:	f001 fce0 	bl	80164cc <LoRaMacCryptoSetLrWanVersion>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d048      	beq.n	8014ba4 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014b12:	2311      	movs	r3, #17
 8014b14:	e048      	b.n	8014ba8 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b16:	2303      	movs	r3, #3
 8014b18:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b1a:	e043      	b.n	8014ba4 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	685b      	ldr	r3, [r3, #4]
 8014b20:	4a23      	ldr	r2, [pc, #140]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8014b26:	e03e      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	889a      	ldrh	r2, [r3, #4]
 8014b2c:	4b20      	ldr	r3, [pc, #128]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014b2e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8014b32:	e038      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	889a      	ldrh	r2, [r3, #4]
 8014b38:	4b1d      	ldr	r3, [pc, #116]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014b3a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8014b3e:	e032      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	889a      	ldrh	r2, [r3, #4]
 8014b44:	4b1a      	ldr	r3, [pc, #104]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014b46:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8014b4a:	e02c      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	889a      	ldrh	r2, [r3, #4]
 8014b50:	4b17      	ldr	r3, [pc, #92]	; (8014bb0 <LoRaMacMibSetRequestConfirm+0x724>)
 8014b52:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8014b56:	e026      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014b58:	2318      	movs	r3, #24
 8014b5a:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014b5c:	e023      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014b5e:	2318      	movs	r3, #24
 8014b60:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014b62:	e020      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f000 fc27 	bl	80153b8 <LoRaMacMibClassBSetRequestConfirm>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	75fb      	strb	r3, [r7, #23]
            break;
 8014b6e:	e01a      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b70:	bf00      	nop
 8014b72:	e018      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b74:	bf00      	nop
 8014b76:	e016      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b78:	bf00      	nop
 8014b7a:	e014      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b7c:	bf00      	nop
 8014b7e:	e012      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b80:	bf00      	nop
 8014b82:	e010      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b84:	bf00      	nop
 8014b86:	e00e      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b88:	bf00      	nop
 8014b8a:	e00c      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b8c:	bf00      	nop
 8014b8e:	e00a      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b90:	bf00      	nop
 8014b92:	e008      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b94:	bf00      	nop
 8014b96:	e006      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b98:	bf00      	nop
 8014b9a:	e004      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014b9c:	bf00      	nop
 8014b9e:	e002      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014ba0:	bf00      	nop
 8014ba2:	e000      	b.n	8014ba6 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014ba4:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8014ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ba8:	4618      	mov	r0, r3
 8014baa:	3718      	adds	r7, #24
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	20000e48 	.word	0x20000e48

08014bb4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b086      	sub	sp, #24
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014bbc:	2302      	movs	r3, #2
 8014bbe:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d101      	bne.n	8014bce <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014bca:	2303      	movs	r3, #3
 8014bcc:	e13a      	b.n	8014e44 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8014bce:	f7fc fca5 	bl	801151c <LoRaMacIsBusy>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d001      	beq.n	8014bdc <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014bd8:	2301      	movs	r3, #1
 8014bda:	e133      	b.n	8014e44 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014bdc:	f001 f90c 	bl	8015df8 <LoRaMacConfirmQueueIsFull>
 8014be0:	4603      	mov	r3, r0
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d001      	beq.n	8014bea <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8014be6:	2301      	movs	r3, #1
 8014be8:	e12c      	b.n	8014e44 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014bea:	f001 f8f9 	bl	8015de0 <LoRaMacConfirmQueueGetCnt>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d104      	bne.n	8014bfe <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014bf4:	2214      	movs	r2, #20
 8014bf6:	2100      	movs	r1, #0
 8014bf8:	4894      	ldr	r0, [pc, #592]	; (8014e4c <LoRaMacMlmeRequest+0x298>)
 8014bfa:	f004 fe7f 	bl	80198fc <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014bfe:	4b94      	ldr	r3, [pc, #592]	; (8014e50 <LoRaMacMlmeRequest+0x29c>)
 8014c00:	2201      	movs	r2, #1
 8014c02:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014c06:	4a92      	ldr	r2, [pc, #584]	; (8014e50 <LoRaMacMlmeRequest+0x29c>)
 8014c08:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014c0c:	f043 0304 	orr.w	r3, r3, #4
 8014c10:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	3b01      	subs	r3, #1
 8014c28:	2b0d      	cmp	r3, #13
 8014c2a:	f200 80e1 	bhi.w	8014df0 <LoRaMacMlmeRequest+0x23c>
 8014c2e:	a201      	add	r2, pc, #4	; (adr r2, 8014c34 <LoRaMacMlmeRequest+0x80>)
 8014c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c34:	08014c6d 	.word	0x08014c6d
 8014c38:	08014df1 	.word	0x08014df1
 8014c3c:	08014df1 	.word	0x08014df1
 8014c40:	08014df1 	.word	0x08014df1
 8014c44:	08014ce5 	.word	0x08014ce5
 8014c48:	08014d03 	.word	0x08014d03
 8014c4c:	08014d13 	.word	0x08014d13
 8014c50:	08014df1 	.word	0x08014df1
 8014c54:	08014df1 	.word	0x08014df1
 8014c58:	08014d2f 	.word	0x08014d2f
 8014c5c:	08014df1 	.word	0x08014df1
 8014c60:	08014dc5 	.word	0x08014dc5
 8014c64:	08014d65 	.word	0x08014d65
 8014c68:	08014da7 	.word	0x08014da7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014c6c:	4b78      	ldr	r3, [pc, #480]	; (8014e50 <LoRaMacMlmeRequest+0x29c>)
 8014c6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014c72:	f003 0320 	and.w	r3, r3, #32
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d001      	beq.n	8014c7e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e0e2      	b.n	8014e44 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8014c7e:	2000      	movs	r0, #0
 8014c80:	f7fe f95c 	bl	8012f3c <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014c84:	4b73      	ldr	r3, [pc, #460]	; (8014e54 <LoRaMacMlmeRequest+0x2a0>)
 8014c86:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	795b      	ldrb	r3, [r3, #5]
 8014c8e:	b25b      	sxtb	r3, r3
 8014c90:	2200      	movs	r2, #0
 8014c92:	4619      	mov	r1, r3
 8014c94:	f002 fc00 	bl	8017498 <RegionAlternateDr>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	461a      	mov	r2, r3
 8014c9c:	4b6d      	ldr	r3, [pc, #436]	; (8014e54 <LoRaMacMlmeRequest+0x2a0>)
 8014c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014ca8:	4b6a      	ldr	r3, [pc, #424]	; (8014e54 <LoRaMacMlmeRequest+0x2a0>)
 8014caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014cae:	2307      	movs	r3, #7
 8014cb0:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8014cb2:	20ff      	movs	r0, #255	; 0xff
 8014cb4:	f7fd fec0 	bl	8012a38 <SendReJoinReq>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8014cbc:	7dfb      	ldrb	r3, [r7, #23]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f000 8098 	beq.w	8014df4 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014cc4:	4b63      	ldr	r3, [pc, #396]	; (8014e54 <LoRaMacMlmeRequest+0x2a0>)
 8014cc6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	795b      	ldrb	r3, [r3, #5]
 8014cce:	b25b      	sxtb	r3, r3
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	4619      	mov	r1, r3
 8014cd4:	f002 fbe0 	bl	8017498 <RegionAlternateDr>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	461a      	mov	r2, r3
 8014cdc:	4b5d      	ldr	r3, [pc, #372]	; (8014e54 <LoRaMacMlmeRequest+0x2a0>)
 8014cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014ce2:	e087      	b.n	8014df4 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014ce8:	f107 030c 	add.w	r3, r7, #12
 8014cec:	2200      	movs	r2, #0
 8014cee:	4619      	mov	r1, r3
 8014cf0:	2002      	movs	r0, #2
 8014cf2:	f000 fcd1 	bl	8015698 <LoRaMacCommandsAddCmd>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d07d      	beq.n	8014df8 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014cfc:	2313      	movs	r3, #19
 8014cfe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d00:	e07a      	b.n	8014df8 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	889b      	ldrh	r3, [r3, #4]
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7fe fc7a 	bl	8013600 <SetTxContinuousWave>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8014d10:	e079      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	8898      	ldrh	r0, [r3, #4]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6899      	ldr	r1, [r3, #8]
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	461a      	mov	r2, r3
 8014d24:	f7fe fca2 	bl	801366c <SetTxContinuousWave1>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	75fb      	strb	r3, [r7, #23]
            break;
 8014d2c:	e06b      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014d32:	f107 0308 	add.w	r3, r7, #8
 8014d36:	4619      	mov	r1, r3
 8014d38:	200d      	movs	r0, #13
 8014d3a:	f000 fd2d 	bl	8015798 <LoRaMacCommandsGetCmd>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d102      	bne.n	8014d4a <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8014d44:	2300      	movs	r3, #0
 8014d46:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014d48:	e058      	b.n	8014dfc <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014d4a:	f107 030c 	add.w	r3, r7, #12
 8014d4e:	2200      	movs	r2, #0
 8014d50:	4619      	mov	r1, r3
 8014d52:	200d      	movs	r0, #13
 8014d54:	f000 fca0 	bl	8015698 <LoRaMacCommandsAddCmd>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d04e      	beq.n	8014dfc <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014d5e:	2313      	movs	r3, #19
 8014d60:	75fb      	strb	r3, [r7, #23]
            break;
 8014d62:	e04b      	b.n	8014dfc <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014d64:	4b3b      	ldr	r3, [pc, #236]	; (8014e54 <LoRaMacMlmeRequest+0x2a0>)
 8014d66:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d148      	bne.n	8014e00 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	791b      	ldrb	r3, [r3, #4]
 8014d72:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	791b      	ldrb	r3, [r3, #4]
 8014d78:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f000 faef 	bl	8015362 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014d84:	7dbb      	ldrb	r3, [r7, #22]
 8014d86:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8014d88:	2300      	movs	r3, #0
 8014d8a:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014d8c:	f107 030c 	add.w	r3, r7, #12
 8014d90:	2201      	movs	r2, #1
 8014d92:	4619      	mov	r1, r3
 8014d94:	2010      	movs	r0, #16
 8014d96:	f000 fc7f 	bl	8015698 <LoRaMacCommandsAddCmd>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d02f      	beq.n	8014e00 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014da0:	2313      	movs	r3, #19
 8014da2:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8014da4:	e02c      	b.n	8014e00 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014da6:	2300      	movs	r3, #0
 8014da8:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014daa:	f107 030c 	add.w	r3, r7, #12
 8014dae:	2200      	movs	r2, #0
 8014db0:	4619      	mov	r1, r3
 8014db2:	2012      	movs	r0, #18
 8014db4:	f000 fc70 	bl	8015698 <LoRaMacCommandsAddCmd>
 8014db8:	4603      	mov	r3, r0
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d022      	beq.n	8014e04 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014dbe:	2313      	movs	r3, #19
 8014dc0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014dc2:	e01f      	b.n	8014e04 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014dc4:	2301      	movs	r3, #1
 8014dc6:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014dc8:	f000 fa81 	bl	80152ce <LoRaMacClassBIsAcquisitionInProgress>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	f083 0301 	eor.w	r3, r3, #1
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d008      	beq.n	8014dea <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014dd8:	2000      	movs	r0, #0
 8014dda:	f000 fa5a 	bl	8015292 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014dde:	2000      	movs	r0, #0
 8014de0:	f000 fa7c 	bl	80152dc <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014de4:	2300      	movs	r3, #0
 8014de6:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014de8:	e00d      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8014dea:	2301      	movs	r3, #1
 8014dec:	75fb      	strb	r3, [r7, #23]
            break;
 8014dee:	e00a      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8014df0:	bf00      	nop
 8014df2:	e008      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
            break;
 8014df4:	bf00      	nop
 8014df6:	e006      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
            break;
 8014df8:	bf00      	nop
 8014dfa:	e004      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
            break;
 8014dfc:	bf00      	nop
 8014dfe:	e002      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
            break;
 8014e00:	bf00      	nop
 8014e02:	e000      	b.n	8014e06 <LoRaMacMlmeRequest+0x252>
            break;
 8014e04:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014e06:	4b12      	ldr	r3, [pc, #72]	; (8014e50 <LoRaMacMlmeRequest+0x29c>)
 8014e08:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014e10:	7dfb      	ldrb	r3, [r7, #23]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d010      	beq.n	8014e38 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014e16:	f000 ffe3 	bl	8015de0 <LoRaMacConfirmQueueGetCnt>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d110      	bne.n	8014e42 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8014e20:	4b0b      	ldr	r3, [pc, #44]	; (8014e50 <LoRaMacMlmeRequest+0x29c>)
 8014e22:	2200      	movs	r2, #0
 8014e24:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014e28:	4a09      	ldr	r2, [pc, #36]	; (8014e50 <LoRaMacMlmeRequest+0x29c>)
 8014e2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014e2e:	f36f 0382 	bfc	r3, #2, #1
 8014e32:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8014e36:	e004      	b.n	8014e42 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014e38:	f107 0310 	add.w	r3, r7, #16
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f000 fe7b 	bl	8015b38 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3718      	adds	r7, #24
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	20000d88 	.word	0x20000d88
 8014e50:	20000940 	.word	0x20000940
 8014e54:	20000e48 	.word	0x20000e48

08014e58 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b08c      	sub	sp, #48	; 0x30
 8014e5c:	af02      	add	r7, sp, #8
 8014e5e:	6078      	str	r0, [r7, #4]
 8014e60:	460b      	mov	r3, r1
 8014e62:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014e64:	2302      	movs	r3, #2
 8014e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 8014e70:	2300      	movs	r3, #0
 8014e72:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014e74:	2300      	movs	r3, #0
 8014e76:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d101      	bne.n	8014e86 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014e82:	2303      	movs	r3, #3
 8014e84:	e0d4      	b.n	8015030 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8014e86:	f7fc fb49 	bl	801151c <LoRaMacIsBusy>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d001      	beq.n	8014e94 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8014e90:	2301      	movs	r3, #1
 8014e92:	e0cd      	b.n	8015030 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8014e94:	2300      	movs	r3, #0
 8014e96:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014e98:	2214      	movs	r2, #20
 8014e9a:	2100      	movs	r1, #0
 8014e9c:	4866      	ldr	r0, [pc, #408]	; (8015038 <LoRaMacMcpsRequest+0x1e0>)
 8014e9e:	f004 fd2d 	bl	80198fc <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014ea2:	4b66      	ldr	r3, [pc, #408]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014eaa:	4b64      	ldr	r3, [pc, #400]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8014eac:	2201      	movs	r2, #1
 8014eae:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	2b03      	cmp	r3, #3
 8014eb8:	d03d      	beq.n	8014f36 <LoRaMacMcpsRequest+0xde>
 8014eba:	2b03      	cmp	r3, #3
 8014ebc:	dc4f      	bgt.n	8014f5e <LoRaMacMcpsRequest+0x106>
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d002      	beq.n	8014ec8 <LoRaMacMcpsRequest+0x70>
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d019      	beq.n	8014efa <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014ec6:	e04a      	b.n	8014f5e <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8014ec8:	2301      	movs	r3, #1
 8014eca:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014ecc:	4b5b      	ldr	r3, [pc, #364]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8014ece:	2201      	movs	r2, #1
 8014ed0:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014ed4:	7b3b      	ldrb	r3, [r7, #12]
 8014ed6:	2202      	movs	r2, #2
 8014ed8:	f362 1347 	bfi	r3, r2, #5, #3
 8014edc:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	791b      	ldrb	r3, [r3, #4]
 8014ee2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	689b      	ldr	r3, [r3, #8]
 8014eea:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	899b      	ldrh	r3, [r3, #12]
 8014ef0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	7b9b      	ldrb	r3, [r3, #14]
 8014ef6:	777b      	strb	r3, [r7, #29]
            break;
 8014ef8:	e032      	b.n	8014f60 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014efa:	2301      	movs	r3, #1
 8014efc:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	7bdb      	ldrb	r3, [r3, #15]
 8014f02:	2b08      	cmp	r3, #8
 8014f04:	bf28      	it	cs
 8014f06:	2308      	movcs	r3, #8
 8014f08:	b2da      	uxtb	r2, r3
 8014f0a:	4b4c      	ldr	r3, [pc, #304]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8014f0c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014f10:	7b3b      	ldrb	r3, [r7, #12]
 8014f12:	2204      	movs	r2, #4
 8014f14:	f362 1347 	bfi	r3, r2, #5, #3
 8014f18:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	791b      	ldrb	r3, [r3, #4]
 8014f1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	689b      	ldr	r3, [r3, #8]
 8014f26:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	899b      	ldrh	r3, [r3, #12]
 8014f2c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	7b9b      	ldrb	r3, [r3, #14]
 8014f32:	777b      	strb	r3, [r7, #29]
            break;
 8014f34:	e014      	b.n	8014f60 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8014f36:	2301      	movs	r3, #1
 8014f38:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014f3a:	4b40      	ldr	r3, [pc, #256]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014f42:	7b3b      	ldrb	r3, [r7, #12]
 8014f44:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8014f48:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	685b      	ldr	r3, [r3, #4]
 8014f4e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	891b      	ldrh	r3, [r3, #8]
 8014f54:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	7a9b      	ldrb	r3, [r3, #10]
 8014f5a:	777b      	strb	r3, [r7, #29]
            break;
 8014f5c:	e000      	b.n	8014f60 <LoRaMacMcpsRequest+0x108>
            break;
 8014f5e:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014f60:	2302      	movs	r3, #2
 8014f62:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f64:	4b36      	ldr	r3, [pc, #216]	; (8015040 <LoRaMacMcpsRequest+0x1e8>)
 8014f66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f6a:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014f6c:	4b34      	ldr	r3, [pc, #208]	; (8015040 <LoRaMacMcpsRequest+0x1e8>)
 8014f6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f72:	f107 0214 	add.w	r2, r7, #20
 8014f76:	4611      	mov	r1, r2
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f002 f96a 	bl	8017252 <RegionGetPhyParam>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	b25b      	sxtb	r3, r3
 8014f86:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8014f8a:	4293      	cmp	r3, r2
 8014f8c:	bfb8      	it	lt
 8014f8e:	4613      	movlt	r3, r2
 8014f90:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8014f92:	7f3b      	ldrb	r3, [r7, #28]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d044      	beq.n	8015022 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8014f98:	4b29      	ldr	r3, [pc, #164]	; (8015040 <LoRaMacMcpsRequest+0x1e8>)
 8014f9a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014f9e:	f083 0301 	eor.w	r3, r3, #1
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d019      	beq.n	8014fdc <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8014fa8:	7f7b      	ldrb	r3, [r7, #29]
 8014faa:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014fac:	4b24      	ldr	r3, [pc, #144]	; (8015040 <LoRaMacMcpsRequest+0x1e8>)
 8014fae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014fb2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014fb4:	4b22      	ldr	r3, [pc, #136]	; (8015040 <LoRaMacMcpsRequest+0x1e8>)
 8014fb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fba:	f107 0108 	add.w	r1, r7, #8
 8014fbe:	2205      	movs	r2, #5
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f002 f981 	bl	80172c8 <RegionVerify>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d005      	beq.n	8014fd8 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014fcc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fd0:	4b1b      	ldr	r3, [pc, #108]	; (8015040 <LoRaMacMcpsRequest+0x1e8>)
 8014fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014fd6:	e001      	b.n	8014fdc <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014fd8:	2303      	movs	r3, #3
 8014fda:	e029      	b.n	8015030 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014fdc:	8bfa      	ldrh	r2, [r7, #30]
 8014fde:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8014fe2:	f107 000c 	add.w	r0, r7, #12
 8014fe6:	78fb      	ldrb	r3, [r7, #3]
 8014fe8:	9300      	str	r3, [sp, #0]
 8014fea:	4613      	mov	r3, r2
 8014fec:	6a3a      	ldr	r2, [r7, #32]
 8014fee:	f7fd fc45 	bl	801287c <Send>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8014ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d10c      	bne.n	801501a <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	781a      	ldrb	r2, [r3, #0]
 8015004:	4b0d      	ldr	r3, [pc, #52]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8015006:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801500a:	4a0c      	ldr	r2, [pc, #48]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 801500c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015010:	f043 0301 	orr.w	r3, r3, #1
 8015014:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015018:	e003      	b.n	8015022 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801501a:	4b08      	ldr	r3, [pc, #32]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 801501c:	2200      	movs	r2, #0
 801501e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015022:	4b06      	ldr	r3, [pc, #24]	; (801503c <LoRaMacMcpsRequest+0x1e4>)
 8015024:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	611a      	str	r2, [r3, #16]

    return status;
 801502c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015030:	4618      	mov	r0, r3
 8015032:	3728      	adds	r7, #40	; 0x28
 8015034:	46bd      	mov	sp, r7
 8015036:	bd80      	pop	{r7, pc}
 8015038:	20000d74 	.word	0x20000d74
 801503c:	20000940 	.word	0x20000940
 8015040:	20000e48 	.word	0x20000e48

08015044 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	4603      	mov	r3, r0
 801504c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801504e:	79fb      	ldrb	r3, [r7, #7]
 8015050:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015052:	4b0d      	ldr	r3, [pc, #52]	; (8015088 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015054:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015058:	f107 010c 	add.w	r1, r7, #12
 801505c:	220f      	movs	r2, #15
 801505e:	4618      	mov	r0, r3
 8015060:	f002 f932 	bl	80172c8 <RegionVerify>
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	d00a      	beq.n	8015080 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801506a:	4a07      	ldr	r2, [pc, #28]	; (8015088 <LoRaMacTestSetDutyCycleOn+0x44>)
 801506c:	79fb      	ldrb	r3, [r7, #7]
 801506e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015072:	4a06      	ldr	r2, [pc, #24]	; (801508c <LoRaMacTestSetDutyCycleOn+0x48>)
 8015074:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015078:	f043 0320 	orr.w	r3, r3, #32
 801507c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8015080:	bf00      	nop
 8015082:	3710      	adds	r7, #16
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	20000e48 	.word	0x20000e48
 801508c:	20000940 	.word	0x20000940

08015090 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015094:	f7fe ff6c 	bl	8013f70 <LoRaMacStop>
 8015098:	4603      	mov	r3, r0
 801509a:	2b00      	cmp	r3, #0
 801509c:	d115      	bne.n	80150ca <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801509e:	480c      	ldr	r0, [pc, #48]	; (80150d0 <LoRaMacDeInitialization+0x40>)
 80150a0:	f008 fd8c 	bl	801dbbc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80150a4:	480b      	ldr	r0, [pc, #44]	; (80150d4 <LoRaMacDeInitialization+0x44>)
 80150a6:	f008 fd89 	bl	801dbbc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80150aa:	480b      	ldr	r0, [pc, #44]	; (80150d8 <LoRaMacDeInitialization+0x48>)
 80150ac:	f008 fd86 	bl	801dbbc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 80150b0:	480a      	ldr	r0, [pc, #40]	; (80150dc <LoRaMacDeInitialization+0x4c>)
 80150b2:	f008 fd83 	bl	801dbbc <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80150b6:	f000 f95e 	bl	8015376 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80150ba:	2000      	movs	r0, #0
 80150bc:	f7fd ff3e 	bl	8012f3c <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80150c0:	4b07      	ldr	r3, [pc, #28]	; (80150e0 <LoRaMacDeInitialization+0x50>)
 80150c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c4:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	e000      	b.n	80150cc <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80150ca:	2301      	movs	r3, #1
    }
}
 80150cc:	4618      	mov	r0, r3
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	20000ca8 	.word	0x20000ca8
 80150d4:	20000cc0 	.word	0x20000cc0
 80150d8:	20000cd8 	.word	0x20000cd8
 80150dc:	20000d34 	.word	0x20000d34
 80150e0:	0801f460 	.word	0x0801f460

080150e4 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b08c      	sub	sp, #48	; 0x30
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60f8      	str	r0, [r7, #12]
 80150ec:	60b9      	str	r1, [r7, #8]
 80150ee:	607a      	str	r2, [r7, #4]
 80150f0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80150f2:	2300      	movs	r3, #0
 80150f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	7c1b      	ldrb	r3, [r3, #16]
 80150fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	7c5b      	ldrb	r3, [r3, #17]
 8015104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	689a      	ldr	r2, [r3, #8]
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	795b      	ldrb	r3, [r3, #5]
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 808b 	beq.w	8015230 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801511a:	2302      	movs	r3, #2
 801511c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	7c9b      	ldrb	r3, [r3, #18]
 8015124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	7cdb      	ldrb	r3, [r3, #19]
 801512c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015130:	4611      	mov	r1, r2
 8015132:	4618      	mov	r0, r3
 8015134:	f002 f88d 	bl	8017252 <RegionGetPhyParam>
 8015138:	4603      	mov	r3, r0
 801513a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801513c:	6a3b      	ldr	r3, [r7, #32]
 801513e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8015142:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 8015146:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801514a:	4293      	cmp	r3, r2
 801514c:	bfb8      	it	lt
 801514e:	4613      	movlt	r3, r2
 8015150:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015154:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015158:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801515c:	429a      	cmp	r2, r3
 801515e:	d106      	bne.n	801516e <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	2200      	movs	r2, #0
 8015164:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8015166:	2300      	movs	r3, #0
 8015168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801516c:	e060      	b.n	8015230 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	689b      	ldr	r3, [r3, #8]
 8015172:	68fa      	ldr	r2, [r7, #12]
 8015174:	8992      	ldrh	r2, [r2, #12]
 8015176:	4293      	cmp	r3, r2
 8015178:	d303      	bcc.n	8015182 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801517a:	2301      	movs	r3, #1
 801517c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015180:	e002      	b.n	8015188 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8015182:	2300      	movs	r3, #0
 8015184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	689b      	ldr	r3, [r3, #8]
 801518c:	68fa      	ldr	r2, [r7, #12]
 801518e:	8992      	ldrh	r2, [r2, #12]
 8015190:	4611      	mov	r1, r2
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	89d2      	ldrh	r2, [r2, #14]
 8015196:	440a      	add	r2, r1
 8015198:	4293      	cmp	r3, r2
 801519a:	d349      	bcc.n	8015230 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801519c:	2308      	movs	r3, #8
 801519e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	7cdb      	ldrb	r3, [r3, #19]
 80151a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80151aa:	4611      	mov	r1, r2
 80151ac:	4618      	mov	r0, r3
 80151ae:	f002 f850 	bl	8017252 <RegionGetPhyParam>
 80151b2:	4603      	mov	r3, r0
 80151b4:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80151b6:	6a3b      	ldr	r3, [r7, #32]
 80151b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	689b      	ldr	r3, [r3, #8]
 80151c0:	68fa      	ldr	r2, [r7, #12]
 80151c2:	89d2      	ldrh	r2, [r2, #14]
 80151c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80151c8:	fb01 f202 	mul.w	r2, r1, r2
 80151cc:	1a9b      	subs	r3, r3, r2
 80151ce:	2b01      	cmp	r3, #1
 80151d0:	d12e      	bne.n	8015230 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80151d2:	2322      	movs	r3, #34	; 0x22
 80151d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80151d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80151dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	7c9b      	ldrb	r3, [r3, #18]
 80151e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	7cdb      	ldrb	r3, [r3, #19]
 80151ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80151f0:	4611      	mov	r1, r2
 80151f2:	4618      	mov	r0, r3
 80151f4:	f002 f82d 	bl	8017252 <RegionGetPhyParam>
 80151f8:	4603      	mov	r3, r0
 80151fa:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 80151fc:	6a3b      	ldr	r3, [r7, #32]
 80151fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8015202:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015206:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801520a:	429a      	cmp	r2, r3
 801520c:	d110      	bne.n	8015230 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801520e:	2300      	movs	r3, #0
 8015210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	791b      	ldrb	r3, [r3, #4]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d009      	beq.n	8015230 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801521c:	2302      	movs	r3, #2
 801521e:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	7cdb      	ldrb	r3, [r3, #19]
 8015224:	f107 0214 	add.w	r2, r7, #20
 8015228:	4611      	mov	r1, r2
 801522a:	4618      	mov	r0, r3
 801522c:	f002 f83a 	bl	80172a4 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015236:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801523e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015244:	4618      	mov	r0, r3
 8015246:	3730      	adds	r7, #48	; 0x30
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b084      	sub	sp, #16
 8015250:	af00      	add	r7, sp, #0
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
 8015258:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	789b      	ldrb	r3, [r3, #2]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d107      	bne.n	8015272 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	687a      	ldr	r2, [r7, #4]
 8015266:	68b9      	ldr	r1, [r7, #8]
 8015268:	68f8      	ldr	r0, [r7, #12]
 801526a:	f7ff ff3b 	bl	80150e4 <CalcNextV10X>
 801526e:	4603      	mov	r3, r0
 8015270:	e000      	b.n	8015274 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8015272:	2300      	movs	r3, #0
}
 8015274:	4618      	mov	r0, r3
 8015276:	3710      	adds	r7, #16
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801527c:	b480      	push	{r7}
 801527e:	b085      	sub	sp, #20
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015288:	bf00      	nop
 801528a:	3714      	adds	r7, #20
 801528c:	46bd      	mov	sp, r7
 801528e:	bc80      	pop	{r7}
 8015290:	4770      	bx	lr

08015292 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8015292:	b480      	push	{r7}
 8015294:	b083      	sub	sp, #12
 8015296:	af00      	add	r7, sp, #0
 8015298:	4603      	mov	r3, r0
 801529a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801529c:	bf00      	nop
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bc80      	pop	{r7}
 80152a4:	4770      	bx	lr

080152a6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80152a6:	b480      	push	{r7}
 80152a8:	b083      	sub	sp, #12
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	4603      	mov	r3, r0
 80152ae:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152b0:	bf00      	nop
 80152b2:	370c      	adds	r7, #12
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bc80      	pop	{r7}
 80152b8:	4770      	bx	lr

080152ba <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80152ba:	b480      	push	{r7}
 80152bc:	b083      	sub	sp, #12
 80152be:	af00      	add	r7, sp, #0
 80152c0:	4603      	mov	r3, r0
 80152c2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152c4:	bf00      	nop
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bc80      	pop	{r7}
 80152cc:	4770      	bx	lr

080152ce <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80152ce:	b480      	push	{r7}
 80152d0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80152d2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152d4:	4618      	mov	r0, r3
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bc80      	pop	{r7}
 80152da:	4770      	bx	lr

080152dc <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152e4:	bf00      	nop
 80152e6:	370c      	adds	r7, #12
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bc80      	pop	{r7}
 80152ec:	4770      	bx	lr

080152ee <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80152ee:	b480      	push	{r7}
 80152f0:	b083      	sub	sp, #12
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80152f6:	bf00      	nop
 80152f8:	370c      	adds	r7, #12
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bc80      	pop	{r7}
 80152fe:	4770      	bx	lr

08015300 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015300:	b480      	push	{r7}
 8015302:	b083      	sub	sp, #12
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015308:	bf00      	nop
 801530a:	370c      	adds	r7, #12
 801530c:	46bd      	mov	sp, r7
 801530e:	bc80      	pop	{r7}
 8015310:	4770      	bx	lr

08015312 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015312:	b480      	push	{r7}
 8015314:	b083      	sub	sp, #12
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
 801531a:	460b      	mov	r3, r1
 801531c:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 801531e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015320:	4618      	mov	r0, r3
 8015322:	370c      	adds	r7, #12
 8015324:	46bd      	mov	sp, r7
 8015326:	bc80      	pop	{r7}
 8015328:	4770      	bx	lr

0801532a <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801532a:	b480      	push	{r7}
 801532c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801532e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015330:	4618      	mov	r0, r3
 8015332:	46bd      	mov	sp, r7
 8015334:	bc80      	pop	{r7}
 8015336:	4770      	bx	lr

08015338 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015338:	b480      	push	{r7}
 801533a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801533c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801533e:	4618      	mov	r0, r3
 8015340:	46bd      	mov	sp, r7
 8015342:	bc80      	pop	{r7}
 8015344:	4770      	bx	lr

08015346 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015346:	b480      	push	{r7}
 8015348:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801534a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801534c:	4618      	mov	r0, r3
 801534e:	46bd      	mov	sp, r7
 8015350:	bc80      	pop	{r7}
 8015352:	4770      	bx	lr

08015354 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015354:	b480      	push	{r7}
 8015356:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015358:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801535a:	4618      	mov	r0, r3
 801535c:	46bd      	mov	sp, r7
 801535e:	bc80      	pop	{r7}
 8015360:	4770      	bx	lr

08015362 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015362:	b480      	push	{r7}
 8015364:	b083      	sub	sp, #12
 8015366:	af00      	add	r7, sp, #0
 8015368:	4603      	mov	r3, r0
 801536a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801536c:	bf00      	nop
 801536e:	370c      	adds	r7, #12
 8015370:	46bd      	mov	sp, r7
 8015372:	bc80      	pop	{r7}
 8015374:	4770      	bx	lr

08015376 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015376:	b480      	push	{r7}
 8015378:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801537a:	bf00      	nop
 801537c:	46bd      	mov	sp, r7
 801537e:	bc80      	pop	{r7}
 8015380:	4770      	bx	lr

08015382 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015382:	b480      	push	{r7}
 8015384:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015386:	bf00      	nop
 8015388:	46bd      	mov	sp, r7
 801538a:	bc80      	pop	{r7}
 801538c:	4770      	bx	lr

0801538e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801538e:	b480      	push	{r7}
 8015390:	b083      	sub	sp, #12
 8015392:	af00      	add	r7, sp, #0
 8015394:	4603      	mov	r3, r0
 8015396:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015398:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801539a:	4618      	mov	r0, r3
 801539c:	370c      	adds	r7, #12
 801539e:	46bd      	mov	sp, r7
 80153a0:	bc80      	pop	{r7}
 80153a2:	4770      	bx	lr

080153a4 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80153a4:	b480      	push	{r7}
 80153a6:	b083      	sub	sp, #12
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153ac:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	370c      	adds	r7, #12
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bc80      	pop	{r7}
 80153b6:	4770      	bx	lr

080153b8 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80153b8:	b480      	push	{r7}
 80153ba:	b083      	sub	sp, #12
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153c0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	370c      	adds	r7, #12
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bc80      	pop	{r7}
 80153ca:	4770      	bx	lr

080153cc <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80153cc:	b480      	push	{r7}
 80153ce:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153d0:	bf00      	nop
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bc80      	pop	{r7}
 80153d6:	4770      	bx	lr

080153d8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80153d8:	b480      	push	{r7}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
 80153de:	4603      	mov	r3, r0
 80153e0:	6039      	str	r1, [r7, #0]
 80153e2:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80153e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	370c      	adds	r7, #12
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bc80      	pop	{r7}
 80153ee:	4770      	bx	lr

080153f0 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80153f0:	b480      	push	{r7}
 80153f2:	b083      	sub	sp, #12
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	4603      	mov	r3, r0
 80153f8:	603a      	str	r2, [r7, #0]
 80153fa:	80fb      	strh	r3, [r7, #6]
 80153fc:	460b      	mov	r3, r1
 80153fe:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015400:	bf00      	nop
 8015402:	370c      	adds	r7, #12
 8015404:	46bd      	mov	sp, r7
 8015406:	bc80      	pop	{r7}
 8015408:	4770      	bx	lr

0801540a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801540a:	b480      	push	{r7}
 801540c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801540e:	bf00      	nop
 8015410:	46bd      	mov	sp, r7
 8015412:	bc80      	pop	{r7}
 8015414:	4770      	bx	lr

08015416 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015416:	b480      	push	{r7}
 8015418:	b083      	sub	sp, #12
 801541a:	af00      	add	r7, sp, #0
 801541c:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 801541e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015420:	4618      	mov	r0, r3
 8015422:	370c      	adds	r7, #12
 8015424:	46bd      	mov	sp, r7
 8015426:	bc80      	pop	{r7}
 8015428:	4770      	bx	lr

0801542a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801542a:	b480      	push	{r7}
 801542c:	b083      	sub	sp, #12
 801542e:	af00      	add	r7, sp, #0
 8015430:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015432:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015434:	4618      	mov	r0, r3
 8015436:	370c      	adds	r7, #12
 8015438:	46bd      	mov	sp, r7
 801543a:	bc80      	pop	{r7}
 801543c:	4770      	bx	lr

0801543e <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801543e:	b480      	push	{r7}
 8015440:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015442:	bf00      	nop
 8015444:	46bd      	mov	sp, r7
 8015446:	bc80      	pop	{r7}
 8015448:	4770      	bx	lr

0801544a <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801544a:	b480      	push	{r7}
 801544c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801544e:	bf00      	nop
 8015450:	46bd      	mov	sp, r7
 8015452:	bc80      	pop	{r7}
 8015454:	4770      	bx	lr

08015456 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015456:	b480      	push	{r7}
 8015458:	b085      	sub	sp, #20
 801545a:	af00      	add	r7, sp, #0
 801545c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015462:	2300      	movs	r3, #0
 8015464:	81fb      	strh	r3, [r7, #14]
 8015466:	e00a      	b.n	801547e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015468:	89fb      	ldrh	r3, [r7, #14]
 801546a:	68ba      	ldr	r2, [r7, #8]
 801546c:	4413      	add	r3, r2
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d001      	beq.n	8015478 <IsSlotFree+0x22>
        {
            return false;
 8015474:	2300      	movs	r3, #0
 8015476:	e006      	b.n	8015486 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015478:	89fb      	ldrh	r3, [r7, #14]
 801547a:	3301      	adds	r3, #1
 801547c:	81fb      	strh	r3, [r7, #14]
 801547e:	89fb      	ldrh	r3, [r7, #14]
 8015480:	2b0f      	cmp	r3, #15
 8015482:	d9f1      	bls.n	8015468 <IsSlotFree+0x12>
        }
    }
    return true;
 8015484:	2301      	movs	r3, #1
}
 8015486:	4618      	mov	r0, r3
 8015488:	3714      	adds	r7, #20
 801548a:	46bd      	mov	sp, r7
 801548c:	bc80      	pop	{r7}
 801548e:	4770      	bx	lr

08015490 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015496:	2300      	movs	r3, #0
 8015498:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801549a:	e007      	b.n	80154ac <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801549c:	79fb      	ldrb	r3, [r7, #7]
 801549e:	3301      	adds	r3, #1
 80154a0:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80154a2:	79fb      	ldrb	r3, [r7, #7]
 80154a4:	2b0f      	cmp	r3, #15
 80154a6:	d101      	bne.n	80154ac <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80154a8:	2300      	movs	r3, #0
 80154aa:	e012      	b.n	80154d2 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80154ac:	79fb      	ldrb	r3, [r7, #7]
 80154ae:	011b      	lsls	r3, r3, #4
 80154b0:	3308      	adds	r3, #8
 80154b2:	4a0a      	ldr	r2, [pc, #40]	; (80154dc <MallocNewMacCommandSlot+0x4c>)
 80154b4:	4413      	add	r3, r2
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff ffcd 	bl	8015456 <IsSlotFree>
 80154bc:	4603      	mov	r3, r0
 80154be:	f083 0301 	eor.w	r3, r3, #1
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d1e9      	bne.n	801549c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80154c8:	79fb      	ldrb	r3, [r7, #7]
 80154ca:	011b      	lsls	r3, r3, #4
 80154cc:	3308      	adds	r3, #8
 80154ce:	4a03      	ldr	r2, [pc, #12]	; (80154dc <MallocNewMacCommandSlot+0x4c>)
 80154d0:	4413      	add	r3, r2
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3708      	adds	r7, #8
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	200015c8 	.word	0x200015c8

080154e0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b082      	sub	sp, #8
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d101      	bne.n	80154f2 <FreeMacCommandSlot+0x12>
    {
        return false;
 80154ee:	2300      	movs	r3, #0
 80154f0:	e005      	b.n	80154fe <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80154f2:	2210      	movs	r2, #16
 80154f4:	2100      	movs	r1, #0
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f004 fa00 	bl	80198fc <memset1>

    return true;
 80154fc:	2301      	movs	r3, #1
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3708      	adds	r7, #8
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}

08015506 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015506:	b480      	push	{r7}
 8015508:	b083      	sub	sp, #12
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d101      	bne.n	8015518 <LinkedListInit+0x12>
    {
        return false;
 8015514:	2300      	movs	r3, #0
 8015516:	e006      	b.n	8015526 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2200      	movs	r2, #0
 801551c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2200      	movs	r2, #0
 8015522:	605a      	str	r2, [r3, #4]

    return true;
 8015524:	2301      	movs	r3, #1
}
 8015526:	4618      	mov	r0, r3
 8015528:	370c      	adds	r7, #12
 801552a:	46bd      	mov	sp, r7
 801552c:	bc80      	pop	{r7}
 801552e:	4770      	bx	lr

08015530 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015530:	b480      	push	{r7}
 8015532:	b083      	sub	sp, #12
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d002      	beq.n	8015546 <LinkedListAdd+0x16>
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d101      	bne.n	801554a <LinkedListAdd+0x1a>
    {
        return false;
 8015546:	2300      	movs	r3, #0
 8015548:	e015      	b.n	8015576 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d102      	bne.n	8015558 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	683a      	ldr	r2, [r7, #0]
 8015556:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	685b      	ldr	r3, [r3, #4]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d003      	beq.n	8015568 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	685b      	ldr	r3, [r3, #4]
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	2200      	movs	r2, #0
 801556c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	683a      	ldr	r2, [r7, #0]
 8015572:	605a      	str	r2, [r3, #4]

    return true;
 8015574:	2301      	movs	r3, #1
}
 8015576:	4618      	mov	r0, r3
 8015578:	370c      	adds	r7, #12
 801557a:	46bd      	mov	sp, r7
 801557c:	bc80      	pop	{r7}
 801557e:	4770      	bx	lr

08015580 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015580:	b480      	push	{r7}
 8015582:	b085      	sub	sp, #20
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d002      	beq.n	8015596 <LinkedListGetPrevious+0x16>
 8015590:	683b      	ldr	r3, [r7, #0]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d101      	bne.n	801559a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015596:	2300      	movs	r3, #0
 8015598:	e016      	b.n	80155c8 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80155a0:	683a      	ldr	r2, [r7, #0]
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d00c      	beq.n	80155c2 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80155a8:	e002      	b.n	80155b0 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d007      	beq.n	80155c6 <LinkedListGetPrevious+0x46>
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	683a      	ldr	r2, [r7, #0]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d1f4      	bne.n	80155aa <LinkedListGetPrevious+0x2a>
 80155c0:	e001      	b.n	80155c6 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80155c2:	2300      	movs	r3, #0
 80155c4:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80155c6:	68fb      	ldr	r3, [r7, #12]
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3714      	adds	r7, #20
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bc80      	pop	{r7}
 80155d0:	4770      	bx	lr

080155d2 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b084      	sub	sp, #16
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	6078      	str	r0, [r7, #4]
 80155da:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d002      	beq.n	80155e8 <LinkedListRemove+0x16>
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d101      	bne.n	80155ec <LinkedListRemove+0x1a>
    {
        return false;
 80155e8:	2300      	movs	r3, #0
 80155ea:	e020      	b.n	801562e <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80155ec:	6839      	ldr	r1, [r7, #0]
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f7ff ffc6 	bl	8015580 <LinkedListGetPrevious>
 80155f4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	683a      	ldr	r2, [r7, #0]
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d103      	bne.n	8015608 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	681a      	ldr	r2, [r3, #0]
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	683a      	ldr	r2, [r7, #0]
 801560e:	429a      	cmp	r2, r3
 8015610:	d102      	bne.n	8015618 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	68fa      	ldr	r2, [r7, #12]
 8015616:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d003      	beq.n	8015626 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	681a      	ldr	r2, [r3, #0]
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	2200      	movs	r2, #0
 801562a:	601a      	str	r2, [r3, #0]

    return true;
 801562c:	2301      	movs	r3, #1
}
 801562e:	4618      	mov	r0, r3
 8015630:	3710      	adds	r7, #16
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}

08015636 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015636:	b480      	push	{r7}
 8015638:	b083      	sub	sp, #12
 801563a:	af00      	add	r7, sp, #0
 801563c:	4603      	mov	r3, r0
 801563e:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015640:	79fb      	ldrb	r3, [r7, #7]
 8015642:	2b05      	cmp	r3, #5
 8015644:	d004      	beq.n	8015650 <IsSticky+0x1a>
 8015646:	2b05      	cmp	r3, #5
 8015648:	db04      	blt.n	8015654 <IsSticky+0x1e>
 801564a:	3b08      	subs	r3, #8
 801564c:	2b02      	cmp	r3, #2
 801564e:	d801      	bhi.n	8015654 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015650:	2301      	movs	r3, #1
 8015652:	e000      	b.n	8015656 <IsSticky+0x20>
        default:
            return false;
 8015654:	2300      	movs	r3, #0
    }
}
 8015656:	4618      	mov	r0, r3
 8015658:	370c      	adds	r7, #12
 801565a:	46bd      	mov	sp, r7
 801565c:	bc80      	pop	{r7}
 801565e:	4770      	bx	lr

08015660 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015660:	b480      	push	{r7}
 8015662:	b083      	sub	sp, #12
 8015664:	af00      	add	r7, sp, #0
 8015666:	4603      	mov	r3, r0
 8015668:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801566a:	2300      	movs	r3, #0
    }
}
 801566c:	4618      	mov	r0, r3
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	bc80      	pop	{r7}
 8015674:	4770      	bx	lr
	...

08015678 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015678:	b580      	push	{r7, lr}
 801567a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 801567c:	22fc      	movs	r2, #252	; 0xfc
 801567e:	2100      	movs	r1, #0
 8015680:	4804      	ldr	r0, [pc, #16]	; (8015694 <LoRaMacCommandsInit+0x1c>)
 8015682:	f004 f93b 	bl	80198fc <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015686:	4803      	ldr	r0, [pc, #12]	; (8015694 <LoRaMacCommandsInit+0x1c>)
 8015688:	f7ff ff3d 	bl	8015506 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 801568c:	2300      	movs	r3, #0
}
 801568e:	4618      	mov	r0, r3
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	200015c8 	.word	0x200015c8

08015698 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b086      	sub	sp, #24
 801569c:	af00      	add	r7, sp, #0
 801569e:	4603      	mov	r3, r0
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	607a      	str	r2, [r7, #4]
 80156a4:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d101      	bne.n	80156b0 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80156ac:	2301      	movs	r3, #1
 80156ae:	e03b      	b.n	8015728 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80156b0:	f7ff feee 	bl	8015490 <MallocNewMacCommandSlot>
 80156b4:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d101      	bne.n	80156c0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80156bc:	2302      	movs	r3, #2
 80156be:	e033      	b.n	8015728 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80156c0:	6979      	ldr	r1, [r7, #20]
 80156c2:	481b      	ldr	r0, [pc, #108]	; (8015730 <LoRaMacCommandsAddCmd+0x98>)
 80156c4:	f7ff ff34 	bl	8015530 <LinkedListAdd>
 80156c8:	4603      	mov	r3, r0
 80156ca:	f083 0301 	eor.w	r3, r3, #1
 80156ce:	b2db      	uxtb	r3, r3
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d001      	beq.n	80156d8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80156d4:	2305      	movs	r3, #5
 80156d6:	e027      	b.n	8015728 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	7bfa      	ldrb	r2, [r7, #15]
 80156dc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80156e4:	697b      	ldr	r3, [r7, #20]
 80156e6:	3305      	adds	r3, #5
 80156e8:	687a      	ldr	r2, [r7, #4]
 80156ea:	b292      	uxth	r2, r2
 80156ec:	68b9      	ldr	r1, [r7, #8]
 80156ee:	4618      	mov	r0, r3
 80156f0:	f004 f8c9 	bl	8019886 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80156f4:	7bfb      	ldrb	r3, [r7, #15]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7ff ff9d 	bl	8015636 <IsSticky>
 80156fc:	4603      	mov	r3, r0
 80156fe:	461a      	mov	r2, r3
 8015700:	697b      	ldr	r3, [r7, #20]
 8015702:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015704:	7bfb      	ldrb	r3, [r7, #15]
 8015706:	4618      	mov	r0, r3
 8015708:	f7ff ffaa 	bl	8015660 <IsConfirmationRequired>
 801570c:	4603      	mov	r3, r0
 801570e:	461a      	mov	r2, r3
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015714:	4b06      	ldr	r3, [pc, #24]	; (8015730 <LoRaMacCommandsAddCmd+0x98>)
 8015716:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	4413      	add	r3, r2
 801571e:	3301      	adds	r3, #1
 8015720:	4a03      	ldr	r2, [pc, #12]	; (8015730 <LoRaMacCommandsAddCmd+0x98>)
 8015722:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015726:	2300      	movs	r3, #0
}
 8015728:	4618      	mov	r0, r3
 801572a:	3718      	adds	r7, #24
 801572c:	46bd      	mov	sp, r7
 801572e:	bd80      	pop	{r7, pc}
 8015730:	200015c8 	.word	0x200015c8

08015734 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d101      	bne.n	8015746 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015742:	2301      	movs	r3, #1
 8015744:	e021      	b.n	801578a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015746:	6879      	ldr	r1, [r7, #4]
 8015748:	4812      	ldr	r0, [pc, #72]	; (8015794 <LoRaMacCommandsRemoveCmd+0x60>)
 801574a:	f7ff ff42 	bl	80155d2 <LinkedListRemove>
 801574e:	4603      	mov	r3, r0
 8015750:	f083 0301 	eor.w	r3, r3, #1
 8015754:	b2db      	uxtb	r3, r3
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801575a:	2303      	movs	r3, #3
 801575c:	e015      	b.n	801578a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801575e:	4b0d      	ldr	r3, [pc, #52]	; (8015794 <LoRaMacCommandsRemoveCmd+0x60>)
 8015760:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	689b      	ldr	r3, [r3, #8]
 8015768:	1ad3      	subs	r3, r2, r3
 801576a:	3b01      	subs	r3, #1
 801576c:	4a09      	ldr	r2, [pc, #36]	; (8015794 <LoRaMacCommandsRemoveCmd+0x60>)
 801576e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f7ff feb4 	bl	80154e0 <FreeMacCommandSlot>
 8015778:	4603      	mov	r3, r0
 801577a:	f083 0301 	eor.w	r3, r3, #1
 801577e:	b2db      	uxtb	r3, r3
 8015780:	2b00      	cmp	r3, #0
 8015782:	d001      	beq.n	8015788 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015784:	2305      	movs	r3, #5
 8015786:	e000      	b.n	801578a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015788:	2300      	movs	r3, #0
}
 801578a:	4618      	mov	r0, r3
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}
 8015792:	bf00      	nop
 8015794:	200015c8 	.word	0x200015c8

08015798 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015798:	b480      	push	{r7}
 801579a:	b085      	sub	sp, #20
 801579c:	af00      	add	r7, sp, #0
 801579e:	4603      	mov	r3, r0
 80157a0:	6039      	str	r1, [r7, #0]
 80157a2:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80157a4:	4b0e      	ldr	r3, [pc, #56]	; (80157e0 <LoRaMacCommandsGetCmd+0x48>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80157aa:	e002      	b.n	80157b2 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d004      	beq.n	80157c2 <LoRaMacCommandsGetCmd+0x2a>
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	791b      	ldrb	r3, [r3, #4]
 80157bc:	79fa      	ldrb	r2, [r7, #7]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d1f4      	bne.n	80157ac <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	68fa      	ldr	r2, [r7, #12]
 80157c6:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d101      	bne.n	80157d2 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80157ce:	2303      	movs	r3, #3
 80157d0:	e000      	b.n	80157d4 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80157d2:	2300      	movs	r3, #0
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3714      	adds	r7, #20
 80157d8:	46bd      	mov	sp, r7
 80157da:	bc80      	pop	{r7}
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	200015c8 	.word	0x200015c8

080157e4 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80157ea:	4b0f      	ldr	r3, [pc, #60]	; (8015828 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80157f0:	e012      	b.n	8015818 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	7b1b      	ldrb	r3, [r3, #12]
 80157f6:	f083 0301 	eor.w	r3, r3, #1
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d008      	beq.n	8015812 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f7ff ff94 	bl	8015734 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	607b      	str	r3, [r7, #4]
 8015810:	e002      	b.n	8015818 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d1e9      	bne.n	80157f2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801581e:	2300      	movs	r3, #0
}
 8015820:	4618      	mov	r0, r3
 8015822:	3708      	adds	r7, #8
 8015824:	46bd      	mov	sp, r7
 8015826:	bd80      	pop	{r7, pc}
 8015828:	200015c8 	.word	0x200015c8

0801582c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015832:	4b13      	ldr	r3, [pc, #76]	; (8015880 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015838:	e01a      	b.n	8015870 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	791b      	ldrb	r3, [r3, #4]
 8015844:	4618      	mov	r0, r3
 8015846:	f7ff fef6 	bl	8015636 <IsSticky>
 801584a:	4603      	mov	r3, r0
 801584c:	2b00      	cmp	r3, #0
 801584e:	d00d      	beq.n	801586c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	791b      	ldrb	r3, [r3, #4]
 8015854:	4618      	mov	r0, r3
 8015856:	f7ff ff03 	bl	8015660 <IsConfirmationRequired>
 801585a:	4603      	mov	r3, r0
 801585c:	f083 0301 	eor.w	r3, r3, #1
 8015860:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015862:	2b00      	cmp	r3, #0
 8015864:	d002      	beq.n	801586c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f7ff ff64 	bl	8015734 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1e1      	bne.n	801583a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015876:	2300      	movs	r3, #0
}
 8015878:	4618      	mov	r0, r3
 801587a:	3708      	adds	r7, #8
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}
 8015880:	200015c8 	.word	0x200015c8

08015884 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015884:	b480      	push	{r7}
 8015886:	b083      	sub	sp, #12
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d101      	bne.n	8015896 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015892:	2301      	movs	r3, #1
 8015894:	e005      	b.n	80158a2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015896:	4b05      	ldr	r3, [pc, #20]	; (80158ac <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015898:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80158a0:	2300      	movs	r3, #0
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	370c      	adds	r7, #12
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bc80      	pop	{r7}
 80158aa:	4770      	bx	lr
 80158ac:	200015c8 	.word	0x200015c8

080158b0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b088      	sub	sp, #32
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80158bc:	4b25      	ldr	r3, [pc, #148]	; (8015954 <LoRaMacCommandsSerializeCmds+0xa4>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80158c2:	2300      	movs	r3, #0
 80158c4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d002      	beq.n	80158d2 <LoRaMacCommandsSerializeCmds+0x22>
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d126      	bne.n	8015920 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80158d2:	2301      	movs	r3, #1
 80158d4:	e039      	b.n	801594a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80158d6:	7efb      	ldrb	r3, [r7, #27]
 80158d8:	68fa      	ldr	r2, [r7, #12]
 80158da:	1ad2      	subs	r2, r2, r3
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	689b      	ldr	r3, [r3, #8]
 80158e0:	3301      	adds	r3, #1
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d320      	bcc.n	8015928 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80158e6:	7efb      	ldrb	r3, [r7, #27]
 80158e8:	1c5a      	adds	r2, r3, #1
 80158ea:	76fa      	strb	r2, [r7, #27]
 80158ec:	461a      	mov	r2, r3
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	4413      	add	r3, r2
 80158f2:	69fa      	ldr	r2, [r7, #28]
 80158f4:	7912      	ldrb	r2, [r2, #4]
 80158f6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80158f8:	7efb      	ldrb	r3, [r7, #27]
 80158fa:	687a      	ldr	r2, [r7, #4]
 80158fc:	18d0      	adds	r0, r2, r3
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	1d59      	adds	r1, r3, #5
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	b29b      	uxth	r3, r3
 8015908:	461a      	mov	r2, r3
 801590a:	f003 ffbc 	bl	8019886 <memcpy1>
            itr += curElement->PayloadSize;
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	689b      	ldr	r3, [r3, #8]
 8015912:	b2da      	uxtb	r2, r3
 8015914:	7efb      	ldrb	r3, [r7, #27]
 8015916:	4413      	add	r3, r2
 8015918:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801591a:	69fb      	ldr	r3, [r7, #28]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d1d7      	bne.n	80158d6 <LoRaMacCommandsSerializeCmds+0x26>
 8015926:	e009      	b.n	801593c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015928:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801592a:	e007      	b.n	801593c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015932:	69f8      	ldr	r0, [r7, #28]
 8015934:	f7ff fefe 	bl	8015734 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d1f4      	bne.n	801592c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015942:	68b8      	ldr	r0, [r7, #8]
 8015944:	f7ff ff9e 	bl	8015884 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015948:	2300      	movs	r3, #0
}
 801594a:	4618      	mov	r0, r3
 801594c:	3720      	adds	r7, #32
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}
 8015952:	bf00      	nop
 8015954:	200015c8 	.word	0x200015c8

08015958 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015958:	b480      	push	{r7}
 801595a:	b085      	sub	sp, #20
 801595c:	af00      	add	r7, sp, #0
 801595e:	4603      	mov	r3, r0
 8015960:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015962:	2300      	movs	r3, #0
 8015964:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015966:	79fb      	ldrb	r3, [r7, #7]
 8015968:	3b02      	subs	r3, #2
 801596a:	2b11      	cmp	r3, #17
 801596c:	d850      	bhi.n	8015a10 <LoRaMacCommandsGetCmdSize+0xb8>
 801596e:	a201      	add	r2, pc, #4	; (adr r2, 8015974 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015974:	080159bd 	.word	0x080159bd
 8015978:	080159c3 	.word	0x080159c3
 801597c:	080159c9 	.word	0x080159c9
 8015980:	080159cf 	.word	0x080159cf
 8015984:	080159d5 	.word	0x080159d5
 8015988:	080159db 	.word	0x080159db
 801598c:	080159e1 	.word	0x080159e1
 8015990:	080159e7 	.word	0x080159e7
 8015994:	080159ed 	.word	0x080159ed
 8015998:	08015a11 	.word	0x08015a11
 801599c:	08015a11 	.word	0x08015a11
 80159a0:	080159f3 	.word	0x080159f3
 80159a4:	08015a11 	.word	0x08015a11
 80159a8:	08015a11 	.word	0x08015a11
 80159ac:	080159f9 	.word	0x080159f9
 80159b0:	080159ff 	.word	0x080159ff
 80159b4:	08015a05 	.word	0x08015a05
 80159b8:	08015a0b 	.word	0x08015a0b
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80159bc:	2303      	movs	r3, #3
 80159be:	73fb      	strb	r3, [r7, #15]
            break;
 80159c0:	e027      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80159c2:	2305      	movs	r3, #5
 80159c4:	73fb      	strb	r3, [r7, #15]
            break;
 80159c6:	e024      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80159c8:	2302      	movs	r3, #2
 80159ca:	73fb      	strb	r3, [r7, #15]
            break;
 80159cc:	e021      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80159ce:	2305      	movs	r3, #5
 80159d0:	73fb      	strb	r3, [r7, #15]
            break;
 80159d2:	e01e      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80159d4:	2301      	movs	r3, #1
 80159d6:	73fb      	strb	r3, [r7, #15]
            break;
 80159d8:	e01b      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80159da:	2306      	movs	r3, #6
 80159dc:	73fb      	strb	r3, [r7, #15]
            break;
 80159de:	e018      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80159e0:	2302      	movs	r3, #2
 80159e2:	73fb      	strb	r3, [r7, #15]
            break;
 80159e4:	e015      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80159e6:	2302      	movs	r3, #2
 80159e8:	73fb      	strb	r3, [r7, #15]
            break;
 80159ea:	e012      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80159ec:	2305      	movs	r3, #5
 80159ee:	73fb      	strb	r3, [r7, #15]
            break;
 80159f0:	e00f      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80159f2:	2306      	movs	r3, #6
 80159f4:	73fb      	strb	r3, [r7, #15]
            break;
 80159f6:	e00c      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80159f8:	2301      	movs	r3, #1
 80159fa:	73fb      	strb	r3, [r7, #15]
            break;
 80159fc:	e009      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80159fe:	2305      	movs	r3, #5
 8015a00:	73fb      	strb	r3, [r7, #15]
            break;
 8015a02:	e006      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015a04:	2304      	movs	r3, #4
 8015a06:	73fb      	strb	r3, [r7, #15]
            break;
 8015a08:	e003      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015a0a:	2304      	movs	r3, #4
 8015a0c:	73fb      	strb	r3, [r7, #15]
            break;
 8015a0e:	e000      	b.n	8015a12 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015a10:	bf00      	nop
        }
    }
    return cidSize;
 8015a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3714      	adds	r7, #20
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bc80      	pop	{r7}
 8015a1c:	4770      	bx	lr
 8015a1e:	bf00      	nop

08015a20 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	4a07      	ldr	r2, [pc, #28]	; (8015a48 <IncreaseBufferPointer+0x28>)
 8015a2c:	4293      	cmp	r3, r2
 8015a2e:	d102      	bne.n	8015a36 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015a30:	4b06      	ldr	r3, [pc, #24]	; (8015a4c <IncreaseBufferPointer+0x2c>)
 8015a32:	607b      	str	r3, [r7, #4]
 8015a34:	e002      	b.n	8015a3c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	3304      	adds	r3, #4
 8015a3a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015a3c:	687b      	ldr	r3, [r7, #4]
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	370c      	adds	r7, #12
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bc80      	pop	{r7}
 8015a46:	4770      	bx	lr
 8015a48:	200016e0 	.word	0x200016e0
 8015a4c:	200016d0 	.word	0x200016d0

08015a50 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015a50:	b480      	push	{r7}
 8015a52:	b083      	sub	sp, #12
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	4603      	mov	r3, r0
 8015a58:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015a5a:	79fb      	ldrb	r3, [r7, #7]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d101      	bne.n	8015a64 <IsListEmpty+0x14>
    {
        return true;
 8015a60:	2301      	movs	r3, #1
 8015a62:	e000      	b.n	8015a66 <IsListEmpty+0x16>
    }
    return false;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	370c      	adds	r7, #12
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bc80      	pop	{r7}
 8015a6e:	4770      	bx	lr

08015a70 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015a7a:	79fb      	ldrb	r3, [r7, #7]
 8015a7c:	2b04      	cmp	r3, #4
 8015a7e:	d901      	bls.n	8015a84 <IsListFull+0x14>
    {
        return true;
 8015a80:	2301      	movs	r3, #1
 8015a82:	e000      	b.n	8015a86 <IsListFull+0x16>
    }
    return false;
 8015a84:	2300      	movs	r3, #0
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	370c      	adds	r7, #12
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bc80      	pop	{r7}
 8015a8e:	4770      	bx	lr

08015a90 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b086      	sub	sp, #24
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	4603      	mov	r3, r0
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015aa2:	4b13      	ldr	r3, [pc, #76]	; (8015af0 <GetElement+0x60>)
 8015aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	f7ff ffd1 	bl	8015a50 <IsListEmpty>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d001      	beq.n	8015ab8 <GetElement+0x28>
    {
        return NULL;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	e017      	b.n	8015ae8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015ab8:	2300      	movs	r3, #0
 8015aba:	74fb      	strb	r3, [r7, #19]
 8015abc:	e00d      	b.n	8015ada <GetElement+0x4a>
    {
        if( element->Request == request )
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	7bfa      	ldrb	r2, [r7, #15]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	d101      	bne.n	8015acc <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015ac8:	697b      	ldr	r3, [r7, #20]
 8015aca:	e00d      	b.n	8015ae8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015acc:	6978      	ldr	r0, [r7, #20]
 8015ace:	f7ff ffa7 	bl	8015a20 <IncreaseBufferPointer>
 8015ad2:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015ad4:	7cfb      	ldrb	r3, [r7, #19]
 8015ad6:	3301      	adds	r3, #1
 8015ad8:	74fb      	strb	r3, [r7, #19]
 8015ada:	4b05      	ldr	r3, [pc, #20]	; (8015af0 <GetElement+0x60>)
 8015adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ae0:	7cfa      	ldrb	r2, [r7, #19]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d3eb      	bcc.n	8015abe <GetElement+0x2e>
    }

    return NULL;
 8015ae6:	2300      	movs	r3, #0
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3718      	adds	r7, #24
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}
 8015af0:	200016c4 	.word	0x200016c4

08015af4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b082      	sub	sp, #8
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015afc:	4a0c      	ldr	r2, [pc, #48]	; (8015b30 <LoRaMacConfirmQueueInit+0x3c>)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8015b02:	4b0b      	ldr	r3, [pc, #44]	; (8015b30 <LoRaMacConfirmQueueInit+0x3c>)
 8015b04:	2200      	movs	r2, #0
 8015b06:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015b0a:	4b09      	ldr	r3, [pc, #36]	; (8015b30 <LoRaMacConfirmQueueInit+0x3c>)
 8015b0c:	4a09      	ldr	r2, [pc, #36]	; (8015b34 <LoRaMacConfirmQueueInit+0x40>)
 8015b0e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015b10:	4b07      	ldr	r3, [pc, #28]	; (8015b30 <LoRaMacConfirmQueueInit+0x3c>)
 8015b12:	4a08      	ldr	r2, [pc, #32]	; (8015b34 <LoRaMacConfirmQueueInit+0x40>)
 8015b14:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8015b16:	2214      	movs	r2, #20
 8015b18:	21ff      	movs	r1, #255	; 0xff
 8015b1a:	4806      	ldr	r0, [pc, #24]	; (8015b34 <LoRaMacConfirmQueueInit+0x40>)
 8015b1c:	f003 feee 	bl	80198fc <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015b20:	4b03      	ldr	r3, [pc, #12]	; (8015b30 <LoRaMacConfirmQueueInit+0x3c>)
 8015b22:	2201      	movs	r2, #1
 8015b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8015b28:	bf00      	nop
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	200016c4 	.word	0x200016c4
 8015b34:	200016d0 	.word	0x200016d0

08015b38 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015b40:	4b19      	ldr	r3, [pc, #100]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7ff ff92 	bl	8015a70 <IsListFull>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d001      	beq.n	8015b56 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8015b52:	2300      	movs	r3, #0
 8015b54:	e023      	b.n	8015b9e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015b56:	4b14      	ldr	r3, [pc, #80]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	7812      	ldrb	r2, [r2, #0]
 8015b5e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015b60:	4b11      	ldr	r3, [pc, #68]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	7852      	ldrb	r2, [r2, #1]
 8015b68:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015b6a:	4b0f      	ldr	r3, [pc, #60]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b6c:	689b      	ldr	r3, [r3, #8]
 8015b6e:	687a      	ldr	r2, [r7, #4]
 8015b70:	78d2      	ldrb	r2, [r2, #3]
 8015b72:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015b74:	4b0c      	ldr	r3, [pc, #48]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b76:	689b      	ldr	r3, [r3, #8]
 8015b78:	2200      	movs	r2, #0
 8015b7a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b82:	3301      	adds	r3, #1
 8015b84:	b2da      	uxtb	r2, r3
 8015b86:	4b08      	ldr	r3, [pc, #32]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b88:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015b8c:	4b06      	ldr	r3, [pc, #24]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b8e:	689b      	ldr	r3, [r3, #8]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7ff ff45 	bl	8015a20 <IncreaseBufferPointer>
 8015b96:	4603      	mov	r3, r0
 8015b98:	4a03      	ldr	r2, [pc, #12]	; (8015ba8 <LoRaMacConfirmQueueAdd+0x70>)
 8015b9a:	6093      	str	r3, [r2, #8]

    return true;
 8015b9c:	2301      	movs	r3, #1
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3708      	adds	r7, #8
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	200016c4 	.word	0x200016c4

08015bac <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015bb0:	4b0e      	ldr	r3, [pc, #56]	; (8015bec <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f7ff ff4a 	bl	8015a50 <IsListEmpty>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d001      	beq.n	8015bc6 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e010      	b.n	8015be8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015bc6:	4b09      	ldr	r3, [pc, #36]	; (8015bec <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bcc:	3b01      	subs	r3, #1
 8015bce:	b2da      	uxtb	r2, r3
 8015bd0:	4b06      	ldr	r3, [pc, #24]	; (8015bec <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bd2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015bd6:	4b05      	ldr	r3, [pc, #20]	; (8015bec <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015bd8:	685b      	ldr	r3, [r3, #4]
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7ff ff20 	bl	8015a20 <IncreaseBufferPointer>
 8015be0:	4603      	mov	r3, r0
 8015be2:	4a02      	ldr	r2, [pc, #8]	; (8015bec <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015be4:	6053      	str	r3, [r2, #4]

    return true;
 8015be6:	2301      	movs	r3, #1
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	bd80      	pop	{r7, pc}
 8015bec:	200016c4 	.word	0x200016c4

08015bf0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b084      	sub	sp, #16
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	460a      	mov	r2, r1
 8015bfa:	71fb      	strb	r3, [r7, #7]
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015c00:	2300      	movs	r3, #0
 8015c02:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015c04:	4b10      	ldr	r3, [pc, #64]	; (8015c48 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7ff ff20 	bl	8015a50 <IsListEmpty>
 8015c10:	4603      	mov	r3, r0
 8015c12:	f083 0301 	eor.w	r3, r3, #1
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d011      	beq.n	8015c40 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015c1c:	4b0a      	ldr	r3, [pc, #40]	; (8015c48 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c1e:	6859      	ldr	r1, [r3, #4]
 8015c20:	4b09      	ldr	r3, [pc, #36]	; (8015c48 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015c22:	689a      	ldr	r2, [r3, #8]
 8015c24:	79bb      	ldrb	r3, [r7, #6]
 8015c26:	4618      	mov	r0, r3
 8015c28:	f7ff ff32 	bl	8015a90 <GetElement>
 8015c2c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d005      	beq.n	8015c40 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	79fa      	ldrb	r2, [r7, #7]
 8015c38:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	2201      	movs	r2, #1
 8015c3e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015c40:	bf00      	nop
 8015c42:	3710      	adds	r7, #16
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	200016c4 	.word	0x200016c4

08015c4c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b084      	sub	sp, #16
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	4603      	mov	r3, r0
 8015c54:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015c56:	2300      	movs	r3, #0
 8015c58:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015c5a:	4b10      	ldr	r3, [pc, #64]	; (8015c9c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c60:	4618      	mov	r0, r3
 8015c62:	f7ff fef5 	bl	8015a50 <IsListEmpty>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f083 0301 	eor.w	r3, r3, #1
 8015c6c:	b2db      	uxtb	r3, r3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d00e      	beq.n	8015c90 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015c72:	4b0a      	ldr	r3, [pc, #40]	; (8015c9c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c74:	6859      	ldr	r1, [r3, #4]
 8015c76:	4b09      	ldr	r3, [pc, #36]	; (8015c9c <LoRaMacConfirmQueueGetStatus+0x50>)
 8015c78:	689a      	ldr	r2, [r3, #8]
 8015c7a:	79fb      	ldrb	r3, [r7, #7]
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7ff ff07 	bl	8015a90 <GetElement>
 8015c82:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d002      	beq.n	8015c90 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	785b      	ldrb	r3, [r3, #1]
 8015c8e:	e000      	b.n	8015c92 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015c90:	2301      	movs	r3, #1
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3710      	adds	r7, #16
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	bf00      	nop
 8015c9c:	200016c4 	.word	0x200016c4

08015ca0 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b084      	sub	sp, #16
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015caa:	4b16      	ldr	r3, [pc, #88]	; (8015d04 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015cb0:	4a14      	ldr	r2, [pc, #80]	; (8015d04 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015cb2:	79fb      	ldrb	r3, [r7, #7]
 8015cb4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015cb8:	4b12      	ldr	r3, [pc, #72]	; (8015d04 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015cba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7ff fec6 	bl	8015a50 <IsListEmpty>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	f083 0301 	eor.w	r3, r3, #1
 8015cca:	b2db      	uxtb	r3, r3
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d015      	beq.n	8015cfc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	79fa      	ldrb	r2, [r7, #7]
 8015cd4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	78db      	ldrb	r3, [r3, #3]
 8015cda:	f083 0301 	eor.w	r3, r3, #1
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d002      	beq.n	8015cea <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2201      	movs	r2, #1
 8015ce8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015cea:	68f8      	ldr	r0, [r7, #12]
 8015cec:	f7ff fe98 	bl	8015a20 <IncreaseBufferPointer>
 8015cf0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015cf2:	4b04      	ldr	r3, [pc, #16]	; (8015d04 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015cf4:	689b      	ldr	r3, [r3, #8]
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d1e9      	bne.n	8015cd0 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015cfc:	bf00      	nop
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	200016c4 	.word	0x200016c4

08015d08 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	4603      	mov	r3, r0
 8015d10:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015d12:	4b09      	ldr	r3, [pc, #36]	; (8015d38 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015d14:	6859      	ldr	r1, [r3, #4]
 8015d16:	4b08      	ldr	r3, [pc, #32]	; (8015d38 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015d18:	689a      	ldr	r2, [r3, #8]
 8015d1a:	79fb      	ldrb	r3, [r7, #7]
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7ff feb7 	bl	8015a90 <GetElement>
 8015d22:	4603      	mov	r3, r0
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d001      	beq.n	8015d2c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015d28:	2301      	movs	r3, #1
 8015d2a:	e000      	b.n	8015d2e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8015d2c:	2300      	movs	r3, #0
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3708      	adds	r7, #8
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	200016c4 	.word	0x200016c4

08015d3c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015d44:	4b25      	ldr	r3, [pc, #148]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d4a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8015d50:	f107 0308 	add.w	r3, r7, #8
 8015d54:	2204      	movs	r2, #4
 8015d56:	2100      	movs	r1, #0
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f003 fdcf 	bl	80198fc <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8015d5e:	2300      	movs	r3, #0
 8015d60:	73fb      	strb	r3, [r7, #15]
 8015d62:	e032      	b.n	8015dca <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015d64:	4b1d      	ldr	r3, [pc, #116]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	781a      	ldrb	r2, [r3, #0]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015d6e:	4b1b      	ldr	r3, [pc, #108]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	785a      	ldrb	r2, [r3, #1]
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015d78:	4b18      	ldr	r3, [pc, #96]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	789b      	ldrb	r3, [r3, #2]
 8015d7e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015d80:	7b7b      	ldrb	r3, [r7, #13]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d005      	beq.n	8015d92 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015d86:	4b15      	ldr	r3, [pc, #84]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	689b      	ldr	r3, [r3, #8]
 8015d8c:	6878      	ldr	r0, [r7, #4]
 8015d8e:	4798      	blx	r3
 8015d90:	e00b      	b.n	8015daa <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015d92:	4b12      	ldr	r3, [pc, #72]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015d9a:	4b10      	ldr	r3, [pc, #64]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015d9c:	685b      	ldr	r3, [r3, #4]
 8015d9e:	785b      	ldrb	r3, [r3, #1]
 8015da0:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015da2:	4b0e      	ldr	r3, [pc, #56]	; (8015ddc <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	78db      	ldrb	r3, [r3, #3]
 8015da8:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015daa:	f7ff feff 	bl	8015bac <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015dae:	7b7b      	ldrb	r3, [r7, #13]
 8015db0:	f083 0301 	eor.w	r3, r3, #1
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d004      	beq.n	8015dc4 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015dba:	f107 0308 	add.w	r3, r7, #8
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7ff feba 	bl	8015b38 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015dc4:	7bfb      	ldrb	r3, [r7, #15]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	73fb      	strb	r3, [r7, #15]
 8015dca:	7bfa      	ldrb	r2, [r7, #15]
 8015dcc:	7bbb      	ldrb	r3, [r7, #14]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d3c8      	bcc.n	8015d64 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015dd2:	bf00      	nop
 8015dd4:	bf00      	nop
 8015dd6:	3710      	adds	r7, #16
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	bd80      	pop	{r7, pc}
 8015ddc:	200016c4 	.word	0x200016c4

08015de0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015de0:	b480      	push	{r7}
 8015de2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015de4:	4b03      	ldr	r3, [pc, #12]	; (8015df4 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015de6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bc80      	pop	{r7}
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop
 8015df4:	200016c4 	.word	0x200016c4

08015df8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015dfc:	4b06      	ldr	r3, [pc, #24]	; (8015e18 <LoRaMacConfirmQueueIsFull+0x20>)
 8015dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7ff fe34 	bl	8015a70 <IsListFull>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d001      	beq.n	8015e12 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8015e0e:	2301      	movs	r3, #1
 8015e10:	e000      	b.n	8015e14 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8015e12:	2300      	movs	r3, #0
    }
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	bd80      	pop	{r7, pc}
 8015e18:	200016c4 	.word	0x200016c4

08015e1c <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b08e      	sub	sp, #56	; 0x38
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	60f8      	str	r0, [r7, #12]
 8015e24:	607b      	str	r3, [r7, #4]
 8015e26:	460b      	mov	r3, r1
 8015e28:	817b      	strh	r3, [r7, #10]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d101      	bne.n	8015e38 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e34:	230a      	movs	r3, #10
 8015e36:	e086      	b.n	8015f46 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8015e3e:	2301      	movs	r3, #1
 8015e40:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8015e42:	2300      	movs	r3, #0
 8015e44:	623b      	str	r3, [r7, #32]
 8015e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	601a      	str	r2, [r3, #0]
 8015e4e:	605a      	str	r2, [r3, #4]
 8015e50:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015e52:	2300      	movs	r3, #0
 8015e54:	613b      	str	r3, [r7, #16]
 8015e56:	f107 0314 	add.w	r3, r7, #20
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	601a      	str	r2, [r3, #0]
 8015e5e:	605a      	str	r2, [r3, #4]
 8015e60:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015e62:	2301      	movs	r3, #1
 8015e64:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015e66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015e6a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	0a1b      	lsrs	r3, r3, #8
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	0c1b      	lsrs	r3, r3, #16
 8015e7e:	b2db      	uxtb	r3, r3
 8015e80:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	0e1b      	lsrs	r3, r3, #24
 8015e86:	b2db      	uxtb	r3, r3
 8015e88:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e92:	0a1b      	lsrs	r3, r3, #8
 8015e94:	b2db      	uxtb	r3, r3
 8015e96:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015e9a:	0c1b      	lsrs	r3, r3, #16
 8015e9c:	b2db      	uxtb	r3, r3
 8015e9e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ea2:	0e1b      	lsrs	r3, r3, #24
 8015ea4:	b2db      	uxtb	r3, r3
 8015ea6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015ea8:	e048      	b.n	8015f3c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015eaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015eb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015eb6:	f107 0320 	add.w	r3, r7, #32
 8015eba:	7a7a      	ldrb	r2, [r7, #9]
 8015ebc:	f107 0010 	add.w	r0, r7, #16
 8015ec0:	2110      	movs	r1, #16
 8015ec2:	f7f8 ff69 	bl	800ed98 <SecureElementAesEncrypt>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ecc:	230f      	movs	r3, #15
 8015ece:	e03a      	b.n	8015f46 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015ed6:	e01e      	b.n	8015f16 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015ed8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015edc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ee0:	4413      	add	r3, r2
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	4413      	add	r3, r2
 8015ee8:	7819      	ldrb	r1, [r3, #0]
 8015eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015eee:	3338      	adds	r3, #56	; 0x38
 8015ef0:	443b      	add	r3, r7
 8015ef2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015ef6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8015efa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015efe:	4403      	add	r3, r0
 8015f00:	4618      	mov	r0, r3
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	4403      	add	r3, r0
 8015f06:	404a      	eors	r2, r1
 8015f08:	b2d2      	uxtb	r2, r2
 8015f0a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f10:	3301      	adds	r3, #1
 8015f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015f16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015f1a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015f1e:	2a10      	cmp	r2, #16
 8015f20:	bfa8      	it	ge
 8015f22:	2210      	movge	r2, #16
 8015f24:	b212      	sxth	r2, r2
 8015f26:	4293      	cmp	r3, r2
 8015f28:	dbd6      	blt.n	8015ed8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8015f2a:	897b      	ldrh	r3, [r7, #10]
 8015f2c:	3b10      	subs	r3, #16
 8015f2e:	b29b      	uxth	r3, r3
 8015f30:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015f36:	3310      	adds	r3, #16
 8015f38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8015f3c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	dcb2      	bgt.n	8015eaa <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3738      	adds	r7, #56	; 0x38
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015f4e:	b490      	push	{r4, r7}
 8015f50:	b082      	sub	sp, #8
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	4604      	mov	r4, r0
 8015f56:	4608      	mov	r0, r1
 8015f58:	4611      	mov	r1, r2
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	4623      	mov	r3, r4
 8015f5e:	80fb      	strh	r3, [r7, #6]
 8015f60:	4603      	mov	r3, r0
 8015f62:	717b      	strb	r3, [r7, #5]
 8015f64:	460b      	mov	r3, r1
 8015f66:	713b      	strb	r3, [r7, #4]
 8015f68:	4613      	mov	r3, r2
 8015f6a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d101      	bne.n	8015f76 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f72:	230a      	movs	r3, #10
 8015f74:	e04e      	b.n	8016014 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015f76:	69bb      	ldr	r3, [r7, #24]
 8015f78:	2249      	movs	r2, #73	; 0x49
 8015f7a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	3301      	adds	r3, #1
 8015f80:	2200      	movs	r2, #0
 8015f82:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015f84:	69bb      	ldr	r3, [r7, #24]
 8015f86:	3302      	adds	r3, #2
 8015f88:	2200      	movs	r2, #0
 8015f8a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	3303      	adds	r3, #3
 8015f90:	2200      	movs	r2, #0
 8015f92:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	3304      	adds	r3, #4
 8015f98:	2200      	movs	r2, #0
 8015f9a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015f9c:	69bb      	ldr	r3, [r7, #24]
 8015f9e:	3305      	adds	r3, #5
 8015fa0:	78fa      	ldrb	r2, [r7, #3]
 8015fa2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015fa4:	69bb      	ldr	r3, [r7, #24]
 8015fa6:	3306      	adds	r3, #6
 8015fa8:	693a      	ldr	r2, [r7, #16]
 8015faa:	b2d2      	uxtb	r2, r2
 8015fac:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	0a1a      	lsrs	r2, r3, #8
 8015fb2:	69bb      	ldr	r3, [r7, #24]
 8015fb4:	3307      	adds	r3, #7
 8015fb6:	b2d2      	uxtb	r2, r2
 8015fb8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	0c1a      	lsrs	r2, r3, #16
 8015fbe:	69bb      	ldr	r3, [r7, #24]
 8015fc0:	3308      	adds	r3, #8
 8015fc2:	b2d2      	uxtb	r2, r2
 8015fc4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015fc6:	693b      	ldr	r3, [r7, #16]
 8015fc8:	0e1a      	lsrs	r2, r3, #24
 8015fca:	69bb      	ldr	r3, [r7, #24]
 8015fcc:	3309      	adds	r3, #9
 8015fce:	b2d2      	uxtb	r2, r2
 8015fd0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015fd2:	69bb      	ldr	r3, [r7, #24]
 8015fd4:	330a      	adds	r3, #10
 8015fd6:	697a      	ldr	r2, [r7, #20]
 8015fd8:	b2d2      	uxtb	r2, r2
 8015fda:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	0a1a      	lsrs	r2, r3, #8
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	330b      	adds	r3, #11
 8015fe4:	b2d2      	uxtb	r2, r2
 8015fe6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	0c1a      	lsrs	r2, r3, #16
 8015fec:	69bb      	ldr	r3, [r7, #24]
 8015fee:	330c      	adds	r3, #12
 8015ff0:	b2d2      	uxtb	r2, r2
 8015ff2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	0e1a      	lsrs	r2, r3, #24
 8015ff8:	69bb      	ldr	r3, [r7, #24]
 8015ffa:	330d      	adds	r3, #13
 8015ffc:	b2d2      	uxtb	r2, r2
 8015ffe:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016000:	69bb      	ldr	r3, [r7, #24]
 8016002:	330e      	adds	r3, #14
 8016004:	2200      	movs	r2, #0
 8016006:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016008:	69bb      	ldr	r3, [r7, #24]
 801600a:	330f      	adds	r3, #15
 801600c:	88fa      	ldrh	r2, [r7, #6]
 801600e:	b2d2      	uxtb	r2, r2
 8016010:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bc90      	pop	{r4, r7}
 801601c:	4770      	bx	lr

0801601e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801601e:	b590      	push	{r4, r7, lr}
 8016020:	b08b      	sub	sp, #44	; 0x2c
 8016022:	af04      	add	r7, sp, #16
 8016024:	6078      	str	r0, [r7, #4]
 8016026:	4608      	mov	r0, r1
 8016028:	4611      	mov	r1, r2
 801602a:	461a      	mov	r2, r3
 801602c:	4603      	mov	r3, r0
 801602e:	807b      	strh	r3, [r7, #2]
 8016030:	460b      	mov	r3, r1
 8016032:	707b      	strb	r3, [r7, #1]
 8016034:	4613      	mov	r3, r2
 8016036:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d002      	beq.n	8016044 <ComputeCmacB0+0x26>
 801603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016040:	2b00      	cmp	r3, #0
 8016042:	d101      	bne.n	8016048 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016044:	230a      	movs	r3, #10
 8016046:	e024      	b.n	8016092 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016048:	887b      	ldrh	r3, [r7, #2]
 801604a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801604e:	d901      	bls.n	8016054 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016050:	230e      	movs	r3, #14
 8016052:	e01e      	b.n	8016092 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016054:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016058:	783a      	ldrb	r2, [r7, #0]
 801605a:	7879      	ldrb	r1, [r7, #1]
 801605c:	8878      	ldrh	r0, [r7, #2]
 801605e:	f107 0308 	add.w	r3, r7, #8
 8016062:	9302      	str	r3, [sp, #8]
 8016064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016066:	9301      	str	r3, [sp, #4]
 8016068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606a:	9300      	str	r3, [sp, #0]
 801606c:	4623      	mov	r3, r4
 801606e:	f7ff ff6e 	bl	8015f4e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016072:	887a      	ldrh	r2, [r7, #2]
 8016074:	7879      	ldrb	r1, [r7, #1]
 8016076:	f107 0008 	add.w	r0, r7, #8
 801607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	460b      	mov	r3, r1
 8016080:	6879      	ldr	r1, [r7, #4]
 8016082:	f7f8 fe43 	bl	800ed0c <SecureElementComputeAesCmac>
 8016086:	4603      	mov	r3, r0
 8016088:	2b00      	cmp	r3, #0
 801608a:	d001      	beq.n	8016090 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801608c:	230f      	movs	r3, #15
 801608e:	e000      	b.n	8016092 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016090:	2300      	movs	r3, #0
}
 8016092:	4618      	mov	r0, r3
 8016094:	371c      	adds	r7, #28
 8016096:	46bd      	mov	sp, r7
 8016098:	bd90      	pop	{r4, r7, pc}

0801609a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801609a:	b590      	push	{r4, r7, lr}
 801609c:	b0cd      	sub	sp, #308	; 0x134
 801609e:	af04      	add	r7, sp, #16
 80160a0:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80160a4:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80160a8:	6020      	str	r0, [r4, #0]
 80160aa:	460c      	mov	r4, r1
 80160ac:	4610      	mov	r0, r2
 80160ae:	4619      	mov	r1, r3
 80160b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160b4:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80160b8:	4622      	mov	r2, r4
 80160ba:	801a      	strh	r2, [r3, #0]
 80160bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160c0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80160c4:	4602      	mov	r2, r0
 80160c6:	701a      	strb	r2, [r3, #0]
 80160c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160cc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80160d0:	460a      	mov	r2, r1
 80160d2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80160d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d101      	bne.n	80160e6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80160e2:	230a      	movs	r3, #10
 80160e4:	e063      	b.n	80161ae <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80160e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80160ea:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80160ee:	881b      	ldrh	r3, [r3, #0]
 80160f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160f4:	d901      	bls.n	80160fa <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80160f6:	230e      	movs	r3, #14
 80160f8:	e059      	b.n	80161ae <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80160fa:	f107 030c 	add.w	r3, r7, #12
 80160fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016102:	2100      	movs	r1, #0
 8016104:	4618      	mov	r0, r3
 8016106:	f003 fbf9 	bl	80198fc <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801610a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801610e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016112:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016116:	781a      	ldrb	r2, [r3, #0]
 8016118:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801611c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016120:	7819      	ldrb	r1, [r3, #0]
 8016122:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016126:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801612a:	8818      	ldrh	r0, [r3, #0]
 801612c:	f107 030c 	add.w	r3, r7, #12
 8016130:	9302      	str	r3, [sp, #8]
 8016132:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016136:	9301      	str	r3, [sp, #4]
 8016138:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801613c:	9300      	str	r3, [sp, #0]
 801613e:	4623      	mov	r3, r4
 8016140:	f7ff ff05 	bl	8015f4e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016144:	f107 030c 	add.w	r3, r7, #12
 8016148:	3310      	adds	r3, #16
 801614a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801614e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016152:	8812      	ldrh	r2, [r2, #0]
 8016154:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016158:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801615c:	6809      	ldr	r1, [r1, #0]
 801615e:	4618      	mov	r0, r3
 8016160:	f003 fb91 	bl	8019886 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016164:	2306      	movs	r3, #6
 8016166:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801616a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801616e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016172:	881b      	ldrh	r3, [r3, #0]
 8016174:	3310      	adds	r3, #16
 8016176:	4619      	mov	r1, r3
 8016178:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801617c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	f107 000c 	add.w	r0, r7, #12
 8016186:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801618a:	f7f8 fdd9 	bl	800ed40 <SecureElementVerifyAesCmac>
 801618e:	4603      	mov	r3, r0
 8016190:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016194:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016198:	2b00      	cmp	r3, #0
 801619a:	d101      	bne.n	80161a0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801619c:	2300      	movs	r3, #0
 801619e:	e006      	b.n	80161ae <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80161a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d101      	bne.n	80161ac <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80161a8:	2301      	movs	r3, #1
 80161aa:	e000      	b.n	80161ae <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161ac:	230f      	movs	r3, #15
}
 80161ae:	4618      	mov	r0, r3
 80161b0:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80161b4:	46bd      	mov	sp, r7
 80161b6:	bd90      	pop	{r4, r7, pc}

080161b8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80161b8:	b480      	push	{r7}
 80161ba:	b085      	sub	sp, #20
 80161bc:	af00      	add	r7, sp, #0
 80161be:	4603      	mov	r3, r0
 80161c0:	6039      	str	r1, [r7, #0]
 80161c2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80161c4:	2300      	movs	r3, #0
 80161c6:	73fb      	strb	r3, [r7, #15]
 80161c8:	e011      	b.n	80161ee <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80161ca:	7bfb      	ldrb	r3, [r7, #15]
 80161cc:	4a0c      	ldr	r2, [pc, #48]	; (8016200 <GetKeyAddrItem+0x48>)
 80161ce:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80161d2:	79fa      	ldrb	r2, [r7, #7]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d107      	bne.n	80161e8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80161d8:	7bfb      	ldrb	r3, [r7, #15]
 80161da:	009b      	lsls	r3, r3, #2
 80161dc:	4a08      	ldr	r2, [pc, #32]	; (8016200 <GetKeyAddrItem+0x48>)
 80161de:	441a      	add	r2, r3
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80161e4:	2300      	movs	r3, #0
 80161e6:	e006      	b.n	80161f6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80161e8:	7bfb      	ldrb	r3, [r7, #15]
 80161ea:	3301      	adds	r3, #1
 80161ec:	73fb      	strb	r3, [r7, #15]
 80161ee:	7bfb      	ldrb	r3, [r7, #15]
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d9ea      	bls.n	80161ca <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80161f4:	230c      	movs	r3, #12
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3714      	adds	r7, #20
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bc80      	pop	{r7}
 80161fe:	4770      	bx	lr
 8016200:	20000128 	.word	0x20000128

08016204 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b088      	sub	sp, #32
 8016208:	af00      	add	r7, sp, #0
 801620a:	60b9      	str	r1, [r7, #8]
 801620c:	607a      	str	r2, [r7, #4]
 801620e:	461a      	mov	r2, r3
 8016210:	4603      	mov	r3, r0
 8016212:	73fb      	strb	r3, [r7, #15]
 8016214:	4613      	mov	r3, r2
 8016216:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016218:	2300      	movs	r3, #0
 801621a:	613b      	str	r3, [r7, #16]
 801621c:	f107 0314 	add.w	r3, r7, #20
 8016220:	2200      	movs	r2, #0
 8016222:	601a      	str	r2, [r3, #0]
 8016224:	605a      	str	r2, [r3, #4]
 8016226:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016228:	7bfb      	ldrb	r3, [r7, #15]
 801622a:	2b08      	cmp	r3, #8
 801622c:	d002      	beq.n	8016234 <DeriveSessionKey10x+0x30>
 801622e:	2b09      	cmp	r3, #9
 8016230:	d003      	beq.n	801623a <DeriveSessionKey10x+0x36>
 8016232:	e005      	b.n	8016240 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8016234:	2301      	movs	r3, #1
 8016236:	743b      	strb	r3, [r7, #16]
            break;
 8016238:	e004      	b.n	8016244 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801623a:	2302      	movs	r3, #2
 801623c:	743b      	strb	r3, [r7, #16]
            break;
 801623e:	e001      	b.n	8016244 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016240:	230b      	movs	r3, #11
 8016242:	e02a      	b.n	801629a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	b2db      	uxtb	r3, r3
 8016248:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	0a1b      	lsrs	r3, r3, #8
 801624e:	b2db      	uxtb	r3, r3
 8016250:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	0c1b      	lsrs	r3, r3, #16
 8016256:	b2db      	uxtb	r3, r3
 8016258:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	b2db      	uxtb	r3, r3
 801625e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	0a1b      	lsrs	r3, r3, #8
 8016264:	b2db      	uxtb	r3, r3
 8016266:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	0c1b      	lsrs	r3, r3, #16
 801626c:	b2db      	uxtb	r3, r3
 801626e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016270:	89bb      	ldrh	r3, [r7, #12]
 8016272:	b2db      	uxtb	r3, r3
 8016274:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016276:	89bb      	ldrh	r3, [r7, #12]
 8016278:	0a1b      	lsrs	r3, r3, #8
 801627a:	b29b      	uxth	r3, r3
 801627c:	b2db      	uxtb	r3, r3
 801627e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016280:	7bfa      	ldrb	r2, [r7, #15]
 8016282:	f107 0310 	add.w	r3, r7, #16
 8016286:	2101      	movs	r1, #1
 8016288:	4618      	mov	r0, r3
 801628a:	f7f8 fe05 	bl	800ee98 <SecureElementDeriveAndStoreKey>
 801628e:	4603      	mov	r3, r0
 8016290:	2b00      	cmp	r3, #0
 8016292:	d001      	beq.n	8016298 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016294:	230f      	movs	r3, #15
 8016296:	e000      	b.n	801629a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016298:	2300      	movs	r3, #0
}
 801629a:	4618      	mov	r0, r3
 801629c:	3720      	adds	r7, #32
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
	...

080162a4 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80162a4:	b480      	push	{r7}
 80162a6:	b083      	sub	sp, #12
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	4603      	mov	r3, r0
 80162ac:	6039      	str	r1, [r7, #0]
 80162ae:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d101      	bne.n	80162ba <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80162b6:	230a      	movs	r3, #10
 80162b8:	e029      	b.n	801630e <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80162ba:	79fb      	ldrb	r3, [r7, #7]
 80162bc:	3b01      	subs	r3, #1
 80162be:	2b03      	cmp	r3, #3
 80162c0:	d822      	bhi.n	8016308 <GetLastFcntDown+0x64>
 80162c2:	a201      	add	r2, pc, #4	; (adr r2, 80162c8 <GetLastFcntDown+0x24>)
 80162c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162c8:	080162d9 	.word	0x080162d9
 80162cc:	080162e5 	.word	0x080162e5
 80162d0:	080162f1 	.word	0x080162f1
 80162d4:	080162fd 	.word	0x080162fd
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80162d8:	4b0f      	ldr	r3, [pc, #60]	; (8016318 <GetLastFcntDown+0x74>)
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	691a      	ldr	r2, [r3, #16]
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	601a      	str	r2, [r3, #0]
            break;
 80162e2:	e013      	b.n	801630c <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80162e4:	4b0c      	ldr	r3, [pc, #48]	; (8016318 <GetLastFcntDown+0x74>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	695a      	ldr	r2, [r3, #20]
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	601a      	str	r2, [r3, #0]
            break;
 80162ee:	e00d      	b.n	801630c <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80162f0:	4b09      	ldr	r3, [pc, #36]	; (8016318 <GetLastFcntDown+0x74>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	699a      	ldr	r2, [r3, #24]
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	601a      	str	r2, [r3, #0]
            break;
 80162fa:	e007      	b.n	801630c <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80162fc:	4b06      	ldr	r3, [pc, #24]	; (8016318 <GetLastFcntDown+0x74>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	69da      	ldr	r2, [r3, #28]
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	601a      	str	r2, [r3, #0]
            break;
 8016306:	e001      	b.n	801630c <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016308:	2305      	movs	r3, #5
 801630a:	e000      	b.n	801630e <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801630c:	2300      	movs	r3, #0
}
 801630e:	4618      	mov	r0, r3
 8016310:	370c      	adds	r7, #12
 8016312:	46bd      	mov	sp, r7
 8016314:	bc80      	pop	{r7}
 8016316:	4770      	bx	lr
 8016318:	200016e8 	.word	0x200016e8

0801631c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b084      	sub	sp, #16
 8016320:	af00      	add	r7, sp, #0
 8016322:	4603      	mov	r3, r0
 8016324:	6039      	str	r1, [r7, #0]
 8016326:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016328:	2300      	movs	r3, #0
 801632a:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801632c:	f107 020c 	add.w	r2, r7, #12
 8016330:	79fb      	ldrb	r3, [r7, #7]
 8016332:	4611      	mov	r1, r2
 8016334:	4618      	mov	r0, r3
 8016336:	f7ff ffb5 	bl	80162a4 <GetLastFcntDown>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d001      	beq.n	8016344 <CheckFCntDown+0x28>
    {
        return false;
 8016340:	2300      	movs	r3, #0
 8016342:	e00a      	b.n	801635a <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	683a      	ldr	r2, [r7, #0]
 8016348:	429a      	cmp	r2, r3
 801634a:	d803      	bhi.n	8016354 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 801634c:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016352:	d101      	bne.n	8016358 <CheckFCntDown+0x3c>
    {
        return true;
 8016354:	2301      	movs	r3, #1
 8016356:	e000      	b.n	801635a <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016358:	2300      	movs	r3, #0
    }
}
 801635a:	4618      	mov	r0, r3
 801635c:	3710      	adds	r7, #16
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
	...

08016364 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016364:	b480      	push	{r7}
 8016366:	b083      	sub	sp, #12
 8016368:	af00      	add	r7, sp, #0
 801636a:	4603      	mov	r3, r0
 801636c:	6039      	str	r1, [r7, #0]
 801636e:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016370:	79fb      	ldrb	r3, [r7, #7]
 8016372:	3b01      	subs	r3, #1
 8016374:	2b03      	cmp	r3, #3
 8016376:	d82b      	bhi.n	80163d0 <UpdateFCntDown+0x6c>
 8016378:	a201      	add	r2, pc, #4	; (adr r2, 8016380 <UpdateFCntDown+0x1c>)
 801637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801637e:	bf00      	nop
 8016380:	08016391 	.word	0x08016391
 8016384:	080163a3 	.word	0x080163a3
 8016388:	080163b5 	.word	0x080163b5
 801638c:	080163c7 	.word	0x080163c7
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016390:	4b12      	ldr	r3, [pc, #72]	; (80163dc <UpdateFCntDown+0x78>)
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	683a      	ldr	r2, [r7, #0]
 8016396:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016398:	4b10      	ldr	r3, [pc, #64]	; (80163dc <UpdateFCntDown+0x78>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	683a      	ldr	r2, [r7, #0]
 801639e:	621a      	str	r2, [r3, #32]
            break;
 80163a0:	e017      	b.n	80163d2 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80163a2:	4b0e      	ldr	r3, [pc, #56]	; (80163dc <UpdateFCntDown+0x78>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	683a      	ldr	r2, [r7, #0]
 80163a8:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80163aa:	4b0c      	ldr	r3, [pc, #48]	; (80163dc <UpdateFCntDown+0x78>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	683a      	ldr	r2, [r7, #0]
 80163b0:	621a      	str	r2, [r3, #32]
            break;
 80163b2:	e00e      	b.n	80163d2 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80163b4:	4b09      	ldr	r3, [pc, #36]	; (80163dc <UpdateFCntDown+0x78>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	683a      	ldr	r2, [r7, #0]
 80163ba:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80163bc:	4b07      	ldr	r3, [pc, #28]	; (80163dc <UpdateFCntDown+0x78>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	683a      	ldr	r2, [r7, #0]
 80163c2:	621a      	str	r2, [r3, #32]
            break;
 80163c4:	e005      	b.n	80163d2 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80163c6:	4b05      	ldr	r3, [pc, #20]	; (80163dc <UpdateFCntDown+0x78>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	683a      	ldr	r2, [r7, #0]
 80163cc:	61da      	str	r2, [r3, #28]
            break;
 80163ce:	e000      	b.n	80163d2 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80163d0:	bf00      	nop
    }
}
 80163d2:	bf00      	nop
 80163d4:	370c      	adds	r7, #12
 80163d6:	46bd      	mov	sp, r7
 80163d8:	bc80      	pop	{r7}
 80163da:	4770      	bx	lr
 80163dc:	200016e8 	.word	0x200016e8

080163e0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80163e0:	b480      	push	{r7}
 80163e2:	b083      	sub	sp, #12
 80163e4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80163e6:	4b18      	ldr	r3, [pc, #96]	; (8016448 <ResetFCnts+0x68>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	2200      	movs	r2, #0
 80163ec:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80163ee:	4b16      	ldr	r3, [pc, #88]	; (8016448 <ResetFCnts+0x68>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	f04f 32ff 	mov.w	r2, #4294967295
 80163f6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80163f8:	4b13      	ldr	r3, [pc, #76]	; (8016448 <ResetFCnts+0x68>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016400:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016402:	4b11      	ldr	r3, [pc, #68]	; (8016448 <ResetFCnts+0x68>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	f04f 32ff 	mov.w	r2, #4294967295
 801640a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801640c:	4b0e      	ldr	r3, [pc, #56]	; (8016448 <ResetFCnts+0x68>)
 801640e:	681a      	ldr	r2, [r3, #0]
 8016410:	4b0d      	ldr	r3, [pc, #52]	; (8016448 <ResetFCnts+0x68>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	6992      	ldr	r2, [r2, #24]
 8016416:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016418:	2300      	movs	r3, #0
 801641a:	607b      	str	r3, [r7, #4]
 801641c:	e00b      	b.n	8016436 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801641e:	4b0a      	ldr	r3, [pc, #40]	; (8016448 <ResetFCnts+0x68>)
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	3306      	adds	r3, #6
 8016426:	009b      	lsls	r3, r3, #2
 8016428:	4413      	add	r3, r2
 801642a:	f04f 32ff 	mov.w	r2, #4294967295
 801642e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	3301      	adds	r3, #1
 8016434:	607b      	str	r3, [r7, #4]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2b00      	cmp	r3, #0
 801643a:	ddf0      	ble.n	801641e <ResetFCnts+0x3e>
    }
}
 801643c:	bf00      	nop
 801643e:	bf00      	nop
 8016440:	370c      	adds	r7, #12
 8016442:	46bd      	mov	sp, r7
 8016444:	bc80      	pop	{r7}
 8016446:	4770      	bx	lr
 8016448:	200016e8 	.word	0x200016e8

0801644c <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016454:	4b06      	ldr	r3, [pc, #24]	; (8016470 <IsJoinNonce10xOk+0x24>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	689b      	ldr	r3, [r3, #8]
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	429a      	cmp	r2, r3
 801645e:	bf8c      	ite	hi
 8016460:	2301      	movhi	r3, #1
 8016462:	2300      	movls	r3, #0
 8016464:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016466:	4618      	mov	r0, r3
 8016468:	370c      	adds	r7, #12
 801646a:	46bd      	mov	sp, r7
 801646c:	bc80      	pop	{r7}
 801646e:	4770      	bx	lr
 8016470:	200016e8 	.word	0x200016e8

08016474 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016482:	2309      	movs	r3, #9
 8016484:	e01c      	b.n	80164c0 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016486:	4a10      	ldr	r2, [pc, #64]	; (80164c8 <LoRaMacCryptoInit+0x54>)
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 801648c:	4b0e      	ldr	r3, [pc, #56]	; (80164c8 <LoRaMacCryptoInit+0x54>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2228      	movs	r2, #40	; 0x28
 8016492:	2100      	movs	r1, #0
 8016494:	4618      	mov	r0, r3
 8016496:	f003 fa31 	bl	80198fc <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 801649a:	4b0b      	ldr	r3, [pc, #44]	; (80164c8 <LoRaMacCryptoInit+0x54>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2201      	movs	r2, #1
 80164a0:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80164a2:	4b09      	ldr	r3, [pc, #36]	; (80164c8 <LoRaMacCryptoInit+0x54>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2201      	movs	r2, #1
 80164a8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80164aa:	4b07      	ldr	r3, [pc, #28]	; (80164c8 <LoRaMacCryptoInit+0x54>)
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2201      	movs	r2, #1
 80164b0:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80164b2:	4b05      	ldr	r3, [pc, #20]	; (80164c8 <LoRaMacCryptoInit+0x54>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2200      	movs	r2, #0
 80164b8:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80164ba:	f7ff ff91 	bl	80163e0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80164be:	2300      	movs	r3, #0
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	3708      	adds	r7, #8
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}
 80164c8:	200016e8 	.word	0x200016e8

080164cc <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80164cc:	b480      	push	{r7}
 80164ce:	b083      	sub	sp, #12
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80164d4:	4b04      	ldr	r3, [pc, #16]	; (80164e8 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	687a      	ldr	r2, [r7, #4]
 80164da:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80164dc:	2300      	movs	r3, #0
}
 80164de:	4618      	mov	r0, r3
 80164e0:	370c      	adds	r7, #12
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bc80      	pop	{r7}
 80164e6:	4770      	bx	lr
 80164e8:	200016e8 	.word	0x200016e8

080164ec <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80164ec:	b480      	push	{r7}
 80164ee:	b083      	sub	sp, #12
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d101      	bne.n	80164fe <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164fa:	230a      	movs	r3, #10
 80164fc:	e006      	b.n	801650c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 80164fe:	4b06      	ldr	r3, [pc, #24]	; (8016518 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	68db      	ldr	r3, [r3, #12]
 8016504:	1c5a      	adds	r2, r3, #1
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801650a:	2300      	movs	r3, #0
}
 801650c:	4618      	mov	r0, r3
 801650e:	370c      	adds	r7, #12
 8016510:	46bd      	mov	sp, r7
 8016512:	bc80      	pop	{r7}
 8016514:	4770      	bx	lr
 8016516:	bf00      	nop
 8016518:	200016e8 	.word	0x200016e8

0801651c <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 801651c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016520:	b08a      	sub	sp, #40	; 0x28
 8016522:	af00      	add	r7, sp, #0
 8016524:	613a      	str	r2, [r7, #16]
 8016526:	60fb      	str	r3, [r7, #12]
 8016528:	4603      	mov	r3, r0
 801652a:	75fb      	strb	r3, [r7, #23]
 801652c:	460b      	mov	r3, r1
 801652e:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016530:	2300      	movs	r3, #0
 8016532:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016534:	2300      	movs	r3, #0
 8016536:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016538:	2313      	movs	r3, #19
 801653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d101      	bne.n	8016548 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016544:	230a      	movs	r3, #10
 8016546:	e057      	b.n	80165f8 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016548:	f107 021c 	add.w	r2, r7, #28
 801654c:	7dfb      	ldrb	r3, [r7, #23]
 801654e:	4611      	mov	r1, r2
 8016550:	4618      	mov	r0, r3
 8016552:	f7ff fea7 	bl	80162a4 <GetLastFcntDown>
 8016556:	4603      	mov	r3, r0
 8016558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801655c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016560:	2b00      	cmp	r3, #0
 8016562:	d002      	beq.n	801656a <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016568:	e046      	b.n	80165f8 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 801656a:	69fb      	ldr	r3, [r7, #28]
 801656c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016570:	d103      	bne.n	801657a <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	693a      	ldr	r2, [r7, #16]
 8016576:	601a      	str	r2, [r3, #0]
 8016578:	e01e      	b.n	80165b8 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801657a:	69fb      	ldr	r3, [r7, #28]
 801657c:	b29b      	uxth	r3, r3
 801657e:	693a      	ldr	r2, [r7, #16]
 8016580:	1ad3      	subs	r3, r2, r3
 8016582:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016586:	2b00      	cmp	r3, #0
 8016588:	dd05      	ble.n	8016596 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801658a:	69fa      	ldr	r2, [r7, #28]
 801658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658e:	441a      	add	r2, r3
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	e010      	b.n	80165b8 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016598:	2b00      	cmp	r3, #0
 801659a:	d104      	bne.n	80165a6 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801659c:	69fa      	ldr	r2, [r7, #28]
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80165a2:	2307      	movs	r3, #7
 80165a4:	e028      	b.n	80165f8 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80165a6:	69fb      	ldr	r3, [r7, #28]
 80165a8:	0c1b      	lsrs	r3, r3, #16
 80165aa:	041b      	lsls	r3, r3, #16
 80165ac:	693a      	ldr	r2, [r7, #16]
 80165ae:	4413      	add	r3, r2
 80165b0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80165b8:	4b12      	ldr	r3, [pc, #72]	; (8016604 <LoRaMacCryptoGetFCntDown+0xe8>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	789b      	ldrb	r3, [r3, #2]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d119      	bne.n	80165f6 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	2200      	movs	r2, #0
 80165c8:	603b      	str	r3, [r7, #0]
 80165ca:	607a      	str	r2, [r7, #4]
 80165cc:	69fb      	ldr	r3, [r7, #28]
 80165ce:	2200      	movs	r2, #0
 80165d0:	469a      	mov	sl, r3
 80165d2:	4693      	mov	fp, r2
 80165d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80165d8:	4611      	mov	r1, r2
 80165da:	ebb1 040a 	subs.w	r4, r1, sl
 80165de:	eb63 050b 	sbc.w	r5, r3, fp
 80165e2:	8abb      	ldrh	r3, [r7, #20]
 80165e4:	2200      	movs	r2, #0
 80165e6:	4698      	mov	r8, r3
 80165e8:	4691      	mov	r9, r2
 80165ea:	4544      	cmp	r4, r8
 80165ec:	eb75 0309 	sbcs.w	r3, r5, r9
 80165f0:	db01      	blt.n	80165f6 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80165f2:	2308      	movs	r3, #8
 80165f4:	e000      	b.n	80165f8 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165f6:	2300      	movs	r3, #0
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3728      	adds	r7, #40	; 0x28
 80165fc:	46bd      	mov	sp, r7
 80165fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016602:	bf00      	nop
 8016604:	200016e8 	.word	0x200016e8

08016608 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016608:	b480      	push	{r7}
 801660a:	b085      	sub	sp, #20
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d101      	bne.n	801661a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016616:	230a      	movs	r3, #10
 8016618:	e019      	b.n	801664e <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801661a:	2300      	movs	r3, #0
 801661c:	60fb      	str	r3, [r7, #12]
 801661e:	e012      	b.n	8016646 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016620:	4b0d      	ldr	r3, [pc, #52]	; (8016658 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016622:	6819      	ldr	r1, [r3, #0]
 8016624:	68fa      	ldr	r2, [r7, #12]
 8016626:	4613      	mov	r3, r2
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	4413      	add	r3, r2
 801662c:	011b      	lsls	r3, r3, #4
 801662e:	461a      	mov	r2, r3
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	4413      	add	r3, r2
 8016634:	68fa      	ldr	r2, [r7, #12]
 8016636:	3206      	adds	r2, #6
 8016638:	0092      	lsls	r2, r2, #2
 801663a:	440a      	add	r2, r1
 801663c:	3204      	adds	r2, #4
 801663e:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	3301      	adds	r3, #1
 8016644:	60fb      	str	r3, [r7, #12]
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	2b00      	cmp	r3, #0
 801664a:	dde9      	ble.n	8016620 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801664c:	2300      	movs	r3, #0
}
 801664e:	4618      	mov	r0, r3
 8016650:	3714      	adds	r7, #20
 8016652:	46bd      	mov	sp, r7
 8016654:	bc80      	pop	{r7}
 8016656:	4770      	bx	lr
 8016658:	200016e8 	.word	0x200016e8

0801665c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	4603      	mov	r3, r0
 8016664:	6039      	str	r1, [r7, #0]
 8016666:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016668:	79fb      	ldrb	r3, [r7, #7]
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	4618      	mov	r0, r3
 801666e:	f7f8 faef 	bl	800ec50 <SecureElementSetKey>
 8016672:	4603      	mov	r3, r0
 8016674:	2b00      	cmp	r3, #0
 8016676:	d001      	beq.n	801667c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016678:	230f      	movs	r3, #15
 801667a:	e021      	b.n	80166c0 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 801667c:	79fb      	ldrb	r3, [r7, #7]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d11d      	bne.n	80166be <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016682:	4b11      	ldr	r3, [pc, #68]	; (80166c8 <LoRaMacCryptoSetKey+0x6c>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	789b      	ldrb	r3, [r3, #2]
 8016688:	210b      	movs	r1, #11
 801668a:	4618      	mov	r0, r3
 801668c:	f000 fa5e 	bl	8016b4c <LoRaMacCryptoDeriveLifeTimeKey>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d001      	beq.n	801669a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016696:	230f      	movs	r3, #15
 8016698:	e012      	b.n	80166c0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801669a:	210c      	movs	r1, #12
 801669c:	2000      	movs	r0, #0
 801669e:	f000 fa55 	bl	8016b4c <LoRaMacCryptoDeriveLifeTimeKey>
 80166a2:	4603      	mov	r3, r0
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d001      	beq.n	80166ac <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166a8:	230f      	movs	r3, #15
 80166aa:	e009      	b.n	80166c0 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80166ac:	210a      	movs	r1, #10
 80166ae:	2000      	movs	r0, #0
 80166b0:	f000 fa4c 	bl	8016b4c <LoRaMacCryptoDeriveLifeTimeKey>
 80166b4:	4603      	mov	r3, r0
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d001      	beq.n	80166be <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166ba:	230f      	movs	r3, #15
 80166bc:	e000      	b.n	80166c0 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80166be:	2300      	movs	r3, #0
}
 80166c0:	4618      	mov	r0, r3
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	200016e8 	.word	0x200016e8

080166cc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af02      	add	r7, sp, #8
 80166d2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d101      	bne.n	80166de <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80166da:	230a      	movs	r3, #10
 80166dc:	e033      	b.n	8016746 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80166de:	2301      	movs	r3, #1
 80166e0:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80166e2:	2300      	movs	r3, #0
 80166e4:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80166e6:	f107 0308 	add.w	r3, r7, #8
 80166ea:	4618      	mov	r0, r3
 80166ec:	f7f8 fc8a 	bl	800f004 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 80166f0:	68ba      	ldr	r2, [r7, #8]
 80166f2:	4b17      	ldr	r3, [pc, #92]	; (8016750 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	b292      	uxth	r2, r2
 80166f8:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80166fa:	4b15      	ldr	r3, [pc, #84]	; (8016750 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	889a      	ldrh	r2, [r3, #4]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f000 fc1b 	bl	8016f40 <LoRaMacSerializerJoinRequest>
 801670a:	4603      	mov	r3, r0
 801670c:	2b00      	cmp	r3, #0
 801670e:	d001      	beq.n	8016714 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016710:	2311      	movs	r3, #17
 8016712:	e018      	b.n	8016746 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6819      	ldr	r1, [r3, #0]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	3318      	adds	r3, #24
 801671c:	7bfa      	ldrb	r2, [r7, #15]
 801671e:	9300      	str	r3, [sp, #0]
 8016720:	4613      	mov	r3, r2
 8016722:	2213      	movs	r2, #19
 8016724:	2000      	movs	r0, #0
 8016726:	f7f8 faf1 	bl	800ed0c <SecureElementComputeAesCmac>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	d001      	beq.n	8016734 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016730:	230f      	movs	r3, #15
 8016732:	e008      	b.n	8016746 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f000 fc03 	bl	8016f40 <LoRaMacSerializerJoinRequest>
 801673a:	4603      	mov	r3, r0
 801673c:	2b00      	cmp	r3, #0
 801673e:	d001      	beq.n	8016744 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016740:	2311      	movs	r3, #17
 8016742:	e000      	b.n	8016746 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016744:	2300      	movs	r3, #0
}
 8016746:	4618      	mov	r0, r3
 8016748:	3710      	adds	r7, #16
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	200016e8 	.word	0x200016e8

08016754 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016754:	b590      	push	{r4, r7, lr}
 8016756:	b097      	sub	sp, #92	; 0x5c
 8016758:	af04      	add	r7, sp, #16
 801675a:	4603      	mov	r3, r0
 801675c:	60b9      	str	r1, [r7, #8]
 801675e:	607a      	str	r2, [r7, #4]
 8016760:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d002      	beq.n	801676e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d101      	bne.n	8016772 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801676e:	230a      	movs	r3, #10
 8016770:	e0d3      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016772:	2313      	movs	r3, #19
 8016774:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016778:	2300      	movs	r3, #0
 801677a:	617b      	str	r3, [r7, #20]
 801677c:	f107 0318 	add.w	r3, r7, #24
 8016780:	221d      	movs	r2, #29
 8016782:	2100      	movs	r1, #0
 8016784:	4618      	mov	r0, r3
 8016786:	f007 fe9b 	bl	801e4c0 <memset>
    uint8_t versionMinor         = 0;
 801678a:	2300      	movs	r3, #0
 801678c:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801678e:	4b65      	ldr	r3, [pc, #404]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	889b      	ldrh	r3, [r3, #4]
 8016794:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	681c      	ldr	r4, [r3, #0]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	791b      	ldrb	r3, [r3, #4]
 80167a0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80167a4:	7bf8      	ldrb	r0, [r7, #15]
 80167a6:	f107 0213 	add.w	r2, r7, #19
 80167aa:	9202      	str	r2, [sp, #8]
 80167ac:	f107 0214 	add.w	r2, r7, #20
 80167b0:	9201      	str	r2, [sp, #4]
 80167b2:	9300      	str	r3, [sp, #0]
 80167b4:	4623      	mov	r3, r4
 80167b6:	460a      	mov	r2, r1
 80167b8:	68b9      	ldr	r1, [r7, #8]
 80167ba:	f7f8 fbad 	bl	800ef18 <SecureElementProcessJoinAccept>
 80167be:	4603      	mov	r3, r0
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d001      	beq.n	80167c8 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167c4:	230f      	movs	r3, #15
 80167c6:	e0a8      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	6818      	ldr	r0, [r3, #0]
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	791b      	ldrb	r3, [r3, #4]
 80167d0:	b29a      	uxth	r2, r3
 80167d2:	f107 0314 	add.w	r3, r7, #20
 80167d6:	4619      	mov	r1, r3
 80167d8:	f003 f855 	bl	8019886 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 f9f0 	bl	8016bc2 <LoRaMacParserJoinAccept>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d001      	beq.n	80167ec <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80167e8:	2310      	movs	r3, #16
 80167ea:	e096      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80167ec:	2300      	movs	r3, #0
 80167ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	799b      	ldrb	r3, [r3, #6]
 80167f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	79db      	ldrb	r3, [r3, #7]
 80167fc:	021b      	lsls	r3, r3, #8
 80167fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016800:	4313      	orrs	r3, r2
 8016802:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	7a1b      	ldrb	r3, [r3, #8]
 8016808:	041b      	lsls	r3, r3, #16
 801680a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801680c:	4313      	orrs	r3, r2
 801680e:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016812:	f7ff fe1b 	bl	801644c <IsJoinNonce10xOk>
 8016816:	4603      	mov	r3, r0
 8016818:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 801681c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016820:	2b00      	cmp	r3, #0
 8016822:	d010      	beq.n	8016846 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016824:	4b3f      	ldr	r3, [pc, #252]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801682a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 801682c:	7cfb      	ldrb	r3, [r7, #19]
 801682e:	210b      	movs	r1, #11
 8016830:	4618      	mov	r0, r3
 8016832:	f000 f98b 	bl	8016b4c <LoRaMacCryptoDeriveLifeTimeKey>
 8016836:	4603      	mov	r3, r0
 8016838:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801683c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016840:	2b00      	cmp	r3, #0
 8016842:	d005      	beq.n	8016850 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016844:	e001      	b.n	801684a <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016846:	2303      	movs	r3, #3
 8016848:	e067      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 801684a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801684e:	e064      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016850:	210c      	movs	r1, #12
 8016852:	2000      	movs	r0, #0
 8016854:	f000 f97a 	bl	8016b4c <LoRaMacCryptoDeriveLifeTimeKey>
 8016858:	4603      	mov	r3, r0
 801685a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801685e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016862:	2b00      	cmp	r3, #0
 8016864:	d002      	beq.n	801686c <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016866:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801686a:	e056      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 801686c:	210a      	movs	r1, #10
 801686e:	2000      	movs	r0, #0
 8016870:	f000 f96c 	bl	8016b4c <LoRaMacCryptoDeriveLifeTimeKey>
 8016874:	4603      	mov	r3, r0
 8016876:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801687a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801687e:	2b00      	cmp	r3, #0
 8016880:	d002      	beq.n	8016888 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016882:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016886:	e048      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	7a5b      	ldrb	r3, [r3, #9]
 801688c:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	7a9b      	ldrb	r3, [r3, #10]
 8016892:	021b      	lsls	r3, r3, #8
 8016894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016896:	4313      	orrs	r3, r2
 8016898:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	7adb      	ldrb	r3, [r3, #11]
 801689e:	041b      	lsls	r3, r3, #16
 80168a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168a2:	4313      	orrs	r3, r2
 80168a4:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80168a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80168ae:	2009      	movs	r0, #9
 80168b0:	f7ff fca8 	bl	8016204 <DeriveSessionKey10x>
 80168b4:	4603      	mov	r3, r0
 80168b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d002      	beq.n	80168c8 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80168c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80168c6:	e028      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80168c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80168ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80168d0:	2008      	movs	r0, #8
 80168d2:	f7ff fc97 	bl	8016204 <DeriveSessionKey10x>
 80168d6:	4603      	mov	r3, r0
 80168d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d002      	beq.n	80168ea <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80168e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80168e8:	e017      	b.n	801691a <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80168ea:	4b0e      	ldr	r3, [pc, #56]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	7cfa      	ldrb	r2, [r7, #19]
 80168f0:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80168f2:	4b0c      	ldr	r3, [pc, #48]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2200      	movs	r2, #0
 80168f8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80168fa:	4b0a      	ldr	r3, [pc, #40]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	f04f 32ff 	mov.w	r2, #4294967295
 8016902:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016904:	4b07      	ldr	r3, [pc, #28]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	f04f 32ff 	mov.w	r2, #4294967295
 801690c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801690e:	4b05      	ldr	r3, [pc, #20]	; (8016924 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	f04f 32ff 	mov.w	r2, #4294967295
 8016916:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016918:	2300      	movs	r3, #0
}
 801691a:	4618      	mov	r0, r3
 801691c:	374c      	adds	r7, #76	; 0x4c
 801691e:	46bd      	mov	sp, r7
 8016920:	bd90      	pop	{r4, r7, pc}
 8016922:	bf00      	nop
 8016924:	200016e8 	.word	0x200016e8

08016928 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016928:	b590      	push	{r4, r7, lr}
 801692a:	b08b      	sub	sp, #44	; 0x2c
 801692c:	af04      	add	r7, sp, #16
 801692e:	60f8      	str	r0, [r7, #12]
 8016930:	607b      	str	r3, [r7, #4]
 8016932:	460b      	mov	r3, r1
 8016934:	72fb      	strb	r3, [r7, #11]
 8016936:	4613      	mov	r3, r2
 8016938:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801693a:	2313      	movs	r3, #19
 801693c:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801693e:	2309      	movs	r3, #9
 8016940:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d101      	bne.n	801694c <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016948:	230a      	movs	r3, #10
 801694a:	e05f      	b.n	8016a0c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 801694c:	4b31      	ldr	r3, [pc, #196]	; (8016a14 <LoRaMacCryptoSecureMessage+0xec>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	68db      	ldr	r3, [r3, #12]
 8016952:	68fa      	ldr	r2, [r7, #12]
 8016954:	429a      	cmp	r2, r3
 8016956:	d201      	bcs.n	801695c <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016958:	2306      	movs	r3, #6
 801695a:	e057      	b.n	8016a0c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d101      	bne.n	801696a <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016966:	2308      	movs	r3, #8
 8016968:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 801696a:	4b2a      	ldr	r3, [pc, #168]	; (8016a14 <LoRaMacCryptoSecureMessage+0xec>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	68db      	ldr	r3, [r3, #12]
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	429a      	cmp	r2, r3
 8016974:	d916      	bls.n	80169a4 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016980:	b219      	sxth	r1, r3
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	689c      	ldr	r4, [r3, #8]
 8016986:	7dfa      	ldrb	r2, [r7, #23]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	9301      	str	r3, [sp, #4]
 801698c:	2300      	movs	r3, #0
 801698e:	9300      	str	r3, [sp, #0]
 8016990:	4623      	mov	r3, r4
 8016992:	f7ff fa43 	bl	8015e1c <PayloadEncrypt>
 8016996:	4603      	mov	r3, r0
 8016998:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801699a:	7dbb      	ldrb	r3, [r7, #22]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d001      	beq.n	80169a4 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80169a0:	7dbb      	ldrb	r3, [r7, #22]
 80169a2:	e033      	b.n	8016a0c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f000 fb4d 	bl	8017044 <LoRaMacSerializerData>
 80169aa:	4603      	mov	r3, r0
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d001      	beq.n	80169b4 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80169b0:	2311      	movs	r3, #17
 80169b2:	e02b      	b.n	8016a0c <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80169b4:	2308      	movs	r3, #8
 80169b6:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6818      	ldr	r0, [r3, #0]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	791b      	ldrb	r3, [r3, #4]
 80169c0:	b29b      	uxth	r3, r3
 80169c2:	3b04      	subs	r3, #4
 80169c4:	b299      	uxth	r1, r3
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	689b      	ldr	r3, [r3, #8]
 80169ca:	687a      	ldr	r2, [r7, #4]
 80169cc:	322c      	adds	r2, #44	; 0x2c
 80169ce:	7dfc      	ldrb	r4, [r7, #23]
 80169d0:	9203      	str	r2, [sp, #12]
 80169d2:	68fa      	ldr	r2, [r7, #12]
 80169d4:	9202      	str	r2, [sp, #8]
 80169d6:	9301      	str	r3, [sp, #4]
 80169d8:	2300      	movs	r3, #0
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	2300      	movs	r3, #0
 80169de:	4622      	mov	r2, r4
 80169e0:	f7ff fb1d 	bl	801601e <ComputeCmacB0>
 80169e4:	4603      	mov	r3, r0
 80169e6:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169e8:	7dbb      	ldrb	r3, [r7, #22]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d001      	beq.n	80169f2 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80169ee:	7dbb      	ldrb	r3, [r7, #22]
 80169f0:	e00c      	b.n	8016a0c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f000 fb26 	bl	8017044 <LoRaMacSerializerData>
 80169f8:	4603      	mov	r3, r0
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d001      	beq.n	8016a02 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80169fe:	2311      	movs	r3, #17
 8016a00:	e004      	b.n	8016a0c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016a02:	4b04      	ldr	r3, [pc, #16]	; (8016a14 <LoRaMacCryptoSecureMessage+0xec>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	68fa      	ldr	r2, [r7, #12]
 8016a08:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a0a:	2300      	movs	r3, #0
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	371c      	adds	r7, #28
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd90      	pop	{r4, r7, pc}
 8016a14:	200016e8 	.word	0x200016e8

08016a18 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016a18:	b590      	push	{r4, r7, lr}
 8016a1a:	b08b      	sub	sp, #44	; 0x2c
 8016a1c:	af04      	add	r7, sp, #16
 8016a1e:	60b9      	str	r1, [r7, #8]
 8016a20:	607b      	str	r3, [r7, #4]
 8016a22:	4603      	mov	r3, r0
 8016a24:	73fb      	strb	r3, [r7, #15]
 8016a26:	4613      	mov	r3, r2
 8016a28:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d101      	bne.n	8016a34 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a30:	230a      	movs	r3, #10
 8016a32:	e084      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016a34:	7bbb      	ldrb	r3, [r7, #14]
 8016a36:	6879      	ldr	r1, [r7, #4]
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7ff fc6f 	bl	801631c <CheckFCntDown>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	f083 0301 	eor.w	r3, r3, #1
 8016a44:	b2db      	uxtb	r3, r3
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d001      	beq.n	8016a4e <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016a4a:	2306      	movs	r3, #6
 8016a4c:	e077      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016a4e:	2313      	movs	r3, #19
 8016a50:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016a52:	2309      	movs	r3, #9
 8016a54:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016a56:	2308      	movs	r3, #8
 8016a58:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a5c:	f000 f97c 	bl	8016d58 <LoRaMacParserData>
 8016a60:	4603      	mov	r3, r0
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d001      	beq.n	8016a6a <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016a66:	2310      	movs	r3, #16
 8016a68:	e069      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016a6a:	f107 0210 	add.w	r2, r7, #16
 8016a6e:	7bfb      	ldrb	r3, [r7, #15]
 8016a70:	4611      	mov	r1, r2
 8016a72:	4618      	mov	r0, r3
 8016a74:	f7ff fba0 	bl	80161b8 <GetKeyAddrItem>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a7c:	7d7b      	ldrb	r3, [r7, #21]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d001      	beq.n	8016a86 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016a82:	7d7b      	ldrb	r3, [r7, #21]
 8016a84:	e05b      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016a86:	693b      	ldr	r3, [r7, #16]
 8016a88:	785b      	ldrb	r3, [r3, #1]
 8016a8a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016a8c:	693b      	ldr	r3, [r7, #16]
 8016a8e:	789b      	ldrb	r3, [r3, #2]
 8016a90:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a94:	689b      	ldr	r3, [r3, #8]
 8016a96:	68ba      	ldr	r2, [r7, #8]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d001      	beq.n	8016aa0 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016a9c:	2302      	movs	r3, #2
 8016a9e:	e04e      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa2:	7b1b      	ldrb	r3, [r3, #12]
 8016aa4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016aa8:	b2db      	uxtb	r3, r3
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	bf14      	ite	ne
 8016aae:	2301      	movne	r3, #1
 8016ab0:	2300      	moveq	r3, #0
 8016ab2:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016ab4:	4b24      	ldr	r3, [pc, #144]	; (8016b48 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	789b      	ldrb	r3, [r3, #2]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d101      	bne.n	8016ac2 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac4:	6818      	ldr	r0, [r3, #0]
 8016ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ac8:	791b      	ldrb	r3, [r3, #4]
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	3b04      	subs	r3, #4
 8016ace:	b299      	uxth	r1, r3
 8016ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ad4:	7dbc      	ldrb	r4, [r7, #22]
 8016ad6:	7d3a      	ldrb	r2, [r7, #20]
 8016ad8:	9303      	str	r3, [sp, #12]
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	9302      	str	r3, [sp, #8]
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	9301      	str	r3, [sp, #4]
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	4623      	mov	r3, r4
 8016ae8:	f7ff fad7 	bl	801609a <VerifyCmacB0>
 8016aec:	4603      	mov	r3, r0
 8016aee:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016af0:	7d7b      	ldrb	r3, [r7, #21]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d001      	beq.n	8016afa <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8016af6:	7d7b      	ldrb	r3, [r7, #21]
 8016af8:	e021      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d101      	bne.n	8016b08 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016b04:	2308      	movs	r3, #8
 8016b06:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016b12:	b219      	sxth	r1, r3
 8016b14:	7dfa      	ldrb	r2, [r7, #23]
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	9301      	str	r3, [sp, #4]
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	9300      	str	r3, [sp, #0]
 8016b1e:	68bb      	ldr	r3, [r7, #8]
 8016b20:	f7ff f97c 	bl	8015e1c <PayloadEncrypt>
 8016b24:	4603      	mov	r3, r0
 8016b26:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016b28:	7d7b      	ldrb	r3, [r7, #21]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d001      	beq.n	8016b32 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8016b2e:	7d7b      	ldrb	r3, [r7, #21]
 8016b30:	e005      	b.n	8016b3e <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8016b32:	7bbb      	ldrb	r3, [r7, #14]
 8016b34:	6879      	ldr	r1, [r7, #4]
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7ff fc14 	bl	8016364 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016b3c:	2300      	movs	r3, #0
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	371c      	adds	r7, #28
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd90      	pop	{r4, r7, pc}
 8016b46:	bf00      	nop
 8016b48:	200016e8 	.word	0x200016e8

08016b4c <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b088      	sub	sp, #32
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	4603      	mov	r3, r0
 8016b54:	460a      	mov	r2, r1
 8016b56:	71fb      	strb	r3, [r7, #7]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	60fb      	str	r3, [r7, #12]
 8016b60:	f107 0310 	add.w	r3, r7, #16
 8016b64:	2200      	movs	r2, #0
 8016b66:	601a      	str	r2, [r3, #0]
 8016b68:	605a      	str	r2, [r3, #4]
 8016b6a:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8016b70:	79bb      	ldrb	r3, [r7, #6]
 8016b72:	2b0c      	cmp	r3, #12
 8016b74:	d00b      	beq.n	8016b8e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8016b76:	2b0c      	cmp	r3, #12
 8016b78:	dc0f      	bgt.n	8016b9a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8016b7a:	2b0a      	cmp	r3, #10
 8016b7c:	d00a      	beq.n	8016b94 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8016b7e:	2b0b      	cmp	r3, #11
 8016b80:	d10b      	bne.n	8016b9a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8016b82:	79fb      	ldrb	r3, [r7, #7]
 8016b84:	2b01      	cmp	r3, #1
 8016b86:	d10a      	bne.n	8016b9e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8016b88:	2320      	movs	r3, #32
 8016b8a:	733b      	strb	r3, [r7, #12]
            }
            break;
 8016b8c:	e007      	b.n	8016b9e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8016b8e:	230b      	movs	r3, #11
 8016b90:	77fb      	strb	r3, [r7, #31]
            break;
 8016b92:	e005      	b.n	8016ba0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8016b94:	2330      	movs	r3, #48	; 0x30
 8016b96:	733b      	strb	r3, [r7, #12]
            break;
 8016b98:	e002      	b.n	8016ba0 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016b9a:	230b      	movs	r3, #11
 8016b9c:	e00d      	b.n	8016bba <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8016b9e:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016ba0:	79ba      	ldrb	r2, [r7, #6]
 8016ba2:	7ff9      	ldrb	r1, [r7, #31]
 8016ba4:	f107 030c 	add.w	r3, r7, #12
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f7f8 f975 	bl	800ee98 <SecureElementDeriveAndStoreKey>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d001      	beq.n	8016bb8 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016bb4:	230f      	movs	r3, #15
 8016bb6:	e000      	b.n	8016bba <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bb8:	2300      	movs	r3, #0
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3720      	adds	r7, #32
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b084      	sub	sp, #16
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d003      	beq.n	8016bd8 <LoRaMacParserJoinAccept+0x16>
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d101      	bne.n	8016bdc <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016bd8:	2302      	movs	r3, #2
 8016bda:	e0b9      	b.n	8016d50 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016bdc:	2300      	movs	r3, #0
 8016bde:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681a      	ldr	r2, [r3, #0]
 8016be4:	89fb      	ldrh	r3, [r7, #14]
 8016be6:	1c59      	adds	r1, r3, #1
 8016be8:	81f9      	strh	r1, [r7, #14]
 8016bea:	4413      	add	r3, r2
 8016bec:	781a      	ldrb	r2, [r3, #0]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	1d98      	adds	r0, r3, #6
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681a      	ldr	r2, [r3, #0]
 8016bfa:	89fb      	ldrh	r3, [r7, #14]
 8016bfc:	4413      	add	r3, r2
 8016bfe:	2203      	movs	r2, #3
 8016c00:	4619      	mov	r1, r3
 8016c02:	f002 fe40 	bl	8019886 <memcpy1>
    bufItr = bufItr + 3;
 8016c06:	89fb      	ldrh	r3, [r7, #14]
 8016c08:	3303      	adds	r3, #3
 8016c0a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	f103 0009 	add.w	r0, r3, #9
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	681a      	ldr	r2, [r3, #0]
 8016c16:	89fb      	ldrh	r3, [r7, #14]
 8016c18:	4413      	add	r3, r2
 8016c1a:	2203      	movs	r2, #3
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	f002 fe32 	bl	8019886 <memcpy1>
    bufItr = bufItr + 3;
 8016c22:	89fb      	ldrh	r3, [r7, #14]
 8016c24:	3303      	adds	r3, #3
 8016c26:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681a      	ldr	r2, [r3, #0]
 8016c2c:	89fb      	ldrh	r3, [r7, #14]
 8016c2e:	1c59      	adds	r1, r3, #1
 8016c30:	81f9      	strh	r1, [r7, #14]
 8016c32:	4413      	add	r3, r2
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	461a      	mov	r2, r3
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	89fb      	ldrh	r3, [r7, #14]
 8016c42:	1c59      	adds	r1, r3, #1
 8016c44:	81f9      	strh	r1, [r7, #14]
 8016c46:	4413      	add	r3, r2
 8016c48:	781b      	ldrb	r3, [r3, #0]
 8016c4a:	021a      	lsls	r2, r3, #8
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	68db      	ldr	r3, [r3, #12]
 8016c50:	431a      	orrs	r2, r3
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	89fb      	ldrh	r3, [r7, #14]
 8016c5c:	1c59      	adds	r1, r3, #1
 8016c5e:	81f9      	strh	r1, [r7, #14]
 8016c60:	4413      	add	r3, r2
 8016c62:	781b      	ldrb	r3, [r3, #0]
 8016c64:	041a      	lsls	r2, r3, #16
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	68db      	ldr	r3, [r3, #12]
 8016c6a:	431a      	orrs	r2, r3
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681a      	ldr	r2, [r3, #0]
 8016c74:	89fb      	ldrh	r3, [r7, #14]
 8016c76:	1c59      	adds	r1, r3, #1
 8016c78:	81f9      	strh	r1, [r7, #14]
 8016c7a:	4413      	add	r3, r2
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	061a      	lsls	r2, r3, #24
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	68db      	ldr	r3, [r3, #12]
 8016c84:	431a      	orrs	r2, r3
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681a      	ldr	r2, [r3, #0]
 8016c8e:	89fb      	ldrh	r3, [r7, #14]
 8016c90:	1c59      	adds	r1, r3, #1
 8016c92:	81f9      	strh	r1, [r7, #14]
 8016c94:	4413      	add	r3, r2
 8016c96:	781a      	ldrb	r2, [r3, #0]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681a      	ldr	r2, [r3, #0]
 8016ca0:	89fb      	ldrh	r3, [r7, #14]
 8016ca2:	1c59      	adds	r1, r3, #1
 8016ca4:	81f9      	strh	r1, [r7, #14]
 8016ca6:	4413      	add	r3, r2
 8016ca8:	781a      	ldrb	r2, [r3, #0]
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	791b      	ldrb	r3, [r3, #4]
 8016cb2:	1f1a      	subs	r2, r3, #4
 8016cb4:	89fb      	ldrh	r3, [r7, #14]
 8016cb6:	1ad3      	subs	r3, r2, r3
 8016cb8:	2b10      	cmp	r3, #16
 8016cba:	d10e      	bne.n	8016cda <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f103 0012 	add.w	r0, r3, #18
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	89fb      	ldrh	r3, [r7, #14]
 8016cc8:	4413      	add	r3, r2
 8016cca:	2210      	movs	r2, #16
 8016ccc:	4619      	mov	r1, r3
 8016cce:	f002 fdda 	bl	8019886 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016cd2:	89fb      	ldrh	r3, [r7, #14]
 8016cd4:	3310      	adds	r3, #16
 8016cd6:	81fb      	strh	r3, [r7, #14]
 8016cd8:	e008      	b.n	8016cec <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	791b      	ldrb	r3, [r3, #4]
 8016cde:	1f1a      	subs	r2, r3, #4
 8016ce0:	89fb      	ldrh	r3, [r7, #14]
 8016ce2:	1ad3      	subs	r3, r2, r3
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	dd01      	ble.n	8016cec <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016ce8:	2301      	movs	r3, #1
 8016cea:	e031      	b.n	8016d50 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	89fb      	ldrh	r3, [r7, #14]
 8016cf2:	1c59      	adds	r1, r3, #1
 8016cf4:	81f9      	strh	r1, [r7, #14]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	781b      	ldrb	r3, [r3, #0]
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	681a      	ldr	r2, [r3, #0]
 8016d04:	89fb      	ldrh	r3, [r7, #14]
 8016d06:	1c59      	adds	r1, r3, #1
 8016d08:	81f9      	strh	r1, [r7, #14]
 8016d0a:	4413      	add	r3, r2
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	021a      	lsls	r2, r3, #8
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d14:	431a      	orrs	r2, r3
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	89fb      	ldrh	r3, [r7, #14]
 8016d20:	1c59      	adds	r1, r3, #1
 8016d22:	81f9      	strh	r1, [r7, #14]
 8016d24:	4413      	add	r3, r2
 8016d26:	781b      	ldrb	r3, [r3, #0]
 8016d28:	041a      	lsls	r2, r3, #16
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d2e:	431a      	orrs	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681a      	ldr	r2, [r3, #0]
 8016d38:	89fb      	ldrh	r3, [r7, #14]
 8016d3a:	1c59      	adds	r1, r3, #1
 8016d3c:	81f9      	strh	r1, [r7, #14]
 8016d3e:	4413      	add	r3, r2
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	061a      	lsls	r2, r3, #24
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d48:	431a      	orrs	r2, r3
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016d4e:	2300      	movs	r3, #0
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3710      	adds	r7, #16
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d003      	beq.n	8016d6e <LoRaMacParserData+0x16>
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d101      	bne.n	8016d72 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016d6e:	2302      	movs	r3, #2
 8016d70:	e0e2      	b.n	8016f38 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681a      	ldr	r2, [r3, #0]
 8016d7a:	89fb      	ldrh	r3, [r7, #14]
 8016d7c:	1c59      	adds	r1, r3, #1
 8016d7e:	81f9      	strh	r1, [r7, #14]
 8016d80:	4413      	add	r3, r2
 8016d82:	781a      	ldrb	r2, [r3, #0]
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	89fb      	ldrh	r3, [r7, #14]
 8016d8e:	1c59      	adds	r1, r3, #1
 8016d90:	81f9      	strh	r1, [r7, #14]
 8016d92:	4413      	add	r3, r2
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	461a      	mov	r2, r3
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681a      	ldr	r2, [r3, #0]
 8016da0:	89fb      	ldrh	r3, [r7, #14]
 8016da2:	1c59      	adds	r1, r3, #1
 8016da4:	81f9      	strh	r1, [r7, #14]
 8016da6:	4413      	add	r3, r2
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	021a      	lsls	r2, r3, #8
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	689b      	ldr	r3, [r3, #8]
 8016db0:	431a      	orrs	r2, r3
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681a      	ldr	r2, [r3, #0]
 8016dba:	89fb      	ldrh	r3, [r7, #14]
 8016dbc:	1c59      	adds	r1, r3, #1
 8016dbe:	81f9      	strh	r1, [r7, #14]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	041a      	lsls	r2, r3, #16
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	689b      	ldr	r3, [r3, #8]
 8016dca:	431a      	orrs	r2, r3
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681a      	ldr	r2, [r3, #0]
 8016dd4:	89fb      	ldrh	r3, [r7, #14]
 8016dd6:	1c59      	adds	r1, r3, #1
 8016dd8:	81f9      	strh	r1, [r7, #14]
 8016dda:	4413      	add	r3, r2
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	061a      	lsls	r2, r3, #24
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	689b      	ldr	r3, [r3, #8]
 8016de4:	431a      	orrs	r2, r3
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	89fb      	ldrh	r3, [r7, #14]
 8016df0:	1c59      	adds	r1, r3, #1
 8016df2:	81f9      	strh	r1, [r7, #14]
 8016df4:	4413      	add	r3, r2
 8016df6:	781a      	ldrb	r2, [r3, #0]
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681a      	ldr	r2, [r3, #0]
 8016e00:	89fb      	ldrh	r3, [r7, #14]
 8016e02:	1c59      	adds	r1, r3, #1
 8016e04:	81f9      	strh	r1, [r7, #14]
 8016e06:	4413      	add	r3, r2
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	b29a      	uxth	r2, r3
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	89fb      	ldrh	r3, [r7, #14]
 8016e16:	1c59      	adds	r1, r3, #1
 8016e18:	81f9      	strh	r1, [r7, #14]
 8016e1a:	4413      	add	r3, r2
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	0219      	lsls	r1, r3, #8
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	89db      	ldrh	r3, [r3, #14]
 8016e24:	b21a      	sxth	r2, r3
 8016e26:	b20b      	sxth	r3, r1
 8016e28:	4313      	orrs	r3, r2
 8016e2a:	b21b      	sxth	r3, r3
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	f103 0010 	add.w	r0, r3, #16
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	681a      	ldr	r2, [r3, #0]
 8016e3c:	89fb      	ldrh	r3, [r7, #14]
 8016e3e:	18d1      	adds	r1, r2, r3
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	7b1b      	ldrb	r3, [r3, #12]
 8016e44:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	f002 fd1a 	bl	8019886 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	7b1b      	ldrb	r3, [r3, #12]
 8016e56:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016e5a:	b2db      	uxtb	r3, r3
 8016e5c:	b29a      	uxth	r2, r3
 8016e5e:	89fb      	ldrh	r3, [r7, #14]
 8016e60:	4413      	add	r3, r2
 8016e62:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2200      	movs	r2, #0
 8016e68:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	791b      	ldrb	r3, [r3, #4]
 8016e78:	461a      	mov	r2, r3
 8016e7a:	89fb      	ldrh	r3, [r7, #14]
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	2b04      	cmp	r3, #4
 8016e80:	dd28      	ble.n	8016ed4 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681a      	ldr	r2, [r3, #0]
 8016e86:	89fb      	ldrh	r3, [r7, #14]
 8016e88:	1c59      	adds	r1, r3, #1
 8016e8a:	81f9      	strh	r1, [r7, #14]
 8016e8c:	4413      	add	r3, r2
 8016e8e:	781a      	ldrb	r2, [r3, #0]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	791a      	ldrb	r2, [r3, #4]
 8016e9a:	89fb      	ldrh	r3, [r7, #14]
 8016e9c:	b2db      	uxtb	r3, r3
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	3b04      	subs	r3, #4
 8016ea4:	b2da      	uxtb	r2, r3
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681a      	ldr	r2, [r3, #0]
 8016eb4:	89fb      	ldrh	r3, [r7, #14]
 8016eb6:	18d1      	adds	r1, r2, r3
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016ebe:	b29b      	uxth	r3, r3
 8016ec0:	461a      	mov	r2, r3
 8016ec2:	f002 fce0 	bl	8019886 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016ecc:	b29a      	uxth	r2, r3
 8016ece:	89fb      	ldrh	r3, [r7, #14]
 8016ed0:	4413      	add	r3, r2
 8016ed2:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681a      	ldr	r2, [r3, #0]
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	791b      	ldrb	r3, [r3, #4]
 8016edc:	3b04      	subs	r3, #4
 8016ede:	4413      	add	r3, r2
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6819      	ldr	r1, [r3, #0]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	791b      	ldrb	r3, [r3, #4]
 8016ef4:	3b03      	subs	r3, #3
 8016ef6:	440b      	add	r3, r1
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	021b      	lsls	r3, r3, #8
 8016efc:	431a      	orrs	r2, r3
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	6819      	ldr	r1, [r3, #0]
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	791b      	ldrb	r3, [r3, #4]
 8016f0e:	3b02      	subs	r3, #2
 8016f10:	440b      	add	r3, r1
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	041b      	lsls	r3, r3, #16
 8016f16:	431a      	orrs	r2, r3
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	6819      	ldr	r1, [r3, #0]
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	791b      	ldrb	r3, [r3, #4]
 8016f28:	3b01      	subs	r3, #1
 8016f2a:	440b      	add	r3, r1
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	061b      	lsls	r3, r3, #24
 8016f30:	431a      	orrs	r2, r3
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016f36:	2300      	movs	r3, #0
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3710      	adds	r7, #16
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d003      	beq.n	8016f56 <LoRaMacSerializerJoinRequest+0x16>
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d101      	bne.n	8016f5a <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016f56:	2301      	movs	r3, #1
 8016f58:	e070      	b.n	801703c <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	791b      	ldrb	r3, [r3, #4]
 8016f62:	2b16      	cmp	r3, #22
 8016f64:	d801      	bhi.n	8016f6a <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016f66:	2302      	movs	r3, #2
 8016f68:	e068      	b.n	801703c <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681a      	ldr	r2, [r3, #0]
 8016f6e:	89fb      	ldrh	r3, [r7, #14]
 8016f70:	1c59      	adds	r1, r3, #1
 8016f72:	81f9      	strh	r1, [r7, #14]
 8016f74:	4413      	add	r3, r2
 8016f76:	687a      	ldr	r2, [r7, #4]
 8016f78:	7952      	ldrb	r2, [r2, #5]
 8016f7a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	681a      	ldr	r2, [r3, #0]
 8016f80:	89fb      	ldrh	r3, [r7, #14]
 8016f82:	18d0      	adds	r0, r2, r3
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	3306      	adds	r3, #6
 8016f88:	2208      	movs	r2, #8
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	f002 fc96 	bl	80198bc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016f90:	89fb      	ldrh	r3, [r7, #14]
 8016f92:	3308      	adds	r3, #8
 8016f94:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	89fb      	ldrh	r3, [r7, #14]
 8016f9c:	18d0      	adds	r0, r2, r3
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	330e      	adds	r3, #14
 8016fa2:	2208      	movs	r2, #8
 8016fa4:	4619      	mov	r1, r3
 8016fa6:	f002 fc89 	bl	80198bc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016faa:	89fb      	ldrh	r3, [r7, #14]
 8016fac:	3308      	adds	r3, #8
 8016fae:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	8ad9      	ldrh	r1, [r3, #22]
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	89fb      	ldrh	r3, [r7, #14]
 8016fba:	1c58      	adds	r0, r3, #1
 8016fbc:	81f8      	strh	r0, [r7, #14]
 8016fbe:	4413      	add	r3, r2
 8016fc0:	b2ca      	uxtb	r2, r1
 8016fc2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	8adb      	ldrh	r3, [r3, #22]
 8016fc8:	0a1b      	lsrs	r3, r3, #8
 8016fca:	b299      	uxth	r1, r3
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	89fb      	ldrh	r3, [r7, #14]
 8016fd2:	1c58      	adds	r0, r3, #1
 8016fd4:	81f8      	strh	r0, [r7, #14]
 8016fd6:	4413      	add	r3, r2
 8016fd8:	b2ca      	uxtb	r2, r1
 8016fda:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	6999      	ldr	r1, [r3, #24]
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	89fb      	ldrh	r3, [r7, #14]
 8016fe6:	1c58      	adds	r0, r3, #1
 8016fe8:	81f8      	strh	r0, [r7, #14]
 8016fea:	4413      	add	r3, r2
 8016fec:	b2ca      	uxtb	r2, r1
 8016fee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	699b      	ldr	r3, [r3, #24]
 8016ff4:	0a19      	lsrs	r1, r3, #8
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681a      	ldr	r2, [r3, #0]
 8016ffa:	89fb      	ldrh	r3, [r7, #14]
 8016ffc:	1c58      	adds	r0, r3, #1
 8016ffe:	81f8      	strh	r0, [r7, #14]
 8017000:	4413      	add	r3, r2
 8017002:	b2ca      	uxtb	r2, r1
 8017004:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	699b      	ldr	r3, [r3, #24]
 801700a:	0c19      	lsrs	r1, r3, #16
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681a      	ldr	r2, [r3, #0]
 8017010:	89fb      	ldrh	r3, [r7, #14]
 8017012:	1c58      	adds	r0, r3, #1
 8017014:	81f8      	strh	r0, [r7, #14]
 8017016:	4413      	add	r3, r2
 8017018:	b2ca      	uxtb	r2, r1
 801701a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	699b      	ldr	r3, [r3, #24]
 8017020:	0e19      	lsrs	r1, r3, #24
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681a      	ldr	r2, [r3, #0]
 8017026:	89fb      	ldrh	r3, [r7, #14]
 8017028:	1c58      	adds	r0, r3, #1
 801702a:	81f8      	strh	r0, [r7, #14]
 801702c:	4413      	add	r3, r2
 801702e:	b2ca      	uxtb	r2, r1
 8017030:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017032:	89fb      	ldrh	r3, [r7, #14]
 8017034:	b2da      	uxtb	r2, r3
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801703a:	2300      	movs	r3, #0
}
 801703c:	4618      	mov	r0, r3
 801703e:	3710      	adds	r7, #16
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}

08017044 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b084      	sub	sp, #16
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d003      	beq.n	801705a <LoRaMacSerializerData+0x16>
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d101      	bne.n	801705e <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801705a:	2301      	movs	r3, #1
 801705c:	e0e5      	b.n	801722a <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801705e:	2300      	movs	r3, #0
 8017060:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017062:	2308      	movs	r3, #8
 8017064:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	7b1b      	ldrb	r3, [r3, #12]
 801706a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801706e:	b2db      	uxtb	r3, r3
 8017070:	b29a      	uxth	r2, r3
 8017072:	89bb      	ldrh	r3, [r7, #12]
 8017074:	4413      	add	r3, r2
 8017076:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801707e:	2b00      	cmp	r3, #0
 8017080:	d002      	beq.n	8017088 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017082:	89bb      	ldrh	r3, [r7, #12]
 8017084:	3301      	adds	r3, #1
 8017086:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801708e:	b29a      	uxth	r2, r3
 8017090:	89bb      	ldrh	r3, [r7, #12]
 8017092:	4413      	add	r3, r2
 8017094:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017096:	89bb      	ldrh	r3, [r7, #12]
 8017098:	3304      	adds	r3, #4
 801709a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	791b      	ldrb	r3, [r3, #4]
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	89ba      	ldrh	r2, [r7, #12]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d901      	bls.n	80170ac <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80170a8:	2302      	movs	r3, #2
 80170aa:	e0be      	b.n	801722a <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	89fb      	ldrh	r3, [r7, #14]
 80170b2:	1c59      	adds	r1, r3, #1
 80170b4:	81f9      	strh	r1, [r7, #14]
 80170b6:	4413      	add	r3, r2
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	7952      	ldrb	r2, [r2, #5]
 80170bc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	6899      	ldr	r1, [r3, #8]
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	89fb      	ldrh	r3, [r7, #14]
 80170c8:	1c58      	adds	r0, r3, #1
 80170ca:	81f8      	strh	r0, [r7, #14]
 80170cc:	4413      	add	r3, r2
 80170ce:	b2ca      	uxtb	r2, r1
 80170d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	689b      	ldr	r3, [r3, #8]
 80170d6:	0a19      	lsrs	r1, r3, #8
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	89fb      	ldrh	r3, [r7, #14]
 80170de:	1c58      	adds	r0, r3, #1
 80170e0:	81f8      	strh	r0, [r7, #14]
 80170e2:	4413      	add	r3, r2
 80170e4:	b2ca      	uxtb	r2, r1
 80170e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	689b      	ldr	r3, [r3, #8]
 80170ec:	0c19      	lsrs	r1, r3, #16
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	89fb      	ldrh	r3, [r7, #14]
 80170f4:	1c58      	adds	r0, r3, #1
 80170f6:	81f8      	strh	r0, [r7, #14]
 80170f8:	4413      	add	r3, r2
 80170fa:	b2ca      	uxtb	r2, r1
 80170fc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	689b      	ldr	r3, [r3, #8]
 8017102:	0e19      	lsrs	r1, r3, #24
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	89fb      	ldrh	r3, [r7, #14]
 801710a:	1c58      	adds	r0, r3, #1
 801710c:	81f8      	strh	r0, [r7, #14]
 801710e:	4413      	add	r3, r2
 8017110:	b2ca      	uxtb	r2, r1
 8017112:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681a      	ldr	r2, [r3, #0]
 8017118:	89fb      	ldrh	r3, [r7, #14]
 801711a:	1c59      	adds	r1, r3, #1
 801711c:	81f9      	strh	r1, [r7, #14]
 801711e:	4413      	add	r3, r2
 8017120:	687a      	ldr	r2, [r7, #4]
 8017122:	7b12      	ldrb	r2, [r2, #12]
 8017124:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	89d9      	ldrh	r1, [r3, #14]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	89fb      	ldrh	r3, [r7, #14]
 8017130:	1c58      	adds	r0, r3, #1
 8017132:	81f8      	strh	r0, [r7, #14]
 8017134:	4413      	add	r3, r2
 8017136:	b2ca      	uxtb	r2, r1
 8017138:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	89db      	ldrh	r3, [r3, #14]
 801713e:	0a1b      	lsrs	r3, r3, #8
 8017140:	b299      	uxth	r1, r3
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	89fb      	ldrh	r3, [r7, #14]
 8017148:	1c58      	adds	r0, r3, #1
 801714a:	81f8      	strh	r0, [r7, #14]
 801714c:	4413      	add	r3, r2
 801714e:	b2ca      	uxtb	r2, r1
 8017150:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	89fb      	ldrh	r3, [r7, #14]
 8017158:	18d0      	adds	r0, r2, r3
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f103 0110 	add.w	r1, r3, #16
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	7b1b      	ldrb	r3, [r3, #12]
 8017164:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017168:	b2db      	uxtb	r3, r3
 801716a:	b29b      	uxth	r3, r3
 801716c:	461a      	mov	r2, r3
 801716e:	f002 fb8a 	bl	8019886 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	7b1b      	ldrb	r3, [r3, #12]
 8017176:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801717a:	b2db      	uxtb	r3, r3
 801717c:	b29a      	uxth	r2, r3
 801717e:	89fb      	ldrh	r3, [r7, #14]
 8017180:	4413      	add	r3, r2
 8017182:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801718a:	2b00      	cmp	r3, #0
 801718c:	d009      	beq.n	80171a2 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	89fb      	ldrh	r3, [r7, #14]
 8017194:	1c59      	adds	r1, r3, #1
 8017196:	81f9      	strh	r1, [r7, #14]
 8017198:	4413      	add	r3, r2
 801719a:	687a      	ldr	r2, [r7, #4]
 801719c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80171a0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	89fb      	ldrh	r3, [r7, #14]
 80171a8:	18d0      	adds	r0, r2, r3
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80171b4:	b29b      	uxth	r3, r3
 80171b6:	461a      	mov	r2, r3
 80171b8:	f002 fb65 	bl	8019886 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	89fb      	ldrh	r3, [r7, #14]
 80171c6:	4413      	add	r3, r2
 80171c8:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	89fb      	ldrh	r3, [r7, #14]
 80171d4:	1c58      	adds	r0, r3, #1
 80171d6:	81f8      	strh	r0, [r7, #14]
 80171d8:	4413      	add	r3, r2
 80171da:	b2ca      	uxtb	r2, r1
 80171dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e2:	0a19      	lsrs	r1, r3, #8
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681a      	ldr	r2, [r3, #0]
 80171e8:	89fb      	ldrh	r3, [r7, #14]
 80171ea:	1c58      	adds	r0, r3, #1
 80171ec:	81f8      	strh	r0, [r7, #14]
 80171ee:	4413      	add	r3, r2
 80171f0:	b2ca      	uxtb	r2, r1
 80171f2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171f8:	0c19      	lsrs	r1, r3, #16
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	89fb      	ldrh	r3, [r7, #14]
 8017200:	1c58      	adds	r0, r3, #1
 8017202:	81f8      	strh	r0, [r7, #14]
 8017204:	4413      	add	r3, r2
 8017206:	b2ca      	uxtb	r2, r1
 8017208:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801720e:	0e19      	lsrs	r1, r3, #24
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681a      	ldr	r2, [r3, #0]
 8017214:	89fb      	ldrh	r3, [r7, #14]
 8017216:	1c58      	adds	r0, r3, #1
 8017218:	81f8      	strh	r0, [r7, #14]
 801721a:	4413      	add	r3, r2
 801721c:	b2ca      	uxtb	r2, r1
 801721e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017220:	89fb      	ldrh	r3, [r7, #14]
 8017222:	b2da      	uxtb	r2, r3
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017228:	2300      	movs	r3, #0
}
 801722a:	4618      	mov	r0, r3
 801722c:	3710      	adds	r7, #16
 801722e:	46bd      	mov	sp, r7
 8017230:	bd80      	pop	{r7, pc}

08017232 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017232:	b480      	push	{r7}
 8017234:	b083      	sub	sp, #12
 8017236:	af00      	add	r7, sp, #0
 8017238:	4603      	mov	r3, r0
 801723a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801723c:	79fb      	ldrb	r3, [r7, #7]
 801723e:	2b05      	cmp	r3, #5
 8017240:	d101      	bne.n	8017246 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017242:	2301      	movs	r3, #1
 8017244:	e000      	b.n	8017248 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017246:	2300      	movs	r3, #0
        }
    }
}
 8017248:	4618      	mov	r0, r3
 801724a:	370c      	adds	r7, #12
 801724c:	46bd      	mov	sp, r7
 801724e:	bc80      	pop	{r7}
 8017250:	4770      	bx	lr

08017252 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017252:	b580      	push	{r7, lr}
 8017254:	b084      	sub	sp, #16
 8017256:	af00      	add	r7, sp, #0
 8017258:	4603      	mov	r3, r0
 801725a:	6039      	str	r1, [r7, #0]
 801725c:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801725e:	2300      	movs	r3, #0
 8017260:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017262:	79fb      	ldrb	r3, [r7, #7]
 8017264:	2b05      	cmp	r3, #5
 8017266:	d105      	bne.n	8017274 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017268:	6838      	ldr	r0, [r7, #0]
 801726a:	f001 f995 	bl	8018598 <RegionEU868GetPhyParam>
 801726e:	4603      	mov	r3, r0
 8017270:	60fb      	str	r3, [r7, #12]
 8017272:	e001      	b.n	8017278 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	4618      	mov	r0, r3
 801727c:	3710      	adds	r7, #16
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}

08017282 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017282:	b580      	push	{r7, lr}
 8017284:	b082      	sub	sp, #8
 8017286:	af00      	add	r7, sp, #0
 8017288:	4603      	mov	r3, r0
 801728a:	6039      	str	r1, [r7, #0]
 801728c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801728e:	79fb      	ldrb	r3, [r7, #7]
 8017290:	2b05      	cmp	r3, #5
 8017292:	d103      	bne.n	801729c <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017294:	6838      	ldr	r0, [r7, #0]
 8017296:	f001 facb 	bl	8018830 <RegionEU868SetBandTxDone>
 801729a:	e000      	b.n	801729e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801729c:	bf00      	nop
        }
    }
}
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	4603      	mov	r3, r0
 80172ac:	6039      	str	r1, [r7, #0]
 80172ae:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80172b0:	79fb      	ldrb	r3, [r7, #7]
 80172b2:	2b05      	cmp	r3, #5
 80172b4:	d103      	bne.n	80172be <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80172b6:	6838      	ldr	r0, [r7, #0]
 80172b8:	f001 fae6 	bl	8018888 <RegionEU868InitDefaults>
 80172bc:	e000      	b.n	80172c0 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80172be:	bf00      	nop
        }
    }
}
 80172c0:	bf00      	nop
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	4603      	mov	r3, r0
 80172d0:	6039      	str	r1, [r7, #0]
 80172d2:	71fb      	strb	r3, [r7, #7]
 80172d4:	4613      	mov	r3, r2
 80172d6:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80172d8:	79fb      	ldrb	r3, [r7, #7]
 80172da:	2b05      	cmp	r3, #5
 80172dc:	d106      	bne.n	80172ec <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80172de:	79bb      	ldrb	r3, [r7, #6]
 80172e0:	4619      	mov	r1, r3
 80172e2:	6838      	ldr	r0, [r7, #0]
 80172e4:	f001 fb6e 	bl	80189c4 <RegionEU868Verify>
 80172e8:	4603      	mov	r3, r0
 80172ea:	e000      	b.n	80172ee <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80172ec:	2300      	movs	r3, #0
        }
    }
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3708      	adds	r7, #8
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80172f6:	b580      	push	{r7, lr}
 80172f8:	b082      	sub	sp, #8
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	4603      	mov	r3, r0
 80172fe:	6039      	str	r1, [r7, #0]
 8017300:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017302:	79fb      	ldrb	r3, [r7, #7]
 8017304:	2b05      	cmp	r3, #5
 8017306:	d103      	bne.n	8017310 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017308:	6838      	ldr	r0, [r7, #0]
 801730a:	f001 fbd7 	bl	8018abc <RegionEU868ApplyCFList>
 801730e:	e000      	b.n	8017312 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017310:	bf00      	nop
        }
    }
}
 8017312:	bf00      	nop
 8017314:	3708      	adds	r7, #8
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}

0801731a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 801731a:	b580      	push	{r7, lr}
 801731c:	b082      	sub	sp, #8
 801731e:	af00      	add	r7, sp, #0
 8017320:	4603      	mov	r3, r0
 8017322:	6039      	str	r1, [r7, #0]
 8017324:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017326:	79fb      	ldrb	r3, [r7, #7]
 8017328:	2b05      	cmp	r3, #5
 801732a:	d104      	bne.n	8017336 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801732c:	6838      	ldr	r0, [r7, #0]
 801732e:	f001 fc39 	bl	8018ba4 <RegionEU868ChanMaskSet>
 8017332:	4603      	mov	r3, r0
 8017334:	e000      	b.n	8017338 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017336:	2300      	movs	r3, #0
        }
    }
}
 8017338:	4618      	mov	r0, r3
 801733a:	3708      	adds	r7, #8
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}

08017340 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	af00      	add	r7, sp, #0
 8017346:	603b      	str	r3, [r7, #0]
 8017348:	4603      	mov	r3, r0
 801734a:	71fb      	strb	r3, [r7, #7]
 801734c:	460b      	mov	r3, r1
 801734e:	71bb      	strb	r3, [r7, #6]
 8017350:	4613      	mov	r3, r2
 8017352:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017354:	79fb      	ldrb	r3, [r7, #7]
 8017356:	2b05      	cmp	r3, #5
 8017358:	d107      	bne.n	801736a <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801735a:	7979      	ldrb	r1, [r7, #5]
 801735c:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	683a      	ldr	r2, [r7, #0]
 8017364:	f001 fc48 	bl	8018bf8 <RegionEU868ComputeRxWindowParameters>
 8017368:	e000      	b.n	801736c <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801736a:	bf00      	nop
        }
    }
}
 801736c:	bf00      	nop
 801736e:	3708      	adds	r7, #8
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}

08017374 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b084      	sub	sp, #16
 8017378:	af00      	add	r7, sp, #0
 801737a:	4603      	mov	r3, r0
 801737c:	60b9      	str	r1, [r7, #8]
 801737e:	607a      	str	r2, [r7, #4]
 8017380:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017382:	7bfb      	ldrb	r3, [r7, #15]
 8017384:	2b05      	cmp	r3, #5
 8017386:	d105      	bne.n	8017394 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017388:	6879      	ldr	r1, [r7, #4]
 801738a:	68b8      	ldr	r0, [r7, #8]
 801738c:	f001 fc8e 	bl	8018cac <RegionEU868RxConfig>
 8017390:	4603      	mov	r3, r0
 8017392:	e000      	b.n	8017396 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017394:	2300      	movs	r3, #0
        }
    }
}
 8017396:	4618      	mov	r0, r3
 8017398:	3710      	adds	r7, #16
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}

0801739e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801739e:	b580      	push	{r7, lr}
 80173a0:	b084      	sub	sp, #16
 80173a2:	af00      	add	r7, sp, #0
 80173a4:	60b9      	str	r1, [r7, #8]
 80173a6:	607a      	str	r2, [r7, #4]
 80173a8:	603b      	str	r3, [r7, #0]
 80173aa:	4603      	mov	r3, r0
 80173ac:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80173ae:	7bfb      	ldrb	r3, [r7, #15]
 80173b0:	2b05      	cmp	r3, #5
 80173b2:	d106      	bne.n	80173c2 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80173b4:	683a      	ldr	r2, [r7, #0]
 80173b6:	6879      	ldr	r1, [r7, #4]
 80173b8:	68b8      	ldr	r0, [r7, #8]
 80173ba:	f001 fd47 	bl	8018e4c <RegionEU868TxConfig>
 80173be:	4603      	mov	r3, r0
 80173c0:	e000      	b.n	80173c4 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80173c2:	2300      	movs	r3, #0
        }
    }
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3710      	adds	r7, #16
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}

080173cc <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b086      	sub	sp, #24
 80173d0:	af02      	add	r7, sp, #8
 80173d2:	60b9      	str	r1, [r7, #8]
 80173d4:	607a      	str	r2, [r7, #4]
 80173d6:	603b      	str	r3, [r7, #0]
 80173d8:	4603      	mov	r3, r0
 80173da:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80173dc:	7bfb      	ldrb	r3, [r7, #15]
 80173de:	2b05      	cmp	r3, #5
 80173e0:	d109      	bne.n	80173f6 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80173e2:	69fb      	ldr	r3, [r7, #28]
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	69bb      	ldr	r3, [r7, #24]
 80173e8:	683a      	ldr	r2, [r7, #0]
 80173ea:	6879      	ldr	r1, [r7, #4]
 80173ec:	68b8      	ldr	r0, [r7, #8]
 80173ee:	f001 fdfd 	bl	8018fec <RegionEU868LinkAdrReq>
 80173f2:	4603      	mov	r3, r0
 80173f4:	e000      	b.n	80173f8 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80173f6:	2300      	movs	r3, #0
        }
    }
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	3710      	adds	r7, #16
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}

08017400 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b082      	sub	sp, #8
 8017404:	af00      	add	r7, sp, #0
 8017406:	4603      	mov	r3, r0
 8017408:	6039      	str	r1, [r7, #0]
 801740a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801740c:	79fb      	ldrb	r3, [r7, #7]
 801740e:	2b05      	cmp	r3, #5
 8017410:	d104      	bne.n	801741c <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017412:	6838      	ldr	r0, [r7, #0]
 8017414:	f001 ff0c 	bl	8019230 <RegionEU868RxParamSetupReq>
 8017418:	4603      	mov	r3, r0
 801741a:	e000      	b.n	801741e <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801741c:	2300      	movs	r3, #0
        }
    }
}
 801741e:	4618      	mov	r0, r3
 8017420:	3708      	adds	r7, #8
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}

08017426 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017426:	b580      	push	{r7, lr}
 8017428:	b082      	sub	sp, #8
 801742a:	af00      	add	r7, sp, #0
 801742c:	4603      	mov	r3, r0
 801742e:	6039      	str	r1, [r7, #0]
 8017430:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017432:	79fb      	ldrb	r3, [r7, #7]
 8017434:	2b05      	cmp	r3, #5
 8017436:	d104      	bne.n	8017442 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017438:	6838      	ldr	r0, [r7, #0]
 801743a:	f001 ff37 	bl	80192ac <RegionEU868NewChannelReq>
 801743e:	4603      	mov	r3, r0
 8017440:	e000      	b.n	8017444 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017442:	2300      	movs	r3, #0
        }
    }
}
 8017444:	4618      	mov	r0, r3
 8017446:	3708      	adds	r7, #8
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b082      	sub	sp, #8
 8017450:	af00      	add	r7, sp, #0
 8017452:	4603      	mov	r3, r0
 8017454:	6039      	str	r1, [r7, #0]
 8017456:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017458:	79fb      	ldrb	r3, [r7, #7]
 801745a:	2b05      	cmp	r3, #5
 801745c:	d104      	bne.n	8017468 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801745e:	6838      	ldr	r0, [r7, #0]
 8017460:	f001 ff82 	bl	8019368 <RegionEU868TxParamSetupReq>
 8017464:	4603      	mov	r3, r0
 8017466:	e000      	b.n	801746a <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017468:	2300      	movs	r3, #0
        }
    }
}
 801746a:	4618      	mov	r0, r3
 801746c:	3708      	adds	r7, #8
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017472:	b580      	push	{r7, lr}
 8017474:	b082      	sub	sp, #8
 8017476:	af00      	add	r7, sp, #0
 8017478:	4603      	mov	r3, r0
 801747a:	6039      	str	r1, [r7, #0]
 801747c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801747e:	79fb      	ldrb	r3, [r7, #7]
 8017480:	2b05      	cmp	r3, #5
 8017482:	d104      	bne.n	801748e <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017484:	6838      	ldr	r0, [r7, #0]
 8017486:	f001 ff7b 	bl	8019380 <RegionEU868DlChannelReq>
 801748a:	4603      	mov	r3, r0
 801748c:	e000      	b.n	8017490 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 801748e:	2300      	movs	r3, #0
        }
    }
}
 8017490:	4618      	mov	r0, r3
 8017492:	3708      	adds	r7, #8
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}

08017498 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b082      	sub	sp, #8
 801749c:	af00      	add	r7, sp, #0
 801749e:	4603      	mov	r3, r0
 80174a0:	71fb      	strb	r3, [r7, #7]
 80174a2:	460b      	mov	r3, r1
 80174a4:	71bb      	strb	r3, [r7, #6]
 80174a6:	4613      	mov	r3, r2
 80174a8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80174aa:	79fb      	ldrb	r3, [r7, #7]
 80174ac:	2b05      	cmp	r3, #5
 80174ae:	d108      	bne.n	80174c2 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80174b0:	797a      	ldrb	r2, [r7, #5]
 80174b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80174b6:	4611      	mov	r1, r2
 80174b8:	4618      	mov	r0, r3
 80174ba:	f001 ffab 	bl	8019414 <RegionEU868AlternateDr>
 80174be:	4603      	mov	r3, r0
 80174c0:	e000      	b.n	80174c4 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80174c2:	2300      	movs	r3, #0
        }
    }
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3708      	adds	r7, #8
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b084      	sub	sp, #16
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	60b9      	str	r1, [r7, #8]
 80174d4:	607a      	str	r2, [r7, #4]
 80174d6:	603b      	str	r3, [r7, #0]
 80174d8:	4603      	mov	r3, r0
 80174da:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80174dc:	7bfb      	ldrb	r3, [r7, #15]
 80174de:	2b05      	cmp	r3, #5
 80174e0:	d107      	bne.n	80174f2 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80174e2:	69bb      	ldr	r3, [r7, #24]
 80174e4:	683a      	ldr	r2, [r7, #0]
 80174e6:	6879      	ldr	r1, [r7, #4]
 80174e8:	68b8      	ldr	r0, [r7, #8]
 80174ea:	f001 ffa3 	bl	8019434 <RegionEU868NextChannel>
 80174ee:	4603      	mov	r3, r0
 80174f0:	e000      	b.n	80174f4 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80174f2:	2309      	movs	r3, #9
        }
    }
}
 80174f4:	4618      	mov	r0, r3
 80174f6:	3710      	adds	r7, #16
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
 8017502:	4603      	mov	r3, r0
 8017504:	6039      	str	r1, [r7, #0]
 8017506:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017508:	79fb      	ldrb	r3, [r7, #7]
 801750a:	2b05      	cmp	r3, #5
 801750c:	d103      	bne.n	8017516 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 801750e:	6838      	ldr	r0, [r7, #0]
 8017510:	f002 f90a 	bl	8019728 <RegionEU868SetContinuousWave>
 8017514:	e000      	b.n	8017518 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017516:	bf00      	nop
        }
    }
}
 8017518:	bf00      	nop
 801751a:	3708      	adds	r7, #8
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}

08017520 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017520:	b590      	push	{r4, r7, lr}
 8017522:	b083      	sub	sp, #12
 8017524:	af00      	add	r7, sp, #0
 8017526:	4604      	mov	r4, r0
 8017528:	4608      	mov	r0, r1
 801752a:	4611      	mov	r1, r2
 801752c:	461a      	mov	r2, r3
 801752e:	4623      	mov	r3, r4
 8017530:	71fb      	strb	r3, [r7, #7]
 8017532:	4603      	mov	r3, r0
 8017534:	71bb      	strb	r3, [r7, #6]
 8017536:	460b      	mov	r3, r1
 8017538:	717b      	strb	r3, [r7, #5]
 801753a:	4613      	mov	r3, r2
 801753c:	713b      	strb	r3, [r7, #4]
    switch( region )
 801753e:	79fb      	ldrb	r3, [r7, #7]
 8017540:	2b05      	cmp	r3, #5
 8017542:	d109      	bne.n	8017558 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017544:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017548:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801754c:	79bb      	ldrb	r3, [r7, #6]
 801754e:	4618      	mov	r0, r3
 8017550:	f002 f938 	bl	80197c4 <RegionEU868ApplyDrOffset>
 8017554:	4603      	mov	r3, r0
 8017556:	e000      	b.n	801755a <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017558:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 801755a:	4618      	mov	r0, r3
 801755c:	370c      	adds	r7, #12
 801755e:	46bd      	mov	sp, r7
 8017560:	bd90      	pop	{r4, r7, pc}
	...

08017564 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017564:	b480      	push	{r7}
 8017566:	b083      	sub	sp, #12
 8017568:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801756a:	4b04      	ldr	r3, [pc, #16]	; (801757c <RegionGetVersion+0x18>)
 801756c:	607b      	str	r3, [r7, #4]

    return version;
 801756e:	687b      	ldr	r3, [r7, #4]
}
 8017570:	4618      	mov	r0, r3
 8017572:	370c      	adds	r7, #12
 8017574:	46bd      	mov	sp, r7
 8017576:	bc80      	pop	{r7}
 8017578:	4770      	bx	lr
 801757a:	bf00      	nop
 801757c:	01010003 	.word	0x01010003

08017580 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017580:	b480      	push	{r7}
 8017582:	b087      	sub	sp, #28
 8017584:	af00      	add	r7, sp, #0
 8017586:	60f8      	str	r0, [r7, #12]
 8017588:	4608      	mov	r0, r1
 801758a:	4639      	mov	r1, r7
 801758c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017590:	4603      	mov	r3, r0
 8017592:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	881b      	ldrh	r3, [r3, #0]
 8017598:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801759a:	7afb      	ldrb	r3, [r7, #11]
 801759c:	f083 0301 	eor.w	r3, r3, #1
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d01b      	beq.n	80175de <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80175a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80175aa:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80175b2:	d202      	bcs.n	80175ba <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80175b4:	2364      	movs	r3, #100	; 0x64
 80175b6:	82bb      	strh	r3, [r7, #20]
 80175b8:	e00b      	b.n	80175d2 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80175c0:	4293      	cmp	r3, r2
 80175c2:	d803      	bhi.n	80175cc <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80175c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80175c8:	82bb      	strh	r3, [r7, #20]
 80175ca:	e002      	b.n	80175d2 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80175cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80175d0:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80175d2:	8aba      	ldrh	r2, [r7, #20]
 80175d4:	8afb      	ldrh	r3, [r7, #22]
 80175d6:	4293      	cmp	r3, r2
 80175d8:	bf38      	it	cc
 80175da:	4613      	movcc	r3, r2
 80175dc:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80175de:	8afb      	ldrh	r3, [r7, #22]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d101      	bne.n	80175e8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80175e4:	2301      	movs	r3, #1
 80175e6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80175e8:	8afb      	ldrh	r3, [r7, #22]
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	371c      	adds	r7, #28
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bc80      	pop	{r7}
 80175f2:	4770      	bx	lr

080175f4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b08e      	sub	sp, #56	; 0x38
 80175f8:	af02      	add	r7, sp, #8
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	4608      	mov	r0, r1
 80175fe:	4639      	mov	r1, r7
 8017600:	e881 000c 	stmia.w	r1, {r2, r3}
 8017604:	4603      	mov	r3, r0
 8017606:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	881b      	ldrh	r3, [r3, #0]
 801760c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801760e:	4b4b      	ldr	r3, [pc, #300]	; (801773c <SetMaxTimeCredits+0x148>)
 8017610:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017612:	463b      	mov	r3, r7
 8017614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017618:	f005 fdc0 	bl	801d19c <SysTimeToMs>
 801761c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801761e:	f107 0314 	add.w	r3, r7, #20
 8017622:	2200      	movs	r2, #0
 8017624:	601a      	str	r2, [r3, #0]
 8017626:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017628:	7af9      	ldrb	r1, [r7, #11]
 801762a:	463b      	mov	r3, r7
 801762c:	cb0c      	ldmia	r3, {r2, r3}
 801762e:	68f8      	ldr	r0, [r7, #12]
 8017630:	f7ff ffa6 	bl	8017580 <GetDutyCycle>
 8017634:	4603      	mov	r3, r0
 8017636:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017638:	7afb      	ldrb	r3, [r7, #11]
 801763a:	f083 0301 	eor.w	r3, r3, #1
 801763e:	b2db      	uxtb	r3, r3
 8017640:	2b00      	cmp	r3, #0
 8017642:	d062      	beq.n	801770a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017644:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017646:	2b64      	cmp	r3, #100	; 0x64
 8017648:	d105      	bne.n	8017656 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801764a:	4b3c      	ldr	r3, [pc, #240]	; (801773c <SetMaxTimeCredits+0x148>)
 801764c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017652:	609a      	str	r2, [r3, #8]
 8017654:	e00b      	b.n	801766e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017656:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801765c:	d105      	bne.n	801766a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801765e:	4b38      	ldr	r3, [pc, #224]	; (8017740 <SetMaxTimeCredits+0x14c>)
 8017660:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017666:	609a      	str	r2, [r3, #8]
 8017668:	e001      	b.n	801766e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801766a:	4b36      	ldr	r3, [pc, #216]	; (8017744 <SetMaxTimeCredits+0x150>)
 801766c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	689a      	ldr	r2, [r3, #8]
 8017672:	f107 031c 	add.w	r3, r7, #28
 8017676:	4611      	mov	r1, r2
 8017678:	4618      	mov	r0, r3
 801767a:	f005 fdb7 	bl	801d1ec <SysTimeFromMs>
 801767e:	f107 0014 	add.w	r0, r7, #20
 8017682:	6a3b      	ldr	r3, [r7, #32]
 8017684:	9300      	str	r3, [sp, #0]
 8017686:	69fb      	ldr	r3, [r7, #28]
 8017688:	463a      	mov	r2, r7
 801768a:	ca06      	ldmia	r2, {r1, r2}
 801768c:	f005 fcc7 	bl	801d01e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017690:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017694:	f083 0301 	eor.w	r3, r3, #1
 8017698:	b2db      	uxtb	r3, r3
 801769a:	2b00      	cmp	r3, #0
 801769c:	d006      	beq.n	80176ac <SetMaxTimeCredits+0xb8>
 801769e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80176a2:	f083 0301 	eor.w	r3, r3, #1
 80176a6:	b2db      	uxtb	r3, r3
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d108      	bne.n	80176be <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80176b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d103      	bne.n	80176be <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80176b6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80176b8:	4a23      	ldr	r2, [pc, #140]	; (8017748 <SetMaxTimeCredits+0x154>)
 80176ba:	4293      	cmp	r3, r2
 80176bc:	d92f      	bls.n	801771e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176c2:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	4a21      	ldr	r2, [pc, #132]	; (801774c <SetMaxTimeCredits+0x158>)
 80176c8:	4293      	cmp	r3, r2
 80176ca:	d928      	bls.n	801771e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80176cc:	683b      	ldr	r3, [r7, #0]
 80176ce:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80176d2:	3b30      	subs	r3, #48	; 0x30
 80176d4:	4a1e      	ldr	r2, [pc, #120]	; (8017750 <SetMaxTimeCredits+0x15c>)
 80176d6:	fba2 2303 	umull	r2, r3, r2, r3
 80176da:	0c1b      	lsrs	r3, r3, #16
 80176dc:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	4a1c      	ldr	r2, [pc, #112]	; (8017754 <SetMaxTimeCredits+0x160>)
 80176e2:	fb02 f303 	mul.w	r3, r2, r3
 80176e6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80176e8:	697b      	ldr	r3, [r7, #20]
 80176ea:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80176ee:	3330      	adds	r3, #48	; 0x30
 80176f0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80176f2:	2300      	movs	r3, #0
 80176f4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80176f6:	f107 0314 	add.w	r3, r7, #20
 80176fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80176fe:	f005 fd4d 	bl	801d19c <SysTimeToMs>
 8017702:	4602      	mov	r2, r0
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	609a      	str	r2, [r3, #8]
 8017708:	e009      	b.n	801771e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801770a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801770e:	f083 0301 	eor.w	r3, r3, #1
 8017712:	b2db      	uxtb	r3, r3
 8017714:	2b00      	cmp	r3, #0
 8017716:	d002      	beq.n	801771e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801771c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	685b      	ldr	r3, [r3, #4]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d102      	bne.n	801772c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801772a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017730:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017732:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017734:	4618      	mov	r0, r3
 8017736:	3730      	adds	r7, #48	; 0x30
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}
 801773c:	001b7740 	.word	0x001b7740
 8017740:	0112a880 	.word	0x0112a880
 8017744:	02932e00 	.word	0x02932e00
 8017748:	0001517f 	.word	0x0001517f
 801774c:	0001ec2f 	.word	0x0001ec2f
 8017750:	c22e4507 	.word	0xc22e4507
 8017754:	00015180 	.word	0x00015180

08017758 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b086      	sub	sp, #24
 801775c:	af02      	add	r7, sp, #8
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	4608      	mov	r0, r1
 8017762:	4611      	mov	r1, r2
 8017764:	461a      	mov	r2, r3
 8017766:	4603      	mov	r3, r0
 8017768:	70fb      	strb	r3, [r7, #3]
 801776a:	460b      	mov	r3, r1
 801776c:	70bb      	strb	r3, [r7, #2]
 801776e:	4613      	mov	r3, r2
 8017770:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017772:	78f9      	ldrb	r1, [r7, #3]
 8017774:	787b      	ldrb	r3, [r7, #1]
 8017776:	9301      	str	r3, [sp, #4]
 8017778:	78bb      	ldrb	r3, [r7, #2]
 801777a:	9300      	str	r3, [sp, #0]
 801777c:	f107 0318 	add.w	r3, r7, #24
 8017780:	cb0c      	ldmia	r3, {r2, r3}
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7ff ff36 	bl	80175f4 <SetMaxTimeCredits>
 8017788:	4603      	mov	r3, r0
 801778a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801778c:	78fb      	ldrb	r3, [r7, #3]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d00a      	beq.n	80177a8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	4618      	mov	r0, r3
 8017798:	f006 fb3c 	bl	801de14 <UTIL_TIMER_GetElapsedTime>
 801779c:	4602      	mov	r2, r0
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	441a      	add	r2, r3
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	68da      	ldr	r2, [r3, #12]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	691b      	ldr	r3, [r3, #16]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d903      	bls.n	80177bc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	691a      	ldr	r2, [r3, #16]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6a3a      	ldr	r2, [r7, #32]
 80177c0:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80177c2:	89fb      	ldrh	r3, [r7, #14]
}
 80177c4:	4618      	mov	r0, r3
 80177c6:	3710      	adds	r7, #16
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}

080177cc <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80177cc:	b480      	push	{r7}
 80177ce:	b085      	sub	sp, #20
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	4603      	mov	r3, r0
 80177d4:	460a      	mov	r2, r1
 80177d6:	80fb      	strh	r3, [r7, #6]
 80177d8:	4613      	mov	r3, r2
 80177da:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80177dc:	2300      	movs	r3, #0
 80177de:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80177e0:	2300      	movs	r3, #0
 80177e2:	73bb      	strb	r3, [r7, #14]
 80177e4:	e011      	b.n	801780a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80177e6:	88fa      	ldrh	r2, [r7, #6]
 80177e8:	7bbb      	ldrb	r3, [r7, #14]
 80177ea:	2101      	movs	r1, #1
 80177ec:	fa01 f303 	lsl.w	r3, r1, r3
 80177f0:	401a      	ands	r2, r3
 80177f2:	7bbb      	ldrb	r3, [r7, #14]
 80177f4:	2101      	movs	r1, #1
 80177f6:	fa01 f303 	lsl.w	r3, r1, r3
 80177fa:	429a      	cmp	r2, r3
 80177fc:	d102      	bne.n	8017804 <CountChannels+0x38>
        {
            nbActiveBits++;
 80177fe:	7bfb      	ldrb	r3, [r7, #15]
 8017800:	3301      	adds	r3, #1
 8017802:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017804:	7bbb      	ldrb	r3, [r7, #14]
 8017806:	3301      	adds	r3, #1
 8017808:	73bb      	strb	r3, [r7, #14]
 801780a:	7bba      	ldrb	r2, [r7, #14]
 801780c:	797b      	ldrb	r3, [r7, #5]
 801780e:	429a      	cmp	r2, r3
 8017810:	d3e9      	bcc.n	80177e6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017812:	7bfb      	ldrb	r3, [r7, #15]
}
 8017814:	4618      	mov	r0, r3
 8017816:	3714      	adds	r7, #20
 8017818:	46bd      	mov	sp, r7
 801781a:	bc80      	pop	{r7}
 801781c:	4770      	bx	lr

0801781e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801781e:	b580      	push	{r7, lr}
 8017820:	b084      	sub	sp, #16
 8017822:	af00      	add	r7, sp, #0
 8017824:	6039      	str	r1, [r7, #0]
 8017826:	4611      	mov	r1, r2
 8017828:	461a      	mov	r2, r3
 801782a:	4603      	mov	r3, r0
 801782c:	71fb      	strb	r3, [r7, #7]
 801782e:	460b      	mov	r3, r1
 8017830:	71bb      	strb	r3, [r7, #6]
 8017832:	4613      	mov	r3, r2
 8017834:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017836:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801783a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801783e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017842:	4618      	mov	r0, r3
 8017844:	f000 f85d 	bl	8017902 <RegionCommonValueInRange>
 8017848:	4603      	mov	r3, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d101      	bne.n	8017852 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801784e:	2300      	movs	r3, #0
 8017850:	e053      	b.n	80178fa <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017852:	2300      	movs	r3, #0
 8017854:	73fb      	strb	r3, [r7, #15]
 8017856:	2300      	movs	r3, #0
 8017858:	73bb      	strb	r3, [r7, #14]
 801785a:	e049      	b.n	80178f0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801785c:	2300      	movs	r3, #0
 801785e:	737b      	strb	r3, [r7, #13]
 8017860:	e03d      	b.n	80178de <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017862:	7bbb      	ldrb	r3, [r7, #14]
 8017864:	005b      	lsls	r3, r3, #1
 8017866:	683a      	ldr	r2, [r7, #0]
 8017868:	4413      	add	r3, r2
 801786a:	881b      	ldrh	r3, [r3, #0]
 801786c:	461a      	mov	r2, r3
 801786e:	7b7b      	ldrb	r3, [r7, #13]
 8017870:	fa42 f303 	asr.w	r3, r2, r3
 8017874:	f003 0301 	and.w	r3, r3, #1
 8017878:	2b00      	cmp	r3, #0
 801787a:	d02d      	beq.n	80178d8 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801787c:	7bfa      	ldrb	r2, [r7, #15]
 801787e:	7b7b      	ldrb	r3, [r7, #13]
 8017880:	4413      	add	r3, r2
 8017882:	461a      	mov	r2, r3
 8017884:	4613      	mov	r3, r2
 8017886:	005b      	lsls	r3, r3, #1
 8017888:	4413      	add	r3, r2
 801788a:	009b      	lsls	r3, r3, #2
 801788c:	461a      	mov	r2, r3
 801788e:	69fb      	ldr	r3, [r7, #28]
 8017890:	4413      	add	r3, r2
 8017892:	7a1b      	ldrb	r3, [r3, #8]
 8017894:	f343 0303 	sbfx	r3, r3, #0, #4
 8017898:	b25b      	sxtb	r3, r3
 801789a:	f003 030f 	and.w	r3, r3, #15
 801789e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80178a0:	7bfa      	ldrb	r2, [r7, #15]
 80178a2:	7b7b      	ldrb	r3, [r7, #13]
 80178a4:	4413      	add	r3, r2
 80178a6:	461a      	mov	r2, r3
 80178a8:	4613      	mov	r3, r2
 80178aa:	005b      	lsls	r3, r3, #1
 80178ac:	4413      	add	r3, r2
 80178ae:	009b      	lsls	r3, r3, #2
 80178b0:	461a      	mov	r2, r3
 80178b2:	69fb      	ldr	r3, [r7, #28]
 80178b4:	4413      	add	r3, r2
 80178b6:	7a1b      	ldrb	r3, [r3, #8]
 80178b8:	f343 1303 	sbfx	r3, r3, #4, #4
 80178bc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80178be:	f003 030f 	and.w	r3, r3, #15
 80178c2:	b25a      	sxtb	r2, r3
 80178c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80178c8:	4618      	mov	r0, r3
 80178ca:	f000 f81a 	bl	8017902 <RegionCommonValueInRange>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2b01      	cmp	r3, #1
 80178d2:	d101      	bne.n	80178d8 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80178d4:	2301      	movs	r3, #1
 80178d6:	e010      	b.n	80178fa <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80178d8:	7b7b      	ldrb	r3, [r7, #13]
 80178da:	3301      	adds	r3, #1
 80178dc:	737b      	strb	r3, [r7, #13]
 80178de:	7b7b      	ldrb	r3, [r7, #13]
 80178e0:	2b0f      	cmp	r3, #15
 80178e2:	d9be      	bls.n	8017862 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80178e4:	7bfb      	ldrb	r3, [r7, #15]
 80178e6:	3310      	adds	r3, #16
 80178e8:	73fb      	strb	r3, [r7, #15]
 80178ea:	7bbb      	ldrb	r3, [r7, #14]
 80178ec:	3301      	adds	r3, #1
 80178ee:	73bb      	strb	r3, [r7, #14]
 80178f0:	7bfa      	ldrb	r2, [r7, #15]
 80178f2:	79fb      	ldrb	r3, [r7, #7]
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d3b1      	bcc.n	801785c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80178f8:	2300      	movs	r3, #0
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3710      	adds	r7, #16
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}

08017902 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017902:	b480      	push	{r7}
 8017904:	b083      	sub	sp, #12
 8017906:	af00      	add	r7, sp, #0
 8017908:	4603      	mov	r3, r0
 801790a:	71fb      	strb	r3, [r7, #7]
 801790c:	460b      	mov	r3, r1
 801790e:	71bb      	strb	r3, [r7, #6]
 8017910:	4613      	mov	r3, r2
 8017912:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017914:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017918:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801791c:	429a      	cmp	r2, r3
 801791e:	db07      	blt.n	8017930 <RegionCommonValueInRange+0x2e>
 8017920:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017924:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017928:	429a      	cmp	r2, r3
 801792a:	dc01      	bgt.n	8017930 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 801792c:	2301      	movs	r3, #1
 801792e:	e000      	b.n	8017932 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017930:	2300      	movs	r3, #0
}
 8017932:	4618      	mov	r0, r3
 8017934:	370c      	adds	r7, #12
 8017936:	46bd      	mov	sp, r7
 8017938:	bc80      	pop	{r7}
 801793a:	4770      	bx	lr

0801793c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801793c:	b480      	push	{r7}
 801793e:	b085      	sub	sp, #20
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
 8017944:	460b      	mov	r3, r1
 8017946:	70fb      	strb	r3, [r7, #3]
 8017948:	4613      	mov	r3, r2
 801794a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801794c:	78fb      	ldrb	r3, [r7, #3]
 801794e:	091b      	lsrs	r3, r3, #4
 8017950:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017952:	78bb      	ldrb	r3, [r7, #2]
 8017954:	091b      	lsrs	r3, r3, #4
 8017956:	b2db      	uxtb	r3, r3
 8017958:	7bfa      	ldrb	r2, [r7, #15]
 801795a:	429a      	cmp	r2, r3
 801795c:	d803      	bhi.n	8017966 <RegionCommonChanDisable+0x2a>
 801795e:	78fa      	ldrb	r2, [r7, #3]
 8017960:	78bb      	ldrb	r3, [r7, #2]
 8017962:	429a      	cmp	r2, r3
 8017964:	d301      	bcc.n	801796a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017966:	2300      	movs	r3, #0
 8017968:	e017      	b.n	801799a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801796a:	7bfb      	ldrb	r3, [r7, #15]
 801796c:	005b      	lsls	r3, r3, #1
 801796e:	687a      	ldr	r2, [r7, #4]
 8017970:	4413      	add	r3, r2
 8017972:	881b      	ldrh	r3, [r3, #0]
 8017974:	b21a      	sxth	r2, r3
 8017976:	78fb      	ldrb	r3, [r7, #3]
 8017978:	f003 030f 	and.w	r3, r3, #15
 801797c:	2101      	movs	r1, #1
 801797e:	fa01 f303 	lsl.w	r3, r1, r3
 8017982:	b21b      	sxth	r3, r3
 8017984:	43db      	mvns	r3, r3
 8017986:	b21b      	sxth	r3, r3
 8017988:	4013      	ands	r3, r2
 801798a:	b219      	sxth	r1, r3
 801798c:	7bfb      	ldrb	r3, [r7, #15]
 801798e:	005b      	lsls	r3, r3, #1
 8017990:	687a      	ldr	r2, [r7, #4]
 8017992:	4413      	add	r3, r2
 8017994:	b28a      	uxth	r2, r1
 8017996:	801a      	strh	r2, [r3, #0]

    return true;
 8017998:	2301      	movs	r3, #1
}
 801799a:	4618      	mov	r0, r3
 801799c:	3714      	adds	r7, #20
 801799e:	46bd      	mov	sp, r7
 80179a0:	bc80      	pop	{r7}
 80179a2:	4770      	bx	lr

080179a4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b084      	sub	sp, #16
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	460b      	mov	r3, r1
 80179ae:	70fb      	strb	r3, [r7, #3]
 80179b0:	4613      	mov	r3, r2
 80179b2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80179b4:	2300      	movs	r3, #0
 80179b6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d101      	bne.n	80179c2 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80179be:	2300      	movs	r3, #0
 80179c0:	e018      	b.n	80179f4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80179c2:	78fb      	ldrb	r3, [r7, #3]
 80179c4:	73bb      	strb	r3, [r7, #14]
 80179c6:	e010      	b.n	80179ea <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80179c8:	7bbb      	ldrb	r3, [r7, #14]
 80179ca:	005b      	lsls	r3, r3, #1
 80179cc:	687a      	ldr	r2, [r7, #4]
 80179ce:	4413      	add	r3, r2
 80179d0:	881b      	ldrh	r3, [r3, #0]
 80179d2:	2110      	movs	r1, #16
 80179d4:	4618      	mov	r0, r3
 80179d6:	f7ff fef9 	bl	80177cc <CountChannels>
 80179da:	4603      	mov	r3, r0
 80179dc:	461a      	mov	r2, r3
 80179de:	7bfb      	ldrb	r3, [r7, #15]
 80179e0:	4413      	add	r3, r2
 80179e2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80179e4:	7bbb      	ldrb	r3, [r7, #14]
 80179e6:	3301      	adds	r3, #1
 80179e8:	73bb      	strb	r3, [r7, #14]
 80179ea:	7bba      	ldrb	r2, [r7, #14]
 80179ec:	78bb      	ldrb	r3, [r7, #2]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d3ea      	bcc.n	80179c8 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80179f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3710      	adds	r7, #16
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd80      	pop	{r7, pc}

080179fc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80179fc:	b480      	push	{r7}
 80179fe:	b087      	sub	sp, #28
 8017a00:	af00      	add	r7, sp, #0
 8017a02:	60f8      	str	r0, [r7, #12]
 8017a04:	60b9      	str	r1, [r7, #8]
 8017a06:	4613      	mov	r3, r2
 8017a08:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d016      	beq.n	8017a3e <RegionCommonChanMaskCopy+0x42>
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d013      	beq.n	8017a3e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017a16:	2300      	movs	r3, #0
 8017a18:	75fb      	strb	r3, [r7, #23]
 8017a1a:	e00c      	b.n	8017a36 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017a1c:	7dfb      	ldrb	r3, [r7, #23]
 8017a1e:	005b      	lsls	r3, r3, #1
 8017a20:	68ba      	ldr	r2, [r7, #8]
 8017a22:	441a      	add	r2, r3
 8017a24:	7dfb      	ldrb	r3, [r7, #23]
 8017a26:	005b      	lsls	r3, r3, #1
 8017a28:	68f9      	ldr	r1, [r7, #12]
 8017a2a:	440b      	add	r3, r1
 8017a2c:	8812      	ldrh	r2, [r2, #0]
 8017a2e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017a30:	7dfb      	ldrb	r3, [r7, #23]
 8017a32:	3301      	adds	r3, #1
 8017a34:	75fb      	strb	r3, [r7, #23]
 8017a36:	7dfa      	ldrb	r2, [r7, #23]
 8017a38:	79fb      	ldrb	r3, [r7, #7]
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	d3ee      	bcc.n	8017a1c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017a3e:	bf00      	nop
 8017a40:	371c      	adds	r7, #28
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bc80      	pop	{r7}
 8017a46:	4770      	bx	lr

08017a48 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017a48:	b082      	sub	sp, #8
 8017a4a:	b580      	push	{r7, lr}
 8017a4c:	b086      	sub	sp, #24
 8017a4e:	af00      	add	r7, sp, #0
 8017a50:	60f8      	str	r0, [r7, #12]
 8017a52:	60b9      	str	r1, [r7, #8]
 8017a54:	627b      	str	r3, [r7, #36]	; 0x24
 8017a56:	4613      	mov	r3, r2
 8017a58:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017a5a:	79f9      	ldrb	r1, [r7, #7]
 8017a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a60:	cb0c      	ldmia	r3, {r2, r3}
 8017a62:	68f8      	ldr	r0, [r7, #12]
 8017a64:	f7ff fd8c 	bl	8017580 <GetDutyCycle>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	68da      	ldr	r2, [r3, #12]
 8017a70:	8afb      	ldrh	r3, [r7, #22]
 8017a72:	68b9      	ldr	r1, [r7, #8]
 8017a74:	fb01 f303 	mul.w	r3, r1, r3
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d909      	bls.n	8017a90 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	68da      	ldr	r2, [r3, #12]
 8017a80:	8afb      	ldrh	r3, [r7, #22]
 8017a82:	68b9      	ldr	r1, [r7, #8]
 8017a84:	fb01 f303 	mul.w	r3, r1, r3
 8017a88:	1ad2      	subs	r2, r2, r3
 8017a8a:	68fb      	ldr	r3, [r7, #12]
 8017a8c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017a8e:	e002      	b.n	8017a96 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	2200      	movs	r2, #0
 8017a94:	60da      	str	r2, [r3, #12]
}
 8017a96:	bf00      	nop
 8017a98:	3718      	adds	r7, #24
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017aa0:	b002      	add	sp, #8
 8017aa2:	4770      	bx	lr

08017aa4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aa6:	b08f      	sub	sp, #60	; 0x3c
 8017aa8:	af04      	add	r7, sp, #16
 8017aaa:	6039      	str	r1, [r7, #0]
 8017aac:	4611      	mov	r1, r2
 8017aae:	461a      	mov	r2, r3
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	71fb      	strb	r3, [r7, #7]
 8017ab4:	460b      	mov	r3, r1
 8017ab6:	71bb      	strb	r3, [r7, #6]
 8017ab8:	4613      	mov	r3, r2
 8017aba:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017abc:	f04f 33ff 	mov.w	r3, #4294967295
 8017ac0:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017ac2:	f006 f995 	bl	801ddf0 <UTIL_TIMER_GetCurrentTime>
 8017ac6:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017acc:	2301      	movs	r3, #1
 8017ace:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017adc:	e0ba      	b.n	8017c54 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017ade:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017ae2:	4613      	mov	r3, r2
 8017ae4:	005b      	lsls	r3, r3, #1
 8017ae6:	4413      	add	r3, r2
 8017ae8:	00db      	lsls	r3, r3, #3
 8017aea:	461a      	mov	r2, r3
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	189c      	adds	r4, r3, r2
 8017af0:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8017af4:	797a      	ldrb	r2, [r7, #5]
 8017af6:	79fd      	ldrb	r5, [r7, #7]
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	9302      	str	r3, [sp, #8]
 8017afc:	46ec      	mov	ip, sp
 8017afe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017b02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b06:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017b0a:	4633      	mov	r3, r6
 8017b0c:	4629      	mov	r1, r5
 8017b0e:	4620      	mov	r0, r4
 8017b10:	f7ff fe22 	bl	8017758 <UpdateTimeCredits>
 8017b14:	4603      	mov	r3, r0
 8017b16:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017b18:	8afa      	ldrh	r2, [r7, #22]
 8017b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b1c:	fb02 f303 	mul.w	r3, r2, r3
 8017b20:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017b22:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b26:	4613      	mov	r3, r2
 8017b28:	005b      	lsls	r3, r3, #1
 8017b2a:	4413      	add	r3, r2
 8017b2c:	00db      	lsls	r3, r3, #3
 8017b2e:	461a      	mov	r2, r3
 8017b30:	683b      	ldr	r3, [r7, #0]
 8017b32:	4413      	add	r3, r2
 8017b34:	68db      	ldr	r3, [r3, #12]
 8017b36:	69ba      	ldr	r2, [r7, #24]
 8017b38:	429a      	cmp	r2, r3
 8017b3a:	d908      	bls.n	8017b4e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017b3c:	797b      	ldrb	r3, [r7, #5]
 8017b3e:	f083 0301 	eor.w	r3, r3, #1
 8017b42:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d013      	beq.n	8017b70 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017b48:	79fb      	ldrb	r3, [r7, #7]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d010      	beq.n	8017b70 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017b4e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b52:	4613      	mov	r3, r2
 8017b54:	005b      	lsls	r3, r3, #1
 8017b56:	4413      	add	r3, r2
 8017b58:	00db      	lsls	r3, r3, #3
 8017b5a:	461a      	mov	r2, r3
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	4413      	add	r3, r2
 8017b60:	2201      	movs	r2, #1
 8017b62:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017b64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017b68:	3301      	adds	r3, #1
 8017b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017b6e:	e06c      	b.n	8017c4a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017b70:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b74:	4613      	mov	r3, r2
 8017b76:	005b      	lsls	r3, r3, #1
 8017b78:	4413      	add	r3, r2
 8017b7a:	00db      	lsls	r3, r3, #3
 8017b7c:	461a      	mov	r2, r3
 8017b7e:	683b      	ldr	r3, [r7, #0]
 8017b80:	4413      	add	r3, r2
 8017b82:	2200      	movs	r2, #0
 8017b84:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8017b86:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017b8a:	4613      	mov	r3, r2
 8017b8c:	005b      	lsls	r3, r3, #1
 8017b8e:	4413      	add	r3, r2
 8017b90:	00db      	lsls	r3, r3, #3
 8017b92:	461a      	mov	r2, r3
 8017b94:	683b      	ldr	r3, [r7, #0]
 8017b96:	4413      	add	r3, r2
 8017b98:	691b      	ldr	r3, [r3, #16]
 8017b9a:	69ba      	ldr	r2, [r7, #24]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d815      	bhi.n	8017bcc <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017ba0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	005b      	lsls	r3, r3, #1
 8017ba8:	4413      	add	r3, r2
 8017baa:	00db      	lsls	r3, r3, #3
 8017bac:	461a      	mov	r2, r3
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	4413      	add	r3, r2
 8017bb2:	68db      	ldr	r3, [r3, #12]
 8017bb4:	69ba      	ldr	r2, [r7, #24]
 8017bb6:	1ad3      	subs	r3, r2, r3
 8017bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bba:	4293      	cmp	r3, r2
 8017bbc:	bf28      	it	cs
 8017bbe:	4613      	movcs	r3, r2
 8017bc0:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017bc6:	3301      	adds	r3, #1
 8017bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017bcc:	79fb      	ldrb	r3, [r7, #7]
 8017bce:	f083 0301 	eor.w	r3, r3, #1
 8017bd2:	b2db      	uxtb	r3, r3
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d038      	beq.n	8017c4a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017bd8:	2300      	movs	r3, #0
 8017bda:	60fb      	str	r3, [r7, #12]
 8017bdc:	2300      	movs	r3, #0
 8017bde:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017be0:	8afb      	ldrh	r3, [r7, #22]
 8017be2:	2b64      	cmp	r3, #100	; 0x64
 8017be4:	d103      	bne.n	8017bee <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017be6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8017bea:	60fb      	str	r3, [r7, #12]
 8017bec:	e009      	b.n	8017c02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017bee:	8afb      	ldrh	r3, [r7, #22]
 8017bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bf4:	d103      	bne.n	8017bfe <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017bf6:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8017bfa:	60fb      	str	r3, [r7, #12]
 8017bfc:	e001      	b.n	8017c02 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017bfe:	4b1e      	ldr	r3, [pc, #120]	; (8017c78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017c00:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c04:	4a1c      	ldr	r2, [pc, #112]	; (8017c78 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017c06:	4293      	cmp	r3, r2
 8017c08:	d90e      	bls.n	8017c28 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017c0a:	68fa      	ldr	r2, [r7, #12]
 8017c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c0e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c12:	3b30      	subs	r3, #48	; 0x30
 8017c14:	4919      	ldr	r1, [pc, #100]	; (8017c7c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017c16:	fba1 1303 	umull	r1, r3, r1, r3
 8017c1a:	0c1b      	lsrs	r3, r3, #16
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	4918      	ldr	r1, [pc, #96]	; (8017c80 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017c20:	fb01 f303 	mul.w	r3, r1, r3
 8017c24:	4413      	add	r3, r2
 8017c26:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017c28:	f107 000c 	add.w	r0, r7, #12
 8017c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c2e:	9300      	str	r3, [sp, #0]
 8017c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c32:	f107 020c 	add.w	r2, r7, #12
 8017c36:	ca06      	ldmia	r2, {r1, r2}
 8017c38:	f005 f9f1 	bl	801d01e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017c3c:	f107 030c 	add.w	r3, r7, #12
 8017c40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c44:	f005 faaa 	bl	801d19c <SysTimeToMs>
 8017c48:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017c4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c4e:	3301      	adds	r3, #1
 8017c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017c54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c58:	79bb      	ldrb	r3, [r7, #6]
 8017c5a:	429a      	cmp	r2, r3
 8017c5c:	f4ff af3f 	bcc.w	8017ade <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d102      	bne.n	8017c6e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017c68:	f04f 33ff 	mov.w	r3, #4294967295
 8017c6c:	e000      	b.n	8017c70 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017c70:	4618      	mov	r0, r3
 8017c72:	372c      	adds	r7, #44	; 0x2c
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c78:	0001ec30 	.word	0x0001ec30
 8017c7c:	c22e4507 	.word	0xc22e4507
 8017c80:	00015180 	.word	0x00015180

08017c84 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017c84:	b480      	push	{r7}
 8017c86:	b085      	sub	sp, #20
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
 8017c8c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017c8e:	2300      	movs	r3, #0
 8017c90:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	2b03      	cmp	r3, #3
 8017c98:	d13f      	bne.n	8017d1a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	3301      	adds	r3, #1
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	b25a      	sxtb	r2, r3
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017ca6:	683b      	ldr	r3, [r7, #0]
 8017ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cac:	f003 030f 	and.w	r3, r3, #15
 8017cb0:	b25a      	sxtb	r2, r3
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017cb6:	683b      	ldr	r3, [r7, #0]
 8017cb8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	091b      	lsrs	r3, r3, #4
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	b25a      	sxtb	r2, r3
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	3302      	adds	r3, #2
 8017ccc:	781b      	ldrb	r3, [r3, #0]
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	683b      	ldr	r3, [r7, #0]
 8017cd2:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017cd4:	683b      	ldr	r3, [r7, #0]
 8017cd6:	889b      	ldrh	r3, [r3, #4]
 8017cd8:	b21a      	sxth	r2, r3
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	3303      	adds	r3, #3
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	021b      	lsls	r3, r3, #8
 8017ce2:	b21b      	sxth	r3, r3
 8017ce4:	4313      	orrs	r3, r2
 8017ce6:	b21b      	sxth	r3, r3
 8017ce8:	b29a      	uxth	r2, r3
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	791a      	ldrb	r2, [r3, #4]
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	781b      	ldrb	r3, [r3, #0]
 8017cfa:	091b      	lsrs	r3, r3, #4
 8017cfc:	b2db      	uxtb	r3, r3
 8017cfe:	f003 0307 	and.w	r3, r3, #7
 8017d02:	b2da      	uxtb	r2, r3
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	781b      	ldrb	r3, [r3, #0]
 8017d0c:	f003 030f 	and.w	r3, r3, #15
 8017d10:	b2da      	uxtb	r2, r3
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017d16:	2305      	movs	r3, #5
 8017d18:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	3714      	adds	r7, #20
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bc80      	pop	{r7}
 8017d24:	4770      	bx	lr

08017d26 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017d26:	b5b0      	push	{r4, r5, r7, lr}
 8017d28:	b088      	sub	sp, #32
 8017d2a:	af02      	add	r7, sp, #8
 8017d2c:	60f8      	str	r0, [r7, #12]
 8017d2e:	60b9      	str	r1, [r7, #8]
 8017d30:	607a      	str	r2, [r7, #4]
 8017d32:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	791b      	ldrb	r3, [r3, #4]
 8017d38:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017d3a:	68fb      	ldr	r3, [r7, #12]
 8017d3c:	799b      	ldrb	r3, [r3, #6]
 8017d3e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	79db      	ldrb	r3, [r3, #7]
 8017d44:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	7a1b      	ldrb	r3, [r3, #8]
 8017d4a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	795b      	ldrb	r3, [r3, #5]
 8017d50:	f083 0301 	eor.w	r3, r3, #1
 8017d54:	b2db      	uxtb	r3, r3
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d008      	beq.n	8017d6c <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	7adb      	ldrb	r3, [r3, #11]
 8017d5e:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	7a5b      	ldrb	r3, [r3, #9]
 8017d64:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	7a9b      	ldrb	r3, [r3, #10]
 8017d6a:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017d6c:	7dfb      	ldrb	r3, [r7, #23]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d04a      	beq.n	8017e08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017d72:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017d76:	2b0f      	cmp	r3, #15
 8017d78:	d103      	bne.n	8017d82 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	7a5b      	ldrb	r3, [r3, #9]
 8017d7e:	75bb      	strb	r3, [r7, #22]
 8017d80:	e01d      	b.n	8017dbe <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	7b18      	ldrb	r0, [r3, #12]
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	6919      	ldr	r1, [r3, #16]
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017d96:	68fa      	ldr	r2, [r7, #12]
 8017d98:	6992      	ldr	r2, [r2, #24]
 8017d9a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017d9e:	9201      	str	r2, [sp, #4]
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	462b      	mov	r3, r5
 8017da4:	4622      	mov	r2, r4
 8017da6:	f7ff fd3a 	bl	801781e <RegionCommonChanVerifyDr>
 8017daa:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017dac:	f083 0301 	eor.w	r3, r3, #1
 8017db0:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d003      	beq.n	8017dbe <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017db6:	7dfb      	ldrb	r3, [r7, #23]
 8017db8:	f023 0302 	bic.w	r3, r3, #2
 8017dbc:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017dbe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017dc2:	2b0f      	cmp	r3, #15
 8017dc4:	d103      	bne.n	8017dce <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	7a9b      	ldrb	r3, [r3, #10]
 8017dca:	757b      	strb	r3, [r7, #21]
 8017dcc:	e01c      	b.n	8017e08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017dda:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017dde:	4618      	mov	r0, r3
 8017de0:	f7ff fd8f 	bl	8017902 <RegionCommonValueInRange>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d10e      	bne.n	8017e08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017df0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	da03      	bge.n	8017e00 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	7f5b      	ldrb	r3, [r3, #29]
 8017dfc:	757b      	strb	r3, [r7, #21]
 8017dfe:	e003      	b.n	8017e08 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017e00:	7dfb      	ldrb	r3, [r7, #23]
 8017e02:	f023 0304 	bic.w	r3, r3, #4
 8017e06:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017e08:	7dfb      	ldrb	r3, [r7, #23]
 8017e0a:	2b07      	cmp	r3, #7
 8017e0c:	d105      	bne.n	8017e1a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017e0e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d101      	bne.n	8017e1a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017e16:	2301      	movs	r3, #1
 8017e18:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	7dba      	ldrb	r2, [r7, #22]
 8017e1e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	7d7a      	ldrb	r2, [r7, #21]
 8017e24:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017e26:	7d3a      	ldrb	r2, [r7, #20]
 8017e28:	683b      	ldr	r3, [r7, #0]
 8017e2a:	701a      	strb	r2, [r3, #0]

    return status;
 8017e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3718      	adds	r7, #24
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017e38 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017e38:	b480      	push	{r7}
 8017e3a:	b083      	sub	sp, #12
 8017e3c:	af00      	add	r7, sp, #0
 8017e3e:	4603      	mov	r3, r0
 8017e40:	6039      	str	r1, [r7, #0]
 8017e42:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017e44:	79fb      	ldrb	r3, [r7, #7]
 8017e46:	4a06      	ldr	r2, [pc, #24]	; (8017e60 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017e48:	fa02 f303 	lsl.w	r3, r2, r3
 8017e4c:	461a      	mov	r2, r3
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e54:	4618      	mov	r0, r3
 8017e56:	370c      	adds	r7, #12
 8017e58:	46bd      	mov	sp, r7
 8017e5a:	bc80      	pop	{r7}
 8017e5c:	4770      	bx	lr
 8017e5e:	bf00      	nop
 8017e60:	000f4240 	.word	0x000f4240

08017e64 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017e64:	b480      	push	{r7}
 8017e66:	b083      	sub	sp, #12
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017e6e:	79fb      	ldrb	r3, [r7, #7]
 8017e70:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017e74:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	370c      	adds	r7, #12
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bc80      	pop	{r7}
 8017e80:	4770      	bx	lr
	...

08017e84 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017e84:	b480      	push	{r7}
 8017e86:	b085      	sub	sp, #20
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	607a      	str	r2, [r7, #4]
 8017e8e:	603b      	str	r3, [r7, #0]
 8017e90:	460b      	mov	r3, r1
 8017e92:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017e94:	7afa      	ldrb	r2, [r7, #11]
 8017e96:	7afb      	ldrb	r3, [r7, #11]
 8017e98:	3b04      	subs	r3, #4
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	fb03 f101 	mul.w	r1, r3, r1
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ea8:	fb00 f303 	mul.w	r3, r0, r3
 8017eac:	440b      	add	r3, r1
 8017eae:	005b      	lsls	r3, r3, #1
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d013      	beq.n	8017edc <RegionCommonComputeRxWindowParameters+0x58>
 8017eb4:	7afb      	ldrb	r3, [r7, #11]
 8017eb6:	3b04      	subs	r3, #4
 8017eb8:	4619      	mov	r1, r3
 8017eba:	68fb      	ldr	r3, [r7, #12]
 8017ebc:	fb03 f101 	mul.w	r1, r3, r1
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ec6:	fb00 f303 	mul.w	r3, r0, r3
 8017eca:	440b      	add	r3, r1
 8017ecc:	0059      	lsls	r1, r3, #1
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	440b      	add	r3, r1
 8017ed2:	1e59      	subs	r1, r3, #1
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8017eda:	e00f      	b.n	8017efc <RegionCommonComputeRxWindowParameters+0x78>
 8017edc:	7afb      	ldrb	r3, [r7, #11]
 8017ede:	3b04      	subs	r3, #4
 8017ee0:	4619      	mov	r1, r3
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	fb03 f101 	mul.w	r1, r3, r1
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017eee:	fb00 f303 	mul.w	r3, r0, r3
 8017ef2:	440b      	add	r3, r1
 8017ef4:	0059      	lsls	r1, r3, #1
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8017efc:	429a      	cmp	r2, r3
 8017efe:	bf38      	it	cc
 8017f00:	461a      	movcc	r2, r3
 8017f02:	69bb      	ldr	r3, [r7, #24]
 8017f04:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	009b      	lsls	r3, r3, #2
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	69bb      	ldr	r3, [r7, #24]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	68fa      	ldr	r2, [r7, #12]
 8017f12:	fb02 f303 	mul.w	r3, r2, r3
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d007      	beq.n	8017f2a <RegionCommonComputeRxWindowParameters+0xa6>
 8017f1a:	69bb      	ldr	r3, [r7, #24]
 8017f1c:	681b      	ldr	r3, [r3, #0]
 8017f1e:	68fa      	ldr	r2, [r7, #12]
 8017f20:	fb02 f303 	mul.w	r3, r2, r3
 8017f24:	3301      	adds	r3, #1
 8017f26:	085b      	lsrs	r3, r3, #1
 8017f28:	e005      	b.n	8017f36 <RegionCommonComputeRxWindowParameters+0xb2>
 8017f2a:	69bb      	ldr	r3, [r7, #24]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	68fa      	ldr	r2, [r7, #12]
 8017f30:	fb02 f303 	mul.w	r3, r2, r3
 8017f34:	085b      	lsrs	r3, r3, #1
 8017f36:	1acb      	subs	r3, r1, r3
 8017f38:	683a      	ldr	r2, [r7, #0]
 8017f3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f3e:	fb01 f202 	mul.w	r2, r1, r2
 8017f42:	1a9b      	subs	r3, r3, r2
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	dd27      	ble.n	8017f98 <RegionCommonComputeRxWindowParameters+0x114>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	009b      	lsls	r3, r3, #2
 8017f4c:	4619      	mov	r1, r3
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	68fa      	ldr	r2, [r7, #12]
 8017f54:	fb02 f303 	mul.w	r3, r2, r3
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d007      	beq.n	8017f6c <RegionCommonComputeRxWindowParameters+0xe8>
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	68fa      	ldr	r2, [r7, #12]
 8017f62:	fb02 f303 	mul.w	r3, r2, r3
 8017f66:	3301      	adds	r3, #1
 8017f68:	085b      	lsrs	r3, r3, #1
 8017f6a:	e005      	b.n	8017f78 <RegionCommonComputeRxWindowParameters+0xf4>
 8017f6c:	69bb      	ldr	r3, [r7, #24]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	68fa      	ldr	r2, [r7, #12]
 8017f72:	fb02 f303 	mul.w	r3, r2, r3
 8017f76:	085b      	lsrs	r3, r3, #1
 8017f78:	1acb      	subs	r3, r1, r3
 8017f7a:	683a      	ldr	r2, [r7, #0]
 8017f7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017f80:	fb01 f202 	mul.w	r2, r1, r2
 8017f84:	1a9b      	subs	r3, r3, r2
 8017f86:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017f8a:	4a19      	ldr	r2, [pc, #100]	; (8017ff0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8017f90:	1192      	asrs	r2, r2, #6
 8017f92:	17db      	asrs	r3, r3, #31
 8017f94:	1ad3      	subs	r3, r2, r3
 8017f96:	e024      	b.n	8017fe2 <RegionCommonComputeRxWindowParameters+0x15e>
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	69bb      	ldr	r3, [r7, #24]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	68fa      	ldr	r2, [r7, #12]
 8017fa4:	fb02 f303 	mul.w	r3, r2, r3
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d007      	beq.n	8017fbc <RegionCommonComputeRxWindowParameters+0x138>
 8017fac:	69bb      	ldr	r3, [r7, #24]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	68fa      	ldr	r2, [r7, #12]
 8017fb2:	fb02 f303 	mul.w	r3, r2, r3
 8017fb6:	3301      	adds	r3, #1
 8017fb8:	085b      	lsrs	r3, r3, #1
 8017fba:	e005      	b.n	8017fc8 <RegionCommonComputeRxWindowParameters+0x144>
 8017fbc:	69bb      	ldr	r3, [r7, #24]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	68fa      	ldr	r2, [r7, #12]
 8017fc2:	fb02 f303 	mul.w	r3, r2, r3
 8017fc6:	085b      	lsrs	r3, r3, #1
 8017fc8:	1acb      	subs	r3, r1, r3
 8017fca:	683a      	ldr	r2, [r7, #0]
 8017fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017fd0:	fb01 f202 	mul.w	r2, r1, r2
 8017fd4:	1a9b      	subs	r3, r3, r2
 8017fd6:	4a06      	ldr	r2, [pc, #24]	; (8017ff0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8017fd8:	fb82 1203 	smull	r1, r2, r2, r3
 8017fdc:	1192      	asrs	r2, r2, #6
 8017fde:	17db      	asrs	r3, r3, #31
 8017fe0:	1ad3      	subs	r3, r2, r3
 8017fe2:	69fa      	ldr	r2, [r7, #28]
 8017fe4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017fe6:	bf00      	nop
 8017fe8:	3714      	adds	r7, #20
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bc80      	pop	{r7}
 8017fee:	4770      	bx	lr
 8017ff0:	10624dd3 	.word	0x10624dd3

08017ff4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b086      	sub	sp, #24
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	60b9      	str	r1, [r7, #8]
 8017ffe:	607a      	str	r2, [r7, #4]
 8018000:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018002:	2300      	movs	r3, #0
 8018004:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801800a:	005b      	lsls	r3, r3, #1
 801800c:	4618      	mov	r0, r3
 801800e:	f7e8 fe3f 	bl	8000c90 <__aeabi_ui2f>
 8018012:	4603      	mov	r3, r0
 8018014:	4619      	mov	r1, r3
 8018016:	68b8      	ldr	r0, [r7, #8]
 8018018:	f7e8 fd88 	bl	8000b2c <__aeabi_fsub>
 801801c:	4603      	mov	r3, r0
 801801e:	6879      	ldr	r1, [r7, #4]
 8018020:	4618      	mov	r0, r3
 8018022:	f7e8 fd83 	bl	8000b2c <__aeabi_fsub>
 8018026:	4603      	mov	r3, r0
 8018028:	4618      	mov	r0, r3
 801802a:	f7e8 fa11 	bl	8000450 <__aeabi_f2d>
 801802e:	4602      	mov	r2, r0
 8018030:	460b      	mov	r3, r1
 8018032:	4610      	mov	r0, r2
 8018034:	4619      	mov	r1, r3
 8018036:	f006 fad7 	bl	801e5e8 <floor>
 801803a:	4602      	mov	r2, r0
 801803c:	460b      	mov	r3, r1
 801803e:	4610      	mov	r0, r2
 8018040:	4619      	mov	r1, r3
 8018042:	f7e8 fcf7 	bl	8000a34 <__aeabi_d2iz>
 8018046:	4603      	mov	r3, r0
 8018048:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801804a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801804e:	4618      	mov	r0, r3
 8018050:	3718      	adds	r7, #24
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}

08018056 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018056:	b590      	push	{r4, r7, lr}
 8018058:	b087      	sub	sp, #28
 801805a:	af00      	add	r7, sp, #0
 801805c:	60f8      	str	r0, [r7, #12]
 801805e:	60b9      	str	r1, [r7, #8]
 8018060:	607a      	str	r2, [r7, #4]
 8018062:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018064:	2300      	movs	r3, #0
 8018066:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018068:	2300      	movs	r3, #0
 801806a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801806c:	2300      	movs	r3, #0
 801806e:	757b      	strb	r3, [r7, #21]
 8018070:	2300      	movs	r3, #0
 8018072:	753b      	strb	r3, [r7, #20]
 8018074:	e09c      	b.n	80181b0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018076:	2300      	movs	r3, #0
 8018078:	74fb      	strb	r3, [r7, #19]
 801807a:	e08f      	b.n	801819c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	685a      	ldr	r2, [r3, #4]
 8018080:	7d3b      	ldrb	r3, [r7, #20]
 8018082:	005b      	lsls	r3, r3, #1
 8018084:	4413      	add	r3, r2
 8018086:	881b      	ldrh	r3, [r3, #0]
 8018088:	461a      	mov	r2, r3
 801808a:	7cfb      	ldrb	r3, [r7, #19]
 801808c:	fa42 f303 	asr.w	r3, r2, r3
 8018090:	f003 0301 	and.w	r3, r3, #1
 8018094:	2b00      	cmp	r3, #0
 8018096:	d07e      	beq.n	8018196 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	689a      	ldr	r2, [r3, #8]
 801809c:	7d79      	ldrb	r1, [r7, #21]
 801809e:	7cfb      	ldrb	r3, [r7, #19]
 80180a0:	440b      	add	r3, r1
 80180a2:	4619      	mov	r1, r3
 80180a4:	460b      	mov	r3, r1
 80180a6:	005b      	lsls	r3, r3, #1
 80180a8:	440b      	add	r3, r1
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	4413      	add	r3, r2
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d06b      	beq.n	801818c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	f083 0301 	eor.w	r3, r3, #1
 80180bc:	b2db      	uxtb	r3, r3
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d011      	beq.n	80180e6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d00d      	beq.n	80180e6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	695a      	ldr	r2, [r3, #20]
 80180ce:	7d3b      	ldrb	r3, [r7, #20]
 80180d0:	005b      	lsls	r3, r3, #1
 80180d2:	4413      	add	r3, r2
 80180d4:	881b      	ldrh	r3, [r3, #0]
 80180d6:	461a      	mov	r2, r3
 80180d8:	7cfb      	ldrb	r3, [r7, #19]
 80180da:	fa42 f303 	asr.w	r3, r2, r3
 80180de:	f003 0301 	and.w	r3, r3, #1
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d054      	beq.n	8018190 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	785b      	ldrb	r3, [r3, #1]
 80180ea:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	689a      	ldr	r2, [r3, #8]
 80180f0:	7d79      	ldrb	r1, [r7, #21]
 80180f2:	7cfb      	ldrb	r3, [r7, #19]
 80180f4:	440b      	add	r3, r1
 80180f6:	4619      	mov	r1, r3
 80180f8:	460b      	mov	r3, r1
 80180fa:	005b      	lsls	r3, r3, #1
 80180fc:	440b      	add	r3, r1
 80180fe:	009b      	lsls	r3, r3, #2
 8018100:	4413      	add	r3, r2
 8018102:	7a1b      	ldrb	r3, [r3, #8]
 8018104:	f343 0303 	sbfx	r3, r3, #0, #4
 8018108:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801810a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	689a      	ldr	r2, [r3, #8]
 8018110:	7d79      	ldrb	r1, [r7, #21]
 8018112:	7cfb      	ldrb	r3, [r7, #19]
 8018114:	440b      	add	r3, r1
 8018116:	4619      	mov	r1, r3
 8018118:	460b      	mov	r3, r1
 801811a:	005b      	lsls	r3, r3, #1
 801811c:	440b      	add	r3, r1
 801811e:	009b      	lsls	r3, r3, #2
 8018120:	4413      	add	r3, r2
 8018122:	7a1b      	ldrb	r3, [r3, #8]
 8018124:	f343 1303 	sbfx	r3, r3, #4, #4
 8018128:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801812a:	461a      	mov	r2, r3
 801812c:	4621      	mov	r1, r4
 801812e:	f7ff fbe8 	bl	8017902 <RegionCommonValueInRange>
 8018132:	4603      	mov	r3, r0
 8018134:	2b00      	cmp	r3, #0
 8018136:	d02d      	beq.n	8018194 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	68da      	ldr	r2, [r3, #12]
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	6899      	ldr	r1, [r3, #8]
 8018140:	7d78      	ldrb	r0, [r7, #21]
 8018142:	7cfb      	ldrb	r3, [r7, #19]
 8018144:	4403      	add	r3, r0
 8018146:	4618      	mov	r0, r3
 8018148:	4603      	mov	r3, r0
 801814a:	005b      	lsls	r3, r3, #1
 801814c:	4403      	add	r3, r0
 801814e:	009b      	lsls	r3, r3, #2
 8018150:	440b      	add	r3, r1
 8018152:	7a5b      	ldrb	r3, [r3, #9]
 8018154:	4619      	mov	r1, r3
 8018156:	460b      	mov	r3, r1
 8018158:	005b      	lsls	r3, r3, #1
 801815a:	440b      	add	r3, r1
 801815c:	00db      	lsls	r3, r3, #3
 801815e:	4413      	add	r3, r2
 8018160:	7d1b      	ldrb	r3, [r3, #20]
 8018162:	f083 0301 	eor.w	r3, r3, #1
 8018166:	b2db      	uxtb	r3, r3
 8018168:	2b00      	cmp	r3, #0
 801816a:	d003      	beq.n	8018174 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 801816c:	7dbb      	ldrb	r3, [r7, #22]
 801816e:	3301      	adds	r3, #1
 8018170:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018172:	e010      	b.n	8018196 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018174:	7dfb      	ldrb	r3, [r7, #23]
 8018176:	1c5a      	adds	r2, r3, #1
 8018178:	75fa      	strb	r2, [r7, #23]
 801817a:	461a      	mov	r2, r3
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	4413      	add	r3, r2
 8018180:	7d79      	ldrb	r1, [r7, #21]
 8018182:	7cfa      	ldrb	r2, [r7, #19]
 8018184:	440a      	add	r2, r1
 8018186:	b2d2      	uxtb	r2, r2
 8018188:	701a      	strb	r2, [r3, #0]
 801818a:	e004      	b.n	8018196 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801818c:	bf00      	nop
 801818e:	e002      	b.n	8018196 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018190:	bf00      	nop
 8018192:	e000      	b.n	8018196 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018194:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018196:	7cfb      	ldrb	r3, [r7, #19]
 8018198:	3301      	adds	r3, #1
 801819a:	74fb      	strb	r3, [r7, #19]
 801819c:	7cfb      	ldrb	r3, [r7, #19]
 801819e:	2b0f      	cmp	r3, #15
 80181a0:	f67f af6c 	bls.w	801807c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80181a4:	7d7b      	ldrb	r3, [r7, #21]
 80181a6:	3310      	adds	r3, #16
 80181a8:	757b      	strb	r3, [r7, #21]
 80181aa:	7d3b      	ldrb	r3, [r7, #20]
 80181ac:	3301      	adds	r3, #1
 80181ae:	753b      	strb	r3, [r7, #20]
 80181b0:	7d7b      	ldrb	r3, [r7, #21]
 80181b2:	b29a      	uxth	r2, r3
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	8a1b      	ldrh	r3, [r3, #16]
 80181b8:	429a      	cmp	r2, r3
 80181ba:	f4ff af5c 	bcc.w	8018076 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	7dfa      	ldrb	r2, [r7, #23]
 80181c2:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	7dba      	ldrb	r2, [r7, #22]
 80181c8:	701a      	strb	r2, [r3, #0]
}
 80181ca:	bf00      	nop
 80181cc:	371c      	adds	r7, #28
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd90      	pop	{r4, r7, pc}

080181d2 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80181d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181d4:	b08b      	sub	sp, #44	; 0x2c
 80181d6:	af04      	add	r7, sp, #16
 80181d8:	60f8      	str	r0, [r7, #12]
 80181da:	60b9      	str	r1, [r7, #8]
 80181dc:	607a      	str	r2, [r7, #4]
 80181de:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	685b      	ldr	r3, [r3, #4]
 80181e4:	4618      	mov	r0, r3
 80181e6:	f005 fe15 	bl	801de14 <UTIL_TIMER_GetElapsedTime>
 80181ea:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	681a      	ldr	r2, [r3, #0]
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	1ad2      	subs	r2, r2, r3
 80181f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181f6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80181f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fa:	2201      	movs	r2, #1
 80181fc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80181fe:	683b      	ldr	r3, [r7, #0]
 8018200:	2200      	movs	r2, #0
 8018202:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	2b00      	cmp	r3, #0
 801820a:	d004      	beq.n	8018216 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018210:	697a      	ldr	r2, [r7, #20]
 8018212:	429a      	cmp	r2, r3
 8018214:	d32b      	bcc.n	801826e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018216:	68bb      	ldr	r3, [r7, #8]
 8018218:	2200      	movs	r2, #0
 801821a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	69db      	ldr	r3, [r3, #28]
 8018220:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018226:	68dd      	ldr	r5, [r3, #12]
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	7a5e      	ldrb	r6, [r3, #9]
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	7d1b      	ldrb	r3, [r3, #20]
 8018236:	68fa      	ldr	r2, [r7, #12]
 8018238:	6992      	ldr	r2, [r2, #24]
 801823a:	9203      	str	r2, [sp, #12]
 801823c:	68fa      	ldr	r2, [r7, #12]
 801823e:	f10d 0e04 	add.w	lr, sp, #4
 8018242:	320c      	adds	r2, #12
 8018244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018248:	e88e 0003 	stmia.w	lr, {r0, r1}
 801824c:	9300      	str	r3, [sp, #0]
 801824e:	4663      	mov	r3, ip
 8018250:	4632      	mov	r2, r6
 8018252:	4629      	mov	r1, r5
 8018254:	4620      	mov	r0, r4
 8018256:	f7ff fc25 	bl	8017aa4 <RegionCommonUpdateBandTimeOff>
 801825a:	4602      	mov	r2, r0
 801825c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801825e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	69d8      	ldr	r0, [r3, #28]
 8018264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018266:	683a      	ldr	r2, [r7, #0]
 8018268:	6879      	ldr	r1, [r7, #4]
 801826a:	f7ff fef4 	bl	8018056 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	d004      	beq.n	8018280 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018278:	2200      	movs	r2, #0
 801827a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801827c:	2300      	movs	r3, #0
 801827e:	e006      	b.n	801828e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d001      	beq.n	801828c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018288:	230b      	movs	r3, #11
 801828a:	e000      	b.n	801828e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801828c:	230c      	movs	r3, #12
    }
}
 801828e:	4618      	mov	r0, r3
 8018290:	371c      	adds	r7, #28
 8018292:	46bd      	mov	sp, r7
 8018294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018296 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018296:	b5b0      	push	{r4, r5, r7, lr}
 8018298:	b086      	sub	sp, #24
 801829a:	af02      	add	r7, sp, #8
 801829c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	781b      	ldrb	r3, [r3, #0]
 80182a2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f993 2000 	ldrsb.w	r2, [r3]
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d103      	bne.n	80182bc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80182ba:	e026      	b.n	801830a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80182bc:	7bfb      	ldrb	r3, [r7, #15]
 80182be:	3b01      	subs	r3, #1
 80182c0:	b2db      	uxtb	r3, r3
 80182c2:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80182ca:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80182ce:	429a      	cmp	r2, r3
 80182d0:	d019      	beq.n	8018306 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	78d8      	ldrb	r0, [r3, #3]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	6859      	ldr	r1, [r3, #4]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182e6:	687a      	ldr	r2, [r7, #4]
 80182e8:	6892      	ldr	r2, [r2, #8]
 80182ea:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80182ee:	9201      	str	r2, [sp, #4]
 80182f0:	9300      	str	r3, [sp, #0]
 80182f2:	462b      	mov	r3, r5
 80182f4:	4622      	mov	r2, r4
 80182f6:	f7ff fa92 	bl	801781e <RegionCommonChanVerifyDr>
 80182fa:	4603      	mov	r3, r0
 80182fc:	f083 0301 	eor.w	r3, r3, #1
 8018300:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018302:	2b00      	cmp	r3, #0
 8018304:	d1da      	bne.n	80182bc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018306:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801830a:	4618      	mov	r0, r3
 801830c:	3710      	adds	r7, #16
 801830e:	46bd      	mov	sp, r7
 8018310:	bdb0      	pop	{r4, r5, r7, pc}

08018312 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018312:	b480      	push	{r7}
 8018314:	b083      	sub	sp, #12
 8018316:	af00      	add	r7, sp, #0
 8018318:	4603      	mov	r3, r0
 801831a:	460a      	mov	r2, r1
 801831c:	71fb      	strb	r3, [r7, #7]
 801831e:	4613      	mov	r3, r2
 8018320:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018322:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801832a:	4293      	cmp	r3, r2
 801832c:	bfb8      	it	lt
 801832e:	4613      	movlt	r3, r2
 8018330:	b25b      	sxtb	r3, r3
}
 8018332:	4618      	mov	r0, r3
 8018334:	370c      	adds	r7, #12
 8018336:	46bd      	mov	sp, r7
 8018338:	bc80      	pop	{r7}
 801833a:	4770      	bx	lr

0801833c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801833c:	b480      	push	{r7}
 801833e:	b083      	sub	sp, #12
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	009b      	lsls	r3, r3, #2
 801834a:	683a      	ldr	r2, [r7, #0]
 801834c:	4413      	add	r3, r2
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4a07      	ldr	r2, [pc, #28]	; (8018370 <RegionCommonGetBandwidth+0x34>)
 8018352:	4293      	cmp	r3, r2
 8018354:	d004      	beq.n	8018360 <RegionCommonGetBandwidth+0x24>
 8018356:	4a07      	ldr	r2, [pc, #28]	; (8018374 <RegionCommonGetBandwidth+0x38>)
 8018358:	4293      	cmp	r3, r2
 801835a:	d003      	beq.n	8018364 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801835c:	2300      	movs	r3, #0
 801835e:	e002      	b.n	8018366 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018360:	2301      	movs	r3, #1
 8018362:	e000      	b.n	8018366 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018364:	2302      	movs	r3, #2
    }
}
 8018366:	4618      	mov	r0, r3
 8018368:	370c      	adds	r7, #12
 801836a:	46bd      	mov	sp, r7
 801836c:	bc80      	pop	{r7}
 801836e:	4770      	bx	lr
 8018370:	0003d090 	.word	0x0003d090
 8018374:	0007a120 	.word	0x0007a120

08018378 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b086      	sub	sp, #24
 801837c:	af04      	add	r7, sp, #16
 801837e:	4603      	mov	r3, r0
 8018380:	6039      	str	r1, [r7, #0]
 8018382:	71fb      	strb	r3, [r7, #7]
 8018384:	4613      	mov	r3, r2
 8018386:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018388:	79fb      	ldrb	r3, [r7, #7]
 801838a:	2b05      	cmp	r3, #5
 801838c:	d810      	bhi.n	80183b0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801838e:	79fb      	ldrb	r3, [r7, #7]
 8018390:	4a0f      	ldr	r2, [pc, #60]	; (80183d0 <RegionCommonRxConfigPrint+0x58>)
 8018392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018396:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801839a:	9202      	str	r2, [sp, #8]
 801839c:	683a      	ldr	r2, [r7, #0]
 801839e:	9201      	str	r2, [sp, #4]
 80183a0:	9300      	str	r3, [sp, #0]
 80183a2:	4b0c      	ldr	r3, [pc, #48]	; (80183d4 <RegionCommonRxConfigPrint+0x5c>)
 80183a4:	2201      	movs	r2, #1
 80183a6:	2100      	movs	r1, #0
 80183a8:	2002      	movs	r0, #2
 80183aa:	f005 fe11 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80183ae:	e00a      	b.n	80183c6 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80183b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80183b4:	9301      	str	r3, [sp, #4]
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	9300      	str	r3, [sp, #0]
 80183ba:	4b07      	ldr	r3, [pc, #28]	; (80183d8 <RegionCommonRxConfigPrint+0x60>)
 80183bc:	2201      	movs	r2, #1
 80183be:	2100      	movs	r1, #0
 80183c0:	2002      	movs	r0, #2
 80183c2:	f005 fe05 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 80183c6:	bf00      	nop
 80183c8:	3708      	adds	r7, #8
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	20000130 	.word	0x20000130
 80183d4:	0801ee00 	.word	0x0801ee00
 80183d8:	0801ee20 	.word	0x0801ee20

080183dc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	b084      	sub	sp, #16
 80183e0:	af02      	add	r7, sp, #8
 80183e2:	6078      	str	r0, [r7, #4]
 80183e4:	460b      	mov	r3, r1
 80183e6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80183e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80183ec:	9301      	str	r3, [sp, #4]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	9300      	str	r3, [sp, #0]
 80183f2:	4b05      	ldr	r3, [pc, #20]	; (8018408 <RegionCommonTxConfigPrint+0x2c>)
 80183f4:	2201      	movs	r2, #1
 80183f6:	2100      	movs	r1, #0
 80183f8:	2002      	movs	r0, #2
 80183fa:	f005 fde9 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
}
 80183fe:	bf00      	nop
 8018400:	3708      	adds	r7, #8
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
 8018406:	bf00      	nop
 8018408:	0801ee3c 	.word	0x0801ee3c

0801840c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b082      	sub	sp, #8
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
 8018414:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018416:	4b2d      	ldr	r3, [pc, #180]	; (80184cc <VerifyRfFreq+0xc0>)
 8018418:	6a1b      	ldr	r3, [r3, #32]
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	4798      	blx	r3
 801841e:	4603      	mov	r3, r0
 8018420:	f083 0301 	eor.w	r3, r3, #1
 8018424:	b2db      	uxtb	r3, r3
 8018426:	2b00      	cmp	r3, #0
 8018428:	d001      	beq.n	801842e <VerifyRfFreq+0x22>
    {
        return false;
 801842a:	2300      	movs	r3, #0
 801842c:	e04a      	b.n	80184c4 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	4a27      	ldr	r2, [pc, #156]	; (80184d0 <VerifyRfFreq+0xc4>)
 8018432:	4293      	cmp	r3, r2
 8018434:	d307      	bcc.n	8018446 <VerifyRfFreq+0x3a>
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	4a26      	ldr	r2, [pc, #152]	; (80184d4 <VerifyRfFreq+0xc8>)
 801843a:	4293      	cmp	r3, r2
 801843c:	d803      	bhi.n	8018446 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	2202      	movs	r2, #2
 8018442:	701a      	strb	r2, [r3, #0]
 8018444:	e03d      	b.n	80184c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	4a22      	ldr	r2, [pc, #136]	; (80184d4 <VerifyRfFreq+0xc8>)
 801844a:	4293      	cmp	r3, r2
 801844c:	d907      	bls.n	801845e <VerifyRfFreq+0x52>
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	4a21      	ldr	r2, [pc, #132]	; (80184d8 <VerifyRfFreq+0xcc>)
 8018452:	4293      	cmp	r3, r2
 8018454:	d803      	bhi.n	801845e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018456:	683b      	ldr	r3, [r7, #0]
 8018458:	2200      	movs	r2, #0
 801845a:	701a      	strb	r2, [r3, #0]
 801845c:	e031      	b.n	80184c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	4a1d      	ldr	r2, [pc, #116]	; (80184d8 <VerifyRfFreq+0xcc>)
 8018462:	4293      	cmp	r3, r2
 8018464:	d907      	bls.n	8018476 <VerifyRfFreq+0x6a>
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	4a1c      	ldr	r2, [pc, #112]	; (80184dc <VerifyRfFreq+0xd0>)
 801846a:	4293      	cmp	r3, r2
 801846c:	d803      	bhi.n	8018476 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 801846e:	683b      	ldr	r3, [r7, #0]
 8018470:	2201      	movs	r2, #1
 8018472:	701a      	strb	r2, [r3, #0]
 8018474:	e025      	b.n	80184c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	4a19      	ldr	r2, [pc, #100]	; (80184e0 <VerifyRfFreq+0xd4>)
 801847a:	4293      	cmp	r3, r2
 801847c:	d907      	bls.n	801848e <VerifyRfFreq+0x82>
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	4a18      	ldr	r2, [pc, #96]	; (80184e4 <VerifyRfFreq+0xd8>)
 8018482:	4293      	cmp	r3, r2
 8018484:	d803      	bhi.n	801848e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018486:	683b      	ldr	r3, [r7, #0]
 8018488:	2205      	movs	r2, #5
 801848a:	701a      	strb	r2, [r3, #0]
 801848c:	e019      	b.n	80184c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	4a15      	ldr	r2, [pc, #84]	; (80184e8 <VerifyRfFreq+0xdc>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d907      	bls.n	80184a6 <VerifyRfFreq+0x9a>
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	4a14      	ldr	r2, [pc, #80]	; (80184ec <VerifyRfFreq+0xe0>)
 801849a:	4293      	cmp	r3, r2
 801849c:	d803      	bhi.n	80184a6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801849e:	683b      	ldr	r3, [r7, #0]
 80184a0:	2203      	movs	r2, #3
 80184a2:	701a      	strb	r2, [r3, #0]
 80184a4:	e00d      	b.n	80184c2 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	4a11      	ldr	r2, [pc, #68]	; (80184f0 <VerifyRfFreq+0xe4>)
 80184aa:	4293      	cmp	r3, r2
 80184ac:	d307      	bcc.n	80184be <VerifyRfFreq+0xb2>
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	4a10      	ldr	r2, [pc, #64]	; (80184f4 <VerifyRfFreq+0xe8>)
 80184b2:	4293      	cmp	r3, r2
 80184b4:	d803      	bhi.n	80184be <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80184b6:	683b      	ldr	r3, [r7, #0]
 80184b8:	2204      	movs	r2, #4
 80184ba:	701a      	strb	r2, [r3, #0]
 80184bc:	e001      	b.n	80184c2 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80184be:	2300      	movs	r3, #0
 80184c0:	e000      	b.n	80184c4 <VerifyRfFreq+0xb8>
    }
    return true;
 80184c2:	2301      	movs	r3, #1
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}
 80184cc:	0801f460 	.word	0x0801f460
 80184d0:	337055c0 	.word	0x337055c0
 80184d4:	338eda3f 	.word	0x338eda3f
 80184d8:	33bca100 	.word	0x33bca100
 80184dc:	33c5c8c0 	.word	0x33c5c8c0
 80184e0:	33c74f5f 	.word	0x33c74f5f
 80184e4:	33cef080 	.word	0x33cef080
 80184e8:	33d1fdbf 	.word	0x33d1fdbf
 80184ec:	33d5ce50 	.word	0x33d5ce50
 80184f0:	33d691a0 	.word	0x33d691a0
 80184f4:	33db2580 	.word	0x33db2580

080184f8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80184f8:	b590      	push	{r4, r7, lr}
 80184fa:	b08b      	sub	sp, #44	; 0x2c
 80184fc:	af04      	add	r7, sp, #16
 80184fe:	4603      	mov	r3, r0
 8018500:	460a      	mov	r2, r1
 8018502:	71fb      	strb	r3, [r7, #7]
 8018504:	4613      	mov	r3, r2
 8018506:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801850c:	4a1f      	ldr	r2, [pc, #124]	; (801858c <GetTimeOnAir+0x94>)
 801850e:	5cd3      	ldrb	r3, [r2, r3]
 8018510:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018516:	491e      	ldr	r1, [pc, #120]	; (8018590 <GetTimeOnAir+0x98>)
 8018518:	4618      	mov	r0, r3
 801851a:	f7ff ff0f 	bl	801833c <RegionCommonGetBandwidth>
 801851e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018520:	2300      	movs	r3, #0
 8018522:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018528:	2b07      	cmp	r3, #7
 801852a:	d118      	bne.n	801855e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801852c:	4b19      	ldr	r3, [pc, #100]	; (8018594 <GetTimeOnAir+0x9c>)
 801852e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018538:	fb02 f303 	mul.w	r3, r2, r3
 801853c:	4619      	mov	r1, r3
 801853e:	88bb      	ldrh	r3, [r7, #4]
 8018540:	b2db      	uxtb	r3, r3
 8018542:	2201      	movs	r2, #1
 8018544:	9203      	str	r2, [sp, #12]
 8018546:	9302      	str	r3, [sp, #8]
 8018548:	2300      	movs	r3, #0
 801854a:	9301      	str	r3, [sp, #4]
 801854c:	2305      	movs	r3, #5
 801854e:	9300      	str	r3, [sp, #0]
 8018550:	2300      	movs	r3, #0
 8018552:	460a      	mov	r2, r1
 8018554:	68f9      	ldr	r1, [r7, #12]
 8018556:	2000      	movs	r0, #0
 8018558:	47a0      	blx	r4
 801855a:	6178      	str	r0, [r7, #20]
 801855c:	e011      	b.n	8018582 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801855e:	4b0d      	ldr	r3, [pc, #52]	; (8018594 <GetTimeOnAir+0x9c>)
 8018560:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018562:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018566:	88bb      	ldrh	r3, [r7, #4]
 8018568:	b2db      	uxtb	r3, r3
 801856a:	2101      	movs	r1, #1
 801856c:	9103      	str	r1, [sp, #12]
 801856e:	9302      	str	r3, [sp, #8]
 8018570:	2300      	movs	r3, #0
 8018572:	9301      	str	r3, [sp, #4]
 8018574:	2308      	movs	r3, #8
 8018576:	9300      	str	r3, [sp, #0]
 8018578:	2301      	movs	r3, #1
 801857a:	68f9      	ldr	r1, [r7, #12]
 801857c:	2001      	movs	r0, #1
 801857e:	47a0      	blx	r4
 8018580:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018582:	697b      	ldr	r3, [r7, #20]
}
 8018584:	4618      	mov	r0, r3
 8018586:	371c      	adds	r7, #28
 8018588:	46bd      	mov	sp, r7
 801858a:	bd90      	pop	{r4, r7, pc}
 801858c:	0801f428 	.word	0x0801f428
 8018590:	0801f430 	.word	0x0801f430
 8018594:	0801f460 	.word	0x0801f460

08018598 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b088      	sub	sp, #32
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80185a0:	2300      	movs	r3, #0
 80185a2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	781b      	ldrb	r3, [r3, #0]
 80185a8:	3b01      	subs	r3, #1
 80185aa:	2b38      	cmp	r3, #56	; 0x38
 80185ac:	f200 8128 	bhi.w	8018800 <RegionEU868GetPhyParam+0x268>
 80185b0:	a201      	add	r2, pc, #4	; (adr r2, 80185b8 <RegionEU868GetPhyParam+0x20>)
 80185b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185b6:	bf00      	nop
 80185b8:	0801869d 	.word	0x0801869d
 80185bc:	080186a3 	.word	0x080186a3
 80185c0:	08018801 	.word	0x08018801
 80185c4:	08018801 	.word	0x08018801
 80185c8:	08018801 	.word	0x08018801
 80185cc:	080186a9 	.word	0x080186a9
 80185d0:	08018801 	.word	0x08018801
 80185d4:	080186e3 	.word	0x080186e3
 80185d8:	08018801 	.word	0x08018801
 80185dc:	080186e9 	.word	0x080186e9
 80185e0:	080186ef 	.word	0x080186ef
 80185e4:	080186f5 	.word	0x080186f5
 80185e8:	080186fb 	.word	0x080186fb
 80185ec:	0801870b 	.word	0x0801870b
 80185f0:	0801871b 	.word	0x0801871b
 80185f4:	08018721 	.word	0x08018721
 80185f8:	08018729 	.word	0x08018729
 80185fc:	08018731 	.word	0x08018731
 8018600:	08018739 	.word	0x08018739
 8018604:	08018741 	.word	0x08018741
 8018608:	08018749 	.word	0x08018749
 801860c:	08018751 	.word	0x08018751
 8018610:	08018765 	.word	0x08018765
 8018614:	0801876b 	.word	0x0801876b
 8018618:	08018771 	.word	0x08018771
 801861c:	08018777 	.word	0x08018777
 8018620:	08018783 	.word	0x08018783
 8018624:	0801878f 	.word	0x0801878f
 8018628:	08018795 	.word	0x08018795
 801862c:	0801879d 	.word	0x0801879d
 8018630:	080187a3 	.word	0x080187a3
 8018634:	080187a9 	.word	0x080187a9
 8018638:	080187b1 	.word	0x080187b1
 801863c:	080186af 	.word	0x080186af
 8018640:	08018801 	.word	0x08018801
 8018644:	08018801 	.word	0x08018801
 8018648:	08018801 	.word	0x08018801
 801864c:	08018801 	.word	0x08018801
 8018650:	08018801 	.word	0x08018801
 8018654:	08018801 	.word	0x08018801
 8018658:	08018801 	.word	0x08018801
 801865c:	08018801 	.word	0x08018801
 8018660:	08018801 	.word	0x08018801
 8018664:	08018801 	.word	0x08018801
 8018668:	08018801 	.word	0x08018801
 801866c:	08018801 	.word	0x08018801
 8018670:	08018801 	.word	0x08018801
 8018674:	080187b7 	.word	0x080187b7
 8018678:	080187bd 	.word	0x080187bd
 801867c:	080187cb 	.word	0x080187cb
 8018680:	08018801 	.word	0x08018801
 8018684:	08018801 	.word	0x08018801
 8018688:	080187d1 	.word	0x080187d1
 801868c:	080187d7 	.word	0x080187d7
 8018690:	08018801 	.word	0x08018801
 8018694:	080187dd 	.word	0x080187dd
 8018698:	080187ed 	.word	0x080187ed
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801869c:	2300      	movs	r3, #0
 801869e:	61bb      	str	r3, [r7, #24]
            break;
 80186a0:	e0af      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80186a2:	2300      	movs	r3, #0
 80186a4:	61bb      	str	r3, [r7, #24]
            break;
 80186a6:	e0ac      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80186a8:	2300      	movs	r3, #0
 80186aa:	61bb      	str	r3, [r7, #24]
            break;
 80186ac:	e0a9      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80186b4:	733b      	strb	r3, [r7, #12]
 80186b6:	2307      	movs	r3, #7
 80186b8:	737b      	strb	r3, [r7, #13]
 80186ba:	2300      	movs	r3, #0
 80186bc:	73bb      	strb	r3, [r7, #14]
 80186be:	2310      	movs	r3, #16
 80186c0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80186c2:	4b53      	ldr	r3, [pc, #332]	; (8018810 <RegionEU868GetPhyParam+0x278>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80186ca:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80186cc:	4b50      	ldr	r3, [pc, #320]	; (8018810 <RegionEU868GetPhyParam+0x278>)
 80186ce:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80186d0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80186d2:	f107 030c 	add.w	r3, r7, #12
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7ff fddd 	bl	8018296 <RegionCommonGetNextLowerTxDr>
 80186dc:	4603      	mov	r3, r0
 80186de:	61bb      	str	r3, [r7, #24]
            break;
 80186e0:	e08f      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80186e2:	2300      	movs	r3, #0
 80186e4:	61bb      	str	r3, [r7, #24]
            break;
 80186e6:	e08c      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80186e8:	2300      	movs	r3, #0
 80186ea:	61bb      	str	r3, [r7, #24]
            break;
 80186ec:	e089      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80186ee:	2340      	movs	r3, #64	; 0x40
 80186f0:	61bb      	str	r3, [r7, #24]
            break;
 80186f2:	e086      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80186f4:	2320      	movs	r3, #32
 80186f6:	61bb      	str	r3, [r7, #24]
            break;
 80186f8:	e083      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018700:	461a      	mov	r2, r3
 8018702:	4b44      	ldr	r3, [pc, #272]	; (8018814 <RegionEU868GetPhyParam+0x27c>)
 8018704:	5c9b      	ldrb	r3, [r3, r2]
 8018706:	61bb      	str	r3, [r7, #24]
            break;
 8018708:	e07b      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018710:	461a      	mov	r2, r3
 8018712:	4b41      	ldr	r3, [pc, #260]	; (8018818 <RegionEU868GetPhyParam+0x280>)
 8018714:	5c9b      	ldrb	r3, [r3, r2]
 8018716:	61bb      	str	r3, [r7, #24]
            break;
 8018718:	e073      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801871a:	2301      	movs	r3, #1
 801871c:	61bb      	str	r3, [r7, #24]
            break;
 801871e:	e070      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018720:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018724:	61bb      	str	r3, [r7, #24]
            break;
 8018726:	e06c      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801872c:	61bb      	str	r3, [r7, #24]
            break;
 801872e:	e068      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018730:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018734:	61bb      	str	r3, [r7, #24]
            break;
 8018736:	e064      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018738:	f241 3388 	movw	r3, #5000	; 0x1388
 801873c:	61bb      	str	r3, [r7, #24]
            break;
 801873e:	e060      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018740:	f241 7370 	movw	r3, #6000	; 0x1770
 8018744:	61bb      	str	r3, [r7, #24]
            break;
 8018746:	e05c      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801874c:	61bb      	str	r3, [r7, #24]
            break;
 801874e:	e058      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018754:	4831      	ldr	r0, [pc, #196]	; (801881c <RegionEU868GetPhyParam+0x284>)
 8018756:	f001 f87f 	bl	8019858 <randr>
 801875a:	4603      	mov	r3, r0
 801875c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018760:	61bb      	str	r3, [r7, #24]
            break;
 8018762:	e04e      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018764:	2300      	movs	r3, #0
 8018766:	61bb      	str	r3, [r7, #24]
            break;
 8018768:	e04b      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801876a:	4b2d      	ldr	r3, [pc, #180]	; (8018820 <RegionEU868GetPhyParam+0x288>)
 801876c:	61bb      	str	r3, [r7, #24]
            break;
 801876e:	e048      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018770:	2300      	movs	r3, #0
 8018772:	61bb      	str	r3, [r7, #24]
            break;
 8018774:	e045      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018776:	4b26      	ldr	r3, [pc, #152]	; (8018810 <RegionEU868GetPhyParam+0x278>)
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801877e:	61bb      	str	r3, [r7, #24]
            break;
 8018780:	e03f      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018782:	4b23      	ldr	r3, [pc, #140]	; (8018810 <RegionEU868GetPhyParam+0x278>)
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801878a:	61bb      	str	r3, [r7, #24]
            break;
 801878c:	e039      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801878e:	2310      	movs	r3, #16
 8018790:	61bb      	str	r3, [r7, #24]
            break;
 8018792:	e036      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018794:	4b1e      	ldr	r3, [pc, #120]	; (8018810 <RegionEU868GetPhyParam+0x278>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	61bb      	str	r3, [r7, #24]
            break;
 801879a:	e032      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801879c:	2300      	movs	r3, #0
 801879e:	61bb      	str	r3, [r7, #24]
            break;
 80187a0:	e02f      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80187a2:	2300      	movs	r3, #0
 80187a4:	61bb      	str	r3, [r7, #24]
            break;
 80187a6:	e02c      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80187a8:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80187ac:	61bb      	str	r3, [r7, #24]
            break;
 80187ae:	e028      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80187b0:	4b1c      	ldr	r3, [pc, #112]	; (8018824 <RegionEU868GetPhyParam+0x28c>)
 80187b2:	61bb      	str	r3, [r7, #24]
            break;
 80187b4:	e025      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80187b6:	4b1a      	ldr	r3, [pc, #104]	; (8018820 <RegionEU868GetPhyParam+0x288>)
 80187b8:	61bb      	str	r3, [r7, #24]
            break;
 80187ba:	e022      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80187bc:	2311      	movs	r3, #17
 80187be:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80187c0:	2302      	movs	r3, #2
 80187c2:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80187c4:	2300      	movs	r3, #0
 80187c6:	76bb      	strb	r3, [r7, #26]
            break;
 80187c8:	e01b      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80187ca:	2303      	movs	r3, #3
 80187cc:	61bb      	str	r3, [r7, #24]
            break;
 80187ce:	e018      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80187d0:	4b13      	ldr	r3, [pc, #76]	; (8018820 <RegionEU868GetPhyParam+0x288>)
 80187d2:	61bb      	str	r3, [r7, #24]
            break;
 80187d4:	e015      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80187d6:	2303      	movs	r3, #3
 80187d8:	61bb      	str	r3, [r7, #24]
            break;
 80187da:	e012      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187e2:	461a      	mov	r2, r3
 80187e4:	4b10      	ldr	r3, [pc, #64]	; (8018828 <RegionEU868GetPhyParam+0x290>)
 80187e6:	5c9b      	ldrb	r3, [r3, r2]
 80187e8:	61bb      	str	r3, [r7, #24]
            break;
 80187ea:	e00a      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80187f2:	490e      	ldr	r1, [pc, #56]	; (801882c <RegionEU868GetPhyParam+0x294>)
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7ff fda1 	bl	801833c <RegionCommonGetBandwidth>
 80187fa:	4603      	mov	r3, r0
 80187fc:	61bb      	str	r3, [r7, #24]
            break;
 80187fe:	e000      	b.n	8018802 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018800:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018802:	69bb      	ldr	r3, [r7, #24]
 8018804:	61fb      	str	r3, [r7, #28]
 8018806:	69fb      	ldr	r3, [r7, #28]
}
 8018808:	4618      	mov	r0, r3
 801880a:	3720      	adds	r7, #32
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}
 8018810:	200016f0 	.word	0x200016f0
 8018814:	0801f450 	.word	0x0801f450
 8018818:	0801f458 	.word	0x0801f458
 801881c:	fffffc18 	.word	0xfffffc18
 8018820:	33d3e608 	.word	0x33d3e608
 8018824:	4009999a 	.word	0x4009999a
 8018828:	0801f428 	.word	0x0801f428
 801882c:	0801f430 	.word	0x0801f430

08018830 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018830:	b590      	push	{r4, r7, lr}
 8018832:	b085      	sub	sp, #20
 8018834:	af02      	add	r7, sp, #8
 8018836:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018838:	4b11      	ldr	r3, [pc, #68]	; (8018880 <RegionEU868SetBandTxDone+0x50>)
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	4b11      	ldr	r3, [pc, #68]	; (8018884 <RegionEU868SetBandTxDone+0x54>)
 801883e:	6819      	ldr	r1, [r3, #0]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	781b      	ldrb	r3, [r3, #0]
 8018844:	4618      	mov	r0, r3
 8018846:	4603      	mov	r3, r0
 8018848:	005b      	lsls	r3, r3, #1
 801884a:	4403      	add	r3, r0
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	440b      	add	r3, r1
 8018850:	3309      	adds	r3, #9
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	4619      	mov	r1, r3
 8018856:	460b      	mov	r3, r1
 8018858:	005b      	lsls	r3, r3, #1
 801885a:	440b      	add	r3, r1
 801885c:	00db      	lsls	r3, r3, #3
 801885e:	18d0      	adds	r0, r2, r3
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	6899      	ldr	r1, [r3, #8]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	785c      	ldrb	r4, [r3, #1]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	691a      	ldr	r2, [r3, #16]
 801886c:	9200      	str	r2, [sp, #0]
 801886e:	68db      	ldr	r3, [r3, #12]
 8018870:	4622      	mov	r2, r4
 8018872:	f7ff f8e9 	bl	8017a48 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018876:	bf00      	nop
 8018878:	370c      	adds	r7, #12
 801887a:	46bd      	mov	sp, r7
 801887c:	bd90      	pop	{r4, r7, pc}
 801887e:	bf00      	nop
 8018880:	200016ec 	.word	0x200016ec
 8018884:	200016f0 	.word	0x200016f0

08018888 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b0b0      	sub	sp, #192	; 0xc0
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018894:	2290      	movs	r2, #144	; 0x90
 8018896:	2100      	movs	r1, #0
 8018898:	4618      	mov	r0, r3
 801889a:	f005 fe11 	bl	801e4c0 <memset>
 801889e:	2364      	movs	r3, #100	; 0x64
 80188a0:	863b      	strh	r3, [r7, #48]	; 0x30
 80188a2:	2364      	movs	r3, #100	; 0x64
 80188a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80188a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80188ac:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80188b0:	230a      	movs	r3, #10
 80188b2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80188b6:	2364      	movs	r3, #100	; 0x64
 80188b8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80188bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80188c0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	7a1b      	ldrb	r3, [r3, #8]
 80188c8:	2b02      	cmp	r3, #2
 80188ca:	d05e      	beq.n	801898a <RegionEU868InitDefaults+0x102>
 80188cc:	2b02      	cmp	r3, #2
 80188ce:	dc6b      	bgt.n	80189a8 <RegionEU868InitDefaults+0x120>
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d002      	beq.n	80188da <RegionEU868InitDefaults+0x52>
 80188d4:	2b01      	cmp	r3, #1
 80188d6:	d03f      	beq.n	8018958 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80188d8:	e066      	b.n	80189a8 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d063      	beq.n	80189aa <RegionEU868InitDefaults+0x122>
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	685b      	ldr	r3, [r3, #4]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d05f      	beq.n	80189aa <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	4a30      	ldr	r2, [pc, #192]	; (80189b0 <RegionEU868InitDefaults+0x128>)
 80188f0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	685b      	ldr	r3, [r3, #4]
 80188f6:	4a2f      	ldr	r2, [pc, #188]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 80188f8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80188fa:	4b2d      	ldr	r3, [pc, #180]	; (80189b0 <RegionEU868InitDefaults+0x128>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	4618      	mov	r0, r3
 8018900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018904:	2290      	movs	r2, #144	; 0x90
 8018906:	4619      	mov	r1, r3
 8018908:	f000 ffbd 	bl	8019886 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801890c:	4b29      	ldr	r3, [pc, #164]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	4a29      	ldr	r2, [pc, #164]	; (80189b8 <RegionEU868InitDefaults+0x130>)
 8018912:	ca07      	ldmia	r2, {r0, r1, r2}
 8018914:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018918:	4b26      	ldr	r3, [pc, #152]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	4a27      	ldr	r2, [pc, #156]	; (80189bc <RegionEU868InitDefaults+0x134>)
 801891e:	330c      	adds	r3, #12
 8018920:	ca07      	ldmia	r2, {r0, r1, r2}
 8018922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018926:	4b23      	ldr	r3, [pc, #140]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	4a25      	ldr	r2, [pc, #148]	; (80189c0 <RegionEU868InitDefaults+0x138>)
 801892c:	3318      	adds	r3, #24
 801892e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018930:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018934:	4b1f      	ldr	r3, [pc, #124]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	2207      	movs	r2, #7
 801893a:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801893e:	4b1d      	ldr	r3, [pc, #116]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018946:	4b1b      	ldr	r3, [pc, #108]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 801894e:	2201      	movs	r2, #1
 8018950:	4619      	mov	r1, r3
 8018952:	f7ff f853 	bl	80179fc <RegionCommonChanMaskCopy>
 8018956:	e028      	b.n	80189aa <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018958:	4b16      	ldr	r3, [pc, #88]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	2200      	movs	r2, #0
 801895e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018960:	4b14      	ldr	r3, [pc, #80]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2200      	movs	r2, #0
 8018966:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018968:	4b12      	ldr	r3, [pc, #72]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	2200      	movs	r2, #0
 801896e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018970:	4b10      	ldr	r3, [pc, #64]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018978:	4b0e      	ldr	r3, [pc, #56]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018980:	2201      	movs	r2, #1
 8018982:	4619      	mov	r1, r3
 8018984:	f7ff f83a 	bl	80179fc <RegionCommonChanMaskCopy>
            break;
 8018988:	e00f      	b.n	80189aa <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801898a:	4b0a      	ldr	r3, [pc, #40]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018992:	4b08      	ldr	r3, [pc, #32]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 801899a:	4b06      	ldr	r3, [pc, #24]	; (80189b4 <RegionEU868InitDefaults+0x12c>)
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	430a      	orrs	r2, r1
 80189a0:	b292      	uxth	r2, r2
 80189a2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 80189a6:	e000      	b.n	80189aa <RegionEU868InitDefaults+0x122>
            break;
 80189a8:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80189aa:	37c0      	adds	r7, #192	; 0xc0
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	200016ec 	.word	0x200016ec
 80189b4:	200016f0 	.word	0x200016f0
 80189b8:	0801ee58 	.word	0x0801ee58
 80189bc:	0801ee64 	.word	0x0801ee64
 80189c0:	0801ee70 	.word	0x0801ee70

080189c4 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b084      	sub	sp, #16
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	6078      	str	r0, [r7, #4]
 80189cc:	460b      	mov	r3, r1
 80189ce:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80189d0:	78fb      	ldrb	r3, [r7, #3]
 80189d2:	2b0f      	cmp	r3, #15
 80189d4:	d86c      	bhi.n	8018ab0 <RegionEU868Verify+0xec>
 80189d6:	a201      	add	r2, pc, #4	; (adr r2, 80189dc <RegionEU868Verify+0x18>)
 80189d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189dc:	08018a1d 	.word	0x08018a1d
 80189e0:	08018ab1 	.word	0x08018ab1
 80189e4:	08018ab1 	.word	0x08018ab1
 80189e8:	08018ab1 	.word	0x08018ab1
 80189ec:	08018ab1 	.word	0x08018ab1
 80189f0:	08018a35 	.word	0x08018a35
 80189f4:	08018a53 	.word	0x08018a53
 80189f8:	08018a71 	.word	0x08018a71
 80189fc:	08018ab1 	.word	0x08018ab1
 8018a00:	08018a8f 	.word	0x08018a8f
 8018a04:	08018a8f 	.word	0x08018a8f
 8018a08:	08018ab1 	.word	0x08018ab1
 8018a0c:	08018ab1 	.word	0x08018ab1
 8018a10:	08018ab1 	.word	0x08018ab1
 8018a14:	08018ab1 	.word	0x08018ab1
 8018a18:	08018aad 	.word	0x08018aad
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	f107 020f 	add.w	r2, r7, #15
 8018a28:	4611      	mov	r1, r2
 8018a2a:	4618      	mov	r0, r3
 8018a2c:	f7ff fcee 	bl	801840c <VerifyRfFreq>
 8018a30:	4603      	mov	r3, r0
 8018a32:	e03e      	b.n	8018ab2 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	f993 3000 	ldrsb.w	r3, [r3]
 8018a3a:	2207      	movs	r2, #7
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7fe ff5f 	bl	8017902 <RegionCommonValueInRange>
 8018a44:	4603      	mov	r3, r0
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	bf14      	ite	ne
 8018a4a:	2301      	movne	r3, #1
 8018a4c:	2300      	moveq	r3, #0
 8018a4e:	b2db      	uxtb	r3, r3
 8018a50:	e02f      	b.n	8018ab2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f993 3000 	ldrsb.w	r3, [r3]
 8018a58:	2205      	movs	r2, #5
 8018a5a:	2100      	movs	r1, #0
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f7fe ff50 	bl	8017902 <RegionCommonValueInRange>
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	bf14      	ite	ne
 8018a68:	2301      	movne	r3, #1
 8018a6a:	2300      	moveq	r3, #0
 8018a6c:	b2db      	uxtb	r3, r3
 8018a6e:	e020      	b.n	8018ab2 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	f993 3000 	ldrsb.w	r3, [r3]
 8018a76:	2207      	movs	r2, #7
 8018a78:	2100      	movs	r1, #0
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f7fe ff41 	bl	8017902 <RegionCommonValueInRange>
 8018a80:	4603      	mov	r3, r0
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	bf14      	ite	ne
 8018a86:	2301      	movne	r3, #1
 8018a88:	2300      	moveq	r3, #0
 8018a8a:	b2db      	uxtb	r3, r3
 8018a8c:	e011      	b.n	8018ab2 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f993 3000 	ldrsb.w	r3, [r3]
 8018a94:	2207      	movs	r2, #7
 8018a96:	2100      	movs	r1, #0
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7fe ff32 	bl	8017902 <RegionCommonValueInRange>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	bf14      	ite	ne
 8018aa4:	2301      	movne	r3, #1
 8018aa6:	2300      	moveq	r3, #0
 8018aa8:	b2db      	uxtb	r3, r3
 8018aaa:	e002      	b.n	8018ab2 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018aac:	2301      	movs	r3, #1
 8018aae:	e000      	b.n	8018ab2 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8018ab0:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	3710      	adds	r7, #16
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop

08018abc <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b08a      	sub	sp, #40	; 0x28
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018ac4:	2350      	movs	r3, #80	; 0x50
 8018ac6:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	791b      	ldrb	r3, [r3, #4]
 8018ace:	2b10      	cmp	r3, #16
 8018ad0:	d162      	bne.n	8018b98 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	330f      	adds	r3, #15
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d15e      	bne.n	8018b9c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018ade:	2300      	movs	r3, #0
 8018ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018ae4:	2303      	movs	r3, #3
 8018ae6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018aea:	e050      	b.n	8018b8e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018af0:	2b07      	cmp	r3, #7
 8018af2:	d824      	bhi.n	8018b3e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681a      	ldr	r2, [r3, #0]
 8018af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018afc:	4413      	add	r3, r2
 8018afe:	781b      	ldrb	r3, [r3, #0]
 8018b00:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018b02:	69ba      	ldr	r2, [r7, #24]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6819      	ldr	r1, [r3, #0]
 8018b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b0c:	3301      	adds	r3, #1
 8018b0e:	440b      	add	r3, r1
 8018b10:	781b      	ldrb	r3, [r3, #0]
 8018b12:	021b      	lsls	r3, r3, #8
 8018b14:	4313      	orrs	r3, r2
 8018b16:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018b18:	69ba      	ldr	r2, [r7, #24]
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	6819      	ldr	r1, [r3, #0]
 8018b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b22:	3302      	adds	r3, #2
 8018b24:	440b      	add	r3, r1
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	041b      	lsls	r3, r3, #16
 8018b2a:	4313      	orrs	r3, r2
 8018b2c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8018b2e:	69bb      	ldr	r3, [r7, #24]
 8018b30:	2264      	movs	r2, #100	; 0x64
 8018b32:	fb02 f303 	mul.w	r3, r2, r3
 8018b36:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018b38:	2300      	movs	r3, #0
 8018b3a:	61fb      	str	r3, [r7, #28]
 8018b3c:	e006      	b.n	8018b4c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8018b3e:	2300      	movs	r3, #0
 8018b40:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8018b42:	2300      	movs	r3, #0
 8018b44:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8018b48:	2300      	movs	r3, #0
 8018b4a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018b4c:	69bb      	ldr	r3, [r7, #24]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d00b      	beq.n	8018b6a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8018b52:	f107 0318 	add.w	r3, r7, #24
 8018b56:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8018b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b5c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018b5e:	f107 0310 	add.w	r3, r7, #16
 8018b62:	4618      	mov	r0, r3
 8018b64:	f000 fd14 	bl	8019590 <RegionEU868ChannelAdd>
 8018b68:	e007      	b.n	8018b7a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b6e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8018b70:	f107 030c 	add.w	r3, r7, #12
 8018b74:	4618      	mov	r0, r3
 8018b76:	f000 fdad 	bl	80196d4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b7e:	3303      	adds	r3, #3
 8018b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b88:	3301      	adds	r3, #1
 8018b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b92:	2b0f      	cmp	r3, #15
 8018b94:	d9aa      	bls.n	8018aec <RegionEU868ApplyCFList+0x30>
 8018b96:	e002      	b.n	8018b9e <RegionEU868ApplyCFList+0xe2>
        return;
 8018b98:	bf00      	nop
 8018b9a:	e000      	b.n	8018b9e <RegionEU868ApplyCFList+0xe2>
        return;
 8018b9c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018b9e:	3728      	adds	r7, #40	; 0x28
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	791b      	ldrb	r3, [r3, #4]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d002      	beq.n	8018bba <RegionEU868ChanMaskSet+0x16>
 8018bb4:	2b01      	cmp	r3, #1
 8018bb6:	d00b      	beq.n	8018bd0 <RegionEU868ChanMaskSet+0x2c>
 8018bb8:	e015      	b.n	8018be6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018bba:	4b0e      	ldr	r3, [pc, #56]	; (8018bf4 <RegionEU868ChanMaskSet+0x50>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	2201      	movs	r2, #1
 8018bc8:	4619      	mov	r1, r3
 8018bca:	f7fe ff17 	bl	80179fc <RegionCommonChanMaskCopy>
            break;
 8018bce:	e00c      	b.n	8018bea <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018bd0:	4b08      	ldr	r3, [pc, #32]	; (8018bf4 <RegionEU868ChanMaskSet+0x50>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	2201      	movs	r2, #1
 8018bde:	4619      	mov	r1, r3
 8018be0:	f7fe ff0c 	bl	80179fc <RegionCommonChanMaskCopy>
            break;
 8018be4:	e001      	b.n	8018bea <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8018be6:	2300      	movs	r3, #0
 8018be8:	e000      	b.n	8018bec <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8018bea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018bec:	4618      	mov	r0, r3
 8018bee:	3708      	adds	r7, #8
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}
 8018bf4:	200016f0 	.word	0x200016f0

08018bf8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b088      	sub	sp, #32
 8018bfc:	af02      	add	r7, sp, #8
 8018bfe:	60ba      	str	r2, [r7, #8]
 8018c00:	607b      	str	r3, [r7, #4]
 8018c02:	4603      	mov	r3, r0
 8018c04:	73fb      	strb	r3, [r7, #15]
 8018c06:	460b      	mov	r3, r1
 8018c08:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c12:	2b07      	cmp	r3, #7
 8018c14:	bfa8      	it	ge
 8018c16:	2307      	movge	r3, #7
 8018c18:	b25a      	sxtb	r2, r3
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c24:	491e      	ldr	r1, [pc, #120]	; (8018ca0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7ff fb88 	bl	801833c <RegionCommonGetBandwidth>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	b2da      	uxtb	r2, r3
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c3a:	2b07      	cmp	r3, #7
 8018c3c:	d10a      	bne.n	8018c54 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c44:	461a      	mov	r2, r3
 8018c46:	4b17      	ldr	r3, [pc, #92]	; (8018ca4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018c48:	5c9b      	ldrb	r3, [r3, r2]
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7ff f90a 	bl	8017e64 <RegionCommonComputeSymbolTimeFsk>
 8018c50:	6178      	str	r0, [r7, #20]
 8018c52:	e011      	b.n	8018c78 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c5a:	461a      	mov	r2, r3
 8018c5c:	4b11      	ldr	r3, [pc, #68]	; (8018ca4 <RegionEU868ComputeRxWindowParameters+0xac>)
 8018c5e:	5c9a      	ldrb	r2, [r3, r2]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c66:	4619      	mov	r1, r3
 8018c68:	4b0d      	ldr	r3, [pc, #52]	; (8018ca0 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c6e:	4619      	mov	r1, r3
 8018c70:	4610      	mov	r0, r2
 8018c72:	f7ff f8e1 	bl	8017e38 <RegionCommonComputeSymbolTimeLoRa>
 8018c76:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018c78:	4b0b      	ldr	r3, [pc, #44]	; (8018ca8 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c7c:	4798      	blx	r3
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	3308      	adds	r3, #8
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	320c      	adds	r2, #12
 8018c86:	7bb9      	ldrb	r1, [r7, #14]
 8018c88:	9201      	str	r2, [sp, #4]
 8018c8a:	9300      	str	r3, [sp, #0]
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	68ba      	ldr	r2, [r7, #8]
 8018c90:	6978      	ldr	r0, [r7, #20]
 8018c92:	f7ff f8f7 	bl	8017e84 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8018c96:	bf00      	nop
 8018c98:	3718      	adds	r7, #24
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	bd80      	pop	{r7, pc}
 8018c9e:	bf00      	nop
 8018ca0:	0801f430 	.word	0x0801f430
 8018ca4:	0801f428 	.word	0x0801f428
 8018ca8:	0801f460 	.word	0x0801f460

08018cac <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018cac:	b5b0      	push	{r4, r5, r7, lr}
 8018cae:	b090      	sub	sp, #64	; 0x40
 8018cb0:	af0a      	add	r7, sp, #40	; 0x28
 8018cb2:	6078      	str	r0, [r7, #4]
 8018cb4:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	785b      	ldrb	r3, [r3, #1]
 8018cba:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	685b      	ldr	r3, [r3, #4]
 8018cc8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018cca:	4b5a      	ldr	r3, [pc, #360]	; (8018e34 <RegionEU868RxConfig+0x188>)
 8018ccc:	685b      	ldr	r3, [r3, #4]
 8018cce:	4798      	blx	r3
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d001      	beq.n	8018cda <RegionEU868RxConfig+0x2e>
    {
        return false;
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	e0a8      	b.n	8018e2c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	7cdb      	ldrb	r3, [r3, #19]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d126      	bne.n	8018d30 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018ce2:	4b55      	ldr	r3, [pc, #340]	; (8018e38 <RegionEU868RxConfig+0x18c>)
 8018ce4:	681a      	ldr	r2, [r3, #0]
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	4619      	mov	r1, r3
 8018cec:	460b      	mov	r3, r1
 8018cee:	005b      	lsls	r3, r3, #1
 8018cf0:	440b      	add	r3, r1
 8018cf2:	009b      	lsls	r3, r3, #2
 8018cf4:	4413      	add	r3, r2
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018cfa:	4b4f      	ldr	r3, [pc, #316]	; (8018e38 <RegionEU868RxConfig+0x18c>)
 8018cfc:	681a      	ldr	r2, [r3, #0]
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	4619      	mov	r1, r3
 8018d04:	460b      	mov	r3, r1
 8018d06:	005b      	lsls	r3, r3, #1
 8018d08:	440b      	add	r3, r1
 8018d0a:	009b      	lsls	r3, r3, #2
 8018d0c:	4413      	add	r3, r2
 8018d0e:	3304      	adds	r3, #4
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d00c      	beq.n	8018d30 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8018d16:	4b48      	ldr	r3, [pc, #288]	; (8018e38 <RegionEU868RxConfig+0x18c>)
 8018d18:	681a      	ldr	r2, [r3, #0]
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	781b      	ldrb	r3, [r3, #0]
 8018d1e:	4619      	mov	r1, r3
 8018d20:	460b      	mov	r3, r1
 8018d22:	005b      	lsls	r3, r3, #1
 8018d24:	440b      	add	r3, r1
 8018d26:	009b      	lsls	r3, r3, #2
 8018d28:	4413      	add	r3, r2
 8018d2a:	3304      	adds	r3, #4
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d34:	4a41      	ldr	r2, [pc, #260]	; (8018e3c <RegionEU868RxConfig+0x190>)
 8018d36:	5cd3      	ldrb	r3, [r2, r3]
 8018d38:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018d3a:	4b3e      	ldr	r3, [pc, #248]	; (8018e34 <RegionEU868RxConfig+0x188>)
 8018d3c:	68db      	ldr	r3, [r3, #12]
 8018d3e:	6938      	ldr	r0, [r7, #16]
 8018d40:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d46:	2b07      	cmp	r3, #7
 8018d48:	d128      	bne.n	8018d9c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018d4e:	4b39      	ldr	r3, [pc, #228]	; (8018e34 <RegionEU868RxConfig+0x188>)
 8018d50:	699c      	ldr	r4, [r3, #24]
 8018d52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d5a:	fb02 f303 	mul.w	r3, r2, r3
 8018d5e:	4619      	mov	r1, r3
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	689b      	ldr	r3, [r3, #8]
 8018d64:	b29b      	uxth	r3, r3
 8018d66:	687a      	ldr	r2, [r7, #4]
 8018d68:	7c92      	ldrb	r2, [r2, #18]
 8018d6a:	7df8      	ldrb	r0, [r7, #23]
 8018d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8018d6e:	2200      	movs	r2, #0
 8018d70:	9208      	str	r2, [sp, #32]
 8018d72:	2200      	movs	r2, #0
 8018d74:	9207      	str	r2, [sp, #28]
 8018d76:	2200      	movs	r2, #0
 8018d78:	9206      	str	r2, [sp, #24]
 8018d7a:	2201      	movs	r2, #1
 8018d7c:	9205      	str	r2, [sp, #20]
 8018d7e:	2200      	movs	r2, #0
 8018d80:	9204      	str	r2, [sp, #16]
 8018d82:	2200      	movs	r2, #0
 8018d84:	9203      	str	r2, [sp, #12]
 8018d86:	9302      	str	r3, [sp, #8]
 8018d88:	2305      	movs	r3, #5
 8018d8a:	9301      	str	r3, [sp, #4]
 8018d8c:	4b2c      	ldr	r3, [pc, #176]	; (8018e40 <RegionEU868RxConfig+0x194>)
 8018d8e:	9300      	str	r3, [sp, #0]
 8018d90:	2300      	movs	r3, #0
 8018d92:	460a      	mov	r2, r1
 8018d94:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018d98:	47a0      	blx	r4
 8018d9a:	e024      	b.n	8018de6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018da0:	4b24      	ldr	r3, [pc, #144]	; (8018e34 <RegionEU868RxConfig+0x188>)
 8018da2:	699c      	ldr	r4, [r3, #24]
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	789b      	ldrb	r3, [r3, #2]
 8018da8:	461d      	mov	r5, r3
 8018daa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	689b      	ldr	r3, [r3, #8]
 8018db2:	b29b      	uxth	r3, r3
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	7c92      	ldrb	r2, [r2, #18]
 8018db8:	7df8      	ldrb	r0, [r7, #23]
 8018dba:	9209      	str	r2, [sp, #36]	; 0x24
 8018dbc:	2201      	movs	r2, #1
 8018dbe:	9208      	str	r2, [sp, #32]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	9207      	str	r2, [sp, #28]
 8018dc4:	2200      	movs	r2, #0
 8018dc6:	9206      	str	r2, [sp, #24]
 8018dc8:	2200      	movs	r2, #0
 8018dca:	9205      	str	r2, [sp, #20]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	9204      	str	r2, [sp, #16]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	9203      	str	r2, [sp, #12]
 8018dd4:	9302      	str	r3, [sp, #8]
 8018dd6:	2308      	movs	r3, #8
 8018dd8:	9301      	str	r3, [sp, #4]
 8018dda:	2300      	movs	r3, #0
 8018ddc:	9300      	str	r3, [sp, #0]
 8018dde:	2301      	movs	r3, #1
 8018de0:	460a      	mov	r2, r1
 8018de2:	4629      	mov	r1, r5
 8018de4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	7c5b      	ldrb	r3, [r3, #17]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d005      	beq.n	8018dfa <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018df2:	4a14      	ldr	r2, [pc, #80]	; (8018e44 <RegionEU868RxConfig+0x198>)
 8018df4:	5cd3      	ldrb	r3, [r2, r3]
 8018df6:	75bb      	strb	r3, [r7, #22]
 8018df8:	e004      	b.n	8018e04 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018dfe:	4a12      	ldr	r2, [pc, #72]	; (8018e48 <RegionEU868RxConfig+0x19c>)
 8018e00:	5cd3      	ldrb	r3, [r2, r3]
 8018e02:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018e04:	4b0b      	ldr	r3, [pc, #44]	; (8018e34 <RegionEU868RxConfig+0x188>)
 8018e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018e08:	7dba      	ldrb	r2, [r7, #22]
 8018e0a:	320d      	adds	r2, #13
 8018e0c:	b2d1      	uxtb	r1, r2
 8018e0e:	7dfa      	ldrb	r2, [r7, #23]
 8018e10:	4610      	mov	r0, r2
 8018e12:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	7cdb      	ldrb	r3, [r3, #19]
 8018e18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018e1c:	6939      	ldr	r1, [r7, #16]
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f7ff faaa 	bl	8018378 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018e24:	683b      	ldr	r3, [r7, #0]
 8018e26:	7bfa      	ldrb	r2, [r7, #15]
 8018e28:	701a      	strb	r2, [r3, #0]
    return true;
 8018e2a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	3718      	adds	r7, #24
 8018e30:	46bd      	mov	sp, r7
 8018e32:	bdb0      	pop	{r4, r5, r7, pc}
 8018e34:	0801f460 	.word	0x0801f460
 8018e38:	200016f0 	.word	0x200016f0
 8018e3c:	0801f428 	.word	0x0801f428
 8018e40:	00014585 	.word	0x00014585
 8018e44:	0801f458 	.word	0x0801f458
 8018e48:	0801f450 	.word	0x0801f450

08018e4c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018e4c:	b590      	push	{r4, r7, lr}
 8018e4e:	b093      	sub	sp, #76	; 0x4c
 8018e50:	af0a      	add	r7, sp, #40	; 0x28
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018e5e:	461a      	mov	r2, r3
 8018e60:	4b5d      	ldr	r3, [pc, #372]	; (8018fd8 <RegionEU868TxConfig+0x18c>)
 8018e62:	5c9b      	ldrb	r3, [r3, r2]
 8018e64:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018e6c:	4b5b      	ldr	r3, [pc, #364]	; (8018fdc <RegionEU868TxConfig+0x190>)
 8018e6e:	681a      	ldr	r2, [r3, #0]
 8018e70:	4b5b      	ldr	r3, [pc, #364]	; (8018fe0 <RegionEU868TxConfig+0x194>)
 8018e72:	6819      	ldr	r1, [r3, #0]
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	781b      	ldrb	r3, [r3, #0]
 8018e78:	461c      	mov	r4, r3
 8018e7a:	4623      	mov	r3, r4
 8018e7c:	005b      	lsls	r3, r3, #1
 8018e7e:	4423      	add	r3, r4
 8018e80:	009b      	lsls	r3, r3, #2
 8018e82:	440b      	add	r3, r1
 8018e84:	3309      	adds	r3, #9
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	4619      	mov	r1, r3
 8018e8a:	460b      	mov	r3, r1
 8018e8c:	005b      	lsls	r3, r3, #1
 8018e8e:	440b      	add	r3, r1
 8018e90:	00db      	lsls	r3, r3, #3
 8018e92:	4413      	add	r3, r2
 8018e94:	3302      	adds	r3, #2
 8018e96:	f993 3000 	ldrsb.w	r3, [r3]
 8018e9a:	4619      	mov	r1, r3
 8018e9c:	f7ff fa39 	bl	8018312 <RegionCommonLimitTxPower>
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018eaa:	494e      	ldr	r1, [pc, #312]	; (8018fe4 <RegionEU868TxConfig+0x198>)
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7ff fa45 	bl	801833c <RegionCommonGetBandwidth>
 8018eb2:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	6859      	ldr	r1, [r3, #4]
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	689a      	ldr	r2, [r3, #8]
 8018ec0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f7ff f895 	bl	8017ff4 <RegionCommonComputeTxPower>
 8018eca:	4603      	mov	r3, r0
 8018ecc:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018ece:	4b46      	ldr	r3, [pc, #280]	; (8018fe8 <RegionEU868TxConfig+0x19c>)
 8018ed0:	68da      	ldr	r2, [r3, #12]
 8018ed2:	4b43      	ldr	r3, [pc, #268]	; (8018fe0 <RegionEU868TxConfig+0x194>)
 8018ed4:	6819      	ldr	r1, [r3, #0]
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	4618      	mov	r0, r3
 8018edc:	4603      	mov	r3, r0
 8018ede:	005b      	lsls	r3, r3, #1
 8018ee0:	4403      	add	r3, r0
 8018ee2:	009b      	lsls	r3, r3, #2
 8018ee4:	440b      	add	r3, r1
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4618      	mov	r0, r3
 8018eea:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ef2:	2b07      	cmp	r3, #7
 8018ef4:	d124      	bne.n	8018f40 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018efa:	4b3b      	ldr	r3, [pc, #236]	; (8018fe8 <RegionEU868TxConfig+0x19c>)
 8018efc:	69dc      	ldr	r4, [r3, #28]
 8018efe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018f06:	fb02 f303 	mul.w	r3, r2, r3
 8018f0a:	461a      	mov	r2, r3
 8018f0c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018f10:	7ff8      	ldrb	r0, [r7, #31]
 8018f12:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018f16:	9308      	str	r3, [sp, #32]
 8018f18:	2300      	movs	r3, #0
 8018f1a:	9307      	str	r3, [sp, #28]
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	9306      	str	r3, [sp, #24]
 8018f20:	2300      	movs	r3, #0
 8018f22:	9305      	str	r3, [sp, #20]
 8018f24:	2301      	movs	r3, #1
 8018f26:	9304      	str	r3, [sp, #16]
 8018f28:	2300      	movs	r3, #0
 8018f2a:	9303      	str	r3, [sp, #12]
 8018f2c:	2305      	movs	r3, #5
 8018f2e:	9302      	str	r3, [sp, #8]
 8018f30:	2300      	movs	r3, #0
 8018f32:	9301      	str	r3, [sp, #4]
 8018f34:	9200      	str	r2, [sp, #0]
 8018f36:	69bb      	ldr	r3, [r7, #24]
 8018f38:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8018f3c:	47a0      	blx	r4
 8018f3e:	e01d      	b.n	8018f7c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8018f40:	2301      	movs	r3, #1
 8018f42:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018f44:	4b28      	ldr	r3, [pc, #160]	; (8018fe8 <RegionEU868TxConfig+0x19c>)
 8018f46:	69dc      	ldr	r4, [r3, #28]
 8018f48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018f4c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018f50:	7ff8      	ldrb	r0, [r7, #31]
 8018f52:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018f56:	9208      	str	r2, [sp, #32]
 8018f58:	2200      	movs	r2, #0
 8018f5a:	9207      	str	r2, [sp, #28]
 8018f5c:	2200      	movs	r2, #0
 8018f5e:	9206      	str	r2, [sp, #24]
 8018f60:	2200      	movs	r2, #0
 8018f62:	9205      	str	r2, [sp, #20]
 8018f64:	2201      	movs	r2, #1
 8018f66:	9204      	str	r2, [sp, #16]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	9203      	str	r2, [sp, #12]
 8018f6c:	2208      	movs	r2, #8
 8018f6e:	9202      	str	r2, [sp, #8]
 8018f70:	2201      	movs	r2, #1
 8018f72:	9201      	str	r2, [sp, #4]
 8018f74:	9300      	str	r3, [sp, #0]
 8018f76:	69bb      	ldr	r3, [r7, #24]
 8018f78:	2200      	movs	r2, #0
 8018f7a:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018f7c:	4b18      	ldr	r3, [pc, #96]	; (8018fe0 <RegionEU868TxConfig+0x194>)
 8018f7e:	681a      	ldr	r2, [r3, #0]
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	781b      	ldrb	r3, [r3, #0]
 8018f84:	4619      	mov	r1, r3
 8018f86:	460b      	mov	r3, r1
 8018f88:	005b      	lsls	r3, r3, #1
 8018f8a:	440b      	add	r3, r1
 8018f8c:	009b      	lsls	r3, r3, #2
 8018f8e:	4413      	add	r3, r2
 8018f90:	681a      	ldr	r2, [r3, #0]
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f98:	4619      	mov	r1, r3
 8018f9a:	4610      	mov	r0, r2
 8018f9c:	f7ff fa1e 	bl	80183dc <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	899b      	ldrh	r3, [r3, #12]
 8018faa:	4619      	mov	r1, r3
 8018fac:	4610      	mov	r0, r2
 8018fae:	f7ff faa3 	bl	80184f8 <GetTimeOnAir>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018fb8:	4b0b      	ldr	r3, [pc, #44]	; (8018fe8 <RegionEU868TxConfig+0x19c>)
 8018fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fbc:	68fa      	ldr	r2, [r7, #12]
 8018fbe:	8992      	ldrh	r2, [r2, #12]
 8018fc0:	b2d1      	uxtb	r1, r2
 8018fc2:	7ffa      	ldrb	r2, [r7, #31]
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	7f7a      	ldrb	r2, [r7, #29]
 8018fcc:	701a      	strb	r2, [r3, #0]
    return true;
 8018fce:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	3724      	adds	r7, #36	; 0x24
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd90      	pop	{r4, r7, pc}
 8018fd8:	0801f428 	.word	0x0801f428
 8018fdc:	200016ec 	.word	0x200016ec
 8018fe0:	200016f0 	.word	0x200016f0
 8018fe4:	0801f430 	.word	0x0801f430
 8018fe8:	0801f460 	.word	0x0801f460

08018fec <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018fec:	b590      	push	{r4, r7, lr}
 8018fee:	b093      	sub	sp, #76	; 0x4c
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	60f8      	str	r0, [r7, #12]
 8018ff4:	60b9      	str	r1, [r7, #8]
 8018ff6:	607a      	str	r2, [r7, #4]
 8018ff8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018ffa:	2307      	movs	r3, #7
 8018ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019000:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019004:	2200      	movs	r2, #0
 8019006:	601a      	str	r2, [r3, #0]
 8019008:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801900a:	2300      	movs	r3, #0
 801900c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019010:	2300      	movs	r3, #0
 8019012:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019016:	2300      	movs	r3, #0
 8019018:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801901a:	e085      	b.n	8019128 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801901c:	68fb      	ldr	r3, [r7, #12]
 801901e:	685a      	ldr	r2, [r3, #4]
 8019020:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019024:	4413      	add	r3, r2
 8019026:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801902a:	4611      	mov	r1, r2
 801902c:	4618      	mov	r0, r3
 801902e:	f7fe fe29 	bl	8017c84 <RegionCommonParseLinkAdrReq>
 8019032:	4603      	mov	r3, r0
 8019034:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019038:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801903c:	2b00      	cmp	r3, #0
 801903e:	d07b      	beq.n	8019138 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019040:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019044:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019048:	4413      	add	r3, r2
 801904a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801904e:	2307      	movs	r3, #7
 8019050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019058:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801905a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801905e:	2b00      	cmp	r3, #0
 8019060:	d109      	bne.n	8019076 <RegionEU868LinkAdrReq+0x8a>
 8019062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019064:	2b00      	cmp	r3, #0
 8019066:	d106      	bne.n	8019076 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019068:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801906c:	f023 0301 	bic.w	r3, r3, #1
 8019070:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019074:	e058      	b.n	8019128 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019076:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801907a:	2b00      	cmp	r3, #0
 801907c:	d003      	beq.n	8019086 <RegionEU868LinkAdrReq+0x9a>
 801907e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019082:	2b05      	cmp	r3, #5
 8019084:	d903      	bls.n	801908e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801908a:	2b06      	cmp	r3, #6
 801908c:	d906      	bls.n	801909c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801908e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019092:	f023 0301 	bic.w	r3, r3, #1
 8019096:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801909a:	e045      	b.n	8019128 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801909c:	2300      	movs	r3, #0
 801909e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80190a2:	e03d      	b.n	8019120 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80190a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80190a8:	2b06      	cmp	r3, #6
 80190aa:	d118      	bne.n	80190de <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80190ac:	4b5f      	ldr	r3, [pc, #380]	; (801922c <RegionEU868LinkAdrReq+0x240>)
 80190ae:	6819      	ldr	r1, [r3, #0]
 80190b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80190b4:	4613      	mov	r3, r2
 80190b6:	005b      	lsls	r3, r3, #1
 80190b8:	4413      	add	r3, r2
 80190ba:	009b      	lsls	r3, r3, #2
 80190bc:	440b      	add	r3, r1
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d028      	beq.n	8019116 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80190c4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190c8:	2201      	movs	r2, #1
 80190ca:	fa02 f303 	lsl.w	r3, r2, r3
 80190ce:	b21a      	sxth	r2, r3
 80190d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190d2:	b21b      	sxth	r3, r3
 80190d4:	4313      	orrs	r3, r2
 80190d6:	b21b      	sxth	r3, r3
 80190d8:	b29b      	uxth	r3, r3
 80190da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80190dc:	e01b      	b.n	8019116 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80190de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190e0:	461a      	mov	r2, r3
 80190e2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80190e6:	fa42 f303 	asr.w	r3, r2, r3
 80190ea:	f003 0301 	and.w	r3, r3, #1
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d011      	beq.n	8019116 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80190f2:	4b4e      	ldr	r3, [pc, #312]	; (801922c <RegionEU868LinkAdrReq+0x240>)
 80190f4:	6819      	ldr	r1, [r3, #0]
 80190f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80190fa:	4613      	mov	r3, r2
 80190fc:	005b      	lsls	r3, r3, #1
 80190fe:	4413      	add	r3, r2
 8019100:	009b      	lsls	r3, r3, #2
 8019102:	440b      	add	r3, r1
 8019104:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019106:	2b00      	cmp	r3, #0
 8019108:	d105      	bne.n	8019116 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801910a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801910e:	f023 0301 	bic.w	r3, r3, #1
 8019112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019116:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801911a:	3301      	adds	r3, #1
 801911c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019120:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019124:	2b0f      	cmp	r3, #15
 8019126:	d9bd      	bls.n	80190a4 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	7a1b      	ldrb	r3, [r3, #8]
 801912c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019130:	429a      	cmp	r2, r3
 8019132:	f4ff af73 	bcc.w	801901c <RegionEU868LinkAdrReq+0x30>
 8019136:	e000      	b.n	801913a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019138:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801913a:	2302      	movs	r3, #2
 801913c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	7a5b      	ldrb	r3, [r3, #9]
 8019144:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801914c:	4618      	mov	r0, r3
 801914e:	f7ff fa23 	bl	8018598 <RegionEU868GetPhyParam>
 8019152:	4603      	mov	r3, r0
 8019154:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019156:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801915a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	7a9b      	ldrb	r3, [r3, #10]
 8019160:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019162:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019166:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019168:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 801916c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801916e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019172:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801917a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019182:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	7b5b      	ldrb	r3, [r3, #13]
 8019188:	b25b      	sxtb	r3, r3
 801918a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801918c:	2310      	movs	r3, #16
 801918e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019190:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019194:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019198:	b25b      	sxtb	r3, r3
 801919a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801919e:	2307      	movs	r3, #7
 80191a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80191a4:	4b21      	ldr	r3, [pc, #132]	; (801922c <RegionEU868LinkAdrReq+0x240>)
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80191aa:	2307      	movs	r3, #7
 80191ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80191b0:	2300      	movs	r3, #0
 80191b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80191bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80191c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80191c4:	1c9a      	adds	r2, r3, #2
 80191c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80191ca:	1c59      	adds	r1, r3, #1
 80191cc:	f107 0010 	add.w	r0, r7, #16
 80191d0:	4623      	mov	r3, r4
 80191d2:	f7fe fda8 	bl	8017d26 <RegionCommonLinkAdrReqVerifyParams>
 80191d6:	4603      	mov	r3, r0
 80191d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80191dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80191e0:	2b07      	cmp	r3, #7
 80191e2:	d10d      	bne.n	8019200 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80191e4:	4b11      	ldr	r3, [pc, #68]	; (801922c <RegionEU868LinkAdrReq+0x240>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80191ec:	220c      	movs	r2, #12
 80191ee:	2100      	movs	r1, #0
 80191f0:	4618      	mov	r0, r3
 80191f2:	f000 fb83 	bl	80198fc <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80191f6:	4b0d      	ldr	r3, [pc, #52]	; (801922c <RegionEU868LinkAdrReq+0x240>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191fc:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019200:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019204:	68bb      	ldr	r3, [r7, #8]
 8019206:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019208:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019210:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801921a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801921e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019224:	4618      	mov	r0, r3
 8019226:	374c      	adds	r7, #76	; 0x4c
 8019228:	46bd      	mov	sp, r7
 801922a:	bd90      	pop	{r4, r7, pc}
 801922c:	200016f0 	.word	0x200016f0

08019230 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019230:	b580      	push	{r7, lr}
 8019232:	b084      	sub	sp, #16
 8019234:	af00      	add	r7, sp, #0
 8019236:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019238:	2307      	movs	r3, #7
 801923a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801923c:	2300      	movs	r3, #0
 801923e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019240:	687b      	ldr	r3, [r7, #4]
 8019242:	685b      	ldr	r3, [r3, #4]
 8019244:	f107 020e 	add.w	r2, r7, #14
 8019248:	4611      	mov	r1, r2
 801924a:	4618      	mov	r0, r3
 801924c:	f7ff f8de 	bl	801840c <VerifyRfFreq>
 8019250:	4603      	mov	r3, r0
 8019252:	f083 0301 	eor.w	r3, r3, #1
 8019256:	b2db      	uxtb	r3, r3
 8019258:	2b00      	cmp	r3, #0
 801925a:	d003      	beq.n	8019264 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 801925c:	7bfb      	ldrb	r3, [r7, #15]
 801925e:	f023 0301 	bic.w	r3, r3, #1
 8019262:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	f993 3000 	ldrsb.w	r3, [r3]
 801926a:	2207      	movs	r2, #7
 801926c:	2100      	movs	r1, #0
 801926e:	4618      	mov	r0, r3
 8019270:	f7fe fb47 	bl	8017902 <RegionCommonValueInRange>
 8019274:	4603      	mov	r3, r0
 8019276:	2b00      	cmp	r3, #0
 8019278:	d103      	bne.n	8019282 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801927a:	7bfb      	ldrb	r3, [r7, #15]
 801927c:	f023 0302 	bic.w	r3, r3, #2
 8019280:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019288:	2205      	movs	r2, #5
 801928a:	2100      	movs	r1, #0
 801928c:	4618      	mov	r0, r3
 801928e:	f7fe fb38 	bl	8017902 <RegionCommonValueInRange>
 8019292:	4603      	mov	r3, r0
 8019294:	2b00      	cmp	r3, #0
 8019296:	d103      	bne.n	80192a0 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019298:	7bfb      	ldrb	r3, [r7, #15]
 801929a:	f023 0304 	bic.w	r3, r3, #4
 801929e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80192a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	3710      	adds	r7, #16
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bd80      	pop	{r7, pc}
	...

080192ac <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b086      	sub	sp, #24
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80192b4:	2303      	movs	r3, #3
 80192b6:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d114      	bne.n	80192ec <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80192cc:	f107 0308 	add.w	r3, r7, #8
 80192d0:	4618      	mov	r0, r3
 80192d2:	f000 f9ff 	bl	80196d4 <RegionEU868ChannelsRemove>
 80192d6:	4603      	mov	r3, r0
 80192d8:	f083 0301 	eor.w	r3, r3, #1
 80192dc:	b2db      	uxtb	r3, r3
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d03b      	beq.n	801935a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80192e2:	7dfb      	ldrb	r3, [r7, #23]
 80192e4:	f023 0303 	bic.w	r3, r3, #3
 80192e8:	75fb      	strb	r3, [r7, #23]
 80192ea:	e036      	b.n	801935a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80192f8:	b2db      	uxtb	r3, r3
 80192fa:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80192fc:	f107 030c 	add.w	r3, r7, #12
 8019300:	4618      	mov	r0, r3
 8019302:	f000 f945 	bl	8019590 <RegionEU868ChannelAdd>
 8019306:	4603      	mov	r3, r0
 8019308:	2b06      	cmp	r3, #6
 801930a:	d820      	bhi.n	801934e <RegionEU868NewChannelReq+0xa2>
 801930c:	a201      	add	r2, pc, #4	; (adr r2, 8019314 <RegionEU868NewChannelReq+0x68>)
 801930e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019312:	bf00      	nop
 8019314:	08019359 	.word	0x08019359
 8019318:	0801934f 	.word	0x0801934f
 801931c:	0801934f 	.word	0x0801934f
 8019320:	0801934f 	.word	0x0801934f
 8019324:	08019331 	.word	0x08019331
 8019328:	0801933b 	.word	0x0801933b
 801932c:	08019345 	.word	0x08019345
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019330:	7dfb      	ldrb	r3, [r7, #23]
 8019332:	f023 0301 	bic.w	r3, r3, #1
 8019336:	75fb      	strb	r3, [r7, #23]
                break;
 8019338:	e00f      	b.n	801935a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801933a:	7dfb      	ldrb	r3, [r7, #23]
 801933c:	f023 0302 	bic.w	r3, r3, #2
 8019340:	75fb      	strb	r3, [r7, #23]
                break;
 8019342:	e00a      	b.n	801935a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019344:	7dfb      	ldrb	r3, [r7, #23]
 8019346:	f023 0303 	bic.w	r3, r3, #3
 801934a:	75fb      	strb	r3, [r7, #23]
                break;
 801934c:	e005      	b.n	801935a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801934e:	7dfb      	ldrb	r3, [r7, #23]
 8019350:	f023 0303 	bic.w	r3, r3, #3
 8019354:	75fb      	strb	r3, [r7, #23]
                break;
 8019356:	e000      	b.n	801935a <RegionEU868NewChannelReq+0xae>
                break;
 8019358:	bf00      	nop
            }
        }
    }

    return status;
 801935a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801935e:	4618      	mov	r0, r3
 8019360:	3718      	adds	r7, #24
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}
 8019366:	bf00      	nop

08019368 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019368:	b480      	push	{r7}
 801936a:	b083      	sub	sp, #12
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019374:	4618      	mov	r0, r3
 8019376:	370c      	adds	r7, #12
 8019378:	46bd      	mov	sp, r7
 801937a:	bc80      	pop	{r7}
 801937c:	4770      	bx	lr
	...

08019380 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b084      	sub	sp, #16
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019388:	2303      	movs	r3, #3
 801938a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801938c:	2300      	movs	r3, #0
 801938e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	781b      	ldrb	r3, [r3, #0]
 8019394:	2b0f      	cmp	r3, #15
 8019396:	d901      	bls.n	801939c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019398:	2300      	movs	r3, #0
 801939a:	e035      	b.n	8019408 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	685b      	ldr	r3, [r3, #4]
 80193a0:	f107 020e 	add.w	r2, r7, #14
 80193a4:	4611      	mov	r1, r2
 80193a6:	4618      	mov	r0, r3
 80193a8:	f7ff f830 	bl	801840c <VerifyRfFreq>
 80193ac:	4603      	mov	r3, r0
 80193ae:	f083 0301 	eor.w	r3, r3, #1
 80193b2:	b2db      	uxtb	r3, r3
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d003      	beq.n	80193c0 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80193b8:	7bfb      	ldrb	r3, [r7, #15]
 80193ba:	f023 0301 	bic.w	r3, r3, #1
 80193be:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80193c0:	4b13      	ldr	r3, [pc, #76]	; (8019410 <RegionEU868DlChannelReq+0x90>)
 80193c2:	681a      	ldr	r2, [r3, #0]
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	4619      	mov	r1, r3
 80193ca:	460b      	mov	r3, r1
 80193cc:	005b      	lsls	r3, r3, #1
 80193ce:	440b      	add	r3, r1
 80193d0:	009b      	lsls	r3, r3, #2
 80193d2:	4413      	add	r3, r2
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d103      	bne.n	80193e2 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80193da:	7bfb      	ldrb	r3, [r7, #15]
 80193dc:	f023 0302 	bic.w	r3, r3, #2
 80193e0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80193e2:	7bfb      	ldrb	r3, [r7, #15]
 80193e4:	2b03      	cmp	r3, #3
 80193e6:	d10d      	bne.n	8019404 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80193e8:	4b09      	ldr	r3, [pc, #36]	; (8019410 <RegionEU868DlChannelReq+0x90>)
 80193ea:	6819      	ldr	r1, [r3, #0]
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	4618      	mov	r0, r3
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	685a      	ldr	r2, [r3, #4]
 80193f6:	4603      	mov	r3, r0
 80193f8:	005b      	lsls	r3, r3, #1
 80193fa:	4403      	add	r3, r0
 80193fc:	009b      	lsls	r3, r3, #2
 80193fe:	440b      	add	r3, r1
 8019400:	3304      	adds	r3, #4
 8019402:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019408:	4618      	mov	r0, r3
 801940a:	3710      	adds	r7, #16
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	200016f0 	.word	0x200016f0

08019414 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019414:	b480      	push	{r7}
 8019416:	b083      	sub	sp, #12
 8019418:	af00      	add	r7, sp, #0
 801941a:	4603      	mov	r3, r0
 801941c:	460a      	mov	r2, r1
 801941e:	71fb      	strb	r3, [r7, #7]
 8019420:	4613      	mov	r3, r2
 8019422:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019424:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019428:	4618      	mov	r0, r3
 801942a:	370c      	adds	r7, #12
 801942c:	46bd      	mov	sp, r7
 801942e:	bc80      	pop	{r7}
 8019430:	4770      	bx	lr
	...

08019434 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b09a      	sub	sp, #104	; 0x68
 8019438:	af02      	add	r7, sp, #8
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
 8019440:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019442:	2300      	movs	r3, #0
 8019444:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019448:	2300      	movs	r3, #0
 801944a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801944e:	2300      	movs	r3, #0
 8019450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019452:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019456:	2200      	movs	r2, #0
 8019458:	601a      	str	r2, [r3, #0]
 801945a:	605a      	str	r2, [r3, #4]
 801945c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801945e:	230c      	movs	r3, #12
 8019460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019464:	2307      	movs	r3, #7
 8019466:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019468:	4b47      	ldr	r3, [pc, #284]	; (8019588 <RegionEU868NextChannel+0x154>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019470:	2201      	movs	r2, #1
 8019472:	2100      	movs	r1, #0
 8019474:	4618      	mov	r0, r3
 8019476:	f7fe fa95 	bl	80179a4 <RegionCommonCountChannels>
 801947a:	4603      	mov	r3, r0
 801947c:	2b00      	cmp	r3, #0
 801947e:	d10a      	bne.n	8019496 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019480:	4b41      	ldr	r3, [pc, #260]	; (8019588 <RegionEU868NextChannel+0x154>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019488:	4b3f      	ldr	r3, [pc, #252]	; (8019588 <RegionEU868NextChannel+0x154>)
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f042 0207 	orr.w	r2, r2, #7
 8019490:	b292      	uxth	r2, r2
 8019492:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	7a5b      	ldrb	r3, [r3, #9]
 801949a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80194a6:	4b38      	ldr	r3, [pc, #224]	; (8019588 <RegionEU868NextChannel+0x154>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80194ae:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80194b0:	4b35      	ldr	r3, [pc, #212]	; (8019588 <RegionEU868NextChannel+0x154>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80194b6:	4b35      	ldr	r3, [pc, #212]	; (801958c <RegionEU868NextChannel+0x158>)
 80194b8:	681b      	ldr	r3, [r3, #0]
 80194ba:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80194bc:	2310      	movs	r3, #16
 80194be:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80194c0:	f107 0312 	add.w	r3, r7, #18
 80194c4:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80194c6:	68fb      	ldr	r3, [r7, #12]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	685b      	ldr	r3, [r3, #4]
 80194d0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	7a9b      	ldrb	r3, [r3, #10]
 80194d6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80194da:	2306      	movs	r3, #6
 80194dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80194e0:	68fa      	ldr	r2, [r7, #12]
 80194e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80194e6:	320c      	adds	r2, #12
 80194e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194ec:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	7d1b      	ldrb	r3, [r3, #20]
 80194f4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	8adb      	ldrh	r3, [r3, #22]
 8019502:	4619      	mov	r1, r3
 8019504:	4610      	mov	r0, r2
 8019506:	f7fe fff7 	bl	80184f8 <GetTimeOnAir>
 801950a:	4603      	mov	r3, r0
 801950c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801950e:	f107 0314 	add.w	r3, r7, #20
 8019512:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019514:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019518:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801951c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	9301      	str	r3, [sp, #4]
 8019524:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019528:	9300      	str	r3, [sp, #0]
 801952a:	460b      	mov	r3, r1
 801952c:	6839      	ldr	r1, [r7, #0]
 801952e:	f7fe fe50 	bl	80181d2 <RegionCommonIdentifyChannels>
 8019532:	4603      	mov	r3, r0
 8019534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801953c:	2b00      	cmp	r3, #0
 801953e:	d10e      	bne.n	801955e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019540:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019544:	3b01      	subs	r3, #1
 8019546:	4619      	mov	r1, r3
 8019548:	2000      	movs	r0, #0
 801954a:	f000 f985 	bl	8019858 <randr>
 801954e:	4603      	mov	r3, r0
 8019550:	3360      	adds	r3, #96	; 0x60
 8019552:	443b      	add	r3, r7
 8019554:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	701a      	strb	r2, [r3, #0]
 801955c:	e00e      	b.n	801957c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801955e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019562:	2b0c      	cmp	r3, #12
 8019564:	d10a      	bne.n	801957c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019566:	4b08      	ldr	r3, [pc, #32]	; (8019588 <RegionEU868NextChannel+0x154>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 801956e:	4b06      	ldr	r3, [pc, #24]	; (8019588 <RegionEU868NextChannel+0x154>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	f042 0207 	orr.w	r2, r2, #7
 8019576:	b292      	uxth	r2, r2
 8019578:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 801957c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019580:	4618      	mov	r0, r3
 8019582:	3760      	adds	r7, #96	; 0x60
 8019584:	46bd      	mov	sp, r7
 8019586:	bd80      	pop	{r7, pc}
 8019588:	200016f0 	.word	0x200016f0
 801958c:	200016ec 	.word	0x200016ec

08019590 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019598:	2300      	movs	r3, #0
 801959a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801959c:	2300      	movs	r3, #0
 801959e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80195a0:	2300      	movs	r3, #0
 80195a2:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	791b      	ldrb	r3, [r3, #4]
 80195a8:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80195aa:	7b7b      	ldrb	r3, [r7, #13]
 80195ac:	2b02      	cmp	r3, #2
 80195ae:	d801      	bhi.n	80195b4 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80195b0:	2306      	movs	r3, #6
 80195b2:	e089      	b.n	80196c8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80195b4:	7b7b      	ldrb	r3, [r7, #13]
 80195b6:	2b0f      	cmp	r3, #15
 80195b8:	d901      	bls.n	80195be <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80195ba:	2303      	movs	r3, #3
 80195bc:	e084      	b.n	80196c8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	7a1b      	ldrb	r3, [r3, #8]
 80195c4:	f343 0303 	sbfx	r3, r3, #0, #4
 80195c8:	b25b      	sxtb	r3, r3
 80195ca:	2207      	movs	r2, #7
 80195cc:	2100      	movs	r1, #0
 80195ce:	4618      	mov	r0, r3
 80195d0:	f7fe f997 	bl	8017902 <RegionCommonValueInRange>
 80195d4:	4603      	mov	r3, r0
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d101      	bne.n	80195de <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80195da:	2301      	movs	r3, #1
 80195dc:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	7a1b      	ldrb	r3, [r3, #8]
 80195e4:	f343 1303 	sbfx	r3, r3, #4, #4
 80195e8:	b25b      	sxtb	r3, r3
 80195ea:	2207      	movs	r2, #7
 80195ec:	2100      	movs	r1, #0
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7fe f987 	bl	8017902 <RegionCommonValueInRange>
 80195f4:	4603      	mov	r3, r0
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d101      	bne.n	80195fe <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80195fa:	2301      	movs	r3, #1
 80195fc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	7a1b      	ldrb	r3, [r3, #8]
 8019604:	f343 0303 	sbfx	r3, r3, #0, #4
 8019608:	b25a      	sxtb	r2, r3
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	681b      	ldr	r3, [r3, #0]
 801960e:	7a1b      	ldrb	r3, [r3, #8]
 8019610:	f343 1303 	sbfx	r3, r3, #4, #4
 8019614:	b25b      	sxtb	r3, r3
 8019616:	429a      	cmp	r2, r3
 8019618:	dd01      	ble.n	801961e <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801961a:	2301      	movs	r3, #1
 801961c:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801961e:	7bbb      	ldrb	r3, [r7, #14]
 8019620:	f083 0301 	eor.w	r3, r3, #1
 8019624:	b2db      	uxtb	r3, r3
 8019626:	2b00      	cmp	r3, #0
 8019628:	d010      	beq.n	801964c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	f107 020c 	add.w	r2, r7, #12
 8019634:	4611      	mov	r1, r2
 8019636:	4618      	mov	r0, r3
 8019638:	f7fe fee8 	bl	801840c <VerifyRfFreq>
 801963c:	4603      	mov	r3, r0
 801963e:	f083 0301 	eor.w	r3, r3, #1
 8019642:	b2db      	uxtb	r3, r3
 8019644:	2b00      	cmp	r3, #0
 8019646:	d001      	beq.n	801964c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019648:	2301      	movs	r3, #1
 801964a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801964c:	7bfb      	ldrb	r3, [r7, #15]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d004      	beq.n	801965c <RegionEU868ChannelAdd+0xcc>
 8019652:	7bbb      	ldrb	r3, [r7, #14]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d001      	beq.n	801965c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019658:	2306      	movs	r3, #6
 801965a:	e035      	b.n	80196c8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801965c:	7bfb      	ldrb	r3, [r7, #15]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d001      	beq.n	8019666 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019662:	2305      	movs	r3, #5
 8019664:	e030      	b.n	80196c8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019666:	7bbb      	ldrb	r3, [r7, #14]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d001      	beq.n	8019670 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801966c:	2304      	movs	r3, #4
 801966e:	e02b      	b.n	80196c8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019670:	4b17      	ldr	r3, [pc, #92]	; (80196d0 <RegionEU868ChannelAdd+0x140>)
 8019672:	6819      	ldr	r1, [r3, #0]
 8019674:	7b7a      	ldrb	r2, [r7, #13]
 8019676:	4613      	mov	r3, r2
 8019678:	005b      	lsls	r3, r3, #1
 801967a:	4413      	add	r3, r2
 801967c:	009b      	lsls	r3, r3, #2
 801967e:	18c8      	adds	r0, r1, r3
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	220c      	movs	r2, #12
 8019686:	4619      	mov	r1, r3
 8019688:	f000 f8fd 	bl	8019886 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801968c:	4b10      	ldr	r3, [pc, #64]	; (80196d0 <RegionEU868ChannelAdd+0x140>)
 801968e:	6819      	ldr	r1, [r3, #0]
 8019690:	7b7a      	ldrb	r2, [r7, #13]
 8019692:	7b38      	ldrb	r0, [r7, #12]
 8019694:	4613      	mov	r3, r2
 8019696:	005b      	lsls	r3, r3, #1
 8019698:	4413      	add	r3, r2
 801969a:	009b      	lsls	r3, r3, #2
 801969c:	440b      	add	r3, r1
 801969e:	3309      	adds	r3, #9
 80196a0:	4602      	mov	r2, r0
 80196a2:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80196a4:	4b0a      	ldr	r3, [pc, #40]	; (80196d0 <RegionEU868ChannelAdd+0x140>)
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 80196ac:	b21a      	sxth	r2, r3
 80196ae:	7b7b      	ldrb	r3, [r7, #13]
 80196b0:	2101      	movs	r1, #1
 80196b2:	fa01 f303 	lsl.w	r3, r1, r3
 80196b6:	b21b      	sxth	r3, r3
 80196b8:	4313      	orrs	r3, r2
 80196ba:	b21a      	sxth	r2, r3
 80196bc:	4b04      	ldr	r3, [pc, #16]	; (80196d0 <RegionEU868ChannelAdd+0x140>)
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	b292      	uxth	r2, r2
 80196c2:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80196c6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80196c8:	4618      	mov	r0, r3
 80196ca:	3710      	adds	r7, #16
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bd80      	pop	{r7, pc}
 80196d0:	200016f0 	.word	0x200016f0

080196d4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80196d4:	b580      	push	{r7, lr}
 80196d6:	b086      	sub	sp, #24
 80196d8:	af00      	add	r7, sp, #0
 80196da:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	781b      	ldrb	r3, [r3, #0]
 80196e0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80196e2:	7dfb      	ldrb	r3, [r7, #23]
 80196e4:	2b02      	cmp	r3, #2
 80196e6:	d801      	bhi.n	80196ec <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80196e8:	2300      	movs	r3, #0
 80196ea:	e016      	b.n	801971a <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80196ec:	4b0d      	ldr	r3, [pc, #52]	; (8019724 <RegionEU868ChannelsRemove+0x50>)
 80196ee:	6819      	ldr	r1, [r3, #0]
 80196f0:	7dfa      	ldrb	r2, [r7, #23]
 80196f2:	4613      	mov	r3, r2
 80196f4:	005b      	lsls	r3, r3, #1
 80196f6:	4413      	add	r3, r2
 80196f8:	009b      	lsls	r3, r3, #2
 80196fa:	440b      	add	r3, r1
 80196fc:	461a      	mov	r2, r3
 80196fe:	2300      	movs	r3, #0
 8019700:	6013      	str	r3, [r2, #0]
 8019702:	6053      	str	r3, [r2, #4]
 8019704:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019706:	4b07      	ldr	r3, [pc, #28]	; (8019724 <RegionEU868ChannelsRemove+0x50>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801970e:	7df9      	ldrb	r1, [r7, #23]
 8019710:	2210      	movs	r2, #16
 8019712:	4618      	mov	r0, r3
 8019714:	f7fe f912 	bl	801793c <RegionCommonChanDisable>
 8019718:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801971a:	4618      	mov	r0, r3
 801971c:	3718      	adds	r7, #24
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}
 8019722:	bf00      	nop
 8019724:	200016f0 	.word	0x200016f0

08019728 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019728:	b590      	push	{r4, r7, lr}
 801972a:	b085      	sub	sp, #20
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019736:	4b20      	ldr	r3, [pc, #128]	; (80197b8 <RegionEU868SetContinuousWave+0x90>)
 8019738:	681a      	ldr	r2, [r3, #0]
 801973a:	4b20      	ldr	r3, [pc, #128]	; (80197bc <RegionEU868SetContinuousWave+0x94>)
 801973c:	6819      	ldr	r1, [r3, #0]
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	781b      	ldrb	r3, [r3, #0]
 8019742:	461c      	mov	r4, r3
 8019744:	4623      	mov	r3, r4
 8019746:	005b      	lsls	r3, r3, #1
 8019748:	4423      	add	r3, r4
 801974a:	009b      	lsls	r3, r3, #2
 801974c:	440b      	add	r3, r1
 801974e:	3309      	adds	r3, #9
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	4619      	mov	r1, r3
 8019754:	460b      	mov	r3, r1
 8019756:	005b      	lsls	r3, r3, #1
 8019758:	440b      	add	r3, r1
 801975a:	00db      	lsls	r3, r3, #3
 801975c:	4413      	add	r3, r2
 801975e:	3302      	adds	r3, #2
 8019760:	f993 3000 	ldrsb.w	r3, [r3]
 8019764:	4619      	mov	r1, r3
 8019766:	f7fe fdd4 	bl	8018312 <RegionCommonLimitTxPower>
 801976a:	4603      	mov	r3, r0
 801976c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801976e:	2300      	movs	r3, #0
 8019770:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019772:	4b12      	ldr	r3, [pc, #72]	; (80197bc <RegionEU868SetContinuousWave+0x94>)
 8019774:	681a      	ldr	r2, [r3, #0]
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	781b      	ldrb	r3, [r3, #0]
 801977a:	4619      	mov	r1, r3
 801977c:	460b      	mov	r3, r1
 801977e:	005b      	lsls	r3, r3, #1
 8019780:	440b      	add	r3, r1
 8019782:	009b      	lsls	r3, r3, #2
 8019784:	4413      	add	r3, r2
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6859      	ldr	r1, [r3, #4]
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	689a      	ldr	r2, [r3, #8]
 8019792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019796:	4618      	mov	r0, r3
 8019798:	f7fe fc2c 	bl	8017ff4 <RegionCommonComputeTxPower>
 801979c:	4603      	mov	r3, r0
 801979e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80197a0:	4b07      	ldr	r3, [pc, #28]	; (80197c0 <RegionEU868SetContinuousWave+0x98>)
 80197a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80197a4:	687a      	ldr	r2, [r7, #4]
 80197a6:	8992      	ldrh	r2, [r2, #12]
 80197a8:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80197ac:	68b8      	ldr	r0, [r7, #8]
 80197ae:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80197b0:	bf00      	nop
 80197b2:	3714      	adds	r7, #20
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd90      	pop	{r4, r7, pc}
 80197b8:	200016ec 	.word	0x200016ec
 80197bc:	200016f0 	.word	0x200016f0
 80197c0:	0801f460 	.word	0x0801f460

080197c4 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80197c4:	b480      	push	{r7}
 80197c6:	b085      	sub	sp, #20
 80197c8:	af00      	add	r7, sp, #0
 80197ca:	4603      	mov	r3, r0
 80197cc:	71fb      	strb	r3, [r7, #7]
 80197ce:	460b      	mov	r3, r1
 80197d0:	71bb      	strb	r3, [r7, #6]
 80197d2:	4613      	mov	r3, r2
 80197d4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80197d6:	79ba      	ldrb	r2, [r7, #6]
 80197d8:	797b      	ldrb	r3, [r7, #5]
 80197da:	1ad3      	subs	r3, r2, r3
 80197dc:	b2db      	uxtb	r3, r3
 80197de:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80197e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	da01      	bge.n	80197ec <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80197e8:	2300      	movs	r3, #0
 80197ea:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80197ec:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80197ee:	4618      	mov	r0, r3
 80197f0:	3714      	adds	r7, #20
 80197f2:	46bd      	mov	sp, r7
 80197f4:	bc80      	pop	{r7}
 80197f6:	4770      	bx	lr

080197f8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80197f8:	b480      	push	{r7}
 80197fa:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80197fc:	4b0d      	ldr	r3, [pc, #52]	; (8019834 <rand1+0x3c>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	4a0d      	ldr	r2, [pc, #52]	; (8019838 <rand1+0x40>)
 8019802:	fb02 f303 	mul.w	r3, r2, r3
 8019806:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801980a:	3339      	adds	r3, #57	; 0x39
 801980c:	4a09      	ldr	r2, [pc, #36]	; (8019834 <rand1+0x3c>)
 801980e:	6013      	str	r3, [r2, #0]
 8019810:	4b08      	ldr	r3, [pc, #32]	; (8019834 <rand1+0x3c>)
 8019812:	681a      	ldr	r2, [r3, #0]
 8019814:	2303      	movs	r3, #3
 8019816:	fba3 1302 	umull	r1, r3, r3, r2
 801981a:	1ad1      	subs	r1, r2, r3
 801981c:	0849      	lsrs	r1, r1, #1
 801981e:	440b      	add	r3, r1
 8019820:	0f99      	lsrs	r1, r3, #30
 8019822:	460b      	mov	r3, r1
 8019824:	07db      	lsls	r3, r3, #31
 8019826:	1a5b      	subs	r3, r3, r1
 8019828:	1ad1      	subs	r1, r2, r3
 801982a:	460b      	mov	r3, r1
}
 801982c:	4618      	mov	r0, r3
 801982e:	46bd      	mov	sp, r7
 8019830:	bc80      	pop	{r7}
 8019832:	4770      	bx	lr
 8019834:	20000148 	.word	0x20000148
 8019838:	41c64e6d 	.word	0x41c64e6d

0801983c <srand1>:

void srand1( uint32_t seed )
{
 801983c:	b480      	push	{r7}
 801983e:	b083      	sub	sp, #12
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
    next = seed;
 8019844:	4a03      	ldr	r2, [pc, #12]	; (8019854 <srand1+0x18>)
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	6013      	str	r3, [r2, #0]
}
 801984a:	bf00      	nop
 801984c:	370c      	adds	r7, #12
 801984e:	46bd      	mov	sp, r7
 8019850:	bc80      	pop	{r7}
 8019852:	4770      	bx	lr
 8019854:	20000148 	.word	0x20000148

08019858 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b082      	sub	sp, #8
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019862:	f7ff ffc9 	bl	80197f8 <rand1>
 8019866:	4602      	mov	r2, r0
 8019868:	6839      	ldr	r1, [r7, #0]
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	1acb      	subs	r3, r1, r3
 801986e:	3301      	adds	r3, #1
 8019870:	fb92 f1f3 	sdiv	r1, r2, r3
 8019874:	fb01 f303 	mul.w	r3, r1, r3
 8019878:	1ad2      	subs	r2, r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	4413      	add	r3, r2
}
 801987e:	4618      	mov	r0, r3
 8019880:	3708      	adds	r7, #8
 8019882:	46bd      	mov	sp, r7
 8019884:	bd80      	pop	{r7, pc}

08019886 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019886:	b480      	push	{r7}
 8019888:	b085      	sub	sp, #20
 801988a:	af00      	add	r7, sp, #0
 801988c:	60f8      	str	r0, [r7, #12]
 801988e:	60b9      	str	r1, [r7, #8]
 8019890:	4613      	mov	r3, r2
 8019892:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019894:	e007      	b.n	80198a6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019896:	68ba      	ldr	r2, [r7, #8]
 8019898:	1c53      	adds	r3, r2, #1
 801989a:	60bb      	str	r3, [r7, #8]
 801989c:	68fb      	ldr	r3, [r7, #12]
 801989e:	1c59      	adds	r1, r3, #1
 80198a0:	60f9      	str	r1, [r7, #12]
 80198a2:	7812      	ldrb	r2, [r2, #0]
 80198a4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198a6:	88fb      	ldrh	r3, [r7, #6]
 80198a8:	1e5a      	subs	r2, r3, #1
 80198aa:	80fa      	strh	r2, [r7, #6]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d1f2      	bne.n	8019896 <memcpy1+0x10>
    }
}
 80198b0:	bf00      	nop
 80198b2:	bf00      	nop
 80198b4:	3714      	adds	r7, #20
 80198b6:	46bd      	mov	sp, r7
 80198b8:	bc80      	pop	{r7}
 80198ba:	4770      	bx	lr

080198bc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80198bc:	b480      	push	{r7}
 80198be:	b085      	sub	sp, #20
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	60f8      	str	r0, [r7, #12]
 80198c4:	60b9      	str	r1, [r7, #8]
 80198c6:	4613      	mov	r3, r2
 80198c8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80198ca:	88fb      	ldrh	r3, [r7, #6]
 80198cc:	3b01      	subs	r3, #1
 80198ce:	68fa      	ldr	r2, [r7, #12]
 80198d0:	4413      	add	r3, r2
 80198d2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80198d4:	e007      	b.n	80198e6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80198d6:	68ba      	ldr	r2, [r7, #8]
 80198d8:	1c53      	adds	r3, r2, #1
 80198da:	60bb      	str	r3, [r7, #8]
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	1e59      	subs	r1, r3, #1
 80198e0:	60f9      	str	r1, [r7, #12]
 80198e2:	7812      	ldrb	r2, [r2, #0]
 80198e4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198e6:	88fb      	ldrh	r3, [r7, #6]
 80198e8:	1e5a      	subs	r2, r3, #1
 80198ea:	80fa      	strh	r2, [r7, #6]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d1f2      	bne.n	80198d6 <memcpyr+0x1a>
    }
}
 80198f0:	bf00      	nop
 80198f2:	bf00      	nop
 80198f4:	3714      	adds	r7, #20
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bc80      	pop	{r7}
 80198fa:	4770      	bx	lr

080198fc <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80198fc:	b480      	push	{r7}
 80198fe:	b083      	sub	sp, #12
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
 8019904:	460b      	mov	r3, r1
 8019906:	70fb      	strb	r3, [r7, #3]
 8019908:	4613      	mov	r3, r2
 801990a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801990c:	e004      	b.n	8019918 <memset1+0x1c>
    {
        *dst++ = value;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	1c5a      	adds	r2, r3, #1
 8019912:	607a      	str	r2, [r7, #4]
 8019914:	78fa      	ldrb	r2, [r7, #3]
 8019916:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019918:	883b      	ldrh	r3, [r7, #0]
 801991a:	1e5a      	subs	r2, r3, #1
 801991c:	803a      	strh	r2, [r7, #0]
 801991e:	2b00      	cmp	r3, #0
 8019920:	d1f5      	bne.n	801990e <memset1+0x12>
    }
}
 8019922:	bf00      	nop
 8019924:	bf00      	nop
 8019926:	370c      	adds	r7, #12
 8019928:	46bd      	mov	sp, r7
 801992a:	bc80      	pop	{r7}
 801992c:	4770      	bx	lr
	...

08019930 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019930:	b480      	push	{r7}
 8019932:	b085      	sub	sp, #20
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
 8019938:	460b      	mov	r3, r1
 801993a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801993c:	f04f 33ff 	mov.w	r3, #4294967295
 8019940:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d101      	bne.n	801994c <Crc32+0x1c>
    {
        return 0;
 8019948:	2300      	movs	r3, #0
 801994a:	e026      	b.n	801999a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801994c:	2300      	movs	r3, #0
 801994e:	817b      	strh	r3, [r7, #10]
 8019950:	e01d      	b.n	801998e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019952:	897b      	ldrh	r3, [r7, #10]
 8019954:	687a      	ldr	r2, [r7, #4]
 8019956:	4413      	add	r3, r2
 8019958:	781b      	ldrb	r3, [r3, #0]
 801995a:	461a      	mov	r2, r3
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	4053      	eors	r3, r2
 8019960:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019962:	2300      	movs	r3, #0
 8019964:	813b      	strh	r3, [r7, #8]
 8019966:	e00c      	b.n	8019982 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	085a      	lsrs	r2, r3, #1
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	f003 0301 	and.w	r3, r3, #1
 8019972:	425b      	negs	r3, r3
 8019974:	490b      	ldr	r1, [pc, #44]	; (80199a4 <Crc32+0x74>)
 8019976:	400b      	ands	r3, r1
 8019978:	4053      	eors	r3, r2
 801997a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801997c:	893b      	ldrh	r3, [r7, #8]
 801997e:	3301      	adds	r3, #1
 8019980:	813b      	strh	r3, [r7, #8]
 8019982:	893b      	ldrh	r3, [r7, #8]
 8019984:	2b07      	cmp	r3, #7
 8019986:	d9ef      	bls.n	8019968 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019988:	897b      	ldrh	r3, [r7, #10]
 801998a:	3301      	adds	r3, #1
 801998c:	817b      	strh	r3, [r7, #10]
 801998e:	897a      	ldrh	r2, [r7, #10]
 8019990:	887b      	ldrh	r3, [r7, #2]
 8019992:	429a      	cmp	r2, r3
 8019994:	d3dd      	bcc.n	8019952 <Crc32+0x22>
        }
    }

    return ~crc;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	43db      	mvns	r3, r3
}
 801999a:	4618      	mov	r0, r3
 801999c:	3714      	adds	r7, #20
 801999e:	46bd      	mov	sp, r7
 80199a0:	bc80      	pop	{r7}
 80199a2:	4770      	bx	lr
 80199a4:	edb88320 	.word	0xedb88320

080199a8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af02      	add	r7, sp, #8
 80199ae:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80199b0:	4a24      	ldr	r2, [pc, #144]	; (8019a44 <RadioInit+0x9c>)
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80199b6:	4b24      	ldr	r3, [pc, #144]	; (8019a48 <RadioInit+0xa0>)
 80199b8:	2200      	movs	r2, #0
 80199ba:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80199bc:	4b22      	ldr	r3, [pc, #136]	; (8019a48 <RadioInit+0xa0>)
 80199be:	2200      	movs	r2, #0
 80199c0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80199c2:	4b21      	ldr	r3, [pc, #132]	; (8019a48 <RadioInit+0xa0>)
 80199c4:	2200      	movs	r2, #0
 80199c6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80199c8:	4b1f      	ldr	r3, [pc, #124]	; (8019a48 <RadioInit+0xa0>)
 80199ca:	2200      	movs	r2, #0
 80199cc:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80199ce:	481f      	ldr	r0, [pc, #124]	; (8019a4c <RadioInit+0xa4>)
 80199d0:	f001 ffc2 	bl	801b958 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80199d4:	4b1c      	ldr	r3, [pc, #112]	; (8019a48 <RadioInit+0xa0>)
 80199d6:	2200      	movs	r2, #0
 80199d8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80199da:	4b1b      	ldr	r3, [pc, #108]	; (8019a48 <RadioInit+0xa0>)
 80199dc:	2200      	movs	r2, #0
 80199de:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80199e0:	f002 fa56 	bl	801be90 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80199e4:	2100      	movs	r1, #0
 80199e6:	2000      	movs	r0, #0
 80199e8:	f002 fe22 	bl	801c630 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80199ec:	2204      	movs	r2, #4
 80199ee:	2100      	movs	r1, #0
 80199f0:	2001      	movs	r0, #1
 80199f2:	f002 fbdf 	bl	801c1b4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80199f6:	2300      	movs	r3, #0
 80199f8:	2200      	movs	r2, #0
 80199fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80199fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019a02:	f002 fb0f 	bl	801c024 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019a06:	f000 fe99 	bl	801a73c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	9300      	str	r3, [sp, #0]
 8019a0e:	4b10      	ldr	r3, [pc, #64]	; (8019a50 <RadioInit+0xa8>)
 8019a10:	2200      	movs	r2, #0
 8019a12:	f04f 31ff 	mov.w	r1, #4294967295
 8019a16:	480f      	ldr	r0, [pc, #60]	; (8019a54 <RadioInit+0xac>)
 8019a18:	f004 f82c 	bl	801da74 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019a1c:	2300      	movs	r3, #0
 8019a1e:	9300      	str	r3, [sp, #0]
 8019a20:	4b0d      	ldr	r3, [pc, #52]	; (8019a58 <RadioInit+0xb0>)
 8019a22:	2200      	movs	r2, #0
 8019a24:	f04f 31ff 	mov.w	r1, #4294967295
 8019a28:	480c      	ldr	r0, [pc, #48]	; (8019a5c <RadioInit+0xb4>)
 8019a2a:	f004 f823 	bl	801da74 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019a2e:	4809      	ldr	r0, [pc, #36]	; (8019a54 <RadioInit+0xac>)
 8019a30:	f004 f8c4 	bl	801dbbc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019a34:	4809      	ldr	r0, [pc, #36]	; (8019a5c <RadioInit+0xb4>)
 8019a36:	f004 f8c1 	bl	801dbbc <UTIL_TIMER_Stop>
}
 8019a3a:	bf00      	nop
 8019a3c:	3708      	adds	r7, #8
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}
 8019a42:	bf00      	nop
 8019a44:	200017f4 	.word	0x200017f4
 8019a48:	200017f8 	.word	0x200017f8
 8019a4c:	0801ab35 	.word	0x0801ab35
 8019a50:	0801aabd 	.word	0x0801aabd
 8019a54:	20001854 	.word	0x20001854
 8019a58:	0801aad1 	.word	0x0801aad1
 8019a5c:	2000186c 	.word	0x2000186c

08019a60 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019a64:	f001 ffc0 	bl	801b9e8 <SUBGRF_GetOperatingMode>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	2b07      	cmp	r3, #7
 8019a6c:	d00a      	beq.n	8019a84 <RadioGetStatus+0x24>
 8019a6e:	2b07      	cmp	r3, #7
 8019a70:	dc0a      	bgt.n	8019a88 <RadioGetStatus+0x28>
 8019a72:	2b04      	cmp	r3, #4
 8019a74:	d002      	beq.n	8019a7c <RadioGetStatus+0x1c>
 8019a76:	2b05      	cmp	r3, #5
 8019a78:	d002      	beq.n	8019a80 <RadioGetStatus+0x20>
 8019a7a:	e005      	b.n	8019a88 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019a7c:	2302      	movs	r3, #2
 8019a7e:	e004      	b.n	8019a8a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019a80:	2301      	movs	r3, #1
 8019a82:	e002      	b.n	8019a8a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019a84:	2303      	movs	r3, #3
 8019a86:	e000      	b.n	8019a8a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019a88:	2300      	movs	r3, #0
    }
}
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	bd80      	pop	{r7, pc}
	...

08019a90 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b082      	sub	sp, #8
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	4603      	mov	r3, r0
 8019a98:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019a9a:	4a2a      	ldr	r2, [pc, #168]	; (8019b44 <RadioSetModem+0xb4>)
 8019a9c:	79fb      	ldrb	r3, [r7, #7]
 8019a9e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019aa0:	79fb      	ldrb	r3, [r7, #7]
 8019aa2:	4618      	mov	r0, r3
 8019aa4:	f003 f997 	bl	801cdd6 <RFW_SetRadioModem>
    switch( modem )
 8019aa8:	79fb      	ldrb	r3, [r7, #7]
 8019aaa:	2b05      	cmp	r3, #5
 8019aac:	d80e      	bhi.n	8019acc <RadioSetModem+0x3c>
 8019aae:	a201      	add	r2, pc, #4	; (adr r2, 8019ab4 <RadioSetModem+0x24>)
 8019ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ab4:	08019adb 	.word	0x08019adb
 8019ab8:	08019ae9 	.word	0x08019ae9
 8019abc:	08019acd 	.word	0x08019acd
 8019ac0:	08019b0f 	.word	0x08019b0f
 8019ac4:	08019b1d 	.word	0x08019b1d
 8019ac8:	08019b2b 	.word	0x08019b2b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019acc:	2003      	movs	r0, #3
 8019ace:	f002 fb4b 	bl	801c168 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ad2:	4b1c      	ldr	r3, [pc, #112]	; (8019b44 <RadioSetModem+0xb4>)
 8019ad4:	2200      	movs	r2, #0
 8019ad6:	735a      	strb	r2, [r3, #13]
        break;
 8019ad8:	e02f      	b.n	8019b3a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019ada:	2000      	movs	r0, #0
 8019adc:	f002 fb44 	bl	801c168 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019ae0:	4b18      	ldr	r3, [pc, #96]	; (8019b44 <RadioSetModem+0xb4>)
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	735a      	strb	r2, [r3, #13]
        break;
 8019ae6:	e028      	b.n	8019b3a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019ae8:	2001      	movs	r0, #1
 8019aea:	f002 fb3d 	bl	801c168 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019aee:	4b15      	ldr	r3, [pc, #84]	; (8019b44 <RadioSetModem+0xb4>)
 8019af0:	7b5a      	ldrb	r2, [r3, #13]
 8019af2:	4b14      	ldr	r3, [pc, #80]	; (8019b44 <RadioSetModem+0xb4>)
 8019af4:	7b1b      	ldrb	r3, [r3, #12]
 8019af6:	429a      	cmp	r2, r3
 8019af8:	d01e      	beq.n	8019b38 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019afa:	4b12      	ldr	r3, [pc, #72]	; (8019b44 <RadioSetModem+0xb4>)
 8019afc:	7b1a      	ldrb	r2, [r3, #12]
 8019afe:	4b11      	ldr	r3, [pc, #68]	; (8019b44 <RadioSetModem+0xb4>)
 8019b00:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019b02:	4b10      	ldr	r3, [pc, #64]	; (8019b44 <RadioSetModem+0xb4>)
 8019b04:	7b5b      	ldrb	r3, [r3, #13]
 8019b06:	4618      	mov	r0, r3
 8019b08:	f000 ffa2 	bl	801aa50 <RadioSetPublicNetwork>
        }
        break;
 8019b0c:	e014      	b.n	8019b38 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019b0e:	2002      	movs	r0, #2
 8019b10:	f002 fb2a 	bl	801c168 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b14:	4b0b      	ldr	r3, [pc, #44]	; (8019b44 <RadioSetModem+0xb4>)
 8019b16:	2200      	movs	r2, #0
 8019b18:	735a      	strb	r2, [r3, #13]
        break;
 8019b1a:	e00e      	b.n	8019b3a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019b1c:	2002      	movs	r0, #2
 8019b1e:	f002 fb23 	bl	801c168 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b22:	4b08      	ldr	r3, [pc, #32]	; (8019b44 <RadioSetModem+0xb4>)
 8019b24:	2200      	movs	r2, #0
 8019b26:	735a      	strb	r2, [r3, #13]
        break;
 8019b28:	e007      	b.n	8019b3a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019b2a:	2000      	movs	r0, #0
 8019b2c:	f002 fb1c 	bl	801c168 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019b30:	4b04      	ldr	r3, [pc, #16]	; (8019b44 <RadioSetModem+0xb4>)
 8019b32:	2200      	movs	r2, #0
 8019b34:	735a      	strb	r2, [r3, #13]
        break;
 8019b36:	e000      	b.n	8019b3a <RadioSetModem+0xaa>
        break;
 8019b38:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019b3a:	bf00      	nop
 8019b3c:	3708      	adds	r7, #8
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	200017f8 	.word	0x200017f8

08019b48 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b082      	sub	sp, #8
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019b50:	6878      	ldr	r0, [r7, #4]
 8019b52:	f002 fac3 	bl	801c0dc <SUBGRF_SetRfFrequency>
}
 8019b56:	bf00      	nop
 8019b58:	3708      	adds	r7, #8
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}

08019b5e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019b5e:	b580      	push	{r7, lr}
 8019b60:	b090      	sub	sp, #64	; 0x40
 8019b62:	af0a      	add	r7, sp, #40	; 0x28
 8019b64:	60f8      	str	r0, [r7, #12]
 8019b66:	60b9      	str	r1, [r7, #8]
 8019b68:	603b      	str	r3, [r7, #0]
 8019b6a:	4613      	mov	r3, r2
 8019b6c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019b6e:	2301      	movs	r3, #1
 8019b70:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019b72:	2300      	movs	r3, #0
 8019b74:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019b76:	2300      	movs	r3, #0
 8019b78:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8019b7a:	f000 fdf2 	bl	801a762 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019b7e:	2000      	movs	r0, #0
 8019b80:	f7ff ff86 	bl	8019a90 <RadioSetModem>

    RadioSetChannel( freq );
 8019b84:	68f8      	ldr	r0, [r7, #12]
 8019b86:	f7ff ffdf 	bl	8019b48 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8019b8e:	2300      	movs	r3, #0
 8019b90:	9308      	str	r3, [sp, #32]
 8019b92:	2300      	movs	r3, #0
 8019b94:	9307      	str	r3, [sp, #28]
 8019b96:	2300      	movs	r3, #0
 8019b98:	9306      	str	r3, [sp, #24]
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	9305      	str	r3, [sp, #20]
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	9304      	str	r3, [sp, #16]
 8019ba2:	2300      	movs	r3, #0
 8019ba4:	9303      	str	r3, [sp, #12]
 8019ba6:	2300      	movs	r3, #0
 8019ba8:	9302      	str	r3, [sp, #8]
 8019baa:	2303      	movs	r3, #3
 8019bac:	9301      	str	r3, [sp, #4]
 8019bae:	68bb      	ldr	r3, [r7, #8]
 8019bb0:	9300      	str	r3, [sp, #0]
 8019bb2:	2300      	movs	r3, #0
 8019bb4:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019bb8:	68b9      	ldr	r1, [r7, #8]
 8019bba:	2000      	movs	r0, #0
 8019bbc:	f000 f83c 	bl	8019c38 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019bc0:	2000      	movs	r0, #0
 8019bc2:	f000 fdd5 	bl	801a770 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019bc6:	f000 ff71 	bl	801aaac <RadioGetWakeupTime>
 8019bca:	4603      	mov	r3, r0
 8019bcc:	4618      	mov	r0, r3
 8019bce:	f7e8 fe89 	bl	80028e4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019bd2:	f004 f90d 	bl	801ddf0 <UTIL_TIMER_GetCurrentTime>
 8019bd6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019bd8:	e00d      	b.n	8019bf6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8019bda:	2000      	movs	r0, #0
 8019bdc:	f000 feb6 	bl	801a94c <RadioRssi>
 8019be0:	4603      	mov	r3, r0
 8019be2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019be4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019bec:	429a      	cmp	r2, r3
 8019bee:	dd02      	ble.n	8019bf6 <RadioIsChannelFree+0x98>
        {
            status = false;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	75fb      	strb	r3, [r7, #23]
            break;
 8019bf4:	e006      	b.n	8019c04 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019bf6:	6938      	ldr	r0, [r7, #16]
 8019bf8:	f004 f90c 	bl	801de14 <UTIL_TIMER_GetElapsedTime>
 8019bfc:	4602      	mov	r2, r0
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	4293      	cmp	r3, r2
 8019c02:	d8ea      	bhi.n	8019bda <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019c04:	f000 fdad 	bl	801a762 <RadioStandby>

    return status;
 8019c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c0a:	4618      	mov	r0, r3
 8019c0c:	3718      	adds	r7, #24
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bd80      	pop	{r7, pc}

08019c12 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019c12:	b580      	push	{r7, lr}
 8019c14:	b082      	sub	sp, #8
 8019c16:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	2200      	movs	r2, #0
 8019c20:	2100      	movs	r1, #0
 8019c22:	2000      	movs	r0, #0
 8019c24:	f002 f9fe 	bl	801c024 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019c28:	f001 ffaf 	bl	801bb8a <SUBGRF_GetRandom>
 8019c2c:	6078      	str	r0, [r7, #4]

    return rnd;
 8019c2e:	687b      	ldr	r3, [r7, #4]
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	3708      	adds	r7, #8
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}

08019c38 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b08a      	sub	sp, #40	; 0x28
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	60b9      	str	r1, [r7, #8]
 8019c40:	607a      	str	r2, [r7, #4]
 8019c42:	461a      	mov	r2, r3
 8019c44:	4603      	mov	r3, r0
 8019c46:	73fb      	strb	r3, [r7, #15]
 8019c48:	4613      	mov	r3, r2
 8019c4a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019c4c:	4ab9      	ldr	r2, [pc, #740]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019c4e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019c52:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019c54:	f003 f87d 	bl	801cd52 <RFW_DeInit>
    if( rxContinuous == true )
 8019c58:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d001      	beq.n	8019c64 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019c60:	2300      	movs	r3, #0
 8019c62:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019c64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d004      	beq.n	8019c76 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019c6c:	4ab2      	ldr	r2, [pc, #712]	; (8019f38 <RadioSetRxConfig+0x300>)
 8019c6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019c72:	7013      	strb	r3, [r2, #0]
 8019c74:	e002      	b.n	8019c7c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019c76:	4bb0      	ldr	r3, [pc, #704]	; (8019f38 <RadioSetRxConfig+0x300>)
 8019c78:	22ff      	movs	r2, #255	; 0xff
 8019c7a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019c7c:	7bfb      	ldrb	r3, [r7, #15]
 8019c7e:	2b05      	cmp	r3, #5
 8019c80:	d009      	beq.n	8019c96 <RadioSetRxConfig+0x5e>
 8019c82:	2b05      	cmp	r3, #5
 8019c84:	f300 81d7 	bgt.w	801a036 <RadioSetRxConfig+0x3fe>
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	f000 80bf 	beq.w	8019e0c <RadioSetRxConfig+0x1d4>
 8019c8e:	2b01      	cmp	r3, #1
 8019c90:	f000 8124 	beq.w	8019edc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019c94:	e1cf      	b.n	801a036 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019c96:	2001      	movs	r0, #1
 8019c98:	f002 f8bc 	bl	801be14 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019c9c:	4ba5      	ldr	r3, [pc, #660]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019ca4:	4aa3      	ldr	r2, [pc, #652]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019caa:	4ba2      	ldr	r3, [pc, #648]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cac:	2209      	movs	r2, #9
 8019cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019cb2:	4ba0      	ldr	r3, [pc, #640]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019cb8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019cba:	68b8      	ldr	r0, [r7, #8]
 8019cbc:	f002 ff7c 	bl	801cbb8 <SUBGRF_GetFskBandwidthRegValue>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	461a      	mov	r2, r3
 8019cc4:	4b9b      	ldr	r3, [pc, #620]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019cca:	4b9a      	ldr	r3, [pc, #616]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ccc:	2200      	movs	r2, #0
 8019cce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019cd0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019cd2:	00db      	lsls	r3, r3, #3
 8019cd4:	b29a      	uxth	r2, r3
 8019cd6:	4b97      	ldr	r3, [pc, #604]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cd8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019cda:	4b96      	ldr	r3, [pc, #600]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cdc:	2200      	movs	r2, #0
 8019cde:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019ce0:	4b94      	ldr	r3, [pc, #592]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ce2:	2210      	movs	r2, #16
 8019ce4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019ce6:	4b93      	ldr	r3, [pc, #588]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ce8:	2200      	movs	r2, #0
 8019cea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019cec:	4b91      	ldr	r3, [pc, #580]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cee:	2200      	movs	r2, #0
 8019cf0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019cf2:	4b91      	ldr	r3, [pc, #580]	; (8019f38 <RadioSetRxConfig+0x300>)
 8019cf4:	781a      	ldrb	r2, [r3, #0]
 8019cf6:	4b8f      	ldr	r3, [pc, #572]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cf8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019cfa:	4b8e      	ldr	r3, [pc, #568]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019cfc:	2201      	movs	r2, #1
 8019cfe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019d00:	4b8c      	ldr	r3, [pc, #560]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019d02:	2200      	movs	r2, #0
 8019d04:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019d06:	2005      	movs	r0, #5
 8019d08:	f7ff fec2 	bl	8019a90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019d0c:	488b      	ldr	r0, [pc, #556]	; (8019f3c <RadioSetRxConfig+0x304>)
 8019d0e:	f002 fb1f 	bl	801c350 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d12:	488b      	ldr	r0, [pc, #556]	; (8019f40 <RadioSetRxConfig+0x308>)
 8019d14:	f002 fbee 	bl	801c4f4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019d18:	4a8a      	ldr	r2, [pc, #552]	; (8019f44 <RadioSetRxConfig+0x30c>)
 8019d1a:	f107 031c 	add.w	r3, r7, #28
 8019d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d22:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d26:	f107 031c 	add.w	r3, r7, #28
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	f001 feab 	bl	801ba86 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019d30:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019d34:	f001 fef6 	bl	801bb24 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019d38:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019d3c:	f000 fe25 	bl	801a98a <RadioRead>
 8019d40:	4603      	mov	r3, r0
 8019d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d4a:	f023 0310 	bic.w	r3, r3, #16
 8019d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d56:	4619      	mov	r1, r3
 8019d58:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019d5c:	f000 fe03 	bl	801a966 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019d60:	2104      	movs	r1, #4
 8019d62:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019d66:	f000 fdfe 	bl	801a966 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019d6a:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d6e:	f000 fe0c 	bl	801a98a <RadioRead>
 8019d72:	4603      	mov	r3, r0
 8019d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d7c:	f023 031c 	bic.w	r3, r3, #28
 8019d80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019d84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d88:	f043 0308 	orr.w	r3, r3, #8
 8019d8c:	b2db      	uxtb	r3, r3
 8019d8e:	4619      	mov	r1, r3
 8019d90:	f640 009b 	movw	r0, #2203	; 0x89b
 8019d94:	f000 fde7 	bl	801a966 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019d98:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019d9c:	f000 fdf5 	bl	801a98a <RadioRead>
 8019da0:	4603      	mov	r3, r0
 8019da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019daa:	f023 0318 	bic.w	r3, r3, #24
 8019dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019db6:	f043 0318 	orr.w	r3, r3, #24
 8019dba:	b2db      	uxtb	r3, r3
 8019dbc:	4619      	mov	r1, r3
 8019dbe:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019dc2:	f000 fdd0 	bl	801a966 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8019dc6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019dca:	f000 fdde 	bl	801a98a <RadioRead>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019de4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019de8:	b2db      	uxtb	r3, r3
 8019dea:	4619      	mov	r1, r3
 8019dec:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019df0:	f000 fdb9 	bl	801a966 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019df4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019df6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019dfa:	fb02 f303 	mul.w	r3, r2, r3
 8019dfe:	461a      	mov	r2, r3
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e06:	4a4b      	ldr	r2, [pc, #300]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e08:	6093      	str	r3, [r2, #8]
            break;
 8019e0a:	e115      	b.n	801a038 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019e0c:	2000      	movs	r0, #0
 8019e0e:	f002 f801 	bl	801be14 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019e12:	4b48      	ldr	r3, [pc, #288]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e14:	2200      	movs	r2, #0
 8019e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019e1a:	4a46      	ldr	r2, [pc, #280]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019e20:	4b44      	ldr	r3, [pc, #272]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e22:	220b      	movs	r2, #11
 8019e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019e28:	68b8      	ldr	r0, [r7, #8]
 8019e2a:	f002 fec5 	bl	801cbb8 <SUBGRF_GetFskBandwidthRegValue>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	461a      	mov	r2, r3
 8019e32:	4b40      	ldr	r3, [pc, #256]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019e38:	4b3e      	ldr	r3, [pc, #248]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019e3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019e40:	00db      	lsls	r3, r3, #3
 8019e42:	b29a      	uxth	r2, r3
 8019e44:	4b3b      	ldr	r3, [pc, #236]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e46:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019e48:	4b3a      	ldr	r3, [pc, #232]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e4a:	2204      	movs	r2, #4
 8019e4c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019e4e:	4b39      	ldr	r3, [pc, #228]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e50:	2218      	movs	r2, #24
 8019e52:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019e54:	4b37      	ldr	r3, [pc, #220]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e56:	2200      	movs	r2, #0
 8019e58:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019e5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019e5e:	f083 0301 	eor.w	r3, r3, #1
 8019e62:	b2db      	uxtb	r3, r3
 8019e64:	461a      	mov	r2, r3
 8019e66:	4b33      	ldr	r3, [pc, #204]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e68:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019e6a:	4b33      	ldr	r3, [pc, #204]	; (8019f38 <RadioSetRxConfig+0x300>)
 8019e6c:	781a      	ldrb	r2, [r3, #0]
 8019e6e:	4b31      	ldr	r3, [pc, #196]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e70:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019e72:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d003      	beq.n	8019e82 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019e7a:	4b2e      	ldr	r3, [pc, #184]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e7c:	22f2      	movs	r2, #242	; 0xf2
 8019e7e:	75da      	strb	r2, [r3, #23]
 8019e80:	e002      	b.n	8019e88 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019e82:	4b2c      	ldr	r3, [pc, #176]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e84:	2201      	movs	r2, #1
 8019e86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019e88:	4b2a      	ldr	r3, [pc, #168]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019e8a:	2201      	movs	r2, #1
 8019e8c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019e8e:	f000 fc68 	bl	801a762 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019e92:	2000      	movs	r0, #0
 8019e94:	f7ff fdfc 	bl	8019a90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e98:	4828      	ldr	r0, [pc, #160]	; (8019f3c <RadioSetRxConfig+0x304>)
 8019e9a:	f002 fa59 	bl	801c350 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e9e:	4828      	ldr	r0, [pc, #160]	; (8019f40 <RadioSetRxConfig+0x308>)
 8019ea0:	f002 fb28 	bl	801c4f4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019ea4:	4a28      	ldr	r2, [pc, #160]	; (8019f48 <RadioSetRxConfig+0x310>)
 8019ea6:	f107 0314 	add.w	r3, r7, #20
 8019eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019eae:	e883 0003 	stmia.w	r3, {r0, r1}
 8019eb2:	f107 0314 	add.w	r3, r7, #20
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	f001 fde5 	bl	801ba86 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019ebc:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019ec0:	f001 fe30 	bl	801bb24 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019ec4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019ec6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019eca:	fb02 f303 	mul.w	r3, r2, r3
 8019ece:	461a      	mov	r2, r3
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ed6:	4a17      	ldr	r2, [pc, #92]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ed8:	6093      	str	r3, [r2, #8]
            break;
 8019eda:	e0ad      	b.n	801a038 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019edc:	2000      	movs	r0, #0
 8019ede:	f001 ff99 	bl	801be14 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019ee2:	4b14      	ldr	r3, [pc, #80]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ee4:	2201      	movs	r2, #1
 8019ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	b2da      	uxtb	r2, r3
 8019eee:	4b11      	ldr	r3, [pc, #68]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019ef4:	4a15      	ldr	r2, [pc, #84]	; (8019f4c <RadioSetRxConfig+0x314>)
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	4413      	add	r3, r2
 8019efa:	781a      	ldrb	r2, [r3, #0]
 8019efc:	4b0d      	ldr	r3, [pc, #52]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019f02:	4a0c      	ldr	r2, [pc, #48]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019f04:	7bbb      	ldrb	r3, [r7, #14]
 8019f06:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d105      	bne.n	8019f1c <RadioSetRxConfig+0x2e4>
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	2b0b      	cmp	r3, #11
 8019f14:	d008      	beq.n	8019f28 <RadioSetRxConfig+0x2f0>
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	2b0c      	cmp	r3, #12
 8019f1a:	d005      	beq.n	8019f28 <RadioSetRxConfig+0x2f0>
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	2b01      	cmp	r3, #1
 8019f20:	d116      	bne.n	8019f50 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	2b0c      	cmp	r3, #12
 8019f26:	d113      	bne.n	8019f50 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019f28:	4b02      	ldr	r3, [pc, #8]	; (8019f34 <RadioSetRxConfig+0x2fc>)
 8019f2a:	2201      	movs	r2, #1
 8019f2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019f30:	e012      	b.n	8019f58 <RadioSetRxConfig+0x320>
 8019f32:	bf00      	nop
 8019f34:	200017f8 	.word	0x200017f8
 8019f38:	2000014c 	.word	0x2000014c
 8019f3c:	20001830 	.word	0x20001830
 8019f40:	20001806 	.word	0x20001806
 8019f44:	0801ee7c 	.word	0x0801ee7c
 8019f48:	0801ee84 	.word	0x0801ee84
 8019f4c:	0801f4ec 	.word	0x0801f4ec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019f50:	4b3b      	ldr	r3, [pc, #236]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f52:	2200      	movs	r2, #0
 8019f54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019f58:	4b39      	ldr	r3, [pc, #228]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f5a:	2201      	movs	r2, #1
 8019f5c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f5e:	4b38      	ldr	r3, [pc, #224]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019f64:	2b05      	cmp	r3, #5
 8019f66:	d004      	beq.n	8019f72 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019f68:	4b35      	ldr	r3, [pc, #212]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019f6e:	2b06      	cmp	r3, #6
 8019f70:	d10a      	bne.n	8019f88 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019f72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f74:	2b0b      	cmp	r3, #11
 8019f76:	d803      	bhi.n	8019f80 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019f78:	4b31      	ldr	r3, [pc, #196]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f7a:	220c      	movs	r2, #12
 8019f7c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019f7e:	e006      	b.n	8019f8e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f80:	4a2f      	ldr	r2, [pc, #188]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f84:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019f86:	e002      	b.n	8019f8e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019f88:	4a2d      	ldr	r2, [pc, #180]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f8c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019f8e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019f92:	4b2b      	ldr	r3, [pc, #172]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f94:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019f96:	4b2b      	ldr	r3, [pc, #172]	; (801a044 <RadioSetRxConfig+0x40c>)
 8019f98:	781a      	ldrb	r2, [r3, #0]
 8019f9a:	4b29      	ldr	r3, [pc, #164]	; (801a040 <RadioSetRxConfig+0x408>)
 8019f9c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019f9e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019fa2:	4b27      	ldr	r3, [pc, #156]	; (801a040 <RadioSetRxConfig+0x408>)
 8019fa4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019fa8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019fac:	4b24      	ldr	r3, [pc, #144]	; (801a040 <RadioSetRxConfig+0x408>)
 8019fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019fb2:	f000 fbd6 	bl	801a762 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019fb6:	2001      	movs	r0, #1
 8019fb8:	f7ff fd6a 	bl	8019a90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fbc:	4822      	ldr	r0, [pc, #136]	; (801a048 <RadioSetRxConfig+0x410>)
 8019fbe:	f002 f9c7 	bl	801c350 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fc2:	4822      	ldr	r0, [pc, #136]	; (801a04c <RadioSetRxConfig+0x414>)
 8019fc4:	f002 fa96 	bl	801c4f4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019fc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019fca:	b2db      	uxtb	r3, r3
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f001 ff30 	bl	801be32 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019fd2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019fd6:	f002 fbe9 	bl	801c7ac <SUBGRF_ReadRegister>
 8019fda:	4603      	mov	r3, r0
 8019fdc:	f003 0301 	and.w	r3, r3, #1
 8019fe0:	b2db      	uxtb	r3, r3
 8019fe2:	4619      	mov	r1, r3
 8019fe4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019fe8:	f002 fbcc 	bl	801c784 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019fec:	4b14      	ldr	r3, [pc, #80]	; (801a040 <RadioSetRxConfig+0x408>)
 8019fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019ff2:	2b01      	cmp	r3, #1
 8019ff4:	d10d      	bne.n	801a012 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019ff6:	f240 7036 	movw	r0, #1846	; 0x736
 8019ffa:	f002 fbd7 	bl	801c7ac <SUBGRF_ReadRegister>
 8019ffe:	4603      	mov	r3, r0
 801a000:	f023 0304 	bic.w	r3, r3, #4
 801a004:	b2db      	uxtb	r3, r3
 801a006:	4619      	mov	r1, r3
 801a008:	f240 7036 	movw	r0, #1846	; 0x736
 801a00c:	f002 fbba 	bl	801c784 <SUBGRF_WriteRegister>
 801a010:	e00c      	b.n	801a02c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a012:	f240 7036 	movw	r0, #1846	; 0x736
 801a016:	f002 fbc9 	bl	801c7ac <SUBGRF_ReadRegister>
 801a01a:	4603      	mov	r3, r0
 801a01c:	f043 0304 	orr.w	r3, r3, #4
 801a020:	b2db      	uxtb	r3, r3
 801a022:	4619      	mov	r1, r3
 801a024:	f240 7036 	movw	r0, #1846	; 0x736
 801a028:	f002 fbac 	bl	801c784 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a02c:	4b04      	ldr	r3, [pc, #16]	; (801a040 <RadioSetRxConfig+0x408>)
 801a02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a032:	609a      	str	r2, [r3, #8]
            break;
 801a034:	e000      	b.n	801a038 <RadioSetRxConfig+0x400>
            break;
 801a036:	bf00      	nop
    }
}
 801a038:	bf00      	nop
 801a03a:	3728      	adds	r7, #40	; 0x28
 801a03c:	46bd      	mov	sp, r7
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	200017f8 	.word	0x200017f8
 801a044:	2000014c 	.word	0x2000014c
 801a048:	20001830 	.word	0x20001830
 801a04c:	20001806 	.word	0x20001806

0801a050 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a050:	b580      	push	{r7, lr}
 801a052:	b086      	sub	sp, #24
 801a054:	af00      	add	r7, sp, #0
 801a056:	60ba      	str	r2, [r7, #8]
 801a058:	607b      	str	r3, [r7, #4]
 801a05a:	4603      	mov	r3, r0
 801a05c:	73fb      	strb	r3, [r7, #15]
 801a05e:	460b      	mov	r3, r1
 801a060:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a062:	f002 fe76 	bl	801cd52 <RFW_DeInit>
    switch( modem )
 801a066:	7bfb      	ldrb	r3, [r7, #15]
 801a068:	2b04      	cmp	r3, #4
 801a06a:	f000 80c7 	beq.w	801a1fc <RadioSetTxConfig+0x1ac>
 801a06e:	2b04      	cmp	r3, #4
 801a070:	f300 80d6 	bgt.w	801a220 <RadioSetTxConfig+0x1d0>
 801a074:	2b00      	cmp	r3, #0
 801a076:	d002      	beq.n	801a07e <RadioSetTxConfig+0x2e>
 801a078:	2b01      	cmp	r3, #1
 801a07a:	d059      	beq.n	801a130 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a07c:	e0d0      	b.n	801a220 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a07e:	4b77      	ldr	r3, [pc, #476]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a080:	2200      	movs	r2, #0
 801a082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a086:	4a75      	ldr	r2, [pc, #468]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a088:	6a3b      	ldr	r3, [r7, #32]
 801a08a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a08c:	4b73      	ldr	r3, [pc, #460]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a08e:	220b      	movs	r2, #11
 801a090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a094:	6878      	ldr	r0, [r7, #4]
 801a096:	f002 fd8f 	bl	801cbb8 <SUBGRF_GetFskBandwidthRegValue>
 801a09a:	4603      	mov	r3, r0
 801a09c:	461a      	mov	r2, r3
 801a09e:	4b6f      	ldr	r3, [pc, #444]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a0a4:	4a6d      	ldr	r2, [pc, #436]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0a6:	68bb      	ldr	r3, [r7, #8]
 801a0a8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a0aa:	4b6c      	ldr	r3, [pc, #432]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a0b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a0b2:	00db      	lsls	r3, r3, #3
 801a0b4:	b29a      	uxth	r2, r3
 801a0b6:	4b69      	ldr	r3, [pc, #420]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0b8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a0ba:	4b68      	ldr	r3, [pc, #416]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0bc:	2204      	movs	r2, #4
 801a0be:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a0c0:	4b66      	ldr	r3, [pc, #408]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0c2:	2218      	movs	r2, #24
 801a0c4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a0c6:	4b65      	ldr	r3, [pc, #404]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a0cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a0d0:	f083 0301 	eor.w	r3, r3, #1
 801a0d4:	b2db      	uxtb	r3, r3
 801a0d6:	461a      	mov	r2, r3
 801a0d8:	4b60      	ldr	r3, [pc, #384]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0da:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a0dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d003      	beq.n	801a0ec <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a0e4:	4b5d      	ldr	r3, [pc, #372]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0e6:	22f2      	movs	r2, #242	; 0xf2
 801a0e8:	75da      	strb	r2, [r3, #23]
 801a0ea:	e002      	b.n	801a0f2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a0ec:	4b5b      	ldr	r3, [pc, #364]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0ee:	2201      	movs	r2, #1
 801a0f0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a0f2:	4b5a      	ldr	r3, [pc, #360]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a0f4:	2201      	movs	r2, #1
 801a0f6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a0f8:	f000 fb33 	bl	801a762 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a0fc:	2000      	movs	r0, #0
 801a0fe:	f7ff fcc7 	bl	8019a90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a102:	4857      	ldr	r0, [pc, #348]	; (801a260 <RadioSetTxConfig+0x210>)
 801a104:	f002 f924 	bl	801c350 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a108:	4856      	ldr	r0, [pc, #344]	; (801a264 <RadioSetTxConfig+0x214>)
 801a10a:	f002 f9f3 	bl	801c4f4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a10e:	4a56      	ldr	r2, [pc, #344]	; (801a268 <RadioSetTxConfig+0x218>)
 801a110:	f107 0310 	add.w	r3, r7, #16
 801a114:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a118:	e883 0003 	stmia.w	r3, {r0, r1}
 801a11c:	f107 0310 	add.w	r3, r7, #16
 801a120:	4618      	mov	r0, r3
 801a122:	f001 fcb0 	bl	801ba86 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a126:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a12a:	f001 fcfb 	bl	801bb24 <SUBGRF_SetWhiteningSeed>
            break;
 801a12e:	e078      	b.n	801a222 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a130:	4b4a      	ldr	r3, [pc, #296]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a132:	2201      	movs	r2, #1
 801a134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a138:	6a3b      	ldr	r3, [r7, #32]
 801a13a:	b2da      	uxtb	r2, r3
 801a13c:	4b47      	ldr	r3, [pc, #284]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a13e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a142:	4a4a      	ldr	r2, [pc, #296]	; (801a26c <RadioSetTxConfig+0x21c>)
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	4413      	add	r3, r2
 801a148:	781a      	ldrb	r2, [r3, #0]
 801a14a:	4b44      	ldr	r3, [pc, #272]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a14c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a150:	4a42      	ldr	r2, [pc, #264]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a152:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a156:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d105      	bne.n	801a16c <RadioSetTxConfig+0x11c>
 801a160:	6a3b      	ldr	r3, [r7, #32]
 801a162:	2b0b      	cmp	r3, #11
 801a164:	d008      	beq.n	801a178 <RadioSetTxConfig+0x128>
 801a166:	6a3b      	ldr	r3, [r7, #32]
 801a168:	2b0c      	cmp	r3, #12
 801a16a:	d005      	beq.n	801a178 <RadioSetTxConfig+0x128>
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2b01      	cmp	r3, #1
 801a170:	d107      	bne.n	801a182 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a172:	6a3b      	ldr	r3, [r7, #32]
 801a174:	2b0c      	cmp	r3, #12
 801a176:	d104      	bne.n	801a182 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a178:	4b38      	ldr	r3, [pc, #224]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a17a:	2201      	movs	r2, #1
 801a17c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a180:	e003      	b.n	801a18a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a182:	4b36      	ldr	r3, [pc, #216]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a184:	2200      	movs	r2, #0
 801a186:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a18a:	4b34      	ldr	r3, [pc, #208]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a18c:	2201      	movs	r2, #1
 801a18e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a190:	4b32      	ldr	r3, [pc, #200]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a192:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a196:	2b05      	cmp	r3, #5
 801a198:	d004      	beq.n	801a1a4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a19a:	4b30      	ldr	r3, [pc, #192]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a19c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a1a0:	2b06      	cmp	r3, #6
 801a1a2:	d10a      	bne.n	801a1ba <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a1a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a1a6:	2b0b      	cmp	r3, #11
 801a1a8:	d803      	bhi.n	801a1b2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a1aa:	4b2c      	ldr	r3, [pc, #176]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1ac:	220c      	movs	r2, #12
 801a1ae:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a1b0:	e006      	b.n	801a1c0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a1b2:	4a2a      	ldr	r2, [pc, #168]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a1b6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a1b8:	e002      	b.n	801a1c0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a1ba:	4a28      	ldr	r2, [pc, #160]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a1be:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a1c0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a1c4:	4b25      	ldr	r3, [pc, #148]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1c6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a1c8:	4b29      	ldr	r3, [pc, #164]	; (801a270 <RadioSetTxConfig+0x220>)
 801a1ca:	781a      	ldrb	r2, [r3, #0]
 801a1cc:	4b23      	ldr	r3, [pc, #140]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1ce:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a1d0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a1d4:	4b21      	ldr	r3, [pc, #132]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1d6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a1da:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a1de:	4b1f      	ldr	r3, [pc, #124]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a1e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a1e4:	f000 fabd 	bl	801a762 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a1e8:	2001      	movs	r0, #1
 801a1ea:	f7ff fc51 	bl	8019a90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1ee:	481c      	ldr	r0, [pc, #112]	; (801a260 <RadioSetTxConfig+0x210>)
 801a1f0:	f002 f8ae 	bl	801c350 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1f4:	481b      	ldr	r0, [pc, #108]	; (801a264 <RadioSetTxConfig+0x214>)
 801a1f6:	f002 f97d 	bl	801c4f4 <SUBGRF_SetPacketParams>
            break;
 801a1fa:	e012      	b.n	801a222 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a1fc:	2004      	movs	r0, #4
 801a1fe:	f7ff fc47 	bl	8019a90 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a202:	4b16      	ldr	r3, [pc, #88]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a204:	2202      	movs	r2, #2
 801a206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a20a:	4a14      	ldr	r2, [pc, #80]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a20c:	6a3b      	ldr	r3, [r7, #32]
 801a20e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a210:	4b12      	ldr	r3, [pc, #72]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a212:	2216      	movs	r2, #22
 801a214:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a218:	4811      	ldr	r0, [pc, #68]	; (801a260 <RadioSetTxConfig+0x210>)
 801a21a:	f002 f899 	bl	801c350 <SUBGRF_SetModulationParams>
            break;
 801a21e:	e000      	b.n	801a222 <RadioSetTxConfig+0x1d2>
            break;
 801a220:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a226:	4618      	mov	r0, r3
 801a228:	f002 fbc8 	bl	801c9bc <SUBGRF_SetRfTxPower>
 801a22c:	4603      	mov	r3, r0
 801a22e:	461a      	mov	r2, r3
 801a230:	4b0a      	ldr	r3, [pc, #40]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a232:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a236:	210e      	movs	r1, #14
 801a238:	f640 101f 	movw	r0, #2335	; 0x91f
 801a23c:	f002 faa2 	bl	801c784 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a240:	4b06      	ldr	r3, [pc, #24]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a242:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a246:	4618      	mov	r0, r3
 801a248:	f002 fd97 	bl	801cd7a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a24c:	4a03      	ldr	r2, [pc, #12]	; (801a25c <RadioSetTxConfig+0x20c>)
 801a24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a250:	6053      	str	r3, [r2, #4]
}
 801a252:	bf00      	nop
 801a254:	3718      	adds	r7, #24
 801a256:	46bd      	mov	sp, r7
 801a258:	bd80      	pop	{r7, pc}
 801a25a:	bf00      	nop
 801a25c:	200017f8 	.word	0x200017f8
 801a260:	20001830 	.word	0x20001830
 801a264:	20001806 	.word	0x20001806
 801a268:	0801ee84 	.word	0x0801ee84
 801a26c:	0801f4ec 	.word	0x0801f4ec
 801a270:	2000014c 	.word	0x2000014c

0801a274 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a274:	b480      	push	{r7}
 801a276:	b083      	sub	sp, #12
 801a278:	af00      	add	r7, sp, #0
 801a27a:	6078      	str	r0, [r7, #4]
    return true;
 801a27c:	2301      	movs	r3, #1
}
 801a27e:	4618      	mov	r0, r3
 801a280:	370c      	adds	r7, #12
 801a282:	46bd      	mov	sp, r7
 801a284:	bc80      	pop	{r7}
 801a286:	4770      	bx	lr

0801a288 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a288:	b480      	push	{r7}
 801a28a:	b085      	sub	sp, #20
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	4603      	mov	r3, r0
 801a290:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a292:	2300      	movs	r3, #0
 801a294:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a296:	79fb      	ldrb	r3, [r7, #7]
 801a298:	2b0a      	cmp	r3, #10
 801a29a:	d83e      	bhi.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
 801a29c:	a201      	add	r2, pc, #4	; (adr r2, 801a2a4 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2a2:	bf00      	nop
 801a2a4:	0801a2d1 	.word	0x0801a2d1
 801a2a8:	0801a2e1 	.word	0x0801a2e1
 801a2ac:	0801a2f1 	.word	0x0801a2f1
 801a2b0:	0801a301 	.word	0x0801a301
 801a2b4:	0801a309 	.word	0x0801a309
 801a2b8:	0801a30f 	.word	0x0801a30f
 801a2bc:	0801a315 	.word	0x0801a315
 801a2c0:	0801a31b 	.word	0x0801a31b
 801a2c4:	0801a2d9 	.word	0x0801a2d9
 801a2c8:	0801a2e9 	.word	0x0801a2e9
 801a2cc:	0801a2f9 	.word	0x0801a2f9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a2d0:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a2d4:	60fb      	str	r3, [r7, #12]
        break;
 801a2d6:	e020      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a2d8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a2dc:	60fb      	str	r3, [r7, #12]
        break;
 801a2de:	e01c      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a2e0:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a2e4:	60fb      	str	r3, [r7, #12]
        break;
 801a2e6:	e018      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a2e8:	f245 1361 	movw	r3, #20833	; 0x5161
 801a2ec:	60fb      	str	r3, [r7, #12]
        break;
 801a2ee:	e014      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a2f0:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a2f4:	60fb      	str	r3, [r7, #12]
        break;
 801a2f6:	e010      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a2f8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a2fc:	60fb      	str	r3, [r7, #12]
        break;
 801a2fe:	e00c      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a300:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a304:	60fb      	str	r3, [r7, #12]
        break;
 801a306:	e008      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a308:	4b07      	ldr	r3, [pc, #28]	; (801a328 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a30a:	60fb      	str	r3, [r7, #12]
        break;
 801a30c:	e005      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a30e:	4b07      	ldr	r3, [pc, #28]	; (801a32c <RadioGetLoRaBandwidthInHz+0xa4>)
 801a310:	60fb      	str	r3, [r7, #12]
        break;
 801a312:	e002      	b.n	801a31a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a314:	4b06      	ldr	r3, [pc, #24]	; (801a330 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a316:	60fb      	str	r3, [r7, #12]
        break;
 801a318:	bf00      	nop
    }

    return bandwidthInHz;
 801a31a:	68fb      	ldr	r3, [r7, #12]
}
 801a31c:	4618      	mov	r0, r3
 801a31e:	3714      	adds	r7, #20
 801a320:	46bd      	mov	sp, r7
 801a322:	bc80      	pop	{r7}
 801a324:	4770      	bx	lr
 801a326:	bf00      	nop
 801a328:	0001e848 	.word	0x0001e848
 801a32c:	0003d090 	.word	0x0003d090
 801a330:	0007a120 	.word	0x0007a120

0801a334 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a334:	b480      	push	{r7}
 801a336:	b083      	sub	sp, #12
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
 801a33c:	4608      	mov	r0, r1
 801a33e:	4611      	mov	r1, r2
 801a340:	461a      	mov	r2, r3
 801a342:	4603      	mov	r3, r0
 801a344:	70fb      	strb	r3, [r7, #3]
 801a346:	460b      	mov	r3, r1
 801a348:	803b      	strh	r3, [r7, #0]
 801a34a:	4613      	mov	r3, r2
 801a34c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a34e:	883b      	ldrh	r3, [r7, #0]
 801a350:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a352:	78ba      	ldrb	r2, [r7, #2]
 801a354:	f082 0201 	eor.w	r2, r2, #1
 801a358:	b2d2      	uxtb	r2, r2
 801a35a:	2a00      	cmp	r2, #0
 801a35c:	d001      	beq.n	801a362 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a35e:	2208      	movs	r2, #8
 801a360:	e000      	b.n	801a364 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a362:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a364:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a366:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a36a:	7c3b      	ldrb	r3, [r7, #16]
 801a36c:	7d39      	ldrb	r1, [r7, #20]
 801a36e:	2900      	cmp	r1, #0
 801a370:	d001      	beq.n	801a376 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a372:	2102      	movs	r1, #2
 801a374:	e000      	b.n	801a378 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a376:	2100      	movs	r1, #0
 801a378:	440b      	add	r3, r1
 801a37a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a37c:	4413      	add	r3, r2
}
 801a37e:	4618      	mov	r0, r3
 801a380:	370c      	adds	r7, #12
 801a382:	46bd      	mov	sp, r7
 801a384:	bc80      	pop	{r7}
 801a386:	4770      	bx	lr

0801a388 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a388:	b480      	push	{r7}
 801a38a:	b08b      	sub	sp, #44	; 0x2c
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	60f8      	str	r0, [r7, #12]
 801a390:	60b9      	str	r1, [r7, #8]
 801a392:	4611      	mov	r1, r2
 801a394:	461a      	mov	r2, r3
 801a396:	460b      	mov	r3, r1
 801a398:	71fb      	strb	r3, [r7, #7]
 801a39a:	4613      	mov	r3, r2
 801a39c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a39e:	79fb      	ldrb	r3, [r7, #7]
 801a3a0:	3304      	adds	r3, #4
 801a3a2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a3aa:	68bb      	ldr	r3, [r7, #8]
 801a3ac:	2b05      	cmp	r3, #5
 801a3ae:	d002      	beq.n	801a3b6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a3b0:	68bb      	ldr	r3, [r7, #8]
 801a3b2:	2b06      	cmp	r3, #6
 801a3b4:	d104      	bne.n	801a3c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a3b6:	88bb      	ldrh	r3, [r7, #4]
 801a3b8:	2b0b      	cmp	r3, #11
 801a3ba:	d801      	bhi.n	801a3c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a3bc:	230c      	movs	r3, #12
 801a3be:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d105      	bne.n	801a3d2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	2b0b      	cmp	r3, #11
 801a3ca:	d008      	beq.n	801a3de <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a3cc:	68bb      	ldr	r3, [r7, #8]
 801a3ce:	2b0c      	cmp	r3, #12
 801a3d0:	d005      	beq.n	801a3de <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	2b01      	cmp	r3, #1
 801a3d6:	d105      	bne.n	801a3e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a3d8:	68bb      	ldr	r3, [r7, #8]
 801a3da:	2b0c      	cmp	r3, #12
 801a3dc:	d102      	bne.n	801a3e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a3de:	2301      	movs	r3, #1
 801a3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a3e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a3e8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a3ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a3ee:	2a00      	cmp	r2, #0
 801a3f0:	d001      	beq.n	801a3f6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a3f2:	2210      	movs	r2, #16
 801a3f4:	e000      	b.n	801a3f8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a3f6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a3f8:	4413      	add	r3, r2
 801a3fa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a3fc:	68bb      	ldr	r3, [r7, #8]
 801a3fe:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a400:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a402:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a406:	2a00      	cmp	r2, #0
 801a408:	d001      	beq.n	801a40e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a40a:	2200      	movs	r2, #0
 801a40c:	e000      	b.n	801a410 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a40e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a410:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a412:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a414:	68bb      	ldr	r3, [r7, #8]
 801a416:	2b06      	cmp	r3, #6
 801a418:	d803      	bhi.n	801a422 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	009b      	lsls	r3, r3, #2
 801a41e:	623b      	str	r3, [r7, #32]
 801a420:	e00e      	b.n	801a440 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a422:	69fb      	ldr	r3, [r7, #28]
 801a424:	3308      	adds	r3, #8
 801a426:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d004      	beq.n	801a43a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	3b02      	subs	r3, #2
 801a434:	009b      	lsls	r3, r3, #2
 801a436:	623b      	str	r3, [r7, #32]
 801a438:	e002      	b.n	801a440 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a440:	69fb      	ldr	r3, [r7, #28]
 801a442:	2b00      	cmp	r3, #0
 801a444:	da01      	bge.n	801a44a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a446:	2300      	movs	r3, #0
 801a448:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a44a:	69fa      	ldr	r2, [r7, #28]
 801a44c:	6a3b      	ldr	r3, [r7, #32]
 801a44e:	4413      	add	r3, r2
 801a450:	1e5a      	subs	r2, r3, #1
 801a452:	6a3b      	ldr	r3, [r7, #32]
 801a454:	fb92 f3f3 	sdiv	r3, r2, r3
 801a458:	697a      	ldr	r2, [r7, #20]
 801a45a:	fb03 f202 	mul.w	r2, r3, r2
 801a45e:	88bb      	ldrh	r3, [r7, #4]
 801a460:	4413      	add	r3, r2
    int32_t intermediate =
 801a462:	330c      	adds	r3, #12
 801a464:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a466:	68bb      	ldr	r3, [r7, #8]
 801a468:	2b06      	cmp	r3, #6
 801a46a:	d802      	bhi.n	801a472 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a46c:	69bb      	ldr	r3, [r7, #24]
 801a46e:	3302      	adds	r3, #2
 801a470:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	009b      	lsls	r3, r3, #2
 801a476:	1c5a      	adds	r2, r3, #1
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	3b02      	subs	r3, #2
 801a47c:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a480:	4618      	mov	r0, r3
 801a482:	372c      	adds	r7, #44	; 0x2c
 801a484:	46bd      	mov	sp, r7
 801a486:	bc80      	pop	{r7}
 801a488:	4770      	bx	lr
	...

0801a48c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b08a      	sub	sp, #40	; 0x28
 801a490:	af04      	add	r7, sp, #16
 801a492:	60b9      	str	r1, [r7, #8]
 801a494:	607a      	str	r2, [r7, #4]
 801a496:	461a      	mov	r2, r3
 801a498:	4603      	mov	r3, r0
 801a49a:	73fb      	strb	r3, [r7, #15]
 801a49c:	4613      	mov	r3, r2
 801a49e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a4a0:	2300      	movs	r3, #0
 801a4a2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a4a8:	7bfb      	ldrb	r3, [r7, #15]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d002      	beq.n	801a4b4 <RadioTimeOnAir+0x28>
 801a4ae:	2b01      	cmp	r3, #1
 801a4b0:	d017      	beq.n	801a4e2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a4b2:	e035      	b.n	801a520 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a4b4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a4b8:	8c3a      	ldrh	r2, [r7, #32]
 801a4ba:	7bb9      	ldrb	r1, [r7, #14]
 801a4bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4c0:	9301      	str	r3, [sp, #4]
 801a4c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a4c6:	9300      	str	r3, [sp, #0]
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	6878      	ldr	r0, [r7, #4]
 801a4cc:	f7ff ff32 	bl	801a334 <RadioGetGfskTimeOnAirNumerator>
 801a4d0:	4603      	mov	r3, r0
 801a4d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a4d6:	fb02 f303 	mul.w	r3, r2, r3
 801a4da:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	613b      	str	r3, [r7, #16]
        break;
 801a4e0:	e01e      	b.n	801a520 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a4e2:	8c39      	ldrh	r1, [r7, #32]
 801a4e4:	7bba      	ldrb	r2, [r7, #14]
 801a4e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a4ea:	9302      	str	r3, [sp, #8]
 801a4ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a4f0:	9301      	str	r3, [sp, #4]
 801a4f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a4f6:	9300      	str	r3, [sp, #0]
 801a4f8:	460b      	mov	r3, r1
 801a4fa:	6879      	ldr	r1, [r7, #4]
 801a4fc:	68b8      	ldr	r0, [r7, #8]
 801a4fe:	f7ff ff43 	bl	801a388 <RadioGetLoRaTimeOnAirNumerator>
 801a502:	4603      	mov	r3, r0
 801a504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a508:	fb02 f303 	mul.w	r3, r2, r3
 801a50c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801a50e:	4a0a      	ldr	r2, [pc, #40]	; (801a538 <RadioTimeOnAir+0xac>)
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	4413      	add	r3, r2
 801a514:	781b      	ldrb	r3, [r3, #0]
 801a516:	4618      	mov	r0, r3
 801a518:	f7ff feb6 	bl	801a288 <RadioGetLoRaBandwidthInHz>
 801a51c:	6138      	str	r0, [r7, #16]
        break;
 801a51e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801a520:	697a      	ldr	r2, [r7, #20]
 801a522:	693b      	ldr	r3, [r7, #16]
 801a524:	4413      	add	r3, r2
 801a526:	1e5a      	subs	r2, r3, #1
 801a528:	693b      	ldr	r3, [r7, #16]
 801a52a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a52e:	4618      	mov	r0, r3
 801a530:	3718      	adds	r7, #24
 801a532:	46bd      	mov	sp, r7
 801a534:	bd80      	pop	{r7, pc}
 801a536:	bf00      	nop
 801a538:	0801f4ec 	.word	0x0801f4ec

0801a53c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801a53c:	b580      	push	{r7, lr}
 801a53e:	b084      	sub	sp, #16
 801a540:	af00      	add	r7, sp, #0
 801a542:	6078      	str	r0, [r7, #4]
 801a544:	460b      	mov	r3, r1
 801a546:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801a548:	2300      	movs	r3, #0
 801a54a:	2200      	movs	r2, #0
 801a54c:	f240 2101 	movw	r1, #513	; 0x201
 801a550:	f240 2001 	movw	r0, #513	; 0x201
 801a554:	f001 fd66 	bl	801c024 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a558:	4b73      	ldr	r3, [pc, #460]	; (801a728 <RadioSend+0x1ec>)
 801a55a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a55e:	2101      	movs	r1, #1
 801a560:	4618      	mov	r0, r3
 801a562:	f002 fa03 	bl	801c96c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801a566:	4b70      	ldr	r3, [pc, #448]	; (801a728 <RadioSend+0x1ec>)
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	2b01      	cmp	r3, #1
 801a56c:	d112      	bne.n	801a594 <RadioSend+0x58>
 801a56e:	4b6e      	ldr	r3, [pc, #440]	; (801a728 <RadioSend+0x1ec>)
 801a570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a574:	2b06      	cmp	r3, #6
 801a576:	d10d      	bne.n	801a594 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a578:	f640 0089 	movw	r0, #2185	; 0x889
 801a57c:	f002 f916 	bl	801c7ac <SUBGRF_ReadRegister>
 801a580:	4603      	mov	r3, r0
 801a582:	f023 0304 	bic.w	r3, r3, #4
 801a586:	b2db      	uxtb	r3, r3
 801a588:	4619      	mov	r1, r3
 801a58a:	f640 0089 	movw	r0, #2185	; 0x889
 801a58e:	f002 f8f9 	bl	801c784 <SUBGRF_WriteRegister>
 801a592:	e00c      	b.n	801a5ae <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a594:	f640 0089 	movw	r0, #2185	; 0x889
 801a598:	f002 f908 	bl	801c7ac <SUBGRF_ReadRegister>
 801a59c:	4603      	mov	r3, r0
 801a59e:	f043 0304 	orr.w	r3, r3, #4
 801a5a2:	b2db      	uxtb	r3, r3
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	f640 0089 	movw	r0, #2185	; 0x889
 801a5aa:	f002 f8eb 	bl	801c784 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801a5ae:	4b5e      	ldr	r3, [pc, #376]	; (801a728 <RadioSend+0x1ec>)
 801a5b0:	781b      	ldrb	r3, [r3, #0]
 801a5b2:	2b04      	cmp	r3, #4
 801a5b4:	f200 80a8 	bhi.w	801a708 <RadioSend+0x1cc>
 801a5b8:	a201      	add	r2, pc, #4	; (adr r2, 801a5c0 <RadioSend+0x84>)
 801a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5be:	bf00      	nop
 801a5c0:	0801a5ef 	.word	0x0801a5ef
 801a5c4:	0801a5d5 	.word	0x0801a5d5
 801a5c8:	0801a5ef 	.word	0x0801a5ef
 801a5cc:	0801a651 	.word	0x0801a651
 801a5d0:	0801a671 	.word	0x0801a671
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801a5d4:	4a54      	ldr	r2, [pc, #336]	; (801a728 <RadioSend+0x1ec>)
 801a5d6:	78fb      	ldrb	r3, [r7, #3]
 801a5d8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a5da:	4854      	ldr	r0, [pc, #336]	; (801a72c <RadioSend+0x1f0>)
 801a5dc:	f001 ff8a 	bl	801c4f4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a5e0:	78fb      	ldrb	r3, [r7, #3]
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	6878      	ldr	r0, [r7, #4]
 801a5e8:	f001 fa3a 	bl	801ba60 <SUBGRF_SendPayload>
            break;
 801a5ec:	e08d      	b.n	801a70a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801a5ee:	f002 fbb6 	bl	801cd5e <RFW_Is_Init>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	2b01      	cmp	r3, #1
 801a5f6:	d11e      	bne.n	801a636 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801a5f8:	f107 020d 	add.w	r2, r7, #13
 801a5fc:	78fb      	ldrb	r3, [r7, #3]
 801a5fe:	4619      	mov	r1, r3
 801a600:	6878      	ldr	r0, [r7, #4]
 801a602:	f002 fbc4 	bl	801cd8e <RFW_TransmitInit>
 801a606:	4603      	mov	r3, r0
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d10c      	bne.n	801a626 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801a60c:	7b7a      	ldrb	r2, [r7, #13]
 801a60e:	4b46      	ldr	r3, [pc, #280]	; (801a728 <RadioSend+0x1ec>)
 801a610:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a612:	4846      	ldr	r0, [pc, #280]	; (801a72c <RadioSend+0x1f0>)
 801a614:	f001 ff6e 	bl	801c4f4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801a618:	7b7b      	ldrb	r3, [r7, #13]
 801a61a:	2200      	movs	r2, #0
 801a61c:	4619      	mov	r1, r3
 801a61e:	6878      	ldr	r0, [r7, #4]
 801a620:	f001 fa1e 	bl	801ba60 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801a624:	e071      	b.n	801a70a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801a626:	4b42      	ldr	r3, [pc, #264]	; (801a730 <RadioSend+0x1f4>)
 801a628:	2201      	movs	r2, #1
 801a62a:	2100      	movs	r1, #0
 801a62c:	2002      	movs	r0, #2
 801a62e:	f003 fccf 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801a632:	2303      	movs	r3, #3
 801a634:	e073      	b.n	801a71e <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801a636:	4a3c      	ldr	r2, [pc, #240]	; (801a728 <RadioSend+0x1ec>)
 801a638:	78fb      	ldrb	r3, [r7, #3]
 801a63a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a63c:	483b      	ldr	r0, [pc, #236]	; (801a72c <RadioSend+0x1f0>)
 801a63e:	f001 ff59 	bl	801c4f4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801a642:	78fb      	ldrb	r3, [r7, #3]
 801a644:	2200      	movs	r2, #0
 801a646:	4619      	mov	r1, r3
 801a648:	6878      	ldr	r0, [r7, #4]
 801a64a:	f001 fa09 	bl	801ba60 <SUBGRF_SendPayload>
            break;
 801a64e:	e05c      	b.n	801a70a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a650:	4b35      	ldr	r3, [pc, #212]	; (801a728 <RadioSend+0x1ec>)
 801a652:	2202      	movs	r2, #2
 801a654:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801a656:	4a34      	ldr	r2, [pc, #208]	; (801a728 <RadioSend+0x1ec>)
 801a658:	78fb      	ldrb	r3, [r7, #3]
 801a65a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a65c:	4833      	ldr	r0, [pc, #204]	; (801a72c <RadioSend+0x1f0>)
 801a65e:	f001 ff49 	bl	801c4f4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a662:	78fb      	ldrb	r3, [r7, #3]
 801a664:	2200      	movs	r2, #0
 801a666:	4619      	mov	r1, r3
 801a668:	6878      	ldr	r0, [r7, #4]
 801a66a:	f001 f9f9 	bl	801ba60 <SUBGRF_SendPayload>
            break;
 801a66e:	e04c      	b.n	801a70a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801a670:	78fb      	ldrb	r3, [r7, #3]
 801a672:	461a      	mov	r2, r3
 801a674:	6879      	ldr	r1, [r7, #4]
 801a676:	482f      	ldr	r0, [pc, #188]	; (801a734 <RadioSend+0x1f8>)
 801a678:	f000 fccc 	bl	801b014 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a67c:	4b2a      	ldr	r3, [pc, #168]	; (801a728 <RadioSend+0x1ec>)
 801a67e:	2202      	movs	r2, #2
 801a680:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801a682:	78fb      	ldrb	r3, [r7, #3]
 801a684:	3301      	adds	r3, #1
 801a686:	b2da      	uxtb	r2, r3
 801a688:	4b27      	ldr	r3, [pc, #156]	; (801a728 <RadioSend+0x1ec>)
 801a68a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a68c:	4827      	ldr	r0, [pc, #156]	; (801a72c <RadioSend+0x1f0>)
 801a68e:	f001 ff31 	bl	801c4f4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801a692:	2100      	movs	r1, #0
 801a694:	20f1      	movs	r0, #241	; 0xf1
 801a696:	f000 f966 	bl	801a966 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801a69a:	2100      	movs	r1, #0
 801a69c:	20f0      	movs	r0, #240	; 0xf0
 801a69e:	f000 f962 	bl	801a966 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801a6a2:	4b21      	ldr	r3, [pc, #132]	; (801a728 <RadioSend+0x1ec>)
 801a6a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a6a6:	2b64      	cmp	r3, #100	; 0x64
 801a6a8:	d108      	bne.n	801a6bc <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a6aa:	2170      	movs	r1, #112	; 0x70
 801a6ac:	20f3      	movs	r0, #243	; 0xf3
 801a6ae:	f000 f95a 	bl	801a966 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a6b2:	211d      	movs	r1, #29
 801a6b4:	20f2      	movs	r0, #242	; 0xf2
 801a6b6:	f000 f956 	bl	801a966 <RadioWrite>
 801a6ba:	e007      	b.n	801a6cc <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a6bc:	21e1      	movs	r1, #225	; 0xe1
 801a6be:	20f3      	movs	r0, #243	; 0xf3
 801a6c0:	f000 f951 	bl	801a966 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a6c4:	2104      	movs	r1, #4
 801a6c6:	20f2      	movs	r0, #242	; 0xf2
 801a6c8:	f000 f94d 	bl	801a966 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a6cc:	78fb      	ldrb	r3, [r7, #3]
 801a6ce:	b29b      	uxth	r3, r3
 801a6d0:	00db      	lsls	r3, r3, #3
 801a6d2:	b29b      	uxth	r3, r3
 801a6d4:	3302      	adds	r3, #2
 801a6d6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a6d8:	89fb      	ldrh	r3, [r7, #14]
 801a6da:	0a1b      	lsrs	r3, r3, #8
 801a6dc:	b29b      	uxth	r3, r3
 801a6de:	b2db      	uxtb	r3, r3
 801a6e0:	4619      	mov	r1, r3
 801a6e2:	20f4      	movs	r0, #244	; 0xf4
 801a6e4:	f000 f93f 	bl	801a966 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a6e8:	89fb      	ldrh	r3, [r7, #14]
 801a6ea:	b2db      	uxtb	r3, r3
 801a6ec:	4619      	mov	r1, r3
 801a6ee:	20f5      	movs	r0, #245	; 0xf5
 801a6f0:	f000 f939 	bl	801a966 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801a6f4:	78fb      	ldrb	r3, [r7, #3]
 801a6f6:	3301      	adds	r3, #1
 801a6f8:	b2db      	uxtb	r3, r3
 801a6fa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a6fe:	4619      	mov	r1, r3
 801a700:	480c      	ldr	r0, [pc, #48]	; (801a734 <RadioSend+0x1f8>)
 801a702:	f001 f9ad 	bl	801ba60 <SUBGRF_SendPayload>
            break;
 801a706:	e000      	b.n	801a70a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a708:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a70a:	4b07      	ldr	r3, [pc, #28]	; (801a728 <RadioSend+0x1ec>)
 801a70c:	685b      	ldr	r3, [r3, #4]
 801a70e:	4619      	mov	r1, r3
 801a710:	4809      	ldr	r0, [pc, #36]	; (801a738 <RadioSend+0x1fc>)
 801a712:	f003 fac3 	bl	801dc9c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801a716:	4808      	ldr	r0, [pc, #32]	; (801a738 <RadioSend+0x1fc>)
 801a718:	f003 f9e2 	bl	801dae0 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801a71c:	2300      	movs	r3, #0
}
 801a71e:	4618      	mov	r0, r3
 801a720:	3710      	adds	r7, #16
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	200017f8 	.word	0x200017f8
 801a72c:	20001806 	.word	0x20001806
 801a730:	0801ee8c 	.word	0x0801ee8c
 801a734:	200016f4 	.word	0x200016f4
 801a738:	20001854 	.word	0x20001854

0801a73c <RadioSleep>:

static void RadioSleep( void )
{
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b082      	sub	sp, #8
 801a740:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a742:	2300      	movs	r3, #0
 801a744:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a746:	793b      	ldrb	r3, [r7, #4]
 801a748:	f043 0304 	orr.w	r3, r3, #4
 801a74c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a74e:	7938      	ldrb	r0, [r7, #4]
 801a750:	f001 fa62 	bl	801bc18 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a754:	2002      	movs	r0, #2
 801a756:	f7e8 f8c5 	bl	80028e4 <HAL_Delay>
}
 801a75a:	bf00      	nop
 801a75c:	3708      	adds	r7, #8
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}

0801a762 <RadioStandby>:

static void RadioStandby( void )
{
 801a762:	b580      	push	{r7, lr}
 801a764:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a766:	2000      	movs	r0, #0
 801a768:	f001 fa88 	bl	801bc7c <SUBGRF_SetStandby>
}
 801a76c:	bf00      	nop
 801a76e:	bd80      	pop	{r7, pc}

0801a770 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b082      	sub	sp, #8
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801a778:	f002 faf1 	bl	801cd5e <RFW_Is_Init>
 801a77c:	4603      	mov	r3, r0
 801a77e:	2b01      	cmp	r3, #1
 801a780:	d102      	bne.n	801a788 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a782:	f002 fb14 	bl	801cdae <RFW_ReceiveInit>
 801a786:	e007      	b.n	801a798 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a788:	2300      	movs	r3, #0
 801a78a:	2200      	movs	r2, #0
 801a78c:	f240 2162 	movw	r1, #610	; 0x262
 801a790:	f240 2062 	movw	r0, #610	; 0x262
 801a794:	f001 fc46 	bl	801c024 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d006      	beq.n	801a7ac <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a79e:	6879      	ldr	r1, [r7, #4]
 801a7a0:	4811      	ldr	r0, [pc, #68]	; (801a7e8 <RadioRx+0x78>)
 801a7a2:	f003 fa7b 	bl	801dc9c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a7a6:	4810      	ldr	r0, [pc, #64]	; (801a7e8 <RadioRx+0x78>)
 801a7a8:	f003 f99a 	bl	801dae0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a7ac:	4b0f      	ldr	r3, [pc, #60]	; (801a7ec <RadioRx+0x7c>)
 801a7ae:	2200      	movs	r2, #0
 801a7b0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a7b2:	4b0e      	ldr	r3, [pc, #56]	; (801a7ec <RadioRx+0x7c>)
 801a7b4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7b8:	2100      	movs	r1, #0
 801a7ba:	4618      	mov	r0, r3
 801a7bc:	f002 f8d6 	bl	801c96c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a7c0:	4b0a      	ldr	r3, [pc, #40]	; (801a7ec <RadioRx+0x7c>)
 801a7c2:	785b      	ldrb	r3, [r3, #1]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d004      	beq.n	801a7d2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a7c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a7cc:	f001 fa92 	bl	801bcf4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a7d0:	e005      	b.n	801a7de <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a7d2:	4b06      	ldr	r3, [pc, #24]	; (801a7ec <RadioRx+0x7c>)
 801a7d4:	689b      	ldr	r3, [r3, #8]
 801a7d6:	019b      	lsls	r3, r3, #6
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f001 fa8b 	bl	801bcf4 <SUBGRF_SetRx>
}
 801a7de:	bf00      	nop
 801a7e0:	3708      	adds	r7, #8
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	2000186c 	.word	0x2000186c
 801a7ec:	200017f8 	.word	0x200017f8

0801a7f0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801a7f8:	f002 fab1 	bl	801cd5e <RFW_Is_Init>
 801a7fc:	4603      	mov	r3, r0
 801a7fe:	2b01      	cmp	r3, #1
 801a800:	d102      	bne.n	801a808 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a802:	f002 fad4 	bl	801cdae <RFW_ReceiveInit>
 801a806:	e007      	b.n	801a818 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a808:	2300      	movs	r3, #0
 801a80a:	2200      	movs	r2, #0
 801a80c:	f240 2162 	movw	r1, #610	; 0x262
 801a810:	f240 2062 	movw	r0, #610	; 0x262
 801a814:	f001 fc06 	bl	801c024 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d006      	beq.n	801a82c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a81e:	6879      	ldr	r1, [r7, #4]
 801a820:	4811      	ldr	r0, [pc, #68]	; (801a868 <RadioRxBoosted+0x78>)
 801a822:	f003 fa3b 	bl	801dc9c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a826:	4810      	ldr	r0, [pc, #64]	; (801a868 <RadioRxBoosted+0x78>)
 801a828:	f003 f95a 	bl	801dae0 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a82c:	4b0f      	ldr	r3, [pc, #60]	; (801a86c <RadioRxBoosted+0x7c>)
 801a82e:	2200      	movs	r2, #0
 801a830:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a832:	4b0e      	ldr	r3, [pc, #56]	; (801a86c <RadioRxBoosted+0x7c>)
 801a834:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a838:	2100      	movs	r1, #0
 801a83a:	4618      	mov	r0, r3
 801a83c:	f002 f896 	bl	801c96c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a840:	4b0a      	ldr	r3, [pc, #40]	; (801a86c <RadioRxBoosted+0x7c>)
 801a842:	785b      	ldrb	r3, [r3, #1]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d004      	beq.n	801a852 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a848:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a84c:	f001 fa72 	bl	801bd34 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a850:	e005      	b.n	801a85e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a852:	4b06      	ldr	r3, [pc, #24]	; (801a86c <RadioRxBoosted+0x7c>)
 801a854:	689b      	ldr	r3, [r3, #8]
 801a856:	019b      	lsls	r3, r3, #6
 801a858:	4618      	mov	r0, r3
 801a85a:	f001 fa6b 	bl	801bd34 <SUBGRF_SetRxBoosted>
}
 801a85e:	bf00      	nop
 801a860:	3708      	adds	r7, #8
 801a862:	46bd      	mov	sp, r7
 801a864:	bd80      	pop	{r7, pc}
 801a866:	bf00      	nop
 801a868:	2000186c 	.word	0x2000186c
 801a86c:	200017f8 	.word	0x200017f8

0801a870 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a870:	b580      	push	{r7, lr}
 801a872:	b082      	sub	sp, #8
 801a874:	af00      	add	r7, sp, #0
 801a876:	6078      	str	r0, [r7, #4]
 801a878:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	005a      	lsls	r2, r3, #1
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	4413      	add	r3, r2
 801a882:	4a0c      	ldr	r2, [pc, #48]	; (801a8b4 <RadioSetRxDutyCycle+0x44>)
 801a884:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a886:	2300      	movs	r3, #0
 801a888:	2200      	movs	r2, #0
 801a88a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a88e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a892:	f001 fbc7 	bl	801c024 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a896:	4b07      	ldr	r3, [pc, #28]	; (801a8b4 <RadioSetRxDutyCycle+0x44>)
 801a898:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a89c:	2100      	movs	r1, #0
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f002 f864 	bl	801c96c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a8a4:	6839      	ldr	r1, [r7, #0]
 801a8a6:	6878      	ldr	r0, [r7, #4]
 801a8a8:	f001 fa68 	bl	801bd7c <SUBGRF_SetRxDutyCycle>
}
 801a8ac:	bf00      	nop
 801a8ae:	3708      	adds	r7, #8
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bd80      	pop	{r7, pc}
 801a8b4:	200017f8 	.word	0x200017f8

0801a8b8 <RadioStartCad>:

static void RadioStartCad( void )
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a8bc:	4b09      	ldr	r3, [pc, #36]	; (801a8e4 <RadioStartCad+0x2c>)
 801a8be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a8c2:	2100      	movs	r1, #0
 801a8c4:	4618      	mov	r0, r3
 801a8c6:	f002 f851 	bl	801c96c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a8ca:	2300      	movs	r3, #0
 801a8cc:	2200      	movs	r2, #0
 801a8ce:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a8d2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a8d6:	f001 fba5 	bl	801c024 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a8da:	f001 fa7b 	bl	801bdd4 <SUBGRF_SetCad>
}
 801a8de:	bf00      	nop
 801a8e0:	bd80      	pop	{r7, pc}
 801a8e2:	bf00      	nop
 801a8e4:	200017f8 	.word	0x200017f8

0801a8e8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b084      	sub	sp, #16
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
 801a8f0:	460b      	mov	r3, r1
 801a8f2:	70fb      	strb	r3, [r7, #3]
 801a8f4:	4613      	mov	r3, r2
 801a8f6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801a8f8:	883b      	ldrh	r3, [r7, #0]
 801a8fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a8fe:	fb02 f303 	mul.w	r3, r2, r3
 801a902:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a904:	6878      	ldr	r0, [r7, #4]
 801a906:	f001 fbe9 	bl	801c0dc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a90a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a90e:	4618      	mov	r0, r3
 801a910:	f002 f854 	bl	801c9bc <SUBGRF_SetRfTxPower>
 801a914:	4603      	mov	r3, r0
 801a916:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a918:	210e      	movs	r1, #14
 801a91a:	f640 101f 	movw	r0, #2335	; 0x91f
 801a91e:	f001 ff31 	bl	801c784 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a922:	7afb      	ldrb	r3, [r7, #11]
 801a924:	2101      	movs	r1, #1
 801a926:	4618      	mov	r0, r3
 801a928:	f002 f820 	bl	801c96c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a92c:	f001 fa60 	bl	801bdf0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a930:	68f9      	ldr	r1, [r7, #12]
 801a932:	4805      	ldr	r0, [pc, #20]	; (801a948 <RadioSetTxContinuousWave+0x60>)
 801a934:	f003 f9b2 	bl	801dc9c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a938:	4803      	ldr	r0, [pc, #12]	; (801a948 <RadioSetTxContinuousWave+0x60>)
 801a93a:	f003 f8d1 	bl	801dae0 <UTIL_TIMER_Start>
}
 801a93e:	bf00      	nop
 801a940:	3710      	adds	r7, #16
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}
 801a946:	bf00      	nop
 801a948:	20001854 	.word	0x20001854

0801a94c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b082      	sub	sp, #8
 801a950:	af00      	add	r7, sp, #0
 801a952:	4603      	mov	r3, r0
 801a954:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a956:	f001 fe82 	bl	801c65e <SUBGRF_GetRssiInst>
 801a95a:	4603      	mov	r3, r0
 801a95c:	b21b      	sxth	r3, r3
}
 801a95e:	4618      	mov	r0, r3
 801a960:	3708      	adds	r7, #8
 801a962:	46bd      	mov	sp, r7
 801a964:	bd80      	pop	{r7, pc}

0801a966 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a966:	b580      	push	{r7, lr}
 801a968:	b082      	sub	sp, #8
 801a96a:	af00      	add	r7, sp, #0
 801a96c:	4603      	mov	r3, r0
 801a96e:	460a      	mov	r2, r1
 801a970:	80fb      	strh	r3, [r7, #6]
 801a972:	4613      	mov	r3, r2
 801a974:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a976:	797a      	ldrb	r2, [r7, #5]
 801a978:	88fb      	ldrh	r3, [r7, #6]
 801a97a:	4611      	mov	r1, r2
 801a97c:	4618      	mov	r0, r3
 801a97e:	f001 ff01 	bl	801c784 <SUBGRF_WriteRegister>
}
 801a982:	bf00      	nop
 801a984:	3708      	adds	r7, #8
 801a986:	46bd      	mov	sp, r7
 801a988:	bd80      	pop	{r7, pc}

0801a98a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a98a:	b580      	push	{r7, lr}
 801a98c:	b082      	sub	sp, #8
 801a98e:	af00      	add	r7, sp, #0
 801a990:	4603      	mov	r3, r0
 801a992:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a994:	88fb      	ldrh	r3, [r7, #6]
 801a996:	4618      	mov	r0, r3
 801a998:	f001 ff08 	bl	801c7ac <SUBGRF_ReadRegister>
 801a99c:	4603      	mov	r3, r0
}
 801a99e:	4618      	mov	r0, r3
 801a9a0:	3708      	adds	r7, #8
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	bd80      	pop	{r7, pc}

0801a9a6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a9a6:	b580      	push	{r7, lr}
 801a9a8:	b082      	sub	sp, #8
 801a9aa:	af00      	add	r7, sp, #0
 801a9ac:	4603      	mov	r3, r0
 801a9ae:	6039      	str	r1, [r7, #0]
 801a9b0:	80fb      	strh	r3, [r7, #6]
 801a9b2:	4613      	mov	r3, r2
 801a9b4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a9b6:	797b      	ldrb	r3, [r7, #5]
 801a9b8:	b29a      	uxth	r2, r3
 801a9ba:	88fb      	ldrh	r3, [r7, #6]
 801a9bc:	6839      	ldr	r1, [r7, #0]
 801a9be:	4618      	mov	r0, r3
 801a9c0:	f001 ff08 	bl	801c7d4 <SUBGRF_WriteRegisters>
}
 801a9c4:	bf00      	nop
 801a9c6:	3708      	adds	r7, #8
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}

0801a9cc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a9cc:	b580      	push	{r7, lr}
 801a9ce:	b082      	sub	sp, #8
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	4603      	mov	r3, r0
 801a9d4:	6039      	str	r1, [r7, #0]
 801a9d6:	80fb      	strh	r3, [r7, #6]
 801a9d8:	4613      	mov	r3, r2
 801a9da:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a9dc:	797b      	ldrb	r3, [r7, #5]
 801a9de:	b29a      	uxth	r2, r3
 801a9e0:	88fb      	ldrh	r3, [r7, #6]
 801a9e2:	6839      	ldr	r1, [r7, #0]
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f001 ff17 	bl	801c818 <SUBGRF_ReadRegisters>
}
 801a9ea:	bf00      	nop
 801a9ec:	3708      	adds	r7, #8
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}
	...

0801a9f4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a9f4:	b580      	push	{r7, lr}
 801a9f6:	b082      	sub	sp, #8
 801a9f8:	af00      	add	r7, sp, #0
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	460a      	mov	r2, r1
 801a9fe:	71fb      	strb	r3, [r7, #7]
 801aa00:	4613      	mov	r3, r2
 801aa02:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801aa04:	79fb      	ldrb	r3, [r7, #7]
 801aa06:	2b01      	cmp	r3, #1
 801aa08:	d10a      	bne.n	801aa20 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801aa0a:	4a0e      	ldr	r2, [pc, #56]	; (801aa44 <RadioSetMaxPayloadLength+0x50>)
 801aa0c:	79bb      	ldrb	r3, [r7, #6]
 801aa0e:	7013      	strb	r3, [r2, #0]
 801aa10:	4b0c      	ldr	r3, [pc, #48]	; (801aa44 <RadioSetMaxPayloadLength+0x50>)
 801aa12:	781a      	ldrb	r2, [r3, #0]
 801aa14:	4b0c      	ldr	r3, [pc, #48]	; (801aa48 <RadioSetMaxPayloadLength+0x54>)
 801aa16:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa18:	480c      	ldr	r0, [pc, #48]	; (801aa4c <RadioSetMaxPayloadLength+0x58>)
 801aa1a:	f001 fd6b 	bl	801c4f4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801aa1e:	e00d      	b.n	801aa3c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801aa20:	4b09      	ldr	r3, [pc, #36]	; (801aa48 <RadioSetMaxPayloadLength+0x54>)
 801aa22:	7d5b      	ldrb	r3, [r3, #21]
 801aa24:	2b01      	cmp	r3, #1
 801aa26:	d109      	bne.n	801aa3c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801aa28:	4a06      	ldr	r2, [pc, #24]	; (801aa44 <RadioSetMaxPayloadLength+0x50>)
 801aa2a:	79bb      	ldrb	r3, [r7, #6]
 801aa2c:	7013      	strb	r3, [r2, #0]
 801aa2e:	4b05      	ldr	r3, [pc, #20]	; (801aa44 <RadioSetMaxPayloadLength+0x50>)
 801aa30:	781a      	ldrb	r2, [r3, #0]
 801aa32:	4b05      	ldr	r3, [pc, #20]	; (801aa48 <RadioSetMaxPayloadLength+0x54>)
 801aa34:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aa36:	4805      	ldr	r0, [pc, #20]	; (801aa4c <RadioSetMaxPayloadLength+0x58>)
 801aa38:	f001 fd5c 	bl	801c4f4 <SUBGRF_SetPacketParams>
}
 801aa3c:	bf00      	nop
 801aa3e:	3708      	adds	r7, #8
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd80      	pop	{r7, pc}
 801aa44:	2000014c 	.word	0x2000014c
 801aa48:	200017f8 	.word	0x200017f8
 801aa4c:	20001806 	.word	0x20001806

0801aa50 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b082      	sub	sp, #8
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	4603      	mov	r3, r0
 801aa58:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801aa5a:	4a13      	ldr	r2, [pc, #76]	; (801aaa8 <RadioSetPublicNetwork+0x58>)
 801aa5c:	79fb      	ldrb	r3, [r7, #7]
 801aa5e:	7313      	strb	r3, [r2, #12]
 801aa60:	4b11      	ldr	r3, [pc, #68]	; (801aaa8 <RadioSetPublicNetwork+0x58>)
 801aa62:	7b1a      	ldrb	r2, [r3, #12]
 801aa64:	4b10      	ldr	r3, [pc, #64]	; (801aaa8 <RadioSetPublicNetwork+0x58>)
 801aa66:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801aa68:	2001      	movs	r0, #1
 801aa6a:	f7ff f811 	bl	8019a90 <RadioSetModem>
    if( enable == true )
 801aa6e:	79fb      	ldrb	r3, [r7, #7]
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d00a      	beq.n	801aa8a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801aa74:	2134      	movs	r1, #52	; 0x34
 801aa76:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aa7a:	f001 fe83 	bl	801c784 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801aa7e:	2144      	movs	r1, #68	; 0x44
 801aa80:	f240 7041 	movw	r0, #1857	; 0x741
 801aa84:	f001 fe7e 	bl	801c784 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801aa88:	e009      	b.n	801aa9e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801aa8a:	2114      	movs	r1, #20
 801aa8c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aa90:	f001 fe78 	bl	801c784 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801aa94:	2124      	movs	r1, #36	; 0x24
 801aa96:	f240 7041 	movw	r0, #1857	; 0x741
 801aa9a:	f001 fe73 	bl	801c784 <SUBGRF_WriteRegister>
}
 801aa9e:	bf00      	nop
 801aaa0:	3708      	adds	r7, #8
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}
 801aaa6:	bf00      	nop
 801aaa8:	200017f8 	.word	0x200017f8

0801aaac <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801aab0:	f001 ffb8 	bl	801ca24 <SUBGRF_GetRadioWakeUpTime>
 801aab4:	4603      	mov	r3, r0
 801aab6:	3303      	adds	r3, #3
}
 801aab8:	4618      	mov	r0, r3
 801aaba:	bd80      	pop	{r7, pc}

0801aabc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801aac4:	f000 f80e 	bl	801aae4 <RadioOnTxTimeoutProcess>
}
 801aac8:	bf00      	nop
 801aaca:	3708      	adds	r7, #8
 801aacc:	46bd      	mov	sp, r7
 801aace:	bd80      	pop	{r7, pc}

0801aad0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801aad0:	b580      	push	{r7, lr}
 801aad2:	b082      	sub	sp, #8
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801aad8:	f000 f818 	bl	801ab0c <RadioOnRxTimeoutProcess>
}
 801aadc:	bf00      	nop
 801aade:	3708      	adds	r7, #8
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}

0801aae4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aae8:	4b07      	ldr	r3, [pc, #28]	; (801ab08 <RadioOnTxTimeoutProcess+0x24>)
 801aaea:	681b      	ldr	r3, [r3, #0]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d008      	beq.n	801ab02 <RadioOnTxTimeoutProcess+0x1e>
 801aaf0:	4b05      	ldr	r3, [pc, #20]	; (801ab08 <RadioOnTxTimeoutProcess+0x24>)
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d003      	beq.n	801ab02 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801aafa:	4b03      	ldr	r3, [pc, #12]	; (801ab08 <RadioOnTxTimeoutProcess+0x24>)
 801aafc:	681b      	ldr	r3, [r3, #0]
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	4798      	blx	r3
    }
}
 801ab02:	bf00      	nop
 801ab04:	bd80      	pop	{r7, pc}
 801ab06:	bf00      	nop
 801ab08:	200017f4 	.word	0x200017f4

0801ab0c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ab10:	4b07      	ldr	r3, [pc, #28]	; (801ab30 <RadioOnRxTimeoutProcess+0x24>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d008      	beq.n	801ab2a <RadioOnRxTimeoutProcess+0x1e>
 801ab18:	4b05      	ldr	r3, [pc, #20]	; (801ab30 <RadioOnRxTimeoutProcess+0x24>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	68db      	ldr	r3, [r3, #12]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d003      	beq.n	801ab2a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801ab22:	4b03      	ldr	r3, [pc, #12]	; (801ab30 <RadioOnRxTimeoutProcess+0x24>)
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	68db      	ldr	r3, [r3, #12]
 801ab28:	4798      	blx	r3
    }
}
 801ab2a:	bf00      	nop
 801ab2c:	bd80      	pop	{r7, pc}
 801ab2e:	bf00      	nop
 801ab30:	200017f4 	.word	0x200017f4

0801ab34 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b082      	sub	sp, #8
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	4603      	mov	r3, r0
 801ab3c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801ab3e:	4a05      	ldr	r2, [pc, #20]	; (801ab54 <RadioOnDioIrq+0x20>)
 801ab40:	88fb      	ldrh	r3, [r7, #6]
 801ab42:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801ab46:	f000 f807 	bl	801ab58 <RadioIrqProcess>
}
 801ab4a:	bf00      	nop
 801ab4c:	3708      	adds	r7, #8
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}
 801ab52:	bf00      	nop
 801ab54:	200017f8 	.word	0x200017f8

0801ab58 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801ab58:	b5b0      	push	{r4, r5, r7, lr}
 801ab5a:	b082      	sub	sp, #8
 801ab5c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801ab5e:	2300      	movs	r3, #0
 801ab60:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801ab62:	2300      	movs	r3, #0
 801ab64:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801ab66:	4ba8      	ldr	r3, [pc, #672]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801ab68:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ab6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab70:	f000 810d 	beq.w	801ad8e <RadioIrqProcess+0x236>
 801ab74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ab78:	f300 81e8 	bgt.w	801af4c <RadioIrqProcess+0x3f4>
 801ab7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab80:	f000 80f1 	beq.w	801ad66 <RadioIrqProcess+0x20e>
 801ab84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ab88:	f300 81e0 	bgt.w	801af4c <RadioIrqProcess+0x3f4>
 801ab8c:	2b80      	cmp	r3, #128	; 0x80
 801ab8e:	f000 80d6 	beq.w	801ad3e <RadioIrqProcess+0x1e6>
 801ab92:	2b80      	cmp	r3, #128	; 0x80
 801ab94:	f300 81da 	bgt.w	801af4c <RadioIrqProcess+0x3f4>
 801ab98:	2b20      	cmp	r3, #32
 801ab9a:	dc49      	bgt.n	801ac30 <RadioIrqProcess+0xd8>
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	f340 81d5 	ble.w	801af4c <RadioIrqProcess+0x3f4>
 801aba2:	3b01      	subs	r3, #1
 801aba4:	2b1f      	cmp	r3, #31
 801aba6:	f200 81d1 	bhi.w	801af4c <RadioIrqProcess+0x3f4>
 801abaa:	a201      	add	r2, pc, #4	; (adr r2, 801abb0 <RadioIrqProcess+0x58>)
 801abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abb0:	0801ac39 	.word	0x0801ac39
 801abb4:	0801ac73 	.word	0x0801ac73
 801abb8:	0801af4d 	.word	0x0801af4d
 801abbc:	0801ae29 	.word	0x0801ae29
 801abc0:	0801af4d 	.word	0x0801af4d
 801abc4:	0801af4d 	.word	0x0801af4d
 801abc8:	0801af4d 	.word	0x0801af4d
 801abcc:	0801aea5 	.word	0x0801aea5
 801abd0:	0801af4d 	.word	0x0801af4d
 801abd4:	0801af4d 	.word	0x0801af4d
 801abd8:	0801af4d 	.word	0x0801af4d
 801abdc:	0801af4d 	.word	0x0801af4d
 801abe0:	0801af4d 	.word	0x0801af4d
 801abe4:	0801af4d 	.word	0x0801af4d
 801abe8:	0801af4d 	.word	0x0801af4d
 801abec:	0801aec1 	.word	0x0801aec1
 801abf0:	0801af4d 	.word	0x0801af4d
 801abf4:	0801af4d 	.word	0x0801af4d
 801abf8:	0801af4d 	.word	0x0801af4d
 801abfc:	0801af4d 	.word	0x0801af4d
 801ac00:	0801af4d 	.word	0x0801af4d
 801ac04:	0801af4d 	.word	0x0801af4d
 801ac08:	0801af4d 	.word	0x0801af4d
 801ac0c:	0801af4d 	.word	0x0801af4d
 801ac10:	0801af4d 	.word	0x0801af4d
 801ac14:	0801af4d 	.word	0x0801af4d
 801ac18:	0801af4d 	.word	0x0801af4d
 801ac1c:	0801af4d 	.word	0x0801af4d
 801ac20:	0801af4d 	.word	0x0801af4d
 801ac24:	0801af4d 	.word	0x0801af4d
 801ac28:	0801af4d 	.word	0x0801af4d
 801ac2c:	0801aecf 	.word	0x0801aecf
 801ac30:	2b40      	cmp	r3, #64	; 0x40
 801ac32:	f000 816d 	beq.w	801af10 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801ac36:	e189      	b.n	801af4c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801ac38:	4874      	ldr	r0, [pc, #464]	; (801ae0c <RadioIrqProcess+0x2b4>)
 801ac3a:	f002 ffbf 	bl	801dbbc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801ac3e:	2000      	movs	r0, #0
 801ac40:	f001 f81c 	bl	801bc7c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801ac44:	f002 f892 	bl	801cd6c <RFW_Is_LongPacketModeEnabled>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	2b01      	cmp	r3, #1
 801ac4c:	d101      	bne.n	801ac52 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801ac4e:	f002 f8b6 	bl	801cdbe <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801ac52:	4b6f      	ldr	r3, [pc, #444]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	f000 817a 	beq.w	801af50 <RadioIrqProcess+0x3f8>
 801ac5c:	4b6c      	ldr	r3, [pc, #432]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	f000 8174 	beq.w	801af50 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801ac68:	4b69      	ldr	r3, [pc, #420]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	4798      	blx	r3
        break;
 801ac70:	e16e      	b.n	801af50 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801ac72:	4868      	ldr	r0, [pc, #416]	; (801ae14 <RadioIrqProcess+0x2bc>)
 801ac74:	f002 ffa2 	bl	801dbbc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ac78:	4b63      	ldr	r3, [pc, #396]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801ac7a:	785b      	ldrb	r3, [r3, #1]
 801ac7c:	f083 0301 	eor.w	r3, r3, #1
 801ac80:	b2db      	uxtb	r3, r3
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d014      	beq.n	801acb0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801ac86:	2000      	movs	r0, #0
 801ac88:	f000 fff8 	bl	801bc7c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801ac8c:	2100      	movs	r1, #0
 801ac8e:	f640 1002 	movw	r0, #2306	; 0x902
 801ac92:	f001 fd77 	bl	801c784 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801ac96:	f640 1044 	movw	r0, #2372	; 0x944
 801ac9a:	f001 fd87 	bl	801c7ac <SUBGRF_ReadRegister>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	f043 0302 	orr.w	r3, r3, #2
 801aca4:	b2db      	uxtb	r3, r3
 801aca6:	4619      	mov	r1, r3
 801aca8:	f640 1044 	movw	r0, #2372	; 0x944
 801acac:	f001 fd6a 	bl	801c784 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801acb0:	1dfb      	adds	r3, r7, #7
 801acb2:	22ff      	movs	r2, #255	; 0xff
 801acb4:	4619      	mov	r1, r3
 801acb6:	4858      	ldr	r0, [pc, #352]	; (801ae18 <RadioIrqProcess+0x2c0>)
 801acb8:	f000 feb0 	bl	801ba1c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801acbc:	4857      	ldr	r0, [pc, #348]	; (801ae1c <RadioIrqProcess+0x2c4>)
 801acbe:	f001 fd0f 	bl	801c6e0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801acc2:	4b53      	ldr	r3, [pc, #332]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	f000 8144 	beq.w	801af54 <RadioIrqProcess+0x3fc>
 801accc:	4b50      	ldr	r3, [pc, #320]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	689b      	ldr	r3, [r3, #8]
 801acd2:	2b00      	cmp	r3, #0
 801acd4:	f000 813e 	beq.w	801af54 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801acd8:	4b4b      	ldr	r3, [pc, #300]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801acda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801acde:	2b01      	cmp	r3, #1
 801ace0:	d10e      	bne.n	801ad00 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801ace2:	4b4b      	ldr	r3, [pc, #300]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	689c      	ldr	r4, [r3, #8]
 801ace8:	79fb      	ldrb	r3, [r7, #7]
 801acea:	b299      	uxth	r1, r3
 801acec:	4b46      	ldr	r3, [pc, #280]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801acee:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801acf2:	b21a      	sxth	r2, r3
 801acf4:	4b44      	ldr	r3, [pc, #272]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801acf6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801acfa:	4847      	ldr	r0, [pc, #284]	; (801ae18 <RadioIrqProcess+0x2c0>)
 801acfc:	47a0      	blx	r4
                break;
 801acfe:	e01d      	b.n	801ad3c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801ad00:	4b41      	ldr	r3, [pc, #260]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801ad02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad04:	463a      	mov	r2, r7
 801ad06:	4611      	mov	r1, r2
 801ad08:	4618      	mov	r0, r3
 801ad0a:	f001 ff7d 	bl	801cc08 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801ad0e:	4b40      	ldr	r3, [pc, #256]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	689c      	ldr	r4, [r3, #8]
 801ad14:	79fb      	ldrb	r3, [r7, #7]
 801ad16:	b299      	uxth	r1, r3
 801ad18:	4b3b      	ldr	r3, [pc, #236]	; (801ae08 <RadioIrqProcess+0x2b0>)
 801ad1a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801ad1e:	b218      	sxth	r0, r3
 801ad20:	683b      	ldr	r3, [r7, #0]
 801ad22:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ad26:	4a3e      	ldr	r2, [pc, #248]	; (801ae20 <RadioIrqProcess+0x2c8>)
 801ad28:	fb82 5203 	smull	r5, r2, r2, r3
 801ad2c:	1192      	asrs	r2, r2, #6
 801ad2e:	17db      	asrs	r3, r3, #31
 801ad30:	1ad3      	subs	r3, r2, r3
 801ad32:	b25b      	sxtb	r3, r3
 801ad34:	4602      	mov	r2, r0
 801ad36:	4838      	ldr	r0, [pc, #224]	; (801ae18 <RadioIrqProcess+0x2c0>)
 801ad38:	47a0      	blx	r4
                break;
 801ad3a:	bf00      	nop
        break;
 801ad3c:	e10a      	b.n	801af54 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801ad3e:	2000      	movs	r0, #0
 801ad40:	f000 ff9c 	bl	801bc7c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ad44:	4b32      	ldr	r3, [pc, #200]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	f000 8105 	beq.w	801af58 <RadioIrqProcess+0x400>
 801ad4e:	4b30      	ldr	r3, [pc, #192]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	699b      	ldr	r3, [r3, #24]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	f000 80ff 	beq.w	801af58 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801ad5a:	4b2d      	ldr	r3, [pc, #180]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad5c:	681b      	ldr	r3, [r3, #0]
 801ad5e:	699b      	ldr	r3, [r3, #24]
 801ad60:	2000      	movs	r0, #0
 801ad62:	4798      	blx	r3
        break;
 801ad64:	e0f8      	b.n	801af58 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801ad66:	2000      	movs	r0, #0
 801ad68:	f000 ff88 	bl	801bc7c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ad6c:	4b28      	ldr	r3, [pc, #160]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	f000 80f3 	beq.w	801af5c <RadioIrqProcess+0x404>
 801ad76:	4b26      	ldr	r3, [pc, #152]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	699b      	ldr	r3, [r3, #24]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	f000 80ed 	beq.w	801af5c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801ad82:	4b23      	ldr	r3, [pc, #140]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	699b      	ldr	r3, [r3, #24]
 801ad88:	2001      	movs	r0, #1
 801ad8a:	4798      	blx	r3
        break;
 801ad8c:	e0e6      	b.n	801af5c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ad8e:	4b25      	ldr	r3, [pc, #148]	; (801ae24 <RadioIrqProcess+0x2cc>)
 801ad90:	2201      	movs	r2, #1
 801ad92:	2100      	movs	r1, #0
 801ad94:	2002      	movs	r0, #2
 801ad96:	f003 f91b 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ad9a:	f000 fe25 	bl	801b9e8 <SUBGRF_GetOperatingMode>
 801ad9e:	4603      	mov	r3, r0
 801ada0:	2b04      	cmp	r3, #4
 801ada2:	d115      	bne.n	801add0 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801ada4:	4819      	ldr	r0, [pc, #100]	; (801ae0c <RadioIrqProcess+0x2b4>)
 801ada6:	f002 ff09 	bl	801dbbc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801adaa:	2000      	movs	r0, #0
 801adac:	f000 ff66 	bl	801bc7c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801adb0:	4b17      	ldr	r3, [pc, #92]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	f000 80d3 	beq.w	801af60 <RadioIrqProcess+0x408>
 801adba:	4b15      	ldr	r3, [pc, #84]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	f000 80cd 	beq.w	801af60 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801adc6:	4b12      	ldr	r3, [pc, #72]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	685b      	ldr	r3, [r3, #4]
 801adcc:	4798      	blx	r3
        break;
 801adce:	e0c7      	b.n	801af60 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801add0:	f000 fe0a 	bl	801b9e8 <SUBGRF_GetOperatingMode>
 801add4:	4603      	mov	r3, r0
 801add6:	2b05      	cmp	r3, #5
 801add8:	f040 80c2 	bne.w	801af60 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801addc:	480d      	ldr	r0, [pc, #52]	; (801ae14 <RadioIrqProcess+0x2bc>)
 801adde:	f002 feed 	bl	801dbbc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ade2:	2000      	movs	r0, #0
 801ade4:	f000 ff4a 	bl	801bc7c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ade8:	4b09      	ldr	r3, [pc, #36]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	2b00      	cmp	r3, #0
 801adee:	f000 80b7 	beq.w	801af60 <RadioIrqProcess+0x408>
 801adf2:	4b07      	ldr	r3, [pc, #28]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	68db      	ldr	r3, [r3, #12]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	f000 80b1 	beq.w	801af60 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801adfe:	4b04      	ldr	r3, [pc, #16]	; (801ae10 <RadioIrqProcess+0x2b8>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	68db      	ldr	r3, [r3, #12]
 801ae04:	4798      	blx	r3
        break;
 801ae06:	e0ab      	b.n	801af60 <RadioIrqProcess+0x408>
 801ae08:	200017f8 	.word	0x200017f8
 801ae0c:	20001854 	.word	0x20001854
 801ae10:	200017f4 	.word	0x200017f4
 801ae14:	2000186c 	.word	0x2000186c
 801ae18:	200016f4 	.word	0x200016f4
 801ae1c:	2000181c 	.word	0x2000181c
 801ae20:	10624dd3 	.word	0x10624dd3
 801ae24:	0801eea4 	.word	0x0801eea4
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801ae28:	4b54      	ldr	r3, [pc, #336]	; (801af7c <RadioIrqProcess+0x424>)
 801ae2a:	2201      	movs	r2, #1
 801ae2c:	2100      	movs	r1, #0
 801ae2e:	2002      	movs	r0, #2
 801ae30:	f003 f8ce 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801ae34:	4b52      	ldr	r3, [pc, #328]	; (801af80 <RadioIrqProcess+0x428>)
 801ae36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	f000 8093 	beq.w	801af64 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801ae3e:	4a51      	ldr	r2, [pc, #324]	; (801af84 <RadioIrqProcess+0x42c>)
 801ae40:	4b4f      	ldr	r3, [pc, #316]	; (801af80 <RadioIrqProcess+0x428>)
 801ae42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae44:	0c1b      	lsrs	r3, r3, #16
 801ae46:	b2db      	uxtb	r3, r3
 801ae48:	4619      	mov	r1, r3
 801ae4a:	f640 1003 	movw	r0, #2307	; 0x903
 801ae4e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801ae50:	4a4c      	ldr	r2, [pc, #304]	; (801af84 <RadioIrqProcess+0x42c>)
 801ae52:	4b4b      	ldr	r3, [pc, #300]	; (801af80 <RadioIrqProcess+0x428>)
 801ae54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae56:	0a1b      	lsrs	r3, r3, #8
 801ae58:	b2db      	uxtb	r3, r3
 801ae5a:	4619      	mov	r1, r3
 801ae5c:	f640 1004 	movw	r0, #2308	; 0x904
 801ae60:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801ae62:	4a48      	ldr	r2, [pc, #288]	; (801af84 <RadioIrqProcess+0x42c>)
 801ae64:	4b46      	ldr	r3, [pc, #280]	; (801af80 <RadioIrqProcess+0x428>)
 801ae66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae68:	b2db      	uxtb	r3, r3
 801ae6a:	4619      	mov	r1, r3
 801ae6c:	f640 1005 	movw	r0, #2309	; 0x905
 801ae70:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801ae72:	4c44      	ldr	r4, [pc, #272]	; (801af84 <RadioIrqProcess+0x42c>)
 801ae74:	4b44      	ldr	r3, [pc, #272]	; (801af88 <RadioIrqProcess+0x430>)
 801ae76:	f640 1002 	movw	r0, #2306	; 0x902
 801ae7a:	4798      	blx	r3
 801ae7c:	4603      	mov	r3, r0
 801ae7e:	f043 0301 	orr.w	r3, r3, #1
 801ae82:	b2db      	uxtb	r3, r3
 801ae84:	4619      	mov	r1, r3
 801ae86:	f640 1002 	movw	r0, #2306	; 0x902
 801ae8a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801ae8c:	4b3c      	ldr	r3, [pc, #240]	; (801af80 <RadioIrqProcess+0x428>)
 801ae8e:	2200      	movs	r2, #0
 801ae90:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ae92:	2300      	movs	r3, #0
 801ae94:	2200      	movs	r2, #0
 801ae96:	f240 2162 	movw	r1, #610	; 0x262
 801ae9a:	f240 2062 	movw	r0, #610	; 0x262
 801ae9e:	f001 f8c1 	bl	801c024 <SUBGRF_SetDioIrqParams>
        break;
 801aea2:	e05f      	b.n	801af64 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801aea4:	4b39      	ldr	r3, [pc, #228]	; (801af8c <RadioIrqProcess+0x434>)
 801aea6:	2201      	movs	r2, #1
 801aea8:	2100      	movs	r1, #0
 801aeaa:	2002      	movs	r0, #2
 801aeac:	f003 f890 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801aeb0:	f001 ff55 	bl	801cd5e <RFW_Is_Init>
 801aeb4:	4603      	mov	r3, r0
 801aeb6:	2b01      	cmp	r3, #1
 801aeb8:	d156      	bne.n	801af68 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801aeba:	f001 ff86 	bl	801cdca <RFW_ReceivePayload>
        break;
 801aebe:	e053      	b.n	801af68 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801aec0:	4b33      	ldr	r3, [pc, #204]	; (801af90 <RadioIrqProcess+0x438>)
 801aec2:	2201      	movs	r2, #1
 801aec4:	2100      	movs	r1, #0
 801aec6:	2002      	movs	r0, #2
 801aec8:	f003 f882 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801aecc:	e051      	b.n	801af72 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801aece:	4831      	ldr	r0, [pc, #196]	; (801af94 <RadioIrqProcess+0x43c>)
 801aed0:	f002 fe74 	bl	801dbbc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801aed4:	4b2a      	ldr	r3, [pc, #168]	; (801af80 <RadioIrqProcess+0x428>)
 801aed6:	785b      	ldrb	r3, [r3, #1]
 801aed8:	f083 0301 	eor.w	r3, r3, #1
 801aedc:	b2db      	uxtb	r3, r3
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d002      	beq.n	801aee8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801aee2:	2000      	movs	r0, #0
 801aee4:	f000 feca 	bl	801bc7c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801aee8:	4b2b      	ldr	r3, [pc, #172]	; (801af98 <RadioIrqProcess+0x440>)
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d03d      	beq.n	801af6c <RadioIrqProcess+0x414>
 801aef0:	4b29      	ldr	r3, [pc, #164]	; (801af98 <RadioIrqProcess+0x440>)
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	68db      	ldr	r3, [r3, #12]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d038      	beq.n	801af6c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801aefa:	4b27      	ldr	r3, [pc, #156]	; (801af98 <RadioIrqProcess+0x440>)
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	68db      	ldr	r3, [r3, #12]
 801af00:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801af02:	4b26      	ldr	r3, [pc, #152]	; (801af9c <RadioIrqProcess+0x444>)
 801af04:	2201      	movs	r2, #1
 801af06:	2100      	movs	r1, #0
 801af08:	2002      	movs	r0, #2
 801af0a:	f003 f861 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801af0e:	e02d      	b.n	801af6c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801af10:	4b23      	ldr	r3, [pc, #140]	; (801afa0 <RadioIrqProcess+0x448>)
 801af12:	2201      	movs	r2, #1
 801af14:	2100      	movs	r1, #0
 801af16:	2002      	movs	r0, #2
 801af18:	f003 f85a 	bl	801dfd0 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801af1c:	4b18      	ldr	r3, [pc, #96]	; (801af80 <RadioIrqProcess+0x428>)
 801af1e:	785b      	ldrb	r3, [r3, #1]
 801af20:	f083 0301 	eor.w	r3, r3, #1
 801af24:	b2db      	uxtb	r3, r3
 801af26:	2b00      	cmp	r3, #0
 801af28:	d002      	beq.n	801af30 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801af2a:	2000      	movs	r0, #0
 801af2c:	f000 fea6 	bl	801bc7c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801af30:	4b19      	ldr	r3, [pc, #100]	; (801af98 <RadioIrqProcess+0x440>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d01b      	beq.n	801af70 <RadioIrqProcess+0x418>
 801af38:	4b17      	ldr	r3, [pc, #92]	; (801af98 <RadioIrqProcess+0x440>)
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	691b      	ldr	r3, [r3, #16]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d016      	beq.n	801af70 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801af42:	4b15      	ldr	r3, [pc, #84]	; (801af98 <RadioIrqProcess+0x440>)
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	691b      	ldr	r3, [r3, #16]
 801af48:	4798      	blx	r3
        break;
 801af4a:	e011      	b.n	801af70 <RadioIrqProcess+0x418>
        break;
 801af4c:	bf00      	nop
 801af4e:	e010      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af50:	bf00      	nop
 801af52:	e00e      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af54:	bf00      	nop
 801af56:	e00c      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af58:	bf00      	nop
 801af5a:	e00a      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af5c:	bf00      	nop
 801af5e:	e008      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af60:	bf00      	nop
 801af62:	e006      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af64:	bf00      	nop
 801af66:	e004      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af68:	bf00      	nop
 801af6a:	e002      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af6c:	bf00      	nop
 801af6e:	e000      	b.n	801af72 <RadioIrqProcess+0x41a>
        break;
 801af70:	bf00      	nop
    }
}
 801af72:	bf00      	nop
 801af74:	3708      	adds	r7, #8
 801af76:	46bd      	mov	sp, r7
 801af78:	bdb0      	pop	{r4, r5, r7, pc}
 801af7a:	bf00      	nop
 801af7c:	0801eeb8 	.word	0x0801eeb8
 801af80:	200017f8 	.word	0x200017f8
 801af84:	0801a967 	.word	0x0801a967
 801af88:	0801a98b 	.word	0x0801a98b
 801af8c:	0801eec4 	.word	0x0801eec4
 801af90:	0801eed0 	.word	0x0801eed0
 801af94:	2000186c 	.word	0x2000186c
 801af98:	200017f4 	.word	0x200017f4
 801af9c:	0801eedc 	.word	0x0801eedc
 801afa0:	0801eee8 	.word	0x0801eee8

0801afa4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801afa8:	4b09      	ldr	r3, [pc, #36]	; (801afd0 <RadioTxPrbs+0x2c>)
 801afaa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801afae:	2101      	movs	r1, #1
 801afb0:	4618      	mov	r0, r3
 801afb2:	f001 fcdb 	bl	801c96c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801afb6:	4b07      	ldr	r3, [pc, #28]	; (801afd4 <RadioTxPrbs+0x30>)
 801afb8:	212d      	movs	r1, #45	; 0x2d
 801afba:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801afbe:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801afc0:	f000 ff1f 	bl	801be02 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801afc4:	4804      	ldr	r0, [pc, #16]	; (801afd8 <RadioTxPrbs+0x34>)
 801afc6:	f000 fe75 	bl	801bcb4 <SUBGRF_SetTx>
}
 801afca:	bf00      	nop
 801afcc:	bd80      	pop	{r7, pc}
 801afce:	bf00      	nop
 801afd0:	200017f8 	.word	0x200017f8
 801afd4:	0801a967 	.word	0x0801a967
 801afd8:	000fffff 	.word	0x000fffff

0801afdc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b084      	sub	sp, #16
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	4603      	mov	r3, r0
 801afe4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801afe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801afea:	4618      	mov	r0, r3
 801afec:	f001 fce6 	bl	801c9bc <SUBGRF_SetRfTxPower>
 801aff0:	4603      	mov	r3, r0
 801aff2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aff4:	210e      	movs	r1, #14
 801aff6:	f640 101f 	movw	r0, #2335	; 0x91f
 801affa:	f001 fbc3 	bl	801c784 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801affe:	7bfb      	ldrb	r3, [r7, #15]
 801b000:	2101      	movs	r1, #1
 801b002:	4618      	mov	r0, r3
 801b004:	f001 fcb2 	bl	801c96c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b008:	f000 fef2 	bl	801bdf0 <SUBGRF_SetTxContinuousWave>
}
 801b00c:	bf00      	nop
 801b00e:	3710      	adds	r7, #16
 801b010:	46bd      	mov	sp, r7
 801b012:	bd80      	pop	{r7, pc}

0801b014 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b014:	b480      	push	{r7}
 801b016:	b089      	sub	sp, #36	; 0x24
 801b018:	af00      	add	r7, sp, #0
 801b01a:	60f8      	str	r0, [r7, #12]
 801b01c:	60b9      	str	r1, [r7, #8]
 801b01e:	4613      	mov	r3, r2
 801b020:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b022:	2300      	movs	r3, #0
 801b024:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b026:	2300      	movs	r3, #0
 801b028:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b02a:	2300      	movs	r3, #0
 801b02c:	61bb      	str	r3, [r7, #24]
 801b02e:	e011      	b.n	801b054 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b030:	69bb      	ldr	r3, [r7, #24]
 801b032:	68ba      	ldr	r2, [r7, #8]
 801b034:	4413      	add	r3, r2
 801b036:	781a      	ldrb	r2, [r3, #0]
 801b038:	69bb      	ldr	r3, [r7, #24]
 801b03a:	68b9      	ldr	r1, [r7, #8]
 801b03c:	440b      	add	r3, r1
 801b03e:	43d2      	mvns	r2, r2
 801b040:	b2d2      	uxtb	r2, r2
 801b042:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b044:	69bb      	ldr	r3, [r7, #24]
 801b046:	68fa      	ldr	r2, [r7, #12]
 801b048:	4413      	add	r3, r2
 801b04a:	2200      	movs	r2, #0
 801b04c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b04e:	69bb      	ldr	r3, [r7, #24]
 801b050:	3301      	adds	r3, #1
 801b052:	61bb      	str	r3, [r7, #24]
 801b054:	79fb      	ldrb	r3, [r7, #7]
 801b056:	69ba      	ldr	r2, [r7, #24]
 801b058:	429a      	cmp	r2, r3
 801b05a:	dbe9      	blt.n	801b030 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b05c:	2300      	movs	r3, #0
 801b05e:	61bb      	str	r3, [r7, #24]
 801b060:	e049      	b.n	801b0f6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b062:	69bb      	ldr	r3, [r7, #24]
 801b064:	425a      	negs	r2, r3
 801b066:	f003 0307 	and.w	r3, r3, #7
 801b06a:	f002 0207 	and.w	r2, r2, #7
 801b06e:	bf58      	it	pl
 801b070:	4253      	negpl	r3, r2
 801b072:	b2db      	uxtb	r3, r3
 801b074:	f1c3 0307 	rsb	r3, r3, #7
 801b078:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b07a:	69bb      	ldr	r3, [r7, #24]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	da00      	bge.n	801b082 <payload_integration+0x6e>
 801b080:	3307      	adds	r3, #7
 801b082:	10db      	asrs	r3, r3, #3
 801b084:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b086:	69bb      	ldr	r3, [r7, #24]
 801b088:	3301      	adds	r3, #1
 801b08a:	425a      	negs	r2, r3
 801b08c:	f003 0307 	and.w	r3, r3, #7
 801b090:	f002 0207 	and.w	r2, r2, #7
 801b094:	bf58      	it	pl
 801b096:	4253      	negpl	r3, r2
 801b098:	b2db      	uxtb	r3, r3
 801b09a:	f1c3 0307 	rsb	r3, r3, #7
 801b09e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b0a0:	69bb      	ldr	r3, [r7, #24]
 801b0a2:	3301      	adds	r3, #1
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	da00      	bge.n	801b0aa <payload_integration+0x96>
 801b0a8:	3307      	adds	r3, #7
 801b0aa:	10db      	asrs	r3, r3, #3
 801b0ac:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b0ae:	7dbb      	ldrb	r3, [r7, #22]
 801b0b0:	68ba      	ldr	r2, [r7, #8]
 801b0b2:	4413      	add	r3, r2
 801b0b4:	781b      	ldrb	r3, [r3, #0]
 801b0b6:	461a      	mov	r2, r3
 801b0b8:	7dfb      	ldrb	r3, [r7, #23]
 801b0ba:	fa42 f303 	asr.w	r3, r2, r3
 801b0be:	b2db      	uxtb	r3, r3
 801b0c0:	f003 0301 	and.w	r3, r3, #1
 801b0c4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b0c6:	7ffa      	ldrb	r2, [r7, #31]
 801b0c8:	7cfb      	ldrb	r3, [r7, #19]
 801b0ca:	4053      	eors	r3, r2
 801b0cc:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b0ce:	7d3b      	ldrb	r3, [r7, #20]
 801b0d0:	68fa      	ldr	r2, [r7, #12]
 801b0d2:	4413      	add	r3, r2
 801b0d4:	781b      	ldrb	r3, [r3, #0]
 801b0d6:	b25a      	sxtb	r2, r3
 801b0d8:	7ff9      	ldrb	r1, [r7, #31]
 801b0da:	7d7b      	ldrb	r3, [r7, #21]
 801b0dc:	fa01 f303 	lsl.w	r3, r1, r3
 801b0e0:	b25b      	sxtb	r3, r3
 801b0e2:	4313      	orrs	r3, r2
 801b0e4:	b259      	sxtb	r1, r3
 801b0e6:	7d3b      	ldrb	r3, [r7, #20]
 801b0e8:	68fa      	ldr	r2, [r7, #12]
 801b0ea:	4413      	add	r3, r2
 801b0ec:	b2ca      	uxtb	r2, r1
 801b0ee:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b0f0:	69bb      	ldr	r3, [r7, #24]
 801b0f2:	3301      	adds	r3, #1
 801b0f4:	61bb      	str	r3, [r7, #24]
 801b0f6:	79fb      	ldrb	r3, [r7, #7]
 801b0f8:	00db      	lsls	r3, r3, #3
 801b0fa:	69ba      	ldr	r2, [r7, #24]
 801b0fc:	429a      	cmp	r2, r3
 801b0fe:	dbb0      	blt.n	801b062 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b100:	7ffb      	ldrb	r3, [r7, #31]
 801b102:	01db      	lsls	r3, r3, #7
 801b104:	b25a      	sxtb	r2, r3
 801b106:	7ffb      	ldrb	r3, [r7, #31]
 801b108:	019b      	lsls	r3, r3, #6
 801b10a:	b25b      	sxtb	r3, r3
 801b10c:	4313      	orrs	r3, r2
 801b10e:	b25b      	sxtb	r3, r3
 801b110:	7ffa      	ldrb	r2, [r7, #31]
 801b112:	2a00      	cmp	r2, #0
 801b114:	d101      	bne.n	801b11a <payload_integration+0x106>
 801b116:	2220      	movs	r2, #32
 801b118:	e000      	b.n	801b11c <payload_integration+0x108>
 801b11a:	2200      	movs	r2, #0
 801b11c:	4313      	orrs	r3, r2
 801b11e:	b259      	sxtb	r1, r3
 801b120:	79fb      	ldrb	r3, [r7, #7]
 801b122:	68fa      	ldr	r2, [r7, #12]
 801b124:	4413      	add	r3, r2
 801b126:	b2ca      	uxtb	r2, r1
 801b128:	701a      	strb	r2, [r3, #0]
}
 801b12a:	bf00      	nop
 801b12c:	3724      	adds	r7, #36	; 0x24
 801b12e:	46bd      	mov	sp, r7
 801b130:	bc80      	pop	{r7}
 801b132:	4770      	bx	lr

0801b134 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b134:	b580      	push	{r7, lr}
 801b136:	b08c      	sub	sp, #48	; 0x30
 801b138:	af00      	add	r7, sp, #0
 801b13a:	60b9      	str	r1, [r7, #8]
 801b13c:	607a      	str	r2, [r7, #4]
 801b13e:	603b      	str	r3, [r7, #0]
 801b140:	4603      	mov	r3, r0
 801b142:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b144:	2300      	movs	r3, #0
 801b146:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b148:	2300      	movs	r3, #0
 801b14a:	623b      	str	r3, [r7, #32]
 801b14c:	2300      	movs	r3, #0
 801b14e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b150:	f001 fdff 	bl	801cd52 <RFW_DeInit>

    if( rxContinuous != 0 )
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d001      	beq.n	801b15e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b15a:	2300      	movs	r3, #0
 801b15c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	2b00      	cmp	r3, #0
 801b162:	bf14      	ite	ne
 801b164:	2301      	movne	r3, #1
 801b166:	2300      	moveq	r3, #0
 801b168:	b2da      	uxtb	r2, r3
 801b16a:	4ba3      	ldr	r3, [pc, #652]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b16c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b16e:	7bfb      	ldrb	r3, [r7, #15]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d003      	beq.n	801b17c <RadioSetRxGenericConfig+0x48>
 801b174:	2b01      	cmp	r3, #1
 801b176:	f000 80dc 	beq.w	801b332 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b17a:	e194      	b.n	801b4a6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b17c:	68bb      	ldr	r3, [r7, #8]
 801b17e:	689b      	ldr	r3, [r3, #8]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d003      	beq.n	801b18c <RadioSetRxGenericConfig+0x58>
 801b184:	68bb      	ldr	r3, [r7, #8]
 801b186:	68db      	ldr	r3, [r3, #12]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d102      	bne.n	801b192 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b18c:	f04f 33ff 	mov.w	r3, #4294967295
 801b190:	e18a      	b.n	801b4a8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b192:	68bb      	ldr	r3, [r7, #8]
 801b194:	7f9b      	ldrb	r3, [r3, #30]
 801b196:	2b08      	cmp	r3, #8
 801b198:	d902      	bls.n	801b1a0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b19a:	f04f 33ff 	mov.w	r3, #4294967295
 801b19e:	e183      	b.n	801b4a8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	6919      	ldr	r1, [r3, #16]
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	7f9b      	ldrb	r3, [r3, #30]
 801b1a8:	b29a      	uxth	r2, r3
 801b1aa:	f107 0320 	add.w	r3, r7, #32
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f001 fec2 	bl	801cf38 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	bf14      	ite	ne
 801b1bc:	2301      	movne	r3, #1
 801b1be:	2300      	moveq	r3, #0
 801b1c0:	b2db      	uxtb	r3, r3
 801b1c2:	4618      	mov	r0, r3
 801b1c4:	f000 fe26 	bl	801be14 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b1c8:	4b8b      	ldr	r3, [pc, #556]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b1d0:	68bb      	ldr	r3, [r7, #8]
 801b1d2:	689b      	ldr	r3, [r3, #8]
 801b1d4:	4a88      	ldr	r2, [pc, #544]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b1d6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b1d8:	68bb      	ldr	r3, [r7, #8]
 801b1da:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b1de:	4b86      	ldr	r3, [pc, #536]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b1e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b1e4:	68bb      	ldr	r3, [r7, #8]
 801b1e6:	685b      	ldr	r3, [r3, #4]
 801b1e8:	4618      	mov	r0, r3
 801b1ea:	f001 fce5 	bl	801cbb8 <SUBGRF_GetFskBandwidthRegValue>
 801b1ee:	4603      	mov	r3, r0
 801b1f0:	461a      	mov	r2, r3
 801b1f2:	4b81      	ldr	r3, [pc, #516]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b1f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b1f8:	4b7f      	ldr	r3, [pc, #508]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b1fa:	2200      	movs	r2, #0
 801b1fc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b1fe:	68bb      	ldr	r3, [r7, #8]
 801b200:	68db      	ldr	r3, [r3, #12]
 801b202:	b29b      	uxth	r3, r3
 801b204:	00db      	lsls	r3, r3, #3
 801b206:	b29a      	uxth	r2, r3
 801b208:	4b7b      	ldr	r3, [pc, #492]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b20a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b20c:	68bb      	ldr	r3, [r7, #8]
 801b20e:	7fda      	ldrb	r2, [r3, #31]
 801b210:	4b79      	ldr	r3, [pc, #484]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b212:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b214:	68bb      	ldr	r3, [r7, #8]
 801b216:	7f9b      	ldrb	r3, [r3, #30]
 801b218:	00db      	lsls	r3, r3, #3
 801b21a:	b2da      	uxtb	r2, r3
 801b21c:	4b76      	ldr	r3, [pc, #472]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b21e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b226:	4b74      	ldr	r3, [pc, #464]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b228:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b22a:	68bb      	ldr	r3, [r7, #8]
 801b22c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b230:	2b00      	cmp	r3, #0
 801b232:	d105      	bne.n	801b240 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b234:	68bb      	ldr	r3, [r7, #8]
 801b236:	695b      	ldr	r3, [r3, #20]
 801b238:	b2da      	uxtb	r2, r3
 801b23a:	4b6f      	ldr	r3, [pc, #444]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b23c:	759a      	strb	r2, [r3, #22]
 801b23e:	e00b      	b.n	801b258 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b240:	68bb      	ldr	r3, [r7, #8]
 801b242:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b246:	2b02      	cmp	r3, #2
 801b248:	d103      	bne.n	801b252 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b24a:	4b6b      	ldr	r3, [pc, #428]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b24c:	22ff      	movs	r2, #255	; 0xff
 801b24e:	759a      	strb	r2, [r3, #22]
 801b250:	e002      	b.n	801b258 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b252:	4b69      	ldr	r3, [pc, #420]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b254:	22ff      	movs	r2, #255	; 0xff
 801b256:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b25e:	2b02      	cmp	r3, #2
 801b260:	d004      	beq.n	801b26c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b262:	68bb      	ldr	r3, [r7, #8]
 801b264:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b268:	2b02      	cmp	r3, #2
 801b26a:	d12d      	bne.n	801b2c8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b272:	2bf1      	cmp	r3, #241	; 0xf1
 801b274:	d00c      	beq.n	801b290 <RadioSetRxGenericConfig+0x15c>
 801b276:	68bb      	ldr	r3, [r7, #8]
 801b278:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b27c:	2bf2      	cmp	r3, #242	; 0xf2
 801b27e:	d007      	beq.n	801b290 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b280:	68bb      	ldr	r3, [r7, #8]
 801b282:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b286:	2b01      	cmp	r3, #1
 801b288:	d002      	beq.n	801b290 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b28a:	f04f 33ff 	mov.w	r3, #4294967295
 801b28e:	e10b      	b.n	801b4a8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b290:	2300      	movs	r3, #0
 801b292:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b294:	68bb      	ldr	r3, [r7, #8]
 801b296:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b298:	4b58      	ldr	r3, [pc, #352]	; (801b3fc <RadioSetRxGenericConfig+0x2c8>)
 801b29a:	6819      	ldr	r1, [r3, #0]
 801b29c:	f107 0314 	add.w	r3, r7, #20
 801b2a0:	4a57      	ldr	r2, [pc, #348]	; (801b400 <RadioSetRxGenericConfig+0x2cc>)
 801b2a2:	4618      	mov	r0, r3
 801b2a4:	f001 fd48 	bl	801cd38 <RFW_Init>
 801b2a8:	4603      	mov	r3, r0
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d002      	beq.n	801b2b4 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b2ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b2b2:	e0f9      	b.n	801b4a8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b2b4:	4b50      	ldr	r3, [pc, #320]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b2ba:	4b4f      	ldr	r3, [pc, #316]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b2bc:	2201      	movs	r2, #1
 801b2be:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b2c0:	4b4d      	ldr	r3, [pc, #308]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	755a      	strb	r2, [r3, #21]
        {
 801b2c6:	e00e      	b.n	801b2e6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b2c8:	68bb      	ldr	r3, [r7, #8]
 801b2ca:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b2ce:	4b4a      	ldr	r3, [pc, #296]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b2d0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b2d2:	68bb      	ldr	r3, [r7, #8]
 801b2d4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b2d8:	4b47      	ldr	r3, [pc, #284]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b2da:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b2dc:	68bb      	ldr	r3, [r7, #8]
 801b2de:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b2e2:	4b45      	ldr	r3, [pc, #276]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b2e4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b2e6:	f7ff fa3c 	bl	801a762 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b2ea:	2000      	movs	r0, #0
 801b2ec:	f7fe fbd0 	bl	8019a90 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b2f0:	4844      	ldr	r0, [pc, #272]	; (801b404 <RadioSetRxGenericConfig+0x2d0>)
 801b2f2:	f001 f82d 	bl	801c350 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b2f6:	4844      	ldr	r0, [pc, #272]	; (801b408 <RadioSetRxGenericConfig+0x2d4>)
 801b2f8:	f001 f8fc 	bl	801c4f4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b2fc:	f107 0320 	add.w	r3, r7, #32
 801b300:	4618      	mov	r0, r3
 801b302:	f000 fbc0 	bl	801ba86 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	8b9b      	ldrh	r3, [r3, #28]
 801b30a:	4618      	mov	r0, r3
 801b30c:	f000 fc0a 	bl	801bb24 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b310:	68bb      	ldr	r3, [r7, #8]
 801b312:	8b1b      	ldrh	r3, [r3, #24]
 801b314:	4618      	mov	r0, r3
 801b316:	f000 fbe5 	bl	801bae4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b31a:	683b      	ldr	r3, [r7, #0]
 801b31c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b320:	fb03 f202 	mul.w	r2, r3, r2
 801b324:	68bb      	ldr	r3, [r7, #8]
 801b326:	689b      	ldr	r3, [r3, #8]
 801b328:	fbb2 f3f3 	udiv	r3, r2, r3
 801b32c:	4a32      	ldr	r2, [pc, #200]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b32e:	6093      	str	r3, [r2, #8]
        break;
 801b330:	e0b9      	b.n	801b4a6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b332:	68bb      	ldr	r3, [r7, #8]
 801b334:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b336:	2b00      	cmp	r3, #0
 801b338:	d102      	bne.n	801b340 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b33a:	f04f 33ff 	mov.w	r3, #4294967295
 801b33e:	e0b3      	b.n	801b4a8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b346:	2b01      	cmp	r3, #1
 801b348:	d104      	bne.n	801b354 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b34a:	68bb      	ldr	r3, [r7, #8]
 801b34c:	695b      	ldr	r3, [r3, #20]
 801b34e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b352:	e002      	b.n	801b35a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b354:	23ff      	movs	r3, #255	; 0xff
 801b356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b35a:	68bb      	ldr	r3, [r7, #8]
 801b35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b35e:	2b00      	cmp	r3, #0
 801b360:	bf14      	ite	ne
 801b362:	2301      	movne	r3, #1
 801b364:	2300      	moveq	r3, #0
 801b366:	b2db      	uxtb	r3, r3
 801b368:	4618      	mov	r0, r3
 801b36a:	f000 fd53 	bl	801be14 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	b2db      	uxtb	r3, r3
 801b372:	4618      	mov	r0, r3
 801b374:	f000 fd5d 	bl	801be32 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b378:	4b1f      	ldr	r3, [pc, #124]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b37a:	2201      	movs	r2, #1
 801b37c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b386:	4b1c      	ldr	r3, [pc, #112]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b38c:	68bb      	ldr	r3, [r7, #8]
 801b38e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b392:	4b19      	ldr	r3, [pc, #100]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b398:	68bb      	ldr	r3, [r7, #8]
 801b39a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b39e:	4b16      	ldr	r3, [pc, #88]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b3a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b3a4:	68bb      	ldr	r3, [r7, #8]
 801b3a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b3aa:	2b02      	cmp	r3, #2
 801b3ac:	d010      	beq.n	801b3d0 <RadioSetRxGenericConfig+0x29c>
 801b3ae:	2b02      	cmp	r3, #2
 801b3b0:	dc2c      	bgt.n	801b40c <RadioSetRxGenericConfig+0x2d8>
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d002      	beq.n	801b3bc <RadioSetRxGenericConfig+0x288>
 801b3b6:	2b01      	cmp	r3, #1
 801b3b8:	d005      	beq.n	801b3c6 <RadioSetRxGenericConfig+0x292>
            break;
 801b3ba:	e027      	b.n	801b40c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b3bc:	4b0e      	ldr	r3, [pc, #56]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b3be:	2200      	movs	r2, #0
 801b3c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3c4:	e023      	b.n	801b40e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b3c6:	4b0c      	ldr	r3, [pc, #48]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b3c8:	2201      	movs	r2, #1
 801b3ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3ce:	e01e      	b.n	801b40e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b3d6:	2b0b      	cmp	r3, #11
 801b3d8:	d004      	beq.n	801b3e4 <RadioSetRxGenericConfig+0x2b0>
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b3e0:	2b0c      	cmp	r3, #12
 801b3e2:	d104      	bne.n	801b3ee <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b3e4:	4b04      	ldr	r3, [pc, #16]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b3e6:	2201      	movs	r2, #1
 801b3e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3ec:	e00f      	b.n	801b40e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b3ee:	4b02      	ldr	r3, [pc, #8]	; (801b3f8 <RadioSetRxGenericConfig+0x2c4>)
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b3f6:	e00a      	b.n	801b40e <RadioSetRxGenericConfig+0x2da>
 801b3f8:	200017f8 	.word	0x200017f8
 801b3fc:	200017f4 	.word	0x200017f4
 801b400:	2000186c 	.word	0x2000186c
 801b404:	20001830 	.word	0x20001830
 801b408:	20001806 	.word	0x20001806
            break;
 801b40c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b40e:	4b28      	ldr	r3, [pc, #160]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b410:	2201      	movs	r2, #1
 801b412:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b414:	68bb      	ldr	r3, [r7, #8]
 801b416:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b418:	4b25      	ldr	r3, [pc, #148]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b41a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b422:	4b23      	ldr	r3, [pc, #140]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b424:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b426:	4a22      	ldr	r2, [pc, #136]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b42c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b434:	4b1e      	ldr	r3, [pc, #120]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b436:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b43a:	68bb      	ldr	r3, [r7, #8]
 801b43c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b440:	4b1b      	ldr	r3, [pc, #108]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b446:	f7ff f98c 	bl	801a762 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b44a:	2001      	movs	r0, #1
 801b44c:	f7fe fb20 	bl	8019a90 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b450:	4818      	ldr	r0, [pc, #96]	; (801b4b4 <RadioSetRxGenericConfig+0x380>)
 801b452:	f000 ff7d 	bl	801c350 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b456:	4818      	ldr	r0, [pc, #96]	; (801b4b8 <RadioSetRxGenericConfig+0x384>)
 801b458:	f001 f84c 	bl	801c4f4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b45c:	4b14      	ldr	r3, [pc, #80]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b45e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b462:	2b01      	cmp	r3, #1
 801b464:	d10d      	bne.n	801b482 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b466:	f240 7036 	movw	r0, #1846	; 0x736
 801b46a:	f001 f99f 	bl	801c7ac <SUBGRF_ReadRegister>
 801b46e:	4603      	mov	r3, r0
 801b470:	f023 0304 	bic.w	r3, r3, #4
 801b474:	b2db      	uxtb	r3, r3
 801b476:	4619      	mov	r1, r3
 801b478:	f240 7036 	movw	r0, #1846	; 0x736
 801b47c:	f001 f982 	bl	801c784 <SUBGRF_WriteRegister>
 801b480:	e00c      	b.n	801b49c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b482:	f240 7036 	movw	r0, #1846	; 0x736
 801b486:	f001 f991 	bl	801c7ac <SUBGRF_ReadRegister>
 801b48a:	4603      	mov	r3, r0
 801b48c:	f043 0304 	orr.w	r3, r3, #4
 801b490:	b2db      	uxtb	r3, r3
 801b492:	4619      	mov	r1, r3
 801b494:	f240 7036 	movw	r0, #1846	; 0x736
 801b498:	f001 f974 	bl	801c784 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b49c:	4b04      	ldr	r3, [pc, #16]	; (801b4b0 <RadioSetRxGenericConfig+0x37c>)
 801b49e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4a2:	609a      	str	r2, [r3, #8]
        break;
 801b4a4:	bf00      	nop
    }
    return status;
 801b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	3730      	adds	r7, #48	; 0x30
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bd80      	pop	{r7, pc}
 801b4b0:	200017f8 	.word	0x200017f8
 801b4b4:	20001830 	.word	0x20001830
 801b4b8:	20001806 	.word	0x20001806

0801b4bc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b08e      	sub	sp, #56	; 0x38
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	60b9      	str	r1, [r7, #8]
 801b4c4:	607b      	str	r3, [r7, #4]
 801b4c6:	4603      	mov	r3, r0
 801b4c8:	73fb      	strb	r3, [r7, #15]
 801b4ca:	4613      	mov	r3, r2
 801b4cc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b4d2:	2300      	movs	r3, #0
 801b4d4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b4d6:	f001 fc3c 	bl	801cd52 <RFW_DeInit>
    switch( modem )
 801b4da:	7bfb      	ldrb	r3, [r7, #15]
 801b4dc:	2b03      	cmp	r3, #3
 801b4de:	f200 8204 	bhi.w	801b8ea <RadioSetTxGenericConfig+0x42e>
 801b4e2:	a201      	add	r2, pc, #4	; (adr r2, 801b4e8 <RadioSetTxGenericConfig+0x2c>)
 801b4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4e8:	0801b66d 	.word	0x0801b66d
 801b4ec:	0801b7b5 	.word	0x0801b7b5
 801b4f0:	0801b8ad 	.word	0x0801b8ad
 801b4f4:	0801b4f9 	.word	0x0801b4f9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801b4f8:	68bb      	ldr	r3, [r7, #8]
 801b4fa:	7c9b      	ldrb	r3, [r3, #18]
 801b4fc:	2b08      	cmp	r3, #8
 801b4fe:	d902      	bls.n	801b506 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801b500:	f04f 33ff 	mov.w	r3, #4294967295
 801b504:	e206      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801b506:	68bb      	ldr	r3, [r7, #8]
 801b508:	6899      	ldr	r1, [r3, #8]
 801b50a:	68bb      	ldr	r3, [r7, #8]
 801b50c:	7c9b      	ldrb	r3, [r3, #18]
 801b50e:	b29a      	uxth	r2, r3
 801b510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b514:	4618      	mov	r0, r3
 801b516:	f001 fd0f 	bl	801cf38 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801b51a:	68bb      	ldr	r3, [r7, #8]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d102      	bne.n	801b528 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801b522:	f04f 33ff 	mov.w	r3, #4294967295
 801b526:	e1f5      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801b528:	68bb      	ldr	r3, [r7, #8]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	f242 7210 	movw	r2, #10000	; 0x2710
 801b530:	4293      	cmp	r3, r2
 801b532:	d813      	bhi.n	801b55c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801b534:	2302      	movs	r3, #2
 801b536:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801b53a:	4b99      	ldr	r3, [pc, #612]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b53c:	2203      	movs	r2, #3
 801b53e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801b540:	4b97      	ldr	r3, [pc, #604]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b542:	2203      	movs	r2, #3
 801b544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b548:	68bb      	ldr	r3, [r7, #8]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	4a94      	ldr	r2, [pc, #592]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b54e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b550:	68bb      	ldr	r3, [r7, #8]
 801b552:	7cda      	ldrb	r2, [r3, #19]
 801b554:	4b92      	ldr	r3, [pc, #584]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b55a:	e017      	b.n	801b58c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801b55c:	2300      	movs	r3, #0
 801b55e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b562:	4b8f      	ldr	r3, [pc, #572]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b564:	2200      	movs	r2, #0
 801b566:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b568:	4b8d      	ldr	r3, [pc, #564]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b56a:	2200      	movs	r2, #0
 801b56c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b570:	68bb      	ldr	r3, [r7, #8]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	4a8a      	ldr	r2, [pc, #552]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b576:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b578:	68bb      	ldr	r3, [r7, #8]
 801b57a:	7cda      	ldrb	r2, [r3, #19]
 801b57c:	4b88      	ldr	r3, [pc, #544]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801b582:	68bb      	ldr	r3, [r7, #8]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	089b      	lsrs	r3, r3, #2
 801b588:	4a85      	ldr	r2, [pc, #532]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b58a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801b58c:	68bb      	ldr	r3, [r7, #8]
 801b58e:	685b      	ldr	r3, [r3, #4]
 801b590:	b29b      	uxth	r3, r3
 801b592:	00db      	lsls	r3, r3, #3
 801b594:	b29a      	uxth	r2, r3
 801b596:	4b82      	ldr	r3, [pc, #520]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b598:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b59a:	4b81      	ldr	r3, [pc, #516]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b59c:	2204      	movs	r2, #4
 801b59e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801b5a0:	68bb      	ldr	r3, [r7, #8]
 801b5a2:	7c9b      	ldrb	r3, [r3, #18]
 801b5a4:	00db      	lsls	r3, r3, #3
 801b5a6:	b2da      	uxtb	r2, r3
 801b5a8:	4b7d      	ldr	r3, [pc, #500]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b5aa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b5ac:	4b7c      	ldr	r3, [pc, #496]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b5b2:	68bb      	ldr	r3, [r7, #8]
 801b5b4:	7d9b      	ldrb	r3, [r3, #22]
 801b5b6:	2b02      	cmp	r3, #2
 801b5b8:	d003      	beq.n	801b5c2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b5ba:	68bb      	ldr	r3, [r7, #8]
 801b5bc:	7d1b      	ldrb	r3, [r3, #20]
 801b5be:	2b02      	cmp	r3, #2
 801b5c0:	d12b      	bne.n	801b61a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	7d5b      	ldrb	r3, [r3, #21]
 801b5c6:	2bf1      	cmp	r3, #241	; 0xf1
 801b5c8:	d00a      	beq.n	801b5e0 <RadioSetTxGenericConfig+0x124>
 801b5ca:	68bb      	ldr	r3, [r7, #8]
 801b5cc:	7d5b      	ldrb	r3, [r3, #21]
 801b5ce:	2bf2      	cmp	r3, #242	; 0xf2
 801b5d0:	d006      	beq.n	801b5e0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b5d2:	68bb      	ldr	r3, [r7, #8]
 801b5d4:	7d5b      	ldrb	r3, [r3, #21]
 801b5d6:	2b01      	cmp	r3, #1
 801b5d8:	d002      	beq.n	801b5e0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801b5da:	f04f 33ff 	mov.w	r3, #4294967295
 801b5de:	e199      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801b5e4:	2301      	movs	r3, #1
 801b5e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b5ea:	4b6e      	ldr	r3, [pc, #440]	; (801b7a4 <RadioSetTxGenericConfig+0x2e8>)
 801b5ec:	6819      	ldr	r1, [r3, #0]
 801b5ee:	f107 0320 	add.w	r3, r7, #32
 801b5f2:	4a6d      	ldr	r2, [pc, #436]	; (801b7a8 <RadioSetTxGenericConfig+0x2ec>)
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	f001 fb9f 	bl	801cd38 <RFW_Init>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d002      	beq.n	801b606 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801b600:	f04f 33ff 	mov.w	r3, #4294967295
 801b604:	e186      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b606:	4b66      	ldr	r3, [pc, #408]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b608:	2200      	movs	r2, #0
 801b60a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b60c:	4b64      	ldr	r3, [pc, #400]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b60e:	2201      	movs	r2, #1
 801b610:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b612:	4b63      	ldr	r3, [pc, #396]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b614:	2200      	movs	r2, #0
 801b616:	755a      	strb	r2, [r3, #21]
        {
 801b618:	e00b      	b.n	801b632 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801b61a:	68bb      	ldr	r3, [r7, #8]
 801b61c:	7d5a      	ldrb	r2, [r3, #21]
 801b61e:	4b60      	ldr	r3, [pc, #384]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b620:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801b622:	68bb      	ldr	r3, [r7, #8]
 801b624:	7d9a      	ldrb	r2, [r3, #22]
 801b626:	4b5e      	ldr	r3, [pc, #376]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b628:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801b62a:	68bb      	ldr	r3, [r7, #8]
 801b62c:	7d1a      	ldrb	r2, [r3, #20]
 801b62e:	4b5c      	ldr	r3, [pc, #368]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b630:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b632:	f7ff f896 	bl	801a762 <RadioStandby>
        RadioSetModem( radio_modem );
 801b636:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b63a:	4618      	mov	r0, r3
 801b63c:	f7fe fa28 	bl	8019a90 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b640:	485a      	ldr	r0, [pc, #360]	; (801b7ac <RadioSetTxGenericConfig+0x2f0>)
 801b642:	f000 fe85 	bl	801c350 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b646:	485a      	ldr	r0, [pc, #360]	; (801b7b0 <RadioSetTxGenericConfig+0x2f4>)
 801b648:	f000 ff54 	bl	801c4f4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b64c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b650:	4618      	mov	r0, r3
 801b652:	f000 fa18 	bl	801ba86 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	8a1b      	ldrh	r3, [r3, #16]
 801b65a:	4618      	mov	r0, r3
 801b65c:	f000 fa62 	bl	801bb24 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801b660:	68bb      	ldr	r3, [r7, #8]
 801b662:	899b      	ldrh	r3, [r3, #12]
 801b664:	4618      	mov	r0, r3
 801b666:	f000 fa3d 	bl	801bae4 <SUBGRF_SetCrcPolynomial>
        break;
 801b66a:	e13f      	b.n	801b8ec <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d102      	bne.n	801b67a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801b674:	f04f 33ff 	mov.w	r3, #4294967295
 801b678:	e14c      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	7c9b      	ldrb	r3, [r3, #18]
 801b67e:	2b08      	cmp	r3, #8
 801b680:	d902      	bls.n	801b688 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801b682:	f04f 33ff 	mov.w	r3, #4294967295
 801b686:	e145      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	6899      	ldr	r1, [r3, #8]
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	7c9b      	ldrb	r3, [r3, #18]
 801b690:	b29a      	uxth	r2, r3
 801b692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b696:	4618      	mov	r0, r3
 801b698:	f001 fc4e 	bl	801cf38 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b69c:	4b40      	ldr	r3, [pc, #256]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b69e:	2200      	movs	r2, #0
 801b6a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b6a4:	68bb      	ldr	r3, [r7, #8]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	4a3d      	ldr	r2, [pc, #244]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6aa:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b6ac:	68bb      	ldr	r3, [r7, #8]
 801b6ae:	7cda      	ldrb	r2, [r3, #19]
 801b6b0:	4b3b      	ldr	r3, [pc, #236]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	699b      	ldr	r3, [r3, #24]
 801b6ba:	4a39      	ldr	r2, [pc, #228]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6bc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b6be:	4b38      	ldr	r3, [pc, #224]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6c0:	2200      	movs	r2, #0
 801b6c2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b6c4:	68bb      	ldr	r3, [r7, #8]
 801b6c6:	685b      	ldr	r3, [r3, #4]
 801b6c8:	b29b      	uxth	r3, r3
 801b6ca:	00db      	lsls	r3, r3, #3
 801b6cc:	b29a      	uxth	r2, r3
 801b6ce:	4b34      	ldr	r3, [pc, #208]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6d0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b6d2:	4b33      	ldr	r3, [pc, #204]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6d4:	2204      	movs	r2, #4
 801b6d6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b6d8:	68bb      	ldr	r3, [r7, #8]
 801b6da:	7c9b      	ldrb	r3, [r3, #18]
 801b6dc:	00db      	lsls	r3, r3, #3
 801b6de:	b2da      	uxtb	r2, r3
 801b6e0:	4b2f      	ldr	r3, [pc, #188]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6e2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b6e4:	4b2e      	ldr	r3, [pc, #184]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	7d9b      	ldrb	r3, [r3, #22]
 801b6ee:	2b02      	cmp	r3, #2
 801b6f0:	d003      	beq.n	801b6fa <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	7d1b      	ldrb	r3, [r3, #20]
 801b6f6:	2b02      	cmp	r3, #2
 801b6f8:	d12a      	bne.n	801b750 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b6fa:	68bb      	ldr	r3, [r7, #8]
 801b6fc:	7d5b      	ldrb	r3, [r3, #21]
 801b6fe:	2bf1      	cmp	r3, #241	; 0xf1
 801b700:	d00a      	beq.n	801b718 <RadioSetTxGenericConfig+0x25c>
 801b702:	68bb      	ldr	r3, [r7, #8]
 801b704:	7d5b      	ldrb	r3, [r3, #21]
 801b706:	2bf2      	cmp	r3, #242	; 0xf2
 801b708:	d006      	beq.n	801b718 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	7d5b      	ldrb	r3, [r3, #21]
 801b70e:	2b01      	cmp	r3, #1
 801b710:	d002      	beq.n	801b718 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b712:	f04f 33ff 	mov.w	r3, #4294967295
 801b716:	e0fd      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b718:	2301      	movs	r3, #1
 801b71a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b720:	4b20      	ldr	r3, [pc, #128]	; (801b7a4 <RadioSetTxGenericConfig+0x2e8>)
 801b722:	6819      	ldr	r1, [r3, #0]
 801b724:	f107 0314 	add.w	r3, r7, #20
 801b728:	4a1f      	ldr	r2, [pc, #124]	; (801b7a8 <RadioSetTxGenericConfig+0x2ec>)
 801b72a:	4618      	mov	r0, r3
 801b72c:	f001 fb04 	bl	801cd38 <RFW_Init>
 801b730:	4603      	mov	r3, r0
 801b732:	2b00      	cmp	r3, #0
 801b734:	d002      	beq.n	801b73c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801b736:	f04f 33ff 	mov.w	r3, #4294967295
 801b73a:	e0eb      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b73c:	4b18      	ldr	r3, [pc, #96]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b73e:	2200      	movs	r2, #0
 801b740:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b742:	4b17      	ldr	r3, [pc, #92]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b744:	2201      	movs	r2, #1
 801b746:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b748:	4b15      	ldr	r3, [pc, #84]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b74a:	2200      	movs	r2, #0
 801b74c:	755a      	strb	r2, [r3, #21]
        {
 801b74e:	e00b      	b.n	801b768 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	7d5a      	ldrb	r2, [r3, #21]
 801b754:	4b12      	ldr	r3, [pc, #72]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b756:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b758:	68bb      	ldr	r3, [r7, #8]
 801b75a:	7d9a      	ldrb	r2, [r3, #22]
 801b75c:	4b10      	ldr	r3, [pc, #64]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b75e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	7d1a      	ldrb	r2, [r3, #20]
 801b764:	4b0e      	ldr	r3, [pc, #56]	; (801b7a0 <RadioSetTxGenericConfig+0x2e4>)
 801b766:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b768:	f7fe fffb 	bl	801a762 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b76c:	2000      	movs	r0, #0
 801b76e:	f7fe f98f 	bl	8019a90 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b772:	480e      	ldr	r0, [pc, #56]	; (801b7ac <RadioSetTxGenericConfig+0x2f0>)
 801b774:	f000 fdec 	bl	801c350 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b778:	480d      	ldr	r0, [pc, #52]	; (801b7b0 <RadioSetTxGenericConfig+0x2f4>)
 801b77a:	f000 febb 	bl	801c4f4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b77e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b782:	4618      	mov	r0, r3
 801b784:	f000 f97f 	bl	801ba86 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	8a1b      	ldrh	r3, [r3, #16]
 801b78c:	4618      	mov	r0, r3
 801b78e:	f000 f9c9 	bl	801bb24 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b792:	68bb      	ldr	r3, [r7, #8]
 801b794:	899b      	ldrh	r3, [r3, #12]
 801b796:	4618      	mov	r0, r3
 801b798:	f000 f9a4 	bl	801bae4 <SUBGRF_SetCrcPolynomial>
        break;
 801b79c:	e0a6      	b.n	801b8ec <RadioSetTxGenericConfig+0x430>
 801b79e:	bf00      	nop
 801b7a0:	200017f8 	.word	0x200017f8
 801b7a4:	200017f4 	.word	0x200017f4
 801b7a8:	20001854 	.word	0x20001854
 801b7ac:	20001830 	.word	0x20001830
 801b7b0:	20001806 	.word	0x20001806
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b7b4:	4b59      	ldr	r3, [pc, #356]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b7b6:	2201      	movs	r2, #1
 801b7b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	781a      	ldrb	r2, [r3, #0]
 801b7c0:	4b56      	ldr	r3, [pc, #344]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b7c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b7c6:	68bb      	ldr	r3, [r7, #8]
 801b7c8:	785a      	ldrb	r2, [r3, #1]
 801b7ca:	4b54      	ldr	r3, [pc, #336]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b7cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	789a      	ldrb	r2, [r3, #2]
 801b7d4:	4b51      	ldr	r3, [pc, #324]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b7d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	78db      	ldrb	r3, [r3, #3]
 801b7de:	2b02      	cmp	r3, #2
 801b7e0:	d010      	beq.n	801b804 <RadioSetTxGenericConfig+0x348>
 801b7e2:	2b02      	cmp	r3, #2
 801b7e4:	dc20      	bgt.n	801b828 <RadioSetTxGenericConfig+0x36c>
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d002      	beq.n	801b7f0 <RadioSetTxGenericConfig+0x334>
 801b7ea:	2b01      	cmp	r3, #1
 801b7ec:	d005      	beq.n	801b7fa <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801b7ee:	e01b      	b.n	801b828 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b7f0:	4b4a      	ldr	r3, [pc, #296]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b7f8:	e017      	b.n	801b82a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b7fa:	4b48      	ldr	r3, [pc, #288]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b7fc:	2201      	movs	r2, #1
 801b7fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b802:	e012      	b.n	801b82a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b804:	68bb      	ldr	r3, [r7, #8]
 801b806:	781b      	ldrb	r3, [r3, #0]
 801b808:	2b0b      	cmp	r3, #11
 801b80a:	d003      	beq.n	801b814 <RadioSetTxGenericConfig+0x358>
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	781b      	ldrb	r3, [r3, #0]
 801b810:	2b0c      	cmp	r3, #12
 801b812:	d104      	bne.n	801b81e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b814:	4b41      	ldr	r3, [pc, #260]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b816:	2201      	movs	r2, #1
 801b818:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b81c:	e005      	b.n	801b82a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b81e:	4b3f      	ldr	r3, [pc, #252]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b820:	2200      	movs	r2, #0
 801b822:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b826:	e000      	b.n	801b82a <RadioSetTxGenericConfig+0x36e>
            break;
 801b828:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b82a:	4b3c      	ldr	r3, [pc, #240]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b82c:	2201      	movs	r2, #1
 801b82e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b830:	68bb      	ldr	r3, [r7, #8]
 801b832:	889a      	ldrh	r2, [r3, #4]
 801b834:	4b39      	ldr	r3, [pc, #228]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b836:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b838:	68bb      	ldr	r3, [r7, #8]
 801b83a:	799a      	ldrb	r2, [r3, #6]
 801b83c:	4b37      	ldr	r3, [pc, #220]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b83e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	79da      	ldrb	r2, [r3, #7]
 801b844:	4b35      	ldr	r3, [pc, #212]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b846:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	7a1a      	ldrb	r2, [r3, #8]
 801b84e:	4b33      	ldr	r3, [pc, #204]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801b854:	f7fe ff85 	bl	801a762 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b858:	2001      	movs	r0, #1
 801b85a:	f7fe f919 	bl	8019a90 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b85e:	4830      	ldr	r0, [pc, #192]	; (801b920 <RadioSetTxGenericConfig+0x464>)
 801b860:	f000 fd76 	bl	801c350 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b864:	482f      	ldr	r0, [pc, #188]	; (801b924 <RadioSetTxGenericConfig+0x468>)
 801b866:	f000 fe45 	bl	801c4f4 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b86a:	4b2c      	ldr	r3, [pc, #176]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b86c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b870:	2b06      	cmp	r3, #6
 801b872:	d10d      	bne.n	801b890 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b874:	f640 0089 	movw	r0, #2185	; 0x889
 801b878:	f000 ff98 	bl	801c7ac <SUBGRF_ReadRegister>
 801b87c:	4603      	mov	r3, r0
 801b87e:	f023 0304 	bic.w	r3, r3, #4
 801b882:	b2db      	uxtb	r3, r3
 801b884:	4619      	mov	r1, r3
 801b886:	f640 0089 	movw	r0, #2185	; 0x889
 801b88a:	f000 ff7b 	bl	801c784 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801b88e:	e02d      	b.n	801b8ec <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b890:	f640 0089 	movw	r0, #2185	; 0x889
 801b894:	f000 ff8a 	bl	801c7ac <SUBGRF_ReadRegister>
 801b898:	4603      	mov	r3, r0
 801b89a:	f043 0304 	orr.w	r3, r3, #4
 801b89e:	b2db      	uxtb	r3, r3
 801b8a0:	4619      	mov	r1, r3
 801b8a2:	f640 0089 	movw	r0, #2185	; 0x889
 801b8a6:	f000 ff6d 	bl	801c784 <SUBGRF_WriteRegister>
        break;
 801b8aa:	e01f      	b.n	801b8ec <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d004      	beq.n	801b8be <RadioSetTxGenericConfig+0x402>
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b8bc:	d902      	bls.n	801b8c4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b8be:	f04f 33ff 	mov.w	r3, #4294967295
 801b8c2:	e027      	b.n	801b914 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b8c4:	2003      	movs	r0, #3
 801b8c6:	f7fe f8e3 	bl	8019a90 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b8ca:	4b14      	ldr	r3, [pc, #80]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b8cc:	2202      	movs	r2, #2
 801b8ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b8d2:	68bb      	ldr	r3, [r7, #8]
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	4a11      	ldr	r2, [pc, #68]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b8d8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b8da:	4b10      	ldr	r3, [pc, #64]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b8dc:	2216      	movs	r2, #22
 801b8de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b8e2:	480f      	ldr	r0, [pc, #60]	; (801b920 <RadioSetTxGenericConfig+0x464>)
 801b8e4:	f000 fd34 	bl	801c350 <SUBGRF_SetModulationParams>
        break;
 801b8e8:	e000      	b.n	801b8ec <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b8ea:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b8ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f001 f863 	bl	801c9bc <SUBGRF_SetRfTxPower>
 801b8f6:	4603      	mov	r3, r0
 801b8f8:	461a      	mov	r2, r3
 801b8fa:	4b08      	ldr	r3, [pc, #32]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b8fc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b900:	4b06      	ldr	r3, [pc, #24]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b902:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b906:	4618      	mov	r0, r3
 801b908:	f001 fa37 	bl	801cd7a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b90c:	4a03      	ldr	r2, [pc, #12]	; (801b91c <RadioSetTxGenericConfig+0x460>)
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	6053      	str	r3, [r2, #4]
    return 0;
 801b912:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b914:	4618      	mov	r0, r3
 801b916:	3738      	adds	r7, #56	; 0x38
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}
 801b91c:	200017f8 	.word	0x200017f8
 801b920:	20001830 	.word	0x20001830
 801b924:	20001806 	.word	0x20001806

0801b928 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801b928:	b480      	push	{r7}
 801b92a:	b085      	sub	sp, #20
 801b92c:	af00      	add	r7, sp, #0
 801b92e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b930:	2301      	movs	r3, #1
 801b932:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801b934:	7bfb      	ldrb	r3, [r7, #15]
}
 801b936:	4618      	mov	r0, r3
 801b938:	3714      	adds	r7, #20
 801b93a:	46bd      	mov	sp, r7
 801b93c:	bc80      	pop	{r7}
 801b93e:	4770      	bx	lr

0801b940 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801b940:	b480      	push	{r7}
 801b942:	b083      	sub	sp, #12
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
 801b948:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b94a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801b94c:	4618      	mov	r0, r3
 801b94e:	370c      	adds	r7, #12
 801b950:	46bd      	mov	sp, r7
 801b952:	bc80      	pop	{r7}
 801b954:	4770      	bx	lr
	...

0801b958 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b958:	b580      	push	{r7, lr}
 801b95a:	b084      	sub	sp, #16
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	2b00      	cmp	r3, #0
 801b964:	d002      	beq.n	801b96c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b966:	4a1d      	ldr	r2, [pc, #116]	; (801b9dc <SUBGRF_Init+0x84>)
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b96c:	f7e6 fde8 	bl	8002540 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b970:	2002      	movs	r0, #2
 801b972:	f001 f8ff 	bl	801cb74 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b976:	4b1a      	ldr	r3, [pc, #104]	; (801b9e0 <SUBGRF_Init+0x88>)
 801b978:	2200      	movs	r2, #0
 801b97a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b97c:	2000      	movs	r0, #0
 801b97e:	f000 f97d 	bl	801bc7c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b982:	f7f1 ff1f 	bl	800d7c4 <RBI_IsTCXO>
 801b986:	4603      	mov	r3, r0
 801b988:	2b01      	cmp	r3, #1
 801b98a:	d10e      	bne.n	801b9aa <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b98c:	2140      	movs	r1, #64	; 0x40
 801b98e:	2001      	movs	r0, #1
 801b990:	f000 fb82 	bl	801c098 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b994:	2100      	movs	r1, #0
 801b996:	f640 1011 	movw	r0, #2321	; 0x911
 801b99a:	f000 fef3 	bl	801c784 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b99e:	237f      	movs	r3, #127	; 0x7f
 801b9a0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b9a2:	7b38      	ldrb	r0, [r7, #12]
 801b9a4:	f000 fa8b 	bl	801bebe <SUBGRF_Calibrate>
 801b9a8:	e009      	b.n	801b9be <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b9aa:	2120      	movs	r1, #32
 801b9ac:	f640 1011 	movw	r0, #2321	; 0x911
 801b9b0:	f000 fee8 	bl	801c784 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b9b4:	2120      	movs	r1, #32
 801b9b6:	f640 1012 	movw	r0, #2322	; 0x912
 801b9ba:	f000 fee3 	bl	801c784 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b9be:	210e      	movs	r1, #14
 801b9c0:	f640 101f 	movw	r0, #2335	; 0x91f
 801b9c4:	f000 fede 	bl	801c784 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b9c8:	f7f1 fee0 	bl	800d78c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b9cc:	4b05      	ldr	r3, [pc, #20]	; (801b9e4 <SUBGRF_Init+0x8c>)
 801b9ce:	2201      	movs	r2, #1
 801b9d0:	701a      	strb	r2, [r3, #0]
}
 801b9d2:	bf00      	nop
 801b9d4:	3710      	adds	r7, #16
 801b9d6:	46bd      	mov	sp, r7
 801b9d8:	bd80      	pop	{r7, pc}
 801b9da:	bf00      	nop
 801b9dc:	20001890 	.word	0x20001890
 801b9e0:	2000188c 	.word	0x2000188c
 801b9e4:	20001884 	.word	0x20001884

0801b9e8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b9e8:	b480      	push	{r7}
 801b9ea:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b9ec:	4b02      	ldr	r3, [pc, #8]	; (801b9f8 <SUBGRF_GetOperatingMode+0x10>)
 801b9ee:	781b      	ldrb	r3, [r3, #0]
}
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	bc80      	pop	{r7}
 801b9f6:	4770      	bx	lr
 801b9f8:	20001884 	.word	0x20001884

0801b9fc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b082      	sub	sp, #8
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]
 801ba04:	460b      	mov	r3, r1
 801ba06:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ba08:	78fb      	ldrb	r3, [r7, #3]
 801ba0a:	461a      	mov	r2, r3
 801ba0c:	6879      	ldr	r1, [r7, #4]
 801ba0e:	2000      	movs	r0, #0
 801ba10:	f000 ff24 	bl	801c85c <SUBGRF_WriteBuffer>
}
 801ba14:	bf00      	nop
 801ba16:	3708      	adds	r7, #8
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bd80      	pop	{r7, pc}

0801ba1c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ba1c:	b580      	push	{r7, lr}
 801ba1e:	b086      	sub	sp, #24
 801ba20:	af00      	add	r7, sp, #0
 801ba22:	60f8      	str	r0, [r7, #12]
 801ba24:	60b9      	str	r1, [r7, #8]
 801ba26:	4613      	mov	r3, r2
 801ba28:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801ba2e:	f107 0317 	add.w	r3, r7, #23
 801ba32:	4619      	mov	r1, r3
 801ba34:	68b8      	ldr	r0, [r7, #8]
 801ba36:	f000 fe27 	bl	801c688 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801ba3a:	68bb      	ldr	r3, [r7, #8]
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	79fa      	ldrb	r2, [r7, #7]
 801ba40:	429a      	cmp	r2, r3
 801ba42:	d201      	bcs.n	801ba48 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801ba44:	2301      	movs	r3, #1
 801ba46:	e007      	b.n	801ba58 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801ba48:	7df8      	ldrb	r0, [r7, #23]
 801ba4a:	68bb      	ldr	r3, [r7, #8]
 801ba4c:	781b      	ldrb	r3, [r3, #0]
 801ba4e:	461a      	mov	r2, r3
 801ba50:	68f9      	ldr	r1, [r7, #12]
 801ba52:	f000 ff25 	bl	801c8a0 <SUBGRF_ReadBuffer>

    return 0;
 801ba56:	2300      	movs	r3, #0
}
 801ba58:	4618      	mov	r0, r3
 801ba5a:	3718      	adds	r7, #24
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	bd80      	pop	{r7, pc}

0801ba60 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b084      	sub	sp, #16
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	60f8      	str	r0, [r7, #12]
 801ba68:	460b      	mov	r3, r1
 801ba6a:	607a      	str	r2, [r7, #4]
 801ba6c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801ba6e:	7afb      	ldrb	r3, [r7, #11]
 801ba70:	4619      	mov	r1, r3
 801ba72:	68f8      	ldr	r0, [r7, #12]
 801ba74:	f7ff ffc2 	bl	801b9fc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801ba78:	6878      	ldr	r0, [r7, #4]
 801ba7a:	f000 f91b 	bl	801bcb4 <SUBGRF_SetTx>
}
 801ba7e:	bf00      	nop
 801ba80:	3710      	adds	r7, #16
 801ba82:	46bd      	mov	sp, r7
 801ba84:	bd80      	pop	{r7, pc}

0801ba86 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801ba86:	b580      	push	{r7, lr}
 801ba88:	b082      	sub	sp, #8
 801ba8a:	af00      	add	r7, sp, #0
 801ba8c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801ba8e:	2208      	movs	r2, #8
 801ba90:	6879      	ldr	r1, [r7, #4]
 801ba92:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801ba96:	f000 fe9d 	bl	801c7d4 <SUBGRF_WriteRegisters>
    return 0;
 801ba9a:	2300      	movs	r3, #0
}
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	3708      	adds	r7, #8
 801baa0:	46bd      	mov	sp, r7
 801baa2:	bd80      	pop	{r7, pc}

0801baa4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801baa4:	b580      	push	{r7, lr}
 801baa6:	b084      	sub	sp, #16
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	4603      	mov	r3, r0
 801baac:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801baae:	88fb      	ldrh	r3, [r7, #6]
 801bab0:	0a1b      	lsrs	r3, r3, #8
 801bab2:	b29b      	uxth	r3, r3
 801bab4:	b2db      	uxtb	r3, r3
 801bab6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801bab8:	88fb      	ldrh	r3, [r7, #6]
 801baba:	b2db      	uxtb	r3, r3
 801babc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801babe:	f000 fb6f 	bl	801c1a0 <SUBGRF_GetPacketType>
 801bac2:	4603      	mov	r3, r0
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d108      	bne.n	801bada <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801bac8:	f107 030c 	add.w	r3, r7, #12
 801bacc:	2202      	movs	r2, #2
 801bace:	4619      	mov	r1, r3
 801bad0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801bad4:	f000 fe7e 	bl	801c7d4 <SUBGRF_WriteRegisters>
            break;
 801bad8:	e000      	b.n	801badc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801bada:	bf00      	nop
    }
}
 801badc:	bf00      	nop
 801bade:	3710      	adds	r7, #16
 801bae0:	46bd      	mov	sp, r7
 801bae2:	bd80      	pop	{r7, pc}

0801bae4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801bae4:	b580      	push	{r7, lr}
 801bae6:	b084      	sub	sp, #16
 801bae8:	af00      	add	r7, sp, #0
 801baea:	4603      	mov	r3, r0
 801baec:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801baee:	88fb      	ldrh	r3, [r7, #6]
 801baf0:	0a1b      	lsrs	r3, r3, #8
 801baf2:	b29b      	uxth	r3, r3
 801baf4:	b2db      	uxtb	r3, r3
 801baf6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801baf8:	88fb      	ldrh	r3, [r7, #6]
 801bafa:	b2db      	uxtb	r3, r3
 801bafc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801bafe:	f000 fb4f 	bl	801c1a0 <SUBGRF_GetPacketType>
 801bb02:	4603      	mov	r3, r0
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d108      	bne.n	801bb1a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801bb08:	f107 030c 	add.w	r3, r7, #12
 801bb0c:	2202      	movs	r2, #2
 801bb0e:	4619      	mov	r1, r3
 801bb10:	f240 60be 	movw	r0, #1726	; 0x6be
 801bb14:	f000 fe5e 	bl	801c7d4 <SUBGRF_WriteRegisters>
            break;
 801bb18:	e000      	b.n	801bb1c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801bb1a:	bf00      	nop
    }
}
 801bb1c:	bf00      	nop
 801bb1e:	3710      	adds	r7, #16
 801bb20:	46bd      	mov	sp, r7
 801bb22:	bd80      	pop	{r7, pc}

0801bb24 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801bb24:	b580      	push	{r7, lr}
 801bb26:	b084      	sub	sp, #16
 801bb28:	af00      	add	r7, sp, #0
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801bb2e:	2300      	movs	r3, #0
 801bb30:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801bb32:	f000 fb35 	bl	801c1a0 <SUBGRF_GetPacketType>
 801bb36:	4603      	mov	r3, r0
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d121      	bne.n	801bb80 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801bb3c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bb40:	f000 fe34 	bl	801c7ac <SUBGRF_ReadRegister>
 801bb44:	4603      	mov	r3, r0
 801bb46:	f023 0301 	bic.w	r3, r3, #1
 801bb4a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801bb4c:	88fb      	ldrh	r3, [r7, #6]
 801bb4e:	0a1b      	lsrs	r3, r3, #8
 801bb50:	b29b      	uxth	r3, r3
 801bb52:	b25b      	sxtb	r3, r3
 801bb54:	f003 0301 	and.w	r3, r3, #1
 801bb58:	b25a      	sxtb	r2, r3
 801bb5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bb5e:	4313      	orrs	r3, r2
 801bb60:	b25b      	sxtb	r3, r3
 801bb62:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801bb64:	7bfb      	ldrb	r3, [r7, #15]
 801bb66:	4619      	mov	r1, r3
 801bb68:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bb6c:	f000 fe0a 	bl	801c784 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801bb70:	88fb      	ldrh	r3, [r7, #6]
 801bb72:	b2db      	uxtb	r3, r3
 801bb74:	4619      	mov	r1, r3
 801bb76:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801bb7a:	f000 fe03 	bl	801c784 <SUBGRF_WriteRegister>
            break;
 801bb7e:	e000      	b.n	801bb82 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801bb80:	bf00      	nop
    }
}
 801bb82:	bf00      	nop
 801bb84:	3710      	adds	r7, #16
 801bb86:	46bd      	mov	sp, r7
 801bb88:	bd80      	pop	{r7, pc}

0801bb8a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801bb8a:	b580      	push	{r7, lr}
 801bb8c:	b082      	sub	sp, #8
 801bb8e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801bb90:	2300      	movs	r3, #0
 801bb92:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801bb94:	2300      	movs	r3, #0
 801bb96:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801bb98:	2300      	movs	r3, #0
 801bb9a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801bb9c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bba0:	f000 fe04 	bl	801c7ac <SUBGRF_ReadRegister>
 801bba4:	4603      	mov	r3, r0
 801bba6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801bba8:	79fb      	ldrb	r3, [r7, #7]
 801bbaa:	f023 0301 	bic.w	r3, r3, #1
 801bbae:	b2db      	uxtb	r3, r3
 801bbb0:	4619      	mov	r1, r3
 801bbb2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bbb6:	f000 fde5 	bl	801c784 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801bbba:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bbbe:	f000 fdf5 	bl	801c7ac <SUBGRF_ReadRegister>
 801bbc2:	4603      	mov	r3, r0
 801bbc4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801bbc6:	79bb      	ldrb	r3, [r7, #6]
 801bbc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bbcc:	b2db      	uxtb	r3, r3
 801bbce:	4619      	mov	r1, r3
 801bbd0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bbd4:	f000 fdd6 	bl	801c784 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801bbd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801bbdc:	f000 f88a 	bl	801bcf4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801bbe0:	463b      	mov	r3, r7
 801bbe2:	2204      	movs	r2, #4
 801bbe4:	4619      	mov	r1, r3
 801bbe6:	f640 0019 	movw	r0, #2073	; 0x819
 801bbea:	f000 fe15 	bl	801c818 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801bbee:	2000      	movs	r0, #0
 801bbf0:	f000 f844 	bl	801bc7c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801bbf4:	79fb      	ldrb	r3, [r7, #7]
 801bbf6:	4619      	mov	r1, r3
 801bbf8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bbfc:	f000 fdc2 	bl	801c784 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801bc00:	79bb      	ldrb	r3, [r7, #6]
 801bc02:	4619      	mov	r1, r3
 801bc04:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bc08:	f000 fdbc 	bl	801c784 <SUBGRF_WriteRegister>

    return number;
 801bc0c:	683b      	ldr	r3, [r7, #0]
}
 801bc0e:	4618      	mov	r0, r3
 801bc10:	3708      	adds	r7, #8
 801bc12:	46bd      	mov	sp, r7
 801bc14:	bd80      	pop	{r7, pc}
	...

0801bc18 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b084      	sub	sp, #16
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801bc20:	2000      	movs	r0, #0
 801bc22:	f7f1 fdba 	bl	800d79a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bc26:	2002      	movs	r0, #2
 801bc28:	f000 ffa4 	bl	801cb74 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bc2c:	793b      	ldrb	r3, [r7, #4]
 801bc2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bc32:	b2db      	uxtb	r3, r3
 801bc34:	009b      	lsls	r3, r3, #2
 801bc36:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bc38:	793b      	ldrb	r3, [r7, #4]
 801bc3a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bc3e:	b2db      	uxtb	r3, r3
 801bc40:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bc42:	b25b      	sxtb	r3, r3
 801bc44:	4313      	orrs	r3, r2
 801bc46:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801bc48:	793b      	ldrb	r3, [r7, #4]
 801bc4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bc4e:	b2db      	uxtb	r3, r3
 801bc50:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bc52:	4313      	orrs	r3, r2
 801bc54:	b25b      	sxtb	r3, r3
 801bc56:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bc58:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801bc5a:	f107 030f 	add.w	r3, r7, #15
 801bc5e:	2201      	movs	r2, #1
 801bc60:	4619      	mov	r1, r3
 801bc62:	2084      	movs	r0, #132	; 0x84
 801bc64:	f000 fe3e 	bl	801c8e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801bc68:	4b03      	ldr	r3, [pc, #12]	; (801bc78 <SUBGRF_SetSleep+0x60>)
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	701a      	strb	r2, [r3, #0]
}
 801bc6e:	bf00      	nop
 801bc70:	3710      	adds	r7, #16
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}
 801bc76:	bf00      	nop
 801bc78:	20001884 	.word	0x20001884

0801bc7c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b082      	sub	sp, #8
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	4603      	mov	r3, r0
 801bc84:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801bc86:	1dfb      	adds	r3, r7, #7
 801bc88:	2201      	movs	r2, #1
 801bc8a:	4619      	mov	r1, r3
 801bc8c:	2080      	movs	r0, #128	; 0x80
 801bc8e:	f000 fe29 	bl	801c8e4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801bc92:	79fb      	ldrb	r3, [r7, #7]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d103      	bne.n	801bca0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801bc98:	4b05      	ldr	r3, [pc, #20]	; (801bcb0 <SUBGRF_SetStandby+0x34>)
 801bc9a:	2201      	movs	r2, #1
 801bc9c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801bc9e:	e002      	b.n	801bca6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801bca0:	4b03      	ldr	r3, [pc, #12]	; (801bcb0 <SUBGRF_SetStandby+0x34>)
 801bca2:	2202      	movs	r2, #2
 801bca4:	701a      	strb	r2, [r3, #0]
}
 801bca6:	bf00      	nop
 801bca8:	3708      	adds	r7, #8
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	bd80      	pop	{r7, pc}
 801bcae:	bf00      	nop
 801bcb0:	20001884 	.word	0x20001884

0801bcb4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b084      	sub	sp, #16
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801bcbc:	4b0c      	ldr	r3, [pc, #48]	; (801bcf0 <SUBGRF_SetTx+0x3c>)
 801bcbe:	2204      	movs	r2, #4
 801bcc0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	0c1b      	lsrs	r3, r3, #16
 801bcc6:	b2db      	uxtb	r3, r3
 801bcc8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	0a1b      	lsrs	r3, r3, #8
 801bcce:	b2db      	uxtb	r3, r3
 801bcd0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	b2db      	uxtb	r3, r3
 801bcd6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801bcd8:	f107 030c 	add.w	r3, r7, #12
 801bcdc:	2203      	movs	r2, #3
 801bcde:	4619      	mov	r1, r3
 801bce0:	2083      	movs	r0, #131	; 0x83
 801bce2:	f000 fdff 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801bce6:	bf00      	nop
 801bce8:	3710      	adds	r7, #16
 801bcea:	46bd      	mov	sp, r7
 801bcec:	bd80      	pop	{r7, pc}
 801bcee:	bf00      	nop
 801bcf0:	20001884 	.word	0x20001884

0801bcf4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801bcf4:	b580      	push	{r7, lr}
 801bcf6:	b084      	sub	sp, #16
 801bcf8:	af00      	add	r7, sp, #0
 801bcfa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bcfc:	4b0c      	ldr	r3, [pc, #48]	; (801bd30 <SUBGRF_SetRx+0x3c>)
 801bcfe:	2205      	movs	r2, #5
 801bd00:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	0c1b      	lsrs	r3, r3, #16
 801bd06:	b2db      	uxtb	r3, r3
 801bd08:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	0a1b      	lsrs	r3, r3, #8
 801bd0e:	b2db      	uxtb	r3, r3
 801bd10:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	b2db      	uxtb	r3, r3
 801bd16:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bd18:	f107 030c 	add.w	r3, r7, #12
 801bd1c:	2203      	movs	r2, #3
 801bd1e:	4619      	mov	r1, r3
 801bd20:	2082      	movs	r0, #130	; 0x82
 801bd22:	f000 fddf 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801bd26:	bf00      	nop
 801bd28:	3710      	adds	r7, #16
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	bd80      	pop	{r7, pc}
 801bd2e:	bf00      	nop
 801bd30:	20001884 	.word	0x20001884

0801bd34 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b084      	sub	sp, #16
 801bd38:	af00      	add	r7, sp, #0
 801bd3a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801bd3c:	4b0e      	ldr	r3, [pc, #56]	; (801bd78 <SUBGRF_SetRxBoosted+0x44>)
 801bd3e:	2205      	movs	r2, #5
 801bd40:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801bd42:	2197      	movs	r1, #151	; 0x97
 801bd44:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801bd48:	f000 fd1c 	bl	801c784 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	0c1b      	lsrs	r3, r3, #16
 801bd50:	b2db      	uxtb	r3, r3
 801bd52:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	0a1b      	lsrs	r3, r3, #8
 801bd58:	b2db      	uxtb	r3, r3
 801bd5a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	b2db      	uxtb	r3, r3
 801bd60:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801bd62:	f107 030c 	add.w	r3, r7, #12
 801bd66:	2203      	movs	r2, #3
 801bd68:	4619      	mov	r1, r3
 801bd6a:	2082      	movs	r0, #130	; 0x82
 801bd6c:	f000 fdba 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801bd70:	bf00      	nop
 801bd72:	3710      	adds	r7, #16
 801bd74:	46bd      	mov	sp, r7
 801bd76:	bd80      	pop	{r7, pc}
 801bd78:	20001884 	.word	0x20001884

0801bd7c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b084      	sub	sp, #16
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
 801bd84:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	0c1b      	lsrs	r3, r3, #16
 801bd8a:	b2db      	uxtb	r3, r3
 801bd8c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	0a1b      	lsrs	r3, r3, #8
 801bd92:	b2db      	uxtb	r3, r3
 801bd94:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	b2db      	uxtb	r3, r3
 801bd9a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801bd9c:	683b      	ldr	r3, [r7, #0]
 801bd9e:	0c1b      	lsrs	r3, r3, #16
 801bda0:	b2db      	uxtb	r3, r3
 801bda2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801bda4:	683b      	ldr	r3, [r7, #0]
 801bda6:	0a1b      	lsrs	r3, r3, #8
 801bda8:	b2db      	uxtb	r3, r3
 801bdaa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801bdac:	683b      	ldr	r3, [r7, #0]
 801bdae:	b2db      	uxtb	r3, r3
 801bdb0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801bdb2:	f107 0308 	add.w	r3, r7, #8
 801bdb6:	2206      	movs	r2, #6
 801bdb8:	4619      	mov	r1, r3
 801bdba:	2094      	movs	r0, #148	; 0x94
 801bdbc:	f000 fd92 	bl	801c8e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801bdc0:	4b03      	ldr	r3, [pc, #12]	; (801bdd0 <SUBGRF_SetRxDutyCycle+0x54>)
 801bdc2:	2206      	movs	r2, #6
 801bdc4:	701a      	strb	r2, [r3, #0]
}
 801bdc6:	bf00      	nop
 801bdc8:	3710      	adds	r7, #16
 801bdca:	46bd      	mov	sp, r7
 801bdcc:	bd80      	pop	{r7, pc}
 801bdce:	bf00      	nop
 801bdd0:	20001884 	.word	0x20001884

0801bdd4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801bdd8:	2200      	movs	r2, #0
 801bdda:	2100      	movs	r1, #0
 801bddc:	20c5      	movs	r0, #197	; 0xc5
 801bdde:	f000 fd81 	bl	801c8e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801bde2:	4b02      	ldr	r3, [pc, #8]	; (801bdec <SUBGRF_SetCad+0x18>)
 801bde4:	2207      	movs	r2, #7
 801bde6:	701a      	strb	r2, [r3, #0]
}
 801bde8:	bf00      	nop
 801bdea:	bd80      	pop	{r7, pc}
 801bdec:	20001884 	.word	0x20001884

0801bdf0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801bdf0:	b580      	push	{r7, lr}
 801bdf2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801bdf4:	2200      	movs	r2, #0
 801bdf6:	2100      	movs	r1, #0
 801bdf8:	20d1      	movs	r0, #209	; 0xd1
 801bdfa:	f000 fd73 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801bdfe:	bf00      	nop
 801be00:	bd80      	pop	{r7, pc}

0801be02 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801be02:	b580      	push	{r7, lr}
 801be04:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801be06:	2200      	movs	r2, #0
 801be08:	2100      	movs	r1, #0
 801be0a:	20d2      	movs	r0, #210	; 0xd2
 801be0c:	f000 fd6a 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801be10:	bf00      	nop
 801be12:	bd80      	pop	{r7, pc}

0801be14 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b082      	sub	sp, #8
 801be18:	af00      	add	r7, sp, #0
 801be1a:	4603      	mov	r3, r0
 801be1c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801be1e:	1dfb      	adds	r3, r7, #7
 801be20:	2201      	movs	r2, #1
 801be22:	4619      	mov	r1, r3
 801be24:	209f      	movs	r0, #159	; 0x9f
 801be26:	f000 fd5d 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801be2a:	bf00      	nop
 801be2c:	3708      	adds	r7, #8
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}

0801be32 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801be32:	b580      	push	{r7, lr}
 801be34:	b084      	sub	sp, #16
 801be36:	af00      	add	r7, sp, #0
 801be38:	4603      	mov	r3, r0
 801be3a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801be3c:	1dfb      	adds	r3, r7, #7
 801be3e:	2201      	movs	r2, #1
 801be40:	4619      	mov	r1, r3
 801be42:	20a0      	movs	r0, #160	; 0xa0
 801be44:	f000 fd4e 	bl	801c8e4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801be48:	79fb      	ldrb	r3, [r7, #7]
 801be4a:	2b3f      	cmp	r3, #63	; 0x3f
 801be4c:	d91c      	bls.n	801be88 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801be4e:	79fb      	ldrb	r3, [r7, #7]
 801be50:	085b      	lsrs	r3, r3, #1
 801be52:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801be54:	2300      	movs	r3, #0
 801be56:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801be58:	2300      	movs	r3, #0
 801be5a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801be5c:	e005      	b.n	801be6a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801be5e:	7bfb      	ldrb	r3, [r7, #15]
 801be60:	089b      	lsrs	r3, r3, #2
 801be62:	73fb      	strb	r3, [r7, #15]
            exp++;
 801be64:	7bbb      	ldrb	r3, [r7, #14]
 801be66:	3301      	adds	r3, #1
 801be68:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801be6a:	7bfb      	ldrb	r3, [r7, #15]
 801be6c:	2b1f      	cmp	r3, #31
 801be6e:	d8f6      	bhi.n	801be5e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801be70:	7bfb      	ldrb	r3, [r7, #15]
 801be72:	00db      	lsls	r3, r3, #3
 801be74:	b2da      	uxtb	r2, r3
 801be76:	7bbb      	ldrb	r3, [r7, #14]
 801be78:	4413      	add	r3, r2
 801be7a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801be7c:	7b7b      	ldrb	r3, [r7, #13]
 801be7e:	4619      	mov	r1, r3
 801be80:	f240 7006 	movw	r0, #1798	; 0x706
 801be84:	f000 fc7e 	bl	801c784 <SUBGRF_WriteRegister>
    }
}
 801be88:	bf00      	nop
 801be8a:	3710      	adds	r7, #16
 801be8c:	46bd      	mov	sp, r7
 801be8e:	bd80      	pop	{r7, pc}

0801be90 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b082      	sub	sp, #8
 801be94:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801be96:	f7f1 fc9c 	bl	800d7d2 <RBI_IsDCDC>
 801be9a:	4603      	mov	r3, r0
 801be9c:	2b01      	cmp	r3, #1
 801be9e:	d102      	bne.n	801bea6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801bea0:	2301      	movs	r3, #1
 801bea2:	71fb      	strb	r3, [r7, #7]
 801bea4:	e001      	b.n	801beaa <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801bea6:	2300      	movs	r3, #0
 801bea8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801beaa:	1dfb      	adds	r3, r7, #7
 801beac:	2201      	movs	r2, #1
 801beae:	4619      	mov	r1, r3
 801beb0:	2096      	movs	r0, #150	; 0x96
 801beb2:	f000 fd17 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801beb6:	bf00      	nop
 801beb8:	3708      	adds	r7, #8
 801beba:	46bd      	mov	sp, r7
 801bebc:	bd80      	pop	{r7, pc}

0801bebe <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801bebe:	b580      	push	{r7, lr}
 801bec0:	b084      	sub	sp, #16
 801bec2:	af00      	add	r7, sp, #0
 801bec4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bec6:	793b      	ldrb	r3, [r7, #4]
 801bec8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801becc:	b2db      	uxtb	r3, r3
 801bece:	019b      	lsls	r3, r3, #6
 801bed0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801bed2:	793b      	ldrb	r3, [r7, #4]
 801bed4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801bed8:	b2db      	uxtb	r3, r3
 801beda:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bedc:	b25b      	sxtb	r3, r3
 801bede:	4313      	orrs	r3, r2
 801bee0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801bee2:	793b      	ldrb	r3, [r7, #4]
 801bee4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801bee8:	b2db      	uxtb	r3, r3
 801beea:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801beec:	b25b      	sxtb	r3, r3
 801beee:	4313      	orrs	r3, r2
 801bef0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801bef2:	793b      	ldrb	r3, [r7, #4]
 801bef4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801bef8:	b2db      	uxtb	r3, r3
 801befa:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801befc:	b25b      	sxtb	r3, r3
 801befe:	4313      	orrs	r3, r2
 801bf00:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801bf02:	793b      	ldrb	r3, [r7, #4]
 801bf04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bf08:	b2db      	uxtb	r3, r3
 801bf0a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801bf0c:	b25b      	sxtb	r3, r3
 801bf0e:	4313      	orrs	r3, r2
 801bf10:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801bf12:	793b      	ldrb	r3, [r7, #4]
 801bf14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bf18:	b2db      	uxtb	r3, r3
 801bf1a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801bf1c:	b25b      	sxtb	r3, r3
 801bf1e:	4313      	orrs	r3, r2
 801bf20:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801bf22:	793b      	ldrb	r3, [r7, #4]
 801bf24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801bf2c:	4313      	orrs	r3, r2
 801bf2e:	b25b      	sxtb	r3, r3
 801bf30:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bf32:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801bf34:	f107 030f 	add.w	r3, r7, #15
 801bf38:	2201      	movs	r2, #1
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	2089      	movs	r0, #137	; 0x89
 801bf3e:	f000 fcd1 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801bf42:	bf00      	nop
 801bf44:	3710      	adds	r7, #16
 801bf46:	46bd      	mov	sp, r7
 801bf48:	bd80      	pop	{r7, pc}
	...

0801bf4c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b084      	sub	sp, #16
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	4a1d      	ldr	r2, [pc, #116]	; (801bfcc <SUBGRF_CalibrateImage+0x80>)
 801bf58:	4293      	cmp	r3, r2
 801bf5a:	d904      	bls.n	801bf66 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801bf5c:	23e1      	movs	r3, #225	; 0xe1
 801bf5e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801bf60:	23e9      	movs	r3, #233	; 0xe9
 801bf62:	737b      	strb	r3, [r7, #13]
 801bf64:	e027      	b.n	801bfb6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	4a19      	ldr	r2, [pc, #100]	; (801bfd0 <SUBGRF_CalibrateImage+0x84>)
 801bf6a:	4293      	cmp	r3, r2
 801bf6c:	d904      	bls.n	801bf78 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801bf6e:	23d7      	movs	r3, #215	; 0xd7
 801bf70:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801bf72:	23db      	movs	r3, #219	; 0xdb
 801bf74:	737b      	strb	r3, [r7, #13]
 801bf76:	e01e      	b.n	801bfb6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	4a16      	ldr	r2, [pc, #88]	; (801bfd4 <SUBGRF_CalibrateImage+0x88>)
 801bf7c:	4293      	cmp	r3, r2
 801bf7e:	d904      	bls.n	801bf8a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801bf80:	23c1      	movs	r3, #193	; 0xc1
 801bf82:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801bf84:	23c5      	movs	r3, #197	; 0xc5
 801bf86:	737b      	strb	r3, [r7, #13]
 801bf88:	e015      	b.n	801bfb6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801bf8a:	687b      	ldr	r3, [r7, #4]
 801bf8c:	4a12      	ldr	r2, [pc, #72]	; (801bfd8 <SUBGRF_CalibrateImage+0x8c>)
 801bf8e:	4293      	cmp	r3, r2
 801bf90:	d904      	bls.n	801bf9c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801bf92:	2375      	movs	r3, #117	; 0x75
 801bf94:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801bf96:	2381      	movs	r3, #129	; 0x81
 801bf98:	737b      	strb	r3, [r7, #13]
 801bf9a:	e00c      	b.n	801bfb6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	4a0f      	ldr	r2, [pc, #60]	; (801bfdc <SUBGRF_CalibrateImage+0x90>)
 801bfa0:	4293      	cmp	r3, r2
 801bfa2:	d904      	bls.n	801bfae <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801bfa4:	236b      	movs	r3, #107	; 0x6b
 801bfa6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801bfa8:	236f      	movs	r3, #111	; 0x6f
 801bfaa:	737b      	strb	r3, [r7, #13]
 801bfac:	e003      	b.n	801bfb6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801bfae:	2329      	movs	r3, #41	; 0x29
 801bfb0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801bfb2:	232b      	movs	r3, #43	; 0x2b
 801bfb4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801bfb6:	f107 030c 	add.w	r3, r7, #12
 801bfba:	2202      	movs	r2, #2
 801bfbc:	4619      	mov	r1, r3
 801bfbe:	2098      	movs	r0, #152	; 0x98
 801bfc0:	f000 fc90 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801bfc4:	bf00      	nop
 801bfc6:	3710      	adds	r7, #16
 801bfc8:	46bd      	mov	sp, r7
 801bfca:	bd80      	pop	{r7, pc}
 801bfcc:	35a4e900 	.word	0x35a4e900
 801bfd0:	32a9f880 	.word	0x32a9f880
 801bfd4:	2de54480 	.word	0x2de54480
 801bfd8:	1b6b0b00 	.word	0x1b6b0b00
 801bfdc:	1954fc40 	.word	0x1954fc40

0801bfe0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801bfe0:	b590      	push	{r4, r7, lr}
 801bfe2:	b085      	sub	sp, #20
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	4608      	mov	r0, r1
 801bfea:	4611      	mov	r1, r2
 801bfec:	461a      	mov	r2, r3
 801bfee:	4623      	mov	r3, r4
 801bff0:	71fb      	strb	r3, [r7, #7]
 801bff2:	4603      	mov	r3, r0
 801bff4:	71bb      	strb	r3, [r7, #6]
 801bff6:	460b      	mov	r3, r1
 801bff8:	717b      	strb	r3, [r7, #5]
 801bffa:	4613      	mov	r3, r2
 801bffc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801bffe:	79fb      	ldrb	r3, [r7, #7]
 801c000:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c002:	79bb      	ldrb	r3, [r7, #6]
 801c004:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c006:	797b      	ldrb	r3, [r7, #5]
 801c008:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c00a:	793b      	ldrb	r3, [r7, #4]
 801c00c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c00e:	f107 030c 	add.w	r3, r7, #12
 801c012:	2204      	movs	r2, #4
 801c014:	4619      	mov	r1, r3
 801c016:	2095      	movs	r0, #149	; 0x95
 801c018:	f000 fc64 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c01c:	bf00      	nop
 801c01e:	3714      	adds	r7, #20
 801c020:	46bd      	mov	sp, r7
 801c022:	bd90      	pop	{r4, r7, pc}

0801c024 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c024:	b590      	push	{r4, r7, lr}
 801c026:	b085      	sub	sp, #20
 801c028:	af00      	add	r7, sp, #0
 801c02a:	4604      	mov	r4, r0
 801c02c:	4608      	mov	r0, r1
 801c02e:	4611      	mov	r1, r2
 801c030:	461a      	mov	r2, r3
 801c032:	4623      	mov	r3, r4
 801c034:	80fb      	strh	r3, [r7, #6]
 801c036:	4603      	mov	r3, r0
 801c038:	80bb      	strh	r3, [r7, #4]
 801c03a:	460b      	mov	r3, r1
 801c03c:	807b      	strh	r3, [r7, #2]
 801c03e:	4613      	mov	r3, r2
 801c040:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c042:	88fb      	ldrh	r3, [r7, #6]
 801c044:	0a1b      	lsrs	r3, r3, #8
 801c046:	b29b      	uxth	r3, r3
 801c048:	b2db      	uxtb	r3, r3
 801c04a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c04c:	88fb      	ldrh	r3, [r7, #6]
 801c04e:	b2db      	uxtb	r3, r3
 801c050:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c052:	88bb      	ldrh	r3, [r7, #4]
 801c054:	0a1b      	lsrs	r3, r3, #8
 801c056:	b29b      	uxth	r3, r3
 801c058:	b2db      	uxtb	r3, r3
 801c05a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c05c:	88bb      	ldrh	r3, [r7, #4]
 801c05e:	b2db      	uxtb	r3, r3
 801c060:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c062:	887b      	ldrh	r3, [r7, #2]
 801c064:	0a1b      	lsrs	r3, r3, #8
 801c066:	b29b      	uxth	r3, r3
 801c068:	b2db      	uxtb	r3, r3
 801c06a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c06c:	887b      	ldrh	r3, [r7, #2]
 801c06e:	b2db      	uxtb	r3, r3
 801c070:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c072:	883b      	ldrh	r3, [r7, #0]
 801c074:	0a1b      	lsrs	r3, r3, #8
 801c076:	b29b      	uxth	r3, r3
 801c078:	b2db      	uxtb	r3, r3
 801c07a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c07c:	883b      	ldrh	r3, [r7, #0]
 801c07e:	b2db      	uxtb	r3, r3
 801c080:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c082:	f107 0308 	add.w	r3, r7, #8
 801c086:	2208      	movs	r2, #8
 801c088:	4619      	mov	r1, r3
 801c08a:	2008      	movs	r0, #8
 801c08c:	f000 fc2a 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c090:	bf00      	nop
 801c092:	3714      	adds	r7, #20
 801c094:	46bd      	mov	sp, r7
 801c096:	bd90      	pop	{r4, r7, pc}

0801c098 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c098:	b580      	push	{r7, lr}
 801c09a:	b084      	sub	sp, #16
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	4603      	mov	r3, r0
 801c0a0:	6039      	str	r1, [r7, #0]
 801c0a2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c0a4:	79fb      	ldrb	r3, [r7, #7]
 801c0a6:	f003 0307 	and.w	r3, r3, #7
 801c0aa:	b2db      	uxtb	r3, r3
 801c0ac:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	0c1b      	lsrs	r3, r3, #16
 801c0b2:	b2db      	uxtb	r3, r3
 801c0b4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c0b6:	683b      	ldr	r3, [r7, #0]
 801c0b8:	0a1b      	lsrs	r3, r3, #8
 801c0ba:	b2db      	uxtb	r3, r3
 801c0bc:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c0be:	683b      	ldr	r3, [r7, #0]
 801c0c0:	b2db      	uxtb	r3, r3
 801c0c2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c0c4:	f107 030c 	add.w	r3, r7, #12
 801c0c8:	2204      	movs	r2, #4
 801c0ca:	4619      	mov	r1, r3
 801c0cc:	2097      	movs	r0, #151	; 0x97
 801c0ce:	f000 fc09 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c0d2:	bf00      	nop
 801c0d4:	3710      	adds	r7, #16
 801c0d6:	46bd      	mov	sp, r7
 801c0d8:	bd80      	pop	{r7, pc}
	...

0801c0dc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c0dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c0e0:	b084      	sub	sp, #16
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c0e6:	2300      	movs	r3, #0
 801c0e8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c0ea:	4b1d      	ldr	r3, [pc, #116]	; (801c160 <SUBGRF_SetRfFrequency+0x84>)
 801c0ec:	781b      	ldrb	r3, [r3, #0]
 801c0ee:	f083 0301 	eor.w	r3, r3, #1
 801c0f2:	b2db      	uxtb	r3, r3
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d005      	beq.n	801c104 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	f7ff ff27 	bl	801bf4c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c0fe:	4b18      	ldr	r3, [pc, #96]	; (801c160 <SUBGRF_SetRfFrequency+0x84>)
 801c100:	2201      	movs	r2, #1
 801c102:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	2200      	movs	r2, #0
 801c108:	461c      	mov	r4, r3
 801c10a:	4615      	mov	r5, r2
 801c10c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c110:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c114:	4a13      	ldr	r2, [pc, #76]	; (801c164 <SUBGRF_SetRfFrequency+0x88>)
 801c116:	f04f 0300 	mov.w	r3, #0
 801c11a:	4640      	mov	r0, r8
 801c11c:	4649      	mov	r1, r9
 801c11e:	f7e4 fe35 	bl	8000d8c <__aeabi_uldivmod>
 801c122:	4602      	mov	r2, r0
 801c124:	460b      	mov	r3, r1
 801c126:	4613      	mov	r3, r2
 801c128:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	0e1b      	lsrs	r3, r3, #24
 801c12e:	b2db      	uxtb	r3, r3
 801c130:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	0c1b      	lsrs	r3, r3, #16
 801c136:	b2db      	uxtb	r3, r3
 801c138:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	0a1b      	lsrs	r3, r3, #8
 801c13e:	b2db      	uxtb	r3, r3
 801c140:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	b2db      	uxtb	r3, r3
 801c146:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c148:	f107 0308 	add.w	r3, r7, #8
 801c14c:	2204      	movs	r2, #4
 801c14e:	4619      	mov	r1, r3
 801c150:	2086      	movs	r0, #134	; 0x86
 801c152:	f000 fbc7 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c156:	bf00      	nop
 801c158:	3710      	adds	r7, #16
 801c15a:	46bd      	mov	sp, r7
 801c15c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c160:	2000188c 	.word	0x2000188c
 801c164:	01e84800 	.word	0x01e84800

0801c168 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b082      	sub	sp, #8
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	4603      	mov	r3, r0
 801c170:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c172:	79fa      	ldrb	r2, [r7, #7]
 801c174:	4b09      	ldr	r3, [pc, #36]	; (801c19c <SUBGRF_SetPacketType+0x34>)
 801c176:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c178:	79fb      	ldrb	r3, [r7, #7]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d104      	bne.n	801c188 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c17e:	2100      	movs	r1, #0
 801c180:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c184:	f000 fafe 	bl	801c784 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c188:	1dfb      	adds	r3, r7, #7
 801c18a:	2201      	movs	r2, #1
 801c18c:	4619      	mov	r1, r3
 801c18e:	208a      	movs	r0, #138	; 0x8a
 801c190:	f000 fba8 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c194:	bf00      	nop
 801c196:	3708      	adds	r7, #8
 801c198:	46bd      	mov	sp, r7
 801c19a:	bd80      	pop	{r7, pc}
 801c19c:	20001885 	.word	0x20001885

0801c1a0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c1a0:	b480      	push	{r7}
 801c1a2:	af00      	add	r7, sp, #0
    return PacketType;
 801c1a4:	4b02      	ldr	r3, [pc, #8]	; (801c1b0 <SUBGRF_GetPacketType+0x10>)
 801c1a6:	781b      	ldrb	r3, [r3, #0]
}
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	bc80      	pop	{r7}
 801c1ae:	4770      	bx	lr
 801c1b0:	20001885 	.word	0x20001885

0801c1b4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b084      	sub	sp, #16
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	4603      	mov	r3, r0
 801c1bc:	71fb      	strb	r3, [r7, #7]
 801c1be:	460b      	mov	r3, r1
 801c1c0:	71bb      	strb	r3, [r7, #6]
 801c1c2:	4613      	mov	r3, r2
 801c1c4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c1c6:	79fb      	ldrb	r3, [r7, #7]
 801c1c8:	2b01      	cmp	r3, #1
 801c1ca:	d149      	bne.n	801c260 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c1cc:	2000      	movs	r0, #0
 801c1ce:	f7f1 fb07 	bl	800d7e0 <RBI_GetRFOMaxPowerConfig>
 801c1d2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c1d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c1d8:	68fa      	ldr	r2, [r7, #12]
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	da01      	bge.n	801c1e2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c1e2:	68fb      	ldr	r3, [r7, #12]
 801c1e4:	2b0e      	cmp	r3, #14
 801c1e6:	d10e      	bne.n	801c206 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c1e8:	2301      	movs	r3, #1
 801c1ea:	2201      	movs	r2, #1
 801c1ec:	2100      	movs	r1, #0
 801c1ee:	2004      	movs	r0, #4
 801c1f0:	f7ff fef6 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c1f4:	79ba      	ldrb	r2, [r7, #6]
 801c1f6:	68fb      	ldr	r3, [r7, #12]
 801c1f8:	b2db      	uxtb	r3, r3
 801c1fa:	1ad3      	subs	r3, r2, r3
 801c1fc:	b2db      	uxtb	r3, r3
 801c1fe:	330e      	adds	r3, #14
 801c200:	b2db      	uxtb	r3, r3
 801c202:	71bb      	strb	r3, [r7, #6]
 801c204:	e01f      	b.n	801c246 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c206:	68fb      	ldr	r3, [r7, #12]
 801c208:	2b0a      	cmp	r3, #10
 801c20a:	d10e      	bne.n	801c22a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c20c:	2301      	movs	r3, #1
 801c20e:	2201      	movs	r2, #1
 801c210:	2100      	movs	r1, #0
 801c212:	2001      	movs	r0, #1
 801c214:	f7ff fee4 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c218:	79ba      	ldrb	r2, [r7, #6]
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	b2db      	uxtb	r3, r3
 801c21e:	1ad3      	subs	r3, r2, r3
 801c220:	b2db      	uxtb	r3, r3
 801c222:	330d      	adds	r3, #13
 801c224:	b2db      	uxtb	r3, r3
 801c226:	71bb      	strb	r3, [r7, #6]
 801c228:	e00d      	b.n	801c246 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c22a:	2301      	movs	r3, #1
 801c22c:	2201      	movs	r2, #1
 801c22e:	2100      	movs	r1, #0
 801c230:	2007      	movs	r0, #7
 801c232:	f7ff fed5 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c236:	79ba      	ldrb	r2, [r7, #6]
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	b2db      	uxtb	r3, r3
 801c23c:	1ad3      	subs	r3, r2, r3
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	330e      	adds	r3, #14
 801c242:	b2db      	uxtb	r3, r3
 801c244:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c246:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c24a:	f113 0f11 	cmn.w	r3, #17
 801c24e:	da01      	bge.n	801c254 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c250:	23ef      	movs	r3, #239	; 0xef
 801c252:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c254:	2118      	movs	r1, #24
 801c256:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c25a:	f000 fa93 	bl	801c784 <SUBGRF_WriteRegister>
 801c25e:	e067      	b.n	801c330 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c260:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c264:	f000 faa2 	bl	801c7ac <SUBGRF_ReadRegister>
 801c268:	4603      	mov	r3, r0
 801c26a:	f043 031e 	orr.w	r3, r3, #30
 801c26e:	b2db      	uxtb	r3, r3
 801c270:	4619      	mov	r1, r3
 801c272:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c276:	f000 fa85 	bl	801c784 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c27a:	2001      	movs	r0, #1
 801c27c:	f7f1 fab0 	bl	800d7e0 <RBI_GetRFOMaxPowerConfig>
 801c280:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c282:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c286:	68fa      	ldr	r2, [r7, #12]
 801c288:	429a      	cmp	r2, r3
 801c28a:	da01      	bge.n	801c290 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	2b14      	cmp	r3, #20
 801c294:	d10e      	bne.n	801c2b4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c296:	2301      	movs	r3, #1
 801c298:	2200      	movs	r2, #0
 801c29a:	2105      	movs	r1, #5
 801c29c:	2003      	movs	r0, #3
 801c29e:	f7ff fe9f 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c2a2:	79ba      	ldrb	r2, [r7, #6]
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	b2db      	uxtb	r3, r3
 801c2a8:	1ad3      	subs	r3, r2, r3
 801c2aa:	b2db      	uxtb	r3, r3
 801c2ac:	3316      	adds	r3, #22
 801c2ae:	b2db      	uxtb	r3, r3
 801c2b0:	71bb      	strb	r3, [r7, #6]
 801c2b2:	e031      	b.n	801c318 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	2b11      	cmp	r3, #17
 801c2b8:	d10e      	bne.n	801c2d8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c2ba:	2301      	movs	r3, #1
 801c2bc:	2200      	movs	r2, #0
 801c2be:	2103      	movs	r1, #3
 801c2c0:	2002      	movs	r0, #2
 801c2c2:	f7ff fe8d 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c2c6:	79ba      	ldrb	r2, [r7, #6]
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	1ad3      	subs	r3, r2, r3
 801c2ce:	b2db      	uxtb	r3, r3
 801c2d0:	3316      	adds	r3, #22
 801c2d2:	b2db      	uxtb	r3, r3
 801c2d4:	71bb      	strb	r3, [r7, #6]
 801c2d6:	e01f      	b.n	801c318 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c2d8:	68fb      	ldr	r3, [r7, #12]
 801c2da:	2b0e      	cmp	r3, #14
 801c2dc:	d10e      	bne.n	801c2fc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c2de:	2301      	movs	r3, #1
 801c2e0:	2200      	movs	r2, #0
 801c2e2:	2102      	movs	r1, #2
 801c2e4:	2002      	movs	r0, #2
 801c2e6:	f7ff fe7b 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c2ea:	79ba      	ldrb	r2, [r7, #6]
 801c2ec:	68fb      	ldr	r3, [r7, #12]
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	1ad3      	subs	r3, r2, r3
 801c2f2:	b2db      	uxtb	r3, r3
 801c2f4:	330e      	adds	r3, #14
 801c2f6:	b2db      	uxtb	r3, r3
 801c2f8:	71bb      	strb	r3, [r7, #6]
 801c2fa:	e00d      	b.n	801c318 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c2fc:	2301      	movs	r3, #1
 801c2fe:	2200      	movs	r2, #0
 801c300:	2107      	movs	r1, #7
 801c302:	2004      	movs	r0, #4
 801c304:	f7ff fe6c 	bl	801bfe0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c308:	79ba      	ldrb	r2, [r7, #6]
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	b2db      	uxtb	r3, r3
 801c30e:	1ad3      	subs	r3, r2, r3
 801c310:	b2db      	uxtb	r3, r3
 801c312:	3316      	adds	r3, #22
 801c314:	b2db      	uxtb	r3, r3
 801c316:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c318:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c31c:	f113 0f09 	cmn.w	r3, #9
 801c320:	da01      	bge.n	801c326 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c322:	23f7      	movs	r3, #247	; 0xf7
 801c324:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c326:	2138      	movs	r1, #56	; 0x38
 801c328:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c32c:	f000 fa2a 	bl	801c784 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c330:	79bb      	ldrb	r3, [r7, #6]
 801c332:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c334:	797b      	ldrb	r3, [r7, #5]
 801c336:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c338:	f107 0308 	add.w	r3, r7, #8
 801c33c:	2202      	movs	r2, #2
 801c33e:	4619      	mov	r1, r3
 801c340:	208e      	movs	r0, #142	; 0x8e
 801c342:	f000 facf 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c346:	bf00      	nop
 801c348:	3710      	adds	r7, #16
 801c34a:	46bd      	mov	sp, r7
 801c34c:	bd80      	pop	{r7, pc}
	...

0801c350 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c354:	b086      	sub	sp, #24
 801c356:	af00      	add	r7, sp, #0
 801c358:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c35a:	2300      	movs	r3, #0
 801c35c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c35e:	4a61      	ldr	r2, [pc, #388]	; (801c4e4 <SUBGRF_SetModulationParams+0x194>)
 801c360:	f107 0308 	add.w	r3, r7, #8
 801c364:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c368:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	781a      	ldrb	r2, [r3, #0]
 801c370:	4b5d      	ldr	r3, [pc, #372]	; (801c4e8 <SUBGRF_SetModulationParams+0x198>)
 801c372:	781b      	ldrb	r3, [r3, #0]
 801c374:	429a      	cmp	r2, r3
 801c376:	d004      	beq.n	801c382 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	781b      	ldrb	r3, [r3, #0]
 801c37c:	4618      	mov	r0, r3
 801c37e:	f7ff fef3 	bl	801c168 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	781b      	ldrb	r3, [r3, #0]
 801c386:	2b03      	cmp	r3, #3
 801c388:	f200 80a5 	bhi.w	801c4d6 <SUBGRF_SetModulationParams+0x186>
 801c38c:	a201      	add	r2, pc, #4	; (adr r2, 801c394 <SUBGRF_SetModulationParams+0x44>)
 801c38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c392:	bf00      	nop
 801c394:	0801c3a5 	.word	0x0801c3a5
 801c398:	0801c465 	.word	0x0801c465
 801c39c:	0801c427 	.word	0x0801c427
 801c3a0:	0801c493 	.word	0x0801c493
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c3a4:	2308      	movs	r3, #8
 801c3a6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	685b      	ldr	r3, [r3, #4]
 801c3ac:	4a4f      	ldr	r2, [pc, #316]	; (801c4ec <SUBGRF_SetModulationParams+0x19c>)
 801c3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 801c3b2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c3b4:	697b      	ldr	r3, [r7, #20]
 801c3b6:	0c1b      	lsrs	r3, r3, #16
 801c3b8:	b2db      	uxtb	r3, r3
 801c3ba:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c3bc:	697b      	ldr	r3, [r7, #20]
 801c3be:	0a1b      	lsrs	r3, r3, #8
 801c3c0:	b2db      	uxtb	r3, r3
 801c3c2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c3c4:	697b      	ldr	r3, [r7, #20]
 801c3c6:	b2db      	uxtb	r3, r3
 801c3c8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	7b1b      	ldrb	r3, [r3, #12]
 801c3ce:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	7b5b      	ldrb	r3, [r3, #13]
 801c3d4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	689b      	ldr	r3, [r3, #8]
 801c3da:	2200      	movs	r2, #0
 801c3dc:	461c      	mov	r4, r3
 801c3de:	4615      	mov	r5, r2
 801c3e0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c3e4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c3e8:	4a41      	ldr	r2, [pc, #260]	; (801c4f0 <SUBGRF_SetModulationParams+0x1a0>)
 801c3ea:	f04f 0300 	mov.w	r3, #0
 801c3ee:	4640      	mov	r0, r8
 801c3f0:	4649      	mov	r1, r9
 801c3f2:	f7e4 fccb 	bl	8000d8c <__aeabi_uldivmod>
 801c3f6:	4602      	mov	r2, r0
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	4613      	mov	r3, r2
 801c3fc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c3fe:	697b      	ldr	r3, [r7, #20]
 801c400:	0c1b      	lsrs	r3, r3, #16
 801c402:	b2db      	uxtb	r3, r3
 801c404:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c406:	697b      	ldr	r3, [r7, #20]
 801c408:	0a1b      	lsrs	r3, r3, #8
 801c40a:	b2db      	uxtb	r3, r3
 801c40c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c40e:	697b      	ldr	r3, [r7, #20]
 801c410:	b2db      	uxtb	r3, r3
 801c412:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c414:	7cfb      	ldrb	r3, [r7, #19]
 801c416:	b29a      	uxth	r2, r3
 801c418:	f107 0308 	add.w	r3, r7, #8
 801c41c:	4619      	mov	r1, r3
 801c41e:	208b      	movs	r0, #139	; 0x8b
 801c420:	f000 fa60 	bl	801c8e4 <SUBGRF_WriteCommand>
        break;
 801c424:	e058      	b.n	801c4d8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c426:	2304      	movs	r3, #4
 801c428:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	691b      	ldr	r3, [r3, #16]
 801c42e:	4a2f      	ldr	r2, [pc, #188]	; (801c4ec <SUBGRF_SetModulationParams+0x19c>)
 801c430:	fbb2 f3f3 	udiv	r3, r2, r3
 801c434:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c436:	697b      	ldr	r3, [r7, #20]
 801c438:	0c1b      	lsrs	r3, r3, #16
 801c43a:	b2db      	uxtb	r3, r3
 801c43c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c43e:	697b      	ldr	r3, [r7, #20]
 801c440:	0a1b      	lsrs	r3, r3, #8
 801c442:	b2db      	uxtb	r3, r3
 801c444:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c446:	697b      	ldr	r3, [r7, #20]
 801c448:	b2db      	uxtb	r3, r3
 801c44a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	7d1b      	ldrb	r3, [r3, #20]
 801c450:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c452:	7cfb      	ldrb	r3, [r7, #19]
 801c454:	b29a      	uxth	r2, r3
 801c456:	f107 0308 	add.w	r3, r7, #8
 801c45a:	4619      	mov	r1, r3
 801c45c:	208b      	movs	r0, #139	; 0x8b
 801c45e:	f000 fa41 	bl	801c8e4 <SUBGRF_WriteCommand>
        break;
 801c462:	e039      	b.n	801c4d8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c464:	2304      	movs	r3, #4
 801c466:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	7e1b      	ldrb	r3, [r3, #24]
 801c46c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	7e5b      	ldrb	r3, [r3, #25]
 801c472:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	7e9b      	ldrb	r3, [r3, #26]
 801c478:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	7edb      	ldrb	r3, [r3, #27]
 801c47e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c480:	7cfb      	ldrb	r3, [r7, #19]
 801c482:	b29a      	uxth	r2, r3
 801c484:	f107 0308 	add.w	r3, r7, #8
 801c488:	4619      	mov	r1, r3
 801c48a:	208b      	movs	r0, #139	; 0x8b
 801c48c:	f000 fa2a 	bl	801c8e4 <SUBGRF_WriteCommand>

        break;
 801c490:	e022      	b.n	801c4d8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c492:	2305      	movs	r3, #5
 801c494:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	685b      	ldr	r3, [r3, #4]
 801c49a:	4a14      	ldr	r2, [pc, #80]	; (801c4ec <SUBGRF_SetModulationParams+0x19c>)
 801c49c:	fbb2 f3f3 	udiv	r3, r2, r3
 801c4a0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c4a2:	697b      	ldr	r3, [r7, #20]
 801c4a4:	0c1b      	lsrs	r3, r3, #16
 801c4a6:	b2db      	uxtb	r3, r3
 801c4a8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c4aa:	697b      	ldr	r3, [r7, #20]
 801c4ac:	0a1b      	lsrs	r3, r3, #8
 801c4ae:	b2db      	uxtb	r3, r3
 801c4b0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c4b2:	697b      	ldr	r3, [r7, #20]
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	7b1b      	ldrb	r3, [r3, #12]
 801c4bc:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	7b5b      	ldrb	r3, [r3, #13]
 801c4c2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c4c4:	7cfb      	ldrb	r3, [r7, #19]
 801c4c6:	b29a      	uxth	r2, r3
 801c4c8:	f107 0308 	add.w	r3, r7, #8
 801c4cc:	4619      	mov	r1, r3
 801c4ce:	208b      	movs	r0, #139	; 0x8b
 801c4d0:	f000 fa08 	bl	801c8e4 <SUBGRF_WriteCommand>
        break;
 801c4d4:	e000      	b.n	801c4d8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c4d6:	bf00      	nop
    }
}
 801c4d8:	bf00      	nop
 801c4da:	3718      	adds	r7, #24
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c4e2:	bf00      	nop
 801c4e4:	0801eef8 	.word	0x0801eef8
 801c4e8:	20001885 	.word	0x20001885
 801c4ec:	3d090000 	.word	0x3d090000
 801c4f0:	01e84800 	.word	0x01e84800

0801c4f4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b086      	sub	sp, #24
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c500:	4a48      	ldr	r2, [pc, #288]	; (801c624 <SUBGRF_SetPacketParams+0x130>)
 801c502:	f107 030c 	add.w	r3, r7, #12
 801c506:	ca07      	ldmia	r2, {r0, r1, r2}
 801c508:	c303      	stmia	r3!, {r0, r1}
 801c50a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	781a      	ldrb	r2, [r3, #0]
 801c510:	4b45      	ldr	r3, [pc, #276]	; (801c628 <SUBGRF_SetPacketParams+0x134>)
 801c512:	781b      	ldrb	r3, [r3, #0]
 801c514:	429a      	cmp	r2, r3
 801c516:	d004      	beq.n	801c522 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	781b      	ldrb	r3, [r3, #0]
 801c51c:	4618      	mov	r0, r3
 801c51e:	f7ff fe23 	bl	801c168 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	781b      	ldrb	r3, [r3, #0]
 801c526:	2b03      	cmp	r3, #3
 801c528:	d878      	bhi.n	801c61c <SUBGRF_SetPacketParams+0x128>
 801c52a:	a201      	add	r2, pc, #4	; (adr r2, 801c530 <SUBGRF_SetPacketParams+0x3c>)
 801c52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c530:	0801c541 	.word	0x0801c541
 801c534:	0801c5d1 	.word	0x0801c5d1
 801c538:	0801c5c5 	.word	0x0801c5c5
 801c53c:	0801c541 	.word	0x0801c541
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	7a5b      	ldrb	r3, [r3, #9]
 801c544:	2bf1      	cmp	r3, #241	; 0xf1
 801c546:	d10a      	bne.n	801c55e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801c548:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c54c:	f7ff faaa 	bl	801baa4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801c550:	f248 0005 	movw	r0, #32773	; 0x8005
 801c554:	f7ff fac6 	bl	801bae4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801c558:	2302      	movs	r3, #2
 801c55a:	75bb      	strb	r3, [r7, #22]
 801c55c:	e011      	b.n	801c582 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	7a5b      	ldrb	r3, [r3, #9]
 801c562:	2bf2      	cmp	r3, #242	; 0xf2
 801c564:	d10a      	bne.n	801c57c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801c566:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801c56a:	f7ff fa9b 	bl	801baa4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801c56e:	f241 0021 	movw	r0, #4129	; 0x1021
 801c572:	f7ff fab7 	bl	801bae4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801c576:	2306      	movs	r3, #6
 801c578:	75bb      	strb	r3, [r7, #22]
 801c57a:	e002      	b.n	801c582 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	7a5b      	ldrb	r3, [r3, #9]
 801c580:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801c582:	2309      	movs	r3, #9
 801c584:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	885b      	ldrh	r3, [r3, #2]
 801c58a:	0a1b      	lsrs	r3, r3, #8
 801c58c:	b29b      	uxth	r3, r3
 801c58e:	b2db      	uxtb	r3, r3
 801c590:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	885b      	ldrh	r3, [r3, #2]
 801c596:	b2db      	uxtb	r3, r3
 801c598:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	791b      	ldrb	r3, [r3, #4]
 801c59e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	795b      	ldrb	r3, [r3, #5]
 801c5a4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801c5a6:	687b      	ldr	r3, [r7, #4]
 801c5a8:	799b      	ldrb	r3, [r3, #6]
 801c5aa:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	79db      	ldrb	r3, [r3, #7]
 801c5b0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	7a1b      	ldrb	r3, [r3, #8]
 801c5b6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801c5b8:	7dbb      	ldrb	r3, [r7, #22]
 801c5ba:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	7a9b      	ldrb	r3, [r3, #10]
 801c5c0:	753b      	strb	r3, [r7, #20]
        break;
 801c5c2:	e022      	b.n	801c60a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801c5c4:	2301      	movs	r3, #1
 801c5c6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	7b1b      	ldrb	r3, [r3, #12]
 801c5cc:	733b      	strb	r3, [r7, #12]
        break;
 801c5ce:	e01c      	b.n	801c60a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801c5d0:	2306      	movs	r3, #6
 801c5d2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	89db      	ldrh	r3, [r3, #14]
 801c5d8:	0a1b      	lsrs	r3, r3, #8
 801c5da:	b29b      	uxth	r3, r3
 801c5dc:	b2db      	uxtb	r3, r3
 801c5de:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	89db      	ldrh	r3, [r3, #14]
 801c5e4:	b2db      	uxtb	r3, r3
 801c5e6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	7c1a      	ldrb	r2, [r3, #16]
 801c5ec:	4b0f      	ldr	r3, [pc, #60]	; (801c62c <SUBGRF_SetPacketParams+0x138>)
 801c5ee:	4611      	mov	r1, r2
 801c5f0:	7019      	strb	r1, [r3, #0]
 801c5f2:	4613      	mov	r3, r2
 801c5f4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	7c5b      	ldrb	r3, [r3, #17]
 801c5fa:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801c5fc:	687b      	ldr	r3, [r7, #4]
 801c5fe:	7c9b      	ldrb	r3, [r3, #18]
 801c600:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	7cdb      	ldrb	r3, [r3, #19]
 801c606:	747b      	strb	r3, [r7, #17]
        break;
 801c608:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801c60a:	7dfb      	ldrb	r3, [r7, #23]
 801c60c:	b29a      	uxth	r2, r3
 801c60e:	f107 030c 	add.w	r3, r7, #12
 801c612:	4619      	mov	r1, r3
 801c614:	208c      	movs	r0, #140	; 0x8c
 801c616:	f000 f965 	bl	801c8e4 <SUBGRF_WriteCommand>
 801c61a:	e000      	b.n	801c61e <SUBGRF_SetPacketParams+0x12a>
        return;
 801c61c:	bf00      	nop
}
 801c61e:	3718      	adds	r7, #24
 801c620:	46bd      	mov	sp, r7
 801c622:	bd80      	pop	{r7, pc}
 801c624:	0801ef00 	.word	0x0801ef00
 801c628:	20001885 	.word	0x20001885
 801c62c:	20001886 	.word	0x20001886

0801c630 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801c630:	b580      	push	{r7, lr}
 801c632:	b084      	sub	sp, #16
 801c634:	af00      	add	r7, sp, #0
 801c636:	4603      	mov	r3, r0
 801c638:	460a      	mov	r2, r1
 801c63a:	71fb      	strb	r3, [r7, #7]
 801c63c:	4613      	mov	r3, r2
 801c63e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801c640:	79fb      	ldrb	r3, [r7, #7]
 801c642:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801c644:	79bb      	ldrb	r3, [r7, #6]
 801c646:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801c648:	f107 030c 	add.w	r3, r7, #12
 801c64c:	2202      	movs	r2, #2
 801c64e:	4619      	mov	r1, r3
 801c650:	208f      	movs	r0, #143	; 0x8f
 801c652:	f000 f947 	bl	801c8e4 <SUBGRF_WriteCommand>
}
 801c656:	bf00      	nop
 801c658:	3710      	adds	r7, #16
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}

0801c65e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801c65e:	b580      	push	{r7, lr}
 801c660:	b082      	sub	sp, #8
 801c662:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801c664:	2300      	movs	r3, #0
 801c666:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801c668:	1d3b      	adds	r3, r7, #4
 801c66a:	2201      	movs	r2, #1
 801c66c:	4619      	mov	r1, r3
 801c66e:	2015      	movs	r0, #21
 801c670:	f000 f95a 	bl	801c928 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801c674:	793b      	ldrb	r3, [r7, #4]
 801c676:	425b      	negs	r3, r3
 801c678:	105b      	asrs	r3, r3, #1
 801c67a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801c67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801c680:	4618      	mov	r0, r3
 801c682:	3708      	adds	r7, #8
 801c684:	46bd      	mov	sp, r7
 801c686:	bd80      	pop	{r7, pc}

0801c688 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801c688:	b580      	push	{r7, lr}
 801c68a:	b084      	sub	sp, #16
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	6078      	str	r0, [r7, #4]
 801c690:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801c692:	f107 030c 	add.w	r3, r7, #12
 801c696:	2202      	movs	r2, #2
 801c698:	4619      	mov	r1, r3
 801c69a:	2013      	movs	r0, #19
 801c69c:	f000 f944 	bl	801c928 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801c6a0:	f7ff fd7e 	bl	801c1a0 <SUBGRF_GetPacketType>
 801c6a4:	4603      	mov	r3, r0
 801c6a6:	2b01      	cmp	r3, #1
 801c6a8:	d10d      	bne.n	801c6c6 <SUBGRF_GetRxBufferStatus+0x3e>
 801c6aa:	4b0c      	ldr	r3, [pc, #48]	; (801c6dc <SUBGRF_GetRxBufferStatus+0x54>)
 801c6ac:	781b      	ldrb	r3, [r3, #0]
 801c6ae:	b2db      	uxtb	r3, r3
 801c6b0:	2b01      	cmp	r3, #1
 801c6b2:	d108      	bne.n	801c6c6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c6b4:	f240 7002 	movw	r0, #1794	; 0x702
 801c6b8:	f000 f878 	bl	801c7ac <SUBGRF_ReadRegister>
 801c6bc:	4603      	mov	r3, r0
 801c6be:	461a      	mov	r2, r3
 801c6c0:	687b      	ldr	r3, [r7, #4]
 801c6c2:	701a      	strb	r2, [r3, #0]
 801c6c4:	e002      	b.n	801c6cc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c6c6:	7b3a      	ldrb	r2, [r7, #12]
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c6cc:	7b7a      	ldrb	r2, [r7, #13]
 801c6ce:	683b      	ldr	r3, [r7, #0]
 801c6d0:	701a      	strb	r2, [r3, #0]
}
 801c6d2:	bf00      	nop
 801c6d4:	3710      	adds	r7, #16
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd80      	pop	{r7, pc}
 801c6da:	bf00      	nop
 801c6dc:	20001886 	.word	0x20001886

0801c6e0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b084      	sub	sp, #16
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c6e8:	f107 030c 	add.w	r3, r7, #12
 801c6ec:	2203      	movs	r2, #3
 801c6ee:	4619      	mov	r1, r3
 801c6f0:	2014      	movs	r0, #20
 801c6f2:	f000 f919 	bl	801c928 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c6f6:	f7ff fd53 	bl	801c1a0 <SUBGRF_GetPacketType>
 801c6fa:	4603      	mov	r3, r0
 801c6fc:	461a      	mov	r2, r3
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	781b      	ldrb	r3, [r3, #0]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d002      	beq.n	801c710 <SUBGRF_GetPacketStatus+0x30>
 801c70a:	2b01      	cmp	r3, #1
 801c70c:	d013      	beq.n	801c736 <SUBGRF_GetPacketStatus+0x56>
 801c70e:	e02a      	b.n	801c766 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c710:	7b3a      	ldrb	r2, [r7, #12]
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c716:	7b7b      	ldrb	r3, [r7, #13]
 801c718:	425b      	negs	r3, r3
 801c71a:	105b      	asrs	r3, r3, #1
 801c71c:	b25a      	sxtb	r2, r3
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c722:	7bbb      	ldrb	r3, [r7, #14]
 801c724:	425b      	negs	r3, r3
 801c726:	105b      	asrs	r3, r3, #1
 801c728:	b25a      	sxtb	r2, r3
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	2200      	movs	r2, #0
 801c732:	609a      	str	r2, [r3, #8]
            break;
 801c734:	e020      	b.n	801c778 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c736:	7b3b      	ldrb	r3, [r7, #12]
 801c738:	425b      	negs	r3, r3
 801c73a:	105b      	asrs	r3, r3, #1
 801c73c:	b25a      	sxtb	r2, r3
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c742:	7b7b      	ldrb	r3, [r7, #13]
 801c744:	b25b      	sxtb	r3, r3
 801c746:	3302      	adds	r3, #2
 801c748:	109b      	asrs	r3, r3, #2
 801c74a:	b25a      	sxtb	r2, r3
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c750:	7bbb      	ldrb	r3, [r7, #14]
 801c752:	425b      	negs	r3, r3
 801c754:	105b      	asrs	r3, r3, #1
 801c756:	b25a      	sxtb	r2, r3
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c75c:	4b08      	ldr	r3, [pc, #32]	; (801c780 <SUBGRF_GetPacketStatus+0xa0>)
 801c75e:	681a      	ldr	r2, [r3, #0]
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	611a      	str	r2, [r3, #16]
            break;
 801c764:	e008      	b.n	801c778 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c766:	2214      	movs	r2, #20
 801c768:	2100      	movs	r1, #0
 801c76a:	6878      	ldr	r0, [r7, #4]
 801c76c:	f000 fc03 	bl	801cf76 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	220f      	movs	r2, #15
 801c774:	701a      	strb	r2, [r3, #0]
            break;
 801c776:	bf00      	nop
    }
}
 801c778:	bf00      	nop
 801c77a:	3710      	adds	r7, #16
 801c77c:	46bd      	mov	sp, r7
 801c77e:	bd80      	pop	{r7, pc}
 801c780:	20001888 	.word	0x20001888

0801c784 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c784:	b580      	push	{r7, lr}
 801c786:	b082      	sub	sp, #8
 801c788:	af00      	add	r7, sp, #0
 801c78a:	4603      	mov	r3, r0
 801c78c:	460a      	mov	r2, r1
 801c78e:	80fb      	strh	r3, [r7, #6]
 801c790:	4613      	mov	r3, r2
 801c792:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c794:	1d7a      	adds	r2, r7, #5
 801c796:	88f9      	ldrh	r1, [r7, #6]
 801c798:	2301      	movs	r3, #1
 801c79a:	4803      	ldr	r0, [pc, #12]	; (801c7a8 <SUBGRF_WriteRegister+0x24>)
 801c79c:	f7ed f87c 	bl	8009898 <HAL_SUBGHZ_WriteRegisters>
}
 801c7a0:	bf00      	nop
 801c7a2:	3708      	adds	r7, #8
 801c7a4:	46bd      	mov	sp, r7
 801c7a6:	bd80      	pop	{r7, pc}
 801c7a8:	20000368 	.word	0x20000368

0801c7ac <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b084      	sub	sp, #16
 801c7b0:	af00      	add	r7, sp, #0
 801c7b2:	4603      	mov	r3, r0
 801c7b4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c7b6:	f107 020f 	add.w	r2, r7, #15
 801c7ba:	88f9      	ldrh	r1, [r7, #6]
 801c7bc:	2301      	movs	r3, #1
 801c7be:	4804      	ldr	r0, [pc, #16]	; (801c7d0 <SUBGRF_ReadRegister+0x24>)
 801c7c0:	f7ed f8c9 	bl	8009956 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801c7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c7c6:	4618      	mov	r0, r3
 801c7c8:	3710      	adds	r7, #16
 801c7ca:	46bd      	mov	sp, r7
 801c7cc:	bd80      	pop	{r7, pc}
 801c7ce:	bf00      	nop
 801c7d0:	20000368 	.word	0x20000368

0801c7d4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c7d4:	b580      	push	{r7, lr}
 801c7d6:	b086      	sub	sp, #24
 801c7d8:	af00      	add	r7, sp, #0
 801c7da:	4603      	mov	r3, r0
 801c7dc:	6039      	str	r1, [r7, #0]
 801c7de:	80fb      	strh	r3, [r7, #6]
 801c7e0:	4613      	mov	r3, r2
 801c7e2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7e4:	f3ef 8310 	mrs	r3, PRIMASK
 801c7e8:	60fb      	str	r3, [r7, #12]
  return(result);
 801c7ea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c7ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7ee:	b672      	cpsid	i
}
 801c7f0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c7f2:	88bb      	ldrh	r3, [r7, #4]
 801c7f4:	88f9      	ldrh	r1, [r7, #6]
 801c7f6:	683a      	ldr	r2, [r7, #0]
 801c7f8:	4806      	ldr	r0, [pc, #24]	; (801c814 <SUBGRF_WriteRegisters+0x40>)
 801c7fa:	f7ed f84d 	bl	8009898 <HAL_SUBGHZ_WriteRegisters>
 801c7fe:	697b      	ldr	r3, [r7, #20]
 801c800:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c802:	693b      	ldr	r3, [r7, #16]
 801c804:	f383 8810 	msr	PRIMASK, r3
}
 801c808:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c80a:	bf00      	nop
 801c80c:	3718      	adds	r7, #24
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}
 801c812:	bf00      	nop
 801c814:	20000368 	.word	0x20000368

0801c818 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b086      	sub	sp, #24
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	4603      	mov	r3, r0
 801c820:	6039      	str	r1, [r7, #0]
 801c822:	80fb      	strh	r3, [r7, #6]
 801c824:	4613      	mov	r3, r2
 801c826:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c828:	f3ef 8310 	mrs	r3, PRIMASK
 801c82c:	60fb      	str	r3, [r7, #12]
  return(result);
 801c82e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c832:	b672      	cpsid	i
}
 801c834:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c836:	88bb      	ldrh	r3, [r7, #4]
 801c838:	88f9      	ldrh	r1, [r7, #6]
 801c83a:	683a      	ldr	r2, [r7, #0]
 801c83c:	4806      	ldr	r0, [pc, #24]	; (801c858 <SUBGRF_ReadRegisters+0x40>)
 801c83e:	f7ed f88a 	bl	8009956 <HAL_SUBGHZ_ReadRegisters>
 801c842:	697b      	ldr	r3, [r7, #20]
 801c844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c846:	693b      	ldr	r3, [r7, #16]
 801c848:	f383 8810 	msr	PRIMASK, r3
}
 801c84c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c84e:	bf00      	nop
 801c850:	3718      	adds	r7, #24
 801c852:	46bd      	mov	sp, r7
 801c854:	bd80      	pop	{r7, pc}
 801c856:	bf00      	nop
 801c858:	20000368 	.word	0x20000368

0801c85c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b086      	sub	sp, #24
 801c860:	af00      	add	r7, sp, #0
 801c862:	4603      	mov	r3, r0
 801c864:	6039      	str	r1, [r7, #0]
 801c866:	71fb      	strb	r3, [r7, #7]
 801c868:	4613      	mov	r3, r2
 801c86a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c86c:	f3ef 8310 	mrs	r3, PRIMASK
 801c870:	60fb      	str	r3, [r7, #12]
  return(result);
 801c872:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c874:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c876:	b672      	cpsid	i
}
 801c878:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c87a:	79bb      	ldrb	r3, [r7, #6]
 801c87c:	b29b      	uxth	r3, r3
 801c87e:	79f9      	ldrb	r1, [r7, #7]
 801c880:	683a      	ldr	r2, [r7, #0]
 801c882:	4806      	ldr	r0, [pc, #24]	; (801c89c <SUBGRF_WriteBuffer+0x40>)
 801c884:	f7ed f97b 	bl	8009b7e <HAL_SUBGHZ_WriteBuffer>
 801c888:	697b      	ldr	r3, [r7, #20]
 801c88a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c88c:	693b      	ldr	r3, [r7, #16]
 801c88e:	f383 8810 	msr	PRIMASK, r3
}
 801c892:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c894:	bf00      	nop
 801c896:	3718      	adds	r7, #24
 801c898:	46bd      	mov	sp, r7
 801c89a:	bd80      	pop	{r7, pc}
 801c89c:	20000368 	.word	0x20000368

0801c8a0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b086      	sub	sp, #24
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	4603      	mov	r3, r0
 801c8a8:	6039      	str	r1, [r7, #0]
 801c8aa:	71fb      	strb	r3, [r7, #7]
 801c8ac:	4613      	mov	r3, r2
 801c8ae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8b0:	f3ef 8310 	mrs	r3, PRIMASK
 801c8b4:	60fb      	str	r3, [r7, #12]
  return(result);
 801c8b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c8b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8ba:	b672      	cpsid	i
}
 801c8bc:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c8be:	79bb      	ldrb	r3, [r7, #6]
 801c8c0:	b29b      	uxth	r3, r3
 801c8c2:	79f9      	ldrb	r1, [r7, #7]
 801c8c4:	683a      	ldr	r2, [r7, #0]
 801c8c6:	4806      	ldr	r0, [pc, #24]	; (801c8e0 <SUBGRF_ReadBuffer+0x40>)
 801c8c8:	f7ed f9ac 	bl	8009c24 <HAL_SUBGHZ_ReadBuffer>
 801c8cc:	697b      	ldr	r3, [r7, #20]
 801c8ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c8d0:	693b      	ldr	r3, [r7, #16]
 801c8d2:	f383 8810 	msr	PRIMASK, r3
}
 801c8d6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c8d8:	bf00      	nop
 801c8da:	3718      	adds	r7, #24
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	bd80      	pop	{r7, pc}
 801c8e0:	20000368 	.word	0x20000368

0801c8e4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b086      	sub	sp, #24
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	4603      	mov	r3, r0
 801c8ec:	6039      	str	r1, [r7, #0]
 801c8ee:	71fb      	strb	r3, [r7, #7]
 801c8f0:	4613      	mov	r3, r2
 801c8f2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8f4:	f3ef 8310 	mrs	r3, PRIMASK
 801c8f8:	60fb      	str	r3, [r7, #12]
  return(result);
 801c8fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c8fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c8fe:	b672      	cpsid	i
}
 801c900:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c902:	88bb      	ldrh	r3, [r7, #4]
 801c904:	79f9      	ldrb	r1, [r7, #7]
 801c906:	683a      	ldr	r2, [r7, #0]
 801c908:	4806      	ldr	r0, [pc, #24]	; (801c924 <SUBGRF_WriteCommand+0x40>)
 801c90a:	f7ed f885 	bl	8009a18 <HAL_SUBGHZ_ExecSetCmd>
 801c90e:	697b      	ldr	r3, [r7, #20]
 801c910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c912:	693b      	ldr	r3, [r7, #16]
 801c914:	f383 8810 	msr	PRIMASK, r3
}
 801c918:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c91a:	bf00      	nop
 801c91c:	3718      	adds	r7, #24
 801c91e:	46bd      	mov	sp, r7
 801c920:	bd80      	pop	{r7, pc}
 801c922:	bf00      	nop
 801c924:	20000368 	.word	0x20000368

0801c928 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c928:	b580      	push	{r7, lr}
 801c92a:	b086      	sub	sp, #24
 801c92c:	af00      	add	r7, sp, #0
 801c92e:	4603      	mov	r3, r0
 801c930:	6039      	str	r1, [r7, #0]
 801c932:	71fb      	strb	r3, [r7, #7]
 801c934:	4613      	mov	r3, r2
 801c936:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c938:	f3ef 8310 	mrs	r3, PRIMASK
 801c93c:	60fb      	str	r3, [r7, #12]
  return(result);
 801c93e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c942:	b672      	cpsid	i
}
 801c944:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c946:	88bb      	ldrh	r3, [r7, #4]
 801c948:	79f9      	ldrb	r1, [r7, #7]
 801c94a:	683a      	ldr	r2, [r7, #0]
 801c94c:	4806      	ldr	r0, [pc, #24]	; (801c968 <SUBGRF_ReadCommand+0x40>)
 801c94e:	f7ed f8c2 	bl	8009ad6 <HAL_SUBGHZ_ExecGetCmd>
 801c952:	697b      	ldr	r3, [r7, #20]
 801c954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c956:	693b      	ldr	r3, [r7, #16]
 801c958:	f383 8810 	msr	PRIMASK, r3
}
 801c95c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c95e:	bf00      	nop
 801c960:	3718      	adds	r7, #24
 801c962:	46bd      	mov	sp, r7
 801c964:	bd80      	pop	{r7, pc}
 801c966:	bf00      	nop
 801c968:	20000368 	.word	0x20000368

0801c96c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c96c:	b580      	push	{r7, lr}
 801c96e:	b084      	sub	sp, #16
 801c970:	af00      	add	r7, sp, #0
 801c972:	4603      	mov	r3, r0
 801c974:	460a      	mov	r2, r1
 801c976:	71fb      	strb	r3, [r7, #7]
 801c978:	4613      	mov	r3, r2
 801c97a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c97c:	2301      	movs	r3, #1
 801c97e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c980:	79bb      	ldrb	r3, [r7, #6]
 801c982:	2b01      	cmp	r3, #1
 801c984:	d10d      	bne.n	801c9a2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c986:	79fb      	ldrb	r3, [r7, #7]
 801c988:	2b01      	cmp	r3, #1
 801c98a:	d104      	bne.n	801c996 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c98c:	2302      	movs	r3, #2
 801c98e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c990:	2004      	movs	r0, #4
 801c992:	f000 f8ef 	bl	801cb74 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c996:	79fb      	ldrb	r3, [r7, #7]
 801c998:	2b02      	cmp	r3, #2
 801c99a:	d107      	bne.n	801c9ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c99c:	2303      	movs	r3, #3
 801c99e:	73fb      	strb	r3, [r7, #15]
 801c9a0:	e004      	b.n	801c9ac <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c9a2:	79bb      	ldrb	r3, [r7, #6]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d101      	bne.n	801c9ac <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c9a8:	2301      	movs	r3, #1
 801c9aa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c9ac:	7bfb      	ldrb	r3, [r7, #15]
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f7f0 fef3 	bl	800d79a <RBI_ConfigRFSwitch>
}
 801c9b4:	bf00      	nop
 801c9b6:	3710      	adds	r7, #16
 801c9b8:	46bd      	mov	sp, r7
 801c9ba:	bd80      	pop	{r7, pc}

0801c9bc <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c9bc:	b580      	push	{r7, lr}
 801c9be:	b084      	sub	sp, #16
 801c9c0:	af00      	add	r7, sp, #0
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c9c6:	2301      	movs	r3, #1
 801c9c8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c9ca:	f7f0 fef4 	bl	800d7b6 <RBI_GetTxConfig>
 801c9ce:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c9d0:	68bb      	ldr	r3, [r7, #8]
 801c9d2:	2b02      	cmp	r3, #2
 801c9d4:	d016      	beq.n	801ca04 <SUBGRF_SetRfTxPower+0x48>
 801c9d6:	68bb      	ldr	r3, [r7, #8]
 801c9d8:	2b02      	cmp	r3, #2
 801c9da:	dc16      	bgt.n	801ca0a <SUBGRF_SetRfTxPower+0x4e>
 801c9dc:	68bb      	ldr	r3, [r7, #8]
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	d003      	beq.n	801c9ea <SUBGRF_SetRfTxPower+0x2e>
 801c9e2:	68bb      	ldr	r3, [r7, #8]
 801c9e4:	2b01      	cmp	r3, #1
 801c9e6:	d00a      	beq.n	801c9fe <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c9e8:	e00f      	b.n	801ca0a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c9ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9ee:	2b0f      	cmp	r3, #15
 801c9f0:	dd02      	ble.n	801c9f8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c9f2:	2302      	movs	r3, #2
 801c9f4:	73fb      	strb	r3, [r7, #15]
            break;
 801c9f6:	e009      	b.n	801ca0c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c9f8:	2301      	movs	r3, #1
 801c9fa:	73fb      	strb	r3, [r7, #15]
            break;
 801c9fc:	e006      	b.n	801ca0c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c9fe:	2301      	movs	r3, #1
 801ca00:	73fb      	strb	r3, [r7, #15]
            break;
 801ca02:	e003      	b.n	801ca0c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801ca04:	2302      	movs	r3, #2
 801ca06:	73fb      	strb	r3, [r7, #15]
            break;
 801ca08:	e000      	b.n	801ca0c <SUBGRF_SetRfTxPower+0x50>
            break;
 801ca0a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801ca0c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801ca10:	7bfb      	ldrb	r3, [r7, #15]
 801ca12:	2202      	movs	r2, #2
 801ca14:	4618      	mov	r0, r3
 801ca16:	f7ff fbcd 	bl	801c1b4 <SUBGRF_SetTxParams>

    return paSelect;
 801ca1a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca1c:	4618      	mov	r0, r3
 801ca1e:	3710      	adds	r7, #16
 801ca20:	46bd      	mov	sp, r7
 801ca22:	bd80      	pop	{r7, pc}

0801ca24 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801ca24:	b480      	push	{r7}
 801ca26:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801ca28:	2301      	movs	r3, #1
}
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	46bd      	mov	sp, r7
 801ca2e:	bc80      	pop	{r7}
 801ca30:	4770      	bx	lr
	...

0801ca34 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	b082      	sub	sp, #8
 801ca38:	af00      	add	r7, sp, #0
 801ca3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801ca3c:	4b03      	ldr	r3, [pc, #12]	; (801ca4c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	2001      	movs	r0, #1
 801ca42:	4798      	blx	r3
}
 801ca44:	bf00      	nop
 801ca46:	3708      	adds	r7, #8
 801ca48:	46bd      	mov	sp, r7
 801ca4a:	bd80      	pop	{r7, pc}
 801ca4c:	20001890 	.word	0x20001890

0801ca50 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b082      	sub	sp, #8
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801ca58:	4b03      	ldr	r3, [pc, #12]	; (801ca68 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	2002      	movs	r0, #2
 801ca5e:	4798      	blx	r3
}
 801ca60:	bf00      	nop
 801ca62:	3708      	adds	r7, #8
 801ca64:	46bd      	mov	sp, r7
 801ca66:	bd80      	pop	{r7, pc}
 801ca68:	20001890 	.word	0x20001890

0801ca6c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	b082      	sub	sp, #8
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801ca74:	4b03      	ldr	r3, [pc, #12]	; (801ca84 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801ca76:	681b      	ldr	r3, [r3, #0]
 801ca78:	2040      	movs	r0, #64	; 0x40
 801ca7a:	4798      	blx	r3
}
 801ca7c:	bf00      	nop
 801ca7e:	3708      	adds	r7, #8
 801ca80:	46bd      	mov	sp, r7
 801ca82:	bd80      	pop	{r7, pc}
 801ca84:	20001890 	.word	0x20001890

0801ca88 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ca88:	b580      	push	{r7, lr}
 801ca8a:	b082      	sub	sp, #8
 801ca8c:	af00      	add	r7, sp, #0
 801ca8e:	6078      	str	r0, [r7, #4]
 801ca90:	460b      	mov	r3, r1
 801ca92:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ca94:	78fb      	ldrb	r3, [r7, #3]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d002      	beq.n	801caa0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	d005      	beq.n	801caaa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ca9e:	e00a      	b.n	801cab6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801caa0:	4b07      	ldr	r3, [pc, #28]	; (801cac0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801caa2:	681b      	ldr	r3, [r3, #0]
 801caa4:	2080      	movs	r0, #128	; 0x80
 801caa6:	4798      	blx	r3
            break;
 801caa8:	e005      	b.n	801cab6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801caaa:	4b05      	ldr	r3, [pc, #20]	; (801cac0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	f44f 7080 	mov.w	r0, #256	; 0x100
 801cab2:	4798      	blx	r3
            break;
 801cab4:	bf00      	nop
    }
}
 801cab6:	bf00      	nop
 801cab8:	3708      	adds	r7, #8
 801caba:	46bd      	mov	sp, r7
 801cabc:	bd80      	pop	{r7, pc}
 801cabe:	bf00      	nop
 801cac0:	20001890 	.word	0x20001890

0801cac4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cac4:	b580      	push	{r7, lr}
 801cac6:	b082      	sub	sp, #8
 801cac8:	af00      	add	r7, sp, #0
 801caca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801cacc:	4b04      	ldr	r3, [pc, #16]	; (801cae0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801cad4:	4798      	blx	r3
}
 801cad6:	bf00      	nop
 801cad8:	3708      	adds	r7, #8
 801cada:	46bd      	mov	sp, r7
 801cadc:	bd80      	pop	{r7, pc}
 801cade:	bf00      	nop
 801cae0:	20001890 	.word	0x20001890

0801cae4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b082      	sub	sp, #8
 801cae8:	af00      	add	r7, sp, #0
 801caea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801caec:	4b03      	ldr	r3, [pc, #12]	; (801cafc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	2020      	movs	r0, #32
 801caf2:	4798      	blx	r3
}
 801caf4:	bf00      	nop
 801caf6:	3708      	adds	r7, #8
 801caf8:	46bd      	mov	sp, r7
 801cafa:	bd80      	pop	{r7, pc}
 801cafc:	20001890 	.word	0x20001890

0801cb00 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	b082      	sub	sp, #8
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801cb08:	4b03      	ldr	r3, [pc, #12]	; (801cb18 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	2004      	movs	r0, #4
 801cb0e:	4798      	blx	r3
}
 801cb10:	bf00      	nop
 801cb12:	3708      	adds	r7, #8
 801cb14:	46bd      	mov	sp, r7
 801cb16:	bd80      	pop	{r7, pc}
 801cb18:	20001890 	.word	0x20001890

0801cb1c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	b082      	sub	sp, #8
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801cb24:	4b03      	ldr	r3, [pc, #12]	; (801cb34 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	2008      	movs	r0, #8
 801cb2a:	4798      	blx	r3
}
 801cb2c:	bf00      	nop
 801cb2e:	3708      	adds	r7, #8
 801cb30:	46bd      	mov	sp, r7
 801cb32:	bd80      	pop	{r7, pc}
 801cb34:	20001890 	.word	0x20001890

0801cb38 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b082      	sub	sp, #8
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801cb40:	4b03      	ldr	r3, [pc, #12]	; (801cb50 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801cb42:	681b      	ldr	r3, [r3, #0]
 801cb44:	2010      	movs	r0, #16
 801cb46:	4798      	blx	r3
}
 801cb48:	bf00      	nop
 801cb4a:	3708      	adds	r7, #8
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}
 801cb50:	20001890 	.word	0x20001890

0801cb54 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b082      	sub	sp, #8
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801cb5c:	4b04      	ldr	r3, [pc, #16]	; (801cb70 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801cb64:	4798      	blx	r3
}
 801cb66:	bf00      	nop
 801cb68:	3708      	adds	r7, #8
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}
 801cb6e:	bf00      	nop
 801cb70:	20001890 	.word	0x20001890

0801cb74 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801cb74:	b580      	push	{r7, lr}
 801cb76:	b084      	sub	sp, #16
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	4603      	mov	r3, r0
 801cb7c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801cb7e:	f7f0 fe28 	bl	800d7d2 <RBI_IsDCDC>
 801cb82:	4603      	mov	r3, r0
 801cb84:	2b01      	cmp	r3, #1
 801cb86:	d112      	bne.n	801cbae <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801cb88:	f640 1023 	movw	r0, #2339	; 0x923
 801cb8c:	f7ff fe0e 	bl	801c7ac <SUBGRF_ReadRegister>
 801cb90:	4603      	mov	r3, r0
 801cb92:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801cb94:	7bfb      	ldrb	r3, [r7, #15]
 801cb96:	f023 0306 	bic.w	r3, r3, #6
 801cb9a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801cb9c:	7bfa      	ldrb	r2, [r7, #15]
 801cb9e:	79fb      	ldrb	r3, [r7, #7]
 801cba0:	4313      	orrs	r3, r2
 801cba2:	b2db      	uxtb	r3, r3
 801cba4:	4619      	mov	r1, r3
 801cba6:	f640 1023 	movw	r0, #2339	; 0x923
 801cbaa:	f7ff fdeb 	bl	801c784 <SUBGRF_WriteRegister>
  }
}
 801cbae:	bf00      	nop
 801cbb0:	3710      	adds	r7, #16
 801cbb2:	46bd      	mov	sp, r7
 801cbb4:	bd80      	pop	{r7, pc}
	...

0801cbb8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801cbb8:	b480      	push	{r7}
 801cbba:	b085      	sub	sp, #20
 801cbbc:	af00      	add	r7, sp, #0
 801cbbe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d101      	bne.n	801cbca <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801cbc6:	231f      	movs	r3, #31
 801cbc8:	e016      	b.n	801cbf8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cbca:	2300      	movs	r3, #0
 801cbcc:	73fb      	strb	r3, [r7, #15]
 801cbce:	e00f      	b.n	801cbf0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801cbd0:	7bfb      	ldrb	r3, [r7, #15]
 801cbd2:	4a0c      	ldr	r2, [pc, #48]	; (801cc04 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cbd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801cbd8:	687a      	ldr	r2, [r7, #4]
 801cbda:	429a      	cmp	r2, r3
 801cbdc:	d205      	bcs.n	801cbea <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801cbde:	7bfb      	ldrb	r3, [r7, #15]
 801cbe0:	4a08      	ldr	r2, [pc, #32]	; (801cc04 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801cbe2:	00db      	lsls	r3, r3, #3
 801cbe4:	4413      	add	r3, r2
 801cbe6:	791b      	ldrb	r3, [r3, #4]
 801cbe8:	e006      	b.n	801cbf8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cbea:	7bfb      	ldrb	r3, [r7, #15]
 801cbec:	3301      	adds	r3, #1
 801cbee:	73fb      	strb	r3, [r7, #15]
 801cbf0:	7bfb      	ldrb	r3, [r7, #15]
 801cbf2:	2b15      	cmp	r3, #21
 801cbf4:	d9ec      	bls.n	801cbd0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801cbf6:	e7fe      	b.n	801cbf6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	3714      	adds	r7, #20
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	bc80      	pop	{r7}
 801cc00:	4770      	bx	lr
 801cc02:	bf00      	nop
 801cc04:	0801f4f0 	.word	0x0801f4f0

0801cc08 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b08a      	sub	sp, #40	; 0x28
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
 801cc10:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801cc12:	4b35      	ldr	r3, [pc, #212]	; (801cce8 <SUBGRF_GetCFO+0xe0>)
 801cc14:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801cc16:	f640 0007 	movw	r0, #2055	; 0x807
 801cc1a:	f7ff fdc7 	bl	801c7ac <SUBGRF_ReadRegister>
 801cc1e:	4603      	mov	r3, r0
 801cc20:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801cc22:	7ffb      	ldrb	r3, [r7, #31]
 801cc24:	08db      	lsrs	r3, r3, #3
 801cc26:	b2db      	uxtb	r3, r3
 801cc28:	f003 0303 	and.w	r3, r3, #3
 801cc2c:	3328      	adds	r3, #40	; 0x28
 801cc2e:	443b      	add	r3, r7
 801cc30:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801cc34:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801cc36:	7ffb      	ldrb	r3, [r7, #31]
 801cc38:	f003 0307 	and.w	r3, r3, #7
 801cc3c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801cc3e:	7fba      	ldrb	r2, [r7, #30]
 801cc40:	7f7b      	ldrb	r3, [r7, #29]
 801cc42:	3301      	adds	r3, #1
 801cc44:	fa02 f303 	lsl.w	r3, r2, r3
 801cc48:	461a      	mov	r2, r3
 801cc4a:	4b28      	ldr	r3, [pc, #160]	; (801ccec <SUBGRF_GetCFO+0xe4>)
 801cc4c:	fbb3 f3f2 	udiv	r3, r3, r2
 801cc50:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801cc52:	69ba      	ldr	r2, [r7, #24]
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc5a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801cc5c:	2301      	movs	r3, #1
 801cc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801cc62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cc66:	697a      	ldr	r2, [r7, #20]
 801cc68:	fb02 f303 	mul.w	r3, r2, r3
 801cc6c:	2b07      	cmp	r3, #7
 801cc6e:	d802      	bhi.n	801cc76 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801cc70:	2302      	movs	r3, #2
 801cc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801cc76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cc7a:	697a      	ldr	r2, [r7, #20]
 801cc7c:	fb02 f303 	mul.w	r3, r2, r3
 801cc80:	2b03      	cmp	r3, #3
 801cc82:	d802      	bhi.n	801cc8a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801cc84:	2304      	movs	r3, #4
 801cc86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801cc8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801cc8e:	69bb      	ldr	r3, [r7, #24]
 801cc90:	fb02 f303 	mul.w	r3, r2, r3
 801cc94:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801cc96:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801cc9a:	f7ff fd87 	bl	801c7ac <SUBGRF_ReadRegister>
 801cc9e:	4603      	mov	r3, r0
 801cca0:	021b      	lsls	r3, r3, #8
 801cca2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cca6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801cca8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801ccac:	f7ff fd7e 	bl	801c7ac <SUBGRF_ReadRegister>
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	461a      	mov	r2, r3
 801ccb4:	6a3b      	ldr	r3, [r7, #32]
 801ccb6:	4313      	orrs	r3, r2
 801ccb8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ccba:	6a3b      	ldr	r3, [r7, #32]
 801ccbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d005      	beq.n	801ccd0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ccc4:	6a3b      	ldr	r3, [r7, #32]
 801ccc6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ccca:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ccce:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ccd0:	693b      	ldr	r3, [r7, #16]
 801ccd2:	095b      	lsrs	r3, r3, #5
 801ccd4:	6a3a      	ldr	r2, [r7, #32]
 801ccd6:	fb02 f303 	mul.w	r3, r2, r3
 801ccda:	11da      	asrs	r2, r3, #7
 801ccdc:	683b      	ldr	r3, [r7, #0]
 801ccde:	601a      	str	r2, [r3, #0]
}
 801cce0:	bf00      	nop
 801cce2:	3728      	adds	r7, #40	; 0x28
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bd80      	pop	{r7, pc}
 801cce8:	0c0a0804 	.word	0x0c0a0804
 801ccec:	01e84800 	.word	0x01e84800

0801ccf0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ccf0:	b480      	push	{r7}
 801ccf2:	b087      	sub	sp, #28
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	60b9      	str	r1, [r7, #8]
 801ccfa:	607a      	str	r2, [r7, #4]
 801ccfc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ccfe:	2300      	movs	r3, #0
 801cd00:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801cd02:	f04f 33ff 	mov.w	r3, #4294967295
 801cd06:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801cd08:	697b      	ldr	r3, [r7, #20]
}
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	371c      	adds	r7, #28
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bc80      	pop	{r7}
 801cd12:	4770      	bx	lr

0801cd14 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801cd14:	b480      	push	{r7}
 801cd16:	b087      	sub	sp, #28
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	60b9      	str	r1, [r7, #8]
 801cd1e:	607a      	str	r2, [r7, #4]
 801cd20:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801cd22:	2300      	movs	r3, #0
 801cd24:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801cd26:	f04f 33ff 	mov.w	r3, #4294967295
 801cd2a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801cd2c:	697b      	ldr	r3, [r7, #20]
}
 801cd2e:	4618      	mov	r0, r3
 801cd30:	371c      	adds	r7, #28
 801cd32:	46bd      	mov	sp, r7
 801cd34:	bc80      	pop	{r7}
 801cd36:	4770      	bx	lr

0801cd38 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801cd38:	b480      	push	{r7}
 801cd3a:	b085      	sub	sp, #20
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	60f8      	str	r0, [r7, #12]
 801cd40:	60b9      	str	r1, [r7, #8]
 801cd42:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801cd44:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801cd48:	4618      	mov	r0, r3
 801cd4a:	3714      	adds	r7, #20
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bc80      	pop	{r7}
 801cd50:	4770      	bx	lr

0801cd52 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801cd52:	b480      	push	{r7}
 801cd54:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801cd56:	bf00      	nop
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	bc80      	pop	{r7}
 801cd5c:	4770      	bx	lr

0801cd5e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801cd5e:	b480      	push	{r7}
 801cd60:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801cd62:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801cd64:	4618      	mov	r0, r3
 801cd66:	46bd      	mov	sp, r7
 801cd68:	bc80      	pop	{r7}
 801cd6a:	4770      	bx	lr

0801cd6c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801cd6c:	b480      	push	{r7}
 801cd6e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801cd70:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801cd72:	4618      	mov	r0, r3
 801cd74:	46bd      	mov	sp, r7
 801cd76:	bc80      	pop	{r7}
 801cd78:	4770      	bx	lr

0801cd7a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801cd7a:	b480      	push	{r7}
 801cd7c:	b083      	sub	sp, #12
 801cd7e:	af00      	add	r7, sp, #0
 801cd80:	4603      	mov	r3, r0
 801cd82:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801cd84:	bf00      	nop
 801cd86:	370c      	adds	r7, #12
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	bc80      	pop	{r7}
 801cd8c:	4770      	bx	lr

0801cd8e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801cd8e:	b480      	push	{r7}
 801cd90:	b087      	sub	sp, #28
 801cd92:	af00      	add	r7, sp, #0
 801cd94:	60f8      	str	r0, [r7, #12]
 801cd96:	460b      	mov	r3, r1
 801cd98:	607a      	str	r2, [r7, #4]
 801cd9a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801cd9c:	f04f 33ff 	mov.w	r3, #4294967295
 801cda0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801cda2:	697b      	ldr	r3, [r7, #20]
}
 801cda4:	4618      	mov	r0, r3
 801cda6:	371c      	adds	r7, #28
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bc80      	pop	{r7}
 801cdac:	4770      	bx	lr

0801cdae <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801cdae:	b480      	push	{r7}
 801cdb0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801cdb2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	bc80      	pop	{r7}
 801cdbc:	4770      	bx	lr

0801cdbe <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801cdbe:	b480      	push	{r7}
 801cdc0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801cdc2:	bf00      	nop
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bc80      	pop	{r7}
 801cdc8:	4770      	bx	lr

0801cdca <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801cdca:	b480      	push	{r7}
 801cdcc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801cdce:	bf00      	nop
 801cdd0:	46bd      	mov	sp, r7
 801cdd2:	bc80      	pop	{r7}
 801cdd4:	4770      	bx	lr

0801cdd6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801cdd6:	b480      	push	{r7}
 801cdd8:	b083      	sub	sp, #12
 801cdda:	af00      	add	r7, sp, #0
 801cddc:	4603      	mov	r3, r0
 801cdde:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801cde0:	bf00      	nop
 801cde2:	370c      	adds	r7, #12
 801cde4:	46bd      	mov	sp, r7
 801cde6:	bc80      	pop	{r7}
 801cde8:	4770      	bx	lr
	...

0801cdec <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801cdec:	b480      	push	{r7}
 801cdee:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801cdf0:	4b04      	ldr	r3, [pc, #16]	; (801ce04 <UTIL_LPM_Init+0x18>)
 801cdf2:	2200      	movs	r2, #0
 801cdf4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801cdf6:	4b04      	ldr	r3, [pc, #16]	; (801ce08 <UTIL_LPM_Init+0x1c>)
 801cdf8:	2200      	movs	r2, #0
 801cdfa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801cdfc:	bf00      	nop
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bc80      	pop	{r7}
 801ce02:	4770      	bx	lr
 801ce04:	20001894 	.word	0x20001894
 801ce08:	20001898 	.word	0x20001898

0801ce0c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ce0c:	b480      	push	{r7}
 801ce0e:	b087      	sub	sp, #28
 801ce10:	af00      	add	r7, sp, #0
 801ce12:	6078      	str	r0, [r7, #4]
 801ce14:	460b      	mov	r3, r1
 801ce16:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce18:	f3ef 8310 	mrs	r3, PRIMASK
 801ce1c:	613b      	str	r3, [r7, #16]
  return(result);
 801ce1e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ce20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce22:	b672      	cpsid	i
}
 801ce24:	bf00      	nop
  
  switch( state )
 801ce26:	78fb      	ldrb	r3, [r7, #3]
 801ce28:	2b00      	cmp	r3, #0
 801ce2a:	d008      	beq.n	801ce3e <UTIL_LPM_SetStopMode+0x32>
 801ce2c:	2b01      	cmp	r3, #1
 801ce2e:	d10e      	bne.n	801ce4e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ce30:	4b0d      	ldr	r3, [pc, #52]	; (801ce68 <UTIL_LPM_SetStopMode+0x5c>)
 801ce32:	681a      	ldr	r2, [r3, #0]
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	4313      	orrs	r3, r2
 801ce38:	4a0b      	ldr	r2, [pc, #44]	; (801ce68 <UTIL_LPM_SetStopMode+0x5c>)
 801ce3a:	6013      	str	r3, [r2, #0]
      break;
 801ce3c:	e008      	b.n	801ce50 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	43da      	mvns	r2, r3
 801ce42:	4b09      	ldr	r3, [pc, #36]	; (801ce68 <UTIL_LPM_SetStopMode+0x5c>)
 801ce44:	681b      	ldr	r3, [r3, #0]
 801ce46:	4013      	ands	r3, r2
 801ce48:	4a07      	ldr	r2, [pc, #28]	; (801ce68 <UTIL_LPM_SetStopMode+0x5c>)
 801ce4a:	6013      	str	r3, [r2, #0]
      break;
 801ce4c:	e000      	b.n	801ce50 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ce4e:	bf00      	nop
 801ce50:	697b      	ldr	r3, [r7, #20]
 801ce52:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce54:	68fb      	ldr	r3, [r7, #12]
 801ce56:	f383 8810 	msr	PRIMASK, r3
}
 801ce5a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ce5c:	bf00      	nop
 801ce5e:	371c      	adds	r7, #28
 801ce60:	46bd      	mov	sp, r7
 801ce62:	bc80      	pop	{r7}
 801ce64:	4770      	bx	lr
 801ce66:	bf00      	nop
 801ce68:	20001894 	.word	0x20001894

0801ce6c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ce6c:	b480      	push	{r7}
 801ce6e:	b087      	sub	sp, #28
 801ce70:	af00      	add	r7, sp, #0
 801ce72:	6078      	str	r0, [r7, #4]
 801ce74:	460b      	mov	r3, r1
 801ce76:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce78:	f3ef 8310 	mrs	r3, PRIMASK
 801ce7c:	613b      	str	r3, [r7, #16]
  return(result);
 801ce7e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ce80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce82:	b672      	cpsid	i
}
 801ce84:	bf00      	nop
  
  switch(state)
 801ce86:	78fb      	ldrb	r3, [r7, #3]
 801ce88:	2b00      	cmp	r3, #0
 801ce8a:	d008      	beq.n	801ce9e <UTIL_LPM_SetOffMode+0x32>
 801ce8c:	2b01      	cmp	r3, #1
 801ce8e:	d10e      	bne.n	801ceae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ce90:	4b0d      	ldr	r3, [pc, #52]	; (801cec8 <UTIL_LPM_SetOffMode+0x5c>)
 801ce92:	681a      	ldr	r2, [r3, #0]
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	4313      	orrs	r3, r2
 801ce98:	4a0b      	ldr	r2, [pc, #44]	; (801cec8 <UTIL_LPM_SetOffMode+0x5c>)
 801ce9a:	6013      	str	r3, [r2, #0]
      break;
 801ce9c:	e008      	b.n	801ceb0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	43da      	mvns	r2, r3
 801cea2:	4b09      	ldr	r3, [pc, #36]	; (801cec8 <UTIL_LPM_SetOffMode+0x5c>)
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	4013      	ands	r3, r2
 801cea8:	4a07      	ldr	r2, [pc, #28]	; (801cec8 <UTIL_LPM_SetOffMode+0x5c>)
 801ceaa:	6013      	str	r3, [r2, #0]
      break;
 801ceac:	e000      	b.n	801ceb0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ceae:	bf00      	nop
 801ceb0:	697b      	ldr	r3, [r7, #20]
 801ceb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	f383 8810 	msr	PRIMASK, r3
}
 801ceba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cebc:	bf00      	nop
 801cebe:	371c      	adds	r7, #28
 801cec0:	46bd      	mov	sp, r7
 801cec2:	bc80      	pop	{r7}
 801cec4:	4770      	bx	lr
 801cec6:	bf00      	nop
 801cec8:	20001898 	.word	0x20001898

0801cecc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b084      	sub	sp, #16
 801ced0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ced2:	f3ef 8310 	mrs	r3, PRIMASK
 801ced6:	60bb      	str	r3, [r7, #8]
  return(result);
 801ced8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ceda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cedc:	b672      	cpsid	i
}
 801cede:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801cee0:	4b12      	ldr	r3, [pc, #72]	; (801cf2c <UTIL_LPM_EnterLowPower+0x60>)
 801cee2:	681b      	ldr	r3, [r3, #0]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d006      	beq.n	801cef6 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801cee8:	4b11      	ldr	r3, [pc, #68]	; (801cf30 <UTIL_LPM_EnterLowPower+0x64>)
 801ceea:	681b      	ldr	r3, [r3, #0]
 801ceec:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ceee:	4b10      	ldr	r3, [pc, #64]	; (801cf30 <UTIL_LPM_EnterLowPower+0x64>)
 801cef0:	685b      	ldr	r3, [r3, #4]
 801cef2:	4798      	blx	r3
 801cef4:	e010      	b.n	801cf18 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801cef6:	4b0f      	ldr	r3, [pc, #60]	; (801cf34 <UTIL_LPM_EnterLowPower+0x68>)
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d006      	beq.n	801cf0c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801cefe:	4b0c      	ldr	r3, [pc, #48]	; (801cf30 <UTIL_LPM_EnterLowPower+0x64>)
 801cf00:	689b      	ldr	r3, [r3, #8]
 801cf02:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801cf04:	4b0a      	ldr	r3, [pc, #40]	; (801cf30 <UTIL_LPM_EnterLowPower+0x64>)
 801cf06:	68db      	ldr	r3, [r3, #12]
 801cf08:	4798      	blx	r3
 801cf0a:	e005      	b.n	801cf18 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801cf0c:	4b08      	ldr	r3, [pc, #32]	; (801cf30 <UTIL_LPM_EnterLowPower+0x64>)
 801cf0e:	691b      	ldr	r3, [r3, #16]
 801cf10:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801cf12:	4b07      	ldr	r3, [pc, #28]	; (801cf30 <UTIL_LPM_EnterLowPower+0x64>)
 801cf14:	695b      	ldr	r3, [r3, #20]
 801cf16:	4798      	blx	r3
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	f383 8810 	msr	PRIMASK, r3
}
 801cf22:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801cf24:	bf00      	nop
 801cf26:	3710      	adds	r7, #16
 801cf28:	46bd      	mov	sp, r7
 801cf2a:	bd80      	pop	{r7, pc}
 801cf2c:	20001894 	.word	0x20001894
 801cf30:	0801ef64 	.word	0x0801ef64
 801cf34:	20001898 	.word	0x20001898

0801cf38 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801cf38:	b480      	push	{r7}
 801cf3a:	b087      	sub	sp, #28
 801cf3c:	af00      	add	r7, sp, #0
 801cf3e:	60f8      	str	r0, [r7, #12]
 801cf40:	60b9      	str	r1, [r7, #8]
 801cf42:	4613      	mov	r3, r2
 801cf44:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801cf4a:	68bb      	ldr	r3, [r7, #8]
 801cf4c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801cf4e:	e007      	b.n	801cf60 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801cf50:	693a      	ldr	r2, [r7, #16]
 801cf52:	1c53      	adds	r3, r2, #1
 801cf54:	613b      	str	r3, [r7, #16]
 801cf56:	697b      	ldr	r3, [r7, #20]
 801cf58:	1c59      	adds	r1, r3, #1
 801cf5a:	6179      	str	r1, [r7, #20]
 801cf5c:	7812      	ldrb	r2, [r2, #0]
 801cf5e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cf60:	88fb      	ldrh	r3, [r7, #6]
 801cf62:	1e5a      	subs	r2, r3, #1
 801cf64:	80fa      	strh	r2, [r7, #6]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d1f2      	bne.n	801cf50 <UTIL_MEM_cpy_8+0x18>
    }
}
 801cf6a:	bf00      	nop
 801cf6c:	bf00      	nop
 801cf6e:	371c      	adds	r7, #28
 801cf70:	46bd      	mov	sp, r7
 801cf72:	bc80      	pop	{r7}
 801cf74:	4770      	bx	lr

0801cf76 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801cf76:	b480      	push	{r7}
 801cf78:	b085      	sub	sp, #20
 801cf7a:	af00      	add	r7, sp, #0
 801cf7c:	6078      	str	r0, [r7, #4]
 801cf7e:	460b      	mov	r3, r1
 801cf80:	70fb      	strb	r3, [r7, #3]
 801cf82:	4613      	mov	r3, r2
 801cf84:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801cf8a:	e004      	b.n	801cf96 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801cf8c:	68fb      	ldr	r3, [r7, #12]
 801cf8e:	1c5a      	adds	r2, r3, #1
 801cf90:	60fa      	str	r2, [r7, #12]
 801cf92:	78fa      	ldrb	r2, [r7, #3]
 801cf94:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cf96:	883b      	ldrh	r3, [r7, #0]
 801cf98:	1e5a      	subs	r2, r3, #1
 801cf9a:	803a      	strh	r2, [r7, #0]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d1f5      	bne.n	801cf8c <UTIL_MEM_set_8+0x16>
  }
}
 801cfa0:	bf00      	nop
 801cfa2:	bf00      	nop
 801cfa4:	3714      	adds	r7, #20
 801cfa6:	46bd      	mov	sp, r7
 801cfa8:	bc80      	pop	{r7}
 801cfaa:	4770      	bx	lr

0801cfac <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801cfac:	b082      	sub	sp, #8
 801cfae:	b480      	push	{r7}
 801cfb0:	b087      	sub	sp, #28
 801cfb2:	af00      	add	r7, sp, #0
 801cfb4:	60f8      	str	r0, [r7, #12]
 801cfb6:	1d38      	adds	r0, r7, #4
 801cfb8:	e880 0006 	stmia.w	r0, {r1, r2}
 801cfbc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801cfbe:	2300      	movs	r3, #0
 801cfc0:	613b      	str	r3, [r7, #16]
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cfc6:	687a      	ldr	r2, [r7, #4]
 801cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfca:	4413      	add	r3, r2
 801cfcc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801cfce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cfd2:	b29a      	uxth	r2, r3
 801cfd4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cfd8:	b29b      	uxth	r3, r3
 801cfda:	4413      	add	r3, r2
 801cfdc:	b29b      	uxth	r3, r3
 801cfde:	b21b      	sxth	r3, r3
 801cfe0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cfe2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cfe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cfea:	db0a      	blt.n	801d002 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cfec:	693b      	ldr	r3, [r7, #16]
 801cfee:	3301      	adds	r3, #1
 801cff0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cff2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cff6:	b29b      	uxth	r3, r3
 801cff8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cffc:	b29b      	uxth	r3, r3
 801cffe:	b21b      	sxth	r3, r3
 801d000:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d002:	68fb      	ldr	r3, [r7, #12]
 801d004:	461a      	mov	r2, r3
 801d006:	f107 0310 	add.w	r3, r7, #16
 801d00a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d00e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d012:	68f8      	ldr	r0, [r7, #12]
 801d014:	371c      	adds	r7, #28
 801d016:	46bd      	mov	sp, r7
 801d018:	bc80      	pop	{r7}
 801d01a:	b002      	add	sp, #8
 801d01c:	4770      	bx	lr

0801d01e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d01e:	b082      	sub	sp, #8
 801d020:	b480      	push	{r7}
 801d022:	b087      	sub	sp, #28
 801d024:	af00      	add	r7, sp, #0
 801d026:	60f8      	str	r0, [r7, #12]
 801d028:	1d38      	adds	r0, r7, #4
 801d02a:	e880 0006 	stmia.w	r0, {r1, r2}
 801d02e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d030:	2300      	movs	r3, #0
 801d032:	613b      	str	r3, [r7, #16]
 801d034:	2300      	movs	r3, #0
 801d036:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d038:	687a      	ldr	r2, [r7, #4]
 801d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d03c:	1ad3      	subs	r3, r2, r3
 801d03e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d040:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d044:	b29a      	uxth	r2, r3
 801d046:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d04a:	b29b      	uxth	r3, r3
 801d04c:	1ad3      	subs	r3, r2, r3
 801d04e:	b29b      	uxth	r3, r3
 801d050:	b21b      	sxth	r3, r3
 801d052:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d054:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	da0a      	bge.n	801d072 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d05c:	693b      	ldr	r3, [r7, #16]
 801d05e:	3b01      	subs	r3, #1
 801d060:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d062:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d066:	b29b      	uxth	r3, r3
 801d068:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d06c:	b29b      	uxth	r3, r3
 801d06e:	b21b      	sxth	r3, r3
 801d070:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	461a      	mov	r2, r3
 801d076:	f107 0310 	add.w	r3, r7, #16
 801d07a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d07e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d082:	68f8      	ldr	r0, [r7, #12]
 801d084:	371c      	adds	r7, #28
 801d086:	46bd      	mov	sp, r7
 801d088:	bc80      	pop	{r7}
 801d08a:	b002      	add	sp, #8
 801d08c:	4770      	bx	lr
	...

0801d090 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b088      	sub	sp, #32
 801d094:	af02      	add	r7, sp, #8
 801d096:	463b      	mov	r3, r7
 801d098:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d09c:	2300      	movs	r3, #0
 801d09e:	60bb      	str	r3, [r7, #8]
 801d0a0:	2300      	movs	r3, #0
 801d0a2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d0a4:	4b10      	ldr	r3, [pc, #64]	; (801d0e8 <SysTimeSet+0x58>)
 801d0a6:	691b      	ldr	r3, [r3, #16]
 801d0a8:	f107 0208 	add.w	r2, r7, #8
 801d0ac:	3204      	adds	r2, #4
 801d0ae:	4610      	mov	r0, r2
 801d0b0:	4798      	blx	r3
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d0b6:	f107 0010 	add.w	r0, r7, #16
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	9300      	str	r3, [sp, #0]
 801d0be:	68bb      	ldr	r3, [r7, #8]
 801d0c0:	463a      	mov	r2, r7
 801d0c2:	ca06      	ldmia	r2, {r1, r2}
 801d0c4:	f7ff ffab 	bl	801d01e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d0c8:	4b07      	ldr	r3, [pc, #28]	; (801d0e8 <SysTimeSet+0x58>)
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	693a      	ldr	r2, [r7, #16]
 801d0ce:	4610      	mov	r0, r2
 801d0d0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d0d2:	4b05      	ldr	r3, [pc, #20]	; (801d0e8 <SysTimeSet+0x58>)
 801d0d4:	689b      	ldr	r3, [r3, #8]
 801d0d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d0da:	4610      	mov	r0, r2
 801d0dc:	4798      	blx	r3
}
 801d0de:	bf00      	nop
 801d0e0:	3718      	adds	r7, #24
 801d0e2:	46bd      	mov	sp, r7
 801d0e4:	bd80      	pop	{r7, pc}
 801d0e6:	bf00      	nop
 801d0e8:	0801f048 	.word	0x0801f048

0801d0ec <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b08a      	sub	sp, #40	; 0x28
 801d0f0:	af02      	add	r7, sp, #8
 801d0f2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	61bb      	str	r3, [r7, #24]
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	613b      	str	r3, [r7, #16]
 801d100:	2300      	movs	r3, #0
 801d102:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d104:	4b14      	ldr	r3, [pc, #80]	; (801d158 <SysTimeGet+0x6c>)
 801d106:	691b      	ldr	r3, [r3, #16]
 801d108:	f107 0218 	add.w	r2, r7, #24
 801d10c:	3204      	adds	r2, #4
 801d10e:	4610      	mov	r0, r2
 801d110:	4798      	blx	r3
 801d112:	4603      	mov	r3, r0
 801d114:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d116:	4b10      	ldr	r3, [pc, #64]	; (801d158 <SysTimeGet+0x6c>)
 801d118:	68db      	ldr	r3, [r3, #12]
 801d11a:	4798      	blx	r3
 801d11c:	4603      	mov	r3, r0
 801d11e:	b21b      	sxth	r3, r3
 801d120:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d122:	4b0d      	ldr	r3, [pc, #52]	; (801d158 <SysTimeGet+0x6c>)
 801d124:	685b      	ldr	r3, [r3, #4]
 801d126:	4798      	blx	r3
 801d128:	4603      	mov	r3, r0
 801d12a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d12c:	f107 0010 	add.w	r0, r7, #16
 801d130:	69fb      	ldr	r3, [r7, #28]
 801d132:	9300      	str	r3, [sp, #0]
 801d134:	69bb      	ldr	r3, [r7, #24]
 801d136:	f107 0208 	add.w	r2, r7, #8
 801d13a:	ca06      	ldmia	r2, {r1, r2}
 801d13c:	f7ff ff36 	bl	801cfac <SysTimeAdd>

  return sysTime;
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	461a      	mov	r2, r3
 801d144:	f107 0310 	add.w	r3, r7, #16
 801d148:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d14c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d150:	6878      	ldr	r0, [r7, #4]
 801d152:	3720      	adds	r7, #32
 801d154:	46bd      	mov	sp, r7
 801d156:	bd80      	pop	{r7, pc}
 801d158:	0801f048 	.word	0x0801f048

0801d15c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d15c:	b580      	push	{r7, lr}
 801d15e:	b084      	sub	sp, #16
 801d160:	af00      	add	r7, sp, #0
 801d162:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d164:	2300      	movs	r3, #0
 801d166:	60bb      	str	r3, [r7, #8]
 801d168:	2300      	movs	r3, #0
 801d16a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d16c:	4b0a      	ldr	r3, [pc, #40]	; (801d198 <SysTimeGetMcuTime+0x3c>)
 801d16e:	691b      	ldr	r3, [r3, #16]
 801d170:	f107 0208 	add.w	r2, r7, #8
 801d174:	3204      	adds	r2, #4
 801d176:	4610      	mov	r0, r2
 801d178:	4798      	blx	r3
 801d17a:	4603      	mov	r3, r0
 801d17c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	461a      	mov	r2, r3
 801d182:	f107 0308 	add.w	r3, r7, #8
 801d186:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d18a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d18e:	6878      	ldr	r0, [r7, #4]
 801d190:	3710      	adds	r7, #16
 801d192:	46bd      	mov	sp, r7
 801d194:	bd80      	pop	{r7, pc}
 801d196:	bf00      	nop
 801d198:	0801f048 	.word	0x0801f048

0801d19c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b088      	sub	sp, #32
 801d1a0:	af02      	add	r7, sp, #8
 801d1a2:	463b      	mov	r3, r7
 801d1a4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d1a8:	4b0f      	ldr	r3, [pc, #60]	; (801d1e8 <SysTimeToMs+0x4c>)
 801d1aa:	68db      	ldr	r3, [r3, #12]
 801d1ac:	4798      	blx	r3
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	b21b      	sxth	r3, r3
 801d1b2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d1b4:	4b0c      	ldr	r3, [pc, #48]	; (801d1e8 <SysTimeToMs+0x4c>)
 801d1b6:	685b      	ldr	r3, [r3, #4]
 801d1b8:	4798      	blx	r3
 801d1ba:	4603      	mov	r3, r0
 801d1bc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d1be:	f107 0008 	add.w	r0, r7, #8
 801d1c2:	697b      	ldr	r3, [r7, #20]
 801d1c4:	9300      	str	r3, [sp, #0]
 801d1c6:	693b      	ldr	r3, [r7, #16]
 801d1c8:	463a      	mov	r2, r7
 801d1ca:	ca06      	ldmia	r2, {r1, r2}
 801d1cc:	f7ff ff27 	bl	801d01e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d1d6:	fb02 f303 	mul.w	r3, r2, r3
 801d1da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d1de:	4413      	add	r3, r2
}
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	3718      	adds	r7, #24
 801d1e4:	46bd      	mov	sp, r7
 801d1e6:	bd80      	pop	{r7, pc}
 801d1e8:	0801f048 	.word	0x0801f048

0801d1ec <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d1ec:	b580      	push	{r7, lr}
 801d1ee:	b08a      	sub	sp, #40	; 0x28
 801d1f0:	af02      	add	r7, sp, #8
 801d1f2:	6078      	str	r0, [r7, #4]
 801d1f4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d1f6:	683b      	ldr	r3, [r7, #0]
 801d1f8:	4a19      	ldr	r2, [pc, #100]	; (801d260 <SysTimeFromMs+0x74>)
 801d1fa:	fba2 2303 	umull	r2, r3, r2, r3
 801d1fe:	099b      	lsrs	r3, r3, #6
 801d200:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d202:	69fb      	ldr	r3, [r7, #28]
 801d204:	617b      	str	r3, [r7, #20]
 801d206:	683b      	ldr	r3, [r7, #0]
 801d208:	b29a      	uxth	r2, r3
 801d20a:	69fb      	ldr	r3, [r7, #28]
 801d20c:	b29b      	uxth	r3, r3
 801d20e:	4619      	mov	r1, r3
 801d210:	0149      	lsls	r1, r1, #5
 801d212:	1ac9      	subs	r1, r1, r3
 801d214:	0089      	lsls	r1, r1, #2
 801d216:	440b      	add	r3, r1
 801d218:	00db      	lsls	r3, r3, #3
 801d21a:	b29b      	uxth	r3, r3
 801d21c:	1ad3      	subs	r3, r2, r3
 801d21e:	b29b      	uxth	r3, r3
 801d220:	b21b      	sxth	r3, r3
 801d222:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d224:	f107 030c 	add.w	r3, r7, #12
 801d228:	2200      	movs	r2, #0
 801d22a:	601a      	str	r2, [r3, #0]
 801d22c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d22e:	4b0d      	ldr	r3, [pc, #52]	; (801d264 <SysTimeFromMs+0x78>)
 801d230:	68db      	ldr	r3, [r3, #12]
 801d232:	4798      	blx	r3
 801d234:	4603      	mov	r3, r0
 801d236:	b21b      	sxth	r3, r3
 801d238:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d23a:	4b0a      	ldr	r3, [pc, #40]	; (801d264 <SysTimeFromMs+0x78>)
 801d23c:	685b      	ldr	r3, [r3, #4]
 801d23e:	4798      	blx	r3
 801d240:	4603      	mov	r3, r0
 801d242:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d244:	6878      	ldr	r0, [r7, #4]
 801d246:	693b      	ldr	r3, [r7, #16]
 801d248:	9300      	str	r3, [sp, #0]
 801d24a:	68fb      	ldr	r3, [r7, #12]
 801d24c:	f107 0214 	add.w	r2, r7, #20
 801d250:	ca06      	ldmia	r2, {r1, r2}
 801d252:	f7ff feab 	bl	801cfac <SysTimeAdd>
}
 801d256:	6878      	ldr	r0, [r7, #4]
 801d258:	3720      	adds	r7, #32
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd80      	pop	{r7, pc}
 801d25e:	bf00      	nop
 801d260:	10624dd3 	.word	0x10624dd3
 801d264:	0801f048 	.word	0x0801f048

0801d268 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d268:	b480      	push	{r7}
 801d26a:	b085      	sub	sp, #20
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d270:	2300      	movs	r3, #0
 801d272:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d274:	e00e      	b.n	801d294 <ee_skip_atoi+0x2c>
 801d276:	68fa      	ldr	r2, [r7, #12]
 801d278:	4613      	mov	r3, r2
 801d27a:	009b      	lsls	r3, r3, #2
 801d27c:	4413      	add	r3, r2
 801d27e:	005b      	lsls	r3, r3, #1
 801d280:	4618      	mov	r0, r3
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	1c59      	adds	r1, r3, #1
 801d288:	687a      	ldr	r2, [r7, #4]
 801d28a:	6011      	str	r1, [r2, #0]
 801d28c:	781b      	ldrb	r3, [r3, #0]
 801d28e:	4403      	add	r3, r0
 801d290:	3b30      	subs	r3, #48	; 0x30
 801d292:	60fb      	str	r3, [r7, #12]
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	781b      	ldrb	r3, [r3, #0]
 801d29a:	2b2f      	cmp	r3, #47	; 0x2f
 801d29c:	d904      	bls.n	801d2a8 <ee_skip_atoi+0x40>
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	781b      	ldrb	r3, [r3, #0]
 801d2a4:	2b39      	cmp	r3, #57	; 0x39
 801d2a6:	d9e6      	bls.n	801d276 <ee_skip_atoi+0xe>
  return i;
 801d2a8:	68fb      	ldr	r3, [r7, #12]
}
 801d2aa:	4618      	mov	r0, r3
 801d2ac:	3714      	adds	r7, #20
 801d2ae:	46bd      	mov	sp, r7
 801d2b0:	bc80      	pop	{r7}
 801d2b2:	4770      	bx	lr

0801d2b4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d2b4:	b480      	push	{r7}
 801d2b6:	b099      	sub	sp, #100	; 0x64
 801d2b8:	af00      	add	r7, sp, #0
 801d2ba:	60f8      	str	r0, [r7, #12]
 801d2bc:	60b9      	str	r1, [r7, #8]
 801d2be:	607a      	str	r2, [r7, #4]
 801d2c0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d2c2:	4b71      	ldr	r3, [pc, #452]	; (801d488 <ee_number+0x1d4>)
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d2c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d2ce:	2b00      	cmp	r3, #0
 801d2d0:	d002      	beq.n	801d2d8 <ee_number+0x24>
 801d2d2:	4b6e      	ldr	r3, [pc, #440]	; (801d48c <ee_number+0x1d8>)
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d2d8:	683b      	ldr	r3, [r7, #0]
 801d2da:	2b01      	cmp	r3, #1
 801d2dc:	dd02      	ble.n	801d2e4 <ee_number+0x30>
 801d2de:	683b      	ldr	r3, [r7, #0]
 801d2e0:	2b24      	cmp	r3, #36	; 0x24
 801d2e2:	dd01      	ble.n	801d2e8 <ee_number+0x34>
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	e0ca      	b.n	801d47e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d2e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d2ea:	f003 0301 	and.w	r3, r3, #1
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d001      	beq.n	801d2f6 <ee_number+0x42>
 801d2f2:	2330      	movs	r3, #48	; 0x30
 801d2f4:	e000      	b.n	801d2f8 <ee_number+0x44>
 801d2f6:	2320      	movs	r3, #32
 801d2f8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d2fc:	2300      	movs	r3, #0
 801d2fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d302:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d304:	f003 0302 	and.w	r3, r3, #2
 801d308:	2b00      	cmp	r3, #0
 801d30a:	d00b      	beq.n	801d324 <ee_number+0x70>
  {
    if (num < 0)
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	da08      	bge.n	801d324 <ee_number+0x70>
    {
      sign = '-';
 801d312:	232d      	movs	r3, #45	; 0x2d
 801d314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d318:	687b      	ldr	r3, [r7, #4]
 801d31a:	425b      	negs	r3, r3
 801d31c:	607b      	str	r3, [r7, #4]
      size--;
 801d31e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d320:	3b01      	subs	r3, #1
 801d322:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d324:	2300      	movs	r3, #0
 801d326:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d328:	687b      	ldr	r3, [r7, #4]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d11e      	bne.n	801d36c <ee_number+0xb8>
    tmp[i++] = '0';
 801d32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d330:	1c5a      	adds	r2, r3, #1
 801d332:	657a      	str	r2, [r7, #84]	; 0x54
 801d334:	3360      	adds	r3, #96	; 0x60
 801d336:	443b      	add	r3, r7
 801d338:	2230      	movs	r2, #48	; 0x30
 801d33a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d33e:	e018      	b.n	801d372 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	683a      	ldr	r2, [r7, #0]
 801d344:	fbb3 f1f2 	udiv	r1, r3, r2
 801d348:	fb01 f202 	mul.w	r2, r1, r2
 801d34c:	1a9b      	subs	r3, r3, r2
 801d34e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d350:	441a      	add	r2, r3
 801d352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d354:	1c59      	adds	r1, r3, #1
 801d356:	6579      	str	r1, [r7, #84]	; 0x54
 801d358:	7812      	ldrb	r2, [r2, #0]
 801d35a:	3360      	adds	r3, #96	; 0x60
 801d35c:	443b      	add	r3, r7
 801d35e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d362:	687a      	ldr	r2, [r7, #4]
 801d364:	683b      	ldr	r3, [r7, #0]
 801d366:	fbb2 f3f3 	udiv	r3, r2, r3
 801d36a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d1e6      	bne.n	801d340 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d372:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d376:	429a      	cmp	r2, r3
 801d378:	dd01      	ble.n	801d37e <ee_number+0xca>
 801d37a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d37c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d37e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d382:	1ad3      	subs	r3, r2, r3
 801d384:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d388:	f003 0301 	and.w	r3, r3, #1
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d112      	bne.n	801d3b6 <ee_number+0x102>
 801d390:	e00c      	b.n	801d3ac <ee_number+0xf8>
 801d392:	68fb      	ldr	r3, [r7, #12]
 801d394:	1c5a      	adds	r2, r3, #1
 801d396:	60fa      	str	r2, [r7, #12]
 801d398:	2220      	movs	r2, #32
 801d39a:	701a      	strb	r2, [r3, #0]
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	3b01      	subs	r3, #1
 801d3a0:	60bb      	str	r3, [r7, #8]
 801d3a2:	68bb      	ldr	r3, [r7, #8]
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d101      	bne.n	801d3ac <ee_number+0xf8>
 801d3a8:	68fb      	ldr	r3, [r7, #12]
 801d3aa:	e068      	b.n	801d47e <ee_number+0x1ca>
 801d3ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3ae:	1e5a      	subs	r2, r3, #1
 801d3b0:	66ba      	str	r2, [r7, #104]	; 0x68
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	dced      	bgt.n	801d392 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d3b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d01b      	beq.n	801d3f6 <ee_number+0x142>
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	1c5a      	adds	r2, r3, #1
 801d3c2:	60fa      	str	r2, [r7, #12]
 801d3c4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d3c8:	701a      	strb	r2, [r3, #0]
 801d3ca:	68bb      	ldr	r3, [r7, #8]
 801d3cc:	3b01      	subs	r3, #1
 801d3ce:	60bb      	str	r3, [r7, #8]
 801d3d0:	68bb      	ldr	r3, [r7, #8]
 801d3d2:	2b00      	cmp	r3, #0
 801d3d4:	d10f      	bne.n	801d3f6 <ee_number+0x142>
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	e051      	b.n	801d47e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	1c5a      	adds	r2, r3, #1
 801d3de:	60fa      	str	r2, [r7, #12]
 801d3e0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d3e4:	701a      	strb	r2, [r3, #0]
 801d3e6:	68bb      	ldr	r3, [r7, #8]
 801d3e8:	3b01      	subs	r3, #1
 801d3ea:	60bb      	str	r3, [r7, #8]
 801d3ec:	68bb      	ldr	r3, [r7, #8]
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d101      	bne.n	801d3f6 <ee_number+0x142>
 801d3f2:	68fb      	ldr	r3, [r7, #12]
 801d3f4:	e043      	b.n	801d47e <ee_number+0x1ca>
 801d3f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d3f8:	1e5a      	subs	r2, r3, #1
 801d3fa:	66ba      	str	r2, [r7, #104]	; 0x68
 801d3fc:	2b00      	cmp	r3, #0
 801d3fe:	dcec      	bgt.n	801d3da <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d400:	e00c      	b.n	801d41c <ee_number+0x168>
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	1c5a      	adds	r2, r3, #1
 801d406:	60fa      	str	r2, [r7, #12]
 801d408:	2230      	movs	r2, #48	; 0x30
 801d40a:	701a      	strb	r2, [r3, #0]
 801d40c:	68bb      	ldr	r3, [r7, #8]
 801d40e:	3b01      	subs	r3, #1
 801d410:	60bb      	str	r3, [r7, #8]
 801d412:	68bb      	ldr	r3, [r7, #8]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d101      	bne.n	801d41c <ee_number+0x168>
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	e030      	b.n	801d47e <ee_number+0x1ca>
 801d41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d41e:	1e5a      	subs	r2, r3, #1
 801d420:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d422:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d424:	429a      	cmp	r2, r3
 801d426:	dbec      	blt.n	801d402 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d428:	e010      	b.n	801d44c <ee_number+0x198>
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	1c5a      	adds	r2, r3, #1
 801d42e:	60fa      	str	r2, [r7, #12]
 801d430:	f107 0110 	add.w	r1, r7, #16
 801d434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d436:	440a      	add	r2, r1
 801d438:	7812      	ldrb	r2, [r2, #0]
 801d43a:	701a      	strb	r2, [r3, #0]
 801d43c:	68bb      	ldr	r3, [r7, #8]
 801d43e:	3b01      	subs	r3, #1
 801d440:	60bb      	str	r3, [r7, #8]
 801d442:	68bb      	ldr	r3, [r7, #8]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d101      	bne.n	801d44c <ee_number+0x198>
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	e018      	b.n	801d47e <ee_number+0x1ca>
 801d44c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d44e:	1e5a      	subs	r2, r3, #1
 801d450:	657a      	str	r2, [r7, #84]	; 0x54
 801d452:	2b00      	cmp	r3, #0
 801d454:	dce9      	bgt.n	801d42a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d456:	e00c      	b.n	801d472 <ee_number+0x1be>
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	1c5a      	adds	r2, r3, #1
 801d45c:	60fa      	str	r2, [r7, #12]
 801d45e:	2220      	movs	r2, #32
 801d460:	701a      	strb	r2, [r3, #0]
 801d462:	68bb      	ldr	r3, [r7, #8]
 801d464:	3b01      	subs	r3, #1
 801d466:	60bb      	str	r3, [r7, #8]
 801d468:	68bb      	ldr	r3, [r7, #8]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d101      	bne.n	801d472 <ee_number+0x1be>
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	e005      	b.n	801d47e <ee_number+0x1ca>
 801d472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d474:	1e5a      	subs	r2, r3, #1
 801d476:	66ba      	str	r2, [r7, #104]	; 0x68
 801d478:	2b00      	cmp	r3, #0
 801d47a:	dced      	bgt.n	801d458 <ee_number+0x1a4>

  return str;
 801d47c:	68fb      	ldr	r3, [r7, #12]
}
 801d47e:	4618      	mov	r0, r3
 801d480:	3764      	adds	r7, #100	; 0x64
 801d482:	46bd      	mov	sp, r7
 801d484:	bc80      	pop	{r7}
 801d486:	4770      	bx	lr
 801d488:	20000150 	.word	0x20000150
 801d48c:	20000154 	.word	0x20000154

0801d490 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b092      	sub	sp, #72	; 0x48
 801d494:	af04      	add	r7, sp, #16
 801d496:	60f8      	str	r0, [r7, #12]
 801d498:	60b9      	str	r1, [r7, #8]
 801d49a:	607a      	str	r2, [r7, #4]
 801d49c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d49e:	68bb      	ldr	r3, [r7, #8]
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	dc01      	bgt.n	801d4a8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d4a4:	2300      	movs	r3, #0
 801d4a6:	e13e      	b.n	801d726 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d4ac:	e128      	b.n	801d700 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d4ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	1ad2      	subs	r2, r2, r3
 801d4b4:	68bb      	ldr	r3, [r7, #8]
 801d4b6:	3b01      	subs	r3, #1
 801d4b8:	429a      	cmp	r2, r3
 801d4ba:	f280 812e 	bge.w	801d71a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	781b      	ldrb	r3, [r3, #0]
 801d4c2:	2b25      	cmp	r3, #37	; 0x25
 801d4c4:	d006      	beq.n	801d4d4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d4c6:	687a      	ldr	r2, [r7, #4]
 801d4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4ca:	1c59      	adds	r1, r3, #1
 801d4cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d4ce:	7812      	ldrb	r2, [r2, #0]
 801d4d0:	701a      	strb	r2, [r3, #0]
      continue;
 801d4d2:	e112      	b.n	801d6fa <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	3301      	adds	r3, #1
 801d4dc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	781b      	ldrb	r3, [r3, #0]
 801d4e2:	2b30      	cmp	r3, #48	; 0x30
 801d4e4:	d103      	bne.n	801d4ee <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d4e6:	6a3b      	ldr	r3, [r7, #32]
 801d4e8:	f043 0301 	orr.w	r3, r3, #1
 801d4ec:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d4ee:	f04f 33ff 	mov.w	r3, #4294967295
 801d4f2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	781b      	ldrb	r3, [r3, #0]
 801d4f8:	2b2f      	cmp	r3, #47	; 0x2f
 801d4fa:	d908      	bls.n	801d50e <tiny_vsnprintf_like+0x7e>
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	781b      	ldrb	r3, [r3, #0]
 801d500:	2b39      	cmp	r3, #57	; 0x39
 801d502:	d804      	bhi.n	801d50e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d504:	1d3b      	adds	r3, r7, #4
 801d506:	4618      	mov	r0, r3
 801d508:	f7ff feae 	bl	801d268 <ee_skip_atoi>
 801d50c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801d50e:	f04f 33ff 	mov.w	r3, #4294967295
 801d512:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801d514:	f04f 33ff 	mov.w	r3, #4294967295
 801d518:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801d51a:	230a      	movs	r3, #10
 801d51c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d51e:	687b      	ldr	r3, [r7, #4]
 801d520:	781b      	ldrb	r3, [r3, #0]
 801d522:	3b58      	subs	r3, #88	; 0x58
 801d524:	2b20      	cmp	r3, #32
 801d526:	f200 8094 	bhi.w	801d652 <tiny_vsnprintf_like+0x1c2>
 801d52a:	a201      	add	r2, pc, #4	; (adr r2, 801d530 <tiny_vsnprintf_like+0xa0>)
 801d52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d530:	0801d63b 	.word	0x0801d63b
 801d534:	0801d653 	.word	0x0801d653
 801d538:	0801d653 	.word	0x0801d653
 801d53c:	0801d653 	.word	0x0801d653
 801d540:	0801d653 	.word	0x0801d653
 801d544:	0801d653 	.word	0x0801d653
 801d548:	0801d653 	.word	0x0801d653
 801d54c:	0801d653 	.word	0x0801d653
 801d550:	0801d653 	.word	0x0801d653
 801d554:	0801d653 	.word	0x0801d653
 801d558:	0801d653 	.word	0x0801d653
 801d55c:	0801d5bf 	.word	0x0801d5bf
 801d560:	0801d649 	.word	0x0801d649
 801d564:	0801d653 	.word	0x0801d653
 801d568:	0801d653 	.word	0x0801d653
 801d56c:	0801d653 	.word	0x0801d653
 801d570:	0801d653 	.word	0x0801d653
 801d574:	0801d649 	.word	0x0801d649
 801d578:	0801d653 	.word	0x0801d653
 801d57c:	0801d653 	.word	0x0801d653
 801d580:	0801d653 	.word	0x0801d653
 801d584:	0801d653 	.word	0x0801d653
 801d588:	0801d653 	.word	0x0801d653
 801d58c:	0801d653 	.word	0x0801d653
 801d590:	0801d653 	.word	0x0801d653
 801d594:	0801d653 	.word	0x0801d653
 801d598:	0801d653 	.word	0x0801d653
 801d59c:	0801d5df 	.word	0x0801d5df
 801d5a0:	0801d653 	.word	0x0801d653
 801d5a4:	0801d69f 	.word	0x0801d69f
 801d5a8:	0801d653 	.word	0x0801d653
 801d5ac:	0801d653 	.word	0x0801d653
 801d5b0:	0801d643 	.word	0x0801d643
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5b6:	1c5a      	adds	r2, r3, #1
 801d5b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5ba:	2220      	movs	r2, #32
 801d5bc:	701a      	strb	r2, [r3, #0]
 801d5be:	69fb      	ldr	r3, [r7, #28]
 801d5c0:	3b01      	subs	r3, #1
 801d5c2:	61fb      	str	r3, [r7, #28]
 801d5c4:	69fb      	ldr	r3, [r7, #28]
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	dcf4      	bgt.n	801d5b4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d5ca:	683b      	ldr	r3, [r7, #0]
 801d5cc:	1d1a      	adds	r2, r3, #4
 801d5ce:	603a      	str	r2, [r7, #0]
 801d5d0:	6819      	ldr	r1, [r3, #0]
 801d5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5d4:	1c5a      	adds	r2, r3, #1
 801d5d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d5d8:	b2ca      	uxtb	r2, r1
 801d5da:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d5dc:	e08d      	b.n	801d6fa <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d5de:	683b      	ldr	r3, [r7, #0]
 801d5e0:	1d1a      	adds	r2, r3, #4
 801d5e2:	603a      	str	r2, [r7, #0]
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d101      	bne.n	801d5f2 <tiny_vsnprintf_like+0x162>
 801d5ee:	4b50      	ldr	r3, [pc, #320]	; (801d730 <tiny_vsnprintf_like+0x2a0>)
 801d5f0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d5f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d5f4:	f7e2 fdc0 	bl	8000178 <strlen>
 801d5f8:	4603      	mov	r3, r0
 801d5fa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d5fc:	e004      	b.n	801d608 <tiny_vsnprintf_like+0x178>
 801d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d600:	1c5a      	adds	r2, r3, #1
 801d602:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d604:	2220      	movs	r2, #32
 801d606:	701a      	strb	r2, [r3, #0]
 801d608:	69fb      	ldr	r3, [r7, #28]
 801d60a:	1e5a      	subs	r2, r3, #1
 801d60c:	61fa      	str	r2, [r7, #28]
 801d60e:	693a      	ldr	r2, [r7, #16]
 801d610:	429a      	cmp	r2, r3
 801d612:	dbf4      	blt.n	801d5fe <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d614:	2300      	movs	r3, #0
 801d616:	62bb      	str	r3, [r7, #40]	; 0x28
 801d618:	e00a      	b.n	801d630 <tiny_vsnprintf_like+0x1a0>
 801d61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d61c:	1c53      	adds	r3, r2, #1
 801d61e:	627b      	str	r3, [r7, #36]	; 0x24
 801d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d622:	1c59      	adds	r1, r3, #1
 801d624:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d626:	7812      	ldrb	r2, [r2, #0]
 801d628:	701a      	strb	r2, [r3, #0]
 801d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d62c:	3301      	adds	r3, #1
 801d62e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d632:	693b      	ldr	r3, [r7, #16]
 801d634:	429a      	cmp	r2, r3
 801d636:	dbf0      	blt.n	801d61a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d638:	e05f      	b.n	801d6fa <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801d63a:	6a3b      	ldr	r3, [r7, #32]
 801d63c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d640:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d642:	2310      	movs	r3, #16
 801d644:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d646:	e02b      	b.n	801d6a0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d648:	6a3b      	ldr	r3, [r7, #32]
 801d64a:	f043 0302 	orr.w	r3, r3, #2
 801d64e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d650:	e025      	b.n	801d69e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	781b      	ldrb	r3, [r3, #0]
 801d656:	2b25      	cmp	r3, #37	; 0x25
 801d658:	d004      	beq.n	801d664 <tiny_vsnprintf_like+0x1d4>
 801d65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d65c:	1c5a      	adds	r2, r3, #1
 801d65e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d660:	2225      	movs	r2, #37	; 0x25
 801d662:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	1ad2      	subs	r2, r2, r3
 801d66a:	68bb      	ldr	r3, [r7, #8]
 801d66c:	3b01      	subs	r3, #1
 801d66e:	429a      	cmp	r2, r3
 801d670:	da16      	bge.n	801d6a0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	781b      	ldrb	r3, [r3, #0]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d006      	beq.n	801d688 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d67a:	687a      	ldr	r2, [r7, #4]
 801d67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d67e:	1c59      	adds	r1, r3, #1
 801d680:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d682:	7812      	ldrb	r2, [r2, #0]
 801d684:	701a      	strb	r2, [r3, #0]
 801d686:	e002      	b.n	801d68e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	3b01      	subs	r3, #1
 801d68c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d690:	68fb      	ldr	r3, [r7, #12]
 801d692:	1ad2      	subs	r2, r2, r3
 801d694:	68bb      	ldr	r3, [r7, #8]
 801d696:	3b01      	subs	r3, #1
 801d698:	429a      	cmp	r2, r3
 801d69a:	db2d      	blt.n	801d6f8 <tiny_vsnprintf_like+0x268>
 801d69c:	e000      	b.n	801d6a0 <tiny_vsnprintf_like+0x210>
        break;
 801d69e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d6a0:	697b      	ldr	r3, [r7, #20]
 801d6a2:	2b6c      	cmp	r3, #108	; 0x6c
 801d6a4:	d105      	bne.n	801d6b2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d6a6:	683b      	ldr	r3, [r7, #0]
 801d6a8:	1d1a      	adds	r2, r3, #4
 801d6aa:	603a      	str	r2, [r7, #0]
 801d6ac:	681b      	ldr	r3, [r3, #0]
 801d6ae:	637b      	str	r3, [r7, #52]	; 0x34
 801d6b0:	e00f      	b.n	801d6d2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d6b2:	6a3b      	ldr	r3, [r7, #32]
 801d6b4:	f003 0302 	and.w	r3, r3, #2
 801d6b8:	2b00      	cmp	r3, #0
 801d6ba:	d005      	beq.n	801d6c8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	1d1a      	adds	r2, r3, #4
 801d6c0:	603a      	str	r2, [r7, #0]
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	637b      	str	r3, [r7, #52]	; 0x34
 801d6c6:	e004      	b.n	801d6d2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	1d1a      	adds	r2, r3, #4
 801d6cc:	603a      	str	r2, [r7, #0]
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d6d2:	68bb      	ldr	r3, [r7, #8]
 801d6d4:	1e5a      	subs	r2, r3, #1
 801d6d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	1acb      	subs	r3, r1, r3
 801d6dc:	1ad1      	subs	r1, r2, r3
 801d6de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d6e0:	6a3b      	ldr	r3, [r7, #32]
 801d6e2:	9302      	str	r3, [sp, #8]
 801d6e4:	69bb      	ldr	r3, [r7, #24]
 801d6e6:	9301      	str	r3, [sp, #4]
 801d6e8:	69fb      	ldr	r3, [r7, #28]
 801d6ea:	9300      	str	r3, [sp, #0]
 801d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d6f0:	f7ff fde0 	bl	801d2b4 <ee_number>
 801d6f4:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d6f6:	e000      	b.n	801d6fa <tiny_vsnprintf_like+0x26a>
        continue;
 801d6f8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d6fa:	687b      	ldr	r3, [r7, #4]
 801d6fc:	3301      	adds	r3, #1
 801d6fe:	607b      	str	r3, [r7, #4]
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	781b      	ldrb	r3, [r3, #0]
 801d704:	2b00      	cmp	r3, #0
 801d706:	f47f aed2 	bne.w	801d4ae <tiny_vsnprintf_like+0x1e>
 801d70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	1ad2      	subs	r2, r2, r3
 801d710:	68bb      	ldr	r3, [r7, #8]
 801d712:	3b01      	subs	r3, #1
 801d714:	429a      	cmp	r2, r3
 801d716:	f6bf aeca 	bge.w	801d4ae <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d71c:	2200      	movs	r2, #0
 801d71e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	1ad3      	subs	r3, r2, r3
}
 801d726:	4618      	mov	r0, r3
 801d728:	3738      	adds	r7, #56	; 0x38
 801d72a:	46bd      	mov	sp, r7
 801d72c:	bd80      	pop	{r7, pc}
 801d72e:	bf00      	nop
 801d730:	0801ef5c 	.word	0x0801ef5c

0801d734 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801d734:	b580      	push	{r7, lr}
 801d736:	b090      	sub	sp, #64	; 0x40
 801d738:	af00      	add	r7, sp, #0
 801d73a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801d73c:	4b73      	ldr	r3, [pc, #460]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801d742:	4b72      	ldr	r3, [pc, #456]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d744:	681a      	ldr	r2, [r3, #0]
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	4013      	ands	r3, r2
 801d74a:	4a70      	ldr	r2, [pc, #448]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d74c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801d74e:	4b70      	ldr	r3, [pc, #448]	; (801d910 <UTIL_SEQ_Run+0x1dc>)
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d754:	4b6f      	ldr	r3, [pc, #444]	; (801d914 <UTIL_SEQ_Run+0x1e0>)
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d75a:	4b6f      	ldr	r3, [pc, #444]	; (801d918 <UTIL_SEQ_Run+0x1e4>)
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801d760:	4b6e      	ldr	r3, [pc, #440]	; (801d91c <UTIL_SEQ_Run+0x1e8>)
 801d762:	681b      	ldr	r3, [r3, #0]
 801d764:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d766:	e08d      	b.n	801d884 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801d768:	2300      	movs	r3, #0
 801d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d76c:	e002      	b.n	801d774 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801d76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d770:	3301      	adds	r3, #1
 801d772:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d774:	4a6a      	ldr	r2, [pc, #424]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d778:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d77e:	401a      	ands	r2, r3
 801d780:	4b62      	ldr	r3, [pc, #392]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	4013      	ands	r3, r2
 801d786:	2b00      	cmp	r3, #0
 801d788:	d0f1      	beq.n	801d76e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801d78a:	4a65      	ldr	r2, [pc, #404]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d78e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d794:	401a      	ands	r2, r3
 801d796:	4b5d      	ldr	r3, [pc, #372]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	4013      	ands	r3, r2
 801d79c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801d79e:	4a60      	ldr	r2, [pc, #384]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7a2:	00db      	lsls	r3, r3, #3
 801d7a4:	4413      	add	r3, r2
 801d7a6:	685a      	ldr	r2, [r3, #4]
 801d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7aa:	4013      	ands	r3, r2
 801d7ac:	2b00      	cmp	r3, #0
 801d7ae:	d106      	bne.n	801d7be <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801d7b0:	4a5b      	ldr	r2, [pc, #364]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7b4:	00db      	lsls	r3, r3, #3
 801d7b6:	4413      	add	r3, r2
 801d7b8:	f04f 32ff 	mov.w	r2, #4294967295
 801d7bc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801d7be:	4a58      	ldr	r2, [pc, #352]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7c2:	00db      	lsls	r3, r3, #3
 801d7c4:	4413      	add	r3, r2
 801d7c6:	685a      	ldr	r2, [r3, #4]
 801d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7ca:	4013      	ands	r3, r2
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f000 f907 	bl	801d9e0 <SEQ_BitPosition>
 801d7d2:	4603      	mov	r3, r0
 801d7d4:	461a      	mov	r2, r3
 801d7d6:	4b53      	ldr	r3, [pc, #332]	; (801d924 <UTIL_SEQ_Run+0x1f0>)
 801d7d8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801d7da:	4a51      	ldr	r2, [pc, #324]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7de:	00db      	lsls	r3, r3, #3
 801d7e0:	4413      	add	r3, r2
 801d7e2:	685a      	ldr	r2, [r3, #4]
 801d7e4:	4b4f      	ldr	r3, [pc, #316]	; (801d924 <UTIL_SEQ_Run+0x1f0>)
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	2101      	movs	r1, #1
 801d7ea:	fa01 f303 	lsl.w	r3, r1, r3
 801d7ee:	43db      	mvns	r3, r3
 801d7f0:	401a      	ands	r2, r3
 801d7f2:	494b      	ldr	r1, [pc, #300]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d7f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7f6:	00db      	lsls	r3, r3, #3
 801d7f8:	440b      	add	r3, r1
 801d7fa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801d800:	61bb      	str	r3, [r7, #24]
  return(result);
 801d802:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d804:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801d806:	b672      	cpsid	i
}
 801d808:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801d80a:	4b46      	ldr	r3, [pc, #280]	; (801d924 <UTIL_SEQ_Run+0x1f0>)
 801d80c:	681b      	ldr	r3, [r3, #0]
 801d80e:	2201      	movs	r2, #1
 801d810:	fa02 f303 	lsl.w	r3, r2, r3
 801d814:	43da      	mvns	r2, r3
 801d816:	4b3e      	ldr	r3, [pc, #248]	; (801d910 <UTIL_SEQ_Run+0x1dc>)
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	4013      	ands	r3, r2
 801d81c:	4a3c      	ldr	r2, [pc, #240]	; (801d910 <UTIL_SEQ_Run+0x1dc>)
 801d81e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d820:	2301      	movs	r3, #1
 801d822:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d824:	e013      	b.n	801d84e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801d826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d828:	3b01      	subs	r3, #1
 801d82a:	4a3d      	ldr	r2, [pc, #244]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d82c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801d830:	4b3c      	ldr	r3, [pc, #240]	; (801d924 <UTIL_SEQ_Run+0x1f0>)
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	2201      	movs	r2, #1
 801d836:	fa02 f303 	lsl.w	r3, r2, r3
 801d83a:	43da      	mvns	r2, r3
 801d83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d83e:	3b01      	subs	r3, #1
 801d840:	400a      	ands	r2, r1
 801d842:	4937      	ldr	r1, [pc, #220]	; (801d920 <UTIL_SEQ_Run+0x1ec>)
 801d844:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d84a:	3b01      	subs	r3, #1
 801d84c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d850:	2b00      	cmp	r3, #0
 801d852:	d1e8      	bne.n	801d826 <UTIL_SEQ_Run+0xf2>
 801d854:	6a3b      	ldr	r3, [r7, #32]
 801d856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d858:	697b      	ldr	r3, [r7, #20]
 801d85a:	f383 8810 	msr	PRIMASK, r3
}
 801d85e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801d860:	4b30      	ldr	r3, [pc, #192]	; (801d924 <UTIL_SEQ_Run+0x1f0>)
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	4a30      	ldr	r2, [pc, #192]	; (801d928 <UTIL_SEQ_Run+0x1f4>)
 801d866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d86a:	4798      	blx	r3

    local_taskset = TaskSet;
 801d86c:	4b28      	ldr	r3, [pc, #160]	; (801d910 <UTIL_SEQ_Run+0x1dc>)
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801d872:	4b28      	ldr	r3, [pc, #160]	; (801d914 <UTIL_SEQ_Run+0x1e0>)
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801d878:	4b27      	ldr	r3, [pc, #156]	; (801d918 <UTIL_SEQ_Run+0x1e4>)
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801d87e:	4b27      	ldr	r3, [pc, #156]	; (801d91c <UTIL_SEQ_Run+0x1e8>)
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d888:	401a      	ands	r2, r3
 801d88a:	4b20      	ldr	r3, [pc, #128]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	4013      	ands	r3, r2
 801d890:	2b00      	cmp	r3, #0
 801d892:	d005      	beq.n	801d8a0 <UTIL_SEQ_Run+0x16c>
 801d894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d898:	4013      	ands	r3, r2
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	f43f af64 	beq.w	801d768 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801d8a0:	4b20      	ldr	r3, [pc, #128]	; (801d924 <UTIL_SEQ_Run+0x1f0>)
 801d8a2:	f04f 32ff 	mov.w	r2, #4294967295
 801d8a6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801d8a8:	f000 f88e 	bl	801d9c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8ac:	f3ef 8310 	mrs	r3, PRIMASK
 801d8b0:	613b      	str	r3, [r7, #16]
  return(result);
 801d8b2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d8b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d8b6:	b672      	cpsid	i
}
 801d8b8:	bf00      	nop
  local_taskset = TaskSet;
 801d8ba:	4b15      	ldr	r3, [pc, #84]	; (801d910 <UTIL_SEQ_Run+0x1dc>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d8c0:	4b14      	ldr	r3, [pc, #80]	; (801d914 <UTIL_SEQ_Run+0x1e0>)
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d8c6:	4b14      	ldr	r3, [pc, #80]	; (801d918 <UTIL_SEQ_Run+0x1e4>)
 801d8c8:	681b      	ldr	r3, [r3, #0]
 801d8ca:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8d0:	401a      	ands	r2, r3
 801d8d2:	4b0e      	ldr	r3, [pc, #56]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	4013      	ands	r3, r2
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d107      	bne.n	801d8ec <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d8dc:	4b0f      	ldr	r3, [pc, #60]	; (801d91c <UTIL_SEQ_Run+0x1e8>)
 801d8de:	681a      	ldr	r2, [r3, #0]
 801d8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8e2:	4013      	ands	r3, r2
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d101      	bne.n	801d8ec <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801d8e8:	f7e4 feb2 	bl	8002650 <UTIL_SEQ_Idle>
 801d8ec:	69fb      	ldr	r3, [r7, #28]
 801d8ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	f383 8810 	msr	PRIMASK, r3
}
 801d8f6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801d8f8:	f000 f86c 	bl	801d9d4 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801d8fc:	4a03      	ldr	r2, [pc, #12]	; (801d90c <UTIL_SEQ_Run+0x1d8>)
 801d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d900:	6013      	str	r3, [r2, #0]

  return;
 801d902:	bf00      	nop
}
 801d904:	3740      	adds	r7, #64	; 0x40
 801d906:	46bd      	mov	sp, r7
 801d908:	bd80      	pop	{r7, pc}
 801d90a:	bf00      	nop
 801d90c:	2000015c 	.word	0x2000015c
 801d910:	2000189c 	.word	0x2000189c
 801d914:	200018a0 	.word	0x200018a0
 801d918:	20000158 	.word	0x20000158
 801d91c:	200018a4 	.word	0x200018a4
 801d920:	200018bc 	.word	0x200018bc
 801d924:	200018a8 	.word	0x200018a8
 801d928:	200018ac 	.word	0x200018ac

0801d92c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b088      	sub	sp, #32
 801d930:	af00      	add	r7, sp, #0
 801d932:	60f8      	str	r0, [r7, #12]
 801d934:	60b9      	str	r1, [r7, #8]
 801d936:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d938:	f3ef 8310 	mrs	r3, PRIMASK
 801d93c:	617b      	str	r3, [r7, #20]
  return(result);
 801d93e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d942:	b672      	cpsid	i
}
 801d944:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d946:	68f8      	ldr	r0, [r7, #12]
 801d948:	f000 f84a 	bl	801d9e0 <SEQ_BitPosition>
 801d94c:	4603      	mov	r3, r0
 801d94e:	4619      	mov	r1, r3
 801d950:	4a06      	ldr	r2, [pc, #24]	; (801d96c <UTIL_SEQ_RegTask+0x40>)
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d958:	69fb      	ldr	r3, [r7, #28]
 801d95a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d95c:	69bb      	ldr	r3, [r7, #24]
 801d95e:	f383 8810 	msr	PRIMASK, r3
}
 801d962:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d964:	bf00      	nop
}
 801d966:	3720      	adds	r7, #32
 801d968:	46bd      	mov	sp, r7
 801d96a:	bd80      	pop	{r7, pc}
 801d96c:	200018ac 	.word	0x200018ac

0801d970 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d970:	b480      	push	{r7}
 801d972:	b087      	sub	sp, #28
 801d974:	af00      	add	r7, sp, #0
 801d976:	6078      	str	r0, [r7, #4]
 801d978:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d97a:	f3ef 8310 	mrs	r3, PRIMASK
 801d97e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d980:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d984:	b672      	cpsid	i
}
 801d986:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d988:	4b0d      	ldr	r3, [pc, #52]	; (801d9c0 <UTIL_SEQ_SetTask+0x50>)
 801d98a:	681a      	ldr	r2, [r3, #0]
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	4313      	orrs	r3, r2
 801d990:	4a0b      	ldr	r2, [pc, #44]	; (801d9c0 <UTIL_SEQ_SetTask+0x50>)
 801d992:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d994:	4a0b      	ldr	r2, [pc, #44]	; (801d9c4 <UTIL_SEQ_SetTask+0x54>)
 801d996:	683b      	ldr	r3, [r7, #0]
 801d998:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d99c:	687b      	ldr	r3, [r7, #4]
 801d99e:	431a      	orrs	r2, r3
 801d9a0:	4908      	ldr	r1, [pc, #32]	; (801d9c4 <UTIL_SEQ_SetTask+0x54>)
 801d9a2:	683b      	ldr	r3, [r7, #0]
 801d9a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d9a8:	697b      	ldr	r3, [r7, #20]
 801d9aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9ac:	693b      	ldr	r3, [r7, #16]
 801d9ae:	f383 8810 	msr	PRIMASK, r3
}
 801d9b2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d9b4:	bf00      	nop
}
 801d9b6:	371c      	adds	r7, #28
 801d9b8:	46bd      	mov	sp, r7
 801d9ba:	bc80      	pop	{r7}
 801d9bc:	4770      	bx	lr
 801d9be:	bf00      	nop
 801d9c0:	2000189c 	.word	0x2000189c
 801d9c4:	200018bc 	.word	0x200018bc

0801d9c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801d9c8:	b480      	push	{r7}
 801d9ca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d9cc:	bf00      	nop
}
 801d9ce:	46bd      	mov	sp, r7
 801d9d0:	bc80      	pop	{r7}
 801d9d2:	4770      	bx	lr

0801d9d4 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801d9d4:	b480      	push	{r7}
 801d9d6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801d9d8:	bf00      	nop
}
 801d9da:	46bd      	mov	sp, r7
 801d9dc:	bc80      	pop	{r7}
 801d9de:	4770      	bx	lr

0801d9e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d9e0:	b480      	push	{r7}
 801d9e2:	b085      	sub	sp, #20
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d9e8:	2300      	movs	r3, #0
 801d9ea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d9f0:	68bb      	ldr	r3, [r7, #8]
 801d9f2:	0c1b      	lsrs	r3, r3, #16
 801d9f4:	041b      	lsls	r3, r3, #16
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d104      	bne.n	801da04 <SEQ_BitPosition+0x24>
 801d9fa:	2310      	movs	r3, #16
 801d9fc:	73fb      	strb	r3, [r7, #15]
 801d9fe:	68bb      	ldr	r3, [r7, #8]
 801da00:	041b      	lsls	r3, r3, #16
 801da02:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801da04:	68bb      	ldr	r3, [r7, #8]
 801da06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801da0a:	2b00      	cmp	r3, #0
 801da0c:	d105      	bne.n	801da1a <SEQ_BitPosition+0x3a>
 801da0e:	7bfb      	ldrb	r3, [r7, #15]
 801da10:	3308      	adds	r3, #8
 801da12:	73fb      	strb	r3, [r7, #15]
 801da14:	68bb      	ldr	r3, [r7, #8]
 801da16:	021b      	lsls	r3, r3, #8
 801da18:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801da20:	2b00      	cmp	r3, #0
 801da22:	d105      	bne.n	801da30 <SEQ_BitPosition+0x50>
 801da24:	7bfb      	ldrb	r3, [r7, #15]
 801da26:	3304      	adds	r3, #4
 801da28:	73fb      	strb	r3, [r7, #15]
 801da2a:	68bb      	ldr	r3, [r7, #8]
 801da2c:	011b      	lsls	r3, r3, #4
 801da2e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801da30:	68bb      	ldr	r3, [r7, #8]
 801da32:	0f1b      	lsrs	r3, r3, #28
 801da34:	4a06      	ldr	r2, [pc, #24]	; (801da50 <SEQ_BitPosition+0x70>)
 801da36:	5cd2      	ldrb	r2, [r2, r3]
 801da38:	7bfb      	ldrb	r3, [r7, #15]
 801da3a:	4413      	add	r3, r2
 801da3c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801da3e:	7bfb      	ldrb	r3, [r7, #15]
 801da40:	f1c3 031f 	rsb	r3, r3, #31
 801da44:	b2db      	uxtb	r3, r3
}
 801da46:	4618      	mov	r0, r3
 801da48:	3714      	adds	r7, #20
 801da4a:	46bd      	mov	sp, r7
 801da4c:	bc80      	pop	{r7}
 801da4e:	4770      	bx	lr
 801da50:	0801f5a0 	.word	0x0801f5a0

0801da54 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801da54:	b580      	push	{r7, lr}
 801da56:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801da58:	4b04      	ldr	r3, [pc, #16]	; (801da6c <UTIL_TIMER_Init+0x18>)
 801da5a:	2200      	movs	r2, #0
 801da5c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801da5e:	4b04      	ldr	r3, [pc, #16]	; (801da70 <UTIL_TIMER_Init+0x1c>)
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	4798      	blx	r3
 801da64:	4603      	mov	r3, r0
}
 801da66:	4618      	mov	r0, r3
 801da68:	bd80      	pop	{r7, pc}
 801da6a:	bf00      	nop
 801da6c:	200018c4 	.word	0x200018c4
 801da70:	0801f01c 	.word	0x0801f01c

0801da74 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801da74:	b580      	push	{r7, lr}
 801da76:	b084      	sub	sp, #16
 801da78:	af00      	add	r7, sp, #0
 801da7a:	60f8      	str	r0, [r7, #12]
 801da7c:	60b9      	str	r1, [r7, #8]
 801da7e:	603b      	str	r3, [r7, #0]
 801da80:	4613      	mov	r3, r2
 801da82:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801da84:	68fb      	ldr	r3, [r7, #12]
 801da86:	2b00      	cmp	r3, #0
 801da88:	d023      	beq.n	801dad2 <UTIL_TIMER_Create+0x5e>
 801da8a:	683b      	ldr	r3, [r7, #0]
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d020      	beq.n	801dad2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	2200      	movs	r2, #0
 801da94:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801da96:	4b11      	ldr	r3, [pc, #68]	; (801dadc <UTIL_TIMER_Create+0x68>)
 801da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da9a:	68b8      	ldr	r0, [r7, #8]
 801da9c:	4798      	blx	r3
 801da9e:	4602      	mov	r2, r0
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	2200      	movs	r2, #0
 801daa8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	2200      	movs	r2, #0
 801daae:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801dab0:	68fb      	ldr	r3, [r7, #12]
 801dab2:	2200      	movs	r2, #0
 801dab4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	683a      	ldr	r2, [r7, #0]
 801daba:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801dabc:	68fb      	ldr	r3, [r7, #12]
 801dabe:	69ba      	ldr	r2, [r7, #24]
 801dac0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	79fa      	ldrb	r2, [r7, #7]
 801dac6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801dac8:	68fb      	ldr	r3, [r7, #12]
 801daca:	2200      	movs	r2, #0
 801dacc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801dace:	2300      	movs	r3, #0
 801dad0:	e000      	b.n	801dad4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801dad2:	2301      	movs	r3, #1
  }
}
 801dad4:	4618      	mov	r0, r3
 801dad6:	3710      	adds	r7, #16
 801dad8:	46bd      	mov	sp, r7
 801dada:	bd80      	pop	{r7, pc}
 801dadc:	0801f01c 	.word	0x0801f01c

0801dae0 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801dae0:	b580      	push	{r7, lr}
 801dae2:	b08a      	sub	sp, #40	; 0x28
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dae8:	2300      	movs	r3, #0
 801daea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d056      	beq.n	801dba2 <UTIL_TIMER_Start+0xc2>
 801daf4:	6878      	ldr	r0, [r7, #4]
 801daf6:	f000 f9a9 	bl	801de4c <TimerExists>
 801dafa:	4603      	mov	r3, r0
 801dafc:	f083 0301 	eor.w	r3, r3, #1
 801db00:	b2db      	uxtb	r3, r3
 801db02:	2b00      	cmp	r3, #0
 801db04:	d04d      	beq.n	801dba2 <UTIL_TIMER_Start+0xc2>
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	7a5b      	ldrb	r3, [r3, #9]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d149      	bne.n	801dba2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801db0e:	f3ef 8310 	mrs	r3, PRIMASK
 801db12:	613b      	str	r3, [r7, #16]
  return(result);
 801db14:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801db16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801db18:	b672      	cpsid	i
}
 801db1a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	685b      	ldr	r3, [r3, #4]
 801db20:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801db22:	4b24      	ldr	r3, [pc, #144]	; (801dbb4 <UTIL_TIMER_Start+0xd4>)
 801db24:	6a1b      	ldr	r3, [r3, #32]
 801db26:	4798      	blx	r3
 801db28:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801db2a:	6a3a      	ldr	r2, [r7, #32]
 801db2c:	69bb      	ldr	r3, [r7, #24]
 801db2e:	429a      	cmp	r2, r3
 801db30:	d201      	bcs.n	801db36 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801db32:	69bb      	ldr	r3, [r7, #24]
 801db34:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	6a3a      	ldr	r2, [r7, #32]
 801db3a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	2200      	movs	r2, #0
 801db40:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	2201      	movs	r2, #1
 801db46:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	2200      	movs	r2, #0
 801db4c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801db4e:	4b1a      	ldr	r3, [pc, #104]	; (801dbb8 <UTIL_TIMER_Start+0xd8>)
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d106      	bne.n	801db64 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801db56:	4b17      	ldr	r3, [pc, #92]	; (801dbb4 <UTIL_TIMER_Start+0xd4>)
 801db58:	691b      	ldr	r3, [r3, #16]
 801db5a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801db5c:	6878      	ldr	r0, [r7, #4]
 801db5e:	f000 f9eb 	bl	801df38 <TimerInsertNewHeadTimer>
 801db62:	e017      	b.n	801db94 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801db64:	4b13      	ldr	r3, [pc, #76]	; (801dbb4 <UTIL_TIMER_Start+0xd4>)
 801db66:	699b      	ldr	r3, [r3, #24]
 801db68:	4798      	blx	r3
 801db6a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	681a      	ldr	r2, [r3, #0]
 801db70:	697b      	ldr	r3, [r7, #20]
 801db72:	441a      	add	r2, r3
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801db78:	687b      	ldr	r3, [r7, #4]
 801db7a:	681a      	ldr	r2, [r3, #0]
 801db7c:	4b0e      	ldr	r3, [pc, #56]	; (801dbb8 <UTIL_TIMER_Start+0xd8>)
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	429a      	cmp	r2, r3
 801db84:	d203      	bcs.n	801db8e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801db86:	6878      	ldr	r0, [r7, #4]
 801db88:	f000 f9d6 	bl	801df38 <TimerInsertNewHeadTimer>
 801db8c:	e002      	b.n	801db94 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801db8e:	6878      	ldr	r0, [r7, #4]
 801db90:	f000 f9a2 	bl	801ded8 <TimerInsertTimer>
 801db94:	69fb      	ldr	r3, [r7, #28]
 801db96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	f383 8810 	msr	PRIMASK, r3
}
 801db9e:	bf00      	nop
  {
 801dba0:	e002      	b.n	801dba8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801dba2:	2301      	movs	r3, #1
 801dba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801dba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801dbac:	4618      	mov	r0, r3
 801dbae:	3728      	adds	r7, #40	; 0x28
 801dbb0:	46bd      	mov	sp, r7
 801dbb2:	bd80      	pop	{r7, pc}
 801dbb4:	0801f01c 	.word	0x0801f01c
 801dbb8:	200018c4 	.word	0x200018c4

0801dbbc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801dbbc:	b580      	push	{r7, lr}
 801dbbe:	b088      	sub	sp, #32
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d05b      	beq.n	801dc86 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbce:	f3ef 8310 	mrs	r3, PRIMASK
 801dbd2:	60fb      	str	r3, [r7, #12]
  return(result);
 801dbd4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dbd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801dbd8:	b672      	cpsid	i
}
 801dbda:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801dbdc:	4b2d      	ldr	r3, [pc, #180]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dbde:	681b      	ldr	r3, [r3, #0]
 801dbe0:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801dbe2:	4b2c      	ldr	r3, [pc, #176]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dbe4:	681b      	ldr	r3, [r3, #0]
 801dbe6:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801dbe8:	687b      	ldr	r3, [r7, #4]
 801dbea:	2201      	movs	r2, #1
 801dbec:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801dbee:	4b29      	ldr	r3, [pc, #164]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d041      	beq.n	801dc7a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	2200      	movs	r2, #0
 801dbfa:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801dbfc:	4b25      	ldr	r3, [pc, #148]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	687a      	ldr	r2, [r7, #4]
 801dc02:	429a      	cmp	r2, r3
 801dc04:	d134      	bne.n	801dc70 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801dc06:	4b23      	ldr	r3, [pc, #140]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	2200      	movs	r2, #0
 801dc0c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801dc0e:	4b21      	ldr	r3, [pc, #132]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	695b      	ldr	r3, [r3, #20]
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d00a      	beq.n	801dc2e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801dc18:	4b1e      	ldr	r3, [pc, #120]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	695b      	ldr	r3, [r3, #20]
 801dc1e:	4a1d      	ldr	r2, [pc, #116]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dc20:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801dc22:	4b1c      	ldr	r3, [pc, #112]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	4618      	mov	r0, r3
 801dc28:	f000 f92c 	bl	801de84 <TimerSetTimeout>
 801dc2c:	e023      	b.n	801dc76 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801dc2e:	4b1a      	ldr	r3, [pc, #104]	; (801dc98 <UTIL_TIMER_Stop+0xdc>)
 801dc30:	68db      	ldr	r3, [r3, #12]
 801dc32:	4798      	blx	r3
            TimerListHead = NULL;
 801dc34:	4b17      	ldr	r3, [pc, #92]	; (801dc94 <UTIL_TIMER_Stop+0xd8>)
 801dc36:	2200      	movs	r2, #0
 801dc38:	601a      	str	r2, [r3, #0]
 801dc3a:	e01c      	b.n	801dc76 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801dc3c:	697a      	ldr	r2, [r7, #20]
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	429a      	cmp	r2, r3
 801dc42:	d110      	bne.n	801dc66 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801dc44:	697b      	ldr	r3, [r7, #20]
 801dc46:	695b      	ldr	r3, [r3, #20]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d006      	beq.n	801dc5a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801dc4c:	697b      	ldr	r3, [r7, #20]
 801dc4e:	695b      	ldr	r3, [r3, #20]
 801dc50:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801dc52:	69bb      	ldr	r3, [r7, #24]
 801dc54:	697a      	ldr	r2, [r7, #20]
 801dc56:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801dc58:	e00d      	b.n	801dc76 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801dc5a:	2300      	movs	r3, #0
 801dc5c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801dc5e:	69bb      	ldr	r3, [r7, #24]
 801dc60:	697a      	ldr	r2, [r7, #20]
 801dc62:	615a      	str	r2, [r3, #20]
            break;
 801dc64:	e007      	b.n	801dc76 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801dc66:	697b      	ldr	r3, [r7, #20]
 801dc68:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801dc6a:	697b      	ldr	r3, [r7, #20]
 801dc6c:	695b      	ldr	r3, [r3, #20]
 801dc6e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801dc70:	697b      	ldr	r3, [r7, #20]
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d1e2      	bne.n	801dc3c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801dc76:	2300      	movs	r3, #0
 801dc78:	77fb      	strb	r3, [r7, #31]
 801dc7a:	693b      	ldr	r3, [r7, #16]
 801dc7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc7e:	68bb      	ldr	r3, [r7, #8]
 801dc80:	f383 8810 	msr	PRIMASK, r3
}
 801dc84:	e001      	b.n	801dc8a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801dc86:	2301      	movs	r3, #1
 801dc88:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801dc8a:	7ffb      	ldrb	r3, [r7, #31]
}
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	3720      	adds	r7, #32
 801dc90:	46bd      	mov	sp, r7
 801dc92:	bd80      	pop	{r7, pc}
 801dc94:	200018c4 	.word	0x200018c4
 801dc98:	0801f01c 	.word	0x0801f01c

0801dc9c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801dc9c:	b580      	push	{r7, lr}
 801dc9e:	b084      	sub	sp, #16
 801dca0:	af00      	add	r7, sp, #0
 801dca2:	6078      	str	r0, [r7, #4]
 801dca4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dca6:	2300      	movs	r3, #0
 801dca8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d102      	bne.n	801dcb6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801dcb0:	2301      	movs	r3, #1
 801dcb2:	73fb      	strb	r3, [r7, #15]
 801dcb4:	e014      	b.n	801dce0 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801dcb6:	4b0d      	ldr	r3, [pc, #52]	; (801dcec <UTIL_TIMER_SetPeriod+0x50>)
 801dcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dcba:	6838      	ldr	r0, [r7, #0]
 801dcbc:	4798      	blx	r3
 801dcbe:	4602      	mov	r2, r0
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801dcc4:	6878      	ldr	r0, [r7, #4]
 801dcc6:	f000 f8c1 	bl	801de4c <TimerExists>
 801dcca:	4603      	mov	r3, r0
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d007      	beq.n	801dce0 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801dcd0:	6878      	ldr	r0, [r7, #4]
 801dcd2:	f7ff ff73 	bl	801dbbc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801dcd6:	6878      	ldr	r0, [r7, #4]
 801dcd8:	f7ff ff02 	bl	801dae0 <UTIL_TIMER_Start>
 801dcdc:	4603      	mov	r3, r0
 801dcde:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801dce0:	7bfb      	ldrb	r3, [r7, #15]
}
 801dce2:	4618      	mov	r0, r3
 801dce4:	3710      	adds	r7, #16
 801dce6:	46bd      	mov	sp, r7
 801dce8:	bd80      	pop	{r7, pc}
 801dcea:	bf00      	nop
 801dcec:	0801f01c 	.word	0x0801f01c

0801dcf0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801dcf0:	b590      	push	{r4, r7, lr}
 801dcf2:	b089      	sub	sp, #36	; 0x24
 801dcf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcf6:	f3ef 8310 	mrs	r3, PRIMASK
 801dcfa:	60bb      	str	r3, [r7, #8]
  return(result);
 801dcfc:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dcfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd00:	b672      	cpsid	i
}
 801dd02:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801dd04:	4b38      	ldr	r3, [pc, #224]	; (801dde8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dd06:	695b      	ldr	r3, [r3, #20]
 801dd08:	4798      	blx	r3
 801dd0a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801dd0c:	4b36      	ldr	r3, [pc, #216]	; (801dde8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dd0e:	691b      	ldr	r3, [r3, #16]
 801dd10:	4798      	blx	r3
 801dd12:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801dd14:	693a      	ldr	r2, [r7, #16]
 801dd16:	697b      	ldr	r3, [r7, #20]
 801dd18:	1ad3      	subs	r3, r2, r3
 801dd1a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801dd1c:	4b33      	ldr	r3, [pc, #204]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd1e:	681b      	ldr	r3, [r3, #0]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d037      	beq.n	801dd94 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801dd24:	4b31      	ldr	r3, [pc, #196]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd26:	681b      	ldr	r3, [r3, #0]
 801dd28:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801dd2a:	69fb      	ldr	r3, [r7, #28]
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	68fa      	ldr	r2, [r7, #12]
 801dd30:	429a      	cmp	r2, r3
 801dd32:	d206      	bcs.n	801dd42 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801dd34:	69fb      	ldr	r3, [r7, #28]
 801dd36:	681a      	ldr	r2, [r3, #0]
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	1ad2      	subs	r2, r2, r3
 801dd3c:	69fb      	ldr	r3, [r7, #28]
 801dd3e:	601a      	str	r2, [r3, #0]
 801dd40:	e002      	b.n	801dd48 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801dd42:	69fb      	ldr	r3, [r7, #28]
 801dd44:	2200      	movs	r2, #0
 801dd46:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801dd48:	69fb      	ldr	r3, [r7, #28]
 801dd4a:	695b      	ldr	r3, [r3, #20]
 801dd4c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801dd4e:	69fb      	ldr	r3, [r7, #28]
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d1ea      	bne.n	801dd2a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dd54:	e01e      	b.n	801dd94 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801dd56:	4b25      	ldr	r3, [pc, #148]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801dd5c:	4b23      	ldr	r3, [pc, #140]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	695b      	ldr	r3, [r3, #20]
 801dd62:	4a22      	ldr	r2, [pc, #136]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd64:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801dd66:	69fb      	ldr	r3, [r7, #28]
 801dd68:	2200      	movs	r2, #0
 801dd6a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801dd6c:	69fb      	ldr	r3, [r7, #28]
 801dd6e:	2200      	movs	r2, #0
 801dd70:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801dd72:	69fb      	ldr	r3, [r7, #28]
 801dd74:	68db      	ldr	r3, [r3, #12]
 801dd76:	69fa      	ldr	r2, [r7, #28]
 801dd78:	6912      	ldr	r2, [r2, #16]
 801dd7a:	4610      	mov	r0, r2
 801dd7c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801dd7e:	69fb      	ldr	r3, [r7, #28]
 801dd80:	7adb      	ldrb	r3, [r3, #11]
 801dd82:	2b01      	cmp	r3, #1
 801dd84:	d106      	bne.n	801dd94 <UTIL_TIMER_IRQ_Handler+0xa4>
 801dd86:	69fb      	ldr	r3, [r7, #28]
 801dd88:	7a9b      	ldrb	r3, [r3, #10]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d102      	bne.n	801dd94 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801dd8e:	69f8      	ldr	r0, [r7, #28]
 801dd90:	f7ff fea6 	bl	801dae0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801dd94:	4b15      	ldr	r3, [pc, #84]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd96:	681b      	ldr	r3, [r3, #0]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d00d      	beq.n	801ddb8 <UTIL_TIMER_IRQ_Handler+0xc8>
 801dd9c:	4b13      	ldr	r3, [pc, #76]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	2b00      	cmp	r3, #0
 801dda4:	d0d7      	beq.n	801dd56 <UTIL_TIMER_IRQ_Handler+0x66>
 801dda6:	4b11      	ldr	r3, [pc, #68]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	681c      	ldr	r4, [r3, #0]
 801ddac:	4b0e      	ldr	r3, [pc, #56]	; (801dde8 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ddae:	699b      	ldr	r3, [r3, #24]
 801ddb0:	4798      	blx	r3
 801ddb2:	4603      	mov	r3, r0
 801ddb4:	429c      	cmp	r4, r3
 801ddb6:	d3ce      	bcc.n	801dd56 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ddb8:	4b0c      	ldr	r3, [pc, #48]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d009      	beq.n	801ddd4 <UTIL_TIMER_IRQ_Handler+0xe4>
 801ddc0:	4b0a      	ldr	r3, [pc, #40]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	7a1b      	ldrb	r3, [r3, #8]
 801ddc6:	2b00      	cmp	r3, #0
 801ddc8:	d104      	bne.n	801ddd4 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801ddca:	4b08      	ldr	r3, [pc, #32]	; (801ddec <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	4618      	mov	r0, r3
 801ddd0:	f000 f858 	bl	801de84 <TimerSetTimeout>
 801ddd4:	69bb      	ldr	r3, [r7, #24]
 801ddd6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	f383 8810 	msr	PRIMASK, r3
}
 801ddde:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801dde0:	bf00      	nop
 801dde2:	3724      	adds	r7, #36	; 0x24
 801dde4:	46bd      	mov	sp, r7
 801dde6:	bd90      	pop	{r4, r7, pc}
 801dde8:	0801f01c 	.word	0x0801f01c
 801ddec:	200018c4 	.word	0x200018c4

0801ddf0 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801ddf0:	b580      	push	{r7, lr}
 801ddf2:	b082      	sub	sp, #8
 801ddf4:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801ddf6:	4b06      	ldr	r3, [pc, #24]	; (801de10 <UTIL_TIMER_GetCurrentTime+0x20>)
 801ddf8:	69db      	ldr	r3, [r3, #28]
 801ddfa:	4798      	blx	r3
 801ddfc:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ddfe:	4b04      	ldr	r3, [pc, #16]	; (801de10 <UTIL_TIMER_GetCurrentTime+0x20>)
 801de00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de02:	6878      	ldr	r0, [r7, #4]
 801de04:	4798      	blx	r3
 801de06:	4603      	mov	r3, r0
}
 801de08:	4618      	mov	r0, r3
 801de0a:	3708      	adds	r7, #8
 801de0c:	46bd      	mov	sp, r7
 801de0e:	bd80      	pop	{r7, pc}
 801de10:	0801f01c 	.word	0x0801f01c

0801de14 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801de14:	b580      	push	{r7, lr}
 801de16:	b084      	sub	sp, #16
 801de18:	af00      	add	r7, sp, #0
 801de1a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801de1c:	4b0a      	ldr	r3, [pc, #40]	; (801de48 <UTIL_TIMER_GetElapsedTime+0x34>)
 801de1e:	69db      	ldr	r3, [r3, #28]
 801de20:	4798      	blx	r3
 801de22:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801de24:	4b08      	ldr	r3, [pc, #32]	; (801de48 <UTIL_TIMER_GetElapsedTime+0x34>)
 801de26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801de28:	6878      	ldr	r0, [r7, #4]
 801de2a:	4798      	blx	r3
 801de2c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801de2e:	4b06      	ldr	r3, [pc, #24]	; (801de48 <UTIL_TIMER_GetElapsedTime+0x34>)
 801de30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de32:	68f9      	ldr	r1, [r7, #12]
 801de34:	68ba      	ldr	r2, [r7, #8]
 801de36:	1a8a      	subs	r2, r1, r2
 801de38:	4610      	mov	r0, r2
 801de3a:	4798      	blx	r3
 801de3c:	4603      	mov	r3, r0
}
 801de3e:	4618      	mov	r0, r3
 801de40:	3710      	adds	r7, #16
 801de42:	46bd      	mov	sp, r7
 801de44:	bd80      	pop	{r7, pc}
 801de46:	bf00      	nop
 801de48:	0801f01c 	.word	0x0801f01c

0801de4c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801de4c:	b480      	push	{r7}
 801de4e:	b085      	sub	sp, #20
 801de50:	af00      	add	r7, sp, #0
 801de52:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801de54:	4b0a      	ldr	r3, [pc, #40]	; (801de80 <TimerExists+0x34>)
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801de5a:	e008      	b.n	801de6e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801de5c:	68fa      	ldr	r2, [r7, #12]
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	429a      	cmp	r2, r3
 801de62:	d101      	bne.n	801de68 <TimerExists+0x1c>
    {
      return true;
 801de64:	2301      	movs	r3, #1
 801de66:	e006      	b.n	801de76 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	695b      	ldr	r3, [r3, #20]
 801de6c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	2b00      	cmp	r3, #0
 801de72:	d1f3      	bne.n	801de5c <TimerExists+0x10>
  }
  return false;
 801de74:	2300      	movs	r3, #0
}
 801de76:	4618      	mov	r0, r3
 801de78:	3714      	adds	r7, #20
 801de7a:	46bd      	mov	sp, r7
 801de7c:	bc80      	pop	{r7}
 801de7e:	4770      	bx	lr
 801de80:	200018c4 	.word	0x200018c4

0801de84 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801de84:	b590      	push	{r4, r7, lr}
 801de86:	b085      	sub	sp, #20
 801de88:	af00      	add	r7, sp, #0
 801de8a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801de8c:	4b11      	ldr	r3, [pc, #68]	; (801ded4 <TimerSetTimeout+0x50>)
 801de8e:	6a1b      	ldr	r3, [r3, #32]
 801de90:	4798      	blx	r3
 801de92:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	2201      	movs	r2, #1
 801de98:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	681c      	ldr	r4, [r3, #0]
 801de9e:	4b0d      	ldr	r3, [pc, #52]	; (801ded4 <TimerSetTimeout+0x50>)
 801dea0:	699b      	ldr	r3, [r3, #24]
 801dea2:	4798      	blx	r3
 801dea4:	4602      	mov	r2, r0
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	4413      	add	r3, r2
 801deaa:	429c      	cmp	r4, r3
 801deac:	d207      	bcs.n	801debe <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801deae:	4b09      	ldr	r3, [pc, #36]	; (801ded4 <TimerSetTimeout+0x50>)
 801deb0:	699b      	ldr	r3, [r3, #24]
 801deb2:	4798      	blx	r3
 801deb4:	4602      	mov	r2, r0
 801deb6:	68fb      	ldr	r3, [r7, #12]
 801deb8:	441a      	add	r2, r3
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801debe:	4b05      	ldr	r3, [pc, #20]	; (801ded4 <TimerSetTimeout+0x50>)
 801dec0:	689b      	ldr	r3, [r3, #8]
 801dec2:	687a      	ldr	r2, [r7, #4]
 801dec4:	6812      	ldr	r2, [r2, #0]
 801dec6:	4610      	mov	r0, r2
 801dec8:	4798      	blx	r3
}
 801deca:	bf00      	nop
 801decc:	3714      	adds	r7, #20
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd90      	pop	{r4, r7, pc}
 801ded2:	bf00      	nop
 801ded4:	0801f01c 	.word	0x0801f01c

0801ded8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801ded8:	b480      	push	{r7}
 801deda:	b085      	sub	sp, #20
 801dedc:	af00      	add	r7, sp, #0
 801dede:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dee0:	4b14      	ldr	r3, [pc, #80]	; (801df34 <TimerInsertTimer+0x5c>)
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801dee6:	4b13      	ldr	r3, [pc, #76]	; (801df34 <TimerInsertTimer+0x5c>)
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	695b      	ldr	r3, [r3, #20]
 801deec:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801deee:	e012      	b.n	801df16 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	681a      	ldr	r2, [r3, #0]
 801def4:	68bb      	ldr	r3, [r7, #8]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	429a      	cmp	r2, r3
 801defa:	d905      	bls.n	801df08 <TimerInsertTimer+0x30>
    {
        cur = next;
 801defc:	68bb      	ldr	r3, [r7, #8]
 801defe:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801df00:	68bb      	ldr	r3, [r7, #8]
 801df02:	695b      	ldr	r3, [r3, #20]
 801df04:	60bb      	str	r3, [r7, #8]
 801df06:	e006      	b.n	801df16 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	687a      	ldr	r2, [r7, #4]
 801df0c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	68ba      	ldr	r2, [r7, #8]
 801df12:	615a      	str	r2, [r3, #20]
        return;
 801df14:	e009      	b.n	801df2a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	695b      	ldr	r3, [r3, #20]
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d1e8      	bne.n	801def0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	687a      	ldr	r2, [r7, #4]
 801df22:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	2200      	movs	r2, #0
 801df28:	615a      	str	r2, [r3, #20]
}
 801df2a:	3714      	adds	r7, #20
 801df2c:	46bd      	mov	sp, r7
 801df2e:	bc80      	pop	{r7}
 801df30:	4770      	bx	lr
 801df32:	bf00      	nop
 801df34:	200018c4 	.word	0x200018c4

0801df38 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801df38:	b580      	push	{r7, lr}
 801df3a:	b084      	sub	sp, #16
 801df3c:	af00      	add	r7, sp, #0
 801df3e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801df40:	4b0b      	ldr	r3, [pc, #44]	; (801df70 <TimerInsertNewHeadTimer+0x38>)
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	2b00      	cmp	r3, #0
 801df4a:	d002      	beq.n	801df52 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801df4c:	68fb      	ldr	r3, [r7, #12]
 801df4e:	2200      	movs	r2, #0
 801df50:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	68fa      	ldr	r2, [r7, #12]
 801df56:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801df58:	4a05      	ldr	r2, [pc, #20]	; (801df70 <TimerInsertNewHeadTimer+0x38>)
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801df5e:	4b04      	ldr	r3, [pc, #16]	; (801df70 <TimerInsertNewHeadTimer+0x38>)
 801df60:	681b      	ldr	r3, [r3, #0]
 801df62:	4618      	mov	r0, r3
 801df64:	f7ff ff8e 	bl	801de84 <TimerSetTimeout>
}
 801df68:	bf00      	nop
 801df6a:	3710      	adds	r7, #16
 801df6c:	46bd      	mov	sp, r7
 801df6e:	bd80      	pop	{r7, pc}
 801df70:	200018c4 	.word	0x200018c4

0801df74 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801df74:	b580      	push	{r7, lr}
 801df76:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801df78:	2218      	movs	r2, #24
 801df7a:	2100      	movs	r1, #0
 801df7c:	4807      	ldr	r0, [pc, #28]	; (801df9c <UTIL_ADV_TRACE_Init+0x28>)
 801df7e:	f7fe fffa 	bl	801cf76 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801df82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801df86:	2100      	movs	r1, #0
 801df88:	4805      	ldr	r0, [pc, #20]	; (801dfa0 <UTIL_ADV_TRACE_Init+0x2c>)
 801df8a:	f7fe fff4 	bl	801cf76 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801df8e:	4b05      	ldr	r3, [pc, #20]	; (801dfa4 <UTIL_ADV_TRACE_Init+0x30>)
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	4805      	ldr	r0, [pc, #20]	; (801dfa8 <UTIL_ADV_TRACE_Init+0x34>)
 801df94:	4798      	blx	r3
 801df96:	4603      	mov	r3, r0
}
 801df98:	4618      	mov	r0, r3
 801df9a:	bd80      	pop	{r7, pc}
 801df9c:	200018c8 	.word	0x200018c8
 801dfa0:	200018e0 	.word	0x200018e0
 801dfa4:	0801f05c 	.word	0x0801f05c
 801dfa8:	0801e215 	.word	0x0801e215

0801dfac <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801dfac:	b480      	push	{r7}
 801dfae:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801dfb0:	4b06      	ldr	r3, [pc, #24]	; (801dfcc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801dfb2:	8a5a      	ldrh	r2, [r3, #18]
 801dfb4:	4b05      	ldr	r3, [pc, #20]	; (801dfcc <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801dfb6:	8a1b      	ldrh	r3, [r3, #16]
 801dfb8:	429a      	cmp	r2, r3
 801dfba:	d101      	bne.n	801dfc0 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801dfbc:	2301      	movs	r3, #1
 801dfbe:	e000      	b.n	801dfc2 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801dfc0:	2300      	movs	r3, #0
}
 801dfc2:	4618      	mov	r0, r3
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bc80      	pop	{r7}
 801dfc8:	4770      	bx	lr
 801dfca:	bf00      	nop
 801dfcc:	200018c8 	.word	0x200018c8

0801dfd0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801dfd0:	b408      	push	{r3}
 801dfd2:	b580      	push	{r7, lr}
 801dfd4:	b08d      	sub	sp, #52	; 0x34
 801dfd6:	af00      	add	r7, sp, #0
 801dfd8:	60f8      	str	r0, [r7, #12]
 801dfda:	60b9      	str	r1, [r7, #8]
 801dfdc:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801dfe6:	4b37      	ldr	r3, [pc, #220]	; (801e0c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801dfe8:	7a1b      	ldrb	r3, [r3, #8]
 801dfea:	461a      	mov	r2, r3
 801dfec:	68fb      	ldr	r3, [r7, #12]
 801dfee:	4293      	cmp	r3, r2
 801dff0:	d902      	bls.n	801dff8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801dff2:	f06f 0304 	mvn.w	r3, #4
 801dff6:	e05e      	b.n	801e0b6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801dff8:	4b32      	ldr	r3, [pc, #200]	; (801e0c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801dffa:	68da      	ldr	r2, [r3, #12]
 801dffc:	68bb      	ldr	r3, [r7, #8]
 801dffe:	4013      	ands	r3, r2
 801e000:	68ba      	ldr	r2, [r7, #8]
 801e002:	429a      	cmp	r2, r3
 801e004:	d002      	beq.n	801e00c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e006:	f06f 0305 	mvn.w	r3, #5
 801e00a:	e054      	b.n	801e0b6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e00c:	4b2d      	ldr	r3, [pc, #180]	; (801e0c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e00e:	685b      	ldr	r3, [r3, #4]
 801e010:	2b00      	cmp	r3, #0
 801e012:	d00a      	beq.n	801e02a <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e014:	687b      	ldr	r3, [r7, #4]
 801e016:	2b00      	cmp	r3, #0
 801e018:	d007      	beq.n	801e02a <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e01a:	4b2a      	ldr	r3, [pc, #168]	; (801e0c4 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e01c:	685b      	ldr	r3, [r3, #4]
 801e01e:	f107 0116 	add.w	r1, r7, #22
 801e022:	f107 0218 	add.w	r2, r7, #24
 801e026:	4610      	mov	r0, r2
 801e028:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e02a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e02e:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e034:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e038:	4823      	ldr	r0, [pc, #140]	; (801e0c8 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e03a:	f7ff fa29 	bl	801d490 <tiny_vsnprintf_like>
 801e03e:	4603      	mov	r3, r0
 801e040:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e042:	f000 f9f1 	bl	801e428 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e046:	8afa      	ldrh	r2, [r7, #22]
 801e048:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e04a:	4413      	add	r3, r2
 801e04c:	b29b      	uxth	r3, r3
 801e04e:	f107 0214 	add.w	r2, r7, #20
 801e052:	4611      	mov	r1, r2
 801e054:	4618      	mov	r0, r3
 801e056:	f000 f969 	bl	801e32c <TRACE_AllocateBufer>
 801e05a:	4603      	mov	r3, r0
 801e05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e060:	d025      	beq.n	801e0ae <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e062:	2300      	movs	r3, #0
 801e064:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e066:	e00e      	b.n	801e086 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e068:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e06a:	8aba      	ldrh	r2, [r7, #20]
 801e06c:	3330      	adds	r3, #48	; 0x30
 801e06e:	443b      	add	r3, r7
 801e070:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e074:	4b15      	ldr	r3, [pc, #84]	; (801e0cc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e076:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e078:	8abb      	ldrh	r3, [r7, #20]
 801e07a:	3301      	adds	r3, #1
 801e07c:	b29b      	uxth	r3, r3
 801e07e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e080:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e082:	3301      	adds	r3, #1
 801e084:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e086:	8afb      	ldrh	r3, [r7, #22]
 801e088:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e08a:	429a      	cmp	r2, r3
 801e08c:	d3ec      	bcc.n	801e068 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e08e:	8abb      	ldrh	r3, [r7, #20]
 801e090:	461a      	mov	r2, r3
 801e092:	4b0e      	ldr	r3, [pc, #56]	; (801e0cc <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e094:	18d0      	adds	r0, r2, r3
 801e096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e09a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e09e:	f7ff f9f7 	bl	801d490 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e0a2:	f000 f9df 	bl	801e464 <TRACE_UnLock>

    return TRACE_Send();
 801e0a6:	f000 f831 	bl	801e10c <TRACE_Send>
 801e0aa:	4603      	mov	r3, r0
 801e0ac:	e003      	b.n	801e0b6 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e0ae:	f000 f9d9 	bl	801e464 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e0b2:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	3734      	adds	r7, #52	; 0x34
 801e0ba:	46bd      	mov	sp, r7
 801e0bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e0c0:	b001      	add	sp, #4
 801e0c2:	4770      	bx	lr
 801e0c4:	200018c8 	.word	0x200018c8
 801e0c8:	20001ce0 	.word	0x20001ce0
 801e0cc:	200018e0 	.word	0x200018e0

0801e0d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e0d0:	b480      	push	{r7}
 801e0d2:	b083      	sub	sp, #12
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e0d8:	4a03      	ldr	r2, [pc, #12]	; (801e0e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	6053      	str	r3, [r2, #4]
}
 801e0de:	bf00      	nop
 801e0e0:	370c      	adds	r7, #12
 801e0e2:	46bd      	mov	sp, r7
 801e0e4:	bc80      	pop	{r7}
 801e0e6:	4770      	bx	lr
 801e0e8:	200018c8 	.word	0x200018c8

0801e0ec <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e0ec:	b480      	push	{r7}
 801e0ee:	b083      	sub	sp, #12
 801e0f0:	af00      	add	r7, sp, #0
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e0f6:	4a04      	ldr	r2, [pc, #16]	; (801e108 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e0f8:	79fb      	ldrb	r3, [r7, #7]
 801e0fa:	7213      	strb	r3, [r2, #8]
}
 801e0fc:	bf00      	nop
 801e0fe:	370c      	adds	r7, #12
 801e100:	46bd      	mov	sp, r7
 801e102:	bc80      	pop	{r7}
 801e104:	4770      	bx	lr
 801e106:	bf00      	nop
 801e108:	200018c8 	.word	0x200018c8

0801e10c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e10c:	b580      	push	{r7, lr}
 801e10e:	b088      	sub	sp, #32
 801e110:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e112:	2300      	movs	r3, #0
 801e114:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e116:	2300      	movs	r3, #0
 801e118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e11a:	f3ef 8310 	mrs	r3, PRIMASK
 801e11e:	613b      	str	r3, [r7, #16]
  return(result);
 801e120:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e124:	b672      	cpsid	i
}
 801e126:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e128:	f000 f9ba 	bl	801e4a0 <TRACE_IsLocked>
 801e12c:	4603      	mov	r3, r0
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d15d      	bne.n	801e1ee <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e132:	f000 f979 	bl	801e428 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e136:	4b34      	ldr	r3, [pc, #208]	; (801e208 <TRACE_Send+0xfc>)
 801e138:	8a1a      	ldrh	r2, [r3, #16]
 801e13a:	4b33      	ldr	r3, [pc, #204]	; (801e208 <TRACE_Send+0xfc>)
 801e13c:	8a5b      	ldrh	r3, [r3, #18]
 801e13e:	429a      	cmp	r2, r3
 801e140:	d04d      	beq.n	801e1de <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e142:	4b31      	ldr	r3, [pc, #196]	; (801e208 <TRACE_Send+0xfc>)
 801e144:	789b      	ldrb	r3, [r3, #2]
 801e146:	2b01      	cmp	r3, #1
 801e148:	d117      	bne.n	801e17a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e14a:	4b2f      	ldr	r3, [pc, #188]	; (801e208 <TRACE_Send+0xfc>)
 801e14c:	881a      	ldrh	r2, [r3, #0]
 801e14e:	4b2e      	ldr	r3, [pc, #184]	; (801e208 <TRACE_Send+0xfc>)
 801e150:	8a1b      	ldrh	r3, [r3, #16]
 801e152:	1ad3      	subs	r3, r2, r3
 801e154:	b29a      	uxth	r2, r3
 801e156:	4b2c      	ldr	r3, [pc, #176]	; (801e208 <TRACE_Send+0xfc>)
 801e158:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e15a:	4b2b      	ldr	r3, [pc, #172]	; (801e208 <TRACE_Send+0xfc>)
 801e15c:	2202      	movs	r2, #2
 801e15e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e160:	4b29      	ldr	r3, [pc, #164]	; (801e208 <TRACE_Send+0xfc>)
 801e162:	2200      	movs	r2, #0
 801e164:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e166:	4b28      	ldr	r3, [pc, #160]	; (801e208 <TRACE_Send+0xfc>)
 801e168:	8a9b      	ldrh	r3, [r3, #20]
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d105      	bne.n	801e17a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e16e:	4b26      	ldr	r3, [pc, #152]	; (801e208 <TRACE_Send+0xfc>)
 801e170:	2200      	movs	r2, #0
 801e172:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e174:	4b24      	ldr	r3, [pc, #144]	; (801e208 <TRACE_Send+0xfc>)
 801e176:	2200      	movs	r2, #0
 801e178:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e17a:	4b23      	ldr	r3, [pc, #140]	; (801e208 <TRACE_Send+0xfc>)
 801e17c:	789b      	ldrb	r3, [r3, #2]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d115      	bne.n	801e1ae <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e182:	4b21      	ldr	r3, [pc, #132]	; (801e208 <TRACE_Send+0xfc>)
 801e184:	8a5a      	ldrh	r2, [r3, #18]
 801e186:	4b20      	ldr	r3, [pc, #128]	; (801e208 <TRACE_Send+0xfc>)
 801e188:	8a1b      	ldrh	r3, [r3, #16]
 801e18a:	429a      	cmp	r2, r3
 801e18c:	d908      	bls.n	801e1a0 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e18e:	4b1e      	ldr	r3, [pc, #120]	; (801e208 <TRACE_Send+0xfc>)
 801e190:	8a5a      	ldrh	r2, [r3, #18]
 801e192:	4b1d      	ldr	r3, [pc, #116]	; (801e208 <TRACE_Send+0xfc>)
 801e194:	8a1b      	ldrh	r3, [r3, #16]
 801e196:	1ad3      	subs	r3, r2, r3
 801e198:	b29a      	uxth	r2, r3
 801e19a:	4b1b      	ldr	r3, [pc, #108]	; (801e208 <TRACE_Send+0xfc>)
 801e19c:	829a      	strh	r2, [r3, #20]
 801e19e:	e006      	b.n	801e1ae <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e1a0:	4b19      	ldr	r3, [pc, #100]	; (801e208 <TRACE_Send+0xfc>)
 801e1a2:	8a1b      	ldrh	r3, [r3, #16]
 801e1a4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e1a8:	b29a      	uxth	r2, r3
 801e1aa:	4b17      	ldr	r3, [pc, #92]	; (801e208 <TRACE_Send+0xfc>)
 801e1ac:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e1ae:	4b16      	ldr	r3, [pc, #88]	; (801e208 <TRACE_Send+0xfc>)
 801e1b0:	8a1b      	ldrh	r3, [r3, #16]
 801e1b2:	461a      	mov	r2, r3
 801e1b4:	4b15      	ldr	r3, [pc, #84]	; (801e20c <TRACE_Send+0x100>)
 801e1b6:	4413      	add	r3, r2
 801e1b8:	61bb      	str	r3, [r7, #24]
 801e1ba:	697b      	ldr	r3, [r7, #20]
 801e1bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	f383 8810 	msr	PRIMASK, r3
}
 801e1c4:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e1c6:	f7e4 fb49 	bl	800285c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e1ca:	4b11      	ldr	r3, [pc, #68]	; (801e210 <TRACE_Send+0x104>)
 801e1cc:	68db      	ldr	r3, [r3, #12]
 801e1ce:	4a0e      	ldr	r2, [pc, #56]	; (801e208 <TRACE_Send+0xfc>)
 801e1d0:	8a92      	ldrh	r2, [r2, #20]
 801e1d2:	4611      	mov	r1, r2
 801e1d4:	69b8      	ldr	r0, [r7, #24]
 801e1d6:	4798      	blx	r3
 801e1d8:	4603      	mov	r3, r0
 801e1da:	77fb      	strb	r3, [r7, #31]
 801e1dc:	e00d      	b.n	801e1fa <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e1de:	f000 f941 	bl	801e464 <TRACE_UnLock>
 801e1e2:	697b      	ldr	r3, [r7, #20]
 801e1e4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1e6:	68bb      	ldr	r3, [r7, #8]
 801e1e8:	f383 8810 	msr	PRIMASK, r3
}
 801e1ec:	e005      	b.n	801e1fa <TRACE_Send+0xee>
 801e1ee:	697b      	ldr	r3, [r7, #20]
 801e1f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	f383 8810 	msr	PRIMASK, r3
}
 801e1f8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e1fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e1fe:	4618      	mov	r0, r3
 801e200:	3720      	adds	r7, #32
 801e202:	46bd      	mov	sp, r7
 801e204:	bd80      	pop	{r7, pc}
 801e206:	bf00      	nop
 801e208:	200018c8 	.word	0x200018c8
 801e20c:	200018e0 	.word	0x200018e0
 801e210:	0801f05c 	.word	0x0801f05c

0801e214 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e214:	b580      	push	{r7, lr}
 801e216:	b088      	sub	sp, #32
 801e218:	af00      	add	r7, sp, #0
 801e21a:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e21c:	2300      	movs	r3, #0
 801e21e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e220:	f3ef 8310 	mrs	r3, PRIMASK
 801e224:	617b      	str	r3, [r7, #20]
  return(result);
 801e226:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e228:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e22a:	b672      	cpsid	i
}
 801e22c:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e22e:	4b3c      	ldr	r3, [pc, #240]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e230:	789b      	ldrb	r3, [r3, #2]
 801e232:	2b02      	cmp	r3, #2
 801e234:	d106      	bne.n	801e244 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e236:	4b3a      	ldr	r3, [pc, #232]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e238:	2200      	movs	r2, #0
 801e23a:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e23c:	4b38      	ldr	r3, [pc, #224]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e23e:	2200      	movs	r2, #0
 801e240:	821a      	strh	r2, [r3, #16]
 801e242:	e00a      	b.n	801e25a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e244:	4b36      	ldr	r3, [pc, #216]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e246:	8a1a      	ldrh	r2, [r3, #16]
 801e248:	4b35      	ldr	r3, [pc, #212]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e24a:	8a9b      	ldrh	r3, [r3, #20]
 801e24c:	4413      	add	r3, r2
 801e24e:	b29b      	uxth	r3, r3
 801e250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e254:	b29a      	uxth	r2, r3
 801e256:	4b32      	ldr	r3, [pc, #200]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e258:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e25a:	4b31      	ldr	r3, [pc, #196]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e25c:	8a1a      	ldrh	r2, [r3, #16]
 801e25e:	4b30      	ldr	r3, [pc, #192]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e260:	8a5b      	ldrh	r3, [r3, #18]
 801e262:	429a      	cmp	r2, r3
 801e264:	d04d      	beq.n	801e302 <TRACE_TxCpltCallback+0xee>
 801e266:	4b2e      	ldr	r3, [pc, #184]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e268:	8adb      	ldrh	r3, [r3, #22]
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	d149      	bne.n	801e302 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e26e:	4b2c      	ldr	r3, [pc, #176]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e270:	789b      	ldrb	r3, [r3, #2]
 801e272:	2b01      	cmp	r3, #1
 801e274:	d117      	bne.n	801e2a6 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e276:	4b2a      	ldr	r3, [pc, #168]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e278:	881a      	ldrh	r2, [r3, #0]
 801e27a:	4b29      	ldr	r3, [pc, #164]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e27c:	8a1b      	ldrh	r3, [r3, #16]
 801e27e:	1ad3      	subs	r3, r2, r3
 801e280:	b29a      	uxth	r2, r3
 801e282:	4b27      	ldr	r3, [pc, #156]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e284:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e286:	4b26      	ldr	r3, [pc, #152]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e288:	2202      	movs	r2, #2
 801e28a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e28c:	4b24      	ldr	r3, [pc, #144]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e28e:	2200      	movs	r2, #0
 801e290:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e292:	4b23      	ldr	r3, [pc, #140]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e294:	8a9b      	ldrh	r3, [r3, #20]
 801e296:	2b00      	cmp	r3, #0
 801e298:	d105      	bne.n	801e2a6 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e29a:	4b21      	ldr	r3, [pc, #132]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e29c:	2200      	movs	r2, #0
 801e29e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e2a0:	4b1f      	ldr	r3, [pc, #124]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2a2:	2200      	movs	r2, #0
 801e2a4:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e2a6:	4b1e      	ldr	r3, [pc, #120]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2a8:	789b      	ldrb	r3, [r3, #2]
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d115      	bne.n	801e2da <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e2ae:	4b1c      	ldr	r3, [pc, #112]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2b0:	8a5a      	ldrh	r2, [r3, #18]
 801e2b2:	4b1b      	ldr	r3, [pc, #108]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2b4:	8a1b      	ldrh	r3, [r3, #16]
 801e2b6:	429a      	cmp	r2, r3
 801e2b8:	d908      	bls.n	801e2cc <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e2ba:	4b19      	ldr	r3, [pc, #100]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2bc:	8a5a      	ldrh	r2, [r3, #18]
 801e2be:	4b18      	ldr	r3, [pc, #96]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2c0:	8a1b      	ldrh	r3, [r3, #16]
 801e2c2:	1ad3      	subs	r3, r2, r3
 801e2c4:	b29a      	uxth	r2, r3
 801e2c6:	4b16      	ldr	r3, [pc, #88]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2c8:	829a      	strh	r2, [r3, #20]
 801e2ca:	e006      	b.n	801e2da <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e2cc:	4b14      	ldr	r3, [pc, #80]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2ce:	8a1b      	ldrh	r3, [r3, #16]
 801e2d0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e2d4:	b29a      	uxth	r2, r3
 801e2d6:	4b12      	ldr	r3, [pc, #72]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2d8:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e2da:	4b11      	ldr	r3, [pc, #68]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2dc:	8a1b      	ldrh	r3, [r3, #16]
 801e2de:	461a      	mov	r2, r3
 801e2e0:	4b10      	ldr	r3, [pc, #64]	; (801e324 <TRACE_TxCpltCallback+0x110>)
 801e2e2:	4413      	add	r3, r2
 801e2e4:	61fb      	str	r3, [r7, #28]
 801e2e6:	69bb      	ldr	r3, [r7, #24]
 801e2e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2ea:	693b      	ldr	r3, [r7, #16]
 801e2ec:	f383 8810 	msr	PRIMASK, r3
}
 801e2f0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e2f2:	4b0d      	ldr	r3, [pc, #52]	; (801e328 <TRACE_TxCpltCallback+0x114>)
 801e2f4:	68db      	ldr	r3, [r3, #12]
 801e2f6:	4a0a      	ldr	r2, [pc, #40]	; (801e320 <TRACE_TxCpltCallback+0x10c>)
 801e2f8:	8a92      	ldrh	r2, [r2, #20]
 801e2fa:	4611      	mov	r1, r2
 801e2fc:	69f8      	ldr	r0, [r7, #28]
 801e2fe:	4798      	blx	r3
 801e300:	e00a      	b.n	801e318 <TRACE_TxCpltCallback+0x104>
 801e302:	69bb      	ldr	r3, [r7, #24]
 801e304:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	f383 8810 	msr	PRIMASK, r3
}
 801e30c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e30e:	f7e4 faad 	bl	800286c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e312:	f000 f8a7 	bl	801e464 <TRACE_UnLock>
  }
}
 801e316:	bf00      	nop
 801e318:	bf00      	nop
 801e31a:	3720      	adds	r7, #32
 801e31c:	46bd      	mov	sp, r7
 801e31e:	bd80      	pop	{r7, pc}
 801e320:	200018c8 	.word	0x200018c8
 801e324:	200018e0 	.word	0x200018e0
 801e328:	0801f05c 	.word	0x0801f05c

0801e32c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e32c:	b480      	push	{r7}
 801e32e:	b087      	sub	sp, #28
 801e330:	af00      	add	r7, sp, #0
 801e332:	4603      	mov	r3, r0
 801e334:	6039      	str	r1, [r7, #0]
 801e336:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e33c:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e33e:	f3ef 8310 	mrs	r3, PRIMASK
 801e342:	60fb      	str	r3, [r7, #12]
  return(result);
 801e344:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e348:	b672      	cpsid	i
}
 801e34a:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e34c:	4b35      	ldr	r3, [pc, #212]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e34e:	8a5a      	ldrh	r2, [r3, #18]
 801e350:	4b34      	ldr	r3, [pc, #208]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e352:	8a1b      	ldrh	r3, [r3, #16]
 801e354:	429a      	cmp	r2, r3
 801e356:	d11b      	bne.n	801e390 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e358:	4b32      	ldr	r3, [pc, #200]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e35a:	8a5b      	ldrh	r3, [r3, #18]
 801e35c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e360:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e362:	88fa      	ldrh	r2, [r7, #6]
 801e364:	8afb      	ldrh	r3, [r7, #22]
 801e366:	429a      	cmp	r2, r3
 801e368:	d33a      	bcc.n	801e3e0 <TRACE_AllocateBufer+0xb4>
 801e36a:	4b2e      	ldr	r3, [pc, #184]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e36c:	8a1b      	ldrh	r3, [r3, #16]
 801e36e:	88fa      	ldrh	r2, [r7, #6]
 801e370:	429a      	cmp	r2, r3
 801e372:	d235      	bcs.n	801e3e0 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e374:	4b2b      	ldr	r3, [pc, #172]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e376:	2201      	movs	r2, #1
 801e378:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e37a:	4b2a      	ldr	r3, [pc, #168]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e37c:	8a5a      	ldrh	r2, [r3, #18]
 801e37e:	4b29      	ldr	r3, [pc, #164]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e380:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e382:	4b28      	ldr	r3, [pc, #160]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e384:	8a1b      	ldrh	r3, [r3, #16]
 801e386:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e388:	4b26      	ldr	r3, [pc, #152]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e38a:	2200      	movs	r2, #0
 801e38c:	825a      	strh	r2, [r3, #18]
 801e38e:	e027      	b.n	801e3e0 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e390:	4b24      	ldr	r3, [pc, #144]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e392:	8a5a      	ldrh	r2, [r3, #18]
 801e394:	4b23      	ldr	r3, [pc, #140]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e396:	8a1b      	ldrh	r3, [r3, #16]
 801e398:	429a      	cmp	r2, r3
 801e39a:	d91b      	bls.n	801e3d4 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e39c:	4b21      	ldr	r3, [pc, #132]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e39e:	8a5b      	ldrh	r3, [r3, #18]
 801e3a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e3a4:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e3a6:	88fa      	ldrh	r2, [r7, #6]
 801e3a8:	8afb      	ldrh	r3, [r7, #22]
 801e3aa:	429a      	cmp	r2, r3
 801e3ac:	d318      	bcc.n	801e3e0 <TRACE_AllocateBufer+0xb4>
 801e3ae:	4b1d      	ldr	r3, [pc, #116]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3b0:	8a1b      	ldrh	r3, [r3, #16]
 801e3b2:	88fa      	ldrh	r2, [r7, #6]
 801e3b4:	429a      	cmp	r2, r3
 801e3b6:	d213      	bcs.n	801e3e0 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e3b8:	4b1a      	ldr	r3, [pc, #104]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3ba:	2201      	movs	r2, #1
 801e3bc:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e3be:	4b19      	ldr	r3, [pc, #100]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3c0:	8a5a      	ldrh	r2, [r3, #18]
 801e3c2:	4b18      	ldr	r3, [pc, #96]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3c4:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e3c6:	4b17      	ldr	r3, [pc, #92]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3c8:	8a1b      	ldrh	r3, [r3, #16]
 801e3ca:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e3cc:	4b15      	ldr	r3, [pc, #84]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	825a      	strh	r2, [r3, #18]
 801e3d2:	e005      	b.n	801e3e0 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e3d4:	4b13      	ldr	r3, [pc, #76]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3d6:	8a1a      	ldrh	r2, [r3, #16]
 801e3d8:	4b12      	ldr	r3, [pc, #72]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3da:	8a5b      	ldrh	r3, [r3, #18]
 801e3dc:	1ad3      	subs	r3, r2, r3
 801e3de:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e3e0:	8afa      	ldrh	r2, [r7, #22]
 801e3e2:	88fb      	ldrh	r3, [r7, #6]
 801e3e4:	429a      	cmp	r2, r3
 801e3e6:	d90f      	bls.n	801e408 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e3e8:	4b0e      	ldr	r3, [pc, #56]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3ea:	8a5a      	ldrh	r2, [r3, #18]
 801e3ec:	683b      	ldr	r3, [r7, #0]
 801e3ee:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e3f0:	4b0c      	ldr	r3, [pc, #48]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e3f2:	8a5a      	ldrh	r2, [r3, #18]
 801e3f4:	88fb      	ldrh	r3, [r7, #6]
 801e3f6:	4413      	add	r3, r2
 801e3f8:	b29b      	uxth	r3, r3
 801e3fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e3fe:	b29a      	uxth	r2, r3
 801e400:	4b08      	ldr	r3, [pc, #32]	; (801e424 <TRACE_AllocateBufer+0xf8>)
 801e402:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e404:	2300      	movs	r3, #0
 801e406:	82bb      	strh	r3, [r7, #20]
 801e408:	693b      	ldr	r3, [r7, #16]
 801e40a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e40c:	68bb      	ldr	r3, [r7, #8]
 801e40e:	f383 8810 	msr	PRIMASK, r3
}
 801e412:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e418:	4618      	mov	r0, r3
 801e41a:	371c      	adds	r7, #28
 801e41c:	46bd      	mov	sp, r7
 801e41e:	bc80      	pop	{r7}
 801e420:	4770      	bx	lr
 801e422:	bf00      	nop
 801e424:	200018c8 	.word	0x200018c8

0801e428 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e428:	b480      	push	{r7}
 801e42a:	b085      	sub	sp, #20
 801e42c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e42e:	f3ef 8310 	mrs	r3, PRIMASK
 801e432:	607b      	str	r3, [r7, #4]
  return(result);
 801e434:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e436:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e438:	b672      	cpsid	i
}
 801e43a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e43c:	4b08      	ldr	r3, [pc, #32]	; (801e460 <TRACE_Lock+0x38>)
 801e43e:	8adb      	ldrh	r3, [r3, #22]
 801e440:	3301      	adds	r3, #1
 801e442:	b29a      	uxth	r2, r3
 801e444:	4b06      	ldr	r3, [pc, #24]	; (801e460 <TRACE_Lock+0x38>)
 801e446:	82da      	strh	r2, [r3, #22]
 801e448:	68fb      	ldr	r3, [r7, #12]
 801e44a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e44c:	68bb      	ldr	r3, [r7, #8]
 801e44e:	f383 8810 	msr	PRIMASK, r3
}
 801e452:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e454:	bf00      	nop
 801e456:	3714      	adds	r7, #20
 801e458:	46bd      	mov	sp, r7
 801e45a:	bc80      	pop	{r7}
 801e45c:	4770      	bx	lr
 801e45e:	bf00      	nop
 801e460:	200018c8 	.word	0x200018c8

0801e464 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e464:	b480      	push	{r7}
 801e466:	b085      	sub	sp, #20
 801e468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e46a:	f3ef 8310 	mrs	r3, PRIMASK
 801e46e:	607b      	str	r3, [r7, #4]
  return(result);
 801e470:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e472:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e474:	b672      	cpsid	i
}
 801e476:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e478:	4b08      	ldr	r3, [pc, #32]	; (801e49c <TRACE_UnLock+0x38>)
 801e47a:	8adb      	ldrh	r3, [r3, #22]
 801e47c:	3b01      	subs	r3, #1
 801e47e:	b29a      	uxth	r2, r3
 801e480:	4b06      	ldr	r3, [pc, #24]	; (801e49c <TRACE_UnLock+0x38>)
 801e482:	82da      	strh	r2, [r3, #22]
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e488:	68bb      	ldr	r3, [r7, #8]
 801e48a:	f383 8810 	msr	PRIMASK, r3
}
 801e48e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e490:	bf00      	nop
 801e492:	3714      	adds	r7, #20
 801e494:	46bd      	mov	sp, r7
 801e496:	bc80      	pop	{r7}
 801e498:	4770      	bx	lr
 801e49a:	bf00      	nop
 801e49c:	200018c8 	.word	0x200018c8

0801e4a0 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801e4a0:	b480      	push	{r7}
 801e4a2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801e4a4:	4b05      	ldr	r3, [pc, #20]	; (801e4bc <TRACE_IsLocked+0x1c>)
 801e4a6:	8adb      	ldrh	r3, [r3, #22]
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	bf14      	ite	ne
 801e4ac:	2301      	movne	r3, #1
 801e4ae:	2300      	moveq	r3, #0
 801e4b0:	b2db      	uxtb	r3, r3
}
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	46bd      	mov	sp, r7
 801e4b6:	bc80      	pop	{r7}
 801e4b8:	4770      	bx	lr
 801e4ba:	bf00      	nop
 801e4bc:	200018c8 	.word	0x200018c8

0801e4c0 <memset>:
 801e4c0:	4402      	add	r2, r0
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	4293      	cmp	r3, r2
 801e4c6:	d100      	bne.n	801e4ca <memset+0xa>
 801e4c8:	4770      	bx	lr
 801e4ca:	f803 1b01 	strb.w	r1, [r3], #1
 801e4ce:	e7f9      	b.n	801e4c4 <memset+0x4>

0801e4d0 <__libc_init_array>:
 801e4d0:	b570      	push	{r4, r5, r6, lr}
 801e4d2:	4d0d      	ldr	r5, [pc, #52]	; (801e508 <__libc_init_array+0x38>)
 801e4d4:	4c0d      	ldr	r4, [pc, #52]	; (801e50c <__libc_init_array+0x3c>)
 801e4d6:	1b64      	subs	r4, r4, r5
 801e4d8:	10a4      	asrs	r4, r4, #2
 801e4da:	2600      	movs	r6, #0
 801e4dc:	42a6      	cmp	r6, r4
 801e4de:	d109      	bne.n	801e4f4 <__libc_init_array+0x24>
 801e4e0:	4d0b      	ldr	r5, [pc, #44]	; (801e510 <__libc_init_array+0x40>)
 801e4e2:	4c0c      	ldr	r4, [pc, #48]	; (801e514 <__libc_init_array+0x44>)
 801e4e4:	f000 f900 	bl	801e6e8 <_init>
 801e4e8:	1b64      	subs	r4, r4, r5
 801e4ea:	10a4      	asrs	r4, r4, #2
 801e4ec:	2600      	movs	r6, #0
 801e4ee:	42a6      	cmp	r6, r4
 801e4f0:	d105      	bne.n	801e4fe <__libc_init_array+0x2e>
 801e4f2:	bd70      	pop	{r4, r5, r6, pc}
 801e4f4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e4f8:	4798      	blx	r3
 801e4fa:	3601      	adds	r6, #1
 801e4fc:	e7ee      	b.n	801e4dc <__libc_init_array+0xc>
 801e4fe:	f855 3b04 	ldr.w	r3, [r5], #4
 801e502:	4798      	blx	r3
 801e504:	3601      	adds	r6, #1
 801e506:	e7f2      	b.n	801e4ee <__libc_init_array+0x1e>
 801e508:	0801f690 	.word	0x0801f690
 801e50c:	0801f690 	.word	0x0801f690
 801e510:	0801f690 	.word	0x0801f690
 801e514:	0801f698 	.word	0x0801f698

0801e518 <__retarget_lock_acquire_recursive>:
 801e518:	4770      	bx	lr

0801e51a <__retarget_lock_release_recursive>:
 801e51a:	4770      	bx	lr

0801e51c <register_fini>:
 801e51c:	4b02      	ldr	r3, [pc, #8]	; (801e528 <register_fini+0xc>)
 801e51e:	b113      	cbz	r3, 801e526 <register_fini+0xa>
 801e520:	4802      	ldr	r0, [pc, #8]	; (801e52c <register_fini+0x10>)
 801e522:	f000 b805 	b.w	801e530 <atexit>
 801e526:	4770      	bx	lr
 801e528:	00000000 	.word	0x00000000
 801e52c:	0801e53d 	.word	0x0801e53d

0801e530 <atexit>:
 801e530:	2300      	movs	r3, #0
 801e532:	4601      	mov	r1, r0
 801e534:	461a      	mov	r2, r3
 801e536:	4618      	mov	r0, r3
 801e538:	f000 b814 	b.w	801e564 <__register_exitproc>

0801e53c <__libc_fini_array>:
 801e53c:	b538      	push	{r3, r4, r5, lr}
 801e53e:	4d07      	ldr	r5, [pc, #28]	; (801e55c <__libc_fini_array+0x20>)
 801e540:	4c07      	ldr	r4, [pc, #28]	; (801e560 <__libc_fini_array+0x24>)
 801e542:	1b64      	subs	r4, r4, r5
 801e544:	10a4      	asrs	r4, r4, #2
 801e546:	b91c      	cbnz	r4, 801e550 <__libc_fini_array+0x14>
 801e548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e54c:	f000 b8d2 	b.w	801e6f4 <_fini>
 801e550:	3c01      	subs	r4, #1
 801e552:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801e556:	4798      	blx	r3
 801e558:	e7f5      	b.n	801e546 <__libc_fini_array+0xa>
 801e55a:	bf00      	nop
 801e55c:	0801f698 	.word	0x0801f698
 801e560:	0801f69c 	.word	0x0801f69c

0801e564 <__register_exitproc>:
 801e564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e568:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e5d8 <__register_exitproc+0x74>
 801e56c:	4606      	mov	r6, r0
 801e56e:	f8da 0000 	ldr.w	r0, [sl]
 801e572:	4698      	mov	r8, r3
 801e574:	460f      	mov	r7, r1
 801e576:	4691      	mov	r9, r2
 801e578:	f7ff ffce 	bl	801e518 <__retarget_lock_acquire_recursive>
 801e57c:	4b17      	ldr	r3, [pc, #92]	; (801e5dc <__register_exitproc+0x78>)
 801e57e:	681c      	ldr	r4, [r3, #0]
 801e580:	b90c      	cbnz	r4, 801e586 <__register_exitproc+0x22>
 801e582:	4c17      	ldr	r4, [pc, #92]	; (801e5e0 <__register_exitproc+0x7c>)
 801e584:	601c      	str	r4, [r3, #0]
 801e586:	6865      	ldr	r5, [r4, #4]
 801e588:	f8da 0000 	ldr.w	r0, [sl]
 801e58c:	2d1f      	cmp	r5, #31
 801e58e:	dd05      	ble.n	801e59c <__register_exitproc+0x38>
 801e590:	f7ff ffc3 	bl	801e51a <__retarget_lock_release_recursive>
 801e594:	f04f 30ff 	mov.w	r0, #4294967295
 801e598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e59c:	b19e      	cbz	r6, 801e5c6 <__register_exitproc+0x62>
 801e59e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e5a2:	2201      	movs	r2, #1
 801e5a4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801e5a8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801e5ac:	40aa      	lsls	r2, r5
 801e5ae:	4313      	orrs	r3, r2
 801e5b0:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801e5b4:	2e02      	cmp	r6, #2
 801e5b6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801e5ba:	bf02      	ittt	eq
 801e5bc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801e5c0:	4313      	orreq	r3, r2
 801e5c2:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801e5c6:	1c6b      	adds	r3, r5, #1
 801e5c8:	3502      	adds	r5, #2
 801e5ca:	6063      	str	r3, [r4, #4]
 801e5cc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e5d0:	f7ff ffa3 	bl	801e51a <__retarget_lock_release_recursive>
 801e5d4:	2000      	movs	r0, #0
 801e5d6:	e7df      	b.n	801e598 <__register_exitproc+0x34>
 801e5d8:	20000160 	.word	0x20000160
 801e5dc:	20001ee4 	.word	0x20001ee4
 801e5e0:	20001ee8 	.word	0x20001ee8
 801e5e4:	00000000 	.word	0x00000000

0801e5e8 <floor>:
 801e5e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e5f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801e5f4:	2e13      	cmp	r6, #19
 801e5f6:	460b      	mov	r3, r1
 801e5f8:	4607      	mov	r7, r0
 801e5fa:	460c      	mov	r4, r1
 801e5fc:	4605      	mov	r5, r0
 801e5fe:	dc32      	bgt.n	801e666 <floor+0x7e>
 801e600:	2e00      	cmp	r6, #0
 801e602:	da14      	bge.n	801e62e <floor+0x46>
 801e604:	a334      	add	r3, pc, #208	; (adr r3, 801e6d8 <floor+0xf0>)
 801e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60a:	f7e1 fdc3 	bl	8000194 <__adddf3>
 801e60e:	2200      	movs	r2, #0
 801e610:	2300      	movs	r3, #0
 801e612:	f7e2 fa05 	bl	8000a20 <__aeabi_dcmpgt>
 801e616:	b138      	cbz	r0, 801e628 <floor+0x40>
 801e618:	2c00      	cmp	r4, #0
 801e61a:	da56      	bge.n	801e6ca <floor+0xe2>
 801e61c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801e620:	4325      	orrs	r5, r4
 801e622:	d055      	beq.n	801e6d0 <floor+0xe8>
 801e624:	4c2e      	ldr	r4, [pc, #184]	; (801e6e0 <floor+0xf8>)
 801e626:	2500      	movs	r5, #0
 801e628:	4623      	mov	r3, r4
 801e62a:	462f      	mov	r7, r5
 801e62c:	e025      	b.n	801e67a <floor+0x92>
 801e62e:	4a2d      	ldr	r2, [pc, #180]	; (801e6e4 <floor+0xfc>)
 801e630:	fa42 f806 	asr.w	r8, r2, r6
 801e634:	ea01 0208 	and.w	r2, r1, r8
 801e638:	4302      	orrs	r2, r0
 801e63a:	d01e      	beq.n	801e67a <floor+0x92>
 801e63c:	a326      	add	r3, pc, #152	; (adr r3, 801e6d8 <floor+0xf0>)
 801e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e642:	f7e1 fda7 	bl	8000194 <__adddf3>
 801e646:	2200      	movs	r2, #0
 801e648:	2300      	movs	r3, #0
 801e64a:	f7e2 f9e9 	bl	8000a20 <__aeabi_dcmpgt>
 801e64e:	2800      	cmp	r0, #0
 801e650:	d0ea      	beq.n	801e628 <floor+0x40>
 801e652:	2c00      	cmp	r4, #0
 801e654:	bfbe      	ittt	lt
 801e656:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e65a:	4133      	asrlt	r3, r6
 801e65c:	18e4      	addlt	r4, r4, r3
 801e65e:	ea24 0408 	bic.w	r4, r4, r8
 801e662:	2500      	movs	r5, #0
 801e664:	e7e0      	b.n	801e628 <floor+0x40>
 801e666:	2e33      	cmp	r6, #51	; 0x33
 801e668:	dd0b      	ble.n	801e682 <floor+0x9a>
 801e66a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e66e:	d104      	bne.n	801e67a <floor+0x92>
 801e670:	4602      	mov	r2, r0
 801e672:	f7e1 fd8f 	bl	8000194 <__adddf3>
 801e676:	4607      	mov	r7, r0
 801e678:	460b      	mov	r3, r1
 801e67a:	4638      	mov	r0, r7
 801e67c:	4619      	mov	r1, r3
 801e67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e682:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801e686:	f04f 38ff 	mov.w	r8, #4294967295
 801e68a:	fa28 f802 	lsr.w	r8, r8, r2
 801e68e:	ea10 0f08 	tst.w	r0, r8
 801e692:	d0f2      	beq.n	801e67a <floor+0x92>
 801e694:	a310      	add	r3, pc, #64	; (adr r3, 801e6d8 <floor+0xf0>)
 801e696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e69a:	f7e1 fd7b 	bl	8000194 <__adddf3>
 801e69e:	2200      	movs	r2, #0
 801e6a0:	2300      	movs	r3, #0
 801e6a2:	f7e2 f9bd 	bl	8000a20 <__aeabi_dcmpgt>
 801e6a6:	2800      	cmp	r0, #0
 801e6a8:	d0be      	beq.n	801e628 <floor+0x40>
 801e6aa:	2c00      	cmp	r4, #0
 801e6ac:	da0a      	bge.n	801e6c4 <floor+0xdc>
 801e6ae:	2e14      	cmp	r6, #20
 801e6b0:	d101      	bne.n	801e6b6 <floor+0xce>
 801e6b2:	3401      	adds	r4, #1
 801e6b4:	e006      	b.n	801e6c4 <floor+0xdc>
 801e6b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e6ba:	2301      	movs	r3, #1
 801e6bc:	40b3      	lsls	r3, r6
 801e6be:	441d      	add	r5, r3
 801e6c0:	42af      	cmp	r7, r5
 801e6c2:	d8f6      	bhi.n	801e6b2 <floor+0xca>
 801e6c4:	ea25 0508 	bic.w	r5, r5, r8
 801e6c8:	e7ae      	b.n	801e628 <floor+0x40>
 801e6ca:	2500      	movs	r5, #0
 801e6cc:	462c      	mov	r4, r5
 801e6ce:	e7ab      	b.n	801e628 <floor+0x40>
 801e6d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e6d4:	e7a8      	b.n	801e628 <floor+0x40>
 801e6d6:	bf00      	nop
 801e6d8:	8800759c 	.word	0x8800759c
 801e6dc:	7e37e43c 	.word	0x7e37e43c
 801e6e0:	bff00000 	.word	0xbff00000
 801e6e4:	000fffff 	.word	0x000fffff

0801e6e8 <_init>:
 801e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6ea:	bf00      	nop
 801e6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6ee:	bc08      	pop	{r3}
 801e6f0:	469e      	mov	lr, r3
 801e6f2:	4770      	bx	lr

0801e6f4 <_fini>:
 801e6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6f6:	bf00      	nop
 801e6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e6fa:	bc08      	pop	{r3}
 801e6fc:	469e      	mov	lr, r3
 801e6fe:	4770      	bx	lr
