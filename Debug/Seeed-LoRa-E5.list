
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb50  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ecc  0801ec88  0801ec88  0002ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fb54  0801fb54  0002fb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc2c  0801fc2c  0003016c  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc2c  0801fc2c  0002fc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc34  0801fc34  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fc34  0801fc34  0002fc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc3c  0801fc3c  0002fc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000016c  20000000  0801fc40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f44  2000016c  0801fdac  0003016c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020b0  0801fdac  000320b0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004d311  00000000  00000000  000301d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ba7a  00000000  00000000  0007d4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003ee8  00000000  00000000  00088f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002fef  00000000  00000000  0008ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bec1  00000000  00000000  0008fe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004dc7e  00000000  00000000  000bbd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db2f0  00000000  00000000  0010997e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00010780  00000000  00000000  001e4c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001f53f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000016c 	.word	0x2000016c
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ec70 	.word	0x0801ec70

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000170 	.word	0x20000170
 8000174:	0801ec70 	.word	0x0801ec70

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <CS_Select>:
#define NRF24_CSN_PORT  GPIOB
#define NRF24_CSN_PIN   GPIO_PIN_9


void CS_Select (void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	4802      	ldr	r0, [pc, #8]	; (800109c <CS_Select+0x14>)
 8001094:	f005 f85c 	bl	8006150 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48000400 	.word	0x48000400

080010a0 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <CS_UnSelect+0x14>)
 80010ac:	f005 f850 	bl	8006150 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	48000400 	.word	0x48000400

080010b8 <CE_Enable>:


void CE_Enable (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c2:	4802      	ldr	r0, [pc, #8]	; (80010cc <CE_Enable+0x14>)
 80010c4:	f005 f844 	bl	8006150 <HAL_GPIO_WritePin>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	48000400 	.word	0x48000400

080010d0 <CE_Disable>:

void CE_Disable (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	4802      	ldr	r0, [pc, #8]	; (80010e4 <CE_Disable+0x14>)
 80010dc:	f005 f838 	bl	8006150 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	48000400 	.word	0x48000400

080010e8 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//HAL_StatusTypeDef checkOK;
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f043 0320 	orr.w	r3, r3, #32
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001106:	f7ff ffbf 	bl	8001088 <CS_Select>

//	checkOK = HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800110a:	f7ff ffc9 	bl	80010a0 <CS_UnSelect>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f043 0320 	orr.w	r3, r3, #32
 800112c:	b2db      	uxtb	r3, r3
 800112e:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001130:	f7ff ffaa 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8001134:	f107 0114 	add.w	r1, r7, #20
 8001138:	2364      	movs	r3, #100	; 0x64
 800113a:	2201      	movs	r2, #1
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800113e:	f007 fd9b 	bl	8008c78 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b29a      	uxth	r2, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	68b9      	ldr	r1, [r7, #8]
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <nrf24_WriteRegMulti+0x48>)
 800114e:	f007 fd93 	bl	8008c78 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001152:	f7ff ffa5 	bl	80010a0 <CS_UnSelect>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000334 	.word	0x20000334

08001164 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001172:	f7ff ff89 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8001176:	1df9      	adds	r1, r7, #7
 8001178:	2364      	movs	r3, #100	; 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800117e:	f007 fd7b 	bl	8008c78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8001182:	f107 010f 	add.w	r1, r7, #15
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <nrf24_ReadReg+0x3c>)
 800118c:	f007 ff04 	bl	8008f98 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001190:	f7ff ff86 	bl	80010a0 <CS_UnSelect>

	return data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000334 	.word	0x20000334

080011a4 <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80011b2:	f7ff ff69 	bl	8001088 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80011b6:	f107 010f 	add.w	r1, r7, #15
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011c0:	f007 fd5a 	bl	8008c78 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <nrf24_ReadReg_Multi+0x3c>)
 80011d0:	f007 fee2 	bl	8008f98 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80011d4:	f7ff ff64 	bl	80010a0 <CS_UnSelect>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000334 	.word	0x20000334

080011e4 <nrf24_reset>:
	// Pull the CS HIGH to release the device
	CS_UnSelect();
}

void nrf24_reset(uint8_t REG)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d104      	bne.n	80011fe <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f7ff ff76 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80011fc:	e090      	b.n	8001320 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b17      	cmp	r3, #23
 8001202:	d104      	bne.n	800120e <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001204:	2111      	movs	r1, #17
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff ff6e 	bl	80010e8 <nrf24_WriteReg>
}
 800120c:	e088      	b.n	8001320 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800120e:	2108      	movs	r1, #8
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ff69 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8001216:	213f      	movs	r1, #63	; 0x3f
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ff65 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800121e:	2103      	movs	r1, #3
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff61 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff ff5d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800122e:	2103      	movs	r1, #3
 8001230:	2004      	movs	r0, #4
 8001232:	f7ff ff59 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8001236:	2102      	movs	r1, #2
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ff55 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800123e:	210e      	movs	r1, #14
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff ff51 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8001246:	2100      	movs	r1, #0
 8001248:	2007      	movs	r0, #7
 800124a:	f7ff ff4d 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800124e:	2100      	movs	r1, #0
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff ff49 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8001256:	2100      	movs	r1, #0
 8001258:	2009      	movs	r0, #9
 800125a:	f7ff ff45 	bl	80010e8 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800125e:	4a32      	ldr	r2, [pc, #200]	; (8001328 <nrf24_reset+0x144>)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001268:	6018      	str	r0, [r3, #0]
 800126a:	3304      	adds	r3, #4
 800126c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 800126e:	f107 0318 	add.w	r3, r7, #24
 8001272:	2205      	movs	r2, #5
 8001274:	4619      	mov	r1, r3
 8001276:	200a      	movs	r0, #10
 8001278:	f7ff ff4e 	bl	8001118 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <nrf24_reset+0x148>)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001286:	6018      	str	r0, [r3, #0]
 8001288:	3304      	adds	r3, #4
 800128a:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2205      	movs	r2, #5
 8001292:	4619      	mov	r1, r3
 8001294:	200b      	movs	r0, #11
 8001296:	f7ff ff3f 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800129a:	21c3      	movs	r1, #195	; 0xc3
 800129c:	200c      	movs	r0, #12
 800129e:	f7ff ff23 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80012a2:	21c4      	movs	r1, #196	; 0xc4
 80012a4:	200d      	movs	r0, #13
 80012a6:	f7ff ff1f 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80012aa:	21c5      	movs	r1, #197	; 0xc5
 80012ac:	200e      	movs	r0, #14
 80012ae:	f7ff ff1b 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80012b2:	21c6      	movs	r1, #198	; 0xc6
 80012b4:	200f      	movs	r0, #15
 80012b6:	f7ff ff17 	bl	80010e8 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80012ba:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <nrf24_reset+0x144>)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012c4:	6018      	str	r0, [r3, #0]
 80012c6:	3304      	adds	r3, #4
 80012c8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	2205      	movs	r2, #5
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff ff20 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80012d8:	2100      	movs	r1, #0
 80012da:	2011      	movs	r0, #17
 80012dc:	f7ff ff04 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2012      	movs	r0, #18
 80012e4:	f7ff ff00 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	2013      	movs	r0, #19
 80012ec:	f7ff fefc 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fef8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2015      	movs	r0, #21
 80012fc:	f7ff fef4 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	2016      	movs	r0, #22
 8001304:	f7ff fef0 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001308:	2111      	movs	r1, #17
 800130a:	2017      	movs	r0, #23
 800130c:	f7ff feec 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f7ff fee8 	bl	80010e8 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	201d      	movs	r0, #29
 800131c:	f7ff fee4 	bl	80010e8 <nrf24_WriteReg>
}
 8001320:	bf00      	nop
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0801ec88 	.word	0x0801ec88
 800132c:	0801ec90 	.word	0x0801ec90

08001330 <NRF24_Init>:




void NRF24_Init (void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001334:	f7ff fecc 	bl	80010d0 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff ff53 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 800133e:	2100      	movs	r1, #0
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff fed1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 8001346:	2100      	movs	r1, #0
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fecd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 800134e:	2100      	movs	r1, #0
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fec9 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8001356:	2103      	movs	r1, #3
 8001358:	2003      	movs	r0, #3
 800135a:	f7ff fec5 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800135e:	2100      	movs	r1, #0
 8001360:	2004      	movs	r0, #4
 8001362:	f7ff fec1 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8001366:	2100      	movs	r1, #0
 8001368:	2005      	movs	r0, #5
 800136a:	f7ff febd 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800136e:	210e      	movs	r1, #14
 8001370:	2006      	movs	r0, #6
 8001372:	f7ff feb9 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001376:	f7ff fe9f 	bl	80010b8 <CE_Enable>

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}

0800137e <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800138a:	f7ff fea1 	bl	80010d0 <CE_Disable>

	nrf24_reset (STATUS);
 800138e:	2007      	movs	r0, #7
 8001390:	f7ff ff28 	bl	80011e4 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	2005      	movs	r0, #5
 800139a:	f7ff fea5 	bl	80010e8 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fee0 	bl	8001164 <nrf24_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe97 	bl	80010e8 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80013ba:	2205      	movs	r2, #5
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	200b      	movs	r0, #11
 80013c0:	f7ff feaa 	bl	8001118 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80013c4:	21ee      	movs	r1, #238	; 0xee
 80013c6:	200c      	movs	r0, #12
 80013c8:	f7ff fe8e 	bl	80010e8 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80013cc:	2120      	movs	r1, #32
 80013ce:	2013      	movs	r0, #19
 80013d0:	f7ff fe8a 	bl	80010e8 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fec5 	bl	8001164 <nrf24_ReadReg>
 80013da:	4603      	mov	r3, r0
 80013dc:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	f043 0303 	orr.w	r3, r3, #3
 80013e4:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe7c 	bl	80010e8 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80013f0:	f7ff fe62 	bl	80010b8 <CE_Enable>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fead 	bl	8001164 <nrf24_ReadReg>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00b      	beq.n	8001430 <isDataAvailable+0x34>
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff fe5e 	bl	80010e8 <nrf24_WriteReg>

		return 1;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <isDataAvailable+0x36>
	}

	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 800143a:	b590      	push	{r4, r7, lr}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e00c      	b.n	8001462 <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	b2d9      	uxtb	r1, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	18d4      	adds	r4, r2, r3
 8001452:	4608      	mov	r0, r1
 8001454:	f7ff fe86 	bl	8001164 <nrf24_ReadReg>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	3301      	adds	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b09      	cmp	r3, #9
 8001466:	ddef      	ble.n	8001448 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	330a      	adds	r3, #10
 800146c:	2205      	movs	r2, #5
 800146e:	4619      	mov	r1, r3
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff fe97 	bl	80011a4 <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	330f      	adds	r3, #15
 800147a:	2205      	movs	r2, #5
 800147c:	4619      	mov	r1, r3
 800147e:	200b      	movs	r0, #11
 8001480:	f7ff fe90 	bl	80011a4 <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 0414 	add.w	r4, r3, #20
 800148a:	200c      	movs	r0, #12
 800148c:	f7ff fe6a 	bl	8001164 <nrf24_ReadReg>
 8001490:	4603      	mov	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f103 0415 	add.w	r4, r3, #21
 800149a:	200d      	movs	r0, #13
 800149c:	f7ff fe62 	bl	8001164 <nrf24_ReadReg>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f103 0416 	add.w	r4, r3, #22
 80014aa:	200e      	movs	r0, #14
 80014ac:	f7ff fe5a 	bl	8001164 <nrf24_ReadReg>
 80014b0:	4603      	mov	r3, r0
 80014b2:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f103 0417 	add.w	r4, r3, #23
 80014ba:	200f      	movs	r0, #15
 80014bc:	f7ff fe52 	bl	8001164 <nrf24_ReadReg>
 80014c0:	4603      	mov	r3, r0
 80014c2:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3318      	adds	r3, #24
 80014c8:	2205      	movs	r2, #5
 80014ca:	4619      	mov	r1, r3
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff fe69 	bl	80011a4 <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 80014d2:	231d      	movs	r3, #29
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	e00e      	b.n	80014f6 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b0c      	subs	r3, #12
 80014de:	b2d9      	uxtb	r1, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	18d4      	adds	r4, r2, r3
 80014e6:	4608      	mov	r0, r1
 80014e8:	f7ff fe3c 	bl	8001164 <nrf24_ReadReg>
 80014ec:	4603      	mov	r3, r0
 80014ee:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b25      	cmp	r3, #37	; 0x25
 80014fa:	dded      	ble.n	80014d8 <NRF24_ReadAll+0x9e>
	}

}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001522:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001542:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	43db      	mvns	r3, r3
 8001548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154c:	4013      	ands	r3, r2
 800154e:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
	...

0800155c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_ADC_Init+0x94>)
 8001562:	4a24      	ldr	r2, [pc, #144]	; (80015f4 <MX_ADC_Init+0x98>)
 8001564:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_ADC_Init+0x94>)
 8001568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800156c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_ADC_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_ADC_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_ADC_Init+0x94>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_ADC_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_ADC_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_ADC_Init+0x94>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ADC_Init+0x94>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_ADC_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_ADC_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC_Init+0x94>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_ADC_Init+0x94>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_ADC_Init+0x94>)
 80015ca:	2207      	movs	r2, #7
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_ADC_Init+0x94>)
 80015d8:	2200      	movs	r2, #0
 80015da:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_ADC_Init+0x94>)
 80015de:	f002 fcf7 	bl	8003fd0 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80015e8:	f000 fe76 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000188 	.word	0x20000188
 80015f4:	40012400 	.word	0x40012400

080015f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x24>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d103      	bne.n	8001612 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800160a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160e:	f7ff ff7a 	bl	8001506 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40012400 	.word	0x40012400

08001620 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a05      	ldr	r2, [pc, #20]	; (8001644 <HAL_ADC_MspDeInit+0x24>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d103      	bne.n	800163a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001636:	f7ff ff7e 	bl	8001536 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40012400 	.word	0x40012400

08001648 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <SYS_InitMeasurement+0x14>)
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <SYS_InitMeasurement+0x18>)
 8001650:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000188 	.word	0x20000188
 8001660:	40012400 	.word	0x40012400

08001664 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001672:	4813      	ldr	r0, [pc, #76]	; (80016c0 <SYS_GetBatteryLevel+0x5c>)
 8001674:	f000 f82a 	bl	80016cc <ADC_ReadChannels>
 8001678:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	80fb      	strh	r3, [r7, #6]
 8001684:	e016      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	4293      	cmp	r3, r2
 8001690:	d00b      	beq.n	80016aa <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <SYS_GetBatteryLevel+0x60>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	f640 43e4 	movw	r3, #3300	; 0xce4
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	80fb      	strh	r3, [r7, #6]
 80016a8:	e004      	b.n	80016b4 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SYS_GetBatteryLevel+0x64>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b2:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80016b4:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	b4002000 	.word	0xb4002000
 80016c4:	1fff75aa 	.word	0x1fff75aa
 80016c8:	004c08d8 	.word	0x004c08d8

080016cc <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80016e4:	f7ff ff3a 	bl	800155c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <ADC_ReadChannels+0x88>)
 80016ea:	f003 fa90 	bl	8004c0e <HAL_ADCEx_Calibration_Start>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80016f4:	f000 fdf0 	bl	80022d8 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001700:	2300      	movs	r3, #0
 8001702:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	4812      	ldr	r0, [pc, #72]	; (8001754 <ADC_ReadChannels+0x88>)
 800170c:	f002 ff9c 	bl	8004648 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001716:	f000 fddf 	bl	80022d8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <ADC_ReadChannels+0x88>)
 800171c:	f002 fe78 	bl	8004410 <HAL_ADC_Start>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001726:	f000 fdd7 	bl	80022d8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <ADC_ReadChannels+0x88>)
 8001730:	f002 fee6 	bl	8004500 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <ADC_ReadChannels+0x88>)
 8001736:	f002 feb1 	bl	800449c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <ADC_ReadChannels+0x88>)
 800173c:	f002 ff77 	bl	800462e <HAL_ADC_GetValue>
 8001740:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001742:	4804      	ldr	r0, [pc, #16]	; (8001754 <ADC_ReadChannels+0x88>)
 8001744:	f002 fdd8 	bl	80042f8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001748:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000188 	.word	0x20000188

08001758 <LL_AHB1_GRP1_EnableClock>:
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4313      	orrs	r3, r2
 800176e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800178c:	2004      	movs	r0, #4
 800178e:	f7ff ffe3 	bl	8001758 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff ffe0 	bl	8001758 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2102      	movs	r1, #2
 800179c:	200b      	movs	r0, #11
 800179e:	f003 fbdc 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a2:	200b      	movs	r0, #11
 80017a4:	f003 fbf3 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f003 fbd4 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f003 fbeb 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	203d      	movs	r0, #61	; 0x3d
 80017be:	f003 fbcc 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80017c2:	203d      	movs	r0, #61	; 0x3d
 80017c4:	f003 fbe3 	bl	8004f8e <HAL_NVIC_EnableIRQ>

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017d8:	23ff      	movs	r3, #255	; 0xff
 80017da:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e2:	d311      	bcc.n	8001808 <FLASH_IF_Write+0x3c>
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <FLASH_IF_Write+0x48>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	029a      	lsls	r2, r3, #10
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <FLASH_IF_Write+0x4c>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017f2:	3b01      	subs	r3, #1
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d306      	bcc.n	8001808 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f85a 	bl	80018b8 <FLASH_IF_INT_Write>
 8001804:	4603      	mov	r3, r0
 8001806:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	1fff75e0 	.word	0x1fff75e0
 8001818:	03fffc00 	.word	0x03fffc00

0800181c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001828:	23ff      	movs	r3, #255	; 0xff
 800182a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001832:	d311      	bcc.n	8001858 <FLASH_IF_Read+0x3c>
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <FLASH_IF_Read+0x48>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	029a      	lsls	r2, r3, #10
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <FLASH_IF_Read+0x4c>)
 800183c:	4013      	ands	r3, r2
 800183e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001842:	3b01      	subs	r3, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4293      	cmp	r3, r2
 8001848:	d306      	bcc.n	8001858 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f93a 	bl	8001ac8 <FLASH_IF_INT_Read>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	1fff75e0 	.word	0x1fff75e0
 8001868:	03fffc00 	.word	0x03fffc00

0800186c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001876:	23ff      	movs	r3, #255	; 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001880:	d310      	bcc.n	80018a4 <FLASH_IF_Erase+0x38>
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <FLASH_IF_Erase+0x44>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	029a      	lsls	r2, r3, #10
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <FLASH_IF_Erase+0x48>)
 800188a:	4013      	ands	r3, r2
 800188c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001890:	3b01      	subs	r3, #1
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4293      	cmp	r3, r2
 8001896:	d305      	bcc.n	80018a4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001898:	6839      	ldr	r1, [r7, #0]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f932 	bl	8001b04 <FLASH_IF_INT_Erase>
 80018a0:	4603      	mov	r3, r0
 80018a2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80018a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	1fff75e0 	.word	0x1fff75e0
 80018b4:	03fffc00 	.word	0x03fffc00

080018b8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <FLASH_IF_INT_Write+0x3e>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d009      	beq.n	80018f6 <FLASH_IF_INT_Write+0x3e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80018f6:	f06f 0305 	mvn.w	r3, #5
 80018fa:	e0da      	b.n	8001ab2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018fc:	f000 f992 	bl	8001c24 <FLASH_IF_INT_Clear_Error>
 8001900:	4603      	mov	r3, r0
 8001902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 80cf 	bne.w	8001aae <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001910:	f004 f81a 	bl	8005948 <HAL_FLASH_Unlock>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 80c6 	bne.w	8001aa8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800191c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001922:	4b66      	ldr	r3, [pc, #408]	; (8001abc <FLASH_IF_INT_Write+0x204>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	0299      	lsls	r1, r3, #10
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <FLASH_IF_INT_Write+0x208>)
 800192a:	400b      	ands	r3, r1
 800192c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	0adb      	lsrs	r3, r3, #11
 8001938:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800193a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001944:	3b01      	subs	r3, #1
 8001946:	4a5d      	ldr	r2, [pc, #372]	; (8001abc <FLASH_IF_INT_Write+0x204>)
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	0291      	lsls	r1, r2, #10
 800194c:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <FLASH_IF_INT_Write+0x208>)
 800194e:	400a      	ands	r2, r1
 8001950:	fbb3 f1f2 	udiv	r1, r3, r2
 8001954:	fb01 f202 	mul.w	r2, r1, r2
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	0ada      	lsrs	r2, r3, #11
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d905      	bls.n	8001976 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001970:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	e089      	b.n	8001a90 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f925 	bl	8001bd8 <FLASH_IF_INT_IsEmpty>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d031      	beq.n	80019f8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d103      	bne.n	80019a4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800199c:	23fa      	movs	r3, #250	; 0xfa
 800199e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80019a2:	e07e      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6939      	ldr	r1, [r7, #16]
 80019aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f88a 	bl	8001ac8 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019be:	4413      	add	r3, r2
 80019c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c4:	b292      	uxth	r2, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f01b fd7c 	bl	801d4c4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f896 	bl	8001b04 <FLASH_IF_INT_Erase>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80019de:	23fe      	movs	r3, #254	; 0xfe
 80019e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80019e4:	e05d      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80019ea:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <FLASH_IF_INT_Write+0x20c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80019f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e005      	b.n	8001a04 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80019f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80019fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fe:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a02:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a08:	e026      	b.n	8001a58 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001a0a:	6a3a      	ldr	r2, [r7, #32]
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a16:	2001      	movs	r0, #1
 8001a18:	f003 ff52 	bl	80058c0 <HAL_FLASH_Program>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a28:	6a3a      	ldr	r2, [r7, #32]
 8001a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2c:	4413      	add	r3, r2
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4299      	cmp	r1, r3
 8001a34:	bf08      	it	eq
 8001a36:	4290      	cmpeq	r0, r2
 8001a38:	d003      	beq.n	8001a42 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001a3a:	23fc      	movs	r3, #252	; 0xfc
 8001a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001a40:	e00e      	b.n	8001a60 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3308      	adds	r3, #8
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
 8001a48:	e003      	b.n	8001a52 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001a4a:	23fc      	movs	r3, #252	; 0xfc
 8001a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001a50:	e006      	b.n	8001a60 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	3308      	adds	r3, #8
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3d4      	bcc.n	8001a0a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001a60:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11b      	bne.n	8001aa0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	4413      	add	r3, r2
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	4413      	add	r3, r2
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a82:	bf28      	it	cs
 8001a84:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	f4ff af6f 	bcc.w	800197c <FLASH_IF_INT_Write+0xc4>
 8001a9e:	e000      	b.n	8001aa2 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001aa0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001aa2:	f003 ff73 	bl	800598c <HAL_FLASH_Lock>
 8001aa6:	e002      	b.n	8001aae <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001aa8:	23fb      	movs	r3, #251	; 0xfb
 8001aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001aae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3740      	adds	r7, #64	; 0x40
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	1fff75e0 	.word	0x1fff75e0
 8001ac0:	03fffc00 	.word	0x03fffc00
 8001ac4:	200001ec 	.word	0x200001ec

08001ac8 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <FLASH_IF_INT_Read+0x1c>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d102      	bne.n	8001aea <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001ae4:	f06f 0305 	mvn.w	r3, #5
 8001ae8:	e008      	b.n	8001afc <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	461a      	mov	r2, r3
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f01b fce6 	bl	801d4c4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001b24:	f06f 0305 	mvn.w	r3, #5
 8001b28:	e04e      	b.n	8001bc8 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001b2a:	f000 f87b 	bl	8001c24 <FLASH_IF_INT_Clear_Error>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d144      	bne.n	8001bc4 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001b3a:	f003 ff05 	bl	8005948 <HAL_FLASH_Unlock>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d13d      	bne.n	8001bc0 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001b44:	2302      	movs	r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <FLASH_IF_INT_Erase+0xcc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0299      	lsls	r1, r3, #10
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <FLASH_IF_INT_Erase+0xd0>)
 8001b56:	400b      	ands	r3, r1
 8001b58:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b70:	3b01      	subs	r3, #1
 8001b72:	4a17      	ldr	r2, [pc, #92]	; (8001bd0 <FLASH_IF_INT_Erase+0xcc>)
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	0291      	lsls	r1, r2, #10
 8001b78:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <FLASH_IF_INT_Erase+0xd0>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	0ada      	lsrs	r2, r3, #11
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001b90:	f107 0214 	add.w	r2, r7, #20
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 ffd6 	bl	8005b4c <HAL_FLASHEx_Erase>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001ba4:	7fbb      	ldrb	r3, [r7, #30]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001baa:	7fbb      	ldrb	r3, [r7, #30]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d101      	bne.n	8001bb4 <FLASH_IF_INT_Erase+0xb0>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e001      	b.n	8001bb8 <FLASH_IF_INT_Erase+0xb4>
 8001bb4:	f06f 0301 	mvn.w	r3, #1
 8001bb8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001bba:	f003 fee7 	bl	800598c <HAL_FLASH_Lock>
 8001bbe:	e001      	b.n	8001bc4 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001bc0:	23fb      	movs	r3, #251	; 0xfb
 8001bc2:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001bc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	1fff75e0 	.word	0x1fff75e0
 8001bd4:	03fffc00 	.word	0x03fffc00

08001bd8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	e011      	b.n	8001c10 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	bf08      	it	eq
 8001bf8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001bfc:	d002      	beq.n	8001c04 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      break;
 8001c02:	e009      	b.n	8001c18 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3308      	adds	r3, #8
 8001c08:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d3e9      	bcc.n	8001bec <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001c2a:	23fb      	movs	r3, #251	; 0xfb
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001c2e:	f003 fe8b 	bl	8005948 <HAL_FLASH_Unlock>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d110      	bne.n	8001c5a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c3e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <FLASH_IF_INT_Clear_Error+0x44>)
 8001c46:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001c4a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001c4c:	f003 fe9e 	bl	800598c <HAL_FLASH_Lock>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	58004000 	.word	0x58004000

08001c6c <LL_AHB2_GRP1_EnableClock>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c90:	68fb      	ldr	r3, [r7, #12]
}
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f7ff ffdb 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff ffd8 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f7ff ffd5 	bl	8001c6c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8001cc8:	4825      	ldr	r0, [pc, #148]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cca:	f004 fa41 	bl	8006150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	4823      	ldr	r0, [pc, #140]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cd4:	f004 fa3c 	bl	8006150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f240 2131 	movw	r1, #561	; 0x231
 8001cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ce2:	f004 fa35 	bl	8006150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 8001ce6:	2338      	movs	r3, #56	; 0x38
 8001ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4819      	ldr	r0, [pc, #100]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001cfc:	f003 fffa 	bl	8005cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001d00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <MX_GPIO_Init+0xc4>)
 8001d18:	f003 ffec 	bl	8005cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001d1c:	2331      	movs	r3, #49	; 0x31
 8001d1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d34:	f003 ffde 	bl	8005cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d3e:	2311      	movs	r3, #17
 8001d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d52:	f003 ffcf 	bl	8005cf4 <HAL_GPIO_Init>

}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	48000400 	.word	0x48000400

08001d64 <LL_AHB2_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <LL_APB1_GRP1_EnableClock>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dca:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <MX_I2C2_Init+0x78>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <MX_I2C2_Init+0x7c>)
 8001dd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dfe:	480e      	ldr	r0, [pc, #56]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e00:	f004 f9d6 	bl	80061b0 <HAL_I2C_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e0a:	f000 fa65 	bl	80022d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4809      	ldr	r0, [pc, #36]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e12:	f004 feb1 	bl	8006b78 <HAL_I2CEx_ConfigAnalogFilter>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e1c:	f000 fa5c 	bl	80022d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e20:	2100      	movs	r1, #0
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_I2C2_Init+0x74>)
 8001e24:	f004 fef2 	bl	8006c0c <HAL_I2CEx_ConfigDigitalFilter>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e2e:	f000 fa53 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001f0 	.word	0x200001f0
 8001e3c:	40005800 	.word	0x40005800
 8001e40:	00707cbb 	.word	0x00707cbb

08001e44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b096      	sub	sp, #88	; 0x58
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2238      	movs	r2, #56	; 0x38
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f01c fdf1 	bl	801ea4c <memset>
  if(i2cHandle->Instance==I2C2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <HAL_I2C_MspInit+0xb0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d13b      	bne.n	8001eec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e78:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4618      	mov	r0, r3
 8001e84:	f006 f97e 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e8e:	f000 fa23 	bl	80022d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	2001      	movs	r0, #1
 8001e94:	f7ff ff66 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	2002      	movs	r0, #2
 8001e9a:	f7ff ff63 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001eac:	2301      	movs	r3, #1
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebe:	f003 ff19 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001edc:	4619      	mov	r1, r3
 8001ede:	4806      	ldr	r0, [pc, #24]	; (8001ef8 <HAL_I2C_MspInit+0xb4>)
 8001ee0:	f003 ff08 	bl	8005cf4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ee8:	f7ff ff54 	bl	8001d94 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001eec:	bf00      	nop
 8001eee:	3758      	adds	r7, #88	; 0x58
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40005800 	.word	0x40005800
 8001ef8:	48000400 	.word	0x48000400

08001efc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	f023 0218 	bic.w	r2, r3, #24
 8001f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f2c:	f001 fe62 	bl	8003bf4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f30:	f000 f84e 	bl	8001fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f34:	f7ff feb2 	bl	8001c9c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001f38:	f00b f948 	bl	800d1cc <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001f3c:	f001 fab4 	bl	80034a8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001f40:	f7ff ff40 	bl	8001dc4 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001f44:	f000 ff0a 	bl	8002d5c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001f48:	f000 ff3c 	bl	8002dc4 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001f4c:	f000 fb28 	bl	80025a0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  UART2_SET =0;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <main+0x8c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]

  NRF24_Init();
 8001f56:	f7ff f9eb 	bl	8001330 <NRF24_Init>

  NRF24_RxMode(RxAddress, 10);
 8001f5a:	210a      	movs	r1, #10
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <main+0x90>)
 8001f5e:	f7ff fa0e 	bl	800137e <NRF24_RxMode>


   NRF24_ReadAll(data);
 8001f62:	4816      	ldr	r0, [pc, #88]	; (8001fbc <main+0x94>)
 8001f64:	f7ff fa69 	bl	800143a <NRF24_ReadAll>

  F1_QueueIni(); // init Function queue
 8001f68:	f000 f9c2 	bl	80022f0 <F1_QueueIni>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)aRXBufferUser, RX_BUFFER_SIZE);
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	4914      	ldr	r1, [pc, #80]	; (8001fc0 <main+0x98>)
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <main+0x9c>)
 8001f72:	f008 fe2b 	bl	800abcc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f80:	f004 f8e6 	bl	8006150 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 8001f84:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <main+0xa0>)
 8001f86:	f008 fba3 	bl	800a6d0 <HAL_TIM_Base_Start_IT>
  {



    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001f8a:	f00b f927 	bl	800d1dc <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */


    F1_pull()();
 8001f8e:	f000 f9f3 	bl	8002378 <F1_pull>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4798      	blx	r3



    if(UART2_SET)MeasurePM_sens();
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <main+0x8c>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <main+0x7a>
 8001f9e:	f000 f881 	bl	80020a4 <MeasurePM_sens>
    if (isDataAvailable(2) == 1)
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f7ff fa2a 	bl	80013fc <isDataAvailable>
   	  {
 //  		  NRF24_Receive(RxData);
//   		  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
   	  }

    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4808      	ldr	r0, [pc, #32]	; (8001fcc <main+0xa4>)
 8001fac:	f004 f8e7 	bl	800617e <HAL_GPIO_TogglePin>
    MX_LoRaWAN_Process();
 8001fb0:	e7eb      	b.n	8001f8a <main+0x62>
 8001fb2:	bf00      	nop
 8001fb4:	20000010 	.word	0x20000010
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	20000274 	.word	0x20000274
 8001fc0:	20000244 	.word	0x20000244
 8001fc4:	200004e4 	.word	0x200004e4
 8001fc8:	200003b0 	.word	0x200003b0
 8001fcc:	48000400 	.word	0x48000400

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b09a      	sub	sp, #104	; 0x68
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0320 	add.w	r3, r7, #32
 8001fda:	2248      	movs	r2, #72	; 0x48
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f01c fd34 	bl	801ea4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ff6:	f004 fe55 	bl	8006ca4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff ff7e 	bl	8001efc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <SystemClock_Config+0xb8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <SystemClock_Config+0xb8>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <SystemClock_Config+0xb8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800201c:	2307      	movs	r3, #7
 800201e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8002020:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002026:	2381      	movs	r3, #129	; 0x81
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002030:	2340      	movs	r3, #64	; 0x40
 8002032:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800203c:	f107 0320 	add.w	r3, r7, #32
 8002040:	4618      	mov	r0, r3
 8002042:	f005 f97b 	bl	800733c <HAL_RCC_OscConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800204c:	f000 f944 	bl	80022d8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002050:	234f      	movs	r3, #79	; 0x4f
 8002052:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002054:	2302      	movs	r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f005 fce6 	bl	8007a40 <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800207a:	f000 f92d 	bl	80022d8 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3768      	adds	r7, #104	; 0x68
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	58000400 	.word	0x58000400

0800208c <EnablePM_sens>:

/* USER CODE BEGIN 4 */



void EnablePM_sens(void){
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209a:	f004 f859 	bl	8006150 <HAL_GPIO_WritePin>

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <MeasurePM_sens>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);


}

void MeasurePM_sens(void){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af02      	add	r7, sp, #8
	uint16_t RxLen;
	if(aRXBufferUser[0]==0x02 && aRXBufferUser[31]== 0x03){
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MeasurePM_sens+0x60>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d115      	bne.n	80020e0 <MeasurePM_sens+0x3c>
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <MeasurePM_sens+0x60>)
 80020b6:	7fdb      	ldrb	r3, [r3, #31]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d110      	bne.n	80020e0 <MeasurePM_sens+0x3c>

	PM2_5 = aRXBufferUser[5] + aRXBufferUser[6]*256 + aRXBufferUser[7]*65536;
 80020be:	4b11      	ldr	r3, [pc, #68]	; (8002104 <MeasurePM_sens+0x60>)
 80020c0:	795b      	ldrb	r3, [r3, #5]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MeasurePM_sens+0x60>)
 80020c8:	799b      	ldrb	r3, [r3, #6]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	441a      	add	r2, r3
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <MeasurePM_sens+0x60>)
 80020d2:	79db      	ldrb	r3, [r3, #7]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	041b      	lsls	r3, r3, #16
 80020d8:	4413      	add	r3, r2
 80020da:	461a      	mov	r2, r3
 80020dc:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <MeasurePM_sens+0x64>)
 80020de:	601a      	str	r2, [r3, #0]

}
		   HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE, &RxLen, 1000);
 80020e0:	1dbb      	adds	r3, r7, #6
 80020e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e6:	9200      	str	r2, [sp, #0]
 80020e8:	2220      	movs	r2, #32
 80020ea:	4906      	ldr	r1, [pc, #24]	; (8002104 <MeasurePM_sens+0x60>)
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <MeasurePM_sens+0x68>)
 80020ee:	f00a fefc 	bl	800ceea <HAL_UARTEx_ReceiveToIdle>
	       HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, RX_BUFFER_SIZE);
 80020f2:	2220      	movs	r2, #32
 80020f4:	4903      	ldr	r1, [pc, #12]	; (8002104 <MeasurePM_sens+0x60>)
 80020f6:	4805      	ldr	r0, [pc, #20]	; (800210c <MeasurePM_sens+0x68>)
 80020f8:	f008 fd68 	bl	800abcc <HAL_UART_Receive_IT>


}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000244 	.word	0x20000244
 8002108:	20000264 	.word	0x20000264
 800210c:	200004e4 	.word	0x200004e4

08002110 <MeasureTempHum>:

void MeasureTempHum(void){
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af02      	add	r7, sp, #8
    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(0x44 << 1),SHT40_dataRX, 6, 100);
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2306      	movs	r3, #6
 800211c:	4a40      	ldr	r2, [pc, #256]	; (8002220 <MeasureTempHum+0x110>)
 800211e:	2188      	movs	r1, #136	; 0x88
 8002120:	4840      	ldr	r0, [pc, #256]	; (8002224 <MeasureTempHum+0x114>)
 8002122:	f004 f9c9 	bl	80064b8 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8002126:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <MeasureTempHum+0x110>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <MeasureTempHum+0x110>)
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4413      	add	r3, r2
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <MeasureTempHum+0x118>)
 800213c:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <MeasureTempHum+0x110>)
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	b29b      	uxth	r3, r3
 8002144:	021b      	lsls	r3, r3, #8
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <MeasureTempHum+0x110>)
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4413      	add	r3, r2
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b36      	ldr	r3, [pc, #216]	; (800222c <MeasureTempHum+0x11c>)
 8002154:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8002156:	4b34      	ldr	r3, [pc, #208]	; (8002228 <MeasureTempHum+0x118>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fd98 	bl	8000c90 <__aeabi_ui2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f974 	bl	8000450 <__aeabi_f2d>
 8002168:	a329      	add	r3, pc, #164	; (adr r3, 8002210 <MeasureTempHum+0x100>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe f9c7 	bl	8000500 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	a327      	add	r3, pc, #156	; (adr r3, 8002218 <MeasureTempHum+0x108>)
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	f7fe fae8 	bl	8000754 <__aeabi_ddiv>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <MeasureTempHum+0x120>)
 8002192:	f7fd fffd 	bl	8000190 <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f7fe fc71 	bl	8000a84 <__aeabi_d2f>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <MeasureTempHum+0x124>)
 80021a6:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <MeasureTempHum+0x11c>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fd6f 	bl	8000c90 <__aeabi_ui2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f94b 	bl	8000450 <__aeabi_f2d>
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <MeasureTempHum+0x128>)
 80021c0:	f7fe f99e 	bl	8000500 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	a312      	add	r3, pc, #72	; (adr r3, 8002218 <MeasureTempHum+0x108>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	f7fe fabf 	bl	8000754 <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <MeasureTempHum+0x12c>)
 80021e4:	f7fd ffd4 	bl	8000190 <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fc48 	bl	8000a84 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a12      	ldr	r2, [pc, #72]	; (8002240 <MeasureTempHum+0x130>)
 80021f8:	6013      	str	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(0x44 << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 80021fa:	2364      	movs	r3, #100	; 0x64
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2301      	movs	r3, #1
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <MeasureTempHum+0x134>)
 8002202:	2188      	movs	r1, #136	; 0x88
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <MeasureTempHum+0x114>)
 8002206:	f004 f863 	bl	80062d0 <HAL_I2C_Master_Transmit>
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	00000000 	.word	0x00000000
 8002214:	4065e000 	.word	0x4065e000
 8002218:	00000000 	.word	0x00000000
 800221c:	40efffe0 	.word	0x40efffe0
 8002220:	200002a8 	.word	0x200002a8
 8002224:	200001f0 	.word	0x200001f0
 8002228:	200002ae 	.word	0x200002ae
 800222c:	200002b0 	.word	0x200002b0
 8002230:	40468000 	.word	0x40468000
 8002234:	20000268 	.word	0x20000268
 8002238:	405f4000 	.word	0x405f4000
 800223c:	40180000 	.word	0x40180000
 8002240:	2000026c 	.word	0x2000026c
 8002244:	20000009 	.word	0x20000009

08002248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d12e      	bne.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x6e>
   {
	  counter++;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3301      	adds	r3, #1
 800225e:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002260:	6013      	str	r3, [r2, #0]
      switch(counter){
 8002262:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 800226a:	d007      	beq.n	800227c <HAL_TIM_PeriodElapsedCallback+0x34>
 800226c:	f5b3 7f4d 	cmp.w	r3, #820	; 0x334
 8002270:	dc0f      	bgt.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002272:	2b05      	cmp	r3, #5
 8002274:	d006      	beq.n	8002284 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8002276:	2b0a      	cmp	r3, #10
 8002278:	d008      	beq.n	800228c <HAL_TIM_PeriodElapsedCallback+0x44>
 800227a:	e00a      	b.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 820:
    	  F1_push(EnablePM_sens);
 800227c:	4812      	ldr	r0, [pc, #72]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800227e:	f000 f847 	bl	8002310 <F1_push>

    	  break;
 8002282:	e006      	b.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 5:
     	  PM_measure_flag = 1;
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]

    	  break;
 800228a:	e002      	b.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x4a>
      case 10:
    	//  F1_push(DisablePM_sens);

    	  PM_measure_flag = 0;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
      }
      F1_push(MeasureTempHum);
 8002292:	480f      	ldr	r0, [pc, #60]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002294:	f000 f83c 	bl	8002310 <F1_push>

      counter %= 20;
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800229e:	fb83 2301 	smull	r2, r3, r3, r1
 80022a2:	10da      	asrs	r2, r3, #3
 80022a4:	17cb      	asrs	r3, r1, #31
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	1aca      	subs	r2, r1, r3
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80022b4:	601a      	str	r2, [r3, #0]
   }
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200003b0 	.word	0x200003b0
 80022c4:	20000270 	.word	0x20000270
 80022c8:	0800208d 	.word	0x0800208d
 80022cc:	20000000 	.word	0x20000000
 80022d0:	08002111 	.word	0x08002111
 80022d4:	66666667 	.word	0x66666667

080022d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <Error_Handler+0x8>

080022e2 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
	...

080022f0 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  F1_last = 0;
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <F1_QueueIni+0x18>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <F1_QueueIni+0x1c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	200002b4 	.word	0x200002b4
 800230c:	200002b8 	.word	0x200002b8

08002310 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <F1_push+0x5c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3301      	adds	r3, #1
 800231e:	425a      	negs	r2, r3
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	f002 020f 	and.w	r2, r2, #15
 8002328:	bf58      	it	pl
 800232a:	4253      	negpl	r3, r2
 800232c:	4a10      	ldr	r2, [pc, #64]	; (8002370 <F1_push+0x60>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	4293      	cmp	r3, r2
 8002332:	d101      	bne.n	8002338 <F1_push+0x28>
 8002334:	2301      	movs	r3, #1
 8002336:	e014      	b.n	8002362 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <F1_push+0x5c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	490b      	ldr	r1, [pc, #44]	; (800236c <F1_push+0x5c>)
 8002340:	600a      	str	r2, [r1, #0]
 8002342:	490c      	ldr	r1, [pc, #48]	; (8002374 <F1_push+0x64>)
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <F1_push+0x5c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	425a      	negs	r2, r3
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	f002 020f 	and.w	r2, r2, #15
 8002358:	bf58      	it	pl
 800235a:	4253      	negpl	r3, r2
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <F1_push+0x5c>)
 800235e:	6013      	str	r3, [r2, #0]
  return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	200002b4 	.word	0x200002b4
 8002370:	200002b8 	.word	0x200002b8
 8002374:	200002bc 	.word	0x200002bc

08002378 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <F1_pull+0x4c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <F1_pull+0x50>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d101      	bne.n	800238e <F1_pull+0x16>
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <F1_pull+0x54>)
 800238c:	e014      	b.n	80023b8 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <F1_pull+0x50>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <F1_pull+0x50>)
 8002396:	600a      	str	r2, [r1, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <F1_pull+0x58>)
 800239a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239e:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <F1_pull+0x50>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	425a      	negs	r2, r3
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	f002 020f 	and.w	r2, r2, #15
 80023ae:	bf58      	it	pl
 80023b0:	4253      	negpl	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <F1_pull+0x50>)
 80023b4:	6013      	str	r3, [r2, #0]
  return pullVar;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	200002b4 	.word	0x200002b4
 80023c8:	200002b8 	.word	0x200002b8
 80023cc:	080022e3 	.word	0x080022e3
 80023d0:	200002bc 	.word	0x200002bc

080023d4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_APB1_GRP1_EnableClock>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4313      	orrs	r3, r2
 800240a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002418:	68fb      	ldr	r3, [r7, #12]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	222c      	movs	r2, #44	; 0x2c
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f01c fb0b 	bl	801ea4c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002436:	4b22      	ldr	r3, [pc, #136]	; (80024c0 <MX_RTC_Init+0x9c>)
 8002438:	4a22      	ldr	r2, [pc, #136]	; (80024c4 <MX_RTC_Init+0xa0>)
 800243a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <MX_RTC_Init+0x9c>)
 800243e:	221f      	movs	r2, #31
 8002440:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002442:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <MX_RTC_Init+0x9c>)
 8002444:	2200      	movs	r2, #0
 8002446:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_RTC_Init+0x9c>)
 800244a:	2200      	movs	r2, #0
 800244c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <MX_RTC_Init+0x9c>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_RTC_Init+0x9c>)
 8002456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800245a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <MX_RTC_Init+0x9c>)
 800245e:	2200      	movs	r2, #0
 8002460:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_RTC_Init+0x9c>)
 8002464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800246a:	4815      	ldr	r0, [pc, #84]	; (80024c0 <MX_RTC_Init+0x9c>)
 800246c:	f005 ffa4 	bl	80083b8 <HAL_RTC_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002476:	f7ff ff2f 	bl	80022d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800247a:	4811      	ldr	r0, [pc, #68]	; (80024c0 <MX_RTC_Init+0x9c>)
 800247c:	f006 fa9a 	bl	80089b4 <HAL_RTCEx_SetSSRU_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002486:	f7ff ff27 	bl	80022d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002496:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800249a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800249c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2200      	movs	r2, #0
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_RTC_Init+0x9c>)
 80024aa:	f006 f807 	bl	80084bc <HAL_RTC_SetAlarm_IT>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80024b4:	f7ff ff10 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	3730      	adds	r7, #48	; 0x30
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200002fc 	.word	0x200002fc
 80024c4:	40002800 	.word	0x40002800

080024c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	; 0x40
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	2238      	movs	r2, #56	; 0x38
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f01c fab7 	bl	801ea4c <memset>
  if(rtcHandle->Instance==RTC)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_RTC_MspInit+0x74>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d125      	bne.n	8002534 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4618      	mov	r0, r3
 80024fa:	f005 fe43 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002504:	f7ff fee8 	bl	80022d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002508:	f7ff ff64 	bl	80023d4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800250c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002510:	f7ff ff70 	bl	80023f4 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2002      	movs	r0, #2
 800251a:	f002 fd1e 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800251e:	2002      	movs	r0, #2
 8002520:	f002 fd35 	bl	8004f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	202a      	movs	r0, #42	; 0x2a
 800252a:	f002 fd16 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800252e:	202a      	movs	r0, #42	; 0x2a
 8002530:	f002 fd2d 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002534:	bf00      	nop
 8002536:	3740      	adds	r7, #64	; 0x40
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40002800 	.word	0x40002800

08002540 <LL_AHB2_GRP1_EnableClock>:
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4313      	orrs	r3, r2
 8002556:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4013      	ands	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <LL_APB1_GRP1_EnableClock>:
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800257e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4313      	orrs	r3, r2
 8002586:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002594:	68fb      	ldr	r3, [r7, #12]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <MX_SPI2_Init+0x74>)
 80025a6:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <MX_SPI2_Init+0x78>)
 80025a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_SPI2_Init+0x74>)
 80025ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_SPI2_Init+0x74>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_SPI2_Init+0x74>)
 80025ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_SPI2_Init+0x74>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <MX_SPI2_Init+0x74>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_SPI2_Init+0x74>)
 80025ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_SPI2_Init+0x74>)
 80025d6:	2218      	movs	r2, #24
 80025d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_SPI2_Init+0x74>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_SPI2_Init+0x74>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_SPI2_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_SPI2_Init+0x74>)
 80025ee:	2207      	movs	r2, #7
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <MX_SPI2_Init+0x74>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_SPI2_Init+0x74>)
 80025fa:	2208      	movs	r2, #8
 80025fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_SPI2_Init+0x74>)
 8002600:	f006 fa66 	bl	8008ad0 <HAL_SPI_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800260a:	f7ff fe65 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000334 	.word	0x20000334
 8002618:	40003800 	.word	0x40003800

0800261c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b096      	sub	sp, #88	; 0x58
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2238      	movs	r2, #56	; 0x38
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f01c fa05 	bl	801ea4c <memset>
  if(spiHandle->Instance==SPI2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a21      	ldr	r2, [pc, #132]	; (80026cc <HAL_SPI_MspInit+0xb0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d13b      	bne.n	80026c4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800264c:	2310      	movs	r3, #16
 800264e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8002650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002654:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4618      	mov	r0, r3
 800265c:	f005 fd92 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002666:	f7ff fe37 	bl	80022d8 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800266a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800266e:	f7ff ff7f 	bl	8002570 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	2002      	movs	r0, #2
 8002674:	f7ff ff64 	bl	8002540 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	2001      	movs	r0, #1
 800267a:	f7ff ff61 	bl	8002540 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800267e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002682:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002690:	2305      	movs	r3, #5
 8002692:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002698:	4619      	mov	r1, r3
 800269a:	480d      	ldr	r0, [pc, #52]	; (80026d0 <HAL_SPI_MspInit+0xb4>)
 800269c:	f003 fb2a 	bl	8005cf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026b2:	2305      	movs	r3, #5
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ba:	4619      	mov	r1, r3
 80026bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c0:	f003 fb18 	bl	8005cf4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80026c4:	bf00      	nop
 80026c6:	3758      	adds	r7, #88	; 0x58
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40003800 	.word	0x40003800
 80026d0:	48000400 	.word	0x48000400

080026d4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80026da:	2201      	movs	r2, #1
 80026dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	58000400 	.word	0x58000400

080026ec <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002708:	f001 fa94 	bl	8003c34 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800270c:	f7ff ffe2 	bl	80026d4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002710:	2001      	movs	r0, #1
 8002712:	f004 fb59 	bl	8006dc8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}

0800271a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800271e:	f001 fa97 	bl	8003c50 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002722:	f001 f90b 	bl	800393c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}

0800272a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800272e:	f001 fa81 	bl	8003c34 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002732:	2101      	movs	r1, #1
 8002734:	2000      	movs	r0, #0
 8002736:	f004 fac3 	bl	8006cc0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}

0800273e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002742:	f001 fa85 	bl	8003c50 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800275a:	e7fe      	b.n	800275a <NMI_Handler+0x4>

0800275c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <HardFault_Handler+0x4>

08002762 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <MemManage_Handler+0x4>

08002768 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <BusFault_Handler+0x4>

0800276e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002772:	e7fe      	b.n	8002772 <UsageFault_Handler+0x4>

08002774 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80027aa:	f006 f93f 	bl	8008a2c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200002fc 	.word	0x200002fc

080027b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Channel1_IRQHandler+0x10>)
 80027be:	f002 fe7d 	bl	80054bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000578 	.word	0x20000578

080027cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Channel2_IRQHandler+0x10>)
 80027d2:	f002 fe73 	bl	80054bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200005d8 	.word	0x200005d8

080027e0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80027e4:	4804      	ldr	r0, [pc, #16]	; (80027f8 <TIM16_IRQHandler+0x18>)
 80027e6:	f007 ffbf 	bl	800a768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <TIM16_IRQHandler+0x1c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a02      	ldr	r2, [pc, #8]	; (80027fc <TIM16_IRQHandler+0x1c>)
 80027f2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200003b0 	.word	0x200003b0
 80027fc:	20000398 	.word	0x20000398

08002800 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <TIM17_IRQHandler+0x18>)
 8002806:	f007 ffaf 	bl	800a768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 800280a:	4b04      	ldr	r3, [pc, #16]	; (800281c <TIM17_IRQHandler+0x1c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	4a02      	ldr	r2, [pc, #8]	; (800281c <TIM17_IRQHandler+0x1c>)
 8002812:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200003fc 	.word	0x200003fc
 800281c:	2000039c 	.word	0x2000039c

08002820 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <USART1_IRQHandler+0x10>)
 8002826:	f008 fa9d 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000450 	.word	0x20000450

08002834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <USART2_IRQHandler+0x10>)
 800283a:	f008 fa93 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200004e4 	.word	0x200004e4

08002848 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <RTC_Alarm_IRQHandler+0x10>)
 800284e:	f005 ff9d 	bl	800878c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200002fc 	.word	0x200002fc

0800285c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <SUBGHZ_Radio_IRQHandler+0x10>)
 8002862:	f007 fd3f 	bl	800a2e4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200003a0 	.word	0x200003a0

08002870 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002874:	4802      	ldr	r0, [pc, #8]	; (8002880 <DMAMUX1_OVR_IRQHandler+0x10>)
 8002876:	f002 ffd1 	bl	800581c <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200005d8 	.word	0x200005d8

08002884 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4313      	orrs	r3, r2
 800289a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_SUBGHZ_Init+0x20>)
 80028ba:	2208      	movs	r2, #8
 80028bc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_SUBGHZ_Init+0x20>)
 80028c0:	f007 fa8e 	bl	8009de0 <HAL_SUBGHZ_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80028ca:	f7ff fd05 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200003a0 	.word	0x200003a0

080028d8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80028e0:	2001      	movs	r0, #1
 80028e2:	f7ff ffcf 	bl	8002884 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2032      	movs	r0, #50	; 0x32
 80028ec:	f002 fb35 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80028f0:	2032      	movs	r0, #50	; 0x32
 80028f2:	f002 fb4c 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <LL_RCC_SetClkAfterWakeFromStop>:
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <LL_FLASH_GetUDN+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	1fff7580 	.word	0x1fff7580

08002938 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <LL_FLASH_GetDeviceID+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	1fff7584 	.word	0x1fff7584

08002950 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <LL_FLASH_GetSTCompanyID+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0a1b      	lsrs	r3, r3, #8
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	1fff7584 	.word	0x1fff7584

08002968 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff ffc6 	bl	80028fe <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002972:	f01b fb35 	bl	801dfe0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <SystemApp_Init+0x50>)
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800297c:	f000 f98c 	bl	8002c98 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002980:	f01b fdbe 	bl	801e500 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002984:	480d      	ldr	r0, [pc, #52]	; (80029bc <SystemApp_Init+0x54>)
 8002986:	f01b fe69 	bl	801e65c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <SystemApp_Init+0x58>)
 800298c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002990:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002992:	2002      	movs	r0, #2
 8002994:	f01b fe70 	bl	801e678 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002998:	f7fe fe56 	bl	8001648 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800299c:	f000 f9b4 	bl	8002d08 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80029a0:	f01a fcea 	bl	801d378 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029a4:	2101      	movs	r1, #1
 80029a6:	2001      	movs	r0, #1
 80029a8:	f01a fd26 	bl	801d3f8 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80029ac:	2101      	movs	r1, #1
 80029ae:	2001      	movs	r0, #1
 80029b0:	f01a fcf2 	bl	801d398 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	200003ac 	.word	0x200003ac
 80029bc:	08002b91 	.word	0x08002b91
 80029c0:	58004000 	.word	0x58004000

080029c4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80029c8:	f01a fd46 	bl	801d458 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80029cc:	bf00      	nop
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80029da:	f7fe fe43 	bl	8001664 <SYS_GetBatteryLevel>
 80029de:	4603      	mov	r3, r0
 80029e0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80029e2:	88bb      	ldrh	r3, [r7, #4]
 80029e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d902      	bls.n	80029f2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80029ec:	23fe      	movs	r3, #254	; 0xfe
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	e014      	b.n	8002a1c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80029f8:	d202      	bcs.n	8002a00 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
 80029fe:	e00d      	b.n	8002a1c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002a06:	461a      	mov	r2, r3
 8002a08:	4613      	mov	r3, r2
 8002a0a:	01db      	lsls	r3, r3, #7
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <GetBatteryLevel+0x58>)
 8002a14:	fba3 2302 	umull	r2, r3, r3, r2
 8002a18:	09db      	lsrs	r3, r3, #7
 8002a1a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	1b4e81b5 	.word	0x1b4e81b5

08002a2c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f93b 	bl	8002cb4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe f97d 	bl	8000d40 <__aeabi_f2iz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002a4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8002a56:	b590      	push	{r4, r7, lr}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002a62:	f7ff ff5f 	bl	8002924 <LL_FLASH_GetUDN>
 8002a66:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d138      	bne.n	8002ae2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002a70:	f001 f8fc 	bl	8003c6c <HAL_GetUIDw0>
 8002a74:	4604      	mov	r4, r0
 8002a76:	f001 f90d 	bl	8003c94 <HAL_GetUIDw2>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4423      	add	r3, r4
 8002a7e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002a80:	f001 f8fe 	bl	8003c80 <HAL_GetUIDw1>
 8002a84:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	0e1a      	lsrs	r2, r3, #24
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3307      	adds	r3, #7
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	0c1a      	lsrs	r2, r3, #16
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3306      	adds	r3, #6
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	0a1a      	lsrs	r2, r3, #8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3305      	adds	r3, #5
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3304      	adds	r3, #4
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	0e1a      	lsrs	r2, r3, #24
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3303      	adds	r3, #3
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0c1a      	lsrs	r2, r3, #16
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	0a1a      	lsrs	r2, r3, #8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002ae0:	e031      	b.n	8002b46 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3307      	adds	r3, #7
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	0a1a      	lsrs	r2, r3, #8
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3306      	adds	r3, #6
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	0c1a      	lsrs	r2, r3, #16
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3305      	adds	r3, #5
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	0e1a      	lsrs	r2, r3, #24
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002b10:	f7ff ff12 	bl	8002938 <LL_FLASH_GetDeviceID>
 8002b14:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3303      	adds	r3, #3
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002b20:	f7ff ff16 	bl	8002950 <LL_FLASH_GetSTCompanyID>
 8002b24:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	0a1a      	lsrs	r2, r3, #8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	701a      	strb	r2, [r3, #0]
}
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}

08002b4e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002b4e:	b590      	push	{r4, r7, lr}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8002b56:	f7ff fee5 	bl	8002924 <LL_FLASH_GetUDN>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d10d      	bne.n	8002b86 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002b6a:	f001 f87f 	bl	8003c6c <HAL_GetUIDw0>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	f001 f886 	bl	8003c80 <HAL_GetUIDw1>
 8002b74:	4603      	mov	r3, r0
 8002b76:	405c      	eors	r4, r3
 8002b78:	f001 f88c 	bl	8003c94 <HAL_GetUIDw2>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	ea84 0203 	eor.w	r2, r4, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}
	...

08002b90 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f01a fd6a 	bl	801d678 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002baa:	9200      	str	r2, [sp, #0]
 8002bac:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <TimestampNow+0x3c>)
 8002bae:	2110      	movs	r1, #16
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f81d 	bl	8002bf0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd fade 	bl	8000178 <strlen>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	0801ec98 	.word	0x0801ec98

08002bd0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	f01a fbde 	bl	801d398 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002bdc:	bf00      	nop
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002be4:	2100      	movs	r1, #0
 8002be6:	2002      	movs	r0, #2
 8002be8:	f01a fbd6 	bl	801d398 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002bec:	bf00      	nop
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002bf0:	b40c      	push	{r2, r3}
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b084      	sub	sp, #16
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f01a ff07 	bl	801da1c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c18:	b002      	add	sp, #8
 8002c1a:	4770      	bx	lr

08002c1c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_GetTick+0x24>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002c42:	f000 f9dd 	bl	8003000 <TIMER_IF_GetTimerValue>
 8002c46:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002c48:	687b      	ldr	r3, [r7, #4]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	200003ac 	.word	0x200003ac

08002c58 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fa53 	bl	800310e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c7a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c7e:	4905      	ldr	r1, [pc, #20]	; (8002c94 <LL_EXTI_EnableIT_32_63+0x24>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	58000800 	.word	0x58000800

08002c98 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002c9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ca0:	f7ff ffe6 	bl	8002c70 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002ca4:	f001 f800 	bl	8003ca8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002ca8:	f001 f804 	bl	8003cb4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002cac:	f001 f808 	bl	8003cc0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <EnvSensors_Read+0x40>)
 8002cbe:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <EnvSensors_Read+0x44>)
 8002cc2:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <EnvSensors_Read+0x48>)
 8002cc6:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <EnvSensors_Read+0x4c>)
 8002cde:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <EnvSensors_Read+0x50>)
 8002ce4:	611a      	str	r2, [r3, #16]

  return 0;
 8002ce6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	42480000 	.word	0x42480000
 8002cf8:	41900000 	.word	0x41900000
 8002cfc:	447a0000 	.word	0x447a0000
 8002d00:	003e090d 	.word	0x003e090d
 8002d04:	000503ab 	.word	0x000503ab

08002d08 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002d12:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002d22:	bf00      	nop
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <LL_APB2_GRP1_EnableClock>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
	...

08002d5c <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002d60:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d62:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <MX_TIM16_Init+0x64>)
 8002d64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d6c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d76:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002d7a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d8a:	2280      	movs	r2, #128	; 0x80
 8002d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d8e:	480b      	ldr	r0, [pc, #44]	; (8002dbc <MX_TIM16_Init+0x60>)
 8002d90:	f007 fc46 	bl	800a620 <HAL_TIM_Base_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002d9a:	f7ff fa9d 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002d9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002da2:	f7ff ffc2 	bl	8002d2a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	201c      	movs	r0, #28
 8002dac:	f002 f8d5 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002db0:	201c      	movs	r0, #28
 8002db2:	f002 f8ec 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200003b0 	.word	0x200003b0
 8002dc0:	40014400 	.word	0x40014400

08002dc4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002dca:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <MX_TIM17_Init+0x60>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002dda:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002de0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002de8:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <MX_TIM17_Init+0x5c>)
 8002df6:	f007 fc13 	bl	800a620 <HAL_TIM_Base_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002e00:	f7ff fa6a 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002e04:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e08:	f7ff ff8f 	bl	8002d2a <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	201d      	movs	r0, #29
 8002e12:	f002 f8a2 	bl	8004f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e16:	201d      	movs	r0, #29
 8002e18:	f002 f8b9 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200003fc 	.word	0x200003fc
 8002e24:	40014800 	.word	0x40014800

08002e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_TIM_Base_MspInit+0x58>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10c      	bne.n	8002e54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002e3e:	f7ff ff74 	bl	8002d2a <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	201c      	movs	r0, #28
 8002e48:	f002 f887 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002e4c:	201c      	movs	r0, #28
 8002e4e:	f002 f89e 	bl	8004f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002e52:	e010      	b.n	8002e76 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_TIM_Base_MspInit+0x5c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d10b      	bne.n	8002e76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002e5e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002e62:	f7ff ff62 	bl	8002d2a <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	201d      	movs	r0, #29
 8002e6c:	f002 f875 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002e70:	201d      	movs	r0, #29
 8002e72:	f002 f88c 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800

08002e88 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
	...

08002ea0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <TIMER_IF_Init+0x5c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01b      	beq.n	8002ef0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <TIMER_IF_Init+0x60>)
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ec0:	f7ff fab0 	bl	8002424 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002ec4:	f000 f856 	bl	8002f74 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <TIMER_IF_Init+0x60>)
 8002ece:	f005 fc01 	bl	80086d4 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <TIMER_IF_Init+0x60>)
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002eda:	4809      	ldr	r0, [pc, #36]	; (8002f00 <TIMER_IF_Init+0x60>)
 8002edc:	f005 fd38 	bl	8008950 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f000 f9d3 	bl	800328c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002ee6:	f000 f85f 	bl	8002fa8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <TIMER_IF_Init+0x5c>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000448 	.word	0x20000448
 8002f00:	200002fc 	.word	0x200002fc

08002f04 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08e      	sub	sp, #56	; 0x38
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002f12:	f107 0308 	add.w	r3, r7, #8
 8002f16:	222c      	movs	r2, #44	; 0x2c
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f01b fd96 	bl	801ea4c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002f20:	f000 f828 	bl	8002f74 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002f24:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <TIMER_IF_StartTimer+0x68>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002f3c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f40:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4807      	ldr	r0, [pc, #28]	; (8002f70 <TIMER_IF_StartTimer+0x6c>)
 8002f52:	f005 fab3 	bl	80084bc <HAL_RTC_SetAlarm_IT>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002f5c:	f7ff f9bc 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002f60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3738      	adds	r7, #56	; 0x38
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000044c 	.word	0x2000044c
 8002f70:	200002fc 	.word	0x200002fc

08002f74 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <TIMER_IF_StopTimer+0x2c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f88:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <TIMER_IF_StopTimer+0x30>)
 8002f8a:	f005 fba3 	bl	80086d4 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <TIMER_IF_StopTimer+0x30>)
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40002800 	.word	0x40002800
 8002fa4:	200002fc 	.word	0x200002fc

08002fa8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002fac:	f000 f98e 	bl	80032cc <GetTimerTicks>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	4a03      	ldr	r2, [pc, #12]	; (8002fc0 <TIMER_IF_SetTimerContext+0x18>)
 8002fb4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002fb6:	4b02      	ldr	r3, [pc, #8]	; (8002fc0 <TIMER_IF_SetTimerContext+0x18>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	2000044c 	.word	0x2000044c

08002fc4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <TIMER_IF_GetTimerContext+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	2000044c 	.word	0x2000044c

08002fd8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002fe2:	f000 f973 	bl	80032cc <GetTimerTicks>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002ff0:	687b      	ldr	r3, [r7, #4]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000044c 	.word	0x2000044c

08003000 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <TIMER_IF_GetTimerValue+0x24>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8003012:	f000 f95b 	bl	80032cc <GetTimerTicks>
 8003016:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8003018:	687b      	ldr	r3, [r7, #4]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000448 	.word	0x20000448

08003028 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8003032:	2303      	movs	r3, #3
 8003034:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8003036:	687b      	ldr	r3, [r7, #4]
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003042:	b5b0      	push	{r4, r5, r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800304a:	2100      	movs	r1, #0
 800304c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	2000      	movs	r0, #0
 8003052:	460a      	mov	r2, r1
 8003054:	4603      	mov	r3, r0
 8003056:	0d95      	lsrs	r5, r2, #22
 8003058:	0294      	lsls	r4, r2, #10
 800305a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	4620      	mov	r0, r4
 8003064:	4629      	mov	r1, r5
 8003066:	f7fd fe91 	bl	8000d8c <__aeabi_uldivmod>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4613      	mov	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bdb0      	pop	{r4, r5, r7, pc}

0800307c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800307c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003080:	b085      	sub	sp, #20
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8003086:	2100      	movs	r1, #0
 8003088:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	2000      	movs	r0, #0
 800308e:	460c      	mov	r4, r1
 8003090:	4605      	mov	r5, r0
 8003092:	4620      	mov	r0, r4
 8003094:	4629      	mov	r1, r5
 8003096:	f04f 0a00 	mov.w	sl, #0
 800309a:	f04f 0b00 	mov.w	fp, #0
 800309e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80030a2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80030a6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80030aa:	4650      	mov	r0, sl
 80030ac:	4659      	mov	r1, fp
 80030ae:	1b02      	subs	r2, r0, r4
 80030b0:	eb61 0305 	sbc.w	r3, r1, r5
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0099      	lsls	r1, r3, #2
 80030be:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80030c2:	0090      	lsls	r0, r2, #2
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	eb12 0804 	adds.w	r8, r2, r4
 80030cc:	eb43 0905 	adc.w	r9, r3, r5
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e4:	4690      	mov	r8, r2
 80030e6:	4699      	mov	r9, r3
 80030e8:	4640      	mov	r0, r8
 80030ea:	4649      	mov	r1, r9
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	0a82      	lsrs	r2, r0, #10
 80030f6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80030fa:	0a8b      	lsrs	r3, r1, #10
 80030fc:	4613      	mov	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800310c:	4770      	bx	lr

0800310e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff93 	bl	8003042 <TIMER_IF_Convert_ms2Tick>
 800311c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800311e:	f000 f8d5 	bl	80032cc <GetTimerTicks>
 8003122:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003124:	e000      	b.n	8003128 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8003126:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8003128:	f000 f8d0 	bl	80032cc <GetTimerTicks>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	429a      	cmp	r2, r3
 8003136:	d8f6      	bhi.n	8003126 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800314a:	f01b f897 	bl	801e27c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800315e:	f000 f8a5 	bl	80032ac <TIMER_IF_BkUp_Read_MSBticks>
 8003162:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f88f 	bl	800328c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8003176:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8003184:	f000 f8a2 	bl	80032cc <GetTimerTicks>
 8003188:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800318a:	f000 f88f 	bl	80032ac <TIMER_IF_BkUp_Read_MSBticks>
 800318e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	2200      	movs	r2, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	60fa      	str	r2, [r7, #12]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	f04f 0300 	mov.w	r3, #0
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	000b      	movs	r3, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a8:	2000      	movs	r0, #0
 80031aa:	460c      	mov	r4, r1
 80031ac:	4605      	mov	r5, r0
 80031ae:	eb12 0804 	adds.w	r8, r2, r4
 80031b2:	eb43 0905 	adc.w	r9, r3, r5
 80031b6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80031ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	0a82      	lsrs	r2, r0, #10
 80031c8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80031cc:	0a8b      	lsrs	r3, r1, #10
 80031ce:	4613      	mov	r3, r2
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2200      	movs	r2, #0
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80031e0:	f04f 0b00 	mov.w	fp, #0
 80031e4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff46 	bl	800307c <TIMER_IF_Convert_Tick2ms>
 80031f0:	4603      	mov	r3, r0
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003204 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	2100      	movs	r1, #0
 8003210:	4803      	ldr	r0, [pc, #12]	; (8003220 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8003212:	f005 fc2f 	bl	8008a74 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8003216:	bf00      	nop
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200002fc 	.word	0x200002fc

08003224 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	2101      	movs	r1, #1
 8003230:	4803      	ldr	r0, [pc, #12]	; (8003240 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8003232:	f005 fc1f 	bl	8008a74 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200002fc 	.word	0x200002fc

08003244 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800324e:	2100      	movs	r1, #0
 8003250:	4804      	ldr	r0, [pc, #16]	; (8003264 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8003252:	f005 fc27 	bl	8008aa4 <HAL_RTCEx_BKUPRead>
 8003256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8003258:	687b      	ldr	r3, [r7, #4]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200002fc 	.word	0x200002fc

08003268 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003272:	2101      	movs	r1, #1
 8003274:	4804      	ldr	r0, [pc, #16]	; (8003288 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8003276:	f005 fc15 	bl	8008aa4 <HAL_RTCEx_BKUPRead>
 800327a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200002fc 	.word	0x200002fc

0800328c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	2102      	movs	r1, #2
 8003298:	4803      	ldr	r0, [pc, #12]	; (80032a8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800329a:	f005 fbeb 	bl	8008a74 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200002fc 	.word	0x200002fc

080032ac <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80032b2:	2102      	movs	r1, #2
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80032b6:	f005 fbf5 	bl	8008aa4 <HAL_RTCEx_BKUPRead>
 80032ba:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80032bc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200002fc 	.word	0x200002fc

080032cc <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80032d2:	480b      	ldr	r0, [pc, #44]	; (8003300 <GetTimerTicks+0x34>)
 80032d4:	f7ff fdd8 	bl	8002e88 <LL_RTC_TIME_GetSubSecond>
 80032d8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80032da:	e003      	b.n	80032e4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80032dc:	4808      	ldr	r0, [pc, #32]	; (8003300 <GetTimerTicks+0x34>)
 80032de:	f7ff fdd3 	bl	8002e88 <LL_RTC_TIME_GetSubSecond>
 80032e2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80032e4:	4806      	ldr	r0, [pc, #24]	; (8003300 <GetTimerTicks+0x34>)
 80032e6:	f7ff fdcf 	bl	8002e88 <LL_RTC_TIME_GetSubSecond>
 80032ea:	4602      	mov	r2, r0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d1f4      	bne.n	80032dc <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40002800 	.word	0x40002800

08003304 <LL_AHB2_GRP1_EnableClock>:
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4313      	orrs	r3, r2
 800331a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <LL_APB1_GRP1_EnableClock>:
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4313      	orrs	r3, r2
 800334a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003358:	68fb      	ldr	r3, [r7, #12]
}
 800335a:	bf00      	nop
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr

08003364 <LL_APB1_GRP1_DisableClock>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	43db      	mvns	r3, r3
 8003376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800337a:	4013      	ands	r3, r2
 800337c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <LL_APB2_GRP1_EnableClock>:
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4313      	orrs	r3, r2
 800339e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033ac:	68fb      	ldr	r3, [r7, #12]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <LL_APB2_GRP1_DisableClock>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ce:	4013      	ands	r3, r2
 80033d0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr

080033dc <LL_SYSCFG_EnableFastModePlus>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <LL_SYSCFG_EnableFastModePlus+0x20>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000

08003400 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003404:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003406:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <MX_USART1_UART_Init+0xa4>)
 8003408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800340c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003412:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003414:	2200      	movs	r2, #0
 8003416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003418:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800341a:	2200      	movs	r2, #0
 800341c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003420:	2200      	movs	r2, #0
 8003422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003424:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003426:	220c      	movs	r2, #12
 8003428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003430:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003436:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003438:	2200      	movs	r2, #0
 800343a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800343c:	4b18      	ldr	r3, [pc, #96]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800343e:	2200      	movs	r2, #0
 8003440:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003442:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003448:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800344a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003452:	2200      	movs	r2, #0
 8003454:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003456:	4812      	ldr	r0, [pc, #72]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 8003458:	f007 fb68 	bl	800ab2c <HAL_UART_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8003462:	f7fe ff39 	bl	80022d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003466:	2100      	movs	r1, #0
 8003468:	480d      	ldr	r0, [pc, #52]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800346a:	f009 fcc2 	bl	800cdf2 <HAL_UARTEx_SetTxFifoThreshold>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003474:	f7fe ff30 	bl	80022d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003478:	2100      	movs	r1, #0
 800347a:	4809      	ldr	r0, [pc, #36]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800347c:	f009 fcf7 	bl	800ce6e <HAL_UARTEx_SetRxFifoThreshold>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003486:	f7fe ff27 	bl	80022d8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800348a:	4805      	ldr	r0, [pc, #20]	; (80034a0 <MX_USART1_UART_Init+0xa0>)
 800348c:	f009 fc3e 	bl	800cd0c <HAL_UARTEx_EnableFifoMode>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003496:	f7fe ff1f 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000450 	.word	0x20000450
 80034a4:	40013800 	.word	0x40013800

080034a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034ae:	4a24      	ldr	r2, [pc, #144]	; (8003540 <MX_USART2_UART_Init+0x98>)
 80034b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80034b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034ce:	220c      	movs	r2, #12
 80034d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80034d8:	4b18      	ldr	r3, [pc, #96]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034de:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034e0:	4b16      	ldr	r3, [pc, #88]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034f2:	4812      	ldr	r0, [pc, #72]	; (800353c <MX_USART2_UART_Init+0x94>)
 80034f4:	f007 fb1a 	bl	800ab2c <HAL_UART_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80034fe:	f7fe feeb 	bl	80022d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003502:	2100      	movs	r1, #0
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <MX_USART2_UART_Init+0x94>)
 8003506:	f009 fc74 	bl	800cdf2 <HAL_UARTEx_SetTxFifoThreshold>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003510:	f7fe fee2 	bl	80022d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003514:	2100      	movs	r1, #0
 8003516:	4809      	ldr	r0, [pc, #36]	; (800353c <MX_USART2_UART_Init+0x94>)
 8003518:	f009 fca9 	bl	800ce6e <HAL_UARTEx_SetRxFifoThreshold>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003522:	f7fe fed9 	bl	80022d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003526:	4805      	ldr	r0, [pc, #20]	; (800353c <MX_USART2_UART_Init+0x94>)
 8003528:	f009 fc2b 	bl	800cd82 <HAL_UARTEx_DisableFifoMode>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003532:	f7fe fed1 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200004e4 	.word	0x200004e4
 8003540:	40004400 	.word	0x40004400

08003544 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b09a      	sub	sp, #104	; 0x68
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800355c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	2238      	movs	r2, #56	; 0x38
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f01b fa6a 	bl	801ea4c <memset>
  if(uartHandle->Instance==USART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6f      	ldr	r2, [pc, #444]	; (800373c <HAL_UART_MspInit+0x1f8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f040 80a4 	bne.w	80036cc <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003584:	2301      	movs	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003588:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800358c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800358e:	f107 030c 	add.w	r3, r7, #12
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fdf6 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800359e:	f7fe fe9b 	bl	80022d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80035a6:	f7ff feef 	bl	8003388 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	2002      	movs	r0, #2
 80035ac:	f7ff feaa 	bl	8003304 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035b8:	2301      	movs	r3, #1
 80035ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80035bc:	2301      	movs	r3, #1
 80035be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035c0:	2307      	movs	r3, #7
 80035c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035c8:	4619      	mov	r1, r3
 80035ca:	485d      	ldr	r0, [pc, #372]	; (8003740 <HAL_UART_MspInit+0x1fc>)
 80035cc:	f002 fb92 	bl	8005cf4 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80035d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035d4:	f7ff ff02 	bl	80033dc <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80035d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80035dc:	f7ff fefe 	bl	80033dc <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80035e0:	4b58      	ldr	r3, [pc, #352]	; (8003744 <HAL_UART_MspInit+0x200>)
 80035e2:	4a59      	ldr	r2, [pc, #356]	; (8003748 <HAL_UART_MspInit+0x204>)
 80035e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80035e6:	4b57      	ldr	r3, [pc, #348]	; (8003744 <HAL_UART_MspInit+0x200>)
 80035e8:	2212      	movs	r2, #18
 80035ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ec:	4b55      	ldr	r3, [pc, #340]	; (8003744 <HAL_UART_MspInit+0x200>)
 80035ee:	2210      	movs	r2, #16
 80035f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f2:	4b54      	ldr	r3, [pc, #336]	; (8003744 <HAL_UART_MspInit+0x200>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035f8:	4b52      	ldr	r3, [pc, #328]	; (8003744 <HAL_UART_MspInit+0x200>)
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035fe:	4b51      	ldr	r3, [pc, #324]	; (8003744 <HAL_UART_MspInit+0x200>)
 8003600:	2200      	movs	r2, #0
 8003602:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003604:	4b4f      	ldr	r3, [pc, #316]	; (8003744 <HAL_UART_MspInit+0x200>)
 8003606:	2200      	movs	r2, #0
 8003608:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800360a:	4b4e      	ldr	r3, [pc, #312]	; (8003744 <HAL_UART_MspInit+0x200>)
 800360c:	2200      	movs	r2, #0
 800360e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003610:	4b4c      	ldr	r3, [pc, #304]	; (8003744 <HAL_UART_MspInit+0x200>)
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003616:	484b      	ldr	r0, [pc, #300]	; (8003744 <HAL_UART_MspInit+0x200>)
 8003618:	f001 fcd6 	bl	8004fc8 <HAL_DMA_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003622:	f7fe fe59 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a46      	ldr	r2, [pc, #280]	; (8003744 <HAL_UART_MspInit+0x200>)
 800362a:	67da      	str	r2, [r3, #124]	; 0x7c
 800362c:	4a45      	ldr	r2, [pc, #276]	; (8003744 <HAL_UART_MspInit+0x200>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003632:	4b46      	ldr	r3, [pc, #280]	; (800374c <HAL_UART_MspInit+0x208>)
 8003634:	4a46      	ldr	r2, [pc, #280]	; (8003750 <HAL_UART_MspInit+0x20c>)
 8003636:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <HAL_UART_MspInit+0x208>)
 800363a:	2211      	movs	r2, #17
 800363c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363e:	4b43      	ldr	r3, [pc, #268]	; (800374c <HAL_UART_MspInit+0x208>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_UART_MspInit+0x208>)
 8003646:	2200      	movs	r2, #0
 8003648:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800364a:	4b40      	ldr	r3, [pc, #256]	; (800374c <HAL_UART_MspInit+0x208>)
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003650:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_UART_MspInit+0x208>)
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_UART_MspInit+0x208>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_UART_MspInit+0x208>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003662:	4b3a      	ldr	r3, [pc, #232]	; (800374c <HAL_UART_MspInit+0x208>)
 8003664:	2200      	movs	r2, #0
 8003666:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003668:	4838      	ldr	r0, [pc, #224]	; (800374c <HAL_UART_MspInit+0x208>)
 800366a:	f001 fcad 	bl	8004fc8 <HAL_DMA_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003674:	f7fe fe30 	bl	80022d8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003678:	2300      	movs	r3, #0
 800367a:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800367c:	2300      	movs	r3, #0
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 800368c:	2301      	movs	r3, #1
 800368e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003690:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003694:	4619      	mov	r1, r3
 8003696:	482d      	ldr	r0, [pc, #180]	; (800374c <HAL_UART_MspInit+0x208>)
 8003698:	f002 f880 	bl	800579c <HAL_DMAEx_ConfigMuxSync>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80036a2:	f7fe fe19 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a28      	ldr	r2, [pc, #160]	; (800374c <HAL_UART_MspInit+0x208>)
 80036aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80036ae:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_UART_MspInit+0x208>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80036b4:	2200      	movs	r2, #0
 80036b6:	2102      	movs	r1, #2
 80036b8:	2024      	movs	r0, #36	; 0x24
 80036ba:	f001 fc4e 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036be:	2024      	movs	r0, #36	; 0x24
 80036c0:	f001 fc65 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80036c4:	200c      	movs	r0, #12
 80036c6:	f001 fc62 	bl	8004f8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80036ca:	e033      	b.n	8003734 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a20      	ldr	r2, [pc, #128]	; (8003754 <HAL_UART_MspInit+0x210>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d12e      	bne.n	8003734 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036d6:	2302      	movs	r3, #2
 80036d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036da:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80036de:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fd4d 	bl	8008184 <HAL_RCCEx_PeriphCLKConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80036f0:	f7fe fdf2 	bl	80022d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80036f8:	f7ff fe1c 	bl	8003334 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fc:	2001      	movs	r0, #1
 80036fe:	f7ff fe01 	bl	8003304 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003702:	230c      	movs	r3, #12
 8003704:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800370e:	2301      	movs	r3, #1
 8003710:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003712:	2307      	movs	r3, #7
 8003714:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800371a:	4619      	mov	r1, r3
 800371c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003720:	f002 fae8 	bl	8005cf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2100      	movs	r1, #0
 8003728:	2025      	movs	r0, #37	; 0x25
 800372a:	f001 fc16 	bl	8004f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800372e:	2025      	movs	r0, #37	; 0x25
 8003730:	f001 fc2d 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 8003734:	bf00      	nop
 8003736:	3768      	adds	r7, #104	; 0x68
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40013800 	.word	0x40013800
 8003740:	48000400 	.word	0x48000400
 8003744:	20000578 	.word	0x20000578
 8003748:	40020008 	.word	0x40020008
 800374c:	200005d8 	.word	0x200005d8
 8003750:	4002001c 	.word	0x4002001c
 8003754:	40004400 	.word	0x40004400

08003758 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_UART_MspDeInit+0x6c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d116      	bne.n	8003798 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800376a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800376e:	f7ff fe23 	bl	80033b8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003772:	21c0      	movs	r1, #192	; 0xc0
 8003774:	4814      	ldr	r0, [pc, #80]	; (80037c8 <HAL_UART_MspDeInit+0x70>)
 8003776:	f002 fc1d 	bl	8005fb4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fcca 	bl	8005118 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fcc4 	bl	8005118 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003790:	2024      	movs	r0, #36	; 0x24
 8003792:	f001 fc0a 	bl	8004faa <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003796:	e010      	b.n	80037ba <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_UART_MspDeInit+0x74>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10b      	bne.n	80037ba <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 80037a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80037a6:	f7ff fddd 	bl	8003364 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80037aa:	210c      	movs	r1, #12
 80037ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037b0:	f002 fc00 	bl	8005fb4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80037b4:	2025      	movs	r0, #37	; 0x25
 80037b6:	f001 fbf8 	bl	8004faa <HAL_NVIC_DisableIRQ>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40013800 	.word	0x40013800
 80037c8:	48000400 	.word	0x48000400
 80037cc:	40004400 	.word	0x40004400

080037d0 <LL_APB2_GRP1_ForceReset>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <LL_APB2_GRP1_ReleaseReset>:
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	43db      	mvns	r3, r3
 8003804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003808:	4013      	ands	r3, r2
 800380a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
	...

08003818 <LL_EXTI_EnableIT_0_31>:
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <LL_EXTI_EnableIT_0_31+0x24>)
 8003822:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003826:	4905      	ldr	r1, [pc, #20]	; (800383c <LL_EXTI_EnableIT_0_31+0x24>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	58000800 	.word	0x58000800

08003840 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003848:	4a07      	ldr	r2, [pc, #28]	; (8003868 <vcom_Init+0x28>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800384e:	f7fd ff9b 	bl	8001788 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003852:	f7ff fdd5 	bl	8003400 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003856:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800385a:	f7ff ffdd 	bl	8003818 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800385e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	2000063c 	.word	0x2000063c

0800386c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003870:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003874:	f7ff ffac 	bl	80037d0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003878:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800387c:	f7ff ffb9 	bl	80037f2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003880:	4804      	ldr	r0, [pc, #16]	; (8003894 <vcom_DeInit+0x28>)
 8003882:	f7ff ff69 	bl	8003758 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003886:	200f      	movs	r0, #15
 8003888:	f001 fb8f 	bl	8004faa <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800388c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800388e:	4618      	mov	r0, r3
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000450 	.word	0x20000450

08003898 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	461a      	mov	r2, r3
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4804      	ldr	r0, [pc, #16]	; (80038bc <vcom_Trace_DMA+0x24>)
 80038ac:	f007 f9da 	bl	800ac64 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80038b0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000450 	.word	0x20000450

080038c0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80038c8:	4a19      	ldr	r2, [pc, #100]	; (8003930 <vcom_ReceiveInit+0x70>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80038ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038d2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80038d4:	f107 0308 	add.w	r3, r7, #8
 80038d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80038dc:	4815      	ldr	r0, [pc, #84]	; (8003934 <vcom_ReceiveInit+0x74>)
 80038de:	f009 f988 	bl	800cbf2 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80038e2:	bf00      	nop
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <vcom_ReceiveInit+0x74>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f2:	d0f7      	beq.n	80038e4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80038f4:	bf00      	nop
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <vcom_ReceiveInit+0x74>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003904:	d1f7      	bne.n	80038f6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <vcom_ReceiveInit+0x74>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <vcom_ReceiveInit+0x74>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003914:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003916:	4807      	ldr	r0, [pc, #28]	; (8003934 <vcom_ReceiveInit+0x74>)
 8003918:	f009 f9c6 	bl	800cca8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800391c:	2201      	movs	r2, #1
 800391e:	4906      	ldr	r1, [pc, #24]	; (8003938 <vcom_ReceiveInit+0x78>)
 8003920:	4804      	ldr	r0, [pc, #16]	; (8003934 <vcom_ReceiveInit+0x74>)
 8003922:	f007 f953 	bl	800abcc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003926:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000640 	.word	0x20000640
 8003934:	20000450 	.word	0x20000450
 8003938:	20000638 	.word	0x20000638

0800393c <vcom_Resume>:

void vcom_Resume(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003940:	4808      	ldr	r0, [pc, #32]	; (8003964 <vcom_Resume+0x28>)
 8003942:	f007 f8f3 	bl	800ab2c <HAL_UART_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <vcom_Resume+0x14>
  {
    Error_Handler();
 800394c:	f7fe fcc4 	bl	80022d8 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <vcom_Resume+0x2c>)
 8003952:	f001 fb39 	bl	8004fc8 <HAL_DMA_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <vcom_Resume+0x24>
  {
    Error_Handler();
 800395c:	f7fe fcbc 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000450 	.word	0x20000450
 8003968:	20000578 	.word	0x20000578

0800396c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a05      	ldr	r2, [pc, #20]	; (8003990 <HAL_UART_TxCpltCallback+0x24>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d103      	bne.n	8003986 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_UART_TxCpltCallback+0x28>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2000      	movs	r0, #0
 8003984:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40013800 	.word	0x40013800
 8003994:	2000063c 	.word	0x2000063c

08003998 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <HAL_UART_RxCpltCallback+0x54>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d113      	bne.n	80039d2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_UART_RxCpltCallback+0x58>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_UART_RxCpltCallback+0x30>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_UART_RxCpltCallback+0x58>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2101      	movs	r1, #1
 80039c4:	480b      	ldr	r0, [pc, #44]	; (80039f4 <HAL_UART_RxCpltCallback+0x5c>)
 80039c6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80039c8:	2201      	movs	r2, #1
 80039ca:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_UART_RxCpltCallback+0x5c>)
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f007 f8fd 	bl	800abcc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <HAL_UART_RxCpltCallback+0x60>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d102      	bne.n	80039e2 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_UART_RxCpltCallback+0x64>)
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40013800 	.word	0x40013800
 80039f0:	20000640 	.word	0x20000640
 80039f4:	20000638 	.word	0x20000638
 80039f8:	40004400 	.word	0x40004400
 80039fc:	20000010 	.word	0x20000010

08003a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a00:	480d      	ldr	r0, [pc, #52]	; (8003a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a04:	f7ff f98b 	bl	8002d1e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003a0a:	490d      	ldr	r1, [pc, #52]	; (8003a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <LoopForever+0xe>)
  movs r3, #0
 8003a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a10:	e002      	b.n	8003a18 <LoopCopyDataInit>

08003a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a16:	3304      	adds	r3, #4

08003a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a1c:	d3f9      	bcc.n	8003a12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a20:	4c0a      	ldr	r4, [pc, #40]	; (8003a4c <LoopForever+0x16>)
  movs r3, #0
 8003a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a24:	e001      	b.n	8003a2a <LoopFillZerobss>

08003a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a28:	3204      	adds	r2, #4

08003a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a2c:	d3fb      	bcc.n	8003a26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a2e:	f01b f815 	bl	801ea5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a32:	f7fe fa79 	bl	8001f28 <main>

08003a36 <LoopForever>:

LoopForever:
    b LoopForever
 8003a36:	e7fe      	b.n	8003a36 <LoopForever>
  ldr   r0, =_estack
 8003a38:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a40:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8003a44:	0801fc40 	.word	0x0801fc40
  ldr r2, =_sbss
 8003a48:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8003a4c:	200020b0 	.word	0x200020b0

08003a50 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a50:	e7fe      	b.n	8003a50 <ADC_IRQHandler>

08003a52 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003a66:	2310      	movs	r3, #16
 8003a68:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a72:	2303      	movs	r3, #3
 8003a74:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7e:	f002 f939 	bl	8005cf4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003a82:	2320      	movs	r3, #32
 8003a84:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8e:	f002 f931 	bl	8005cf4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003a92:	2200      	movs	r2, #0
 8003a94:	2120      	movs	r1, #32
 8003a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a9a:	f002 fb59 	bl	8006150 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2110      	movs	r1, #16
 8003aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aa6:	f002 fb53 	bl	8006150 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d83f      	bhi.n	8003b44 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003ac4:	a201      	add	r2, pc, #4	; (adr r2, 8003acc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8003ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aca:	bf00      	nop
 8003acc:	08003add 	.word	0x08003add
 8003ad0:	08003af7 	.word	0x08003af7
 8003ad4:	08003b11 	.word	0x08003b11
 8003ad8:	08003b2b 	.word	0x08003b2b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2110      	movs	r1, #16
 8003ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae4:	f002 fb34 	bl	8006150 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2120      	movs	r1, #32
 8003aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003af0:	f002 fb2e 	bl	8006150 <HAL_GPIO_WritePin>
      break;      
 8003af4:	e027      	b.n	8003b46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003af6:	2201      	movs	r2, #1
 8003af8:	2110      	movs	r1, #16
 8003afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003afe:	f002 fb27 	bl	8006150 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b02:	2200      	movs	r2, #0
 8003b04:	2120      	movs	r1, #32
 8003b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0a:	f002 fb21 	bl	8006150 <HAL_GPIO_WritePin>
      break;
 8003b0e:	e01a      	b.n	8003b46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003b10:	2201      	movs	r2, #1
 8003b12:	2110      	movs	r1, #16
 8003b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b18:	f002 fb1a 	bl	8006150 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2120      	movs	r1, #32
 8003b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b24:	f002 fb14 	bl	8006150 <HAL_GPIO_WritePin>
      break;
 8003b28:	e00d      	b.n	8003b46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2110      	movs	r1, #16
 8003b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b32:	f002 fb0d 	bl	8006150 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003b36:	2201      	movs	r2, #1
 8003b38:	2120      	movs	r1, #32
 8003b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b3e:	f002 fb07 	bl	8006150 <HAL_GPIO_WritePin>
      break;
 8003b42:	e000      	b.n	8003b46 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003b44:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003b54:	2302      	movs	r3, #2
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003b70:	2301      	movs	r3, #1
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003b8a:	230f      	movs	r3, #15
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e001      	b.n	8003b94 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003b90:	2316      	movs	r3, #22
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b94:	68fb      	ldr	r3, [r7, #12]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6053      	str	r3, [r2, #4]
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bc80      	pop	{r7}
 8003bb6:	4770      	bx	lr
 8003bb8:	e0042000 	.word	0xe0042000

08003bbc <LL_DBGMCU_EnableDBGStopMode>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	6053      	str	r3, [r2, #4]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	e0042000 	.word	0xe0042000

08003bd8 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003bdc:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a03      	ldr	r2, [pc, #12]	; (8003bf0 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6053      	str	r3, [r2, #4]
}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	e0042000 	.word	0xe0042000

08003bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfe:	2003      	movs	r0, #3
 8003c00:	f001 f9a0 	bl	8004f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c04:	f004 f8e0 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <HAL_Init+0x3c>)
 8003c0c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c0e:	200f      	movs	r0, #15
 8003c10:	f7ff f804 	bl	8002c1c <HAL_InitTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	71fb      	strb	r3, [r7, #7]
 8003c1e:	e001      	b.n	8003c24 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c20:	f7fe fd93 	bl	800274a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2000000c 	.word	0x2000000c

08003c34 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <HAL_SuspendTick+0x18>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a03      	ldr	r2, [pc, #12]	; (8003c4c <HAL_SuspendTick+0x18>)
 8003c3e:	f023 0302 	bic.w	r3, r3, #2
 8003c42:	6013      	str	r3, [r2, #0]
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e010 	.word	0xe000e010

08003c50 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_ResumeTick+0x18>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_ResumeTick+0x18>)
 8003c5a:	f043 0302 	orr.w	r3, r3, #2
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	e000e010 	.word	0xe000e010

08003c6c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003c70:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <HAL_GetUIDw0+0x10>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	1fff7590 	.word	0x1fff7590

08003c80 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003c84:	4b02      	ldr	r3, [pc, #8]	; (8003c90 <HAL_GetUIDw1+0x10>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	1fff7594 	.word	0x1fff7594

08003c94 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003c98:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <HAL_GetUIDw2+0x10>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	1fff7598 	.word	0x1fff7598

08003ca8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003cac:	f7ff ff78 	bl	8003ba0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003cb0:	bf00      	nop
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003cb8:	f7ff ff80 	bl	8003bbc <LL_DBGMCU_EnableDBGStopMode>
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003cc4:	f7ff ff88 	bl	8003bd8 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2107      	movs	r1, #7
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	401a      	ands	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695a      	ldr	r2, [r3, #20]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2107      	movs	r1, #7
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bc80      	pop	{r7}
 8003d98:	4770      	bx	lr

08003d9a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	210f      	movs	r1, #15
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0e9b      	lsrs	r3, r3, #26
 8003dbe:	f003 010f 	and.w	r1, r3, #15
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003dd2:	bf00      	nop
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003e14:	43db      	mvns	r3, r3
 8003e16:	401a      	ands	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	0219      	lsls	r1, r3, #8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	400b      	ands	r3, r1
 8003e46:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e6e:	f023 0317 	bic.w	r3, r3, #23
 8003e72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e94:	f023 0317 	bic.w	r3, r3, #23
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6093      	str	r3, [r2, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eba:	d101      	bne.n	8003ec0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003edc:	f023 0317 	bic.w	r3, r3, #23
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f02:	f023 0317 	bic.w	r3, r3, #23
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <LL_ADC_IsEnabled+0x18>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <LL_ADC_IsEnabled+0x1a>
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d101      	bne.n	8003f54 <LL_ADC_IsDisableOngoing+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <LL_ADC_IsDisableOngoing+0x1a>
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f70:	f023 0317 	bic.w	r3, r3, #23
 8003f74:	f043 0204 	orr.w	r2, r3, #4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f96:	f023 0317 	bic.w	r3, r3, #23
 8003f9a:	f043 0210 	orr.w	r2, r3, #16
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d101      	bne.n	8003fc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e17e      	b.n	80042f0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7fd faf9 	bl	80015f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff ff44 	bl	8003ea6 <LL_ADC_IsInternalRegulatorEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d115      	bne.n	8004050 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff18 	bl	8003e5e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800402e:	4b9e      	ldr	r3, [pc, #632]	; (80042a8 <HAL_ADC_Init+0x2d8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	4a9d      	ldr	r2, [pc, #628]	; (80042ac <HAL_ADC_Init+0x2dc>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	3301      	adds	r3, #1
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004042:	e002      	b.n	800404a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f9      	bne.n	8004044 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff26 	bl	8003ea6 <LL_ADC_IsInternalRegulatorEnabled>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f043 0210 	orr.w	r2, r3, #16
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f043 0201 	orr.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff93 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 8004086:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	f040 8124 	bne.w	80042de <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8120 	bne.w	80042de <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040a6:	f043 0202 	orr.w	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff ff30 	bl	8003f18 <LL_ADC_IsEnabled>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80a7 	bne.w	800420e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	7e1b      	ldrb	r3, [r3, #24]
 80040c8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80040ca:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	7e5b      	ldrb	r3, [r3, #25]
 80040d0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80040d2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7e9b      	ldrb	r3, [r3, #26]
 80040d8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80040da:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040e0:	2a00      	cmp	r2, #0
 80040e2:	d002      	beq.n	80040ea <HAL_ADC_Init+0x11a>
 80040e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e8:	e000      	b.n	80040ec <HAL_ADC_Init+0x11c>
 80040ea:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80040ec:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80040f2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da04      	bge.n	8004106 <HAL_ADC_Init+0x136>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004104:	e001      	b.n	800410a <HAL_ADC_Init+0x13a>
 8004106:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800410a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004112:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004114:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d114      	bne.n	8004150 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7e9b      	ldrb	r3, [r3, #26]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d104      	bne.n	8004138 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e00b      	b.n	8004150 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004164:	4313      	orrs	r3, r2
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8004176:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	430b      	orrs	r3, r1
 8004182:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004190:	4313      	orrs	r3, r2
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d111      	bne.n	80041c6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80041ae:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80041b4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80041ba:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	f043 0301 	orr.w	r3, r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	4b38      	ldr	r3, [pc, #224]	; (80042b0 <HAL_ADC_Init+0x2e0>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	6979      	ldr	r1, [r7, #20]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041e2:	d014      	beq.n	800420e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d00f      	beq.n	800420e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80041f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f6:	d00a      	beq.n	800420e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <HAL_ADC_Init+0x2e4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004208:	492a      	ldr	r1, [pc, #168]	; (80042b4 <HAL_ADC_Init+0x2e4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	461a      	mov	r2, r3
 8004218:	2100      	movs	r1, #0
 800421a:	f7ff fd76 	bl	8003d0a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	461a      	mov	r2, r3
 8004228:	4923      	ldr	r1, [pc, #140]	; (80042b8 <HAL_ADC_Init+0x2e8>)
 800422a:	f7ff fd6e 	bl	8003d0a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f062 020f 	orn	r2, r2, #15
 8004244:	629a      	str	r2, [r3, #40]	; 0x28
 8004246:	e017      	b.n	8004278 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004250:	d112      	bne.n	8004278 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	3b01      	subs	r3, #1
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f003 031c 	and.w	r3, r3, #28
 8004264:	f06f 020f 	mvn.w	r2, #15
 8004268:	fa02 f103 	lsl.w	r1, r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff fd61 	bl	8003d46 <LL_ADC_GetSamplingTimeCommonChannels>
 8004284:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800428a:	429a      	cmp	r2, r3
 800428c:	d116      	bne.n	80042bc <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004298:	f023 0303 	bic.w	r3, r3, #3
 800429c:	f043 0201 	orr.w	r2, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042a4:	e023      	b.n	80042ee <HAL_ADC_Init+0x31e>
 80042a6:	bf00      	nop
 80042a8:	2000000c 	.word	0x2000000c
 80042ac:	053e2d63 	.word	0x053e2d63
 80042b0:	1ffffc02 	.word	0x1ffffc02
 80042b4:	40012708 	.word	0x40012708
 80042b8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	f023 0312 	bic.w	r3, r3, #18
 80042c4:	f043 0210 	orr.w	r2, r3, #16
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80042dc:	e007      	b.n	80042ee <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f043 0210 	orr.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e07a      	b.n	8004400 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 face 	bl	80048b8 <ADC_ConversionStop>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fb92 	bl	8004a50 <ADC_Disable>
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fd9f 	bl	8003e84 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004354:	f023 0303 	bic.w	r3, r3, #3
 8004358:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f240 329f 	movw	r2, #927	; 0x39f
 8004362:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68d9      	ldr	r1, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b26      	ldr	r3, [pc, #152]	; (8004408 <HAL_ADC_DeInit+0x110>)
 8004370:	400b      	ands	r3, r1
 8004372:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691a      	ldr	r2, [r3, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004382:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0207 	bic.w	r2, r2, #7
 8004392:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a1a      	ldr	r2, [r3, #32]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043a2:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2200      	movs	r2, #0
 80043d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <HAL_ADC_DeInit+0x114>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a0d      	ldr	r2, [pc, #52]	; (800440c <HAL_ADC_DeInit+0x114>)
 80043d8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80043dc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fd f91e 	bl	8001620 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	833e0200 	.word	0x833e0200
 800440c:	40012708 	.word	0x40012708

08004410 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fdc5 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d132      	bne.n	800448e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_ADC_Start+0x26>
 8004432:	2302      	movs	r3, #2
 8004434:	e02e      	b.n	8004494 <HAL_ADC_Start+0x84>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa80 	bl	8004944 <ADC_Enable>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11a      	bne.n	8004484 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004456:	f023 0301 	bic.w	r3, r3, #1
 800445a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	221c      	movs	r2, #28
 800446e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fd6f 	bl	8003f60 <LL_ADC_REG_StartConversion>
 8004482:	e006      	b.n	8004492 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800448c:	e001      	b.n	8004492 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800448e:	2302      	movs	r3, #2
 8004490:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_Stop+0x16>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e022      	b.n	80044f8 <HAL_ADC_Stop+0x5c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f9fc 	bl	80048b8 <ADC_ConversionStop>
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d111      	bne.n	80044ee <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fac0 	bl	8004a50 <ADC_Disable>
 80044d0:	4603      	mov	r3, r0
 80044d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d102      	bne.n	8004518 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004512:	2308      	movs	r3, #8
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e010      	b.n	800453a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e077      	b.n	8004626 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004536:	2304      	movs	r3, #4
 8004538:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800453a:	f7fe fb79 	bl	8002c30 <HAL_GetTick>
 800453e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004540:	e021      	b.n	8004586 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d01d      	beq.n	8004586 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800454a:	f7fe fb71 	bl	8002c30 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <HAL_ADC_PollForConversion+0x60>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d112      	bne.n	8004586 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4013      	ands	r3, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	f043 0204 	orr.w	r2, r3, #4
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e04f      	b.n	8004626 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0d6      	beq.n	8004542 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fbe6 	bl	8003d76 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d031      	beq.n	8004614 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7e9b      	ldrb	r3, [r3, #26]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d12d      	bne.n	8004614 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d126      	bne.n	8004614 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fcee 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d112      	bne.n	80045fc <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 020c 	bic.w	r2, r2, #12
 80045e4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	659a      	str	r2, [r3, #88]	; 0x58
 80045fa:	e00b      	b.n	8004614 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	f043 0201 	orr.w	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7e1b      	ldrb	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	220c      	movs	r2, #12
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
	...

08004648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x28>
 800466c:	2302      	movs	r3, #2
 800466e:	e110      	b.n	8004892 <HAL_ADC_ConfigChannel+0x24a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff fc95 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 80f7 	bne.w	8004878 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	f000 80b1 	beq.w	80047f6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800469c:	d004      	beq.n	80046a8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80046a2:	4a7e      	ldr	r2, [pc, #504]	; (800489c <HAL_ADC_ConfigChannel+0x254>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7ff fb92 	bl	8003ddc <LL_ADC_REG_SetSequencerChAdd>
 80046b8:	e041      	b.n	800473e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	210f      	movs	r1, #15
 80046c8:	fa01 f303 	lsl.w	r3, r1, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0xa0>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	0e9b      	lsrs	r3, r3, #26
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	e011      	b.n	800470c <HAL_ADC_ConfigChannel+0xc4>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004700:	2320      	movs	r3, #32
 8004702:	e003      	b.n	800470c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fab3 f383 	clz	r3, r3
 800470a:	b2db      	uxtb	r3, r3
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	6849      	ldr	r1, [r1, #4]
 8004710:	f001 011f 	and.w	r1, r1, #31
 8004714:	408b      	lsls	r3, r1
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	089b      	lsrs	r3, r3, #2
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	429a      	cmp	r2, r3
 800472a:	d808      	bhi.n	800473e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	6859      	ldr	r1, [r3, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	f7ff fb2e 	bl	8003d9a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6819      	ldr	r1, [r3, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	461a      	mov	r2, r3
 800474c:	f7ff fb6b 	bl	8003e26 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	f280 8097 	bge.w	8004888 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800475a:	4851      	ldr	r0, [pc, #324]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 800475c:	f7ff fac8 	bl	8003cf0 <LL_ADC_GetCommonPathInternalCh>
 8004760:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4f      	ldr	r2, [pc, #316]	; (80048a4 <HAL_ADC_ConfigChannel+0x25c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d120      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11b      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800477c:	4619      	mov	r1, r3
 800477e:	4848      	ldr	r0, [pc, #288]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 8004780:	f7ff faa4 	bl	8003ccc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004784:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <HAL_ADC_ConfigChannel+0x260>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	4a48      	ldr	r2, [pc, #288]	; (80048ac <HAL_ADC_ConfigChannel+0x264>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	4613      	mov	r3, r2
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800479e:	e002      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f9      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80047ac:	e06c      	b.n	8004888 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a3f      	ldr	r2, [pc, #252]	; (80048b0 <HAL_ADC_ConfigChannel+0x268>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10c      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047c8:	4619      	mov	r1, r3
 80047ca:	4835      	ldr	r0, [pc, #212]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 80047cc:	f7ff fa7e 	bl	8003ccc <LL_ADC_SetCommonPathInternalCh>
 80047d0:	e05a      	b.n	8004888 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a37      	ldr	r2, [pc, #220]	; (80048b4 <HAL_ADC_ConfigChannel+0x26c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d155      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d150      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ec:	4619      	mov	r1, r3
 80047ee:	482c      	ldr	r0, [pc, #176]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 80047f0:	f7ff fa6c 	bl	8003ccc <LL_ADC_SetCommonPathInternalCh>
 80047f4:	e048      	b.n	8004888 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047fe:	d004      	beq.n	800480a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004804:	4a25      	ldr	r2, [pc, #148]	; (800489c <HAL_ADC_ConfigChannel+0x254>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d107      	bne.n	800481a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7ff faf3 	bl	8003e00 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da32      	bge.n	8004888 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004822:	481f      	ldr	r0, [pc, #124]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 8004824:	f7ff fa64 	bl	8003cf0 <LL_ADC_GetCommonPathInternalCh>
 8004828:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_ADC_ConfigChannel+0x25c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d107      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800483a:	4619      	mov	r1, r3
 800483c:	4818      	ldr	r0, [pc, #96]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 800483e:	f7ff fa45 	bl	8003ccc <LL_ADC_SetCommonPathInternalCh>
 8004842:	e021      	b.n	8004888 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a19      	ldr	r2, [pc, #100]	; (80048b0 <HAL_ADC_ConfigChannel+0x268>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d107      	bne.n	800485e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004854:	4619      	mov	r1, r3
 8004856:	4812      	ldr	r0, [pc, #72]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 8004858:	f7ff fa38 	bl	8003ccc <LL_ADC_SetCommonPathInternalCh>
 800485c:	e014      	b.n	8004888 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_ADC_ConfigChannel+0x26c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d10f      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800486e:	4619      	mov	r1, r3
 8004870:	480b      	ldr	r0, [pc, #44]	; (80048a0 <HAL_ADC_ConfigChannel+0x258>)
 8004872:	f7ff fa2b 	bl	8003ccc <LL_ADC_SetCommonPathInternalCh>
 8004876:	e007      	b.n	8004888 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004890:	7ffb      	ldrb	r3, [r7, #31]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	80000004 	.word	0x80000004
 80048a0:	40012708 	.word	0x40012708
 80048a4:	b0001000 	.word	0xb0001000
 80048a8:	2000000c 	.word	0x2000000c
 80048ac:	053e2d63 	.word	0x053e2d63
 80048b0:	b8004000 	.word	0xb8004000
 80048b4:	b4002000 	.word	0xb4002000

080048b8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fb71 	bl	8003fac <LL_ADC_REG_IsConversionOngoing>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d033      	beq.n	8004938 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fb31 	bl	8003f3c <LL_ADC_IsDisableOngoing>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fb4e 	bl	8003f86 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048ea:	f7fe f9a1 	bl	8002c30 <HAL_GetTick>
 80048ee:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80048f0:	e01b      	b.n	800492a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80048f2:	f7fe f99d 	bl	8002c30 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d914      	bls.n	800492a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004912:	f043 0210 	orr.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e007      	b.n	800493a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1dc      	bne.n	80048f2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fadf 	bl	8003f18 <LL_ADC_IsEnabled>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d169      	bne.n	8004a34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <ADC_Enable+0xfc>)
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00d      	beq.n	800498a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f043 0210 	orr.w	r2, r3, #16
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e055      	b.n	8004a36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fa9c 	bl	8003ecc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004994:	482b      	ldr	r0, [pc, #172]	; (8004a44 <ADC_Enable+0x100>)
 8004996:	f7ff f9ab 	bl	8003cf0 <LL_ADC_GetCommonPathInternalCh>
 800499a:	4603      	mov	r3, r0
 800499c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00f      	beq.n	80049c4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <ADC_Enable+0x104>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	099b      	lsrs	r3, r3, #6
 80049aa:	4a28      	ldr	r2, [pc, #160]	; (8004a4c <ADC_Enable+0x108>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80049b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049b6:	e002      	b.n	80049be <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f9      	bne.n	80049b8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7e5b      	ldrb	r3, [r3, #25]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d033      	beq.n	8004a34 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80049cc:	f7fe f930 	bl	8002c30 <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049d2:	e028      	b.n	8004a26 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fa9d 	bl	8003f18 <LL_ADC_IsEnabled>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fa6f 	bl	8003ecc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049ee:	f7fe f91f 	bl	8002c30 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d914      	bls.n	8004a26 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d00d      	beq.n	8004a26 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f043 0210 	orr.w	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e007      	b.n	8004a36 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d1cf      	bne.n	80049d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	80000017 	.word	0x80000017
 8004a44:	40012708 	.word	0x40012708
 8004a48:	2000000c 	.word	0x2000000c
 8004a4c:	053e2d63 	.word	0x053e2d63

08004a50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fa6d 	bl	8003f3c <LL_ADC_IsDisableOngoing>
 8004a62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fa55 	bl	8003f18 <LL_ADC_IsEnabled>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d047      	beq.n	8004b04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d144      	bne.n	8004b04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0305 	and.w	r3, r3, #5
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d10c      	bne.n	8004aa2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fa30 	bl	8003ef2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2203      	movs	r2, #3
 8004a98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a9a:	f7fe f8c9 	bl	8002c30 <HAL_GetTick>
 8004a9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004aa0:	e029      	b.n	8004af6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	f043 0210 	orr.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e023      	b.n	8004b06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004abe:	f7fe f8b7 	bl	8002c30 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d914      	bls.n	8004af6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00d      	beq.n	8004af6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f043 0210 	orr.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e007      	b.n	8004b06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1dc      	bne.n	8004abe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <LL_ADC_SetCalibrationFactor>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b1e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <LL_ADC_GetCalibrationFactor>:
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <LL_ADC_Enable>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b62:	f023 0317 	bic.w	r3, r3, #23
 8004b66:	f043 0201 	orr.w	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <LL_ADC_Disable>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b88:	f023 0317 	bic.w	r3, r3, #23
 8004b8c:	f043 0202 	orr.w	r2, r3, #2
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <LL_ADC_IsEnabled>:
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <LL_ADC_IsEnabled+0x18>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <LL_ADC_IsEnabled+0x1a>
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr

08004bc2 <LL_ADC_StartCalibration>:
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd2:	f023 0317 	bic.w	r3, r3, #23
 8004bd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <LL_ADC_IsCalibrationOnGoing>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfc:	d101      	bne.n	8004c02 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b088      	sub	sp, #32
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_ADCEx_Calibration_Start+0x1e>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0b9      	b.n	8004da0 <HAL_ADCEx_Calibration_Start+0x192>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff ff0b 	bl	8004a50 <ADC_Disable>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffab 	bl	8004b9e <LL_ADC_IsEnabled>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f040 809d 	bne.w	8004d8a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004c58:	f043 0202 	orr.w	r2, r3, #2
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	f248 0303 	movw	r3, #32771	; 0x8003
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c7c:	f023 0303 	bic.w	r3, r3, #3
 8004c80:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	e02e      	b.n	8004ce6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff ff98 	bl	8004bc2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004c92:	e014      	b.n	8004cbe <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004ca0:	d30d      	bcc.n	8004cbe <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f023 0312 	bic.w	r3, r3, #18
 8004caa:	f043 0210 	orr.w	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e070      	b.n	8004da0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff ff90 	bl	8004be8 <LL_ADC_IsCalibrationOnGoing>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e2      	bne.n	8004c94 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff2f 	bl	8004b36 <LL_ADC_GetCalibrationFactor>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	4413      	add	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	2b07      	cmp	r3, #7
 8004cea:	d9cd      	bls.n	8004c88 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff29 	bl	8004b52 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff ff01 	bl	8004b0e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff ff31 	bl	8004b78 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d16:	f7fd ff8b 	bl	8002c30 <HAL_GetTick>
 8004d1a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d1c:	e01c      	b.n	8004d58 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d1e:	f7fd ff87 	bl	8002c30 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d915      	bls.n	8004d58 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff34 	bl	8004b9e <LL_ADC_IsEnabled>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00d      	beq.n	8004d58 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d40:	f043 0210 	orr.w	r2, r3, #16
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4c:	f043 0201 	orr.w	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e023      	b.n	8004da0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff1e 	bl	8004b9e <LL_ADC_IsEnabled>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1da      	bne.n	8004d1e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68d9      	ldr	r1, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f043 0201 	orr.w	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	659a      	str	r2, [r3, #88]	; 0x58
 8004d88:	e005      	b.n	8004d96 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	f043 0210 	orr.w	r2, r3, #16
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <__NVIC_SetPriorityGrouping+0x44>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <__NVIC_SetPriorityGrouping+0x44>)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	60d3      	str	r3, [r2, #12]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <__NVIC_GetPriorityGrouping+0x18>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	f003 0307 	and.w	r3, r3, #7
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	db0b      	blt.n	8004e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	f003 021f 	and.w	r2, r3, #31
 8004e24:	4906      	ldr	r1, [pc, #24]	; (8004e40 <__NVIC_EnableIRQ+0x34>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	db12      	blt.n	8004e7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	f003 021f 	and.w	r2, r3, #31
 8004e5c:	490a      	ldr	r1, [pc, #40]	; (8004e88 <__NVIC_DisableIRQ+0x44>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	2001      	movs	r0, #1
 8004e66:	fa00 f202 	lsl.w	r2, r0, r2
 8004e6a:	3320      	adds	r3, #32
 8004e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e70:	f3bf 8f4f 	dsb	sy
}
 8004e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e76:	f3bf 8f6f 	isb	sy
}
 8004e7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	e000e100 	.word	0xe000e100

08004e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	6039      	str	r1, [r7, #0]
 8004e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	db0a      	blt.n	8004eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	490c      	ldr	r1, [pc, #48]	; (8004ed8 <__NVIC_SetPriority+0x4c>)
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	440b      	add	r3, r1
 8004eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eb4:	e00a      	b.n	8004ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4908      	ldr	r1, [pc, #32]	; (8004edc <__NVIC_SetPriority+0x50>)
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	3b04      	subs	r3, #4
 8004ec4:	0112      	lsls	r2, r2, #4
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	440b      	add	r3, r1
 8004eca:	761a      	strb	r2, [r3, #24]
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	e000e100 	.word	0xe000e100
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b089      	sub	sp, #36	; 0x24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f1c3 0307 	rsb	r3, r3, #7
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	bf28      	it	cs
 8004efe:	2304      	movcs	r3, #4
 8004f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3304      	adds	r3, #4
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d902      	bls.n	8004f10 <NVIC_EncodePriority+0x30>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3b03      	subs	r3, #3
 8004f0e:	e000      	b.n	8004f12 <NVIC_EncodePriority+0x32>
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	43da      	mvns	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	401a      	ands	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f28:	f04f 31ff 	mov.w	r1, #4294967295
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f32:	43d9      	mvns	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f38:	4313      	orrs	r3, r2
         );
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff2b 	bl	8004da8 <__NVIC_SetPriorityGrouping>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	60b9      	str	r1, [r7, #8]
 8004f64:	607a      	str	r2, [r7, #4]
 8004f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f68:	f7ff ff42 	bl	8004df0 <__NVIC_GetPriorityGrouping>
 8004f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7ff ffb4 	bl	8004ee0 <NVIC_EncodePriority>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff83 	bl	8004e8c <__NVIC_SetPriority>
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff35 	bl	8004e0c <__NVIC_EnableIRQ>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff43 	bl	8004e44 <__NVIC_DisableIRQ>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08e      	b.n	80050f8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_DMA_Init+0x138>)
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d80f      	bhi.n	8005006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b45      	ldr	r3, [pc, #276]	; (8005104 <HAL_DMA_Init+0x13c>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a45      	ldr	r2, [pc, #276]	; (8005108 <HAL_DMA_Init+0x140>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	009a      	lsls	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_DMA_Init+0x144>)
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
 8005004:	e00e      	b.n	8005024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	4b40      	ldr	r3, [pc, #256]	; (8005110 <HAL_DMA_Init+0x148>)
 800500e:	4413      	add	r3, r2
 8005010:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <HAL_DMA_Init+0x140>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	009a      	lsls	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <HAL_DMA_Init+0x14c>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fb24 	bl	80056c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005084:	d102      	bne.n	800508c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005098:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_DMA_Init+0x106>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d80c      	bhi.n	80050ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb4d 	bl	8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e008      	b.n	80050e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40020407 	.word	0x40020407
 8005104:	bffdfff8 	.word	0xbffdfff8
 8005108:	cccccccd 	.word	0xcccccccd
 800510c:	40020000 	.word	0x40020000
 8005110:	bffdfbf8 	.word	0xbffdfbf8
 8005114:	40020400 	.word	0x40020400

08005118 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e07b      	b.n	8005222 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	4b3a      	ldr	r3, [pc, #232]	; (800522c <HAL_DMA_DeInit+0x114>)
 8005142:	429a      	cmp	r2, r3
 8005144:	d80f      	bhi.n	8005166 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	4b38      	ldr	r3, [pc, #224]	; (8005230 <HAL_DMA_DeInit+0x118>)
 800514e:	4413      	add	r3, r2
 8005150:	4a38      	ldr	r2, [pc, #224]	; (8005234 <HAL_DMA_DeInit+0x11c>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	009a      	lsls	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a35      	ldr	r2, [pc, #212]	; (8005238 <HAL_DMA_DeInit+0x120>)
 8005162:	641a      	str	r2, [r3, #64]	; 0x40
 8005164:	e00e      	b.n	8005184 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	4b33      	ldr	r3, [pc, #204]	; (800523c <HAL_DMA_DeInit+0x124>)
 800516e:	4413      	add	r3, r2
 8005170:	4a30      	ldr	r2, [pc, #192]	; (8005234 <HAL_DMA_DeInit+0x11c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	009a      	lsls	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <HAL_DMA_DeInit+0x128>)
 8005182:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f003 021c 	and.w	r2, r3, #28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f202 	lsl.w	r2, r1, r2
 800519e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fa8f 	bl	80056c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051b6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00f      	beq.n	80051e0 <HAL_DMA_DeInit+0xc8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d80b      	bhi.n	80051e0 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fac3 	bl	8005754 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051de:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40020407 	.word	0x40020407
 8005230:	bffdfff8 	.word	0xbffdfff8
 8005234:	cccccccd 	.word	0xcccccccd
 8005238:	40020000 	.word	0x40020000
 800523c:	bffdfbf8 	.word	0xbffdfbf8
 8005240:	40020400 	.word	0x40020400

08005244 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_DMA_Start_IT+0x20>
 8005260:	2302      	movs	r3, #2
 8005262:	e069      	b.n	8005338 <HAL_DMA_Start_IT+0xf4>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d155      	bne.n	8005324 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	68b9      	ldr	r1, [r7, #8]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f9d3 	bl	8005648 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 020e 	orr.w	r2, r2, #14
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e00f      	b.n	80052dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0204 	bic.w	r2, r2, #4
 80052ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 020a 	orr.w	r2, r2, #10
 80052da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005310:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e008      	b.n	8005336 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005336:	7dfb      	ldrb	r3, [r7, #23]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e04f      	b.n	80053f2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d008      	beq.n	8005370 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2204      	movs	r2, #4
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e040      	b.n	80053f2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 020e 	bic.w	r2, r2, #14
 800537e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800538e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a4:	f003 021c 	and.w	r2, r3, #28
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2101      	movs	r1, #1
 80053ae:	fa01 f202 	lsl.w	r2, r1, r2
 80053b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d005      	beq.n	8005420 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2204      	movs	r2, #4
 8005418:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
 800541e:	e047      	b.n	80054b0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 020e 	bic.w	r2, r2, #14
 800542e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800544e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	f003 021c 	and.w	r2, r3, #28
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f202 	lsl.w	r2, r1, r2
 8005462:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800546c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005484:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800548e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
    }
  }
  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	f003 031c 	and.w	r3, r3, #28
 80054dc:	2204      	movs	r2, #4
 80054de:	409a      	lsls	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d027      	beq.n	8005538 <HAL_DMA_IRQHandler+0x7c>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d022      	beq.n	8005538 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d107      	bne.n	8005510 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0204 	bic.w	r2, r2, #4
 800550e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005514:	f003 021c 	and.w	r2, r3, #28
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	2104      	movs	r1, #4
 800551e:	fa01 f202 	lsl.w	r2, r1, r2
 8005522:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 8081 	beq.w	8005630 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005536:	e07b      	b.n	8005630 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	f003 031c 	and.w	r3, r3, #28
 8005540:	2202      	movs	r2, #2
 8005542:	409a      	lsls	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d03d      	beq.n	80055c8 <HAL_DMA_IRQHandler+0x10c>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d038      	beq.n	80055c8 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 020a 	bic.w	r2, r2, #10
 8005572:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	4b2e      	ldr	r3, [pc, #184]	; (800563c <HAL_DMA_IRQHandler+0x180>)
 8005584:	429a      	cmp	r2, r3
 8005586:	d909      	bls.n	800559c <HAL_DMA_IRQHandler+0xe0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	f003 031c 	and.w	r3, r3, #28
 8005590:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <HAL_DMA_IRQHandler+0x184>)
 8005592:	2102      	movs	r1, #2
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	6053      	str	r3, [r2, #4]
 800559a:	e008      	b.n	80055ae <HAL_DMA_IRQHandler+0xf2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	f003 031c 	and.w	r3, r3, #28
 80055a4:	4a27      	ldr	r2, [pc, #156]	; (8005644 <HAL_DMA_IRQHandler+0x188>)
 80055a6:	2102      	movs	r1, #2
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d038      	beq.n	8005630 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80055c6:	e033      	b.n	8005630 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055cc:	f003 031c 	and.w	r3, r3, #28
 80055d0:	2208      	movs	r2, #8
 80055d2:	409a      	lsls	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d02a      	beq.n	8005632 <HAL_DMA_IRQHandler+0x176>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d025      	beq.n	8005632 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 020e 	bic.w	r2, r2, #14
 80055f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f003 021c 	and.w	r2, r3, #28
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	2101      	movs	r1, #1
 8005604:	fa01 f202 	lsl.w	r2, r1, r2
 8005608:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005630:	bf00      	nop
 8005632:	bf00      	nop
}
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40020080 	.word	0x40020080
 8005640:	40020400 	.word	0x40020400
 8005644:	40020000 	.word	0x40020000

08005648 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800565e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005670:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	f003 021c 	and.w	r2, r3, #28
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2101      	movs	r1, #1
 8005680:	fa01 f202 	lsl.w	r2, r1, r2
 8005684:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b10      	cmp	r3, #16
 8005694:	d108      	bne.n	80056a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80056a6:	e007      	b.n	80056b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
	...

080056c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d813      	bhi.n	8005700 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056e4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	3b08      	subs	r3, #8
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	e011      	b.n	8005724 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	009a      	lsls	r2, r3, #2
 8005708:	4b10      	ldr	r3, [pc, #64]	; (800574c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800570a:	4413      	add	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	3b08      	subs	r3, #8
 8005718:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800571a:	fba2 2303 	umull	r2, r3, r2, r3
 800571e:	091b      	lsrs	r3, r3, #4
 8005720:	3307      	adds	r3, #7
 8005722:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005728:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	2201      	movs	r2, #1
 8005732:	409a      	lsls	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40020407 	.word	0x40020407
 8005748:	cccccccd 	.word	0xcccccccd
 800574c:	4002081c 	.word	0x4002081c
 8005750:	40020880 	.word	0x40020880

08005754 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005764:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	461a      	mov	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a08      	ldr	r2, [pc, #32]	; (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005778:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3b01      	subs	r3, #1
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr
 8005794:	1000823f 	.word	0x1000823f
 8005798:	40020940 	.word	0x40020940

0800579c <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d12b      	bne.n	800580a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_DMAEx_ConfigMuxSync+0x24>
 80057bc:	2302      	movs	r3, #2
 80057be:	e028      	b.n	8005812 <HAL_DMAEx_ConfigMuxSync+0x76>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	3b01      	subs	r3, #1
 80057dc:	04db      	lsls	r3, r3, #19
 80057de:	431a      	orrs	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	7a1b      	ldrb	r3, [r3, #8]
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	431a      	orrs	r2, r3
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	7a5b      	ldrb	r3, [r3, #9]
 80057f2:	025b      	lsls	r3, r3, #9
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	e003      	b.n	8005812 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2280      	movs	r2, #128	; 0x80
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01a      	beq.n	800586a <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005842:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800584c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005852:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	2b00      	cmp	r3, #0
 8005870:	d022      	beq.n	80058b8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	4013      	ands	r3, r2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01a      	beq.n	80058b8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005890:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800589a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
      }
    }
  }
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <HAL_FLASH_Program+0x80>)
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_FLASH_Program+0x1a>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e02d      	b.n	8005936 <HAL_FLASH_Program+0x76>
 80058da:	4b19      	ldr	r3, [pc, #100]	; (8005940 <HAL_FLASH_Program+0x80>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <HAL_FLASH_Program+0x80>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80058e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ea:	f000 f869 	bl	80059c0 <FLASH_WaitForLastOperation>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11a      	bne.n	800592e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d105      	bne.n	800590a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80058fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005902:	68b8      	ldr	r0, [r7, #8]
 8005904:	f000 f8be 	bl	8005a84 <FLASH_Program_DoubleWord>
 8005908:	e004      	b.n	8005914 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	4619      	mov	r1, r3
 800590e:	68b8      	ldr	r0, [r7, #8]
 8005910:	f000 f8de 	bl	8005ad0 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005918:	f000 f852 	bl	80059c0 <FLASH_WaitForLastOperation>
 800591c:	4603      	mov	r3, r0
 800591e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005920:	4b08      	ldr	r3, [pc, #32]	; (8005944 <HAL_FLASH_Program+0x84>)
 8005922:	695a      	ldr	r2, [r3, #20]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	43db      	mvns	r3, r3
 8005928:	4906      	ldr	r1, [pc, #24]	; (8005944 <HAL_FLASH_Program+0x84>)
 800592a:	4013      	ands	r3, r2
 800592c:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <HAL_FLASH_Program+0x80>)
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20000644 	.word	0x20000644
 8005944:	58004000 	.word	0x58004000

08005948 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <HAL_FLASH_Unlock+0x38>)
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	da0b      	bge.n	8005972 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800595a:	4b09      	ldr	r3, [pc, #36]	; (8005980 <HAL_FLASH_Unlock+0x38>)
 800595c:	4a09      	ldr	r2, [pc, #36]	; (8005984 <HAL_FLASH_Unlock+0x3c>)
 800595e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <HAL_FLASH_Unlock+0x38>)
 8005962:	4a09      	ldr	r2, [pc, #36]	; (8005988 <HAL_FLASH_Unlock+0x40>)
 8005964:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <HAL_FLASH_Unlock+0x38>)
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2b00      	cmp	r3, #0
 800596c:	da01      	bge.n	8005972 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005972:	79fb      	ldrb	r3, [r7, #7]
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	58004000 	.word	0x58004000
 8005984:	45670123 	.word	0x45670123
 8005988:	cdef89ab 	.word	0xcdef89ab

0800598c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_FLASH_Lock+0x30>)
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4a08      	ldr	r2, [pc, #32]	; (80059bc <HAL_FLASH_Lock+0x30>)
 800599c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059a0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_FLASH_Lock+0x30>)
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	db01      	blt.n	80059ae <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80059ae:	79fb      	ldrb	r3, [r7, #7]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bc80      	pop	{r7}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	58004000 	.word	0x58004000

080059c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80059c8:	f7fd f932 	bl	8002c30 <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059ce:	e009      	b.n	80059e4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80059d0:	f7fd f92e 	bl	8002c30 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d801      	bhi.n	80059e4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e047      	b.n	8005a74 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059e4:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f0:	d0ee      	beq.n	80059d0 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80059f2:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a02:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005a0e:	4013      	ands	r3, r2
 8005a10:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <FLASH_WaitForLastOperation+0x6c>
 8005a1c:	4b17      	ldr	r3, [pc, #92]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a26:	4915      	ldr	r1, [pc, #84]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	618b      	str	r3, [r1, #24]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <FLASH_WaitForLastOperation+0x80>
 8005a36:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a3e:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00e      	beq.n	8005a64 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005a46:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <FLASH_WaitForLastOperation+0xc0>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e011      	b.n	8005a74 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005a50:	f7fd f8ee 	bl	8002c30 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d801      	bhi.n	8005a64 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e007      	b.n	8005a74 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <FLASH_WaitForLastOperation+0xbc>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a70:	d0ee      	beq.n	8005a50 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	58004000 	.word	0x58004000
 8005a80:	20000644 	.word	0x20000644

08005a84 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a90:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <FLASH_Program_DoubleWord+0x48>)
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <FLASH_Program_DoubleWord+0x48>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005aa2:	f3bf 8f6f 	isb	sy
}
 8005aa6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	000a      	movs	r2, r1
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	68f9      	ldr	r1, [r7, #12]
 8005aba:	3104      	adds	r1, #4
 8005abc:	4613      	mov	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	58004000 	.word	0x58004000

08005ad0 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b089      	sub	sp, #36	; 0x24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005ada:	2340      	movs	r3, #64	; 0x40
 8005adc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005ae6:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <FLASH_Program_Fast+0x78>)
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <FLASH_Program_Fast+0x78>)
 8005aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005af0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af2:	f3ef 8310 	mrs	r3, PRIMASK
 8005af6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005af8:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005afc:	b672      	cpsid	i
}
 8005afe:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	3304      	adds	r3, #4
 8005b12:	617b      	str	r3, [r7, #20]
    row_index--;
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005b1a:	7ffb      	ldrb	r3, [r7, #31]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1ef      	bne.n	8005b00 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005b20:	bf00      	nop
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <FLASH_Program_Fast+0x78>)
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b2e:	d0f8      	beq.n	8005b22 <FLASH_Program_Fast+0x52>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f383 8810 	msr	PRIMASK, r3
}
 8005b3a:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005b3c:	bf00      	nop
 8005b3e:	3724      	adds	r7, #36	; 0x24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	58004000 	.word	0x58004000

08005b4c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b56:	4b28      	ldr	r3, [pc, #160]	; (8005bf8 <HAL_FLASHEx_Erase+0xac>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_FLASHEx_Erase+0x16>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e046      	b.n	8005bf0 <HAL_FLASHEx_Erase+0xa4>
 8005b62:	4b25      	ldr	r3, [pc, #148]	; (8005bf8 <HAL_FLASHEx_Erase+0xac>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <HAL_FLASHEx_Erase+0xac>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b72:	f7ff ff25 	bl	80059c0 <FLASH_WaitForLastOperation>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d133      	bne.n	8005be8 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d108      	bne.n	8005b9a <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005b88:	f000 f838 	bl	8005bfc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005b8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b90:	f7ff ff16 	bl	80059c0 <FLASH_WaitForLastOperation>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	e024      	b.n	8005be4 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	e012      	b.n	8005bd0 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005baa:	68b8      	ldr	r0, [r7, #8]
 8005bac:	f000 f836 	bl	8005c1c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bb4:	f7ff ff04 	bl	80059c0 <FLASH_WaitForLastOperation>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	601a      	str	r2, [r3, #0]
          break;
 8005bc8:	e00a      	b.n	8005be0 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	4413      	add	r3, r2
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d3e4      	bcc.n	8005baa <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005be0:	f000 f878 	bl	8005cd4 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005be4:	f000 f832 	bl	8005c4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <HAL_FLASHEx_Erase+0xac>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]

  return status;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000644 	.word	0x20000644

08005bfc <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <FLASH_MassErase+0x1c>)
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <FLASH_MassErase+0x1c>)
 8005c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0a:	f043 0304 	orr.w	r3, r3, #4
 8005c0e:	6153      	str	r3, [r2, #20]
#endif
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr
 8005c18:	58004000 	.word	0x58004000

08005c1c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <FLASH_PageErase+0x2c>)
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4313      	orrs	r3, r2
 8005c32:	4a05      	ldr	r2, [pc, #20]	; (8005c48 <FLASH_PageErase+0x2c>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	f043 0302 	orr.w	r3, r3, #2
 8005c3c:	6153      	str	r3, [r2, #20]
#endif
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	58004000 	.word	0x58004000

08005c4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005c50:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d117      	bne.n	8005c8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c5c:	4b1c      	ldr	r3, [pc, #112]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005c68:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a12      	ldr	r2, [pc, #72]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8a:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005c8c:	4b10      	ldr	r3, [pc, #64]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d117      	bne.n	8005cc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ca2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a03      	ldr	r2, [pc, #12]	; (8005cd0 <FLASH_FlushCaches+0x84>)
 8005cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cc6:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr
 8005cd0:	58004000 	.word	0x58004000

08005cd4 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <FLASH_AcknowledgePageErase+0x1c>)
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <FLASH_AcknowledgePageErase+0x1c>)
 8005cde:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005ce2:	f023 0302 	bic.w	r3, r3, #2
 8005ce6:	6153      	str	r3, [r2, #20]
#endif
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr
 8005cf0:	58004000 	.word	0x58004000

08005cf4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d02:	e140      	b.n	8005f86 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	2101      	movs	r1, #1
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d10:	4013      	ands	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8132 	beq.w	8005f80 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d005      	beq.n	8005d34 <HAL_GPIO_Init+0x40>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d130      	bne.n	8005d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	2203      	movs	r2, #3
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	fa02 f303 	lsl.w	r3, r2, r3
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4013      	ands	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	091b      	lsrs	r3, r3, #4
 8005d80:	f003 0201 	and.w	r2, r3, #1
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d017      	beq.n	8005dd2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	2203      	movs	r2, #3
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4013      	ands	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d123      	bne.n	8005e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	08da      	lsrs	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3208      	adds	r2, #8
 8005de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	220f      	movs	r2, #15
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	691a      	ldr	r2, [r3, #16]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	08da      	lsrs	r2, r3, #3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3208      	adds	r2, #8
 8005e20:	6939      	ldr	r1, [r7, #16]
 8005e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	2203      	movs	r2, #3
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43db      	mvns	r3, r3
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 0203 	and.w	r2, r3, #3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 808c 	beq.w	8005f80 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005e68:	4a4e      	ldr	r2, [pc, #312]	; (8005fa4 <HAL_GPIO_Init+0x2b0>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	089b      	lsrs	r3, r3, #2
 8005e6e:	3302      	adds	r3, #2
 8005e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	2207      	movs	r2, #7
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	43db      	mvns	r3, r3
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005e92:	d00d      	beq.n	8005eb0 <HAL_GPIO_Init+0x1bc>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a44      	ldr	r2, [pc, #272]	; (8005fa8 <HAL_GPIO_Init+0x2b4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d007      	beq.n	8005eac <HAL_GPIO_Init+0x1b8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a43      	ldr	r2, [pc, #268]	; (8005fac <HAL_GPIO_Init+0x2b8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <HAL_GPIO_Init+0x1b4>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e004      	b.n	8005eb2 <HAL_GPIO_Init+0x1be>
 8005ea8:	2307      	movs	r3, #7
 8005eaa:	e002      	b.n	8005eb2 <HAL_GPIO_Init+0x1be>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <HAL_GPIO_Init+0x1be>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	f002 0203 	and.w	r2, r2, #3
 8005eb8:	0092      	lsls	r2, r2, #2
 8005eba:	4093      	lsls	r3, r2
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ec2:	4938      	ldr	r1, [pc, #224]	; (8005fa4 <HAL_GPIO_Init+0x2b0>)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	3302      	adds	r3, #2
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ed0:	4b37      	ldr	r3, [pc, #220]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005efa:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f1e:	4a24      	ldr	r2, [pc, #144]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005f24:	4b22      	ldr	r3, [pc, #136]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f2a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4013      	ands	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005f4a:	4a19      	ldr	r2, [pc, #100]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f58:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4013      	ands	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005f78:	4a0d      	ldr	r2, [pc, #52]	; (8005fb0 <HAL_GPIO_Init+0x2bc>)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f aeb7 	bne.w	8005d04 <HAL_GPIO_Init+0x10>
  }
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	40010000 	.word	0x40010000
 8005fa8:	48000400 	.word	0x48000400
 8005fac:	48000800 	.word	0x48000800
 8005fb0:	58000800 	.word	0x58000800

08005fb4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005fc2:	e0af      	b.n	8006124 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80a2 	beq.w	800611e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005fda:	4a59      	ldr	r2, [pc, #356]	; (8006140 <HAL_GPIO_DeInit+0x18c>)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	2207      	movs	r2, #7
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006002:	d00d      	beq.n	8006020 <HAL_GPIO_DeInit+0x6c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a4f      	ldr	r2, [pc, #316]	; (8006144 <HAL_GPIO_DeInit+0x190>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d007      	beq.n	800601c <HAL_GPIO_DeInit+0x68>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a4e      	ldr	r2, [pc, #312]	; (8006148 <HAL_GPIO_DeInit+0x194>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d101      	bne.n	8006018 <HAL_GPIO_DeInit+0x64>
 8006014:	2302      	movs	r3, #2
 8006016:	e004      	b.n	8006022 <HAL_GPIO_DeInit+0x6e>
 8006018:	2307      	movs	r3, #7
 800601a:	e002      	b.n	8006022 <HAL_GPIO_DeInit+0x6e>
 800601c:	2301      	movs	r3, #1
 800601e:	e000      	b.n	8006022 <HAL_GPIO_DeInit+0x6e>
 8006020:	2300      	movs	r3, #0
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	f002 0203 	and.w	r2, r2, #3
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	4093      	lsls	r3, r2
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	429a      	cmp	r2, r3
 8006030:	d136      	bne.n	80060a0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006032:	4b46      	ldr	r3, [pc, #280]	; (800614c <HAL_GPIO_DeInit+0x198>)
 8006034:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	43db      	mvns	r3, r3
 800603c:	4943      	ldr	r1, [pc, #268]	; (800614c <HAL_GPIO_DeInit+0x198>)
 800603e:	4013      	ands	r3, r2
 8006040:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006044:	4b41      	ldr	r3, [pc, #260]	; (800614c <HAL_GPIO_DeInit+0x198>)
 8006046:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	43db      	mvns	r3, r3
 800604e:	493f      	ldr	r1, [pc, #252]	; (800614c <HAL_GPIO_DeInit+0x198>)
 8006050:	4013      	ands	r3, r2
 8006052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006056:	4b3d      	ldr	r3, [pc, #244]	; (800614c <HAL_GPIO_DeInit+0x198>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	43db      	mvns	r3, r3
 800605e:	493b      	ldr	r1, [pc, #236]	; (800614c <HAL_GPIO_DeInit+0x198>)
 8006060:	4013      	ands	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006064:	4b39      	ldr	r3, [pc, #228]	; (800614c <HAL_GPIO_DeInit+0x198>)
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	43db      	mvns	r3, r3
 800606c:	4937      	ldr	r1, [pc, #220]	; (800614c <HAL_GPIO_DeInit+0x198>)
 800606e:	4013      	ands	r3, r2
 8006070:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	2207      	movs	r2, #7
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006082:	4a2f      	ldr	r2, [pc, #188]	; (8006140 <HAL_GPIO_DeInit+0x18c>)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	3302      	adds	r3, #2
 800608a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	43da      	mvns	r2, r3
 8006092:	482b      	ldr	r0, [pc, #172]	; (8006140 <HAL_GPIO_DeInit+0x18c>)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	400a      	ands	r2, r1
 800609a:	3302      	adds	r3, #2
 800609c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	2103      	movs	r1, #3
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	08da      	lsrs	r2, r3, #3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3208      	adds	r2, #8
 80060bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	220f      	movs	r2, #15
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	08d2      	lsrs	r2, r2, #3
 80060d4:	4019      	ands	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	3208      	adds	r2, #8
 80060da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	2103      	movs	r1, #3
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	401a      	ands	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	2101      	movs	r1, #1
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006100:	43db      	mvns	r3, r3
 8006102:	401a      	ands	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	2103      	movs	r1, #3
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	43db      	mvns	r3, r3
 8006118:	401a      	ands	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	3301      	adds	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af49 	bne.w	8005fc4 <HAL_GPIO_DeInit+0x10>
  }
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	48000400 	.word	0x48000400
 8006148:	48000800 	.word	0x48000800
 800614c:	58000800 	.word	0x58000800

08006150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
 800615c:	4613      	mov	r3, r2
 800615e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006160:	787b      	ldrb	r3, [r7, #1]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006166:	887a      	ldrh	r2, [r7, #2]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800616c:	e002      	b.n	8006174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800616e:	887a      	ldrh	r2, [r7, #2]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr

0800617e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006190:	887a      	ldrh	r2, [r7, #2]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4013      	ands	r3, r2
 8006196:	041a      	lsls	r2, r3, #16
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	43d9      	mvns	r1, r3
 800619c:	887b      	ldrh	r3, [r7, #2]
 800619e:	400b      	ands	r3, r1
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	619a      	str	r2, [r3, #24]
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e081      	b.n	80062c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fb fe34 	bl	8001e44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2224      	movs	r2, #36	; 0x24
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006200:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006210:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d107      	bne.n	800622a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006226:	609a      	str	r2, [r3, #8]
 8006228:	e006      	b.n	8006238 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006236:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b02      	cmp	r3, #2
 800623e:	d104      	bne.n	800624a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006248:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800625c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800626c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	69d9      	ldr	r1, [r3, #28]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	607a      	str	r2, [r7, #4]
 80062da:	461a      	mov	r2, r3
 80062dc:	460b      	mov	r3, r1
 80062de:	817b      	strh	r3, [r7, #10]
 80062e0:	4613      	mov	r3, r2
 80062e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	f040 80da 	bne.w	80064a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_I2C_Master_Transmit+0x30>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e0d3      	b.n	80064a8 <HAL_I2C_Master_Transmit+0x1d8>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006308:	f7fc fc92 	bl	8002c30 <HAL_GetTick>
 800630c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	2319      	movs	r3, #25
 8006314:	2201      	movs	r2, #1
 8006316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 f9e5 	bl	80066ea <I2C_WaitOnFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0be      	b.n	80064a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2221      	movs	r2, #33	; 0x21
 800632e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2210      	movs	r2, #16
 8006336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	893a      	ldrh	r2, [r7, #8]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d90e      	bls.n	800637a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	22ff      	movs	r2, #255	; 0xff
 8006360:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006366:	b2da      	uxtb	r2, r3
 8006368:	8979      	ldrh	r1, [r7, #10]
 800636a:	4b51      	ldr	r3, [pc, #324]	; (80064b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fbd0 	bl	8006b18 <I2C_TransferConfig>
 8006378:	e06c      	b.n	8006454 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006388:	b2da      	uxtb	r2, r3
 800638a:	8979      	ldrh	r1, [r7, #10]
 800638c:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fbbf 	bl	8006b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800639a:	e05b      	b.n	8006454 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	6a39      	ldr	r1, [r7, #32]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f9e2 	bl	800676a <I2C_WaitOnTXISFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e07b      	b.n	80064a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	781a      	ldrb	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d034      	beq.n	8006454 <HAL_I2C_Master_Transmit+0x184>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d130      	bne.n	8006454 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f974 	bl	80066ea <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e04d      	b.n	80064a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006410:	b29b      	uxth	r3, r3
 8006412:	2bff      	cmp	r3, #255	; 0xff
 8006414:	d90e      	bls.n	8006434 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	22ff      	movs	r2, #255	; 0xff
 800641a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006420:	b2da      	uxtb	r2, r3
 8006422:	8979      	ldrh	r1, [r7, #10]
 8006424:	2300      	movs	r3, #0
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fb73 	bl	8006b18 <I2C_TransferConfig>
 8006432:	e00f      	b.n	8006454 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006442:	b2da      	uxtb	r2, r3
 8006444:	8979      	ldrh	r1, [r7, #10]
 8006446:	2300      	movs	r3, #0
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fb62 	bl	8006b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d19e      	bne.n	800639c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	6a39      	ldr	r1, [r7, #32]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f9c1 	bl	80067ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e01a      	b.n	80064a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2220      	movs	r2, #32
 8006478:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6859      	ldr	r1, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006486:	400b      	ands	r3, r1
 8006488:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e000      	b.n	80064a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80064a6:	2302      	movs	r3, #2
  }
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	80002000 	.word	0x80002000
 80064b4:	fe00e800 	.word	0xfe00e800

080064b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af02      	add	r7, sp, #8
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	461a      	mov	r2, r3
 80064c4:	460b      	mov	r3, r1
 80064c6:	817b      	strh	r3, [r7, #10]
 80064c8:	4613      	mov	r3, r2
 80064ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	f040 80db 	bne.w	8006690 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_I2C_Master_Receive+0x30>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e0d4      	b.n	8006692 <HAL_I2C_Master_Receive+0x1da>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064f0:	f7fc fb9e 	bl	8002c30 <HAL_GetTick>
 80064f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	2319      	movs	r3, #25
 80064fc:	2201      	movs	r2, #1
 80064fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f8f1 	bl	80066ea <I2C_WaitOnFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0bf      	b.n	8006692 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2222      	movs	r2, #34	; 0x22
 8006516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2210      	movs	r2, #16
 800651e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	893a      	ldrh	r2, [r7, #8]
 8006532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	2bff      	cmp	r3, #255	; 0xff
 8006542:	d90e      	bls.n	8006562 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	22ff      	movs	r2, #255	; 0xff
 8006548:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654e:	b2da      	uxtb	r2, r3
 8006550:	8979      	ldrh	r1, [r7, #10]
 8006552:	4b52      	ldr	r3, [pc, #328]	; (800669c <HAL_I2C_Master_Receive+0x1e4>)
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fadc 	bl	8006b18 <I2C_TransferConfig>
 8006560:	e06d      	b.n	800663e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	b2da      	uxtb	r2, r3
 8006572:	8979      	ldrh	r1, [r7, #10]
 8006574:	4b49      	ldr	r3, [pc, #292]	; (800669c <HAL_I2C_Master_Receive+0x1e4>)
 8006576:	9300      	str	r3, [sp, #0]
 8006578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 facb 	bl	8006b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006582:	e05c      	b.n	800663e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	6a39      	ldr	r1, [r7, #32]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f96b 	bl	8006864 <I2C_WaitOnRXNEFlagUntilTimeout>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e07c      	b.n	8006692 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d034      	beq.n	800663e <HAL_I2C_Master_Receive+0x186>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d130      	bne.n	800663e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2200      	movs	r2, #0
 80065e4:	2180      	movs	r1, #128	; 0x80
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f87f 	bl	80066ea <I2C_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e04d      	b.n	8006692 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2bff      	cmp	r3, #255	; 0xff
 80065fe:	d90e      	bls.n	800661e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	22ff      	movs	r2, #255	; 0xff
 8006604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	b2da      	uxtb	r2, r3
 800660c:	8979      	ldrh	r1, [r7, #10]
 800660e:	2300      	movs	r3, #0
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fa7e 	bl	8006b18 <I2C_TransferConfig>
 800661c:	e00f      	b.n	800663e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	b2da      	uxtb	r2, r3
 800662e:	8979      	ldrh	r1, [r7, #10]
 8006630:	2300      	movs	r3, #0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fa6d 	bl	8006b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d19d      	bne.n	8006584 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	6a39      	ldr	r1, [r7, #32]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f8cc 	bl	80067ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e01a      	b.n	8006692 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2220      	movs	r2, #32
 8006662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6859      	ldr	r1, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <HAL_I2C_Master_Receive+0x1e8>)
 8006670:	400b      	ands	r3, r1
 8006672:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	80002400 	.word	0x80002400
 80066a0:	fe00e800 	.word	0xfe00e800

080066a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d007      	beq.n	80066e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	619a      	str	r2, [r3, #24]
  }
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bc80      	pop	{r7}
 80066e8:	4770      	bx	lr

080066ea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066fa:	e022      	b.n	8006742 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d01e      	beq.n	8006742 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006704:	f7fc fa94 	bl	8002c30 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d302      	bcc.n	800671a <I2C_WaitOnFlagUntilTimeout+0x30>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d113      	bne.n	8006742 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e00f      	b.n	8006762 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4013      	ands	r3, r2
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	bf0c      	ite	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	2300      	movne	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	461a      	mov	r2, r3
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	429a      	cmp	r2, r3
 800675e:	d0cd      	beq.n	80066fc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006776:	e02c      	b.n	80067d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 f8eb 	bl	8006958 <I2C_IsErrorOccurred>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e02a      	b.n	80067e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006792:	d01e      	beq.n	80067d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006794:	f7fc fa4c 	bl	8002c30 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d302      	bcc.n	80067aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d113      	bne.n	80067d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f043 0220 	orr.w	r2, r3, #32
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e007      	b.n	80067e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d1cb      	bne.n	8006778 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067f6:	e028      	b.n	800684a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f8ab 	bl	8006958 <I2C_IsErrorOccurred>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e026      	b.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680c:	f7fc fa10 	bl	8002c30 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	d302      	bcc.n	8006822 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d113      	bne.n	800684a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f043 0220 	orr.w	r2, r3, #32
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e007      	b.n	800685a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b20      	cmp	r3, #32
 8006856:	d1cf      	bne.n	80067f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006870:	e064      	b.n	800693c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f86e 	bl	8006958 <I2C_IsErrorOccurred>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e062      	b.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b20      	cmp	r3, #32
 8006892:	d138      	bne.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d105      	bne.n	80068ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e04e      	b.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b10      	cmp	r3, #16
 80068ba:	d107      	bne.n	80068cc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2210      	movs	r2, #16
 80068c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2204      	movs	r2, #4
 80068c8:	645a      	str	r2, [r3, #68]	; 0x44
 80068ca:	e002      	b.n	80068d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2220      	movs	r2, #32
 80068d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6859      	ldr	r1, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b1b      	ldr	r3, [pc, #108]	; (8006954 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80068e6:	400b      	ands	r3, r1
 80068e8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e022      	b.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006906:	f7fc f993 	bl	8002c30 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	429a      	cmp	r2, r3
 8006914:	d302      	bcc.n	800691c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10f      	bne.n	800693c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006920:	f043 0220 	orr.w	r2, r3, #32
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e007      	b.n	800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f003 0304 	and.w	r3, r3, #4
 8006946:	2b04      	cmp	r3, #4
 8006948:	d193      	bne.n	8006872 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	fe00e800 	.word	0xfe00e800

08006958 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d068      	beq.n	8006a56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2210      	movs	r2, #16
 800698a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800698c:	e049      	b.n	8006a22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d045      	beq.n	8006a22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fc f94b 	bl	8002c30 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_IsErrorOccurred+0x54>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d13a      	bne.n	8006a22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ce:	d121      	bne.n	8006a14 <I2C_IsErrorOccurred+0xbc>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d01d      	beq.n	8006a14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d01a      	beq.n	8006a14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ee:	f7fc f91f 	bl	8002c30 <HAL_GetTick>
 80069f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f4:	e00e      	b.n	8006a14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069f6:	f7fc f91b 	bl	8002c30 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b19      	cmp	r3, #25
 8006a02:	d907      	bls.n	8006a14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f043 0320 	orr.w	r3, r3, #32
 8006a0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006a12:	e006      	b.n	8006a22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d1e9      	bne.n	80069f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d003      	beq.n	8006a38 <I2C_IsErrorOccurred+0xe0>
 8006a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0aa      	beq.n	800698e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2220      	movs	r2, #32
 8006a46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f043 0308 	orr.w	r3, r3, #8
 8006a90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006abc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01c      	beq.n	8006b06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fde9 	bl	80066a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <I2C_IsErrorOccurred+0x1bc>)
 8006ade:	400b      	ands	r3, r1
 8006ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	fe00e800 	.word	0xfe00e800

08006b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	817b      	strh	r3, [r7, #10]
 8006b26:	4613      	mov	r3, r2
 8006b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b2a:	897b      	ldrh	r3, [r7, #10]
 8006b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b30:	7a7b      	ldrb	r3, [r7, #9]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	0d5b      	lsrs	r3, r3, #21
 8006b52:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b56:	4b07      	ldr	r3, [pc, #28]	; (8006b74 <I2C_TransferConfig+0x5c>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	ea02 0103 	and.w	r1, r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	03ff63ff 	.word	0x03ff63ff

08006b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d138      	bne.n	8006c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e032      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2224      	movs	r2, #36	; 0x24
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6819      	ldr	r1, [r3, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0201 	orr.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e000      	b.n	8006c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d139      	bne.n	8006c96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e033      	b.n	8006c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	e000      	b.n	8006c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c96:	2302      	movs	r3, #2
  }
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <HAL_PWR_EnableBkUpAccess+0x18>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a03      	ldr	r2, [pc, #12]	; (8006cbc <HAL_PWR_EnableBkUpAccess+0x18>)
 8006cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cb2:	6013      	str	r3, [r2, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	58000400 	.word	0x58000400

08006cc0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10c      	bne.n	8006cec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006cd2:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cde:	d10d      	bne.n	8006cfc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006ce0:	f000 f83c 	bl	8006d5c <HAL_PWREx_DisableLowPowerRunMode>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d008      	beq.n	8006cfc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8006cea:	e015      	b.n	8006d18 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006cf8:	f000 f822 	bl	8006d40 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	4a08      	ldr	r2, [pc, #32]	; (8006d24 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006d02:	f023 0304 	bic.w	r3, r3, #4
 8006d06:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006d0e:	bf30      	wfi
 8006d10:	e002      	b.n	8006d18 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006d12:	bf40      	sev
    __WFE();
 8006d14:	bf20      	wfe
    __WFE();
 8006d16:	bf20      	wfe
  }
}
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	58000400 	.word	0x58000400
 8006d24:	e000ed00 	.word	0xe000ed00

08006d28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <HAL_PWREx_GetVoltageRange+0x14>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	58000400 	.word	0x58000400

08006d40 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a03      	ldr	r2, [pc, #12]	; (8006d58 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d4e:	6013      	str	r3, [r2, #0]
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	58000400 	.word	0x58000400

08006d5c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006d62:	4b16      	ldr	r3, [pc, #88]	; (8006dbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a15      	ldr	r2, [pc, #84]	; (8006dbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d6c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2232      	movs	r2, #50	; 0x32
 8006d74:	fb02 f303 	mul.w	r3, r2, r3
 8006d78:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7e:	0c9b      	lsrs	r3, r3, #18
 8006d80:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006d82:	e002      	b.n	8006d8a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006d8a:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d96:	d102      	bne.n	8006d9e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f2      	bne.n	8006d84 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006daa:	d101      	bne.n	8006db0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e000      	b.n	8006db2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bc80      	pop	{r7}
 8006dba:	4770      	bx	lr
 8006dbc:	58000400 	.word	0x58000400
 8006dc0:	2000000c 	.word	0x2000000c
 8006dc4:	431bde83 	.word	0x431bde83

08006dc8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006dd2:	4b10      	ldr	r3, [pc, #64]	; (8006e14 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	4a0e      	ldr	r2, [pc, #56]	; (8006e14 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8006ddc:	f043 0302 	orr.w	r3, r3, #2
 8006de0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006de2:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006de8:	f043 0304 	orr.w	r3, r3, #4
 8006dec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006df4:	bf30      	wfi
 8006df6:	e002      	b.n	8006dfe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006df8:	bf40      	sev
    __WFE();
 8006dfa:	bf20      	wfe
    __WFE();
 8006dfc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006dfe:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	4a05      	ldr	r2, [pc, #20]	; (8006e18 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006e04:	f023 0304 	bic.w	r3, r3, #4
 8006e08:	6113      	str	r3, [r2, #16]
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr
 8006e14:	58000400 	.word	0x58000400
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <LL_PWR_IsEnabledBkUpAccess>:
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2c:	d101      	bne.n	8006e32 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr
 8006e3c:	58000400 	.word	0x58000400

08006e40 <LL_RCC_HSE_EnableTcxo>:
{
 8006e40:	b480      	push	{r7}
 8006e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e52:	6013      	str	r3, [r2, #0]
}
 8006e54:	bf00      	nop
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <LL_RCC_HSE_DisableTcxo>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e8a:	d101      	bne.n	8006e90 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <LL_RCC_HSE_Enable>:
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eac:	6013      	str	r3, [r2, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr

08006eb6 <LL_RCC_HSE_Disable>:
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <LL_RCC_HSE_IsReady>:
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee4:	d101      	bne.n	8006eea <LL_RCC_HSE_IsReady+0x18>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <LL_RCC_HSE_IsReady+0x1a>
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <LL_RCC_HSI_Enable>:
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <LL_RCC_HSI_Disable>:
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <LL_RCC_HSI_IsReady>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3e:	d101      	bne.n	8006f44 <LL_RCC_HSI_IsReady+0x18>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <LL_RCC_HSI_IsReady+0x1a>
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr

08006f4e <LL_RCC_HSI_SetCalibTrimming>:
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	061b      	lsls	r3, r3, #24
 8006f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	604b      	str	r3, [r1, #4]
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <LL_RCC_LSE_IsReady>:
{
 8006f76:	b480      	push	{r7}
 8006f78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d101      	bne.n	8006f8e <LL_RCC_LSE_IsReady+0x18>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <LL_RCC_LSE_IsReady+0x1a>
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <LL_RCC_LSI_Enable>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <LL_RCC_LSI_Disable>:
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006fd0:	bf00      	nop
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bc80      	pop	{r7}
 8006fd6:	4770      	bx	lr

08006fd8 <LL_RCC_LSI_IsReady>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d101      	bne.n	8006ff0 <LL_RCC_LSI_IsReady+0x18>
 8006fec:	2301      	movs	r3, #1
 8006fee:	e000      	b.n	8006ff2 <LL_RCC_LSI_IsReady+0x1a>
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <LL_RCC_MSI_Enable>:
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	6013      	str	r3, [r2, #0]
}
 800700e:	bf00      	nop
 8007010:	46bd      	mov	sp, r7
 8007012:	bc80      	pop	{r7}
 8007014:	4770      	bx	lr

08007016 <LL_RCC_MSI_Disable>:
{
 8007016:	b480      	push	{r7}
 8007018:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800701a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007024:	f023 0301 	bic.w	r3, r3, #1
 8007028:	6013      	str	r3, [r2, #0]
}
 800702a:	bf00      	nop
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr

08007032 <LL_RCC_MSI_IsReady>:
{
 8007032:	b480      	push	{r7}
 8007034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d101      	bne.n	8007048 <LL_RCC_MSI_IsReady+0x16>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <LL_RCC_MSI_IsReady+0x18>
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr

08007052 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007052:	b480      	push	{r7}
 8007054:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b08      	cmp	r3, #8
 8007062:	d101      	bne.n	8007068 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007064:	2301      	movs	r3, #1
 8007066:	e000      	b.n	800706a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr

08007072 <LL_RCC_MSI_GetRange>:
{
 8007072:	b480      	push	{r7}
 8007074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800708c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007094:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007098:	4618      	mov	r0, r3
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80070a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ba:	4313      	orrs	r3, r2
 80070bc:	604b      	str	r3, [r1, #4]
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <LL_RCC_SetSysClkSource>:
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80070d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f023 0203 	bic.w	r2, r3, #3
 80070da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	608b      	str	r3, [r1, #8]
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr

080070ee <LL_RCC_GetSysClkSource>:
{
 80070ee:	b480      	push	{r7}
 80070f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80070f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 030c 	and.w	r3, r3, #12
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr

08007104 <LL_RCC_SetAHBPrescaler>:
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800710c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4313      	orrs	r3, r2
 800711e:	608b      	str	r3, [r1, #8]
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <LL_RCC_SetAHB3Prescaler>:
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007136:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800713a:	f023 020f 	bic.w	r2, r3, #15
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	bc80      	pop	{r7}
 8007154:	4770      	bx	lr

08007156 <LL_RCC_SetAPB1Prescaler>:
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800715e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	bc80      	pop	{r7}
 800717a:	4770      	bx	lr

0800717c <LL_RCC_SetAPB2Prescaler>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800718e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4313      	orrs	r3, r2
 8007196:	608b      	str	r3, [r1, #8]
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr

080071a2 <LL_RCC_GetAHBPrescaler>:
{
 80071a2:	b480      	push	{r7}
 80071a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80071a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr

080071b8 <LL_RCC_GetAHB3Prescaler>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr

080071d2 <LL_RCC_GetAPB1Prescaler>:
{
 80071d2:	b480      	push	{r7}
 80071d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80071d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <LL_RCC_GetAPB2Prescaler>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80071ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80071fe:	b480      	push	{r7}
 8007200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800720c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007210:	6013      	str	r3, [r2, #0]
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800721e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800722c:	6013      	str	r3, [r2, #0]
}
 800722e:	bf00      	nop
 8007230:	46bd      	mov	sp, r7
 8007232:	bc80      	pop	{r7}
 8007234:	4770      	bx	lr

08007236 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007236:	b480      	push	{r7}
 8007238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800723a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007248:	d101      	bne.n	800724e <LL_RCC_PLL_IsReady+0x18>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <LL_RCC_PLL_IsReady+0x1a>
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr

08007258 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800725c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007268:	4618      	mov	r0, r3
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800727e:	4618      	mov	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	bc80      	pop	{r7}
 8007284:	4770      	bx	lr

08007286 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007286:	b480      	push	{r7}
 8007288:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800728a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007294:	4618      	mov	r0, r3
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80072a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f003 0303 	and.w	r3, r3, #3
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc80      	pop	{r7}
 80072b0:	4770      	bx	lr

080072b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80072b2:	b480      	push	{r7}
 80072b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80072b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c4:	d101      	bne.n	80072ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80072d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80072e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e8:	d101      	bne.n	80072ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80072fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800730a:	d101      	bne.n	8007310 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	bc80      	pop	{r7}
 8007318:	4770      	bx	lr

0800731a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800731a:	b480      	push	{r7}
 800731c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800731e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800732c:	d101      	bne.n	8007332 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b088      	sub	sp, #32
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e36f      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800734e:	f7ff fece 	bl	80070ee <LL_RCC_GetSysClkSource>
 8007352:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007354:	f7ff ffa2 	bl	800729c <LL_RCC_PLL_GetMainSource>
 8007358:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0320 	and.w	r3, r3, #32
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 80c4 	beq.w	80074f0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d005      	beq.n	800737a <HAL_RCC_OscConfig+0x3e>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	2b0c      	cmp	r3, #12
 8007372:	d176      	bne.n	8007462 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d173      	bne.n	8007462 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e353      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800738a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_OscConfig+0x68>
 8007398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073a2:	e006      	b.n	80073b2 <HAL_RCC_OscConfig+0x76>
 80073a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ac:	091b      	lsrs	r3, r3, #4
 80073ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d222      	bcs.n	80073fc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fd3c 	bl	8007e38 <RCC_SetFlashLatencyFromMSIRange>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e331      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d4:	f043 0308 	orr.w	r3, r3, #8
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fe53 	bl	80070a0 <LL_RCC_MSI_SetCalibTrimming>
 80073fa:	e021      	b.n	8007440 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80073fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007406:	f043 0308 	orr.w	r3, r3, #8
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800741e:	4313      	orrs	r3, r2
 8007420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff fe3a 	bl	80070a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fd01 	bl	8007e38 <RCC_SetFlashLatencyFromMSIRange>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e2f6      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007440:	f000 fcc2 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007444:	4603      	mov	r3, r0
 8007446:	4aa7      	ldr	r2, [pc, #668]	; (80076e4 <HAL_RCC_OscConfig+0x3a8>)
 8007448:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800744a:	4ba7      	ldr	r3, [pc, #668]	; (80076e8 <HAL_RCC_OscConfig+0x3ac>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4618      	mov	r0, r3
 8007450:	f7fb fbe4 	bl	8002c1c <HAL_InitTick>
 8007454:	4603      	mov	r3, r0
 8007456:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007458:	7cfb      	ldrb	r3, [r7, #19]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d047      	beq.n	80074ee <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	e2e5      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d02c      	beq.n	80074c4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800746a:	f7ff fdc6 	bl	8006ffa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800746e:	f7fb fbdf 	bl	8002c30 <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007474:	e008      	b.n	8007488 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007476:	f7fb fbdb 	bl	8002c30 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e2d2      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007488:	f7ff fdd3 	bl	8007032 <LL_RCC_MSI_IsReady>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d0f1      	beq.n	8007476 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800749c:	f043 0308 	orr.w	r3, r3, #8
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074b4:	4313      	orrs	r3, r2
 80074b6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	4618      	mov	r0, r3
 80074be:	f7ff fdef 	bl	80070a0 <LL_RCC_MSI_SetCalibTrimming>
 80074c2:	e015      	b.n	80074f0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80074c4:	f7ff fda7 	bl	8007016 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80074c8:	f7fb fbb2 	bl	8002c30 <HAL_GetTick>
 80074cc:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80074d0:	f7fb fbae 	bl	8002c30 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e2a5      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80074e2:	f7ff fda6 	bl	8007032 <LL_RCC_MSI_IsReady>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f1      	bne.n	80074d0 <HAL_RCC_OscConfig+0x194>
 80074ec:	e000      	b.n	80074f0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80074ee:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d058      	beq.n	80075ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d005      	beq.n	800750e <HAL_RCC_OscConfig+0x1d2>
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2b0c      	cmp	r3, #12
 8007506:	d108      	bne.n	800751a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d105      	bne.n	800751a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d14b      	bne.n	80075ae <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e289      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800752c:	4313      	orrs	r3, r2
 800752e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007538:	d102      	bne.n	8007540 <HAL_RCC_OscConfig+0x204>
 800753a:	f7ff fcae 	bl	8006e9a <LL_RCC_HSE_Enable>
 800753e:	e00d      	b.n	800755c <HAL_RCC_OscConfig+0x220>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007548:	d104      	bne.n	8007554 <HAL_RCC_OscConfig+0x218>
 800754a:	f7ff fc79 	bl	8006e40 <LL_RCC_HSE_EnableTcxo>
 800754e:	f7ff fca4 	bl	8006e9a <LL_RCC_HSE_Enable>
 8007552:	e003      	b.n	800755c <HAL_RCC_OscConfig+0x220>
 8007554:	f7ff fcaf 	bl	8006eb6 <LL_RCC_HSE_Disable>
 8007558:	f7ff fc80 	bl	8006e5c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d012      	beq.n	800758a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fb fb64 	bl	8002c30 <HAL_GetTick>
 8007568:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800756c:	f7fb fb60 	bl	8002c30 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b64      	cmp	r3, #100	; 0x64
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e257      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800757e:	f7ff fca8 	bl	8006ed2 <LL_RCC_HSE_IsReady>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d0f1      	beq.n	800756c <HAL_RCC_OscConfig+0x230>
 8007588:	e011      	b.n	80075ae <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758a:	f7fb fb51 	bl	8002c30 <HAL_GetTick>
 800758e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007590:	e008      	b.n	80075a4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007592:	f7fb fb4d 	bl	8002c30 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b64      	cmp	r3, #100	; 0x64
 800759e:	d901      	bls.n	80075a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e244      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80075a4:	f7ff fc95 	bl	8006ed2 <LL_RCC_HSE_IsReady>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f1      	bne.n	8007592 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0302 	and.w	r3, r3, #2
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d046      	beq.n	8007648 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d005      	beq.n	80075cc <HAL_RCC_OscConfig+0x290>
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	2b0c      	cmp	r3, #12
 80075c4:	d10e      	bne.n	80075e4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d10b      	bne.n	80075e4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e22a      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff fcb6 	bl	8006f4e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80075e2:	e031      	b.n	8007648 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d019      	beq.n	8007620 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075ec:	f7ff fc82 	bl	8006ef4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f0:	f7fb fb1e 	bl	8002c30 <HAL_GetTick>
 80075f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075f8:	f7fb fb1a 	bl	8002c30 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e211      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800760a:	f7ff fc8f 	bl	8006f2c <LL_RCC_HSI_IsReady>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f1      	beq.n	80075f8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff fc98 	bl	8006f4e <LL_RCC_HSI_SetCalibTrimming>
 800761e:	e013      	b.n	8007648 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007620:	f7ff fc76 	bl	8006f10 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fb fb04 	bl	8002c30 <HAL_GetTick>
 8007628:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800762c:	f7fb fb00 	bl	8002c30 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e1f7      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800763e:	f7ff fc75 	bl	8006f2c <LL_RCC_HSI_IsReady>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f1      	bne.n	800762c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	2b00      	cmp	r3, #0
 8007652:	d06e      	beq.n	8007732 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d056      	beq.n	800770a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800765c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007664:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	69da      	ldr	r2, [r3, #28]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	429a      	cmp	r2, r3
 8007672:	d031      	beq.n	80076d8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d006      	beq.n	800768c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e1d0      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d013      	beq.n	80076be <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007696:	f7ff fc8f 	bl	8006fb8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800769a:	f7fb fac9 	bl	8002c30 <HAL_GetTick>
 800769e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80076a0:	e008      	b.n	80076b4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076a2:	f7fb fac5 	bl	8002c30 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b11      	cmp	r3, #17
 80076ae:	d901      	bls.n	80076b4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e1bc      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80076b4:	f7ff fc90 	bl	8006fd8 <LL_RCC_LSI_IsReady>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f1      	bne.n	80076a2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80076be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c6:	f023 0210 	bic.w	r2, r3, #16
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076d8:	f7ff fc5e 	bl	8006f98 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076dc:	f7fb faa8 	bl	8002c30 <HAL_GetTick>
 80076e0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80076e2:	e00c      	b.n	80076fe <HAL_RCC_OscConfig+0x3c2>
 80076e4:	2000000c 	.word	0x2000000c
 80076e8:	20000014 	.word	0x20000014
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076ec:	f7fb faa0 	bl	8002c30 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b11      	cmp	r3, #17
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e197      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80076fe:	f7ff fc6b 	bl	8006fd8 <LL_RCC_LSI_IsReady>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0f1      	beq.n	80076ec <HAL_RCC_OscConfig+0x3b0>
 8007708:	e013      	b.n	8007732 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800770a:	f7ff fc55 	bl	8006fb8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800770e:	f7fb fa8f 	bl	8002c30 <HAL_GetTick>
 8007712:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7fb fa8b 	bl	8002c30 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b11      	cmp	r3, #17
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e182      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007728:	f7ff fc56 	bl	8006fd8 <LL_RCC_LSI_IsReady>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f1      	bne.n	8007716 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0304 	and.w	r3, r3, #4
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80d8 	beq.w	80078f0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007740:	f7ff fb6c 	bl	8006e1c <LL_PWR_IsEnabledBkUpAccess>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d113      	bne.n	8007772 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800774a:	f7ff faab 	bl	8006ca4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800774e:	f7fb fa6f 	bl	8002c30 <HAL_GetTick>
 8007752:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007754:	e008      	b.n	8007768 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007756:	f7fb fa6b 	bl	8002c30 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e162      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007768:	f7ff fb58 	bl	8006e1c <LL_PWR_IsEnabledBkUpAccess>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0f1      	beq.n	8007756 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d07b      	beq.n	8007872 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b85      	cmp	r3, #133	; 0x85
 8007780:	d003      	beq.n	800778a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b05      	cmp	r3, #5
 8007788:	d109      	bne.n	800779e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800778a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007796:	f043 0304 	orr.w	r3, r3, #4
 800779a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800779e:	f7fb fa47 	bl	8002c30 <HAL_GetTick>
 80077a2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80077a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077b0:	f043 0301 	orr.w	r3, r3, #1
 80077b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80077b8:	e00a      	b.n	80077d0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ba:	f7fb fa39 	bl	8002c30 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d901      	bls.n	80077d0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e12e      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80077d0:	f7ff fbd1 	bl	8006f76 <LL_RCC_LSE_IsReady>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0ef      	beq.n	80077ba <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b81      	cmp	r3, #129	; 0x81
 80077e0:	d003      	beq.n	80077ea <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2b85      	cmp	r3, #133	; 0x85
 80077e8:	d121      	bne.n	800782e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ea:	f7fb fa21 	bl	8002c30 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80077f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007804:	e00a      	b.n	800781c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007806:	f7fb fa13 	bl	8002c30 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	f241 3288 	movw	r2, #5000	; 0x1388
 8007814:	4293      	cmp	r3, r2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e108      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800781c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0ec      	beq.n	8007806 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800782c:	e060      	b.n	80078f0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800782e:	f7fb f9ff 	bl	8002c30 <HAL_GetTick>
 8007832:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007848:	e00a      	b.n	8007860 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800784a:	f7fb f9f1 	bl	8002c30 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	f241 3288 	movw	r2, #5000	; 0x1388
 8007858:	4293      	cmp	r3, r2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e0e6      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1ec      	bne.n	800784a <HAL_RCC_OscConfig+0x50e>
 8007870:	e03e      	b.n	80078f0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007872:	f7fb f9dd 	bl	8002c30 <HAL_GetTick>
 8007876:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800788c:	e00a      	b.n	80078a4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800788e:	f7fb f9cf 	bl	8002c30 <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	f241 3288 	movw	r2, #5000	; 0x1388
 800789c:	4293      	cmp	r3, r2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e0c4      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1ec      	bne.n	800788e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b4:	f7fb f9bc 	bl	8002c30 <HAL_GetTick>
 80078b8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80078ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078c6:	f023 0301 	bic.w	r3, r3, #1
 80078ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f7fb f9ae 	bl	8002c30 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	; 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e0a3      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80078e6:	f7ff fb46 	bl	8006f76 <LL_RCC_LSE_IsReady>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ef      	bne.n	80078d0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f000 8099 	beq.w	8007a2c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d06c      	beq.n	80079da <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	2b02      	cmp	r3, #2
 8007906:	d14b      	bne.n	80079a0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007908:	f7ff fc87 	bl	800721a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800790c:	f7fb f990 	bl	8002c30 <HAL_GetTick>
 8007910:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007912:	e008      	b.n	8007926 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007914:	f7fb f98c 	bl	8002c30 <HAL_GetTick>
 8007918:	4602      	mov	r2, r0
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	2b0a      	cmp	r3, #10
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e083      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007926:	f7ff fc86 	bl	8007236 <LL_RCC_PLL_IsReady>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f1      	bne.n	8007914 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	4b40      	ldr	r3, [pc, #256]	; (8007a38 <HAL_RCC_OscConfig+0x6fc>)
 8007938:	4013      	ands	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007942:	4311      	orrs	r1, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007948:	0212      	lsls	r2, r2, #8
 800794a:	4311      	orrs	r1, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007950:	4311      	orrs	r1, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007956:	4311      	orrs	r1, r2
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800795c:	430a      	orrs	r2, r1
 800795e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007962:	4313      	orrs	r3, r2
 8007964:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007966:	f7ff fc4a 	bl	80071fe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800796a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007978:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800797a:	f7fb f959 	bl	8002c30 <HAL_GetTick>
 800797e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007982:	f7fb f955 	bl	8002c30 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b0a      	cmp	r3, #10
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e04c      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007994:	f7ff fc4f 	bl	8007236 <LL_RCC_PLL_IsReady>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f1      	beq.n	8007982 <HAL_RCC_OscConfig+0x646>
 800799e:	e045      	b.n	8007a2c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a0:	f7ff fc3b 	bl	800721a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a4:	f7fb f944 	bl	8002c30 <HAL_GetTick>
 80079a8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ac:	f7fb f940 	bl	8002c30 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b0a      	cmp	r3, #10
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e037      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80079be:	f7ff fc3a 	bl	8007236 <LL_RCC_PLL_IsReady>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1f1      	bne.n	80079ac <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80079c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079d2:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <HAL_RCC_OscConfig+0x700>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	60cb      	str	r3, [r1, #12]
 80079d8:	e028      	b.n	8007a2c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e023      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	f003 0203 	and.w	r2, r3, #3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d115      	bne.n	8007a28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d10e      	bne.n	8007a28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	021b      	lsls	r3, r3, #8
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d106      	bne.n	8007a28 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3720      	adds	r7, #32
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	11c1808c 	.word	0x11c1808c
 8007a3c:	eefefffc 	.word	0xeefefffc

08007a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e10f      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a54:	4b89      	ldr	r3, [pc, #548]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d91b      	bls.n	8007a9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a62:	4b86      	ldr	r3, [pc, #536]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f023 0207 	bic.w	r2, r3, #7
 8007a6a:	4984      	ldr	r1, [pc, #528]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a72:	f7fb f8dd 	bl	8002c30 <HAL_GetTick>
 8007a76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a78:	e008      	b.n	8007a8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007a7a:	f7fb f8d9 	bl	8002c30 <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e0f3      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8c:	4b7b      	ldr	r3, [pc, #492]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d1ef      	bne.n	8007a7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d016      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fb2a 	bl	8007104 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ab0:	f7fb f8be 	bl	8002c30 <HAL_GetTick>
 8007ab4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ab8:	f7fb f8ba 	bl	8002c30 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e0d4      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007aca:	f7ff fbf2 	bl	80072b2 <LL_RCC_IsActiveFlag_HPRE>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0f1      	beq.n	8007ab8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d016      	beq.n	8007b0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fb20 	bl	800712a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007aea:	f7fb f8a1 	bl	8002c30 <HAL_GetTick>
 8007aee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007af2:	f7fb f89d 	bl	8002c30 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e0b7      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007b04:	f7ff fbe6 	bl	80072d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f1      	beq.n	8007af2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fb19 	bl	8007156 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b24:	f7fb f884 	bl	8002c30 <HAL_GetTick>
 8007b28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b2c:	f7fb f880 	bl	8002c30 <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e09a      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007b3e:	f7ff fbdb 	bl	80072f8 <LL_RCC_IsActiveFlag_PPRE1>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f1      	beq.n	8007b2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d017      	beq.n	8007b84 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff fb0e 	bl	800717c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007b60:	f7fb f866 	bl	8002c30 <HAL_GetTick>
 8007b64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007b68:	f7fb f862 	bl	8002c30 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e07c      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007b7a:	f7ff fbce 	bl	800731a <LL_RCC_IsActiveFlag_PPRE2>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f1      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d043      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d106      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007b98:	f7ff f99b 	bl	8006ed2 <LL_RCC_HSE_IsReady>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d11e      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e066      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d106      	bne.n	8007bbc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007bae:	f7ff fb42 	bl	8007236 <LL_RCC_PLL_IsReady>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d113      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e05b      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d106      	bne.n	8007bd2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007bc4:	f7ff fa35 	bl	8007032 <LL_RCC_MSI_IsReady>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d108      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e050      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007bd2:	f7ff f9ab 	bl	8006f2c <LL_RCC_HSI_IsReady>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d101      	bne.n	8007be0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e049      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fa6f 	bl	80070c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bea:	f7fb f821 	bl	8002c30 <HAL_GetTick>
 8007bee:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf0:	e00a      	b.n	8007c08 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf2:	f7fb f81d 	bl	8002c30 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e035      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c08:	f7ff fa71 	bl	80070ee <LL_RCC_GetSysClkSource>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d1ec      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c18:	4b18      	ldr	r3, [pc, #96]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d21b      	bcs.n	8007c5e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c26:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f023 0207 	bic.w	r2, r3, #7
 8007c2e:	4913      	ldr	r1, [pc, #76]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c36:	f7fa fffb 	bl	8002c30 <HAL_GetTick>
 8007c3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c3c:	e008      	b.n	8007c50 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007c3e:	f7fa fff7 	bl	8002c30 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e011      	b.n	8007c74 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <HAL_RCC_ClockConfig+0x23c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d1ef      	bne.n	8007c3e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007c5e:	f000 f8b3 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007c62:	4603      	mov	r3, r0
 8007c64:	4a06      	ldr	r2, [pc, #24]	; (8007c80 <HAL_RCC_ClockConfig+0x240>)
 8007c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8007c68:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <HAL_RCC_ClockConfig+0x244>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fa ffd5 	bl	8002c1c <HAL_InitTick>
 8007c72:	4603      	mov	r3, r0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	58004000 	.word	0x58004000
 8007c80:	2000000c 	.word	0x2000000c
 8007c84:	20000014 	.word	0x20000014

08007c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c88:	b590      	push	{r4, r7, lr}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c96:	f7ff fa2a 	bl	80070ee <LL_RCC_GetSysClkSource>
 8007c9a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c9c:	f7ff fafe 	bl	800729c <LL_RCC_PLL_GetMainSource>
 8007ca0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x2c>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b0c      	cmp	r3, #12
 8007cac:	d139      	bne.n	8007d22 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d136      	bne.n	8007d22 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007cb4:	f7ff f9cd 	bl	8007052 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d115      	bne.n	8007cea <HAL_RCC_GetSysClockFreq+0x62>
 8007cbe:	f7ff f9c8 	bl	8007052 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d106      	bne.n	8007cd6 <HAL_RCC_GetSysClockFreq+0x4e>
 8007cc8:	f7ff f9d3 	bl	8007072 <LL_RCC_MSI_GetRange>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	0a1b      	lsrs	r3, r3, #8
 8007cd0:	f003 030f 	and.w	r3, r3, #15
 8007cd4:	e005      	b.n	8007ce2 <HAL_RCC_GetSysClockFreq+0x5a>
 8007cd6:	f7ff f9d7 	bl	8007088 <LL_RCC_MSI_GetRangeAfterStandby>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	4a36      	ldr	r2, [pc, #216]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x134>)
 8007ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ce8:	e014      	b.n	8007d14 <HAL_RCC_GetSysClockFreq+0x8c>
 8007cea:	f7ff f9b2 	bl	8007052 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCC_GetSysClockFreq+0x7a>
 8007cf4:	f7ff f9bd 	bl	8007072 <LL_RCC_MSI_GetRange>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	e005      	b.n	8007d0e <HAL_RCC_GetSysClockFreq+0x86>
 8007d02:	f7ff f9c1 	bl	8007088 <LL_RCC_MSI_GetRangeAfterStandby>
 8007d06:	4603      	mov	r3, r0
 8007d08:	091b      	lsrs	r3, r3, #4
 8007d0a:	f003 030f 	and.w	r3, r3, #15
 8007d0e:	4a2b      	ldr	r2, [pc, #172]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x134>)
 8007d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d14:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d115      	bne.n	8007d48 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007d20:	e012      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d102      	bne.n	8007d2e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d28:	4b25      	ldr	r3, [pc, #148]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	e00c      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d109      	bne.n	8007d48 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d34:	f7ff f8a0 	bl	8006e78 <LL_RCC_HSE_IsEnabledDiv2>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d102      	bne.n	8007d44 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007d3e:	4b20      	ldr	r3, [pc, #128]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e001      	b.n	8007d48 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007d44:	4b1f      	ldr	r3, [pc, #124]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007d46:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d48:	f7ff f9d1 	bl	80070ee <LL_RCC_GetSysClkSource>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b0c      	cmp	r3, #12
 8007d50:	d12f      	bne.n	8007db2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007d52:	f7ff faa3 	bl	800729c <LL_RCC_PLL_GetMainSource>
 8007d56:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCC_GetSysClockFreq+0xde>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d003      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0xe4>
 8007d64:	e00d      	b.n	8007d82 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007d66:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d68:	60fb      	str	r3, [r7, #12]
        break;
 8007d6a:	e00d      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007d6c:	f7ff f884 	bl	8006e78 <LL_RCC_HSE_IsEnabledDiv2>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d102      	bne.n	8007d7c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007d78:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007d7a:	e005      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007d7c:	4b11      	ldr	r3, [pc, #68]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007d7e:	60fb      	str	r3, [r7, #12]
        break;
 8007d80:	e002      	b.n	8007d88 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	60fb      	str	r3, [r7, #12]
        break;
 8007d86:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007d88:	f7ff fa66 	bl	8007258 <LL_RCC_PLL_GetN>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	fb03 f402 	mul.w	r4, r3, r2
 8007d94:	f7ff fa77 	bl	8007286 <LL_RCC_PLL_GetDivider>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	fbb4 f4f3 	udiv	r4, r4, r3
 8007da2:	f7ff fa65 	bl	8007270 <LL_RCC_PLL_GetR>
 8007da6:	4603      	mov	r3, r0
 8007da8:	0f5b      	lsrs	r3, r3, #29
 8007daa:	3301      	adds	r3, #1
 8007dac:	fbb4 f3f3 	udiv	r3, r4, r3
 8007db0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007db2:	697b      	ldr	r3, [r7, #20]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd90      	pop	{r4, r7, pc}
 8007dbc:	0801f580 	.word	0x0801f580
 8007dc0:	00f42400 	.word	0x00f42400
 8007dc4:	01e84800 	.word	0x01e84800

08007dc8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc8:	b598      	push	{r3, r4, r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007dcc:	f7ff ff5c 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	f7ff f9e6 	bl	80071a2 <LL_RCC_GetAHBPrescaler>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	4a03      	ldr	r2, [pc, #12]	; (8007dec <HAL_RCC_GetHCLKFreq+0x24>)
 8007de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007de4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd98      	pop	{r3, r4, r7, pc}
 8007dec:	0801f520 	.word	0x0801f520

08007df0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df0:	b598      	push	{r3, r4, r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007df4:	f7ff ffe8 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	f7ff f9ea 	bl	80071d2 <LL_RCC_GetAPB1Prescaler>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	0a1b      	lsrs	r3, r3, #8
 8007e02:	4a03      	ldr	r2, [pc, #12]	; (8007e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd98      	pop	{r3, r4, r7, pc}
 8007e10:	0801f560 	.word	0x0801f560

08007e14 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e14:	b598      	push	{r3, r4, r7, lr}
 8007e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007e18:	f7ff ffd6 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	f7ff f9e3 	bl	80071e8 <LL_RCC_GetAPB2Prescaler>
 8007e22:	4603      	mov	r3, r0
 8007e24:	0adb      	lsrs	r3, r3, #11
 8007e26:	4a03      	ldr	r2, [pc, #12]	; (8007e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	bd98      	pop	{r3, r4, r7, pc}
 8007e34:	0801f560 	.word	0x0801f560

08007e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	091b      	lsrs	r3, r3, #4
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4a10      	ldr	r2, [pc, #64]	; (8007e8c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007e50:	f7ff f9b2 	bl	80071b8 <LL_RCC_GetAHB3Prescaler>
 8007e54:	4603      	mov	r3, r0
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	f003 030f 	and.w	r3, r3, #15
 8007e5c:	4a0c      	ldr	r2, [pc, #48]	; (8007e90 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e68:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	4a09      	ldr	r2, [pc, #36]	; (8007e94 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	0c9c      	lsrs	r4, r3, #18
 8007e74:	f7fe ff58 	bl	8006d28 <HAL_PWREx_GetVoltageRange>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 f80b 	bl	8007e98 <RCC_SetFlashLatency>
 8007e82:	4603      	mov	r3, r0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd90      	pop	{r4, r7, pc}
 8007e8c:	0801f580 	.word	0x0801f580
 8007e90:	0801f520 	.word	0x0801f520
 8007e94:	431bde83 	.word	0x431bde83

08007e98 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	; 0x38
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007ea2:	4a3a      	ldr	r2, [pc, #232]	; (8007f8c <RCC_SetFlashLatency+0xf4>)
 8007ea4:	f107 0320 	add.w	r3, r7, #32
 8007ea8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007eac:	6018      	str	r0, [r3, #0]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007eb2:	4a37      	ldr	r2, [pc, #220]	; (8007f90 <RCC_SetFlashLatency+0xf8>)
 8007eb4:	f107 0318 	add.w	r3, r7, #24
 8007eb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ebc:	6018      	str	r0, [r3, #0]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007ec2:	4a34      	ldr	r2, [pc, #208]	; (8007f94 <RCC_SetFlashLatency+0xfc>)
 8007ec4:	f107 030c 	add.w	r3, r7, #12
 8007ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8007eca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007ece:	2300      	movs	r3, #0
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed8:	d11b      	bne.n	8007f12 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ede:	e014      	b.n	8007f0a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	005b      	lsls	r3, r3, #1
 8007ee4:	3338      	adds	r3, #56	; 0x38
 8007ee6:	443b      	add	r3, r7
 8007ee8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007eec:	461a      	mov	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d807      	bhi.n	8007f04 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	3338      	adds	r3, #56	; 0x38
 8007efa:	443b      	add	r3, r7
 8007efc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f02:	e021      	b.n	8007f48 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	3301      	adds	r3, #1
 8007f08:	633b      	str	r3, [r7, #48]	; 0x30
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d9e7      	bls.n	8007ee0 <RCC_SetFlashLatency+0x48>
 8007f10:	e01a      	b.n	8007f48 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007f12:	2300      	movs	r3, #0
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f16:	e014      	b.n	8007f42 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	3338      	adds	r3, #56	; 0x38
 8007f1e:	443b      	add	r3, r7
 8007f20:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007f24:	461a      	mov	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d807      	bhi.n	8007f3c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	3338      	adds	r3, #56	; 0x38
 8007f32:	443b      	add	r3, r7
 8007f34:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f3a:	e005      	b.n	8007f48 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	3301      	adds	r3, #1
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d9e7      	bls.n	8007f18 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f48:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <RCC_SetFlashLatency+0x100>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f023 0207 	bic.w	r2, r3, #7
 8007f50:	4911      	ldr	r1, [pc, #68]	; (8007f98 <RCC_SetFlashLatency+0x100>)
 8007f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f54:	4313      	orrs	r3, r2
 8007f56:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f58:	f7fa fe6a 	bl	8002c30 <HAL_GetTick>
 8007f5c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007f5e:	e008      	b.n	8007f72 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007f60:	f7fa fe66 	bl	8002c30 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d901      	bls.n	8007f72 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e007      	b.n	8007f82 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007f72:	4b09      	ldr	r3, [pc, #36]	; (8007f98 <RCC_SetFlashLatency+0x100>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d1ef      	bne.n	8007f60 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3738      	adds	r7, #56	; 0x38
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	0801eca4 	.word	0x0801eca4
 8007f90:	0801ecac 	.word	0x0801ecac
 8007f94:	0801ecb4 	.word	0x0801ecb4
 8007f98:	58004000 	.word	0x58004000

08007f9c <LL_RCC_LSE_IsReady>:
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d101      	bne.n	8007fb4 <LL_RCC_LSE_IsReady+0x18>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <LL_RCC_LSE_IsReady+0x1a>
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr

08007fbe <LL_RCC_SetUSARTClockSource>:
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b083      	sub	sp, #12
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	0c1b      	lsrs	r3, r3, #16
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	401a      	ands	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr

08007fee <LL_RCC_SetI2SClockSource>:
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800800e:	bf00      	nop
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr

08008018 <LL_RCC_SetLPUARTClockSource>:
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008028:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800802c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	bc80      	pop	{r7}
 8008040:	4770      	bx	lr

08008042 <LL_RCC_SetI2CClockSource>:
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800804a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800804e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	091b      	lsrs	r3, r3, #4
 8008056:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800805a:	43db      	mvns	r3, r3
 800805c:	401a      	ands	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800806a:	4313      	orrs	r3, r2
 800806c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr

0800807a <LL_RCC_SetLPTIMClockSource>:
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008086:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	041b      	lsls	r3, r3, #16
 8008090:	43db      	mvns	r3, r3
 8008092:	401a      	ands	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800809c:	4313      	orrs	r3, r2
 800809e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr

080080ac <LL_RCC_SetRNGClockSource>:
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80080b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80080c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <LL_RCC_SetADCClockSource>:
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80080de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80080ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <LL_RCC_SetRTCClockSource>:
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800810c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <LL_RCC_GetRTCClockSource>:
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008136:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800813a:	4618      	mov	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr

08008142 <LL_RCC_ForceBackupDomainReset>:
{
 8008142:	b480      	push	{r7}
 8008144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr

08008162 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008162:	b480      	push	{r7}
 8008164:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800816a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800816e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800817a:	bf00      	nop
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr
	...

08008184 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008190:	2300      	movs	r3, #0
 8008192:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008194:	2300      	movs	r3, #0
 8008196:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d058      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80081a4:	f7fe fd7e 	bl	8006ca4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081a8:	f7fa fd42 	bl	8002c30 <HAL_GetTick>
 80081ac:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80081ae:	e009      	b.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081b0:	f7fa fd3e 	bl	8002c30 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d902      	bls.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	74fb      	strb	r3, [r7, #19]
        break;
 80081c2:	e006      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80081c4:	4b7b      	ldr	r3, [pc, #492]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081d0:	d1ee      	bne.n	80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80081d2:	7cfb      	ldrb	r3, [r7, #19]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d13c      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80081d8:	f7ff ffa7 	bl	800812a <LL_RCC_GetRTCClockSource>
 80081dc:	4602      	mov	r2, r0
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d00f      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80081e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081f4:	f7ff ffa5 	bl	8008142 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081f8:	f7ff ffb3 	bl	8008162 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d014      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008210:	f7fa fd0e 	bl	8002c30 <HAL_GetTick>
 8008214:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008216:	e00b      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008218:	f7fa fd0a 	bl	8002c30 <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f241 3288 	movw	r2, #5000	; 0x1388
 8008226:	4293      	cmp	r3, r2
 8008228:	d902      	bls.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	74fb      	strb	r3, [r7, #19]
            break;
 800822e:	e004      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008230:	f7ff feb4 	bl	8007f9c <LL_RCC_LSE_IsReady>
 8008234:	4603      	mov	r3, r0
 8008236:	2b01      	cmp	r3, #1
 8008238:	d1ee      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800823a:	7cfb      	ldrb	r3, [r7, #19]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d105      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff ff5b 	bl	8008100 <LL_RCC_SetRTCClockSource>
 800824a:	e004      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	74bb      	strb	r3, [r7, #18]
 8008250:	e001      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008252:	7cfb      	ldrb	r3, [r7, #19]
 8008254:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff fea9 	bl	8007fbe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0302 	and.w	r3, r3, #2
 8008274:	2b00      	cmp	r3, #0
 8008276:	d004      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	4618      	mov	r0, r3
 800827e:	f7ff fe9e 	bl	8007fbe <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fec0 	bl	8008018 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fee6 	bl	800807a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d004      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fedb 	bl	800807a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d004      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fed0 	bl	800807a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d004      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff fea9 	bl	8008042 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d004      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff fe9e 	bl	8008042 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830e:	2b00      	cmp	r3, #0
 8008310:	d004      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fe93 	bl	8008042 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	d011      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	4618      	mov	r0, r3
 800832e:	f7ff fe5e 	bl	8007fee <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800833a:	d107      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800833c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800834a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d010      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fea5 	bl	80080ac <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	2b00      	cmp	r3, #0
 8008368:	d107      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800836a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008378:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d011      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff fea3 	bl	80080d6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008398:	d107      	bne.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800839a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80083aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	58000400 	.word	0x58000400

080083b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d071      	beq.n	80084ae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7fa f872 	bl	80024c8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80083ec:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <HAL_RTC_Init+0x100>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d051      	beq.n	800849c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083f8:	4b2f      	ldr	r3, [pc, #188]	; (80084b8 <HAL_RTC_Init+0x100>)
 80083fa:	22ca      	movs	r2, #202	; 0xca
 80083fc:	625a      	str	r2, [r3, #36]	; 0x24
 80083fe:	4b2e      	ldr	r3, [pc, #184]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008400:	2253      	movs	r2, #83	; 0x53
 8008402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fa11 	bl	800882c <RTC_EnterInitMode>
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d13f      	bne.n	8008494 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008414:	4b28      	ldr	r3, [pc, #160]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	4a27      	ldr	r2, [pc, #156]	; (80084b8 <HAL_RTC_Init+0x100>)
 800841a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800841e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008422:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6859      	ldr	r1, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	4319      	orrs	r1, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	430b      	orrs	r3, r1
 8008438:	491f      	ldr	r1, [pc, #124]	; (80084b8 <HAL_RTC_Init+0x100>)
 800843a:	4313      	orrs	r3, r2
 800843c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	491b      	ldr	r1, [pc, #108]	; (80084b8 <HAL_RTC_Init+0x100>)
 800844a:	4313      	orrs	r3, r2
 800844c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800844e:	4b1a      	ldr	r3, [pc, #104]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	430b      	orrs	r3, r1
 8008460:	4915      	ldr	r1, [pc, #84]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008462:	4313      	orrs	r3, r2
 8008464:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa14 	bl	8008894 <RTC_ExitInitMode>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10e      	bne.n	8008494 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008476:	4b10      	ldr	r3, [pc, #64]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a19      	ldr	r1, [r3, #32]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	4319      	orrs	r1, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	430b      	orrs	r3, r1
 800848e:	490a      	ldr	r1, [pc, #40]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008490:	4313      	orrs	r3, r2
 8008492:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008494:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <HAL_RTC_Init+0x100>)
 8008496:	22ff      	movs	r2, #255	; 0xff
 8008498:	625a      	str	r2, [r3, #36]	; 0x24
 800849a:	e001      	b.n	80084a0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	40002800 	.word	0x40002800

080084bc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <HAL_RTC_SetAlarm_IT+0x1e>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e0f3      	b.n	80086c2 <HAL_RTC_SetAlarm_IT+0x206>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2201      	movs	r2, #1
 80084de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2202      	movs	r2, #2
 80084e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80084ea:	4b78      	ldr	r3, [pc, #480]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f2:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fa:	d06a      	beq.n	80085d2 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d13a      	bne.n	8008578 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008502:	4b72      	ldr	r3, [pc, #456]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d102      	bne.n	8008514 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2200      	movs	r2, #0
 8008512:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f9f5 	bl	8008910 <RTC_ByteToBcd2>
 8008526:	4603      	mov	r3, r0
 8008528:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f9ee 	bl	8008910 <RTC_ByteToBcd2>
 8008534:	4603      	mov	r3, r0
 8008536:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008538:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	789b      	ldrb	r3, [r3, #2]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f9e6 	bl	8008910 <RTC_ByteToBcd2>
 8008544:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008546:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	78db      	ldrb	r3, [r3, #3]
 800854e:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008550:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800855a:	4618      	mov	r0, r3
 800855c:	f000 f9d8 	bl	8008910 <RTC_ByteToBcd2>
 8008560:	4603      	mov	r3, r0
 8008562:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008564:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800856c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e02c      	b.n	80085d2 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8008580:	d00d      	beq.n	800859e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800858a:	d008      	beq.n	800859e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800858c:	4b4f      	ldr	r3, [pc, #316]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2200      	movs	r2, #0
 800859c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085aa:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80085b0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80085b8:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085c0:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80085c2:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80085c8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085d2:	4b3e      	ldr	r3, [pc, #248]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80085d4:	22ca      	movs	r2, #202	; 0xca
 80085d6:	625a      	str	r2, [r3, #36]	; 0x24
 80085d8:	4b3c      	ldr	r3, [pc, #240]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80085da:	2253      	movs	r2, #83	; 0x53
 80085dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e6:	d12c      	bne.n	8008642 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80085e8:	4b38      	ldr	r3, [pc, #224]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	4a37      	ldr	r2, [pc, #220]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80085ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80085f2:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80085f4:	4b35      	ldr	r3, [pc, #212]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008600:	d107      	bne.n	8008612 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	699a      	ldr	r2, [r3, #24]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	4930      	ldr	r1, [pc, #192]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 800860c:	4313      	orrs	r3, r2
 800860e:	644b      	str	r3, [r1, #68]	; 0x44
 8008610:	e006      	b.n	8008620 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008612:	4a2e      	ldr	r2, [pc, #184]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008618:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008620:	4a2a      	ldr	r2, [pc, #168]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862c:	f043 0201 	orr.w	r2, r3, #1
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008634:	4b25      	ldr	r3, [pc, #148]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	4a24      	ldr	r2, [pc, #144]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 800863a:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800863e:	6193      	str	r3, [r2, #24]
 8008640:	e02b      	b.n	800869a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008642:	4b22      	ldr	r3, [pc, #136]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	4a21      	ldr	r2, [pc, #132]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008648:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800864c:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800864e:	4b1f      	ldr	r3, [pc, #124]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008650:	2202      	movs	r2, #2
 8008652:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865a:	d107      	bne.n	800866c <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	699a      	ldr	r2, [r3, #24]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	4919      	ldr	r1, [pc, #100]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008666:	4313      	orrs	r3, r2
 8008668:	64cb      	str	r3, [r1, #76]	; 0x4c
 800866a:	e006      	b.n	800867a <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800866c:	4a17      	ldr	r2, [pc, #92]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008672:	4a16      	ldr	r2, [pc, #88]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800867a:	4a14      	ldr	r2, [pc, #80]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	f043 0202 	orr.w	r2, r3, #2
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800868e:	4b0f      	ldr	r3, [pc, #60]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	4a0e      	ldr	r2, [pc, #56]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 8008694:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008698:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <HAL_RTC_SetAlarm_IT+0x214>)
 800869c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a0:	4a0b      	ldr	r2, [pc, #44]	; (80086d0 <HAL_RTC_SetAlarm_IT+0x214>)
 80086a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086aa:	4b08      	ldr	r3, [pc, #32]	; (80086cc <HAL_RTC_SetAlarm_IT+0x210>)
 80086ac:	22ff      	movs	r2, #255	; 0xff
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd90      	pop	{r4, r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40002800 	.word	0x40002800
 80086d0:	58000800 	.word	0x58000800

080086d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_RTC_DeactivateAlarm+0x18>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e048      	b.n	800877e <HAL_RTC_DeactivateAlarm+0xaa>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086fc:	4b22      	ldr	r3, [pc, #136]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 80086fe:	22ca      	movs	r2, #202	; 0xca
 8008700:	625a      	str	r2, [r3, #36]	; 0x24
 8008702:	4b21      	ldr	r3, [pc, #132]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008704:	2253      	movs	r2, #83	; 0x53
 8008706:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870e:	d115      	bne.n	800873c <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008710:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	4a1c      	ldr	r2, [pc, #112]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800871a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800871c:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 800871e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008720:	4a19      	ldr	r2, [pc, #100]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008726:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800872c:	f023 0201 	bic.w	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008734:	4b14      	ldr	r3, [pc, #80]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008736:	2201      	movs	r2, #1
 8008738:	65da      	str	r2, [r3, #92]	; 0x5c
 800873a:	e014      	b.n	8008766 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800873c:	4b12      	ldr	r3, [pc, #72]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	4a11      	ldr	r2, [pc, #68]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008742:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008746:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008748:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 800874a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874c:	4a0e      	ldr	r2, [pc, #56]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 800874e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008752:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008758:	f023 0202 	bic.w	r2, r3, #2
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008760:	4b09      	ldr	r3, [pc, #36]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008762:	2202      	movs	r2, #2
 8008764:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008766:	4b08      	ldr	r3, [pc, #32]	; (8008788 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008768:	22ff      	movs	r2, #255	; 0xff
 800876a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	40002800 	.word	0x40002800

0800878c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008794:	4b11      	ldr	r3, [pc, #68]	; (80087dc <HAL_RTC_AlarmIRQHandler+0x50>)
 8008796:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	4013      	ands	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d005      	beq.n	80087b6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7fa fcc6 	bl	8003142 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_RTC_AlarmIRQHandler+0x50>)
 80087c2:	2202      	movs	r2, #2
 80087c4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f94a 	bl	8008a60 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80087d4:	bf00      	nop
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	40002800 	.word	0x40002800

080087e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80087e8:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <HAL_RTC_WaitForSynchro+0x48>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	4a0e      	ldr	r2, [pc, #56]	; (8008828 <HAL_RTC_WaitForSynchro+0x48>)
 80087ee:	f023 0320 	bic.w	r3, r3, #32
 80087f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80087f4:	f7fa fa1c 	bl	8002c30 <HAL_GetTick>
 80087f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80087fa:	e009      	b.n	8008810 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087fc:	f7fa fa18 	bl	8002c30 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800880a:	d901      	bls.n	8008810 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e006      	b.n	800881e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008810:	4b05      	ldr	r3, [pc, #20]	; (8008828 <HAL_RTC_WaitForSynchro+0x48>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0ef      	beq.n	80087fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	40002800 	.word	0x40002800

0800882c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008838:	4b15      	ldr	r3, [pc, #84]	; (8008890 <RTC_EnterInitMode+0x64>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d120      	bne.n	8008886 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008844:	4b12      	ldr	r3, [pc, #72]	; (8008890 <RTC_EnterInitMode+0x64>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4a11      	ldr	r2, [pc, #68]	; (8008890 <RTC_EnterInitMode+0x64>)
 800884a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008850:	f7fa f9ee 	bl	8002c30 <HAL_GetTick>
 8008854:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008856:	e00d      	b.n	8008874 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008858:	f7fa f9ea 	bl	8002c30 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008866:	d905      	bls.n	8008874 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2203      	movs	r2, #3
 8008870:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <RTC_EnterInitMode+0x64>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <RTC_EnterInitMode+0x5a>
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	2b03      	cmp	r3, #3
 8008884:	d1e8      	bne.n	8008858 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	40002800 	.word	0x40002800

08008894 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80088a0:	4b1a      	ldr	r3, [pc, #104]	; (800890c <RTC_ExitInitMode+0x78>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <RTC_ExitInitMode+0x78>)
 80088a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088aa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80088ac:	4b17      	ldr	r3, [pc, #92]	; (800890c <RTC_ExitInitMode+0x78>)
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10c      	bne.n	80088d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff ff91 	bl	80087e0 <HAL_RTC_WaitForSynchro>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d01e      	beq.n	8008902 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2203      	movs	r2, #3
 80088c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	73fb      	strb	r3, [r7, #15]
 80088d0:	e017      	b.n	8008902 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80088d2:	4b0e      	ldr	r3, [pc, #56]	; (800890c <RTC_ExitInitMode+0x78>)
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	4a0d      	ldr	r2, [pc, #52]	; (800890c <RTC_ExitInitMode+0x78>)
 80088d8:	f023 0320 	bic.w	r3, r3, #32
 80088dc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f7ff ff7e 	bl	80087e0 <HAL_RTC_WaitForSynchro>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d005      	beq.n	80088f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2203      	movs	r2, #3
 80088ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <RTC_ExitInitMode+0x78>)
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	4a04      	ldr	r2, [pc, #16]	; (800890c <RTC_ExitInitMode+0x78>)
 80088fc:	f043 0320 	orr.w	r3, r3, #32
 8008900:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	40002800 	.word	0x40002800

08008910 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008922:	e005      	b.n	8008930 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3301      	adds	r3, #1
 8008928:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800892a:	7afb      	ldrb	r3, [r7, #11]
 800892c:	3b0a      	subs	r3, #10
 800892e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008930:	7afb      	ldrb	r3, [r7, #11]
 8008932:	2b09      	cmp	r3, #9
 8008934:	d8f6      	bhi.n	8008924 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	b2da      	uxtb	r2, r3
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	4313      	orrs	r3, r2
 8008942:	b2db      	uxtb	r3, r3
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bc80      	pop	{r7}
 800894c:	4770      	bx	lr
	...

08008950 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008962:	2302      	movs	r3, #2
 8008964:	e01f      	b.n	80089a6 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008976:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008978:	22ca      	movs	r2, #202	; 0xca
 800897a:	625a      	str	r2, [r3, #36]	; 0x24
 800897c:	4b0c      	ldr	r3, [pc, #48]	; (80089b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800897e:	2253      	movs	r2, #83	; 0x53
 8008980:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008982:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008988:	f043 0320 	orr.w	r3, r3, #32
 800898c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800898e:	4b08      	ldr	r3, [pc, #32]	; (80089b0 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008990:	22ff      	movs	r2, #255	; 0xff
 8008992:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	40002800 	.word	0x40002800

080089b4 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d101      	bne.n	80089ca <HAL_RTCEx_SetSSRU_IT+0x16>
 80089c6:	2302      	movs	r3, #2
 80089c8:	e027      	b.n	8008a1a <HAL_RTCEx_SetSSRU_IT+0x66>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089da:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089dc:	22ca      	movs	r2, #202	; 0xca
 80089de:	625a      	str	r2, [r3, #36]	; 0x24
 80089e0:	4b10      	ldr	r3, [pc, #64]	; (8008a24 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089e2:	2253      	movs	r2, #83	; 0x53
 80089e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	4a0e      	ldr	r2, [pc, #56]	; (8008a24 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80089ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f0:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80089f2:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80089f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089f8:	4a0b      	ldr	r2, [pc, #44]	; (8008a28 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80089fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008a04:	22ff      	movs	r2, #255	; 0xff
 8008a06:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr
 8008a24:	40002800 	.word	0x40002800
 8008a28:	58000800 	.word	0x58000800

08008a2c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008a34:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008a42:	2240      	movs	r2, #64	; 0x40
 8008a44:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fa fb85 	bl	8003156 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008a54:	bf00      	nop
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	40002800 	.word	0x40002800

08008a60 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
	...

08008a74 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <HAL_RTCEx_BKUPWrite+0x2c>)
 8008a82:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	371c      	adds	r7, #28
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bc80      	pop	{r7}
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	4000b100 	.word	0x4000b100

08008aa4 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008aae:	4b07      	ldr	r3, [pc, #28]	; (8008acc <HAL_RTCEx_BKUPRead+0x28>)
 8008ab0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	4413      	add	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bc80      	pop	{r7}
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	4000b100 	.word	0x4000b100

08008ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e0c6      	b.n	8008c70 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d108      	bne.n	8008afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af2:	d009      	beq.n	8008b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	61da      	str	r2, [r3, #28]
 8008afa:	e005      	b.n	8008b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d106      	bne.n	8008b22 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7f9 fd7d 	bl	800261c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2202      	movs	r2, #2
 8008b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b42:	d902      	bls.n	8008b4a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	e002      	b.n	8008b50 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008b58:	d007      	beq.n	8008b6a <HAL_SPI_Init+0x9a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b62:	d002      	beq.n	8008b6a <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	431a      	orrs	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bac:	ea42 0103 	orr.w	r1, r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc8:	d11b      	bne.n	8008c02 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10b      	bne.n	8008bea <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bda:	d903      	bls.n	8008be4 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30
 8008be2:	e002      	b.n	8008bea <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d107      	bne.n	8008c02 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c00:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	0c1b      	lsrs	r3, r3, #16
 8008c08:	f003 0204 	and.w	r2, r3, #4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	431a      	orrs	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008c28:	ea42 0103 	orr.w	r1, r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c42:	d105      	bne.n	8008c50 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	b292      	uxth	r2, r2
 8008c4e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69da      	ldr	r2, [r3, #28]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	4613      	mov	r3, r2
 8008c86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d101      	bne.n	8008c9a <HAL_SPI_Transmit+0x22>
 8008c96:	2302      	movs	r3, #2
 8008c98:	e17a      	b.n	8008f90 <HAL_SPI_Transmit+0x318>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ca2:	f7f9 ffc5 	bl	8002c30 <HAL_GetTick>
 8008ca6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ca8:	88fb      	ldrh	r3, [r7, #6]
 8008caa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d002      	beq.n	8008cbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cb8:	2302      	movs	r3, #2
 8008cba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cbc:	e15f      	b.n	8008f7e <HAL_SPI_Transmit+0x306>
  }

  if ((pData == NULL) || (Size == 0U))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_SPI_Transmit+0x52>
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cce:	e156      	b.n	8008f7e <HAL_SPI_Transmit+0x306>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	88fa      	ldrh	r2, [r7, #6]
 8008ce8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	88fa      	ldrh	r2, [r7, #6]
 8008cee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d1a:	d10f      	bne.n	8008d3c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d3a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d44:	d10f      	bne.n	8008d66 <HAL_SPI_Transmit+0xee>
  {
    SPI_RESET_CRC(hspi);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d64:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	d007      	beq.n	8008d84 <HAL_SPI_Transmit+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d8c:	d94b      	bls.n	8008e26 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <HAL_SPI_Transmit+0x124>
 8008d96:	8afb      	ldrh	r3, [r7, #22]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d13e      	bne.n	8008e1a <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	881a      	ldrh	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	1c9a      	adds	r2, r3, #2
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008dc0:	e02b      	b.n	8008e1a <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d112      	bne.n	8008df6 <HAL_SPI_Transmit+0x17e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	881a      	ldrh	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de0:	1c9a      	adds	r2, r3, #2
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008df4:	e011      	b.n	8008e1a <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008df6:	f7f9 ff1b 	bl	8002c30 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	683a      	ldr	r2, [r7, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d803      	bhi.n	8008e0e <HAL_SPI_Transmit+0x196>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d102      	bne.n	8008e14 <HAL_SPI_Transmit+0x19c>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e18:	e0b1      	b.n	8008f7e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1ce      	bne.n	8008dc2 <HAL_SPI_Transmit+0x14a>
 8008e24:	e07c      	b.n	8008f20 <HAL_SPI_Transmit+0x2a8>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <HAL_SPI_Transmit+0x1bc>
 8008e2e:	8afb      	ldrh	r3, [r7, #22]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d170      	bne.n	8008f16 <HAL_SPI_Transmit+0x29e>
    {
      if (hspi->TxXferCount > 1U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d912      	bls.n	8008e64 <HAL_SPI_Transmit+0x1ec>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	881a      	ldrh	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	1c9a      	adds	r2, r3, #2
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b02      	subs	r3, #2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e62:	e058      	b.n	8008f16 <HAL_SPI_Transmit+0x29e>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	330c      	adds	r3, #12
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008e8a:	e044      	b.n	8008f16 <HAL_SPI_Transmit+0x29e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d12b      	bne.n	8008ef2 <HAL_SPI_Transmit+0x27a>
      {
        if (hspi->TxXferCount > 1U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d912      	bls.n	8008eca <HAL_SPI_Transmit+0x252>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea8:	881a      	ldrh	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	1c9a      	adds	r2, r3, #2
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	3b02      	subs	r3, #2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ec8:	e025      	b.n	8008f16 <HAL_SPI_Transmit+0x29e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	7812      	ldrb	r2, [r2, #0]
 8008ed6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ef0:	e011      	b.n	8008f16 <HAL_SPI_Transmit+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ef2:	f7f9 fe9d 	bl	8002c30 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d803      	bhi.n	8008f0a <HAL_SPI_Transmit+0x292>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f08:	d102      	bne.n	8008f10 <HAL_SPI_Transmit+0x298>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <HAL_SPI_Transmit+0x29e>
        {
          errorcode = HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f14:	e033      	b.n	8008f7e <HAL_SPI_Transmit+0x306>
    while (hspi->TxXferCount > 0U)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1b5      	bne.n	8008e8c <HAL_SPI_Transmit+0x214>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f28:	d107      	bne.n	8008f3a <HAL_SPI_Transmit+0x2c2>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f38:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 fe6e 	bl	8009c20 <SPI_EndRxTxTransaction>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <HAL_SPI_Transmit+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10a      	bne.n	8008f6e <HAL_SPI_Transmit+0x2f6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_SPI_Transmit+0x304>
  {
    errorcode = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	77fb      	strb	r3, [r7, #31]
 8008f7a:	e000      	b.n	8008f7e <HAL_SPI_Transmit+0x306>
  }

error:
 8008f7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3720      	adds	r7, #32
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08c      	sub	sp, #48	; 0x30
 8008f9c:	af02      	add	r7, sp, #8
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fbe:	d112      	bne.n	8008fe6 <HAL_SPI_Receive+0x4e>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10e      	bne.n	8008fe6 <HAL_SPI_Receive+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2204      	movs	r2, #4
 8008fcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008fd0:	88fa      	ldrh	r2, [r7, #6]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 f9c4 	bl	800936a <HAL_SPI_TransmitReceive>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	e1bd      	b.n	8009362 <HAL_SPI_Receive+0x3ca>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_SPI_Receive+0x5c>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e1b6      	b.n	8009362 <HAL_SPI_Receive+0x3ca>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ffc:	f7f9 fe18 	bl	8002c30 <HAL_GetTick>
 8009000:	6238      	str	r0, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b01      	cmp	r3, #1
 800900c:	d003      	beq.n	8009016 <HAL_SPI_Receive+0x7e>
  {
    errorcode = HAL_BUSY;
 800900e:	2302      	movs	r3, #2
 8009010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009014:	e19b      	b.n	800934e <HAL_SPI_Receive+0x3b6>
  }

  if ((pData == NULL) || (Size == 0U))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <HAL_SPI_Receive+0x8a>
 800901c:	88fb      	ldrh	r3, [r7, #6]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8009028:	e191      	b.n	800934e <HAL_SPI_Receive+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2204      	movs	r2, #4
 800902e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	88fa      	ldrh	r2, [r7, #6]
 8009042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	88fa      	ldrh	r2, [r7, #6]
 800904a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2200      	movs	r2, #0
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009074:	d118      	bne.n	80090a8 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009094:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090b0:	d908      	bls.n	80090c4 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	e007      	b.n	80090d4 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090dc:	d10f      	bne.n	80090fe <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009108:	2b40      	cmp	r3, #64	; 0x40
 800910a:	d007      	beq.n	800911c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800911a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009124:	d869      	bhi.n	80091fa <HAL_SPI_Receive+0x262>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009126:	e031      	b.n	800918c <HAL_SPI_Receive+0x1f4>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b01      	cmp	r3, #1
 8009134:	d117      	bne.n	8009166 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f103 020c 	add.w	r2, r3, #12
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009164:	e012      	b.n	800918c <HAL_SPI_Receive+0x1f4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009166:	f7f9 fd63 	bl	8002c30 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d803      	bhi.n	800917e <HAL_SPI_Receive+0x1e6>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d102      	bne.n	8009184 <HAL_SPI_Receive+0x1ec>
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <HAL_SPI_Receive+0x1f4>
        {
          errorcode = HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800918a:	e0e0      	b.n	800934e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009192:	b29b      	uxth	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1c7      	bne.n	8009128 <HAL_SPI_Receive+0x190>
 8009198:	e035      	b.n	8009206 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d115      	bne.n	80091d4 <HAL_SPI_Receive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	b292      	uxth	r2, r2
 80091b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ba:	1c9a      	adds	r2, r3, #2
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80091d2:	e012      	b.n	80091fa <HAL_SPI_Receive+0x262>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091d4:	f7f9 fd2c 	bl	8002c30 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d803      	bhi.n	80091ec <HAL_SPI_Receive+0x254>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d102      	bne.n	80091f2 <HAL_SPI_Receive+0x25a>
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <HAL_SPI_Receive+0x262>
        {
          errorcode = HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80091f8:	e0a9      	b.n	800934e <HAL_SPI_Receive+0x3b6>
    while (hspi->RxXferCount > 0U)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1c9      	bne.n	800919a <HAL_SPI_Receive+0x202>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920e:	d178      	bne.n	8009302 <HAL_SPI_Receive+0x36a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800921e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	2101      	movs	r1, #1
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 fb82 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_SPI_Receive+0x2a6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800923c:	e087      	b.n	800934e <HAL_SPI_Receive+0x3b6>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009246:	d907      	bls.n	8009258 <HAL_SPI_Receive+0x2c0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	b292      	uxth	r2, r2
 8009254:	801a      	strh	r2, [r3, #0]
 8009256:	e008      	b.n	800926a <HAL_SPI_Receive+0x2d2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f103 020c 	add.w	r2, r3, #12
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009264:	7812      	ldrb	r2, [r2, #0]
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2201      	movs	r2, #1
 8009272:	2101      	movs	r1, #1
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 fb5d 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <HAL_SPI_Receive+0x2fc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009284:	f043 0202 	orr.w	r2, r3, #2
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8009292:	e05c      	b.n	800934e <HAL_SPI_Receive+0x3b6>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800929c:	d105      	bne.n	80092aa <HAL_SPI_Receive+0x312>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	e02b      	b.n	8009302 <HAL_SPI_Receive+0x36a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	330c      	adds	r3, #12
 80092b0:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80092b2:	69fb      	ldr	r3, [r7, #28]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092ba:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092c4:	d11d      	bne.n	8009302 <HAL_SPI_Receive+0x36a>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d119      	bne.n	8009302 <HAL_SPI_Receive+0x36a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2201      	movs	r2, #1
 80092d6:	2101      	movs	r1, #1
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fb2b 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d009      	beq.n	80092f8 <HAL_SPI_Receive+0x360>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e8:	f043 0202 	orr.w	r2, r3, #2
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80092f6:	e02a      	b.n	800934e <HAL_SPI_Receive+0x3b6>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8009300:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009302:	6a3a      	ldr	r2, [r7, #32]
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 fc32 	bl	8009b70 <SPI_EndRxTransaction>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_SPI_Receive+0x380>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2220      	movs	r2, #32
 8009316:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0310 	and.w	r3, r3, #16
 8009322:	2b10      	cmp	r3, #16
 8009324:	d10a      	bne.n	800933c <HAL_SPI_Receive+0x3a4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800932a:	f043 0202 	orr.w	r2, r3, #2
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800933a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <HAL_SPI_Receive+0x3b4>
  {
    errorcode = HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800934a:	e000      	b.n	800934e <HAL_SPI_Receive+0x3b6>
  }

error :
 800934c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800935e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009362:	4618      	mov	r0, r3
 8009364:	3728      	adds	r7, #40	; 0x28
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b092      	sub	sp, #72	; 0x48
 800936e:	af02      	add	r7, sp, #8
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	607a      	str	r2, [r7, #4]
 8009376:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009380:	2301      	movs	r3, #1
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_SPI_TransmitReceive+0x2e>
 8009394:	2302      	movs	r3, #2
 8009396:	e2c8      	b.n	800992a <HAL_SPI_TransmitReceive+0x5c0>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a0:	f7f9 fc46 	bl	8002c30 <HAL_GetTick>
 80093a4:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 80093b6:	887b      	ldrh	r3, [r7, #2]
 80093b8:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 80093ba:	887b      	ldrh	r3, [r7, #2]
 80093bc:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d00f      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0x8c>
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093dc:	d107      	bne.n	80093ee <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d103      	bne.n	80093ee <HAL_SPI_TransmitReceive+0x84>
 80093e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d003      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 80093ee:	2302      	movs	r3, #2
 80093f0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 80093f4:	e28f      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d005      	beq.n	8009408 <HAL_SPI_TransmitReceive+0x9e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <HAL_SPI_TransmitReceive+0x9e>
 8009402:	887b      	ldrh	r3, [r7, #2]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d103      	bne.n	8009410 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 800940e:	e282      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b04      	cmp	r3, #4
 800941a:	d003      	beq.n	8009424 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2205      	movs	r2, #5
 8009420:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	887a      	ldrh	r2, [r7, #2]
 8009434:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	887a      	ldrh	r2, [r7, #2]
 800943c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	887a      	ldrh	r2, [r7, #2]
 800944a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	887a      	ldrh	r2, [r7, #2]
 8009450:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009466:	d10f      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009486:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009490:	d802      	bhi.n	8009498 <HAL_SPI_TransmitReceive+0x12e>
 8009492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009494:	2b01      	cmp	r3, #1
 8009496:	d908      	bls.n	80094aa <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094a6:	605a      	str	r2, [r3, #4]
 80094a8:	e007      	b.n	80094ba <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b40      	cmp	r3, #64	; 0x40
 80094c6:	d007      	beq.n	80094d8 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094e0:	f240 80a4 	bls.w	800962c <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_SPI_TransmitReceive+0x18a>
 80094ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	f040 808e 	bne.w	8009610 <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	881a      	ldrh	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009504:	1c9a      	adds	r2, r3, #2
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950e:	b29b      	uxth	r3, r3
 8009510:	3b01      	subs	r3, #1
 8009512:	b29a      	uxth	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009518:	e07a      	b.n	8009610 <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d13f      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x23e>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d03a      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x23e>
 8009532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009534:	2b01      	cmp	r3, #1
 8009536:	d137      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	881a      	ldrh	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	1c9a      	adds	r2, r3, #2
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009552:	b29b      	uxth	r3, r3
 8009554:	3b01      	subs	r3, #1
 8009556:	b29a      	uxth	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009564:	b29b      	uxth	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d11e      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x23e>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009572:	d119      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	f003 0304 	and.w	r3, r3, #4
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10c      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x22e>
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d007      	beq.n	8009598 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009596:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095a6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d11c      	bne.n	80095f0 <HAL_SPI_TransmitReceive+0x286>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095bc:	b29b      	uxth	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d016      	beq.n	80095f0 <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095cc:	b292      	uxth	r2, r2
 80095ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d4:	1c9a      	adds	r2, r3, #2
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095ec:	2301      	movs	r3, #1
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80095f0:	f7f9 fb1e 	bl	8002c30 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d807      	bhi.n	8009610 <HAL_SPI_TransmitReceive+0x2a6>
 8009600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d003      	beq.n	8009610 <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8009608:	2303      	movs	r3, #3
 800960a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 800960e:	e182      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	f47f af7f 	bne.w	800951a <HAL_SPI_TransmitReceive+0x1b0>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009622:	b29b      	uxth	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	f47f af78 	bne.w	800951a <HAL_SPI_TransmitReceive+0x1b0>
 800962a:	e103      	b.n	8009834 <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d003      	beq.n	800963c <HAL_SPI_TransmitReceive+0x2d2>
 8009634:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009636:	2b01      	cmp	r3, #1
 8009638:	f040 80ef 	bne.w	800981a <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b01      	cmp	r3, #1
 8009644:	d912      	bls.n	800966c <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	881a      	ldrh	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	1c9a      	adds	r2, r3, #2
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b02      	subs	r3, #2
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800966a:	e0d6      	b.n	800981a <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	330c      	adds	r3, #12
 8009676:	7812      	ldrb	r2, [r2, #0]
 8009678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967e:	1c5a      	adds	r2, r3, #1
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009688:	b29b      	uxth	r3, r3
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009692:	e0c2      	b.n	800981a <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d158      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x3ea>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d053      	beq.n	8009754 <HAL_SPI_TransmitReceive+0x3ea>
 80096ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d150      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d912      	bls.n	80096e2 <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c0:	881a      	ldrh	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096cc:	1c9a      	adds	r2, r3, #2
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b02      	subs	r3, #2
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096e0:	e012      	b.n	8009708 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	330c      	adds	r3, #12
 80096ec:	7812      	ldrb	r2, [r2, #0]
 80096ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096fe:	b29b      	uxth	r3, r3
 8009700:	3b01      	subs	r3, #1
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d11e      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x3ea>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800971e:	d119      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	f003 0304 	and.w	r3, r3, #4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10c      	bne.n	8009744 <HAL_SPI_TransmitReceive+0x3da>
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009742:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009752:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b01      	cmp	r3, #1
 8009760:	d148      	bne.n	80097f4 <HAL_SPI_TransmitReceive+0x48a>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d042      	beq.n	80097f4 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009774:	b29b      	uxth	r3, r3
 8009776:	2b01      	cmp	r3, #1
 8009778:	d923      	bls.n	80097c2 <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68da      	ldr	r2, [r3, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009784:	b292      	uxth	r2, r2
 8009786:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	1c9a      	adds	r2, r3, #2
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b02      	subs	r3, #2
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d81f      	bhi.n	80097f0 <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097be:	605a      	str	r2, [r3, #4]
 80097c0:	e016      	b.n	80097f0 <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f103 020c 	add.w	r2, r3, #12
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ce:	7812      	ldrb	r2, [r2, #0]
 80097d0:	b2d2      	uxtb	r2, r2
 80097d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	3b01      	subs	r3, #1
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097f0:	2301      	movs	r3, #1
 80097f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80097f4:	f7f9 fa1c 	bl	8002c30 <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009800:	429a      	cmp	r2, r3
 8009802:	d803      	bhi.n	800980c <HAL_SPI_TransmitReceive+0x4a2>
 8009804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d102      	bne.n	8009812 <HAL_SPI_TransmitReceive+0x4a8>
 800980c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800980e:	2b00      	cmp	r3, #0
 8009810:	d103      	bne.n	800981a <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8009818:	e07d      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800981e:	b29b      	uxth	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	f47f af37 	bne.w	8009694 <HAL_SPI_TransmitReceive+0x32a>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800982c:	b29b      	uxth	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	f47f af30 	bne.w	8009694 <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800983c:	d146      	bne.n	80098cc <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009844:	2201      	movs	r2, #1
 8009846:	2101      	movs	r1, #1
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 f873 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d009      	beq.n	8009868 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009858:	f043 0202 	orr.w	r2, r3, #2
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8009866:	e056      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009870:	d105      	bne.n	800987e <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	e026      	b.n	80098cc <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	330c      	adds	r3, #12
 8009884:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800988e:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	2b02      	cmp	r3, #2
 8009896:	d119      	bne.n	80098cc <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8009898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800989e:	2201      	movs	r2, #1
 80098a0:	2101      	movs	r1, #1
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f846 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b2:	f043 0202 	orr.w	r2, r3, #2
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 80098c0:	e029      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	f003 0310 	and.w	r3, r3, #16
 80098d6:	2b10      	cmp	r3, #16
 80098d8:	d10d      	bne.n	80098f6 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098de:	f043 0202 	orr.w	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80098ee:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f990 	bl	8009c20 <SPI_EndRxTxTransaction>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d006      	beq.n	8009914 <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2220      	movs	r2, #32
 8009910:	661a      	str	r2, [r3, #96]	; 0x60
 8009912:	e000      	b.n	8009916 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8009914:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2201      	movs	r2, #1
 800991a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009926:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 800992a:	4618      	mov	r0, r3
 800992c:	3740      	adds	r7, #64	; 0x40
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	603b      	str	r3, [r7, #0]
 8009940:	4613      	mov	r3, r2
 8009942:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009944:	f7f9 f974 	bl	8002c30 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	1a9b      	subs	r3, r3, r2
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	4413      	add	r3, r2
 8009952:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009954:	f7f9 f96c 	bl	8002c30 <HAL_GetTick>
 8009958:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800995a:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	015b      	lsls	r3, r3, #5
 8009960:	0d1b      	lsrs	r3, r3, #20
 8009962:	69fa      	ldr	r2, [r7, #28]
 8009964:	fb02 f303 	mul.w	r3, r2, r3
 8009968:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800996a:	e054      	b.n	8009a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009972:	d050      	beq.n	8009a16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009974:	f7f9 f95c 	bl	8002c30 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	429a      	cmp	r2, r3
 8009982:	d902      	bls.n	800998a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d13d      	bne.n	8009a06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009998:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099a2:	d111      	bne.n	80099c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ac:	d004      	beq.n	80099b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b6:	d107      	bne.n	80099c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099d0:	d10f      	bne.n	80099f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e017      	b.n	8009a36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	4013      	ands	r3, r2
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	bf0c      	ite	eq
 8009a26:	2301      	moveq	r3, #1
 8009a28:	2300      	movne	r3, #0
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d19b      	bne.n	800996c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3720      	adds	r7, #32
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	2000000c 	.word	0x2000000c

08009a44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	; 0x28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
 8009a50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009a56:	f7f9 f8eb 	bl	8002c30 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5e:	1a9b      	subs	r3, r3, r2
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	4413      	add	r3, r2
 8009a64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009a66:	f7f9 f8e3 	bl	8002c30 <HAL_GetTick>
 8009a6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	330c      	adds	r3, #12
 8009a72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009a74:	4b3d      	ldr	r3, [pc, #244]	; (8009b6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	4413      	add	r3, r2
 8009a7e:	00da      	lsls	r2, r3, #3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	0d1b      	lsrs	r3, r3, #20
 8009a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a86:	fb02 f303 	mul.w	r3, r2, r3
 8009a8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a8c:	e060      	b.n	8009b50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009a94:	d107      	bne.n	8009aa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009aa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aac:	d050      	beq.n	8009b50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009aae:	f7f9 f8bf 	bl	8002c30 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d902      	bls.n	8009ac4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d13d      	bne.n	8009b40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ad2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009adc:	d111      	bne.n	8009b02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ae6:	d004      	beq.n	8009af2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009af0:	d107      	bne.n	8009b02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b0a:	d10f      	bne.n	8009b2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e010      	b.n	8009b62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d196      	bne.n	8009a8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3728      	adds	r7, #40	; 0x28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	2000000c 	.word	0x2000000c

08009b70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b84:	d111      	bne.n	8009baa <SPI_EndRxTransaction+0x3a>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b8e:	d004      	beq.n	8009b9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b98:	d107      	bne.n	8009baa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2180      	movs	r1, #128	; 0x80
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff febd 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d007      	beq.n	8009bd0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bc4:	f043 0220 	orr.w	r2, r3, #32
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e023      	b.n	8009c18 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bd8:	d11d      	bne.n	8009c16 <SPI_EndRxTransaction+0xa6>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be2:	d004      	beq.n	8009bee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bec:	d113      	bne.n	8009c16 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f7ff ff22 	bl	8009a44 <SPI_WaitFifoStateUntilTimeout>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d007      	beq.n	8009c16 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c0a:	f043 0220 	orr.w	r2, r3, #32
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e000      	b.n	8009c18 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f7ff ff03 	bl	8009a44 <SPI_WaitFifoStateUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d007      	beq.n	8009c54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c48:	f043 0220 	orr.w	r2, r3, #32
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e027      	b.n	8009ca4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2180      	movs	r1, #128	; 0x80
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7ff fe68 	bl	8009934 <SPI_WaitFlagStateUntilTimeout>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c6e:	f043 0220 	orr.w	r2, r3, #32
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e014      	b.n	8009ca4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f7ff fedc 	bl	8009a44 <SPI_WaitFifoStateUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c96:	f043 0220 	orr.w	r2, r3, #32
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e000      	b.n	8009ca4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <LL_PWR_SetRadioBusyTrigger>:
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009cb4:	4b06      	ldr	r3, [pc, #24]	; (8009cd0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cbc:	4904      	ldr	r1, [pc, #16]	; (8009cd0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	608b      	str	r3, [r1, #8]
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bc80      	pop	{r7}
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	58000400 	.word	0x58000400

08009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009cd8:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cde:	4a04      	ldr	r2, [pc, #16]	; (8009cf0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009ce8:	bf00      	nop
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr
 8009cf0:	58000400 	.word	0x58000400

08009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009cf8:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cfe:	4a04      	ldr	r2, [pc, #16]	; (8009d10 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d08:	bf00      	nop
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bc80      	pop	{r7}
 8009d0e:	4770      	bx	lr
 8009d10:	58000400 	.word	0x58000400

08009d14 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009d18:	4b03      	ldr	r3, [pc, #12]	; (8009d28 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009d1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d1e:	619a      	str	r2, [r3, #24]
}
 8009d20:	bf00      	nop
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bc80      	pop	{r7}
 8009d26:	4770      	bx	lr
 8009d28:	58000400 	.word	0x58000400

08009d2c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d101      	bne.n	8009d40 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e000      	b.n	8009d42 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	58000400 	.word	0x58000400

08009d50 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d101      	bne.n	8009d64 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009d60:	2301      	movs	r3, #1
 8009d62:	e000      	b.n	8009d66 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bc80      	pop	{r7}
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	58000400 	.word	0x58000400

08009d74 <LL_RCC_RF_DisableReset>:
{
 8009d74:	b480      	push	{r7}
 8009d76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009d8c:	bf00      	nop
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr

08009d94 <LL_RCC_IsRFUnderReset>:
{
 8009d94:	b480      	push	{r7}
 8009d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009da8:	d101      	bne.n	8009dae <LL_RCC_IsRFUnderReset+0x1a>
 8009daa:	2301      	movs	r3, #1
 8009dac:	e000      	b.n	8009db0 <LL_RCC_IsRFUnderReset+0x1c>
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bc80      	pop	{r7}
 8009db6:	4770      	bx	lr

08009db8 <LL_EXTI_EnableIT_32_63>:
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009dc0:	4b06      	ldr	r3, [pc, #24]	; (8009ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8009dc2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009dc6:	4905      	ldr	r1, [pc, #20]	; (8009ddc <LL_EXTI_EnableIT_32_63+0x24>)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bc80      	pop	{r7}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	58000800 	.word	0x58000800

08009de0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	73fb      	strb	r3, [r7, #15]
    return status;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	e052      	b.n	8009e9c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	799b      	ldrb	r3, [r3, #6]
 8009dfe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009e00:	7bbb      	ldrb	r3, [r7, #14]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_SUBGHZ_Init+0x2c>
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d109      	bne.n	8009e20 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7f8 fd60 	bl	80028d8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009e18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e1c:	f7ff ffcc 	bl	8009db8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d126      	bne.n	8009e74 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2202      	movs	r2, #2
 8009e2a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009e2c:	f7ff ffa2 	bl	8009d74 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e30:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <HAL_SUBGHZ_Init+0xc4>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	4613      	mov	r3, r2
 8009e36:	00db      	lsls	r3, r3, #3
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	0cdb      	lsrs	r3, r3, #19
 8009e3e:	2264      	movs	r2, #100	; 0x64
 8009e40:	fb02 f303 	mul.w	r3, r2, r3
 8009e44:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d105      	bne.n	8009e58 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	609a      	str	r2, [r3, #8]
        break;
 8009e56:	e007      	b.n	8009e68 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009e5e:	f7ff ff99 	bl	8009d94 <LL_RCC_IsRFUnderReset>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1ee      	bne.n	8009e46 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009e68:	f7ff ff34 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009e6c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009e70:	f7ff ff1c 	bl	8009cac <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009e74:	f7ff ff4e 	bl	8009d14 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 faac 	bl	800a3e0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	719a      	strb	r2, [r3, #6]

  return status;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	2000000c 	.word	0x2000000c

08009ea8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	607a      	str	r2, [r7, #4]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	817b      	strh	r3, [r7, #10]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	799b      	ldrb	r3, [r3, #6]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d14a      	bne.n	8009f5c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	795b      	ldrb	r3, [r3, #5]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d101      	bne.n	8009ed2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e045      	b.n	8009f5e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2202      	movs	r2, #2
 8009edc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f000 fb4c 	bl	800a57c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ee4:	f7ff ff06 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009ee8:	210d      	movs	r1, #13
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fa98 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009ef0:	897b      	ldrh	r3, [r7, #10]
 8009ef2:	0a1b      	lsrs	r3, r3, #8
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	4619      	mov	r1, r3
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 fa90 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f00:	897b      	ldrh	r3, [r7, #10]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	4619      	mov	r1, r3
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 fa8a 	bl	800a420 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	82bb      	strh	r3, [r7, #20]
 8009f10:	e00a      	b.n	8009f28 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f12:	8abb      	ldrh	r3, [r7, #20]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	4413      	add	r3, r2
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fa7f 	bl	800a420 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f22:	8abb      	ldrh	r3, [r7, #20]
 8009f24:	3301      	adds	r3, #1
 8009f26:	82bb      	strh	r3, [r7, #20]
 8009f28:	8aba      	ldrh	r2, [r7, #20]
 8009f2a:	893b      	ldrh	r3, [r7, #8]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d3f0      	bcc.n	8009f12 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f30:	f7ff fed0 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 fb45 	bl	800a5c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	75fb      	strb	r3, [r7, #23]
 8009f46:	e001      	b.n	8009f4c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	715a      	strb	r2, [r3, #5]

    return status;
 8009f58:	7dfb      	ldrb	r3, [r7, #23]
 8009f5a:	e000      	b.n	8009f5e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009f5c:	2302      	movs	r3, #2
  }
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b088      	sub	sp, #32
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	461a      	mov	r2, r3
 8009f72:	460b      	mov	r3, r1
 8009f74:	817b      	strh	r3, [r7, #10]
 8009f76:	4613      	mov	r3, r2
 8009f78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	799b      	ldrb	r3, [r3, #6]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d14a      	bne.n	800a01e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	795b      	ldrb	r3, [r3, #5]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d101      	bne.n	8009f94 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009f90:	2302      	movs	r3, #2
 8009f92:	e045      	b.n	800a020 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2201      	movs	r2, #1
 8009f98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 faee 	bl	800a57c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fa0:	f7ff fea8 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009fa4:	211d      	movs	r1, #29
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 fa3a 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009fac:	897b      	ldrh	r3, [r7, #10]
 8009fae:	0a1b      	lsrs	r3, r3, #8
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f000 fa32 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009fbc:	897b      	ldrh	r3, [r7, #10]
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f000 fa2c 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009fc8:	2100      	movs	r1, #0
 8009fca:	68f8      	ldr	r0, [r7, #12]
 8009fcc:	f000 fa28 	bl	800a420 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	82fb      	strh	r3, [r7, #22]
 8009fd4:	e009      	b.n	8009fea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009fd6:	69b9      	ldr	r1, [r7, #24]
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f000 fa77 	bl	800a4cc <SUBGHZSPI_Receive>
      pData++;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009fe4:	8afb      	ldrh	r3, [r7, #22]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	82fb      	strh	r3, [r7, #22]
 8009fea:	8afa      	ldrh	r2, [r7, #22]
 8009fec:	893b      	ldrh	r3, [r7, #8]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d3f1      	bcc.n	8009fd6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009ff2:	f7ff fe6f 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fae4 	bl	800a5c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	77fb      	strb	r3, [r7, #31]
 800a008:	e001      	b.n	800a00e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2201      	movs	r2, #1
 800a012:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	715a      	strb	r2, [r3, #5]

    return status;
 800a01a:	7ffb      	ldrb	r3, [r7, #31]
 800a01c:	e000      	b.n	800a020 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a01e:	2302      	movs	r3, #2
  }
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	607a      	str	r2, [r7, #4]
 800a032:	461a      	mov	r2, r3
 800a034:	460b      	mov	r3, r1
 800a036:	72fb      	strb	r3, [r7, #11]
 800a038:	4613      	mov	r3, r2
 800a03a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	799b      	ldrb	r3, [r3, #6]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b01      	cmp	r3, #1
 800a044:	d14a      	bne.n	800a0dc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	795b      	ldrb	r3, [r3, #5]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d101      	bne.n	800a052 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a04e:	2302      	movs	r3, #2
 800a050:	e045      	b.n	800a0de <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 fa8f 	bl	800a57c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a05e:	7afb      	ldrb	r3, [r7, #11]
 800a060:	2b84      	cmp	r3, #132	; 0x84
 800a062:	d002      	beq.n	800a06a <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a064:	7afb      	ldrb	r3, [r7, #11]
 800a066:	2b94      	cmp	r3, #148	; 0x94
 800a068:	d103      	bne.n	800a072 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	711a      	strb	r2, [r3, #4]
 800a070:	e002      	b.n	800a078 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a078:	f7ff fe3c 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a07c:	7afb      	ldrb	r3, [r7, #11]
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 f9cd 	bl	800a420 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a086:	2300      	movs	r3, #0
 800a088:	82bb      	strh	r3, [r7, #20]
 800a08a:	e00a      	b.n	800a0a2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a08c:	8abb      	ldrh	r3, [r7, #20]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	4413      	add	r3, r2
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	4619      	mov	r1, r3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 f9c2 	bl	800a420 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a09c:	8abb      	ldrh	r3, [r7, #20]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	82bb      	strh	r3, [r7, #20]
 800a0a2:	8aba      	ldrh	r2, [r7, #20]
 800a0a4:	893b      	ldrh	r3, [r7, #8]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d3f0      	bcc.n	800a08c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a0aa:	f7ff fe13 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	2b84      	cmp	r3, #132	; 0x84
 800a0b2:	d002      	beq.n	800a0ba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 fa85 	bl	800a5c4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	75fb      	strb	r3, [r7, #23]
 800a0c6:	e001      	b.n	800a0cc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	715a      	strb	r2, [r3, #5]

    return status;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	e000      	b.n	800a0de <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a0dc:	2302      	movs	r3, #2
  }
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b088      	sub	sp, #32
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	72fb      	strb	r3, [r7, #11]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	799b      	ldrb	r3, [r3, #6]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	d13d      	bne.n	800a184 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	795b      	ldrb	r3, [r3, #5]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a110:	2302      	movs	r3, #2
 800a112:	e038      	b.n	800a186 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2201      	movs	r2, #1
 800a118:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fa2e 	bl	800a57c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a120:	f7ff fde8 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	4619      	mov	r1, r3
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 f979 	bl	800a420 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a12e:	2100      	movs	r1, #0
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 f975 	bl	800a420 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a136:	2300      	movs	r3, #0
 800a138:	82fb      	strh	r3, [r7, #22]
 800a13a:	e009      	b.n	800a150 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a13c:	69b9      	ldr	r1, [r7, #24]
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 f9c4 	bl	800a4cc <SUBGHZSPI_Receive>
      pData++;
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	3301      	adds	r3, #1
 800a148:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a14a:	8afb      	ldrh	r3, [r7, #22]
 800a14c:	3301      	adds	r3, #1
 800a14e:	82fb      	strh	r3, [r7, #22]
 800a150:	8afa      	ldrh	r2, [r7, #22]
 800a152:	893b      	ldrh	r3, [r7, #8]
 800a154:	429a      	cmp	r2, r3
 800a156:	d3f1      	bcc.n	800a13c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a158:	f7ff fdbc 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 fa31 	bl	800a5c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	77fb      	strb	r3, [r7, #31]
 800a16e:	e001      	b.n	800a174 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2201      	movs	r2, #1
 800a178:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	715a      	strb	r2, [r3, #5]

    return status;
 800a180:	7ffb      	ldrb	r3, [r7, #31]
 800a182:	e000      	b.n	800a186 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
  }
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b086      	sub	sp, #24
 800a192:	af00      	add	r7, sp, #0
 800a194:	60f8      	str	r0, [r7, #12]
 800a196:	607a      	str	r2, [r7, #4]
 800a198:	461a      	mov	r2, r3
 800a19a:	460b      	mov	r3, r1
 800a19c:	72fb      	strb	r3, [r7, #11]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	799b      	ldrb	r3, [r3, #6]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d13e      	bne.n	800a22a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	795b      	ldrb	r3, [r3, #5]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e039      	b.n	800a22c <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f000 f9dc 	bl	800a57c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a1c4:	f7ff fd96 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a1c8:	210e      	movs	r1, #14
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 f928 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a1d0:	7afb      	ldrb	r3, [r7, #11]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 f923 	bl	800a420 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	82bb      	strh	r3, [r7, #20]
 800a1de:	e00a      	b.n	800a1f6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a1e0:	8abb      	ldrh	r3, [r7, #20]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 f918 	bl	800a420 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a1f0:	8abb      	ldrh	r3, [r7, #20]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	82bb      	strh	r3, [r7, #20]
 800a1f6:	8aba      	ldrh	r2, [r7, #20]
 800a1f8:	893b      	ldrh	r3, [r7, #8]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d3f0      	bcc.n	800a1e0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a1fe:	f7ff fd69 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f9de 	bl	800a5c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	75fb      	strb	r3, [r7, #23]
 800a214:	e001      	b.n	800a21a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	715a      	strb	r2, [r3, #5]

    return status;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
 800a228:	e000      	b.n	800a22c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a22a:	2302      	movs	r3, #2
  }
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	461a      	mov	r2, r3
 800a240:	460b      	mov	r3, r1
 800a242:	72fb      	strb	r3, [r7, #11]
 800a244:	4613      	mov	r3, r2
 800a246:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	799b      	ldrb	r3, [r3, #6]
 800a250:	b2db      	uxtb	r3, r3
 800a252:	2b01      	cmp	r3, #1
 800a254:	d141      	bne.n	800a2da <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	795b      	ldrb	r3, [r3, #5]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a25e:	2302      	movs	r3, #2
 800a260:	e03c      	b.n	800a2dc <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2201      	movs	r2, #1
 800a266:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 f987 	bl	800a57c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a26e:	f7ff fd41 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a272:	211e      	movs	r1, #30
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f8d3 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a27a:	7afb      	ldrb	r3, [r7, #11]
 800a27c:	4619      	mov	r1, r3
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 f8ce 	bl	800a420 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a284:	2100      	movs	r1, #0
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f8ca 	bl	800a420 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a28c:	2300      	movs	r3, #0
 800a28e:	82fb      	strh	r3, [r7, #22]
 800a290:	e009      	b.n	800a2a6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a292:	69b9      	ldr	r1, [r7, #24]
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f000 f919 	bl	800a4cc <SUBGHZSPI_Receive>
      pData++;
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	3301      	adds	r3, #1
 800a29e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a2a0:	8afb      	ldrh	r3, [r7, #22]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	82fb      	strh	r3, [r7, #22]
 800a2a6:	8afa      	ldrh	r2, [r7, #22]
 800a2a8:	893b      	ldrh	r3, [r7, #8]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d3f1      	bcc.n	800a292 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2ae:	f7ff fd11 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 f986 	bl	800a5c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	77fb      	strb	r3, [r7, #31]
 800a2c4:	e001      	b.n	800a2ca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	715a      	strb	r2, [r3, #5]

    return status;
 800a2d6:	7ffb      	ldrb	r3, [r7, #31]
 800a2d8:	e000      	b.n	800a2dc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a2da:	2302      	movs	r3, #2
  }
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a2f0:	f107 020c 	add.w	r2, r7, #12
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	2112      	movs	r1, #18
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fef4 	bl	800a0e6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a2fe:	7b3b      	ldrb	r3, [r7, #12]
 800a300:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a302:	89fb      	ldrh	r3, [r7, #14]
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	b21a      	sxth	r2, r3
 800a308:	7b7b      	ldrb	r3, [r7, #13]
 800a30a:	b21b      	sxth	r3, r3
 800a30c:	4313      	orrs	r3, r2
 800a30e:	b21b      	sxth	r3, r3
 800a310:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a312:	f107 020c 	add.w	r2, r7, #12
 800a316:	2302      	movs	r3, #2
 800a318:	2102      	movs	r1, #2
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff fe84 	bl	800a028 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f012 fe48 	bl	801cfc0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a330:	89fb      	ldrh	r3, [r7, #14]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f012 fe4e 	bl	801cfdc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a340:	89fb      	ldrh	r3, [r7, #14]
 800a342:	f003 0304 	and.w	r3, r3, #4
 800a346:	2b00      	cmp	r3, #0
 800a348:	d002      	beq.n	800a350 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f012 fe9e 	bl	801d08c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a350:	89fb      	ldrh	r3, [r7, #14]
 800a352:	f003 0308 	and.w	r3, r3, #8
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f012 fea4 	bl	801d0a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a360:	89fb      	ldrh	r3, [r7, #14]
 800a362:	f003 0310 	and.w	r3, r3, #16
 800a366:	2b00      	cmp	r3, #0
 800a368:	d002      	beq.n	800a370 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f012 feaa 	bl	801d0c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a370:	89fb      	ldrh	r3, [r7, #14]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f012 fe78 	bl	801d070 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a380:	89fb      	ldrh	r3, [r7, #14]
 800a382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f012 fe34 	bl	801cff8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a390:	89fb      	ldrh	r3, [r7, #14]
 800a392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00d      	beq.n	800a3b6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a39a:	89fb      	ldrh	r3, [r7, #14]
 800a39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d004      	beq.n	800a3ae <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f012 fe34 	bl	801d014 <HAL_SUBGHZ_CADStatusCallback>
 800a3ac:	e003      	b.n	800a3b6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f012 fe2f 	bl	801d014 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a3b6:	89fb      	ldrh	r3, [r7, #14]
 800a3b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f012 fe45 	bl	801d050 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a3c6:	89fb      	ldrh	r3, [r7, #14]
 800a3c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d002      	beq.n	800a3d6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f012 fe85 	bl	801d0e0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a3e8:	4b0c      	ldr	r3, [pc, #48]	; (800a41c <SUBGHZSPI_Init+0x3c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a0b      	ldr	r2, [pc, #44]	; (800a41c <SUBGHZSPI_Init+0x3c>)
 800a3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3f2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a3f4:	4a09      	ldr	r2, [pc, #36]	; (800a41c <SUBGHZSPI_Init+0x3c>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a3fc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <SUBGHZSPI_Init+0x3c>)
 800a400:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a404:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <SUBGHZSPI_Init+0x3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a04      	ldr	r2, [pc, #16]	; (800a41c <SUBGHZSPI_Init+0x3c>)
 800a40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a410:	6013      	str	r3, [r2, #0]
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr
 800a41c:	58010000 	.word	0x58010000

0800a420 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	460b      	mov	r3, r1
 800a42a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a430:	4b23      	ldr	r3, [pc, #140]	; (800a4c0 <SUBGHZSPI_Transmit+0xa0>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	4613      	mov	r3, r2
 800a436:	00db      	lsls	r3, r3, #3
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	0cdb      	lsrs	r3, r3, #19
 800a43e:	2264      	movs	r2, #100	; 0x64
 800a440:	fb02 f303 	mul.w	r3, r2, r3
 800a444:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d105      	bne.n	800a458 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	609a      	str	r2, [r3, #8]
      break;
 800a456:	e008      	b.n	800a46a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3b01      	subs	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a45e:	4b19      	ldr	r3, [pc, #100]	; (800a4c4 <SUBGHZSPI_Transmit+0xa4>)
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f003 0302 	and.w	r3, r3, #2
 800a466:	2b02      	cmp	r3, #2
 800a468:	d1ed      	bne.n	800a446 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a46a:	4b17      	ldr	r3, [pc, #92]	; (800a4c8 <SUBGHZSPI_Transmit+0xa8>)
 800a46c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	78fa      	ldrb	r2, [r7, #3]
 800a472:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a474:	4b12      	ldr	r3, [pc, #72]	; (800a4c0 <SUBGHZSPI_Transmit+0xa0>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	4613      	mov	r3, r2
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	0cdb      	lsrs	r3, r3, #19
 800a482:	2264      	movs	r2, #100	; 0x64
 800a484:	fb02 f303 	mul.w	r3, r2, r3
 800a488:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d105      	bne.n	800a49c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	609a      	str	r2, [r3, #8]
      break;
 800a49a:	e008      	b.n	800a4ae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <SUBGHZSPI_Transmit+0xa4>)
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d1ed      	bne.n	800a48a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <SUBGHZSPI_Transmit+0xa4>)
 800a4b0:	68db      	ldr	r3, [r3, #12]

  return status;
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bc80      	pop	{r7}
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	2000000c 	.word	0x2000000c
 800a4c4:	58010000 	.word	0x58010000
 800a4c8:	5801000c 	.word	0x5801000c

0800a4cc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a4da:	4b25      	ldr	r3, [pc, #148]	; (800a570 <SUBGHZSPI_Receive+0xa4>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	1a9b      	subs	r3, r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	0cdb      	lsrs	r3, r3, #19
 800a4e8:	2264      	movs	r2, #100	; 0x64
 800a4ea:	fb02 f303 	mul.w	r3, r2, r3
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	609a      	str	r2, [r3, #8]
      break;
 800a500:	e008      	b.n	800a514 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3b01      	subs	r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a508:	4b1a      	ldr	r3, [pc, #104]	; (800a574 <SUBGHZSPI_Receive+0xa8>)
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	f003 0302 	and.w	r3, r3, #2
 800a510:	2b02      	cmp	r3, #2
 800a512:	d1ed      	bne.n	800a4f0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a514:	4b18      	ldr	r3, [pc, #96]	; (800a578 <SUBGHZSPI_Receive+0xac>)
 800a516:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	22ff      	movs	r2, #255	; 0xff
 800a51c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a51e:	4b14      	ldr	r3, [pc, #80]	; (800a570 <SUBGHZSPI_Receive+0xa4>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4613      	mov	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	0cdb      	lsrs	r3, r3, #19
 800a52c:	2264      	movs	r2, #100	; 0x64
 800a52e:	fb02 f303 	mul.w	r3, r2, r3
 800a532:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d105      	bne.n	800a546 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	609a      	str	r2, [r3, #8]
      break;
 800a544:	e008      	b.n	800a558 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3b01      	subs	r3, #1
 800a54a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a54c:	4b09      	ldr	r3, [pc, #36]	; (800a574 <SUBGHZSPI_Receive+0xa8>)
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b01      	cmp	r3, #1
 800a556:	d1ed      	bne.n	800a534 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a558:	4b06      	ldr	r3, [pc, #24]	; (800a574 <SUBGHZSPI_Receive+0xa8>)
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	701a      	strb	r2, [r3, #0]

  return status;
 800a562:	7dfb      	ldrb	r3, [r7, #23]
}
 800a564:	4618      	mov	r0, r3
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	bc80      	pop	{r7}
 800a56c:	4770      	bx	lr
 800a56e:	bf00      	nop
 800a570:	2000000c 	.word	0x2000000c
 800a574:	58010000 	.word	0x58010000
 800a578:	5801000c 	.word	0x5801000c

0800a57c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	791b      	ldrb	r3, [r3, #4]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d111      	bne.n	800a5b0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a58c:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <SUBGHZ_CheckDeviceReady+0x44>)
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	4613      	mov	r3, r2
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	4413      	add	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	0c1b      	lsrs	r3, r3, #16
 800a59a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a59c:	f7ff fbaa 	bl	8009cf4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f9      	bne.n	800a5a0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a5ac:	f7ff fb92 	bl	8009cd4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f807 	bl	800a5c4 <SUBGHZ_WaitOnBusy>
 800a5b6:	4603      	mov	r3, r0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	2000000c 	.word	0x2000000c

0800a5c4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a5d0:	4b12      	ldr	r3, [pc, #72]	; (800a61c <SUBGHZ_WaitOnBusy+0x58>)
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	4413      	add	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	0d1b      	lsrs	r3, r3, #20
 800a5de:	2264      	movs	r2, #100	; 0x64
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
 800a5e4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a5e6:	f7ff fbb3 	bl	8009d50 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a5ea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d105      	bne.n	800a5fe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	609a      	str	r2, [r3, #8]
      break;
 800a5fc:	e009      	b.n	800a612 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	3b01      	subs	r3, #1
 800a602:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a604:	f7ff fb92 	bl	8009d2c <LL_PWR_IsActiveFlag_RFBUSYS>
 800a608:	4602      	mov	r2, r0
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4013      	ands	r3, r2
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d0e9      	beq.n	800a5e6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	3718      	adds	r7, #24
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	2000000c 	.word	0x2000000c

0800a620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e049      	b.n	800a6c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d106      	bne.n	800a64c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7f8 fbee 	bl	8002e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2202      	movs	r2, #2
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3304      	adds	r3, #4
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	f000 f9c6 	bl	800a9f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2201      	movs	r2, #1
 800a688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
	...

0800a6d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d001      	beq.n	800a6e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e036      	b.n	800a756 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68da      	ldr	r2, [r3, #12]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f042 0201 	orr.w	r2, r2, #1
 800a6fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a16      	ldr	r2, [pc, #88]	; (800a760 <HAL_TIM_Base_Start_IT+0x90>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d004      	beq.n	800a714 <HAL_TIM_Base_Start_IT+0x44>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a712:	d115      	bne.n	800a740 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689a      	ldr	r2, [r3, #8]
 800a71a:	4b12      	ldr	r3, [pc, #72]	; (800a764 <HAL_TIM_Base_Start_IT+0x94>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b06      	cmp	r3, #6
 800a724:	d015      	beq.n	800a752 <HAL_TIM_Base_Start_IT+0x82>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72c:	d011      	beq.n	800a752 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f042 0201 	orr.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a73e:	e008      	b.n	800a752 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	e000      	b.n	800a754 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bc80      	pop	{r7}
 800a75e:	4770      	bx	lr
 800a760:	40012c00 	.word	0x40012c00
 800a764:	00010007 	.word	0x00010007

0800a768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0302 	and.w	r3, r3, #2
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d122      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f003 0302 	and.w	r3, r3, #2
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d11b      	bne.n	800a7c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f06f 0202 	mvn.w	r2, #2
 800a794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	f003 0303 	and.w	r3, r3, #3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f904 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a7b0:	e005      	b.n	800a7be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f8f7 	bl	800a9a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f906 	bl	800a9ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	f003 0304 	and.w	r3, r3, #4
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	d122      	bne.n	800a818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d11b      	bne.n	800a818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f06f 0204 	mvn.w	r2, #4
 800a7e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f8da 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a804:	e005      	b.n	800a812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 f8cd 	bl	800a9a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f8dc 	bl	800a9ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b08      	cmp	r3, #8
 800a824:	d122      	bne.n	800a86c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	f003 0308 	and.w	r3, r3, #8
 800a830:	2b08      	cmp	r3, #8
 800a832:	d11b      	bne.n	800a86c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f06f 0208 	mvn.w	r2, #8
 800a83c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2204      	movs	r2, #4
 800a842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d003      	beq.n	800a85a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8b0 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a858:	e005      	b.n	800a866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f8a3 	bl	800a9a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f8b2 	bl	800a9ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	691b      	ldr	r3, [r3, #16]
 800a872:	f003 0310 	and.w	r3, r3, #16
 800a876:	2b10      	cmp	r3, #16
 800a878:	d122      	bne.n	800a8c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b10      	cmp	r3, #16
 800a886:	d11b      	bne.n	800a8c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f06f 0210 	mvn.w	r2, #16
 800a890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2208      	movs	r2, #8
 800a896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d003      	beq.n	800a8ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f886 	bl	800a9b8 <HAL_TIM_IC_CaptureCallback>
 800a8ac:	e005      	b.n	800a8ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 f879 	bl	800a9a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f888 	bl	800a9ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d10e      	bne.n	800a8ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d107      	bne.n	800a8ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f06f 0201 	mvn.w	r2, #1
 800a8e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7f7 fcae 	bl	8002248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f6:	2b80      	cmp	r3, #128	; 0x80
 800a8f8:	d10e      	bne.n	800a918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a904:	2b80      	cmp	r3, #128	; 0x80
 800a906:	d107      	bne.n	800a918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 f8d7 	bl	800aac6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a926:	d10e      	bne.n	800a946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a932:	2b80      	cmp	r3, #128	; 0x80
 800a934:	d107      	bne.n	800a946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a93e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f8c9 	bl	800aad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a950:	2b40      	cmp	r3, #64	; 0x40
 800a952:	d10e      	bne.n	800a972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d107      	bne.n	800a972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a96a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f835 	bl	800a9dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	691b      	ldr	r3, [r3, #16]
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	d10e      	bne.n	800a99e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d107      	bne.n	800a99e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f06f 0220 	mvn.w	r2, #32
 800a996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f88b 	bl	800aab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a99e:	bf00      	nop
 800a9a0:	3708      	adds	r7, #8
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bc80      	pop	{r7}
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bc80      	pop	{r7}
 800a9c8:	4770      	bx	lr

0800a9ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bc80      	pop	{r7}
 800a9da:	4770      	bx	lr

0800a9dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bc80      	pop	{r7}
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a29      	ldr	r2, [pc, #164]	; (800aaa8 <TIM_Base_SetConfig+0xb8>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d003      	beq.n	800aa10 <TIM_Base_SetConfig+0x20>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa0e:	d108      	bne.n	800aa22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a20      	ldr	r2, [pc, #128]	; (800aaa8 <TIM_Base_SetConfig+0xb8>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d00b      	beq.n	800aa42 <TIM_Base_SetConfig+0x52>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa30:	d007      	beq.n	800aa42 <TIM_Base_SetConfig+0x52>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a1d      	ldr	r2, [pc, #116]	; (800aaac <TIM_Base_SetConfig+0xbc>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d003      	beq.n	800aa42 <TIM_Base_SetConfig+0x52>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a1c      	ldr	r2, [pc, #112]	; (800aab0 <TIM_Base_SetConfig+0xc0>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d108      	bne.n	800aa54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4a0b      	ldr	r2, [pc, #44]	; (800aaa8 <TIM_Base_SetConfig+0xb8>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d007      	beq.n	800aa90 <TIM_Base_SetConfig+0xa0>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a0a      	ldr	r2, [pc, #40]	; (800aaac <TIM_Base_SetConfig+0xbc>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d003      	beq.n	800aa90 <TIM_Base_SetConfig+0xa0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <TIM_Base_SetConfig+0xc0>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d103      	bne.n	800aa98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	691a      	ldr	r2, [r3, #16]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	615a      	str	r2, [r3, #20]
}
 800aa9e:	bf00      	nop
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bc80      	pop	{r7}
 800aaa6:	4770      	bx	lr
 800aaa8:	40012c00 	.word	0x40012c00
 800aaac:	40014400 	.word	0x40014400
 800aab0:	40014800 	.word	0x40014800

0800aab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bc80      	pop	{r7}
 800aac4:	4770      	bx	lr

0800aac6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aac6:	b480      	push	{r7}
 800aac8:	b083      	sub	sp, #12
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aace:	bf00      	nop
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bc80      	pop	{r7}
 800aad6:	4770      	bx	lr

0800aad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bc80      	pop	{r7}
 800aae8:	4770      	bx	lr

0800aaea <LL_RCC_GetUSARTClockSource>:
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800aaf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	401a      	ands	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	041b      	lsls	r3, r3, #16
 800ab02:	4313      	orrs	r3, r2
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bc80      	pop	{r7}
 800ab0c:	4770      	bx	lr

0800ab0e <LL_RCC_GetLPUARTClockSource>:
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b083      	sub	sp, #12
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ab16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4013      	ands	r3, r2
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bc80      	pop	{r7}
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e042      	b.n	800abc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7f8 fcf7 	bl	8003544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2224      	movs	r2, #36	; 0x24
 800ab5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f022 0201 	bic.w	r2, r2, #1
 800ab6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fc3a 	bl	800b3e8 <UART_SetConfig>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d101      	bne.n	800ab7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e022      	b.n	800abc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fea2 	bl	800b8d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	689a      	ldr	r2, [r3, #8]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0201 	orr.w	r2, r2, #1
 800abba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 ff28 	bl	800ba12 <UART_CheckIdleState>
 800abc2:	4603      	mov	r3, r0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08a      	sub	sp, #40	; 0x28
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d137      	bne.n	800ac54 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <HAL_UART_Receive_IT+0x24>
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e030      	b.n	800ac56 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a18      	ldr	r2, [pc, #96]	; (800ac60 <HAL_UART_Receive_IT+0x94>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d01f      	beq.n	800ac44 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d018      	beq.n	800ac44 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	e853 3f00 	ldrex	r3, [r3]
 800ac1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	623b      	str	r3, [r7, #32]
 800ac32:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac34:	69f9      	ldr	r1, [r7, #28]
 800ac36:	6a3a      	ldr	r2, [r7, #32]
 800ac38:	e841 2300 	strex	r3, r2, [r1]
 800ac3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1e6      	bne.n	800ac12 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac44:	88fb      	ldrh	r3, [r7, #6]
 800ac46:	461a      	mov	r2, r3
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 fff8 	bl	800bc40 <UART_Start_Receive_IT>
 800ac50:	4603      	mov	r3, r0
 800ac52:	e000      	b.n	800ac56 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac54:	2302      	movs	r3, #2
  }
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3728      	adds	r7, #40	; 0x28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	40008000 	.word	0x40008000

0800ac64 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	; 0x28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d167      	bne.n	800ad4c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <HAL_UART_Transmit_DMA+0x24>
 800ac82:	88fb      	ldrh	r3, [r7, #6]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e060      	b.n	800ad4e <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	88fa      	ldrh	r2, [r7, #6]
 800ac96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	88fa      	ldrh	r2, [r7, #6]
 800ac9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2221      	movs	r2, #33	; 0x21
 800acae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d028      	beq.n	800ad0c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acbe:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <HAL_UART_Transmit_DMA+0xf4>)
 800acc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc6:	4a25      	ldr	r2, [pc, #148]	; (800ad5c <HAL_UART_Transmit_DMA+0xf8>)
 800acc8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acce:	4a24      	ldr	r2, [pc, #144]	; (800ad60 <HAL_UART_Transmit_DMA+0xfc>)
 800acd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acd6:	2200      	movs	r2, #0
 800acd8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace2:	4619      	mov	r1, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3328      	adds	r3, #40	; 0x28
 800acea:	461a      	mov	r2, r3
 800acec:	88fb      	ldrh	r3, [r7, #6]
 800acee:	f7fa faa9 	bl	8005244 <HAL_DMA_Start_IT>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d009      	beq.n	800ad0c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2210      	movs	r2, #16
 800acfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e020      	b.n	800ad4e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2240      	movs	r2, #64	; 0x40
 800ad12:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3308      	adds	r3, #8
 800ad1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	e853 3f00 	ldrex	r3, [r3]
 800ad22:	613b      	str	r3, [r7, #16]
   return(result);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	3308      	adds	r3, #8
 800ad32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad34:	623a      	str	r2, [r7, #32]
 800ad36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad38:	69f9      	ldr	r1, [r7, #28]
 800ad3a:	6a3a      	ldr	r2, [r7, #32]
 800ad3c:	e841 2300 	strex	r3, r2, [r1]
 800ad40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1e5      	bne.n	800ad14 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e000      	b.n	800ad4e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ad4c:	2302      	movs	r3, #2
  }
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	0800bfcb 	.word	0x0800bfcb
 800ad5c:	0800c065 	.word	0x0800c065
 800ad60:	0800c081 	.word	0x0800c081

0800ad64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0ba      	sub	sp, #232	; 0xe8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad92:	4013      	ands	r3, r2
 800ad94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d11b      	bne.n	800add8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d015      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 82e3 	beq.w	800b394 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      }
      return;
 800add6:	e2dd      	b.n	800b394 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800add8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8123 	beq.w	800b028 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ade2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ade6:	4b8d      	ldr	r3, [pc, #564]	; (800b01c <HAL_UART_IRQHandler+0x2b8>)
 800ade8:	4013      	ands	r3, r2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800adf2:	4b8b      	ldr	r3, [pc, #556]	; (800b020 <HAL_UART_IRQHandler+0x2bc>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8116 	beq.w	800b028 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d011      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
 800ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae22:	f043 0201 	orr.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
 800ae38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae52:	f043 0204 	orr.w	r2, r3, #4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
 800ae68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2204      	movs	r2, #4
 800ae7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae82:	f043 0202 	orr.w	r2, r3, #2
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d017      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aea8:	4b5c      	ldr	r3, [pc, #368]	; (800b01c <HAL_UART_IRQHandler+0x2b8>)
 800aeaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2208      	movs	r2, #8
 800aeb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aebe:	f043 0208 	orr.w	r2, r3, #8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d012      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef0:	f043 0220 	orr.w	r2, r3, #32
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8249 	beq.w	800b398 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d013      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d105      	bne.n	800af2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d005      	beq.n	800af5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d054      	beq.n	800b008 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 ffce 	bl	800bf00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6e:	2b40      	cmp	r3, #64	; 0x40
 800af70:	d146      	bne.n	800b000 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1d9      	bne.n	800af72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d017      	beq.n	800aff8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afce:	4a15      	ldr	r2, [pc, #84]	; (800b024 <HAL_UART_IRQHandler+0x2c0>)
 800afd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afd8:	4618      	mov	r0, r3
 800afda:	f7fa fa0f 	bl	80053fc <HAL_DMA_Abort_IT>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d019      	beq.n	800b018 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800aff2:	4610      	mov	r0, r2
 800aff4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff6:	e00f      	b.n	800b018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f9e0 	bl	800b3be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affe:	e00b      	b.n	800b018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f9dc 	bl	800b3be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b006:	e007      	b.n	800b018 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f9d8 	bl	800b3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b016:	e1bf      	b.n	800b398 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b018:	bf00      	nop
    return;
 800b01a:	e1bd      	b.n	800b398 <HAL_UART_IRQHandler+0x634>
 800b01c:	10000001 	.word	0x10000001
 800b020:	04000120 	.word	0x04000120
 800b024:	0800c101 	.word	0x0800c101

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	f040 8153 	bne.w	800b2d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b036:	f003 0310 	and.w	r3, r3, #16
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 814c 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 8145 	beq.w	800b2d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2210      	movs	r2, #16
 800b054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b060:	2b40      	cmp	r3, #64	; 0x40
 800b062:	f040 80bb 	bne.w	800b1dc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 818f 	beq.w	800b39c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b084:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b088:	429a      	cmp	r2, r3
 800b08a:	f080 8187 	bcs.w	800b39c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0320 	and.w	r3, r3, #32
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f040 8087 	bne.w	800b1ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1da      	bne.n	800b0ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b108:	f023 0301 	bic.w	r3, r3, #1
 800b10c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	3308      	adds	r3, #8
 800b116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b11a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b11e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b120:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b12c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e1      	bne.n	800b0f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3308      	adds	r3, #8
 800b152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b156:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b15c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b15e:	e841 2300 	strex	r3, r2, [r1]
 800b162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1e3      	bne.n	800b132 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2220      	movs	r2, #32
 800b16e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b188:	f023 0310 	bic.w	r3, r3, #16
 800b18c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b19a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b19c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e4      	bne.n	800b178 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fa f8c3 	bl	8005340 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f8fb 	bl	800b3d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1da:	e0df      	b.n	800b39c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 80d1 	beq.w	800b3a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b1fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b202:	2b00      	cmp	r3, #0
 800b204:	f000 80cc 	beq.w	800b3a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b21c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b22a:	647b      	str	r3, [r7, #68]	; 0x44
 800b22c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e4      	bne.n	800b208 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3308      	adds	r3, #8
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	623b      	str	r3, [r7, #32]
   return(result);
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3308      	adds	r3, #8
 800b262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b266:	633a      	str	r2, [r7, #48]	; 0x30
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b26c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e1      	bne.n	800b23e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2220      	movs	r2, #32
 800b27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	e853 3f00 	ldrex	r3, [r3]
 800b29a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0310 	bic.w	r3, r3, #16
 800b2a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b2b0:	61fb      	str	r3, [r7, #28]
 800b2b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	69b9      	ldr	r1, [r7, #24]
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e4      	bne.n	800b28e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f87d 	bl	800b3d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2d6:	e063      	b.n	800b3a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d00e      	beq.n	800b302 <HAL_UART_IRQHandler+0x59e>
 800b2e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d008      	beq.n	800b302 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b2f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 fc5e 	bl	800cbbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b300:	e051      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d014      	beq.n	800b338 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b31e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d008      	beq.n	800b338 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d03a      	beq.n	800b3a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	4798      	blx	r3
    }
    return;
 800b336:	e035      	b.n	800b3a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d009      	beq.n	800b358 <HAL_UART_IRQHandler+0x5f4>
 800b344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d003      	beq.n	800b358 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 feeb 	bl	800c12c <UART_EndTransmit_IT>
    return;
 800b356:	e026      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b35c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d009      	beq.n	800b378 <HAL_UART_IRQHandler+0x614>
 800b364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 fc35 	bl	800cbe0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b376:	e016      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b37c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d010      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x642>
 800b384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da0c      	bge.n	800b3a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 fc1e 	bl	800cbce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b392:	e008      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
      return;
 800b394:	bf00      	nop
 800b396:	e006      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
    return;
 800b398:	bf00      	nop
 800b39a:	e004      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
      return;
 800b39c:	bf00      	nop
 800b39e:	e002      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
      return;
 800b3a0:	bf00      	nop
 800b3a2:	e000      	b.n	800b3a6 <HAL_UART_IRQHandler+0x642>
    return;
 800b3a4:	bf00      	nop
  }
}
 800b3a6:	37e8      	adds	r7, #232	; 0xe8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3b4:	bf00      	nop
 800b3b6:	370c      	adds	r7, #12
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bc80      	pop	{r7}
 800b3bc:	4770      	bx	lr

0800b3be <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b083      	sub	sp, #12
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3c6:	bf00      	nop
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bc80      	pop	{r7}
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bc80      	pop	{r7}
 800b3e4:	4770      	bx	lr
	...

0800b3e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3ec:	b08c      	sub	sp, #48	; 0x30
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	431a      	orrs	r2, r3
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	431a      	orrs	r2, r3
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4b94      	ldr	r3, [pc, #592]	; (800b668 <UART_SetConfig+0x280>)
 800b418:	4013      	ands	r3, r2
 800b41a:	697a      	ldr	r2, [r7, #20]
 800b41c:	6812      	ldr	r2, [r2, #0]
 800b41e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b420:	430b      	orrs	r3, r1
 800b422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a89      	ldr	r2, [pc, #548]	; (800b66c <UART_SetConfig+0x284>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b450:	4313      	orrs	r3, r2
 800b452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b45e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b468:	430b      	orrs	r3, r1
 800b46a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b472:	f023 010f 	bic.w	r1, r3, #15
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a7a      	ldr	r2, [pc, #488]	; (800b670 <UART_SetConfig+0x288>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d127      	bne.n	800b4dc <UART_SetConfig+0xf4>
 800b48c:	2003      	movs	r0, #3
 800b48e:	f7ff fb2c 	bl	800aaea <LL_RCC_GetUSARTClockSource>
 800b492:	4603      	mov	r3, r0
 800b494:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b498:	2b03      	cmp	r3, #3
 800b49a:	d81b      	bhi.n	800b4d4 <UART_SetConfig+0xec>
 800b49c:	a201      	add	r2, pc, #4	; (adr r2, 800b4a4 <UART_SetConfig+0xbc>)
 800b49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4a2:	bf00      	nop
 800b4a4:	0800b4b5 	.word	0x0800b4b5
 800b4a8:	0800b4c5 	.word	0x0800b4c5
 800b4ac:	0800b4bd 	.word	0x0800b4bd
 800b4b0:	0800b4cd 	.word	0x0800b4cd
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ba:	e080      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4c2:	e07c      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4ca:	e078      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d2:	e074      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4da:	e070      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a64      	ldr	r2, [pc, #400]	; (800b674 <UART_SetConfig+0x28c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d138      	bne.n	800b558 <UART_SetConfig+0x170>
 800b4e6:	200c      	movs	r0, #12
 800b4e8:	f7ff faff 	bl	800aaea <LL_RCC_GetUSARTClockSource>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b4f2:	2b0c      	cmp	r3, #12
 800b4f4:	d82c      	bhi.n	800b550 <UART_SetConfig+0x168>
 800b4f6:	a201      	add	r2, pc, #4	; (adr r2, 800b4fc <UART_SetConfig+0x114>)
 800b4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fc:	0800b531 	.word	0x0800b531
 800b500:	0800b551 	.word	0x0800b551
 800b504:	0800b551 	.word	0x0800b551
 800b508:	0800b551 	.word	0x0800b551
 800b50c:	0800b541 	.word	0x0800b541
 800b510:	0800b551 	.word	0x0800b551
 800b514:	0800b551 	.word	0x0800b551
 800b518:	0800b551 	.word	0x0800b551
 800b51c:	0800b539 	.word	0x0800b539
 800b520:	0800b551 	.word	0x0800b551
 800b524:	0800b551 	.word	0x0800b551
 800b528:	0800b551 	.word	0x0800b551
 800b52c:	0800b549 	.word	0x0800b549
 800b530:	2300      	movs	r3, #0
 800b532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b536:	e042      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b538:	2302      	movs	r3, #2
 800b53a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b53e:	e03e      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b540:	2304      	movs	r3, #4
 800b542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b546:	e03a      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b548:	2308      	movs	r3, #8
 800b54a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b54e:	e036      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b550:	2310      	movs	r3, #16
 800b552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b556:	e032      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a43      	ldr	r2, [pc, #268]	; (800b66c <UART_SetConfig+0x284>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d12a      	bne.n	800b5b8 <UART_SetConfig+0x1d0>
 800b562:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b566:	f7ff fad2 	bl	800ab0e <LL_RCC_GetLPUARTClockSource>
 800b56a:	4603      	mov	r3, r0
 800b56c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b570:	d01a      	beq.n	800b5a8 <UART_SetConfig+0x1c0>
 800b572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b576:	d81b      	bhi.n	800b5b0 <UART_SetConfig+0x1c8>
 800b578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b57c:	d00c      	beq.n	800b598 <UART_SetConfig+0x1b0>
 800b57e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b582:	d815      	bhi.n	800b5b0 <UART_SetConfig+0x1c8>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d003      	beq.n	800b590 <UART_SetConfig+0x1a8>
 800b588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b58c:	d008      	beq.n	800b5a0 <UART_SetConfig+0x1b8>
 800b58e:	e00f      	b.n	800b5b0 <UART_SetConfig+0x1c8>
 800b590:	2300      	movs	r3, #0
 800b592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b596:	e012      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b598:	2302      	movs	r3, #2
 800b59a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b59e:	e00e      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5a6:	e00a      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b5a8:	2308      	movs	r3, #8
 800b5aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5ae:	e006      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5b6:	e002      	b.n	800b5be <UART_SetConfig+0x1d6>
 800b5b8:	2310      	movs	r3, #16
 800b5ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a2a      	ldr	r2, [pc, #168]	; (800b66c <UART_SetConfig+0x284>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	f040 80a4 	bne.w	800b712 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5ce:	2b08      	cmp	r3, #8
 800b5d0:	d823      	bhi.n	800b61a <UART_SetConfig+0x232>
 800b5d2:	a201      	add	r2, pc, #4	; (adr r2, 800b5d8 <UART_SetConfig+0x1f0>)
 800b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5d8:	0800b5fd 	.word	0x0800b5fd
 800b5dc:	0800b61b 	.word	0x0800b61b
 800b5e0:	0800b605 	.word	0x0800b605
 800b5e4:	0800b61b 	.word	0x0800b61b
 800b5e8:	0800b60b 	.word	0x0800b60b
 800b5ec:	0800b61b 	.word	0x0800b61b
 800b5f0:	0800b61b 	.word	0x0800b61b
 800b5f4:	0800b61b 	.word	0x0800b61b
 800b5f8:	0800b613 	.word	0x0800b613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5fc:	f7fc fbf8 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800b600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b602:	e010      	b.n	800b626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b604:	4b1c      	ldr	r3, [pc, #112]	; (800b678 <UART_SetConfig+0x290>)
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b608:	e00d      	b.n	800b626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b60a:	f7fc fb3d 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 800b60e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b610:	e009      	b.n	800b626 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b618:	e005      	b.n	800b626 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b61a:	2300      	movs	r3, #0
 800b61c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 8137 	beq.w	800b89c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b632:	4a12      	ldr	r2, [pc, #72]	; (800b67c <UART_SetConfig+0x294>)
 800b634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b638:	461a      	mov	r2, r3
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b640:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	4613      	mov	r3, r2
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d305      	bcc.n	800b65e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d910      	bls.n	800b680 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b664:	e11a      	b.n	800b89c <UART_SetConfig+0x4b4>
 800b666:	bf00      	nop
 800b668:	cfff69f3 	.word	0xcfff69f3
 800b66c:	40008000 	.word	0x40008000
 800b670:	40013800 	.word	0x40013800
 800b674:	40004400 	.word	0x40004400
 800b678:	00f42400 	.word	0x00f42400
 800b67c:	0801f610 	.word	0x0801f610
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	2200      	movs	r2, #0
 800b684:	60bb      	str	r3, [r7, #8]
 800b686:	60fa      	str	r2, [r7, #12]
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	4a8e      	ldr	r2, [pc, #568]	; (800b8c8 <UART_SetConfig+0x4e0>)
 800b68e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b692:	b29b      	uxth	r3, r3
 800b694:	2200      	movs	r2, #0
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	607a      	str	r2, [r7, #4]
 800b69a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b69e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6a2:	f7f5 fb73 	bl	8000d8c <__aeabi_uldivmod>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f04f 0200 	mov.w	r2, #0
 800b6b2:	f04f 0300 	mov.w	r3, #0
 800b6b6:	020b      	lsls	r3, r1, #8
 800b6b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6bc:	0202      	lsls	r2, r0, #8
 800b6be:	6979      	ldr	r1, [r7, #20]
 800b6c0:	6849      	ldr	r1, [r1, #4]
 800b6c2:	0849      	lsrs	r1, r1, #1
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	4605      	mov	r5, r0
 800b6ca:	eb12 0804 	adds.w	r8, r2, r4
 800b6ce:	eb43 0905 	adc.w	r9, r3, r5
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	469a      	mov	sl, r3
 800b6da:	4693      	mov	fp, r2
 800b6dc:	4652      	mov	r2, sl
 800b6de:	465b      	mov	r3, fp
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f5 fb52 	bl	8000d8c <__aeabi_uldivmod>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6f0:	6a3b      	ldr	r3, [r7, #32]
 800b6f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6f6:	d308      	bcc.n	800b70a <UART_SetConfig+0x322>
 800b6f8:	6a3b      	ldr	r3, [r7, #32]
 800b6fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6fe:	d204      	bcs.n	800b70a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6a3a      	ldr	r2, [r7, #32]
 800b706:	60da      	str	r2, [r3, #12]
 800b708:	e0c8      	b.n	800b89c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b710:	e0c4      	b.n	800b89c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b71a:	d167      	bne.n	800b7ec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b71c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b720:	2b08      	cmp	r3, #8
 800b722:	d828      	bhi.n	800b776 <UART_SetConfig+0x38e>
 800b724:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <UART_SetConfig+0x344>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b751 	.word	0x0800b751
 800b730:	0800b759 	.word	0x0800b759
 800b734:	0800b761 	.word	0x0800b761
 800b738:	0800b777 	.word	0x0800b777
 800b73c:	0800b767 	.word	0x0800b767
 800b740:	0800b777 	.word	0x0800b777
 800b744:	0800b777 	.word	0x0800b777
 800b748:	0800b777 	.word	0x0800b777
 800b74c:	0800b76f 	.word	0x0800b76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b750:	f7fc fb4e 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800b754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b756:	e014      	b.n	800b782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b758:	f7fc fb5c 	bl	8007e14 <HAL_RCC_GetPCLK2Freq>
 800b75c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b75e:	e010      	b.n	800b782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b760:	4b5a      	ldr	r3, [pc, #360]	; (800b8cc <UART_SetConfig+0x4e4>)
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b764:	e00d      	b.n	800b782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b766:	f7fc fa8f 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 800b76a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b76c:	e009      	b.n	800b782 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b774:	e005      	b.n	800b782 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 8089 	beq.w	800b89c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	4a4e      	ldr	r2, [pc, #312]	; (800b8c8 <UART_SetConfig+0x4e0>)
 800b790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b794:	461a      	mov	r2, r3
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	fbb3 f3f2 	udiv	r3, r3, r2
 800b79c:	005a      	lsls	r2, r3, #1
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	085b      	lsrs	r3, r3, #1
 800b7a4:	441a      	add	r2, r3
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	2b0f      	cmp	r3, #15
 800b7b4:	d916      	bls.n	800b7e4 <UART_SetConfig+0x3fc>
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7bc:	d212      	bcs.n	800b7e4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	f023 030f 	bic.w	r3, r3, #15
 800b7c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7c8:	6a3b      	ldr	r3, [r7, #32]
 800b7ca:	085b      	lsrs	r3, r3, #1
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	f003 0307 	and.w	r3, r3, #7
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	8bfb      	ldrh	r3, [r7, #30]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	8bfa      	ldrh	r2, [r7, #30]
 800b7e0:	60da      	str	r2, [r3, #12]
 800b7e2:	e05b      	b.n	800b89c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7ea:	e057      	b.n	800b89c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d828      	bhi.n	800b846 <UART_SetConfig+0x45e>
 800b7f4:	a201      	add	r2, pc, #4	; (adr r2, 800b7fc <UART_SetConfig+0x414>)
 800b7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fa:	bf00      	nop
 800b7fc:	0800b821 	.word	0x0800b821
 800b800:	0800b829 	.word	0x0800b829
 800b804:	0800b831 	.word	0x0800b831
 800b808:	0800b847 	.word	0x0800b847
 800b80c:	0800b837 	.word	0x0800b837
 800b810:	0800b847 	.word	0x0800b847
 800b814:	0800b847 	.word	0x0800b847
 800b818:	0800b847 	.word	0x0800b847
 800b81c:	0800b83f 	.word	0x0800b83f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b820:	f7fc fae6 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800b824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b826:	e014      	b.n	800b852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b828:	f7fc faf4 	bl	8007e14 <HAL_RCC_GetPCLK2Freq>
 800b82c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b82e:	e010      	b.n	800b852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b830:	4b26      	ldr	r3, [pc, #152]	; (800b8cc <UART_SetConfig+0x4e4>)
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b834:	e00d      	b.n	800b852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b836:	f7fc fa27 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 800b83a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b83c:	e009      	b.n	800b852 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b83e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b844:	e005      	b.n	800b852 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b850:	bf00      	nop
    }

    if (pclk != 0U)
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	2b00      	cmp	r3, #0
 800b856:	d021      	beq.n	800b89c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	4a1a      	ldr	r2, [pc, #104]	; (800b8c8 <UART_SetConfig+0x4e0>)
 800b85e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b862:	461a      	mov	r2, r3
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	fbb3 f2f2 	udiv	r2, r3, r2
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	085b      	lsrs	r3, r3, #1
 800b870:	441a      	add	r2, r3
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	2b0f      	cmp	r3, #15
 800b880:	d909      	bls.n	800b896 <UART_SetConfig+0x4ae>
 800b882:	6a3b      	ldr	r3, [r7, #32]
 800b884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b888:	d205      	bcs.n	800b896 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	b29a      	uxth	r2, r3
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60da      	str	r2, [r3, #12]
 800b894:	e002      	b.n	800b89c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b8b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3730      	adds	r7, #48	; 0x30
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8c6:	bf00      	nop
 800b8c8:	0801f610 	.word	0x0801f610
 800b8cc:	00f42400 	.word	0x00f42400

0800b8d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00a      	beq.n	800b8fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00a      	beq.n	800b93e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	430a      	orrs	r2, r1
 800b93c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b942:	f003 0308 	and.w	r3, r3, #8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00a      	beq.n	800b960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	430a      	orrs	r2, r1
 800b95e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b964:	f003 0310 	and.w	r3, r3, #16
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00a      	beq.n	800b982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	430a      	orrs	r2, r1
 800b980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b986:	f003 0320 	and.w	r3, r3, #32
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00a      	beq.n	800b9a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	689b      	ldr	r3, [r3, #8]
 800b994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	430a      	orrs	r2, r1
 800b9a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d01a      	beq.n	800b9e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	430a      	orrs	r2, r1
 800b9c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9ce:	d10a      	bne.n	800b9e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	430a      	orrs	r2, r1
 800ba06:	605a      	str	r2, [r3, #4]
  }
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bc80      	pop	{r7}
 800ba10:	4770      	bx	lr

0800ba12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b086      	sub	sp, #24
 800ba16:	af02      	add	r7, sp, #8
 800ba18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba22:	f7f7 f905 	bl	8002c30 <HAL_GetTick>
 800ba26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0308 	and.w	r3, r3, #8
 800ba32:	2b08      	cmp	r3, #8
 800ba34:	d10e      	bne.n	800ba54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f832 	bl	800baae <UART_WaitOnFlagUntilTimeout>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e028      	b.n	800baa6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	2b04      	cmp	r3, #4
 800ba60:	d10e      	bne.n	800ba80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f81c 	bl	800baae <UART_WaitOnFlagUntilTimeout>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e012      	b.n	800baa6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2220      	movs	r2, #32
 800ba8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800baa4:	2300      	movs	r3, #0
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b09c      	sub	sp, #112	; 0x70
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	603b      	str	r3, [r7, #0]
 800baba:	4613      	mov	r3, r2
 800babc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800babe:	e0a9      	b.n	800bc14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	f000 80a5 	beq.w	800bc14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baca:	f7f7 f8b1 	bl	8002c30 <HAL_GetTick>
 800bace:	4602      	mov	r2, r0
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d302      	bcc.n	800bae0 <UART_WaitOnFlagUntilTimeout+0x32>
 800bada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800badc:	2b00      	cmp	r3, #0
 800bade:	d140      	bne.n	800bb62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae8:	e853 3f00 	ldrex	r3, [r3]
 800baec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800baee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800baf4:	667b      	str	r3, [r7, #100]	; 0x64
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bafe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb06:	e841 2300 	strex	r3, r2, [r1]
 800bb0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1e6      	bne.n	800bae0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3308      	adds	r3, #8
 800bb18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	663b      	str	r3, [r7, #96]	; 0x60
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3308      	adds	r3, #8
 800bb30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb32:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e5      	bne.n	800bb12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e069      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d051      	beq.n	800bc14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb7e:	d149      	bne.n	800bc14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb92:	e853 3f00 	ldrex	r3, [r3]
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	461a      	mov	r2, r3
 800bba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bba8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbb0:	e841 2300 	strex	r3, r2, [r1]
 800bbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e6      	bne.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	e853 3f00 	ldrex	r3, [r3]
 800bbca:	613b      	str	r3, [r7, #16]
   return(result);
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	f023 0301 	bic.w	r3, r3, #1
 800bbd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3308      	adds	r3, #8
 800bbda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbdc:	623a      	str	r2, [r7, #32]
 800bbde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe0:	69f9      	ldr	r1, [r7, #28]
 800bbe2:	6a3a      	ldr	r2, [r7, #32]
 800bbe4:	e841 2300 	strex	r3, r2, [r1]
 800bbe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e5      	bne.n	800bbbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2220      	movs	r2, #32
 800bbf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e010      	b.n	800bc36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	69da      	ldr	r2, [r3, #28]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	68ba      	ldr	r2, [r7, #8]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	bf0c      	ite	eq
 800bc24:	2301      	moveq	r3, #1
 800bc26:	2300      	movne	r3, #0
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	f43f af46 	beq.w	800bac0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3770      	adds	r7, #112	; 0x70
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b0a3      	sub	sp, #140	; 0x8c
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88fa      	ldrh	r2, [r7, #6]
 800bc58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	88fa      	ldrh	r2, [r7, #6]
 800bc60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc72:	d10e      	bne.n	800bc92 <UART_Start_Receive_IT+0x52>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d105      	bne.n	800bc88 <UART_Start_Receive_IT+0x48>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc86:	e02d      	b.n	800bce4 <UART_Start_Receive_IT+0xa4>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	22ff      	movs	r2, #255	; 0xff
 800bc8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bc90:	e028      	b.n	800bce4 <UART_Start_Receive_IT+0xa4>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10d      	bne.n	800bcb6 <UART_Start_Receive_IT+0x76>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d104      	bne.n	800bcac <UART_Start_Receive_IT+0x6c>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	22ff      	movs	r2, #255	; 0xff
 800bca6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcaa:	e01b      	b.n	800bce4 <UART_Start_Receive_IT+0xa4>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	227f      	movs	r2, #127	; 0x7f
 800bcb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcb4:	e016      	b.n	800bce4 <UART_Start_Receive_IT+0xa4>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcbe:	d10d      	bne.n	800bcdc <UART_Start_Receive_IT+0x9c>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d104      	bne.n	800bcd2 <UART_Start_Receive_IT+0x92>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	227f      	movs	r2, #127	; 0x7f
 800bccc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcd0:	e008      	b.n	800bce4 <UART_Start_Receive_IT+0xa4>
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	223f      	movs	r2, #63	; 0x3f
 800bcd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bcda:	e003      	b.n	800bce4 <UART_Start_Receive_IT+0xa4>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2222      	movs	r2, #34	; 0x22
 800bcf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcfe:	e853 3f00 	ldrex	r3, [r3]
 800bd02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bd04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd06:	f043 0301 	orr.w	r3, r3, #1
 800bd0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3308      	adds	r3, #8
 800bd14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bd18:	673a      	str	r2, [r7, #112]	; 0x70
 800bd1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bd1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bd20:	e841 2300 	strex	r3, r2, [r1]
 800bd24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800bd26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e3      	bne.n	800bcf4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd34:	d14f      	bne.n	800bdd6 <UART_Start_Receive_IT+0x196>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd3c:	88fa      	ldrh	r2, [r7, #6]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d349      	bcc.n	800bdd6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	689b      	ldr	r3, [r3, #8]
 800bd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4a:	d107      	bne.n	800bd5c <UART_Start_Receive_IT+0x11c>
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d103      	bne.n	800bd5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4a46      	ldr	r2, [pc, #280]	; (800be70 <UART_Start_Receive_IT+0x230>)
 800bd58:	675a      	str	r2, [r3, #116]	; 0x74
 800bd5a:	e002      	b.n	800bd62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4a45      	ldr	r2, [pc, #276]	; (800be74 <UART_Start_Receive_IT+0x234>)
 800bd60:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d01a      	beq.n	800bda0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd72:	e853 3f00 	ldrex	r3, [r3]
 800bd76:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	461a      	mov	r2, r3
 800bd88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bd8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd8e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bd92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e4      	bne.n	800bd6a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3308      	adds	r3, #8
 800bda6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bdc0:	64ba      	str	r2, [r7, #72]	; 0x48
 800bdc2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bdc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bdce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e5      	bne.n	800bda0 <UART_Start_Receive_IT+0x160>
 800bdd4:	e046      	b.n	800be64 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdde:	d107      	bne.n	800bdf0 <UART_Start_Receive_IT+0x1b0>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	4a23      	ldr	r2, [pc, #140]	; (800be78 <UART_Start_Receive_IT+0x238>)
 800bdec:	675a      	str	r2, [r3, #116]	; 0x74
 800bdee:	e002      	b.n	800bdf6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4a22      	ldr	r2, [pc, #136]	; (800be7c <UART_Start_Receive_IT+0x23c>)
 800bdf4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d019      	beq.n	800be32 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	e853 3f00 	ldrex	r3, [r3]
 800be0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800be12:	677b      	str	r3, [r7, #116]	; 0x74
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be1c:	637b      	str	r3, [r7, #52]	; 0x34
 800be1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be24:	e841 2300 	strex	r3, r2, [r1]
 800be28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1e6      	bne.n	800bdfe <UART_Start_Receive_IT+0x1be>
 800be30:	e018      	b.n	800be64 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	e853 3f00 	ldrex	r3, [r3]
 800be3e:	613b      	str	r3, [r7, #16]
   return(result);
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f043 0320 	orr.w	r3, r3, #32
 800be46:	67bb      	str	r3, [r7, #120]	; 0x78
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	461a      	mov	r2, r3
 800be4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be50:	623b      	str	r3, [r7, #32]
 800be52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be54:	69f9      	ldr	r1, [r7, #28]
 800be56:	6a3a      	ldr	r2, [r7, #32]
 800be58:	e841 2300 	strex	r3, r2, [r1]
 800be5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1e6      	bne.n	800be32 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800be64:	2300      	movs	r3, #0
}
 800be66:	4618      	mov	r0, r3
 800be68:	378c      	adds	r7, #140	; 0x8c
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bc80      	pop	{r7}
 800be6e:	4770      	bx	lr
 800be70:	0800c855 	.word	0x0800c855
 800be74:	0800c4f5 	.word	0x0800c4f5
 800be78:	0800c33d 	.word	0x0800c33d
 800be7c:	0800c185 	.word	0x0800c185

0800be80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be80:	b480      	push	{r7}
 800be82:	b08f      	sub	sp, #60	; 0x3c
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8e:	6a3b      	ldr	r3, [r7, #32]
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	61fb      	str	r3, [r7, #28]
   return(result);
 800be96:	69fb      	ldr	r3, [r7, #28]
 800be98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bea8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e6      	bne.n	800be88 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3308      	adds	r3, #8
 800bec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	60bb      	str	r3, [r7, #8]
   return(result);
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bed0:	633b      	str	r3, [r7, #48]	; 0x30
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	3308      	adds	r3, #8
 800bed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beda:	61ba      	str	r2, [r7, #24]
 800bedc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bede:	6979      	ldr	r1, [r7, #20]
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	e841 2300 	strex	r3, r2, [r1]
 800bee6:	613b      	str	r3, [r7, #16]
   return(result);
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1e5      	bne.n	800beba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2220      	movs	r2, #32
 800bef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800bef6:	bf00      	nop
 800bef8:	373c      	adds	r7, #60	; 0x3c
 800befa:	46bd      	mov	sp, r7
 800befc:	bc80      	pop	{r7}
 800befe:	4770      	bx	lr

0800bf00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b095      	sub	sp, #84	; 0x54
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf10:	e853 3f00 	ldrex	r3, [r3]
 800bf14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	461a      	mov	r2, r3
 800bf24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf26:	643b      	str	r3, [r7, #64]	; 0x40
 800bf28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e6      	bne.n	800bf08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3308      	adds	r3, #8
 800bf40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	e853 3f00 	ldrex	r3, [r3]
 800bf48:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf50:	f023 0301 	bic.w	r3, r3, #1
 800bf54:	64bb      	str	r3, [r7, #72]	; 0x48
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf66:	e841 2300 	strex	r3, r2, [r1]
 800bf6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1e3      	bne.n	800bf3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d118      	bne.n	800bfac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	e853 3f00 	ldrex	r3, [r3]
 800bf86:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	f023 0310 	bic.w	r3, r3, #16
 800bf8e:	647b      	str	r3, [r7, #68]	; 0x44
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf98:	61bb      	str	r3, [r7, #24]
 800bf9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	6979      	ldr	r1, [r7, #20]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	613b      	str	r3, [r7, #16]
   return(result);
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e6      	bne.n	800bf7a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bfc0:	bf00      	nop
 800bfc2:	3754      	adds	r7, #84	; 0x54
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bc80      	pop	{r7}
 800bfc8:	4770      	bx	lr

0800bfca <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b090      	sub	sp, #64	; 0x40
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 0320 	and.w	r3, r3, #32
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d137      	bne.n	800c056 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	3308      	adds	r3, #8
 800bff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	e853 3f00 	ldrex	r3, [r3]
 800bffc:	623b      	str	r3, [r7, #32]
   return(result);
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c004:	63bb      	str	r3, [r7, #56]	; 0x38
 800c006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3308      	adds	r3, #8
 800c00c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c00e:	633a      	str	r2, [r7, #48]	; 0x30
 800c010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c016:	e841 2300 	strex	r3, r2, [r1]
 800c01a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1e5      	bne.n	800bfee <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	e853 3f00 	ldrex	r3, [r3]
 800c02e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c036:	637b      	str	r3, [r7, #52]	; 0x34
 800c038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	461a      	mov	r2, r3
 800c03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c040:	61fb      	str	r3, [r7, #28]
 800c042:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c044:	69b9      	ldr	r1, [r7, #24]
 800c046:	69fa      	ldr	r2, [r7, #28]
 800c048:	e841 2300 	strex	r3, r2, [r1]
 800c04c:	617b      	str	r3, [r7, #20]
   return(result);
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e6      	bne.n	800c022 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c054:	e002      	b.n	800c05c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c056:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c058:	f7f7 fc88 	bl	800396c <HAL_UART_TxCpltCallback>
}
 800c05c:	bf00      	nop
 800c05e:	3740      	adds	r7, #64	; 0x40
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c070:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f7ff f99a 	bl	800b3ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c078:	bf00      	nop
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c08c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c094:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c09c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	689b      	ldr	r3, [r3, #8]
 800c0a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0a8:	2b80      	cmp	r3, #128	; 0x80
 800c0aa:	d109      	bne.n	800c0c0 <UART_DMAError+0x40>
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	2b21      	cmp	r3, #33	; 0x21
 800c0b0:	d106      	bne.n	800c0c0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c0ba:	6978      	ldr	r0, [r7, #20]
 800c0bc:	f7ff fee0 	bl	800be80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ca:	2b40      	cmp	r3, #64	; 0x40
 800c0cc:	d109      	bne.n	800c0e2 <UART_DMAError+0x62>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b22      	cmp	r3, #34	; 0x22
 800c0d2:	d106      	bne.n	800c0e2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c0dc:	6978      	ldr	r0, [r7, #20]
 800c0de:	f7ff ff0f 	bl	800bf00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0e8:	f043 0210 	orr.w	r2, r3, #16
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0f2:	6978      	ldr	r0, [r7, #20]
 800c0f4:	f7ff f963 	bl	800b3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0f8:	bf00      	nop
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c10c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f7ff f94d 	bl	800b3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c124:	bf00      	nop
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	e853 3f00 	ldrex	r3, [r3]
 800c140:	60bb      	str	r3, [r7, #8]
   return(result);
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c148:	61fb      	str	r3, [r7, #28]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	61bb      	str	r3, [r7, #24]
 800c154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c156:	6979      	ldr	r1, [r7, #20]
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	e841 2300 	strex	r3, r2, [r1]
 800c15e:	613b      	str	r3, [r7, #16]
   return(result);
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d1e6      	bne.n	800c134 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7f7 fbf9 	bl	800396c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c17a:	bf00      	nop
 800c17c:	3720      	adds	r7, #32
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
	...

0800c184 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b09c      	sub	sp, #112	; 0x70
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c192:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c19c:	2b22      	cmp	r3, #34	; 0x22
 800c19e:	f040 80be 	bne.w	800c31e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c1b0:	b2d9      	uxtb	r1, r3
 800c1b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c1b6:	b2da      	uxtb	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1bc:	400a      	ands	r2, r1
 800c1be:	b2d2      	uxtb	r2, r2
 800c1c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f040 80a1 	bne.w	800c32e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1f4:	e853 3f00 	ldrex	r3, [r3]
 800c1f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c200:	66bb      	str	r3, [r7, #104]	; 0x68
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c20a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c20c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c20e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c212:	e841 2300 	strex	r3, r2, [r1]
 800c216:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1e6      	bne.n	800c1ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3308      	adds	r3, #8
 800c224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c230:	f023 0301 	bic.w	r3, r3, #1
 800c234:	667b      	str	r3, [r7, #100]	; 0x64
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3308      	adds	r3, #8
 800c23c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c23e:	647a      	str	r2, [r7, #68]	; 0x44
 800c240:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c246:	e841 2300 	strex	r3, r2, [r1]
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c24c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e5      	bne.n	800c21e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a33      	ldr	r2, [pc, #204]	; (800c338 <UART_RxISR_8BIT+0x1b4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d01f      	beq.n	800c2b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d018      	beq.n	800c2b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	e853 3f00 	ldrex	r3, [r3]
 800c28a:	623b      	str	r3, [r7, #32]
   return(result);
 800c28c:	6a3b      	ldr	r3, [r7, #32]
 800c28e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c292:	663b      	str	r3, [r7, #96]	; 0x60
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	461a      	mov	r2, r3
 800c29a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c29c:	633b      	str	r3, [r7, #48]	; 0x30
 800c29e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2a4:	e841 2300 	strex	r3, r2, [r1]
 800c2a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1e6      	bne.n	800c27e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d12e      	bne.n	800c316 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	e853 3f00 	ldrex	r3, [r3]
 800c2ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f023 0310 	bic.w	r3, r3, #16
 800c2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2dc:	61fb      	str	r3, [r7, #28]
 800c2de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2e0:	69b9      	ldr	r1, [r7, #24]
 800c2e2:	69fa      	ldr	r2, [r7, #28]
 800c2e4:	e841 2300 	strex	r3, r2, [r1]
 800c2e8:	617b      	str	r3, [r7, #20]
   return(result);
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d1e6      	bne.n	800c2be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	f003 0310 	and.w	r3, r3, #16
 800c2fa:	2b10      	cmp	r3, #16
 800c2fc:	d103      	bne.n	800c306 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2210      	movs	r2, #16
 800c304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff f85e 	bl	800b3d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c314:	e00b      	b.n	800c32e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7f7 fb3e 	bl	8003998 <HAL_UART_RxCpltCallback>
}
 800c31c:	e007      	b.n	800c32e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	699a      	ldr	r2, [r3, #24]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f042 0208 	orr.w	r2, r2, #8
 800c32c:	619a      	str	r2, [r3, #24]
}
 800c32e:	bf00      	nop
 800c330:	3770      	adds	r7, #112	; 0x70
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40008000 	.word	0x40008000

0800c33c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b09c      	sub	sp, #112	; 0x70
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c34a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c354:	2b22      	cmp	r3, #34	; 0x22
 800c356:	f040 80be 	bne.w	800c4d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c360:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c368:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c36a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c36e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c372:	4013      	ands	r3, r2
 800c374:	b29a      	uxth	r2, r3
 800c376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c378:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c37e:	1c9a      	adds	r2, r3, #2
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	3b01      	subs	r3, #1
 800c38e:	b29a      	uxth	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f040 80a1 	bne.w	800c4e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ac:	e853 3f00 	ldrex	r3, [r3]
 800c3b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3b8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3c2:	657b      	str	r3, [r7, #84]	; 0x54
 800c3c4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3ca:	e841 2300 	strex	r3, r2, [r1]
 800c3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1e6      	bne.n	800c3a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	3308      	adds	r3, #8
 800c3dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	f023 0301 	bic.w	r3, r3, #1
 800c3ec:	663b      	str	r3, [r7, #96]	; 0x60
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3308      	adds	r3, #8
 800c3f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3f6:	643a      	str	r2, [r7, #64]	; 0x40
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3fe:	e841 2300 	strex	r3, r2, [r1]
 800c402:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1e5      	bne.n	800c3d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2220      	movs	r2, #32
 800c40e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a33      	ldr	r2, [pc, #204]	; (800c4f0 <UART_RxISR_16BIT+0x1b4>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d01f      	beq.n	800c468 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d018      	beq.n	800c468 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	e853 3f00 	ldrex	r3, [r3]
 800c442:	61fb      	str	r3, [r7, #28]
   return(result);
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c44a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	461a      	mov	r2, r3
 800c452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c454:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c456:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c45a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c45c:	e841 2300 	strex	r3, r2, [r1]
 800c460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c464:	2b00      	cmp	r3, #0
 800c466:	d1e6      	bne.n	800c436 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d12e      	bne.n	800c4ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	e853 3f00 	ldrex	r3, [r3]
 800c482:	60bb      	str	r3, [r7, #8]
   return(result);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	f023 0310 	bic.w	r3, r3, #16
 800c48a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	461a      	mov	r2, r3
 800c492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c494:	61bb      	str	r3, [r7, #24]
 800c496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c498:	6979      	ldr	r1, [r7, #20]
 800c49a:	69ba      	ldr	r2, [r7, #24]
 800c49c:	e841 2300 	strex	r3, r2, [r1]
 800c4a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d1e6      	bne.n	800c476 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	f003 0310 	and.w	r3, r3, #16
 800c4b2:	2b10      	cmp	r3, #16
 800c4b4:	d103      	bne.n	800c4be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2210      	movs	r2, #16
 800c4bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7fe ff82 	bl	800b3d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4cc:	e00b      	b.n	800c4e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7f7 fa62 	bl	8003998 <HAL_UART_RxCpltCallback>
}
 800c4d4:	e007      	b.n	800c4e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	699a      	ldr	r2, [r3, #24]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0208 	orr.w	r2, r2, #8
 800c4e4:	619a      	str	r2, [r3, #24]
}
 800c4e6:	bf00      	nop
 800c4e8:	3770      	adds	r7, #112	; 0x70
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	40008000 	.word	0x40008000

0800c4f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b0ac      	sub	sp, #176	; 0xb0
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c502:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	69db      	ldr	r3, [r3, #28]
 800c50c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c52a:	2b22      	cmp	r3, #34	; 0x22
 800c52c:	f040 8182 	bne.w	800c834 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c536:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c53a:	e125      	b.n	800c788 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c542:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c546:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c54a:	b2d9      	uxtb	r1, r3
 800c54c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c550:	b2da      	uxtb	r2, r3
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c556:	400a      	ands	r2, r1
 800c558:	b2d2      	uxtb	r2, r2
 800c55a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	3b01      	subs	r3, #1
 800c570:	b29a      	uxth	r2, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d053      	beq.n	800c636 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c58e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d011      	beq.n	800c5be <UART_RxISR_8BIT_FIFOEN+0xca>
 800c59a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00b      	beq.n	800c5be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	f043 0201 	orr.w	r2, r3, #1
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5c2:	f003 0302 	and.w	r3, r3, #2
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d011      	beq.n	800c5ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c5ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00b      	beq.n	800c5ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5e4:	f043 0204 	orr.w	r2, r3, #4
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5f2:	f003 0304 	and.w	r3, r3, #4
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d011      	beq.n	800c61e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00b      	beq.n	800c61e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2204      	movs	r2, #4
 800c60c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c614:	f043 0202 	orr.w	r2, r3, #2
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7fe fec8 	bl	800b3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f040 80a2 	bne.w	800c788 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c64c:	e853 3f00 	ldrex	r3, [r3]
 800c650:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	461a      	mov	r2, r3
 800c662:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c666:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c668:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c66c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c66e:	e841 2300 	strex	r3, r2, [r1]
 800c672:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1e4      	bne.n	800c644 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3308      	adds	r3, #8
 800c680:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c68a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c68c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c690:	f023 0301 	bic.w	r3, r3, #1
 800c694:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3308      	adds	r3, #8
 800c69e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c6a2:	66ba      	str	r2, [r7, #104]	; 0x68
 800c6a4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c6a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c6aa:	e841 2300 	strex	r3, r2, [r1]
 800c6ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c6b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e1      	bne.n	800c67a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a5f      	ldr	r2, [pc, #380]	; (800c84c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d021      	beq.n	800c718 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d01a      	beq.n	800c718 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ea:	e853 3f00 	ldrex	r3, [r3]
 800c6ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c6f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c704:	657b      	str	r3, [r7, #84]	; 0x54
 800c706:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c708:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c70a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c70c:	e841 2300 	strex	r3, r2, [r1]
 800c710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1e4      	bne.n	800c6e2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d130      	bne.n	800c782 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72e:	e853 3f00 	ldrex	r3, [r3]
 800c732:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c736:	f023 0310 	bic.w	r3, r3, #16
 800c73a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	461a      	mov	r2, r3
 800c744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c748:	643b      	str	r3, [r7, #64]	; 0x40
 800c74a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c74e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c750:	e841 2300 	strex	r3, r2, [r1]
 800c754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1e4      	bne.n	800c726 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	f003 0310 	and.w	r3, r3, #16
 800c766:	2b10      	cmp	r3, #16
 800c768:	d103      	bne.n	800c772 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2210      	movs	r2, #16
 800c770:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7fe fe28 	bl	800b3d0 <HAL_UARTEx_RxEventCallback>
 800c780:	e002      	b.n	800c788 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7f7 f908 	bl	8003998 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c788:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d006      	beq.n	800c79e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c794:	f003 0320 	and.w	r3, r3, #32
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f47f aecf 	bne.w	800c53c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d049      	beq.n	800c844 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d242      	bcs.n	800c844 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	e853 3f00 	ldrex	r3, [r3]
 800c7cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3308      	adds	r3, #8
 800c7de:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c7e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ea:	e841 2300 	strex	r3, r2, [r1]
 800c7ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1e3      	bne.n	800c7be <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a15      	ldr	r2, [pc, #84]	; (800c850 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c7fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	e853 3f00 	ldrex	r3, [r3]
 800c808:	60bb      	str	r3, [r7, #8]
   return(result);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	f043 0320 	orr.w	r3, r3, #32
 800c810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	461a      	mov	r2, r3
 800c81a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c81e:	61bb      	str	r3, [r7, #24]
 800c820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c822:	6979      	ldr	r1, [r7, #20]
 800c824:	69ba      	ldr	r2, [r7, #24]
 800c826:	e841 2300 	strex	r3, r2, [r1]
 800c82a:	613b      	str	r3, [r7, #16]
   return(result);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1e4      	bne.n	800c7fc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c832:	e007      	b.n	800c844 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	699a      	ldr	r2, [r3, #24]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f042 0208 	orr.w	r2, r2, #8
 800c842:	619a      	str	r2, [r3, #24]
}
 800c844:	bf00      	nop
 800c846:	37b0      	adds	r7, #176	; 0xb0
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	40008000 	.word	0x40008000
 800c850:	0800c185 	.word	0x0800c185

0800c854 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b0ae      	sub	sp, #184	; 0xb8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c862:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	69db      	ldr	r3, [r3, #28]
 800c86c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c88a:	2b22      	cmp	r3, #34	; 0x22
 800c88c:	f040 8186 	bne.w	800cb9c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c896:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c89a:	e129      	b.n	800caf0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c8ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c8b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8c4:	1c9a      	adds	r2, r3, #2
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	3b01      	subs	r3, #1
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	69db      	ldr	r3, [r3, #28]
 800c8e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d053      	beq.n	800c99a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d011      	beq.n	800c922 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c8fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00b      	beq.n	800c922 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2201      	movs	r2, #1
 800c910:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c918:	f043 0201 	orr.w	r2, r3, #1
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c922:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c926:	f003 0302 	and.w	r3, r3, #2
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d011      	beq.n	800c952 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c92e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00b      	beq.n	800c952 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2202      	movs	r2, #2
 800c940:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c948:	f043 0204 	orr.w	r2, r3, #4
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c952:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c956:	f003 0304 	and.w	r3, r3, #4
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d011      	beq.n	800c982 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c95e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00b      	beq.n	800c982 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2204      	movs	r2, #4
 800c970:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c978:	f043 0202 	orr.w	r2, r3, #2
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d006      	beq.n	800c99a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7fe fd16 	bl	800b3be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f040 80a4 	bne.w	800caf0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b0:	e853 3f00 	ldrex	r3, [r3]
 800c9b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c9b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9ce:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9d6:	e841 2300 	strex	r3, r2, [r1]
 800c9da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1e2      	bne.n	800c9a8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9f8:	f023 0301 	bic.w	r3, r3, #1
 800c9fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3308      	adds	r3, #8
 800ca06:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ca0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ca12:	e841 2300 	strex	r3, r2, [r1]
 800ca16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ca18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1e1      	bne.n	800c9e2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2220      	movs	r2, #32
 800ca22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a5f      	ldr	r2, [pc, #380]	; (800cbb4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d021      	beq.n	800ca80 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d01a      	beq.n	800ca80 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca52:	e853 3f00 	ldrex	r3, [r3]
 800ca56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ca5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca6c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca74:	e841 2300 	strex	r3, r2, [r1]
 800ca78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1e4      	bne.n	800ca4a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d130      	bne.n	800caea <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	e853 3f00 	ldrex	r3, [r3]
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9e:	f023 0310 	bic.w	r3, r3, #16
 800caa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cab0:	647b      	str	r3, [r7, #68]	; 0x44
 800cab2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cab8:	e841 2300 	strex	r3, r2, [r1]
 800cabc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e4      	bne.n	800ca8e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	f003 0310 	and.w	r3, r3, #16
 800cace:	2b10      	cmp	r3, #16
 800cad0:	d103      	bne.n	800cada <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2210      	movs	r2, #16
 800cad8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7fe fc74 	bl	800b3d0 <HAL_UARTEx_RxEventCallback>
 800cae8:	e002      	b.n	800caf0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7f6 ff54 	bl	8003998 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800caf0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d006      	beq.n	800cb06 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800caf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cafc:	f003 0320 	and.w	r3, r3, #32
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f47f aecb 	bne.w	800c89c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb0c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb10:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d049      	beq.n	800cbac <UART_RxISR_16BIT_FIFOEN+0x358>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb1e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d242      	bcs.n	800cbac <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	623b      	str	r3, [r7, #32]
   return(result);
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3308      	adds	r3, #8
 800cb46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb4a:	633a      	str	r2, [r7, #48]	; 0x30
 800cb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e3      	bne.n	800cb26 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a15      	ldr	r2, [pc, #84]	; (800cbb8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cb62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	e853 3f00 	ldrex	r3, [r3]
 800cb70:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f043 0320 	orr.w	r3, r3, #32
 800cb78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8a:	69b9      	ldr	r1, [r7, #24]
 800cb8c:	69fa      	ldr	r2, [r7, #28]
 800cb8e:	e841 2300 	strex	r3, r2, [r1]
 800cb92:	617b      	str	r3, [r7, #20]
   return(result);
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1e4      	bne.n	800cb64 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb9a:	e007      	b.n	800cbac <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	699a      	ldr	r2, [r3, #24]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f042 0208 	orr.w	r2, r2, #8
 800cbaa:	619a      	str	r2, [r3, #24]
}
 800cbac:	bf00      	nop
 800cbae:	37b8      	adds	r7, #184	; 0xb8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	40008000 	.word	0x40008000
 800cbb8:	0800c33d 	.word	0x0800c33d

0800cbbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bc80      	pop	{r7}
 800cbcc:	4770      	bx	lr

0800cbce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbce:	b480      	push	{r7}
 800cbd0:	b083      	sub	sp, #12
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbd6:	bf00      	nop
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bc80      	pop	{r7}
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cbe8:	bf00      	nop
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bc80      	pop	{r7}
 800cbf0:	4770      	bx	lr

0800cbf2 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b088      	sub	sp, #32
 800cbf6:	af02      	add	r7, sp, #8
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	1d3b      	adds	r3, r7, #4
 800cbfc:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cc00:	2300      	movs	r3, #0
 800cc02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	d101      	bne.n	800cc12 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cc0e:	2302      	movs	r3, #2
 800cc10:	e046      	b.n	800cca0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2224      	movs	r2, #36	; 0x24
 800cc1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f022 0201 	bic.w	r2, r2, #1
 800cc30:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	430a      	orrs	r2, r1
 800cc44:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d105      	bne.n	800cc58 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cc4c:	1d3b      	adds	r3, r7, #4
 800cc4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f000 fa4b 	bl	800d0ee <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f042 0201 	orr.w	r2, r2, #1
 800cc66:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc68:	f7f5 ffe2 	bl	8002c30 <HAL_GetTick>
 800cc6c:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f7fe ff16 	bl	800baae <UART_WaitOnFlagUntilTimeout>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	75fb      	strb	r3, [r7, #23]
 800cc8c:	e003      	b.n	800cc96 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2220      	movs	r2, #32
 800cc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b089      	sub	sp, #36	; 0x24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d101      	bne.n	800ccbe <HAL_UARTEx_EnableStopMode+0x16>
 800ccba:	2302      	movs	r3, #2
 800ccbc:	e021      	b.n	800cd02 <HAL_UARTEx_EnableStopMode+0x5a>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	e853 3f00 	ldrex	r3, [r3]
 800ccd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	f043 0302 	orr.w	r3, r3, #2
 800ccda:	61fb      	str	r3, [r7, #28]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	461a      	mov	r2, r3
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	61bb      	str	r3, [r7, #24]
 800cce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce8:	6979      	ldr	r1, [r7, #20]
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	e841 2300 	strex	r3, r2, [r1]
 800ccf0:	613b      	str	r3, [r7, #16]
   return(result);
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1e6      	bne.n	800ccc6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3724      	adds	r7, #36	; 0x24
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bc80      	pop	{r7}
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d101      	bne.n	800cd22 <HAL_UARTEx_EnableFifoMode+0x16>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	e02b      	b.n	800cd7a <HAL_UARTEx_EnableFifoMode+0x6e>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2224      	movs	r2, #36	; 0x24
 800cd2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 0201 	bic.w	r2, r2, #1
 800cd48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cd50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cd58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	68fa      	ldr	r2, [r7, #12]
 800cd60:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f9e6 	bl	800d134 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2220      	movs	r2, #32
 800cd6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b085      	sub	sp, #20
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d101      	bne.n	800cd98 <HAL_UARTEx_DisableFifoMode+0x16>
 800cd94:	2302      	movs	r3, #2
 800cd96:	e027      	b.n	800cde8 <HAL_UARTEx_DisableFifoMode+0x66>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2224      	movs	r2, #36	; 0x24
 800cda4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f022 0201 	bic.w	r2, r2, #1
 800cdbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cdc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cde6:	2300      	movs	r3, #0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bc80      	pop	{r7}
 800cdf0:	4770      	bx	lr

0800cdf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d101      	bne.n	800ce0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ce06:	2302      	movs	r3, #2
 800ce08:	e02d      	b.n	800ce66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2224      	movs	r2, #36	; 0x24
 800ce16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	681a      	ldr	r2, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f022 0201 	bic.w	r2, r2, #1
 800ce30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f974 	bl	800d134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2220      	movs	r2, #32
 800ce58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d101      	bne.n	800ce86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce82:	2302      	movs	r3, #2
 800ce84:	e02d      	b.n	800cee2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2224      	movs	r2, #36	; 0x24
 800ce92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f022 0201 	bic.w	r2, r2, #1
 800ceac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	689b      	ldr	r3, [r3, #8]
 800ceb4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f936 	bl	800d134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2220      	movs	r2, #32
 800ced4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3710      	adds	r7, #16
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b088      	sub	sp, #32
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	603b      	str	r3, [r7, #0]
 800cef6:	4613      	mov	r3, r2
 800cef8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf00:	2b20      	cmp	r3, #32
 800cf02:	f040 80ef 	bne.w	800d0e4 <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <HAL_UARTEx_ReceiveToIdle+0x28>
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e0e7      	b.n	800d0e6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2222      	movs	r2, #34	; 0x22
 800cf22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf32:	f7f5 fe7d 	bl	8002c30 <HAL_GetTick>
 800cf36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	88fa      	ldrh	r2, [r7, #6]
 800cf3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	88fa      	ldrh	r2, [r7, #6]
 800cf44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf50:	d10e      	bne.n	800cf70 <HAL_UARTEx_ReceiveToIdle+0x86>
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	691b      	ldr	r3, [r3, #16]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <HAL_UARTEx_ReceiveToIdle+0x7c>
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cf60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf64:	e02d      	b.n	800cfc2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	22ff      	movs	r2, #255	; 0xff
 800cf6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf6e:	e028      	b.n	800cfc2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10d      	bne.n	800cf94 <HAL_UARTEx_ReceiveToIdle+0xaa>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	691b      	ldr	r3, [r3, #16]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d104      	bne.n	800cf8a <HAL_UARTEx_ReceiveToIdle+0xa0>
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	22ff      	movs	r2, #255	; 0xff
 800cf84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf88:	e01b      	b.n	800cfc2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	227f      	movs	r2, #127	; 0x7f
 800cf8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cf92:	e016      	b.n	800cfc2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf9c:	d10d      	bne.n	800cfba <HAL_UARTEx_ReceiveToIdle+0xd0>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	691b      	ldr	r3, [r3, #16]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d104      	bne.n	800cfb0 <HAL_UARTEx_ReceiveToIdle+0xc6>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	227f      	movs	r2, #127	; 0x7f
 800cfaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfae:	e008      	b.n	800cfc2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	223f      	movs	r2, #63	; 0x3f
 800cfb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cfb8:	e003      	b.n	800cfc2 <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfc8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfd2:	d108      	bne.n	800cfe6 <HAL_UARTEx_ReceiveToIdle+0xfc>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d104      	bne.n	800cfe6 <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	61bb      	str	r3, [r7, #24]
 800cfe4:	e003      	b.n	800cfee <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cfea:	2300      	movs	r3, #0
 800cfec:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	2200      	movs	r2, #0
 800cff2:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cff4:	e05f      	b.n	800d0b6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	69db      	ldr	r3, [r3, #28]
 800cffc:	f003 0310 	and.w	r3, r3, #16
 800d000:	2b10      	cmp	r3, #16
 800d002:	d110      	bne.n	800d026 <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2210      	movs	r2, #16
 800d00a:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	881b      	ldrh	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d008      	beq.n	800d026 <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2202      	movs	r2, #2
 800d018:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2220      	movs	r2, #32
 800d01e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800d022:	2300      	movs	r3, #0
 800d024:	e05f      	b.n	800d0e6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	69db      	ldr	r3, [r3, #28]
 800d02c:	f003 0320 	and.w	r3, r3, #32
 800d030:	2b20      	cmp	r3, #32
 800d032:	d12b      	bne.n	800d08c <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10c      	bne.n	800d054 <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d040:	b29a      	uxth	r2, r3
 800d042:	8a7b      	ldrh	r3, [r7, #18]
 800d044:	4013      	ands	r3, r2
 800d046:	b29a      	uxth	r2, r3
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	3302      	adds	r3, #2
 800d050:	61bb      	str	r3, [r7, #24]
 800d052:	e00c      	b.n	800d06e <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	8a7b      	ldrh	r3, [r7, #18]
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	4013      	ands	r3, r2
 800d062:	b2da      	uxtb	r2, r3
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800d068:	69fb      	ldr	r3, [r7, #28]
 800d06a:	3301      	adds	r3, #1
 800d06c:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	b29a      	uxth	r2, r3
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d080:	b29b      	uxth	r3, r3
 800d082:	3b01      	subs	r3, #1
 800d084:	b29a      	uxth	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d010      	beq.n	800d0b6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d094:	f7f5 fdcc 	bl	8002c30 <HAL_GetTick>
 800d098:	4602      	mov	r2, r0
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	1ad3      	subs	r3, r2, r3
 800d09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d302      	bcc.n	800d0aa <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2220      	movs	r2, #32
 800d0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	e017      	b.n	800d0e6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d199      	bne.n	800cff6 <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2220      	movs	r2, #32
 800d0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	e000      	b.n	800d0e6 <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800d0e4:	2302      	movs	r3, #2
  }
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3720      	adds	r7, #32
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b085      	sub	sp, #20
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	60f8      	str	r0, [r7, #12]
 800d0f6:	1d3b      	adds	r3, r7, #4
 800d0f8:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f023 0210 	bic.w	r2, r3, #16
 800d106:	893b      	ldrh	r3, [r7, #8]
 800d108:	4619      	mov	r1, r3
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	430a      	orrs	r2, r1
 800d110:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d11c:	7abb      	ldrb	r3, [r7, #10]
 800d11e:	061a      	lsls	r2, r3, #24
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	430a      	orrs	r2, r1
 800d126:	605a      	str	r2, [r3, #4]
}
 800d128:	bf00      	nop
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bc80      	pop	{r7}
 800d130:	4770      	bx	lr
	...

0800d134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d140:	2b00      	cmp	r3, #0
 800d142:	d108      	bne.n	800d156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2201      	movs	r2, #1
 800d148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d154:	e031      	b.n	800d1ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d156:	2308      	movs	r3, #8
 800d158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d15a:	2308      	movs	r3, #8
 800d15c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	0e5b      	lsrs	r3, r3, #25
 800d166:	b2db      	uxtb	r3, r3
 800d168:	f003 0307 	and.w	r3, r3, #7
 800d16c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	0f5b      	lsrs	r3, r3, #29
 800d176:	b2db      	uxtb	r3, r3
 800d178:	f003 0307 	and.w	r3, r3, #7
 800d17c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d17e:	7bbb      	ldrb	r3, [r7, #14]
 800d180:	7b3a      	ldrb	r2, [r7, #12]
 800d182:	4910      	ldr	r1, [pc, #64]	; (800d1c4 <UARTEx_SetNbDataToProcess+0x90>)
 800d184:	5c8a      	ldrb	r2, [r1, r2]
 800d186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d18a:	7b3a      	ldrb	r2, [r7, #12]
 800d18c:	490e      	ldr	r1, [pc, #56]	; (800d1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d18e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d190:	fb93 f3f2 	sdiv	r3, r3, r2
 800d194:	b29a      	uxth	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
 800d19e:	7b7a      	ldrb	r2, [r7, #13]
 800d1a0:	4908      	ldr	r1, [pc, #32]	; (800d1c4 <UARTEx_SetNbDataToProcess+0x90>)
 800d1a2:	5c8a      	ldrb	r2, [r1, r2]
 800d1a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1a8:	7b7a      	ldrb	r2, [r7, #13]
 800d1aa:	4907      	ldr	r1, [pc, #28]	; (800d1c8 <UARTEx_SetNbDataToProcess+0x94>)
 800d1ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1b2:	b29a      	uxth	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d1ba:	bf00      	nop
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bc80      	pop	{r7}
 800d1c2:	4770      	bx	lr
 800d1c4:	0801f628 	.word	0x0801f628
 800d1c8:	0801f630 	.word	0x0801f630

0800d1cc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d1d0:	f7f5 fbca 	bl	8002968 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d1d4:	f000 f820 	bl	800d218 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d1d8:	bf00      	nop
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	f010 fd6c 	bl	801dcc0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d1e8:	bf00      	nop
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d1f0:	f3bf 8f4f 	dsb	sy
}
 800d1f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d1f6:	4b06      	ldr	r3, [pc, #24]	; (800d210 <__NVIC_SystemReset+0x24>)
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d1fe:	4904      	ldr	r1, [pc, #16]	; (800d210 <__NVIC_SystemReset+0x24>)
 800d200:	4b04      	ldr	r3, [pc, #16]	; (800d214 <__NVIC_SystemReset+0x28>)
 800d202:	4313      	orrs	r3, r2
 800d204:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d206:	f3bf 8f4f 	dsb	sy
}
 800d20a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d20c:	bf00      	nop
 800d20e:	e7fd      	b.n	800d20c <__NVIC_SystemReset+0x20>
 800d210:	e000ed00 	.word	0xe000ed00
 800d214:	05fa0004 	.word	0x05fa0004

0800d218 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d21e:	2300      	movs	r3, #0
 800d220:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d222:	2300      	movs	r3, #0
 800d224:	9302      	str	r3, [sp, #8]
 800d226:	2303      	movs	r3, #3
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	2301      	movs	r3, #1
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	4b59      	ldr	r3, [pc, #356]	; (800d394 <LoRaWAN_Init+0x17c>)
 800d230:	2200      	movs	r2, #0
 800d232:	2100      	movs	r1, #0
 800d234:	2002      	movs	r0, #2
 800d236:	f011 f991 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d23a:	2300      	movs	r3, #0
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	2305      	movs	r3, #5
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	2302      	movs	r3, #2
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	4b54      	ldr	r3, [pc, #336]	; (800d398 <LoRaWAN_Init+0x180>)
 800d248:	2200      	movs	r2, #0
 800d24a:	2100      	movs	r1, #0
 800d24c:	2002      	movs	r0, #2
 800d24e:	f011 f985 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d252:	2300      	movs	r3, #0
 800d254:	9302      	str	r3, [sp, #8]
 800d256:	2303      	movs	r3, #3
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	2301      	movs	r3, #1
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	4b4f      	ldr	r3, [pc, #316]	; (800d39c <LoRaWAN_Init+0x184>)
 800d260:	2200      	movs	r2, #0
 800d262:	2100      	movs	r1, #0
 800d264:	2002      	movs	r0, #2
 800d266:	f011 f979 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d26a:	1d3b      	adds	r3, r7, #4
 800d26c:	4619      	mov	r1, r3
 800d26e:	2000      	movs	r0, #0
 800d270:	f003 f92a 	bl	80104c8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	0e1b      	lsrs	r3, r3, #24
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	461a      	mov	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	0c1b      	lsrs	r3, r3, #16
 800d280:	b2db      	uxtb	r3, r3
 800d282:	4619      	mov	r1, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	0a1b      	lsrs	r3, r3, #8
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	9302      	str	r3, [sp, #8]
 800d28c:	9101      	str	r1, [sp, #4]
 800d28e:	9200      	str	r2, [sp, #0]
 800d290:	4b43      	ldr	r3, [pc, #268]	; (800d3a0 <LoRaWAN_Init+0x188>)
 800d292:	2200      	movs	r2, #0
 800d294:	2100      	movs	r1, #0
 800d296:	2002      	movs	r0, #2
 800d298:	f011 f960 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d29c:	1d3b      	adds	r3, r7, #4
 800d29e:	4619      	mov	r1, r3
 800d2a0:	2001      	movs	r0, #1
 800d2a2:	f003 f911 	bl	80104c8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	0e1b      	lsrs	r3, r3, #24
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	0c1b      	lsrs	r3, r3, #16
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	0a1b      	lsrs	r3, r3, #8
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	b2c0      	uxtb	r0, r0
 800d2c0:	9003      	str	r0, [sp, #12]
 800d2c2:	9302      	str	r3, [sp, #8]
 800d2c4:	9101      	str	r1, [sp, #4]
 800d2c6:	9200      	str	r2, [sp, #0]
 800d2c8:	4b36      	ldr	r3, [pc, #216]	; (800d3a4 <LoRaWAN_Init+0x18c>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	2002      	movs	r0, #2
 800d2d0:	f011 f944 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	4b33      	ldr	r3, [pc, #204]	; (800d3a8 <LoRaWAN_Init+0x190>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d2e0:	4832      	ldr	r0, [pc, #200]	; (800d3ac <LoRaWAN_Init+0x194>)
 800d2e2:	f010 fe8d 	bl	801e000 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	4b31      	ldr	r3, [pc, #196]	; (800d3b0 <LoRaWAN_Init+0x198>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d2f2:	4830      	ldr	r0, [pc, #192]	; (800d3b4 <LoRaWAN_Init+0x19c>)
 800d2f4:	f010 fe84 	bl	801e000 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	4b2e      	ldr	r3, [pc, #184]	; (800d3b8 <LoRaWAN_Init+0x1a0>)
 800d2fe:	2201      	movs	r2, #1
 800d300:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d304:	482d      	ldr	r0, [pc, #180]	; (800d3bc <LoRaWAN_Init+0x1a4>)
 800d306:	f010 fe7b 	bl	801e000 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d30a:	2300      	movs	r3, #0
 800d30c:	9300      	str	r3, [sp, #0]
 800d30e:	4b2c      	ldr	r3, [pc, #176]	; (800d3c0 <LoRaWAN_Init+0x1a8>)
 800d310:	2200      	movs	r2, #0
 800d312:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d316:	482b      	ldr	r0, [pc, #172]	; (800d3c4 <LoRaWAN_Init+0x1ac>)
 800d318:	f010 fe72 	bl	801e000 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d31c:	4a2a      	ldr	r2, [pc, #168]	; (800d3c8 <LoRaWAN_Init+0x1b0>)
 800d31e:	2100      	movs	r1, #0
 800d320:	2001      	movs	r0, #1
 800d322:	f010 fdc9 	bl	801deb8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d326:	4a29      	ldr	r2, [pc, #164]	; (800d3cc <LoRaWAN_Init+0x1b4>)
 800d328:	2100      	movs	r1, #0
 800d32a:	2002      	movs	r0, #2
 800d32c:	f010 fdc4 	bl	801deb8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d330:	4a27      	ldr	r2, [pc, #156]	; (800d3d0 <LoRaWAN_Init+0x1b8>)
 800d332:	2100      	movs	r1, #0
 800d334:	2004      	movs	r0, #4
 800d336:	f010 fdbf 	bl	801deb8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d33a:	4a26      	ldr	r2, [pc, #152]	; (800d3d4 <LoRaWAN_Init+0x1bc>)
 800d33c:	2100      	movs	r1, #0
 800d33e:	2008      	movs	r0, #8
 800d340:	f010 fdba 	bl	801deb8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d344:	f000 fcac 	bl	800dca0 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d348:	4923      	ldr	r1, [pc, #140]	; (800d3d8 <LoRaWAN_Init+0x1c0>)
 800d34a:	4824      	ldr	r0, [pc, #144]	; (800d3dc <LoRaWAN_Init+0x1c4>)
 800d34c:	f002 f9d2 	bl	800f6f4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d350:	4823      	ldr	r0, [pc, #140]	; (800d3e0 <LoRaWAN_Init+0x1c8>)
 800d352:	f002 fa2b 	bl	800f7ac <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d356:	4819      	ldr	r0, [pc, #100]	; (800d3bc <LoRaWAN_Init+0x1a4>)
 800d358:	f010 fe88 	bl	801e06c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d35c:	4b21      	ldr	r3, [pc, #132]	; (800d3e4 <LoRaWAN_Init+0x1cc>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	4a21      	ldr	r2, [pc, #132]	; (800d3e8 <LoRaWAN_Init+0x1d0>)
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	4611      	mov	r1, r2
 800d366:	4618      	mov	r0, r3
 800d368:	f002 faee 	bl	800f948 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d36c:	4b1f      	ldr	r3, [pc, #124]	; (800d3ec <LoRaWAN_Init+0x1d4>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10b      	bne.n	800d38c <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d374:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <LoRaWAN_Init+0x1d8>)
 800d376:	6819      	ldr	r1, [r3, #0]
 800d378:	2300      	movs	r3, #0
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	4b1d      	ldr	r3, [pc, #116]	; (800d3f4 <LoRaWAN_Init+0x1dc>)
 800d37e:	2200      	movs	r2, #0
 800d380:	481d      	ldr	r0, [pc, #116]	; (800d3f8 <LoRaWAN_Init+0x1e0>)
 800d382:	f010 fe3d 	bl	801e000 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d386:	481c      	ldr	r0, [pc, #112]	; (800d3f8 <LoRaWAN_Init+0x1e0>)
 800d388:	f010 fe70 	bl	801e06c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d38c:	bf00      	nop
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	0801ece0 	.word	0x0801ece0
 800d398:	0801ed04 	.word	0x0801ed04
 800d39c:	0801ed24 	.word	0x0801ed24
 800d3a0:	0801ed44 	.word	0x0801ed44
 800d3a4:	0801ed68 	.word	0x0801ed68
 800d3a8:	0800d7c9 	.word	0x0800d7c9
 800d3ac:	20000784 	.word	0x20000784
 800d3b0:	0800d7db 	.word	0x0800d7db
 800d3b4:	2000079c 	.word	0x2000079c
 800d3b8:	0800d7ed 	.word	0x0800d7ed
 800d3bc:	200007b4 	.word	0x200007b4
 800d3c0:	0800dba1 	.word	0x0800dba1
 800d3c4:	20000678 	.word	0x20000678
 800d3c8:	0800f91d 	.word	0x0800f91d
 800d3cc:	0800d545 	.word	0x0800d545
 800d3d0:	0800dbc5 	.word	0x0800dbc5
 800d3d4:	0800db21 	.word	0x0800db21
 800d3d8:	01030000 	.word	0x01030000
 800d3dc:	20000034 	.word	0x20000034
 800d3e0:	20000080 	.word	0x20000080
 800d3e4:	20000030 	.word	0x20000030
 800d3e8:	20000031 	.word	0x20000031
 800d3ec:	2000065c 	.word	0x2000065c
 800d3f0:	20000098 	.word	0x20000098
 800d3f4:	0800d7a5 	.word	0x0800d7a5
 800d3f8:	20000660 	.word	0x20000660

0800d3fc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d3fc:	b5b0      	push	{r4, r5, r7, lr}
 800d3fe:	b08a      	sub	sp, #40	; 0x28
 800d400:	af06      	add	r7, sp, #24
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 8086 	beq.w	800d51e <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d412:	4845      	ldr	r0, [pc, #276]	; (800d528 <OnRxData+0x12c>)
 800d414:	f010 fe2a 	bl	801e06c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d05a      	beq.n	800d4d6 <OnRxData+0xda>
    {
      if (appData != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d057      	beq.n	800d4d6 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d050      	beq.n	800d4d6 <OnRxData+0xda>
        {
    switch (appData->Port)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d01f      	beq.n	800d47c <OnRxData+0x80>
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d145      	bne.n	800d4cc <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	785b      	ldrb	r3, [r3, #1]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d143      	bne.n	800d4d0 <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	d00e      	beq.n	800d470 <OnRxData+0x74>
 800d452:	2b02      	cmp	r3, #2
 800d454:	dc10      	bgt.n	800d478 <OnRxData+0x7c>
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <OnRxData+0x64>
 800d45a:	2b01      	cmp	r3, #1
 800d45c:	d004      	beq.n	800d468 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d45e:	e00b      	b.n	800d478 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d460:	2000      	movs	r0, #0
 800d462:	f002 fc39 	bl	800fcd8 <LmHandlerRequestClass>
              break;
 800d466:	e008      	b.n	800d47a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d468:	2001      	movs	r0, #1
 800d46a:	f002 fc35 	bl	800fcd8 <LmHandlerRequestClass>
              break;
 800d46e:	e004      	b.n	800d47a <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d470:	2002      	movs	r0, #2
 800d472:	f002 fc31 	bl	800fcd8 <LmHandlerRequestClass>
              break;
 800d476:	e000      	b.n	800d47a <OnRxData+0x7e>
              break;
 800d478:	bf00      	nop
          }
        }
        break;
 800d47a:	e029      	b.n	800d4d0 <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	785b      	ldrb	r3, [r3, #1]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d127      	bne.n	800d4d4 <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	4b26      	ldr	r3, [pc, #152]	; (800d52c <OnRxData+0x130>)
 800d492:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d494:	4b25      	ldr	r3, [pc, #148]	; (800d52c <OnRxData+0x130>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10b      	bne.n	800d4b4 <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d49c:	4b24      	ldr	r3, [pc, #144]	; (800d530 <OnRxData+0x134>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	2003      	movs	r0, #3
 800d4a4:	f011 f85a 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	2120      	movs	r1, #32
 800d4ac:	4821      	ldr	r0, [pc, #132]	; (800d534 <OnRxData+0x138>)
 800d4ae:	f7f8 fe4f 	bl	8006150 <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d4b2:	e00f      	b.n	800d4d4 <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d4b4:	4b20      	ldr	r3, [pc, #128]	; (800d538 <OnRxData+0x13c>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2100      	movs	r1, #0
 800d4ba:	2003      	movs	r0, #3
 800d4bc:	f011 f84e 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2120      	movs	r1, #32
 800d4c4:	481b      	ldr	r0, [pc, #108]	; (800d534 <OnRxData+0x138>)
 800d4c6:	f7f8 fe43 	bl	8006150 <HAL_GPIO_WritePin>
        break;
 800d4ca:	e003      	b.n	800d4d4 <OnRxData+0xd8>

      default:

        break;
 800d4cc:	bf00      	nop
 800d4ce:	e002      	b.n	800d4d6 <OnRxData+0xda>
        break;
 800d4d0:	bf00      	nop
 800d4d2:	e000      	b.n	800d4d6 <OnRxData+0xda>
        break;
 800d4d4:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	7c1b      	ldrb	r3, [r3, #16]
 800d4da:	2b05      	cmp	r3, #5
 800d4dc:	d81f      	bhi.n	800d51e <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	7bfa      	ldrb	r2, [r7, #15]
 800d4e4:	6839      	ldr	r1, [r7, #0]
 800d4e6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	7c09      	ldrb	r1, [r1, #16]
 800d4f0:	4608      	mov	r0, r1
 800d4f2:	4912      	ldr	r1, [pc, #72]	; (800d53c <OnRxData+0x140>)
 800d4f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d4f8:	6838      	ldr	r0, [r7, #0]
 800d4fa:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d4fe:	4605      	mov	r5, r0
 800d500:	6838      	ldr	r0, [r7, #0]
 800d502:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d506:	9005      	str	r0, [sp, #20]
 800d508:	9504      	str	r5, [sp, #16]
 800d50a:	9103      	str	r1, [sp, #12]
 800d50c:	9402      	str	r4, [sp, #8]
 800d50e:	9201      	str	r2, [sp, #4]
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	4b0b      	ldr	r3, [pc, #44]	; (800d540 <OnRxData+0x144>)
 800d514:	2200      	movs	r2, #0
 800d516:	2100      	movs	r1, #0
 800d518:	2003      	movs	r0, #3
 800d51a:	f011 f81f 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bdb0      	pop	{r4, r5, r7, pc}
 800d526:	bf00      	nop
 800d528:	2000079c 	.word	0x2000079c
 800d52c:	20000782 	.word	0x20000782
 800d530:	0801ed8c 	.word	0x0801ed8c
 800d534:	48000400 	.word	0x48000400
 800d538:	0801ed98 	.word	0x0801ed98
 800d53c:	20000018 	.word	0x20000018
 800d540:	0801eda4 	.word	0x0801eda4

0800d544 <SendTxData>:

static void SendTxData(void)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08c      	sub	sp, #48	; 0x30
 800d548:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d54a:	23ff      	movs	r3, #255	; 0xff
 800d54c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d550:	f7f5 fa3e 	bl	80029d0 <GetBatteryLevel>
 800d554:	4603      	mov	r3, r0
 800d556:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d566:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4b7d      	ldr	r3, [pc, #500]	; (800d764 <SendTxData+0x220>)
 800d56e:	2201      	movs	r2, #1
 800d570:	2100      	movs	r1, #0
 800d572:	2002      	movs	r0, #2
 800d574:	f010 fff2 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7f3 fbe0 	bl	8000d40 <__aeabi_f2iz>
 800d580:	4603      	mov	r3, r0
 800d582:	b21b      	sxth	r3, r3
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	4b78      	ldr	r3, [pc, #480]	; (800d768 <SendTxData+0x224>)
 800d588:	2201      	movs	r2, #1
 800d58a:	2100      	movs	r1, #0
 800d58c:	2002      	movs	r0, #2
 800d58e:	f010 ffe5 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d592:	4b76      	ldr	r3, [pc, #472]	; (800d76c <SendTxData+0x228>)
 800d594:	2202      	movs	r2, #2
 800d596:	701a      	strb	r2, [r3, #0]

  AppData.Buffer[i++] = PM2_5/100;
 800d598:	4b75      	ldr	r3, [pc, #468]	; (800d770 <SendTxData+0x22c>)
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	4a75      	ldr	r2, [pc, #468]	; (800d774 <SendTxData+0x230>)
 800d59e:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a2:	095b      	lsrs	r3, r3, #5
 800d5a4:	b298      	uxth	r0, r3
 800d5a6:	4b71      	ldr	r3, [pc, #452]	; (800d76c <SendTxData+0x228>)
 800d5a8:	685a      	ldr	r2, [r3, #4]
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	1c59      	adds	r1, r3, #1
 800d5ae:	61f9      	str	r1, [r7, #28]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	b2c2      	uxtb	r2, r0
 800d5b4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = PM2_5%100;
 800d5b6:	4b6e      	ldr	r3, [pc, #440]	; (800d770 <SendTxData+0x22c>)
 800d5b8:	881b      	ldrh	r3, [r3, #0]
 800d5ba:	4a6e      	ldr	r2, [pc, #440]	; (800d774 <SendTxData+0x230>)
 800d5bc:	fba2 1203 	umull	r1, r2, r2, r3
 800d5c0:	0952      	lsrs	r2, r2, #5
 800d5c2:	2164      	movs	r1, #100	; 0x64
 800d5c4:	fb01 f202 	mul.w	r2, r1, r2
 800d5c8:	1a9b      	subs	r3, r3, r2
 800d5ca:	b298      	uxth	r0, r3
 800d5cc:	4b67      	ldr	r3, [pc, #412]	; (800d76c <SendTxData+0x228>)
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	1c59      	adds	r1, r3, #1
 800d5d4:	61f9      	str	r1, [r7, #28]
 800d5d6:	4413      	add	r3, r2
 800d5d8:	b2c2      	uxtb	r2, r0
 800d5da:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d5dc:	4b66      	ldr	r3, [pc, #408]	; (800d778 <SendTxData+0x234>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7f2 ff35 	bl	8000450 <__aeabi_f2d>
 800d5e6:	f04f 0200 	mov.w	r2, #0
 800d5ea:	4b64      	ldr	r3, [pc, #400]	; (800d77c <SendTxData+0x238>)
 800d5ec:	f7f2 ff88 	bl	8000500 <__aeabi_dmul>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	f7f3 fa1c 	bl	8000a34 <__aeabi_d2iz>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d600:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d604:	4a5b      	ldr	r2, [pc, #364]	; (800d774 <SendTxData+0x230>)
 800d606:	fb82 1203 	smull	r1, r2, r2, r3
 800d60a:	1152      	asrs	r2, r2, #5
 800d60c:	17db      	asrs	r3, r3, #31
 800d60e:	1ad3      	subs	r3, r2, r3
 800d610:	b218      	sxth	r0, r3
 800d612:	4b56      	ldr	r3, [pc, #344]	; (800d76c <SendTxData+0x228>)
 800d614:	685a      	ldr	r2, [r3, #4]
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	1c59      	adds	r1, r3, #1
 800d61a:	61f9      	str	r1, [r7, #28]
 800d61c:	4413      	add	r3, r2
 800d61e:	b2c2      	uxtb	r2, r0
 800d620:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d622:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d626:	4a53      	ldr	r2, [pc, #332]	; (800d774 <SendTxData+0x230>)
 800d628:	fb82 1203 	smull	r1, r2, r2, r3
 800d62c:	1151      	asrs	r1, r2, #5
 800d62e:	17da      	asrs	r2, r3, #31
 800d630:	1a8a      	subs	r2, r1, r2
 800d632:	2164      	movs	r1, #100	; 0x64
 800d634:	fb01 f202 	mul.w	r2, r1, r2
 800d638:	1a9b      	subs	r3, r3, r2
 800d63a:	b218      	sxth	r0, r3
 800d63c:	4b4b      	ldr	r3, [pc, #300]	; (800d76c <SendTxData+0x228>)
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	1c59      	adds	r1, r3, #1
 800d644:	61f9      	str	r1, [r7, #28]
 800d646:	4413      	add	r3, r2
 800d648:	b2c2      	uxtb	r2, r0
 800d64a:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d64c:	4b4c      	ldr	r3, [pc, #304]	; (800d780 <SendTxData+0x23c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f7f2 fefd 	bl	8000450 <__aeabi_f2d>
 800d656:	f04f 0200 	mov.w	r2, #0
 800d65a:	4b48      	ldr	r3, [pc, #288]	; (800d77c <SendTxData+0x238>)
 800d65c:	f7f2 ff50 	bl	8000500 <__aeabi_dmul>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4610      	mov	r0, r2
 800d666:	4619      	mov	r1, r3
 800d668:	f7f3 f9e4 	bl	8000a34 <__aeabi_d2iz>
 800d66c:	4603      	mov	r3, r0
 800d66e:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d670:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d674:	4a3f      	ldr	r2, [pc, #252]	; (800d774 <SendTxData+0x230>)
 800d676:	fb82 1203 	smull	r1, r2, r2, r3
 800d67a:	1152      	asrs	r2, r2, #5
 800d67c:	17db      	asrs	r3, r3, #31
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	b218      	sxth	r0, r3
 800d682:	4b3a      	ldr	r3, [pc, #232]	; (800d76c <SendTxData+0x228>)
 800d684:	685a      	ldr	r2, [r3, #4]
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	1c59      	adds	r1, r3, #1
 800d68a:	61f9      	str	r1, [r7, #28]
 800d68c:	4413      	add	r3, r2
 800d68e:	b2c2      	uxtb	r2, r0
 800d690:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d692:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d696:	4a37      	ldr	r2, [pc, #220]	; (800d774 <SendTxData+0x230>)
 800d698:	fb82 1203 	smull	r1, r2, r2, r3
 800d69c:	1151      	asrs	r1, r2, #5
 800d69e:	17da      	asrs	r2, r3, #31
 800d6a0:	1a8a      	subs	r2, r1, r2
 800d6a2:	2164      	movs	r1, #100	; 0x64
 800d6a4:	fb01 f202 	mul.w	r2, r1, r2
 800d6a8:	1a9b      	subs	r3, r3, r2
 800d6aa:	b218      	sxth	r0, r3
 800d6ac:	4b2f      	ldr	r3, [pc, #188]	; (800d76c <SendTxData+0x228>)
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	1c59      	adds	r1, r3, #1
 800d6b4:	61f9      	str	r1, [r7, #28]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	b2c2      	uxtb	r2, r0
 800d6ba:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	4b2a      	ldr	r3, [pc, #168]	; (800d76c <SendTxData+0x228>)
 800d6c2:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6c4:	4b2f      	ldr	r3, [pc, #188]	; (800d784 <SendTxData+0x240>)
 800d6c6:	7a5b      	ldrb	r3, [r3, #9]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d007      	beq.n	800d6dc <SendTxData+0x198>
 800d6cc:	f002 f9e0 	bl	800fa90 <LmHandlerJoinStatus>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d102      	bne.n	800d6dc <SendTxData+0x198>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d6d6:	482b      	ldr	r0, [pc, #172]	; (800d784 <SendTxData+0x240>)
 800d6d8:	f010 fd36 	bl	801e148 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d6dc:	4b2a      	ldr	r3, [pc, #168]	; (800d788 <SendTxData+0x244>)
 800d6de:	78db      	ldrb	r3, [r3, #3]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4821      	ldr	r0, [pc, #132]	; (800d76c <SendTxData+0x228>)
 800d6e6:	f002 f9ef 	bl	800fac8 <LmHandlerSend>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d6f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <SendTxData+0x1c2>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d6f8:	4b24      	ldr	r3, [pc, #144]	; (800d78c <SendTxData+0x248>)
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	2001      	movs	r0, #1
 800d700:	f010 ff2c 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
 800d704:	e016      	b.n	800d734 <SendTxData+0x1f0>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d706:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d70a:	f113 0f06 	cmn.w	r3, #6
 800d70e:	d111      	bne.n	800d734 <SendTxData+0x1f0>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d710:	f002 f910 	bl	800f934 <LmHandlerGetDutyCycleWaitTime>
 800d714:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00b      	beq.n	800d734 <SendTxData+0x1f0>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	4a1c      	ldr	r2, [pc, #112]	; (800d790 <SendTxData+0x24c>)
 800d720:	fba2 2303 	umull	r2, r3, r2, r3
 800d724:	099b      	lsrs	r3, r3, #6
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	4b1a      	ldr	r3, [pc, #104]	; (800d794 <SendTxData+0x250>)
 800d72a:	2201      	movs	r2, #1
 800d72c:	2100      	movs	r1, #0
 800d72e:	2001      	movs	r0, #1
 800d730:	f010 ff14 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d734:	4b18      	ldr	r3, [pc, #96]	; (800d798 <SendTxData+0x254>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10f      	bne.n	800d75c <SendTxData+0x218>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d73c:	4817      	ldr	r0, [pc, #92]	; (800d79c <SendTxData+0x258>)
 800d73e:	f010 fd03 	bl	801e148 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d742:	4b17      	ldr	r3, [pc, #92]	; (800d7a0 <SendTxData+0x25c>)
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	4293      	cmp	r3, r2
 800d74a:	bf38      	it	cc
 800d74c:	4613      	movcc	r3, r2
 800d74e:	4619      	mov	r1, r3
 800d750:	4812      	ldr	r0, [pc, #72]	; (800d79c <SendTxData+0x258>)
 800d752:	f010 fd69 	bl	801e228 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d756:	4811      	ldr	r0, [pc, #68]	; (800d79c <SendTxData+0x258>)
 800d758:	f010 fc88 	bl	801e06c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d75c:	bf00      	nop
 800d75e:	3728      	adds	r7, #40	; 0x28
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	0801edec 	.word	0x0801edec
 800d768:	0801edf8 	.word	0x0801edf8
 800d76c:	2000009c 	.word	0x2000009c
 800d770:	20000264 	.word	0x20000264
 800d774:	51eb851f 	.word	0x51eb851f
 800d778:	20000268 	.word	0x20000268
 800d77c:	40590000 	.word	0x40590000
 800d780:	2000026c 	.word	0x2000026c
 800d784:	200007b4 	.word	0x200007b4
 800d788:	20000080 	.word	0x20000080
 800d78c:	0801ee04 	.word	0x0801ee04
 800d790:	10624dd3 	.word	0x10624dd3
 800d794:	0801ee14 	.word	0x0801ee14
 800d798:	2000065c 	.word	0x2000065c
 800d79c:	20000660 	.word	0x20000660
 800d7a0:	20000098 	.word	0x20000098

0800d7a4 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d7ac:	2100      	movs	r1, #0
 800d7ae:	2002      	movs	r0, #2
 800d7b0:	f010 fba4 	bl	801defc <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d7b4:	4803      	ldr	r0, [pc, #12]	; (800d7c4 <OnTxTimerEvent+0x20>)
 800d7b6:	f010 fc59 	bl	801e06c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20000660 	.word	0x20000660

0800d7c8 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bc80      	pop	{r7}
 800d7d8:	4770      	bx	lr

0800d7da <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b083      	sub	sp, #12
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d7e2:	bf00      	nop
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bc80      	pop	{r7}
 800d7ea:	4770      	bx	lr

0800d7ec <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d7f4:	bf00      	nop
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bc80      	pop	{r7}
 800d7fc:	4770      	bx	lr
	...

0800d800 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af04      	add	r7, sp, #16
 800d806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d041      	beq.n	800d892 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d03d      	beq.n	800d892 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d816:	4821      	ldr	r0, [pc, #132]	; (800d89c <OnTxData+0x9c>)
 800d818:	f010 fc28 	bl	801e06c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d81c:	4b20      	ldr	r3, [pc, #128]	; (800d8a0 <OnTxData+0xa0>)
 800d81e:	2200      	movs	r2, #0
 800d820:	2100      	movs	r1, #0
 800d822:	2002      	movs	r0, #2
 800d824:	f010 fe9a 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	7c12      	ldrb	r2, [r2, #16]
 800d830:	4611      	mov	r1, r2
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d838:	4610      	mov	r0, r2
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d840:	9203      	str	r2, [sp, #12]
 800d842:	9002      	str	r0, [sp, #8]
 800d844:	9101      	str	r1, [sp, #4]
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	4b16      	ldr	r3, [pc, #88]	; (800d8a4 <OnTxData+0xa4>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	2100      	movs	r1, #0
 800d84e:	2003      	movs	r0, #3
 800d850:	f010 fe84 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d854:	4b14      	ldr	r3, [pc, #80]	; (800d8a8 <OnTxData+0xa8>)
 800d856:	2200      	movs	r2, #0
 800d858:	2100      	movs	r1, #0
 800d85a:	2003      	movs	r0, #3
 800d85c:	f010 fe7e 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	7a1b      	ldrb	r3, [r3, #8]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d10e      	bne.n	800d886 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	7a5b      	ldrb	r3, [r3, #9]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <OnTxData+0x74>
 800d870:	4b0e      	ldr	r3, [pc, #56]	; (800d8ac <OnTxData+0xac>)
 800d872:	e000      	b.n	800d876 <OnTxData+0x76>
 800d874:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <OnTxData+0xb0>)
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	4b0e      	ldr	r3, [pc, #56]	; (800d8b4 <OnTxData+0xb4>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	2100      	movs	r1, #0
 800d87e:	2003      	movs	r0, #3
 800d880:	f010 fe6c 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d884:	e005      	b.n	800d892 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d886:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <OnTxData+0xb8>)
 800d888:	2200      	movs	r2, #0
 800d88a:	2100      	movs	r1, #0
 800d88c:	2003      	movs	r0, #3
 800d88e:	f010 fe65 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 800d892:	bf00      	nop
 800d894:	3708      	adds	r7, #8
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}
 800d89a:	bf00      	nop
 800d89c:	20000784 	.word	0x20000784
 800d8a0:	0801ee34 	.word	0x0801ee34
 800d8a4:	0801ee68 	.word	0x0801ee68
 800d8a8:	0801ee9c 	.word	0x0801ee9c
 800d8ac:	0801eeac 	.word	0x0801eeac
 800d8b0:	0801eeb0 	.word	0x0801eeb0
 800d8b4:	0801eeb8 	.word	0x0801eeb8
 800d8b8:	0801eecc 	.word	0x0801eecc

0800d8bc <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d035      	beq.n	800d936 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d11a      	bne.n	800d90a <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d8d4:	481a      	ldr	r0, [pc, #104]	; (800d940 <OnJoinRequest+0x84>)
 800d8d6:	f010 fc37 	bl	801e148 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d8da:	4b1a      	ldr	r3, [pc, #104]	; (800d944 <OnJoinRequest+0x88>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	2002      	movs	r0, #2
 800d8e2:	f010 fe3b 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	79db      	ldrb	r3, [r3, #7]
 800d8ea:	2b01      	cmp	r3, #1
 800d8ec:	d106      	bne.n	800d8fc <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d8ee:	4b16      	ldr	r3, [pc, #88]	; (800d948 <OnJoinRequest+0x8c>)
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	2002      	movs	r0, #2
 800d8f6:	f010 fe31 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d8fa:	e01c      	b.n	800d936 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d8fc:	4b13      	ldr	r3, [pc, #76]	; (800d94c <OnJoinRequest+0x90>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	2100      	movs	r1, #0
 800d902:	2002      	movs	r0, #2
 800d904:	f010 fe2a 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 800d908:	e015      	b.n	800d936 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d90a:	4b11      	ldr	r3, [pc, #68]	; (800d950 <OnJoinRequest+0x94>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	2100      	movs	r1, #0
 800d910:	2002      	movs	r0, #2
 800d912:	f010 fe23 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	79db      	ldrb	r3, [r3, #7]
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d10b      	bne.n	800d936 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d91e:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <OnJoinRequest+0x98>)
 800d920:	2200      	movs	r2, #0
 800d922:	2100      	movs	r1, #0
 800d924:	2002      	movs	r0, #2
 800d926:	f010 fe19 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d92a:	4b0b      	ldr	r3, [pc, #44]	; (800d958 <OnJoinRequest+0x9c>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	2101      	movs	r1, #1
 800d930:	4618      	mov	r0, r3
 800d932:	f002 f809 	bl	800f948 <LmHandlerJoin>
}
 800d936:	bf00      	nop
 800d938:	3708      	adds	r7, #8
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	200007b4 	.word	0x200007b4
 800d944:	0801eedc 	.word	0x0801eedc
 800d948:	0801eef4 	.word	0x0801eef4
 800d94c:	0801ef14 	.word	0x0801ef14
 800d950:	0801ef34 	.word	0x0801ef34
 800d954:	0801ef50 	.word	0x0801ef50
 800d958:	20000030 	.word	0x20000030

0800d95c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d95e:	b093      	sub	sp, #76	; 0x4c
 800d960:	af0c      	add	r7, sp, #48	; 0x30
 800d962:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d056      	beq.n	800da18 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	785b      	ldrb	r3, [r3, #1]
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d008      	beq.n	800d984 <OnBeaconStatusChange+0x28>
 800d972:	2b03      	cmp	r3, #3
 800d974:	d049      	beq.n	800da0a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d976:	4b2a      	ldr	r3, [pc, #168]	; (800da20 <OnBeaconStatusChange+0xc4>)
 800d978:	2200      	movs	r2, #0
 800d97a:	2100      	movs	r1, #0
 800d97c:	2002      	movs	r0, #2
 800d97e:	f010 fded 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d982:	e049      	b.n	800da18 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	7c1b      	ldrb	r3, [r3, #16]
 800d988:	4618      	mov	r0, r3
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d990:	461c      	mov	r4, r3
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d998:	461d      	mov	r5, r3
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	6852      	ldr	r2, [r2, #4]
 800d9a2:	6979      	ldr	r1, [r7, #20]
 800d9a4:	7d49      	ldrb	r1, [r1, #21]
 800d9a6:	460e      	mov	r6, r1
 800d9a8:	6979      	ldr	r1, [r7, #20]
 800d9aa:	7d89      	ldrb	r1, [r1, #22]
 800d9ac:	6139      	str	r1, [r7, #16]
 800d9ae:	6979      	ldr	r1, [r7, #20]
 800d9b0:	7dc9      	ldrb	r1, [r1, #23]
 800d9b2:	60f9      	str	r1, [r7, #12]
 800d9b4:	6979      	ldr	r1, [r7, #20]
 800d9b6:	7e09      	ldrb	r1, [r1, #24]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	6979      	ldr	r1, [r7, #20]
 800d9bc:	7e49      	ldrb	r1, [r1, #25]
 800d9be:	6079      	str	r1, [r7, #4]
 800d9c0:	6979      	ldr	r1, [r7, #20]
 800d9c2:	7e89      	ldrb	r1, [r1, #26]
 800d9c4:	6039      	str	r1, [r7, #0]
 800d9c6:	6979      	ldr	r1, [r7, #20]
 800d9c8:	7ec9      	ldrb	r1, [r1, #27]
 800d9ca:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9cc:	f8d7 c000 	ldr.w	ip, [r7]
 800d9d0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d9d4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d9d8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d9dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d9e0:	f8cd c020 	str.w	ip, [sp, #32]
 800d9e4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d9e8:	f8cd c01c 	str.w	ip, [sp, #28]
 800d9ec:	6939      	ldr	r1, [r7, #16]
 800d9ee:	9106      	str	r1, [sp, #24]
 800d9f0:	9605      	str	r6, [sp, #20]
 800d9f2:	9204      	str	r2, [sp, #16]
 800d9f4:	9303      	str	r3, [sp, #12]
 800d9f6:	9502      	str	r5, [sp, #8]
 800d9f8:	9401      	str	r4, [sp, #4]
 800d9fa:	9000      	str	r0, [sp, #0]
 800d9fc:	4b09      	ldr	r3, [pc, #36]	; (800da24 <OnBeaconStatusChange+0xc8>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	2100      	movs	r1, #0
 800da02:	2002      	movs	r0, #2
 800da04:	f010 fdaa 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800da08:	e006      	b.n	800da18 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800da0a:	4b07      	ldr	r3, [pc, #28]	; (800da28 <OnBeaconStatusChange+0xcc>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	2100      	movs	r1, #0
 800da10:	2002      	movs	r0, #2
 800da12:	f010 fda3 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800da16:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800da18:	bf00      	nop
 800da1a:	371c      	adds	r7, #28
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da20:	0801ef74 	.word	0x0801ef74
 800da24:	0801ef8c 	.word	0x0801ef8c
 800da28:	0801f000 	.word	0x0801f000

0800da2c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800da2c:	b480      	push	{r7}
 800da2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800da30:	bf00      	nop
 800da32:	46bd      	mov	sp, r7
 800da34:	bc80      	pop	{r7}
 800da36:	4770      	bx	lr

0800da38 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b084      	sub	sp, #16
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	4603      	mov	r3, r0
 800da40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800da42:	79fb      	ldrb	r3, [r7, #7]
 800da44:	4a06      	ldr	r2, [pc, #24]	; (800da60 <OnClassChange+0x28>)
 800da46:	5cd3      	ldrb	r3, [r2, r3]
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	4b06      	ldr	r3, [pc, #24]	; (800da64 <OnClassChange+0x2c>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	2100      	movs	r1, #0
 800da50:	2002      	movs	r0, #2
 800da52:	f010 fd83 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800da56:	bf00      	nop
 800da58:	3708      	adds	r7, #8
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	0801f03c 	.word	0x0801f03c
 800da64:	0801f020 	.word	0x0801f020

0800da68 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800da6c:	2100      	movs	r1, #0
 800da6e:	2001      	movs	r0, #1
 800da70:	f010 fa44 	bl	801defc <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800da74:	bf00      	nop
 800da76:	bd80      	pop	{r7, pc}

0800da78 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800da80:	4a0d      	ldr	r2, [pc, #52]	; (800dab8 <OnTxPeriodicityChanged+0x40>)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800da86:	4b0c      	ldr	r3, [pc, #48]	; (800dab8 <OnTxPeriodicityChanged+0x40>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d103      	bne.n	800da96 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800da8e:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <OnTxPeriodicityChanged+0x40>)
 800da90:	f242 7210 	movw	r2, #10000	; 0x2710
 800da94:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800da96:	4809      	ldr	r0, [pc, #36]	; (800dabc <OnTxPeriodicityChanged+0x44>)
 800da98:	f010 fb56 	bl	801e148 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800da9c:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <OnTxPeriodicityChanged+0x40>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4619      	mov	r1, r3
 800daa2:	4806      	ldr	r0, [pc, #24]	; (800dabc <OnTxPeriodicityChanged+0x44>)
 800daa4:	f010 fbc0 	bl	801e228 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800daa8:	4804      	ldr	r0, [pc, #16]	; (800dabc <OnTxPeriodicityChanged+0x44>)
 800daaa:	f010 fadf 	bl	801e06c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	20000098 	.word	0x20000098
 800dabc:	20000660 	.word	0x20000660

0800dac0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	4603      	mov	r3, r0
 800dac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800daca:	4a04      	ldr	r2, [pc, #16]	; (800dadc <OnTxFrameCtrlChanged+0x1c>)
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bc80      	pop	{r7}
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	20000080 	.word	0x20000080

0800dae0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b083      	sub	sp, #12
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	4603      	mov	r3, r0
 800dae8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800daea:	4a04      	ldr	r2, [pc, #16]	; (800dafc <OnPingSlotPeriodicityChanged+0x1c>)
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bc80      	pop	{r7}
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	20000080 	.word	0x20000080

0800db00 <OnSystemReset>:

static void OnSystemReset(void)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800db04:	f002 fd11 	bl	801052a <LmHandlerHalt>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <OnSystemReset+0x1c>
 800db0e:	f001 ffbf 	bl	800fa90 <LmHandlerJoinStatus>
 800db12:	4603      	mov	r3, r0
 800db14:	2b01      	cmp	r3, #1
 800db16:	d101      	bne.n	800db1c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800db18:	f7ff fb68 	bl	800d1ec <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800db1c:	bf00      	nop
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <StopJoin>:

static void StopJoin(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800db24:	4817      	ldr	r0, [pc, #92]	; (800db84 <StopJoin+0x64>)
 800db26:	f010 fb0f 	bl	801e148 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800db2a:	f002 fcf1 	bl	8010510 <LmHandlerStop>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d006      	beq.n	800db42 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800db34:	4b14      	ldr	r3, [pc, #80]	; (800db88 <StopJoin+0x68>)
 800db36:	2200      	movs	r2, #0
 800db38:	2100      	movs	r1, #0
 800db3a:	2002      	movs	r0, #2
 800db3c:	f010 fd0e 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
 800db40:	e01a      	b.n	800db78 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800db42:	4b12      	ldr	r3, [pc, #72]	; (800db8c <StopJoin+0x6c>)
 800db44:	2200      	movs	r2, #0
 800db46:	2100      	movs	r1, #0
 800db48:	2002      	movs	r0, #2
 800db4a:	f010 fd07 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800db4e:	4b10      	ldr	r3, [pc, #64]	; (800db90 <StopJoin+0x70>)
 800db50:	2201      	movs	r2, #1
 800db52:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800db54:	4b0f      	ldr	r3, [pc, #60]	; (800db94 <StopJoin+0x74>)
 800db56:	2200      	movs	r2, #0
 800db58:	2100      	movs	r1, #0
 800db5a:	2002      	movs	r0, #2
 800db5c:	f010 fcfe 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800db60:	480d      	ldr	r0, [pc, #52]	; (800db98 <StopJoin+0x78>)
 800db62:	f001 fe23 	bl	800f7ac <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800db66:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <StopJoin+0x70>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2101      	movs	r1, #1
 800db6c:	4618      	mov	r0, r3
 800db6e:	f001 feeb 	bl	800f948 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800db72:	4804      	ldr	r0, [pc, #16]	; (800db84 <StopJoin+0x64>)
 800db74:	f010 fa7a 	bl	801e06c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800db78:	4808      	ldr	r0, [pc, #32]	; (800db9c <StopJoin+0x7c>)
 800db7a:	f010 fa77 	bl	801e06c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800db7e:	bf00      	nop
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	20000660 	.word	0x20000660
 800db88:	0801f040 	.word	0x0801f040
 800db8c:	0801f060 	.word	0x0801f060
 800db90:	20000030 	.word	0x20000030
 800db94:	0801f074 	.word	0x0801f074
 800db98:	20000080 	.word	0x20000080
 800db9c:	20000678 	.word	0x20000678

0800dba0 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800dba8:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <OnStopJoinTimerEvent+0x20>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d103      	bne.n	800dbb8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	2008      	movs	r0, #8
 800dbb4:	f010 f9a2 	bl	801defc <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800dbb8:	bf00      	nop
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	20000030 	.word	0x20000030

0800dbc4 <StoreContext>:

static void StoreContext(void)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800dbca:	23ff      	movs	r3, #255	; 0xff
 800dbcc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800dbce:	f002 fce1 	bl	8010594 <LmHandlerNvmDataStore>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800dbd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbda:	f113 0f08 	cmn.w	r3, #8
 800dbde:	d106      	bne.n	800dbee <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800dbe0:	4b0a      	ldr	r3, [pc, #40]	; (800dc0c <StoreContext+0x48>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	2002      	movs	r0, #2
 800dbe8:	f010 fcb8 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800dbec:	e00a      	b.n	800dc04 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800dbee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf6:	d105      	bne.n	800dc04 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800dbf8:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <StoreContext+0x4c>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	2002      	movs	r0, #2
 800dc00:	f010 fcac 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc04:	bf00      	nop
 800dc06:	3708      	adds	r7, #8
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	0801f094 	.word	0x0801f094
 800dc10:	0801f0ac 	.word	0x0801f0ac

0800dc14 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800dc1e:	79fb      	ldrb	r3, [r7, #7]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d106      	bne.n	800dc32 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dc24:	4b08      	ldr	r3, [pc, #32]	; (800dc48 <OnNvmDataChange+0x34>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	2100      	movs	r1, #0
 800dc2a:	2002      	movs	r0, #2
 800dc2c:	f010 fc96 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dc30:	e005      	b.n	800dc3e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dc32:	4b06      	ldr	r3, [pc, #24]	; (800dc4c <OnNvmDataChange+0x38>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	2100      	movs	r1, #0
 800dc38:	2002      	movs	r0, #2
 800dc3a:	f010 fc8f 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc3e:	bf00      	nop
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	0801f0c4 	.word	0x0801f0c4
 800dc4c:	0801f0d8 	.word	0x0801f0d8

0800dc50 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800dc5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc5e:	4807      	ldr	r0, [pc, #28]	; (800dc7c <OnStoreContextRequest+0x2c>)
 800dc60:	f7f3 fe04 	bl	800186c <FLASH_IF_Erase>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d104      	bne.n	800dc74 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dc6a:	683a      	ldr	r2, [r7, #0]
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	4803      	ldr	r0, [pc, #12]	; (800dc7c <OnStoreContextRequest+0x2c>)
 800dc70:	f7f3 fdac 	bl	80017cc <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800dc74:	bf00      	nop
 800dc76:	3708      	adds	r7, #8
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	0803f000 	.word	0x0803f000

0800dc80 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	4903      	ldr	r1, [pc, #12]	; (800dc9c <OnRestoreContextRequest+0x1c>)
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7f3 fdc4 	bl	800181c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800dc94:	bf00      	nop
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	0803f000 	.word	0x0803f000

0800dca0 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800dca4:	4b15      	ldr	r3, [pc, #84]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800dcaa:	4b14      	ldr	r3, [pc, #80]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800dcb0:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800dcb6:	4b11      	ldr	r3, [pc, #68]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcb8:	2200      	movs	r2, #0
 800dcba:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800dcbc:	4b0f      	ldr	r3, [pc, #60]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f043 0320 	orr.w	r3, r3, #32
 800dcc4:	4a0d      	ldr	r2, [pc, #52]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcc6:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800dcc8:	4b0c      	ldr	r3, [pc, #48]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10c      	bne.n	800dcea <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800dcd0:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <LoraInfo_Init+0x60>)
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	f010 fc40 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800dcdc:	bf00      	nop
 800dcde:	f010 fc2b 	bl	801e538 <UTIL_ADV_TRACE_IsBufferEmpty>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d1fa      	bne.n	800dcde <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800dce8:	e7fe      	b.n	800dce8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800dcea:	4b04      	ldr	r3, [pc, #16]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800dcf0:	4b02      	ldr	r3, [pc, #8]	; (800dcfc <LoraInfo_Init+0x5c>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dcf6:	bf00      	nop
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	200007cc 	.word	0x200007cc
 800dd00:	0801f0ec 	.word	0x0801f0ec

0800dd04 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dd04:	b480      	push	{r7}
 800dd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dd08:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <LoraInfo_GetPtr+0x10>)
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bc80      	pop	{r7}
 800dd10:	4770      	bx	lr
 800dd12:	bf00      	nop
 800dd14:	200007cc 	.word	0x200007cc

0800dd18 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dd1c:	f7f5 fe99 	bl	8003a52 <BSP_RADIO_Init>
 800dd20:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b082      	sub	sp, #8
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dd30:	79fb      	ldrb	r3, [r7, #7]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7f5 febe 	bl	8003ab4 <BSP_RADIO_ConfigRFSwitch>
 800dd38:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dd46:	f7f5 ff03 	bl	8003b50 <BSP_RADIO_GetTxConfig>
 800dd4a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dd54:	f7f5 ff03 	bl	8003b5e <BSP_RADIO_IsTCXO>
 800dd58:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	bd80      	pop	{r7, pc}

0800dd5e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dd5e:	b580      	push	{r7, lr}
 800dd60:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dd62:	f7f5 ff03 	bl	8003b6c <BSP_RADIO_IsDCDC>
 800dd66:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	4603      	mov	r3, r0
 800dd74:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dd76:	79fb      	ldrb	r3, [r7, #7]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7f5 fefe 	bl	8003b7a <BSP_RADIO_GetRFOMaxPowerConfig>
 800dd7e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	33f1      	adds	r3, #241	; 0xf1
 800dd94:	2210      	movs	r2, #16
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f00c f875 	bl	8019e88 <memset1>
    ctx->M_n = 0;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	22f0      	movs	r2, #240	; 0xf0
 800ddaa:	2100      	movs	r1, #0
 800ddac:	4618      	mov	r0, r3
 800ddae:	f00c f86b 	bl	8019e88 <memset1>
}
 800ddb2:	bf00      	nop
 800ddb4:	3708      	adds	r7, #8
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b082      	sub	sp, #8
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	2110      	movs	r1, #16
 800ddca:	6838      	ldr	r0, [r7, #0]
 800ddcc:	f000 fe5c 	bl	800ea88 <lorawan_aes_set_key>
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b08c      	sub	sp, #48	; 0x30
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 80a1 	beq.w	800df32 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddf6:	f1c3 0310 	rsb	r3, r3, #16
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	bf28      	it	cs
 800de00:	4613      	movcs	r3, r2
 800de02:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f203 1201 	addw	r2, r3, #257	; 0x101
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de10:	4413      	add	r3, r2
 800de12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de14:	b292      	uxth	r2, r2
 800de16:	68b9      	ldr	r1, [r7, #8]
 800de18:	4618      	mov	r0, r3
 800de1a:	f00b fffa 	bl	8019e12 <memcpy1>
        ctx->M_n += mlen;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	441a      	add	r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de34:	2b0f      	cmp	r3, #15
 800de36:	f240 808d 	bls.w	800df54 <AES_CMAC_Update+0x17c>
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de3e:	429a      	cmp	r2, r3
 800de40:	f000 8088 	beq.w	800df54 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800de44:	2300      	movs	r3, #0
 800de46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de48:	e015      	b.n	800de76 <AES_CMAC_Update+0x9e>
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4e:	4413      	add	r3, r2
 800de50:	33f1      	adds	r3, #241	; 0xf1
 800de52:	781a      	ldrb	r2, [r3, #0]
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de58:	440b      	add	r3, r1
 800de5a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	4053      	eors	r3, r2
 800de62:	b2d9      	uxtb	r1, r3
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	4413      	add	r3, r2
 800de6a:	33f1      	adds	r3, #241	; 0xf1
 800de6c:	460a      	mov	r2, r1
 800de6e:	701a      	strb	r2, [r3, #0]
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	3301      	adds	r3, #1
 800de74:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	2b0f      	cmp	r3, #15
 800de7a:	dde6      	ble.n	800de4a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de82:	f107 0314 	add.w	r3, r7, #20
 800de86:	2210      	movs	r2, #16
 800de88:	4618      	mov	r0, r3
 800de8a:	f00b ffc2 	bl	8019e12 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	f107 0114 	add.w	r1, r7, #20
 800de94:	f107 0314 	add.w	r3, r7, #20
 800de98:	4618      	mov	r0, r3
 800de9a:	f000 fed3 	bl	800ec44 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	33f1      	adds	r3, #241	; 0xf1
 800dea2:	f107 0114 	add.w	r1, r7, #20
 800dea6:	2210      	movs	r2, #16
 800dea8:	4618      	mov	r0, r3
 800deaa:	f00b ffb2 	bl	8019e12 <memcpy1>

        data += mlen;
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	4413      	add	r3, r2
 800deb4:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800debe:	e038      	b.n	800df32 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dec0:	2300      	movs	r3, #0
 800dec2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dec4:	e013      	b.n	800deee <AES_CMAC_Update+0x116>
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deca:	4413      	add	r3, r2
 800decc:	33f1      	adds	r3, #241	; 0xf1
 800dece:	781a      	ldrb	r2, [r3, #0]
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	440b      	add	r3, r1
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	4053      	eors	r3, r2
 800deda:	b2d9      	uxtb	r1, r3
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	4413      	add	r3, r2
 800dee2:	33f1      	adds	r3, #241	; 0xf1
 800dee4:	460a      	mov	r2, r1
 800dee6:	701a      	strb	r2, [r3, #0]
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	3301      	adds	r3, #1
 800deec:	62bb      	str	r3, [r7, #40]	; 0x28
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	2b0f      	cmp	r3, #15
 800def2:	dde8      	ble.n	800dec6 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800defa:	f107 0314 	add.w	r3, r7, #20
 800defe:	2210      	movs	r2, #16
 800df00:	4618      	mov	r0, r3
 800df02:	f00b ff86 	bl	8019e12 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800df06:	68fa      	ldr	r2, [r7, #12]
 800df08:	f107 0114 	add.w	r1, r7, #20
 800df0c:	f107 0314 	add.w	r3, r7, #20
 800df10:	4618      	mov	r0, r3
 800df12:	f000 fe97 	bl	800ec44 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	33f1      	adds	r3, #241	; 0xf1
 800df1a:	f107 0114 	add.w	r1, r7, #20
 800df1e:	2210      	movs	r2, #16
 800df20:	4618      	mov	r0, r3
 800df22:	f00b ff76 	bl	8019e12 <memcpy1>

        data += 16;
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	3310      	adds	r3, #16
 800df2a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	3b10      	subs	r3, #16
 800df30:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b10      	cmp	r3, #16
 800df36:	d8c3      	bhi.n	800dec0 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	b292      	uxth	r2, r2
 800df42:	68b9      	ldr	r1, [r7, #8]
 800df44:	4618      	mov	r0, r3
 800df46:	f00b ff64 	bl	8019e12 <memcpy1>
    ctx->M_n = len;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800df52:	e000      	b.n	800df56 <AES_CMAC_Update+0x17e>
            return;
 800df54:	bf00      	nop
}
 800df56:	3730      	adds	r7, #48	; 0x30
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}

0800df5c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b092      	sub	sp, #72	; 0x48
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800df66:	f107 031c 	add.w	r3, r7, #28
 800df6a:	2210      	movs	r2, #16
 800df6c:	2100      	movs	r1, #0
 800df6e:	4618      	mov	r0, r3
 800df70:	f00b ff8a 	bl	8019e88 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	f107 011c 	add.w	r1, r7, #28
 800df7a:	f107 031c 	add.w	r3, r7, #28
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 fe60 	bl	800ec44 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800df84:	7f3b      	ldrb	r3, [r7, #28]
 800df86:	b25b      	sxtb	r3, r3
 800df88:	2b00      	cmp	r3, #0
 800df8a:	da30      	bge.n	800dfee <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800df8c:	2300      	movs	r3, #0
 800df8e:	647b      	str	r3, [r7, #68]	; 0x44
 800df90:	e01b      	b.n	800dfca <AES_CMAC_Final+0x6e>
 800df92:	f107 021c 	add.w	r2, r7, #28
 800df96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df98:	4413      	add	r3, r2
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	005b      	lsls	r3, r3, #1
 800df9e:	b25a      	sxtb	r2, r3
 800dfa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	3348      	adds	r3, #72	; 0x48
 800dfa6:	443b      	add	r3, r7
 800dfa8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dfac:	09db      	lsrs	r3, r3, #7
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	b25b      	sxtb	r3, r3
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	b25b      	sxtb	r3, r3
 800dfb6:	b2d9      	uxtb	r1, r3
 800dfb8:	f107 021c 	add.w	r2, r7, #28
 800dfbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfbe:	4413      	add	r3, r2
 800dfc0:	460a      	mov	r2, r1
 800dfc2:	701a      	strb	r2, [r3, #0]
 800dfc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	647b      	str	r3, [r7, #68]	; 0x44
 800dfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfcc:	2b0e      	cmp	r3, #14
 800dfce:	dde0      	ble.n	800df92 <AES_CMAC_Final+0x36>
 800dfd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfd4:	005b      	lsls	r3, r3, #1
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dfdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfe0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dfe4:	43db      	mvns	r3, r3
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfec:	e027      	b.n	800e03e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dfee:	2300      	movs	r3, #0
 800dff0:	643b      	str	r3, [r7, #64]	; 0x40
 800dff2:	e01b      	b.n	800e02c <AES_CMAC_Final+0xd0>
 800dff4:	f107 021c 	add.w	r2, r7, #28
 800dff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dffa:	4413      	add	r3, r2
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	005b      	lsls	r3, r3, #1
 800e000:	b25a      	sxtb	r2, r3
 800e002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e004:	3301      	adds	r3, #1
 800e006:	3348      	adds	r3, #72	; 0x48
 800e008:	443b      	add	r3, r7
 800e00a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e00e:	09db      	lsrs	r3, r3, #7
 800e010:	b2db      	uxtb	r3, r3
 800e012:	b25b      	sxtb	r3, r3
 800e014:	4313      	orrs	r3, r2
 800e016:	b25b      	sxtb	r3, r3
 800e018:	b2d9      	uxtb	r1, r3
 800e01a:	f107 021c 	add.w	r2, r7, #28
 800e01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e020:	4413      	add	r3, r2
 800e022:	460a      	mov	r2, r1
 800e024:	701a      	strb	r2, [r3, #0]
 800e026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e028:	3301      	adds	r3, #1
 800e02a:	643b      	str	r3, [r7, #64]	; 0x40
 800e02c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e02e:	2b0e      	cmp	r3, #14
 800e030:	dde0      	ble.n	800dff4 <AES_CMAC_Final+0x98>
 800e032:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e044:	2b10      	cmp	r3, #16
 800e046:	d11d      	bne.n	800e084 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e048:	2300      	movs	r3, #0
 800e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e04c:	e016      	b.n	800e07c <AES_CMAC_Final+0x120>
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e052:	4413      	add	r3, r2
 800e054:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e058:	781a      	ldrb	r2, [r3, #0]
 800e05a:	f107 011c 	add.w	r1, r7, #28
 800e05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e060:	440b      	add	r3, r1
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	4053      	eors	r3, r2
 800e066:	b2d9      	uxtb	r1, r3
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06c:	4413      	add	r3, r2
 800e06e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e072:	460a      	mov	r2, r1
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e078:	3301      	adds	r3, #1
 800e07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07e:	2b0f      	cmp	r3, #15
 800e080:	dde5      	ble.n	800e04e <AES_CMAC_Final+0xf2>
 800e082:	e096      	b.n	800e1b2 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e084:	7f3b      	ldrb	r3, [r7, #28]
 800e086:	b25b      	sxtb	r3, r3
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da30      	bge.n	800e0ee <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e08c:	2300      	movs	r3, #0
 800e08e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e090:	e01b      	b.n	800e0ca <AES_CMAC_Final+0x16e>
 800e092:	f107 021c 	add.w	r2, r7, #28
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	4413      	add	r3, r2
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	005b      	lsls	r3, r3, #1
 800e09e:	b25a      	sxtb	r2, r3
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	3348      	adds	r3, #72	; 0x48
 800e0a6:	443b      	add	r3, r7
 800e0a8:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e0ac:	09db      	lsrs	r3, r3, #7
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	b25b      	sxtb	r3, r3
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	b2d9      	uxtb	r1, r3
 800e0b8:	f107 021c 	add.w	r2, r7, #28
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	4413      	add	r3, r2
 800e0c0:	460a      	mov	r2, r1
 800e0c2:	701a      	strb	r2, [r3, #0]
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	2b0e      	cmp	r3, #14
 800e0ce:	dde0      	ble.n	800e092 <AES_CMAC_Final+0x136>
 800e0d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e0dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0e0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e0e4:	43db      	mvns	r3, r3
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e0ec:	e027      	b.n	800e13e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e0f2:	e01b      	b.n	800e12c <AES_CMAC_Final+0x1d0>
 800e0f4:	f107 021c 	add.w	r2, r7, #28
 800e0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fa:	4413      	add	r3, r2
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	b25a      	sxtb	r2, r3
 800e102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e104:	3301      	adds	r3, #1
 800e106:	3348      	adds	r3, #72	; 0x48
 800e108:	443b      	add	r3, r7
 800e10a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e10e:	09db      	lsrs	r3, r3, #7
 800e110:	b2db      	uxtb	r3, r3
 800e112:	b25b      	sxtb	r3, r3
 800e114:	4313      	orrs	r3, r2
 800e116:	b25b      	sxtb	r3, r3
 800e118:	b2d9      	uxtb	r1, r3
 800e11a:	f107 021c 	add.w	r2, r7, #28
 800e11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e120:	4413      	add	r3, r2
 800e122:	460a      	mov	r2, r1
 800e124:	701a      	strb	r2, [r3, #0]
 800e126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e128:	3301      	adds	r3, #1
 800e12a:	637b      	str	r3, [r7, #52]	; 0x34
 800e12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12e:	2b0e      	cmp	r3, #14
 800e130:	dde0      	ble.n	800e0f4 <AES_CMAC_Final+0x198>
 800e132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	4413      	add	r3, r2
 800e148:	2280      	movs	r2, #128	; 0x80
 800e14a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e14e:	e007      	b.n	800e160 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	4413      	add	r3, r2
 800e15a:	2200      	movs	r2, #0
 800e15c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e166:	1c5a      	adds	r2, r3, #1
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e174:	2b0f      	cmp	r3, #15
 800e176:	d9eb      	bls.n	800e150 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e178:	2300      	movs	r3, #0
 800e17a:	633b      	str	r3, [r7, #48]	; 0x30
 800e17c:	e016      	b.n	800e1ac <AES_CMAC_Final+0x250>
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	4413      	add	r3, r2
 800e184:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e188:	781a      	ldrb	r2, [r3, #0]
 800e18a:	f107 011c 	add.w	r1, r7, #28
 800e18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e190:	440b      	add	r3, r1
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	4053      	eors	r3, r2
 800e196:	b2d9      	uxtb	r1, r3
 800e198:	683a      	ldr	r2, [r7, #0]
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	4413      	add	r3, r2
 800e19e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1a2:	460a      	mov	r2, r1
 800e1a4:	701a      	strb	r2, [r3, #0]
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ae:	2b0f      	cmp	r3, #15
 800e1b0:	dde5      	ble.n	800e17e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1b6:	e015      	b.n	800e1e4 <AES_CMAC_Final+0x288>
 800e1b8:	683a      	ldr	r2, [r7, #0]
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	4413      	add	r3, r2
 800e1be:	33f1      	adds	r3, #241	; 0xf1
 800e1c0:	781a      	ldrb	r2, [r3, #0]
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	440b      	add	r3, r1
 800e1c8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	4053      	eors	r3, r2
 800e1d0:	b2d9      	uxtb	r1, r3
 800e1d2:	683a      	ldr	r2, [r7, #0]
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	4413      	add	r3, r2
 800e1d8:	33f1      	adds	r3, #241	; 0xf1
 800e1da:	460a      	mov	r2, r1
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e6:	2b0f      	cmp	r3, #15
 800e1e8:	dde6      	ble.n	800e1b8 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e1f0:	f107 030c 	add.w	r3, r7, #12
 800e1f4:	2210      	movs	r2, #16
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f00b fe0b 	bl	8019e12 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	f107 030c 	add.w	r3, r7, #12
 800e202:	6879      	ldr	r1, [r7, #4]
 800e204:	4618      	mov	r0, r3
 800e206:	f000 fd1d 	bl	800ec44 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e20a:	f107 031c 	add.w	r3, r7, #28
 800e20e:	2210      	movs	r2, #16
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f00b fe38 	bl	8019e88 <memset1>
}
 800e218:	bf00      	nop
 800e21a:	3748      	adds	r7, #72	; 0x48
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	781a      	ldrb	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	3301      	adds	r3, #1
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	7852      	ldrb	r2, [r2, #1]
 800e23a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3302      	adds	r3, #2
 800e240:	683a      	ldr	r2, [r7, #0]
 800e242:	7892      	ldrb	r2, [r2, #2]
 800e244:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3303      	adds	r3, #3
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	78d2      	ldrb	r2, [r2, #3]
 800e24e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3304      	adds	r3, #4
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	7912      	ldrb	r2, [r2, #4]
 800e258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	3305      	adds	r3, #5
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	7952      	ldrb	r2, [r2, #5]
 800e262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3306      	adds	r3, #6
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	7992      	ldrb	r2, [r2, #6]
 800e26c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3307      	adds	r3, #7
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	79d2      	ldrb	r2, [r2, #7]
 800e276:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	3308      	adds	r3, #8
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	7a12      	ldrb	r2, [r2, #8]
 800e280:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	3309      	adds	r3, #9
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	7a52      	ldrb	r2, [r2, #9]
 800e28a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	330a      	adds	r3, #10
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	7a92      	ldrb	r2, [r2, #10]
 800e294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	330b      	adds	r3, #11
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	7ad2      	ldrb	r2, [r2, #11]
 800e29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	330c      	adds	r3, #12
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	7b12      	ldrb	r2, [r2, #12]
 800e2a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	330d      	adds	r3, #13
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	7b52      	ldrb	r2, [r2, #13]
 800e2b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	330e      	adds	r3, #14
 800e2b8:	683a      	ldr	r2, [r7, #0]
 800e2ba:	7b92      	ldrb	r2, [r2, #14]
 800e2bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	330f      	adds	r3, #15
 800e2c2:	683a      	ldr	r2, [r7, #0]
 800e2c4:	7bd2      	ldrb	r2, [r2, #15]
 800e2c6:	701a      	strb	r2, [r3, #0]
#endif
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bc80      	pop	{r7}
 800e2d0:	4770      	bx	lr

0800e2d2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b085      	sub	sp, #20
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	4613      	mov	r3, r2
 800e2de:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e2e0:	e007      	b.n	800e2f2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	1c53      	adds	r3, r2, #1
 800e2e6:	60bb      	str	r3, [r7, #8]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	1c59      	adds	r1, r3, #1
 800e2ec:	60f9      	str	r1, [r7, #12]
 800e2ee:	7812      	ldrb	r2, [r2, #0]
 800e2f0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	1e5a      	subs	r2, r3, #1
 800e2f6:	71fa      	strb	r2, [r7, #7]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1f2      	bne.n	800e2e2 <copy_block_nn+0x10>
}
 800e2fc:	bf00      	nop
 800e2fe:	bf00      	nop
 800e300:	3714      	adds	r7, #20
 800e302:	46bd      	mov	sp, r7
 800e304:	bc80      	pop	{r7}
 800e306:	4770      	bx	lr

0800e308 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	781a      	ldrb	r2, [r3, #0]
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	781b      	ldrb	r3, [r3, #0]
 800e31a:	4053      	eors	r3, r2
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3301      	adds	r3, #1
 800e326:	7819      	ldrb	r1, [r3, #0]
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	3301      	adds	r3, #1
 800e32c:	781a      	ldrb	r2, [r3, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	3301      	adds	r3, #1
 800e332:	404a      	eors	r2, r1
 800e334:	b2d2      	uxtb	r2, r2
 800e336:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	3302      	adds	r3, #2
 800e33c:	7819      	ldrb	r1, [r3, #0]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	3302      	adds	r3, #2
 800e342:	781a      	ldrb	r2, [r3, #0]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3302      	adds	r3, #2
 800e348:	404a      	eors	r2, r1
 800e34a:	b2d2      	uxtb	r2, r2
 800e34c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	3303      	adds	r3, #3
 800e352:	7819      	ldrb	r1, [r3, #0]
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	3303      	adds	r3, #3
 800e358:	781a      	ldrb	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	3303      	adds	r3, #3
 800e35e:	404a      	eors	r2, r1
 800e360:	b2d2      	uxtb	r2, r2
 800e362:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3304      	adds	r3, #4
 800e368:	7819      	ldrb	r1, [r3, #0]
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	3304      	adds	r3, #4
 800e36e:	781a      	ldrb	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	3304      	adds	r3, #4
 800e374:	404a      	eors	r2, r1
 800e376:	b2d2      	uxtb	r2, r2
 800e378:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	3305      	adds	r3, #5
 800e37e:	7819      	ldrb	r1, [r3, #0]
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	3305      	adds	r3, #5
 800e384:	781a      	ldrb	r2, [r3, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3305      	adds	r3, #5
 800e38a:	404a      	eors	r2, r1
 800e38c:	b2d2      	uxtb	r2, r2
 800e38e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3306      	adds	r3, #6
 800e394:	7819      	ldrb	r1, [r3, #0]
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	3306      	adds	r3, #6
 800e39a:	781a      	ldrb	r2, [r3, #0]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	3306      	adds	r3, #6
 800e3a0:	404a      	eors	r2, r1
 800e3a2:	b2d2      	uxtb	r2, r2
 800e3a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3307      	adds	r3, #7
 800e3aa:	7819      	ldrb	r1, [r3, #0]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	3307      	adds	r3, #7
 800e3b0:	781a      	ldrb	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	3307      	adds	r3, #7
 800e3b6:	404a      	eors	r2, r1
 800e3b8:	b2d2      	uxtb	r2, r2
 800e3ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	7819      	ldrb	r1, [r3, #0]
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	3308      	adds	r3, #8
 800e3c6:	781a      	ldrb	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	404a      	eors	r2, r1
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	3309      	adds	r3, #9
 800e3d6:	7819      	ldrb	r1, [r3, #0]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	3309      	adds	r3, #9
 800e3dc:	781a      	ldrb	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	3309      	adds	r3, #9
 800e3e2:	404a      	eors	r2, r1
 800e3e4:	b2d2      	uxtb	r2, r2
 800e3e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	330a      	adds	r3, #10
 800e3ec:	7819      	ldrb	r1, [r3, #0]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	330a      	adds	r3, #10
 800e3f2:	781a      	ldrb	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	330a      	adds	r3, #10
 800e3f8:	404a      	eors	r2, r1
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	330b      	adds	r3, #11
 800e402:	7819      	ldrb	r1, [r3, #0]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	330b      	adds	r3, #11
 800e408:	781a      	ldrb	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	330b      	adds	r3, #11
 800e40e:	404a      	eors	r2, r1
 800e410:	b2d2      	uxtb	r2, r2
 800e412:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	330c      	adds	r3, #12
 800e418:	7819      	ldrb	r1, [r3, #0]
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	330c      	adds	r3, #12
 800e41e:	781a      	ldrb	r2, [r3, #0]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	330c      	adds	r3, #12
 800e424:	404a      	eors	r2, r1
 800e426:	b2d2      	uxtb	r2, r2
 800e428:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	330d      	adds	r3, #13
 800e42e:	7819      	ldrb	r1, [r3, #0]
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	330d      	adds	r3, #13
 800e434:	781a      	ldrb	r2, [r3, #0]
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	330d      	adds	r3, #13
 800e43a:	404a      	eors	r2, r1
 800e43c:	b2d2      	uxtb	r2, r2
 800e43e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	330e      	adds	r3, #14
 800e444:	7819      	ldrb	r1, [r3, #0]
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	330e      	adds	r3, #14
 800e44a:	781a      	ldrb	r2, [r3, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	330e      	adds	r3, #14
 800e450:	404a      	eors	r2, r1
 800e452:	b2d2      	uxtb	r2, r2
 800e454:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	330f      	adds	r3, #15
 800e45a:	7819      	ldrb	r1, [r3, #0]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	330f      	adds	r3, #15
 800e460:	781a      	ldrb	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	330f      	adds	r3, #15
 800e466:	404a      	eors	r2, r1
 800e468:	b2d2      	uxtb	r2, r2
 800e46a:	701a      	strb	r2, [r3, #0]
#endif
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	bc80      	pop	{r7}
 800e474:	4770      	bx	lr

0800e476 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e476:	b480      	push	{r7}
 800e478:	b085      	sub	sp, #20
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	60f8      	str	r0, [r7, #12]
 800e47e:	60b9      	str	r1, [r7, #8]
 800e480:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	781a      	ldrb	r2, [r3, #0]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	4053      	eors	r3, r2
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	3301      	adds	r3, #1
 800e496:	7819      	ldrb	r1, [r3, #0]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	3301      	adds	r3, #1
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	404a      	eors	r2, r1
 800e4a4:	b2d2      	uxtb	r2, r2
 800e4a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	3302      	adds	r3, #2
 800e4ac:	7819      	ldrb	r1, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	3302      	adds	r3, #2
 800e4b2:	781a      	ldrb	r2, [r3, #0]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	3302      	adds	r3, #2
 800e4b8:	404a      	eors	r2, r1
 800e4ba:	b2d2      	uxtb	r2, r2
 800e4bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	3303      	adds	r3, #3
 800e4c2:	7819      	ldrb	r1, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3303      	adds	r3, #3
 800e4c8:	781a      	ldrb	r2, [r3, #0]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3303      	adds	r3, #3
 800e4ce:	404a      	eors	r2, r1
 800e4d0:	b2d2      	uxtb	r2, r2
 800e4d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	7819      	ldrb	r1, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	781a      	ldrb	r2, [r3, #0]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	404a      	eors	r2, r1
 800e4e6:	b2d2      	uxtb	r2, r2
 800e4e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	3305      	adds	r3, #5
 800e4ee:	7819      	ldrb	r1, [r3, #0]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	3305      	adds	r3, #5
 800e4f4:	781a      	ldrb	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3305      	adds	r3, #5
 800e4fa:	404a      	eors	r2, r1
 800e4fc:	b2d2      	uxtb	r2, r2
 800e4fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	3306      	adds	r3, #6
 800e504:	7819      	ldrb	r1, [r3, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	3306      	adds	r3, #6
 800e50a:	781a      	ldrb	r2, [r3, #0]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	3306      	adds	r3, #6
 800e510:	404a      	eors	r2, r1
 800e512:	b2d2      	uxtb	r2, r2
 800e514:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	3307      	adds	r3, #7
 800e51a:	7819      	ldrb	r1, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	3307      	adds	r3, #7
 800e520:	781a      	ldrb	r2, [r3, #0]
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3307      	adds	r3, #7
 800e526:	404a      	eors	r2, r1
 800e528:	b2d2      	uxtb	r2, r2
 800e52a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	3308      	adds	r3, #8
 800e530:	7819      	ldrb	r1, [r3, #0]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	3308      	adds	r3, #8
 800e536:	781a      	ldrb	r2, [r3, #0]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3308      	adds	r3, #8
 800e53c:	404a      	eors	r2, r1
 800e53e:	b2d2      	uxtb	r2, r2
 800e540:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	3309      	adds	r3, #9
 800e546:	7819      	ldrb	r1, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3309      	adds	r3, #9
 800e54c:	781a      	ldrb	r2, [r3, #0]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3309      	adds	r3, #9
 800e552:	404a      	eors	r2, r1
 800e554:	b2d2      	uxtb	r2, r2
 800e556:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	330a      	adds	r3, #10
 800e55c:	7819      	ldrb	r1, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	330a      	adds	r3, #10
 800e562:	781a      	ldrb	r2, [r3, #0]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	330a      	adds	r3, #10
 800e568:	404a      	eors	r2, r1
 800e56a:	b2d2      	uxtb	r2, r2
 800e56c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	330b      	adds	r3, #11
 800e572:	7819      	ldrb	r1, [r3, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	330b      	adds	r3, #11
 800e578:	781a      	ldrb	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	330b      	adds	r3, #11
 800e57e:	404a      	eors	r2, r1
 800e580:	b2d2      	uxtb	r2, r2
 800e582:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	330c      	adds	r3, #12
 800e588:	7819      	ldrb	r1, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	330c      	adds	r3, #12
 800e58e:	781a      	ldrb	r2, [r3, #0]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	330c      	adds	r3, #12
 800e594:	404a      	eors	r2, r1
 800e596:	b2d2      	uxtb	r2, r2
 800e598:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	330d      	adds	r3, #13
 800e59e:	7819      	ldrb	r1, [r3, #0]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	330d      	adds	r3, #13
 800e5a4:	781a      	ldrb	r2, [r3, #0]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	330d      	adds	r3, #13
 800e5aa:	404a      	eors	r2, r1
 800e5ac:	b2d2      	uxtb	r2, r2
 800e5ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	330e      	adds	r3, #14
 800e5b4:	7819      	ldrb	r1, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	330e      	adds	r3, #14
 800e5ba:	781a      	ldrb	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	330e      	adds	r3, #14
 800e5c0:	404a      	eors	r2, r1
 800e5c2:	b2d2      	uxtb	r2, r2
 800e5c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	330f      	adds	r3, #15
 800e5ca:	7819      	ldrb	r1, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	330f      	adds	r3, #15
 800e5d0:	781a      	ldrb	r2, [r3, #0]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	330f      	adds	r3, #15
 800e5d6:	404a      	eors	r2, r1
 800e5d8:	b2d2      	uxtb	r2, r2
 800e5da:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e5dc:	bf00      	nop
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bc80      	pop	{r7}
 800e5e4:	4770      	bx	lr

0800e5e6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b082      	sub	sp, #8
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e5f0:	6839      	ldr	r1, [r7, #0]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7ff fe88 	bl	800e308 <xor_block>
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	461a      	mov	r2, r3
 800e60e:	4b48      	ldr	r3, [pc, #288]	; (800e730 <shift_sub_rows+0x130>)
 800e610:	5c9a      	ldrb	r2, [r3, r2]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	3304      	adds	r3, #4
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	4619      	mov	r1, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	3304      	adds	r3, #4
 800e622:	4a43      	ldr	r2, [pc, #268]	; (800e730 <shift_sub_rows+0x130>)
 800e624:	5c52      	ldrb	r2, [r2, r1]
 800e626:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3308      	adds	r3, #8
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	4619      	mov	r1, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3308      	adds	r3, #8
 800e634:	4a3e      	ldr	r2, [pc, #248]	; (800e730 <shift_sub_rows+0x130>)
 800e636:	5c52      	ldrb	r2, [r2, r1]
 800e638:	701a      	strb	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	330c      	adds	r3, #12
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	4619      	mov	r1, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	330c      	adds	r3, #12
 800e646:	4a3a      	ldr	r2, [pc, #232]	; (800e730 <shift_sub_rows+0x130>)
 800e648:	5c52      	ldrb	r2, [r2, r1]
 800e64a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	785b      	ldrb	r3, [r3, #1]
 800e650:	73fb      	strb	r3, [r7, #15]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3305      	adds	r3, #5
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	4619      	mov	r1, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	3301      	adds	r3, #1
 800e65e:	4a34      	ldr	r2, [pc, #208]	; (800e730 <shift_sub_rows+0x130>)
 800e660:	5c52      	ldrb	r2, [r2, r1]
 800e662:	701a      	strb	r2, [r3, #0]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3309      	adds	r3, #9
 800e668:	781b      	ldrb	r3, [r3, #0]
 800e66a:	4619      	mov	r1, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3305      	adds	r3, #5
 800e670:	4a2f      	ldr	r2, [pc, #188]	; (800e730 <shift_sub_rows+0x130>)
 800e672:	5c52      	ldrb	r2, [r2, r1]
 800e674:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	330d      	adds	r3, #13
 800e67a:	781b      	ldrb	r3, [r3, #0]
 800e67c:	4619      	mov	r1, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	3309      	adds	r3, #9
 800e682:	4a2b      	ldr	r2, [pc, #172]	; (800e730 <shift_sub_rows+0x130>)
 800e684:	5c52      	ldrb	r2, [r2, r1]
 800e686:	701a      	strb	r2, [r3, #0]
 800e688:	7bfa      	ldrb	r2, [r7, #15]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	330d      	adds	r3, #13
 800e68e:	4928      	ldr	r1, [pc, #160]	; (800e730 <shift_sub_rows+0x130>)
 800e690:	5c8a      	ldrb	r2, [r1, r2]
 800e692:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	789b      	ldrb	r3, [r3, #2]
 800e698:	73fb      	strb	r3, [r7, #15]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	330a      	adds	r3, #10
 800e69e:	781b      	ldrb	r3, [r3, #0]
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3302      	adds	r3, #2
 800e6a6:	4a22      	ldr	r2, [pc, #136]	; (800e730 <shift_sub_rows+0x130>)
 800e6a8:	5c52      	ldrb	r2, [r2, r1]
 800e6aa:	701a      	strb	r2, [r3, #0]
 800e6ac:	7bfa      	ldrb	r2, [r7, #15]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	330a      	adds	r3, #10
 800e6b2:	491f      	ldr	r1, [pc, #124]	; (800e730 <shift_sub_rows+0x130>)
 800e6b4:	5c8a      	ldrb	r2, [r1, r2]
 800e6b6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	799b      	ldrb	r3, [r3, #6]
 800e6bc:	73fb      	strb	r3, [r7, #15]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	330e      	adds	r3, #14
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3306      	adds	r3, #6
 800e6ca:	4a19      	ldr	r2, [pc, #100]	; (800e730 <shift_sub_rows+0x130>)
 800e6cc:	5c52      	ldrb	r2, [r2, r1]
 800e6ce:	701a      	strb	r2, [r3, #0]
 800e6d0:	7bfa      	ldrb	r2, [r7, #15]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	330e      	adds	r3, #14
 800e6d6:	4916      	ldr	r1, [pc, #88]	; (800e730 <shift_sub_rows+0x130>)
 800e6d8:	5c8a      	ldrb	r2, [r1, r2]
 800e6da:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	7bdb      	ldrb	r3, [r3, #15]
 800e6e0:	73fb      	strb	r3, [r7, #15]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	330b      	adds	r3, #11
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	330f      	adds	r3, #15
 800e6ee:	4a10      	ldr	r2, [pc, #64]	; (800e730 <shift_sub_rows+0x130>)
 800e6f0:	5c52      	ldrb	r2, [r2, r1]
 800e6f2:	701a      	strb	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	3307      	adds	r3, #7
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	330b      	adds	r3, #11
 800e700:	4a0b      	ldr	r2, [pc, #44]	; (800e730 <shift_sub_rows+0x130>)
 800e702:	5c52      	ldrb	r2, [r2, r1]
 800e704:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3303      	adds	r3, #3
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	4619      	mov	r1, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	3307      	adds	r3, #7
 800e712:	4a07      	ldr	r2, [pc, #28]	; (800e730 <shift_sub_rows+0x130>)
 800e714:	5c52      	ldrb	r2, [r2, r1]
 800e716:	701a      	strb	r2, [r3, #0]
 800e718:	7bfa      	ldrb	r2, [r7, #15]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	3303      	adds	r3, #3
 800e71e:	4904      	ldr	r1, [pc, #16]	; (800e730 <shift_sub_rows+0x130>)
 800e720:	5c8a      	ldrb	r2, [r1, r2]
 800e722:	701a      	strb	r2, [r3, #0]
}
 800e724:	bf00      	nop
 800e726:	3714      	adds	r7, #20
 800e728:	46bd      	mov	sp, r7
 800e72a:	bc80      	pop	{r7}
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	0801f638 	.word	0x0801f638

0800e734 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e73c:	f107 0308 	add.w	r3, r7, #8
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	4618      	mov	r0, r3
 800e744:	f7ff fd6c 	bl	800e220 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e748:	7a3b      	ldrb	r3, [r7, #8]
 800e74a:	461a      	mov	r2, r3
 800e74c:	4b9a      	ldr	r3, [pc, #616]	; (800e9b8 <mix_sub_columns+0x284>)
 800e74e:	5c9a      	ldrb	r2, [r3, r2]
 800e750:	7b7b      	ldrb	r3, [r7, #13]
 800e752:	4619      	mov	r1, r3
 800e754:	4b99      	ldr	r3, [pc, #612]	; (800e9bc <mix_sub_columns+0x288>)
 800e756:	5c5b      	ldrb	r3, [r3, r1]
 800e758:	4053      	eors	r3, r2
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	7cbb      	ldrb	r3, [r7, #18]
 800e75e:	4619      	mov	r1, r3
 800e760:	4b97      	ldr	r3, [pc, #604]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e762:	5c5b      	ldrb	r3, [r3, r1]
 800e764:	4053      	eors	r3, r2
 800e766:	b2da      	uxtb	r2, r3
 800e768:	7dfb      	ldrb	r3, [r7, #23]
 800e76a:	4619      	mov	r1, r3
 800e76c:	4b94      	ldr	r3, [pc, #592]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e76e:	5c5b      	ldrb	r3, [r3, r1]
 800e770:	4053      	eors	r3, r2
 800e772:	b2da      	uxtb	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e778:	7a3b      	ldrb	r3, [r7, #8]
 800e77a:	461a      	mov	r2, r3
 800e77c:	4b90      	ldr	r3, [pc, #576]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e77e:	5c9a      	ldrb	r2, [r3, r2]
 800e780:	7b7b      	ldrb	r3, [r7, #13]
 800e782:	4619      	mov	r1, r3
 800e784:	4b8c      	ldr	r3, [pc, #560]	; (800e9b8 <mix_sub_columns+0x284>)
 800e786:	5c5b      	ldrb	r3, [r3, r1]
 800e788:	4053      	eors	r3, r2
 800e78a:	b2da      	uxtb	r2, r3
 800e78c:	7cbb      	ldrb	r3, [r7, #18]
 800e78e:	4619      	mov	r1, r3
 800e790:	4b8a      	ldr	r3, [pc, #552]	; (800e9bc <mix_sub_columns+0x288>)
 800e792:	5c5b      	ldrb	r3, [r3, r1]
 800e794:	4053      	eors	r3, r2
 800e796:	b2d9      	uxtb	r1, r3
 800e798:	7dfb      	ldrb	r3, [r7, #23]
 800e79a:	461a      	mov	r2, r3
 800e79c:	4b88      	ldr	r3, [pc, #544]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e79e:	5c9a      	ldrb	r2, [r3, r2]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	404a      	eors	r2, r1
 800e7a6:	b2d2      	uxtb	r2, r2
 800e7a8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e7aa:	7a3b      	ldrb	r3, [r7, #8]
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	4b84      	ldr	r3, [pc, #528]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e7b0:	5c9a      	ldrb	r2, [r3, r2]
 800e7b2:	7b7b      	ldrb	r3, [r7, #13]
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	4b82      	ldr	r3, [pc, #520]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e7b8:	5c5b      	ldrb	r3, [r3, r1]
 800e7ba:	4053      	eors	r3, r2
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	7cbb      	ldrb	r3, [r7, #18]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	4b7d      	ldr	r3, [pc, #500]	; (800e9b8 <mix_sub_columns+0x284>)
 800e7c4:	5c5b      	ldrb	r3, [r3, r1]
 800e7c6:	4053      	eors	r3, r2
 800e7c8:	b2d9      	uxtb	r1, r3
 800e7ca:	7dfb      	ldrb	r3, [r7, #23]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	4b7b      	ldr	r3, [pc, #492]	; (800e9bc <mix_sub_columns+0x288>)
 800e7d0:	5c9a      	ldrb	r2, [r3, r2]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	3302      	adds	r3, #2
 800e7d6:	404a      	eors	r2, r1
 800e7d8:	b2d2      	uxtb	r2, r2
 800e7da:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e7dc:	7a3b      	ldrb	r3, [r7, #8]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4b76      	ldr	r3, [pc, #472]	; (800e9bc <mix_sub_columns+0x288>)
 800e7e2:	5c9a      	ldrb	r2, [r3, r2]
 800e7e4:	7b7b      	ldrb	r3, [r7, #13]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	4b75      	ldr	r3, [pc, #468]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e7ea:	5c5b      	ldrb	r3, [r3, r1]
 800e7ec:	4053      	eors	r3, r2
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	7cbb      	ldrb	r3, [r7, #18]
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	4b72      	ldr	r3, [pc, #456]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e7f6:	5c5b      	ldrb	r3, [r3, r1]
 800e7f8:	4053      	eors	r3, r2
 800e7fa:	b2d9      	uxtb	r1, r3
 800e7fc:	7dfb      	ldrb	r3, [r7, #23]
 800e7fe:	461a      	mov	r2, r3
 800e800:	4b6d      	ldr	r3, [pc, #436]	; (800e9b8 <mix_sub_columns+0x284>)
 800e802:	5c9a      	ldrb	r2, [r3, r2]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3303      	adds	r3, #3
 800e808:	404a      	eors	r2, r1
 800e80a:	b2d2      	uxtb	r2, r2
 800e80c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e80e:	7b3b      	ldrb	r3, [r7, #12]
 800e810:	461a      	mov	r2, r3
 800e812:	4b69      	ldr	r3, [pc, #420]	; (800e9b8 <mix_sub_columns+0x284>)
 800e814:	5c9a      	ldrb	r2, [r3, r2]
 800e816:	7c7b      	ldrb	r3, [r7, #17]
 800e818:	4619      	mov	r1, r3
 800e81a:	4b68      	ldr	r3, [pc, #416]	; (800e9bc <mix_sub_columns+0x288>)
 800e81c:	5c5b      	ldrb	r3, [r3, r1]
 800e81e:	4053      	eors	r3, r2
 800e820:	b2da      	uxtb	r2, r3
 800e822:	7dbb      	ldrb	r3, [r7, #22]
 800e824:	4619      	mov	r1, r3
 800e826:	4b66      	ldr	r3, [pc, #408]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e828:	5c5b      	ldrb	r3, [r3, r1]
 800e82a:	4053      	eors	r3, r2
 800e82c:	b2d9      	uxtb	r1, r3
 800e82e:	7afb      	ldrb	r3, [r7, #11]
 800e830:	461a      	mov	r2, r3
 800e832:	4b63      	ldr	r3, [pc, #396]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e834:	5c9a      	ldrb	r2, [r3, r2]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	3304      	adds	r3, #4
 800e83a:	404a      	eors	r2, r1
 800e83c:	b2d2      	uxtb	r2, r2
 800e83e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e840:	7b3b      	ldrb	r3, [r7, #12]
 800e842:	461a      	mov	r2, r3
 800e844:	4b5e      	ldr	r3, [pc, #376]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e846:	5c9a      	ldrb	r2, [r3, r2]
 800e848:	7c7b      	ldrb	r3, [r7, #17]
 800e84a:	4619      	mov	r1, r3
 800e84c:	4b5a      	ldr	r3, [pc, #360]	; (800e9b8 <mix_sub_columns+0x284>)
 800e84e:	5c5b      	ldrb	r3, [r3, r1]
 800e850:	4053      	eors	r3, r2
 800e852:	b2da      	uxtb	r2, r3
 800e854:	7dbb      	ldrb	r3, [r7, #22]
 800e856:	4619      	mov	r1, r3
 800e858:	4b58      	ldr	r3, [pc, #352]	; (800e9bc <mix_sub_columns+0x288>)
 800e85a:	5c5b      	ldrb	r3, [r3, r1]
 800e85c:	4053      	eors	r3, r2
 800e85e:	b2d9      	uxtb	r1, r3
 800e860:	7afb      	ldrb	r3, [r7, #11]
 800e862:	461a      	mov	r2, r3
 800e864:	4b56      	ldr	r3, [pc, #344]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e866:	5c9a      	ldrb	r2, [r3, r2]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3305      	adds	r3, #5
 800e86c:	404a      	eors	r2, r1
 800e86e:	b2d2      	uxtb	r2, r2
 800e870:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e872:	7b3b      	ldrb	r3, [r7, #12]
 800e874:	461a      	mov	r2, r3
 800e876:	4b52      	ldr	r3, [pc, #328]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e878:	5c9a      	ldrb	r2, [r3, r2]
 800e87a:	7c7b      	ldrb	r3, [r7, #17]
 800e87c:	4619      	mov	r1, r3
 800e87e:	4b50      	ldr	r3, [pc, #320]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e880:	5c5b      	ldrb	r3, [r3, r1]
 800e882:	4053      	eors	r3, r2
 800e884:	b2da      	uxtb	r2, r3
 800e886:	7dbb      	ldrb	r3, [r7, #22]
 800e888:	4619      	mov	r1, r3
 800e88a:	4b4b      	ldr	r3, [pc, #300]	; (800e9b8 <mix_sub_columns+0x284>)
 800e88c:	5c5b      	ldrb	r3, [r3, r1]
 800e88e:	4053      	eors	r3, r2
 800e890:	b2d9      	uxtb	r1, r3
 800e892:	7afb      	ldrb	r3, [r7, #11]
 800e894:	461a      	mov	r2, r3
 800e896:	4b49      	ldr	r3, [pc, #292]	; (800e9bc <mix_sub_columns+0x288>)
 800e898:	5c9a      	ldrb	r2, [r3, r2]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3306      	adds	r3, #6
 800e89e:	404a      	eors	r2, r1
 800e8a0:	b2d2      	uxtb	r2, r2
 800e8a2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e8a4:	7b3b      	ldrb	r3, [r7, #12]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	4b44      	ldr	r3, [pc, #272]	; (800e9bc <mix_sub_columns+0x288>)
 800e8aa:	5c9a      	ldrb	r2, [r3, r2]
 800e8ac:	7c7b      	ldrb	r3, [r7, #17]
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	4b43      	ldr	r3, [pc, #268]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e8b2:	5c5b      	ldrb	r3, [r3, r1]
 800e8b4:	4053      	eors	r3, r2
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	7dbb      	ldrb	r3, [r7, #22]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4b40      	ldr	r3, [pc, #256]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e8be:	5c5b      	ldrb	r3, [r3, r1]
 800e8c0:	4053      	eors	r3, r2
 800e8c2:	b2d9      	uxtb	r1, r3
 800e8c4:	7afb      	ldrb	r3, [r7, #11]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	4b3b      	ldr	r3, [pc, #236]	; (800e9b8 <mix_sub_columns+0x284>)
 800e8ca:	5c9a      	ldrb	r2, [r3, r2]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	3307      	adds	r3, #7
 800e8d0:	404a      	eors	r2, r1
 800e8d2:	b2d2      	uxtb	r2, r2
 800e8d4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e8d6:	7c3b      	ldrb	r3, [r7, #16]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	4b37      	ldr	r3, [pc, #220]	; (800e9b8 <mix_sub_columns+0x284>)
 800e8dc:	5c9a      	ldrb	r2, [r3, r2]
 800e8de:	7d7b      	ldrb	r3, [r7, #21]
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	4b36      	ldr	r3, [pc, #216]	; (800e9bc <mix_sub_columns+0x288>)
 800e8e4:	5c5b      	ldrb	r3, [r3, r1]
 800e8e6:	4053      	eors	r3, r2
 800e8e8:	b2da      	uxtb	r2, r3
 800e8ea:	7abb      	ldrb	r3, [r7, #10]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	4b34      	ldr	r3, [pc, #208]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e8f0:	5c5b      	ldrb	r3, [r3, r1]
 800e8f2:	4053      	eors	r3, r2
 800e8f4:	b2d9      	uxtb	r1, r3
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	4b31      	ldr	r3, [pc, #196]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e8fc:	5c9a      	ldrb	r2, [r3, r2]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3308      	adds	r3, #8
 800e902:	404a      	eors	r2, r1
 800e904:	b2d2      	uxtb	r2, r2
 800e906:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e908:	7c3b      	ldrb	r3, [r7, #16]
 800e90a:	461a      	mov	r2, r3
 800e90c:	4b2c      	ldr	r3, [pc, #176]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e90e:	5c9a      	ldrb	r2, [r3, r2]
 800e910:	7d7b      	ldrb	r3, [r7, #21]
 800e912:	4619      	mov	r1, r3
 800e914:	4b28      	ldr	r3, [pc, #160]	; (800e9b8 <mix_sub_columns+0x284>)
 800e916:	5c5b      	ldrb	r3, [r3, r1]
 800e918:	4053      	eors	r3, r2
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	7abb      	ldrb	r3, [r7, #10]
 800e91e:	4619      	mov	r1, r3
 800e920:	4b26      	ldr	r3, [pc, #152]	; (800e9bc <mix_sub_columns+0x288>)
 800e922:	5c5b      	ldrb	r3, [r3, r1]
 800e924:	4053      	eors	r3, r2
 800e926:	b2d9      	uxtb	r1, r3
 800e928:	7bfb      	ldrb	r3, [r7, #15]
 800e92a:	461a      	mov	r2, r3
 800e92c:	4b24      	ldr	r3, [pc, #144]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e92e:	5c9a      	ldrb	r2, [r3, r2]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	3309      	adds	r3, #9
 800e934:	404a      	eors	r2, r1
 800e936:	b2d2      	uxtb	r2, r2
 800e938:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e93a:	7c3b      	ldrb	r3, [r7, #16]
 800e93c:	461a      	mov	r2, r3
 800e93e:	4b20      	ldr	r3, [pc, #128]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e940:	5c9a      	ldrb	r2, [r3, r2]
 800e942:	7d7b      	ldrb	r3, [r7, #21]
 800e944:	4619      	mov	r1, r3
 800e946:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e948:	5c5b      	ldrb	r3, [r3, r1]
 800e94a:	4053      	eors	r3, r2
 800e94c:	b2da      	uxtb	r2, r3
 800e94e:	7abb      	ldrb	r3, [r7, #10]
 800e950:	4619      	mov	r1, r3
 800e952:	4b19      	ldr	r3, [pc, #100]	; (800e9b8 <mix_sub_columns+0x284>)
 800e954:	5c5b      	ldrb	r3, [r3, r1]
 800e956:	4053      	eors	r3, r2
 800e958:	b2d9      	uxtb	r1, r3
 800e95a:	7bfb      	ldrb	r3, [r7, #15]
 800e95c:	461a      	mov	r2, r3
 800e95e:	4b17      	ldr	r3, [pc, #92]	; (800e9bc <mix_sub_columns+0x288>)
 800e960:	5c9a      	ldrb	r2, [r3, r2]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	330a      	adds	r3, #10
 800e966:	404a      	eors	r2, r1
 800e968:	b2d2      	uxtb	r2, r2
 800e96a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e96c:	7c3b      	ldrb	r3, [r7, #16]
 800e96e:	461a      	mov	r2, r3
 800e970:	4b12      	ldr	r3, [pc, #72]	; (800e9bc <mix_sub_columns+0x288>)
 800e972:	5c9a      	ldrb	r2, [r3, r2]
 800e974:	7d7b      	ldrb	r3, [r7, #21]
 800e976:	4619      	mov	r1, r3
 800e978:	4b11      	ldr	r3, [pc, #68]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e97a:	5c5b      	ldrb	r3, [r3, r1]
 800e97c:	4053      	eors	r3, r2
 800e97e:	b2da      	uxtb	r2, r3
 800e980:	7abb      	ldrb	r3, [r7, #10]
 800e982:	4619      	mov	r1, r3
 800e984:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <mix_sub_columns+0x28c>)
 800e986:	5c5b      	ldrb	r3, [r3, r1]
 800e988:	4053      	eors	r3, r2
 800e98a:	b2d9      	uxtb	r1, r3
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	461a      	mov	r2, r3
 800e990:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <mix_sub_columns+0x284>)
 800e992:	5c9a      	ldrb	r2, [r3, r2]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	330b      	adds	r3, #11
 800e998:	404a      	eors	r2, r1
 800e99a:	b2d2      	uxtb	r2, r2
 800e99c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e99e:	7d3b      	ldrb	r3, [r7, #20]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	4b05      	ldr	r3, [pc, #20]	; (800e9b8 <mix_sub_columns+0x284>)
 800e9a4:	5c9a      	ldrb	r2, [r3, r2]
 800e9a6:	7a7b      	ldrb	r3, [r7, #9]
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	4b04      	ldr	r3, [pc, #16]	; (800e9bc <mix_sub_columns+0x288>)
 800e9ac:	5c5b      	ldrb	r3, [r3, r1]
 800e9ae:	4053      	eors	r3, r2
 800e9b0:	b2da      	uxtb	r2, r3
 800e9b2:	7bbb      	ldrb	r3, [r7, #14]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	e005      	b.n	800e9c4 <mix_sub_columns+0x290>
 800e9b8:	0801f738 	.word	0x0801f738
 800e9bc:	0801f838 	.word	0x0801f838
 800e9c0:	0801f638 	.word	0x0801f638
 800e9c4:	4b2d      	ldr	r3, [pc, #180]	; (800ea7c <mix_sub_columns+0x348>)
 800e9c6:	5c5b      	ldrb	r3, [r3, r1]
 800e9c8:	4053      	eors	r3, r2
 800e9ca:	b2d9      	uxtb	r1, r3
 800e9cc:	7cfb      	ldrb	r3, [r7, #19]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	4b2a      	ldr	r3, [pc, #168]	; (800ea7c <mix_sub_columns+0x348>)
 800e9d2:	5c9a      	ldrb	r2, [r3, r2]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	330c      	adds	r3, #12
 800e9d8:	404a      	eors	r2, r1
 800e9da:	b2d2      	uxtb	r2, r2
 800e9dc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e9de:	7d3b      	ldrb	r3, [r7, #20]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	4b26      	ldr	r3, [pc, #152]	; (800ea7c <mix_sub_columns+0x348>)
 800e9e4:	5c9a      	ldrb	r2, [r3, r2]
 800e9e6:	7a7b      	ldrb	r3, [r7, #9]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	4b25      	ldr	r3, [pc, #148]	; (800ea80 <mix_sub_columns+0x34c>)
 800e9ec:	5c5b      	ldrb	r3, [r3, r1]
 800e9ee:	4053      	eors	r3, r2
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	7bbb      	ldrb	r3, [r7, #14]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4b23      	ldr	r3, [pc, #140]	; (800ea84 <mix_sub_columns+0x350>)
 800e9f8:	5c5b      	ldrb	r3, [r3, r1]
 800e9fa:	4053      	eors	r3, r2
 800e9fc:	b2d9      	uxtb	r1, r3
 800e9fe:	7cfb      	ldrb	r3, [r7, #19]
 800ea00:	461a      	mov	r2, r3
 800ea02:	4b1e      	ldr	r3, [pc, #120]	; (800ea7c <mix_sub_columns+0x348>)
 800ea04:	5c9a      	ldrb	r2, [r3, r2]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	330d      	adds	r3, #13
 800ea0a:	404a      	eors	r2, r1
 800ea0c:	b2d2      	uxtb	r2, r2
 800ea0e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ea10:	7d3b      	ldrb	r3, [r7, #20]
 800ea12:	461a      	mov	r2, r3
 800ea14:	4b19      	ldr	r3, [pc, #100]	; (800ea7c <mix_sub_columns+0x348>)
 800ea16:	5c9a      	ldrb	r2, [r3, r2]
 800ea18:	7a7b      	ldrb	r3, [r7, #9]
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4b17      	ldr	r3, [pc, #92]	; (800ea7c <mix_sub_columns+0x348>)
 800ea1e:	5c5b      	ldrb	r3, [r3, r1]
 800ea20:	4053      	eors	r3, r2
 800ea22:	b2da      	uxtb	r2, r3
 800ea24:	7bbb      	ldrb	r3, [r7, #14]
 800ea26:	4619      	mov	r1, r3
 800ea28:	4b15      	ldr	r3, [pc, #84]	; (800ea80 <mix_sub_columns+0x34c>)
 800ea2a:	5c5b      	ldrb	r3, [r3, r1]
 800ea2c:	4053      	eors	r3, r2
 800ea2e:	b2d9      	uxtb	r1, r3
 800ea30:	7cfb      	ldrb	r3, [r7, #19]
 800ea32:	461a      	mov	r2, r3
 800ea34:	4b13      	ldr	r3, [pc, #76]	; (800ea84 <mix_sub_columns+0x350>)
 800ea36:	5c9a      	ldrb	r2, [r3, r2]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	330e      	adds	r3, #14
 800ea3c:	404a      	eors	r2, r1
 800ea3e:	b2d2      	uxtb	r2, r2
 800ea40:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ea42:	7d3b      	ldrb	r3, [r7, #20]
 800ea44:	461a      	mov	r2, r3
 800ea46:	4b0f      	ldr	r3, [pc, #60]	; (800ea84 <mix_sub_columns+0x350>)
 800ea48:	5c9a      	ldrb	r2, [r3, r2]
 800ea4a:	7a7b      	ldrb	r3, [r7, #9]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <mix_sub_columns+0x348>)
 800ea50:	5c5b      	ldrb	r3, [r3, r1]
 800ea52:	4053      	eors	r3, r2
 800ea54:	b2da      	uxtb	r2, r3
 800ea56:	7bbb      	ldrb	r3, [r7, #14]
 800ea58:	4619      	mov	r1, r3
 800ea5a:	4b08      	ldr	r3, [pc, #32]	; (800ea7c <mix_sub_columns+0x348>)
 800ea5c:	5c5b      	ldrb	r3, [r3, r1]
 800ea5e:	4053      	eors	r3, r2
 800ea60:	b2d9      	uxtb	r1, r3
 800ea62:	7cfb      	ldrb	r3, [r7, #19]
 800ea64:	461a      	mov	r2, r3
 800ea66:	4b06      	ldr	r3, [pc, #24]	; (800ea80 <mix_sub_columns+0x34c>)
 800ea68:	5c9a      	ldrb	r2, [r3, r2]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	330f      	adds	r3, #15
 800ea6e:	404a      	eors	r2, r1
 800ea70:	b2d2      	uxtb	r2, r2
 800ea72:	701a      	strb	r2, [r3, #0]
  }
 800ea74:	bf00      	nop
 800ea76:	3718      	adds	r7, #24
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	0801f638 	.word	0x0801f638
 800ea80:	0801f738 	.word	0x0801f738
 800ea84:	0801f838 	.word	0x0801f838

0800ea88 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	460b      	mov	r3, r1
 800ea92:	607a      	str	r2, [r7, #4]
 800ea94:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ea96:	7afb      	ldrb	r3, [r7, #11]
 800ea98:	3b10      	subs	r3, #16
 800ea9a:	2b10      	cmp	r3, #16
 800ea9c:	bf8c      	ite	hi
 800ea9e:	2201      	movhi	r2, #1
 800eaa0:	2200      	movls	r2, #0
 800eaa2:	b2d2      	uxtb	r2, r2
 800eaa4:	2a00      	cmp	r2, #0
 800eaa6:	d10b      	bne.n	800eac0 <lorawan_aes_set_key+0x38>
 800eaa8:	4a64      	ldr	r2, [pc, #400]	; (800ec3c <lorawan_aes_set_key+0x1b4>)
 800eaaa:	fa22 f303 	lsr.w	r3, r2, r3
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	bf14      	ite	ne
 800eab6:	2301      	movne	r3, #1
 800eab8:	2300      	moveq	r3, #0
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d105      	bne.n	800eacc <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800eac8:	23ff      	movs	r3, #255	; 0xff
 800eaca:	e0b2      	b.n	800ec32 <lorawan_aes_set_key+0x1aa>
        break;
 800eacc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7afa      	ldrb	r2, [r7, #11]
 800ead2:	68f9      	ldr	r1, [r7, #12]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7ff fbfc 	bl	800e2d2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800eada:	7afb      	ldrb	r3, [r7, #11]
 800eadc:	331c      	adds	r3, #28
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800eae4:	7c7b      	ldrb	r3, [r7, #17]
 800eae6:	091b      	lsrs	r3, r3, #4
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	3b01      	subs	r3, #1
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eaf4:	7afb      	ldrb	r3, [r7, #11]
 800eaf6:	75fb      	strb	r3, [r7, #23]
 800eaf8:	2301      	movs	r3, #1
 800eafa:	75bb      	strb	r3, [r7, #22]
 800eafc:	e093      	b.n	800ec26 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800eafe:	7dfb      	ldrb	r3, [r7, #23]
 800eb00:	3b04      	subs	r3, #4
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	5cd3      	ldrb	r3, [r2, r3]
 800eb06:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800eb08:	7dfb      	ldrb	r3, [r7, #23]
 800eb0a:	3b03      	subs	r3, #3
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	5cd3      	ldrb	r3, [r2, r3]
 800eb10:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800eb12:	7dfb      	ldrb	r3, [r7, #23]
 800eb14:	3b02      	subs	r3, #2
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	5cd3      	ldrb	r3, [r2, r3]
 800eb1a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800eb1c:	7dfb      	ldrb	r3, [r7, #23]
 800eb1e:	3b01      	subs	r3, #1
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	5cd3      	ldrb	r3, [r2, r3]
 800eb24:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800eb26:	7dfb      	ldrb	r3, [r7, #23]
 800eb28:	7afa      	ldrb	r2, [r7, #11]
 800eb2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb2e:	fb01 f202 	mul.w	r2, r1, r2
 800eb32:	1a9b      	subs	r3, r3, r2
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d127      	bne.n	800eb8a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800eb3a:	7d7b      	ldrb	r3, [r7, #21]
 800eb3c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800eb3e:	7d3b      	ldrb	r3, [r7, #20]
 800eb40:	4a3f      	ldr	r2, [pc, #252]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800eb42:	5cd2      	ldrb	r2, [r2, r3]
 800eb44:	7dbb      	ldrb	r3, [r7, #22]
 800eb46:	4053      	eors	r3, r2
 800eb48:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800eb4a:	7cfb      	ldrb	r3, [r7, #19]
 800eb4c:	4a3c      	ldr	r2, [pc, #240]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800eb4e:	5cd3      	ldrb	r3, [r2, r3]
 800eb50:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800eb52:	7cbb      	ldrb	r3, [r7, #18]
 800eb54:	4a3a      	ldr	r2, [pc, #232]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800eb56:	5cd3      	ldrb	r3, [r2, r3]
 800eb58:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800eb5a:	7c3b      	ldrb	r3, [r7, #16]
 800eb5c:	4a38      	ldr	r2, [pc, #224]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800eb5e:	5cd3      	ldrb	r3, [r2, r3]
 800eb60:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800eb62:	7dbb      	ldrb	r3, [r7, #22]
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	b25a      	sxtb	r2, r3
 800eb68:	7dbb      	ldrb	r3, [r7, #22]
 800eb6a:	09db      	lsrs	r3, r3, #7
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	4619      	mov	r1, r3
 800eb70:	0049      	lsls	r1, r1, #1
 800eb72:	440b      	add	r3, r1
 800eb74:	4619      	mov	r1, r3
 800eb76:	00c8      	lsls	r0, r1, #3
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	440b      	add	r3, r1
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	b25b      	sxtb	r3, r3
 800eb82:	4053      	eors	r3, r2
 800eb84:	b25b      	sxtb	r3, r3
 800eb86:	75bb      	strb	r3, [r7, #22]
 800eb88:	e01c      	b.n	800ebc4 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800eb8a:	7afb      	ldrb	r3, [r7, #11]
 800eb8c:	2b18      	cmp	r3, #24
 800eb8e:	d919      	bls.n	800ebc4 <lorawan_aes_set_key+0x13c>
 800eb90:	7dfb      	ldrb	r3, [r7, #23]
 800eb92:	7afa      	ldrb	r2, [r7, #11]
 800eb94:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb98:	fb01 f202 	mul.w	r2, r1, r2
 800eb9c:	1a9b      	subs	r3, r3, r2
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	2b10      	cmp	r3, #16
 800eba2:	d10f      	bne.n	800ebc4 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800eba4:	7d7b      	ldrb	r3, [r7, #21]
 800eba6:	4a26      	ldr	r2, [pc, #152]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800eba8:	5cd3      	ldrb	r3, [r2, r3]
 800ebaa:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ebac:	7d3b      	ldrb	r3, [r7, #20]
 800ebae:	4a24      	ldr	r2, [pc, #144]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800ebb0:	5cd3      	ldrb	r3, [r2, r3]
 800ebb2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ebb4:	7cfb      	ldrb	r3, [r7, #19]
 800ebb6:	4a22      	ldr	r2, [pc, #136]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800ebb8:	5cd3      	ldrb	r3, [r2, r3]
 800ebba:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ebbc:	7cbb      	ldrb	r3, [r7, #18]
 800ebbe:	4a20      	ldr	r2, [pc, #128]	; (800ec40 <lorawan_aes_set_key+0x1b8>)
 800ebc0:	5cd3      	ldrb	r3, [r2, r3]
 800ebc2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ebc4:	7dfa      	ldrb	r2, [r7, #23]
 800ebc6:	7afb      	ldrb	r3, [r7, #11]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ebcc:	7c3b      	ldrb	r3, [r7, #16]
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	5cd1      	ldrb	r1, [r2, r3]
 800ebd2:	7dfb      	ldrb	r3, [r7, #23]
 800ebd4:	7d7a      	ldrb	r2, [r7, #21]
 800ebd6:	404a      	eors	r2, r1
 800ebd8:	b2d1      	uxtb	r1, r2
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ebde:	7c3b      	ldrb	r3, [r7, #16]
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	5cd1      	ldrb	r1, [r2, r3]
 800ebe6:	7dfb      	ldrb	r3, [r7, #23]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	7d3a      	ldrb	r2, [r7, #20]
 800ebec:	404a      	eors	r2, r1
 800ebee:	b2d1      	uxtb	r1, r2
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ebf4:	7c3b      	ldrb	r3, [r7, #16]
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	5cd1      	ldrb	r1, [r2, r3]
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
 800ebfe:	3302      	adds	r3, #2
 800ec00:	7cfa      	ldrb	r2, [r7, #19]
 800ec02:	404a      	eors	r2, r1
 800ec04:	b2d1      	uxtb	r1, r2
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ec0a:	7c3b      	ldrb	r3, [r7, #16]
 800ec0c:	3303      	adds	r3, #3
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	5cd1      	ldrb	r1, [r2, r3]
 800ec12:	7dfb      	ldrb	r3, [r7, #23]
 800ec14:	3303      	adds	r3, #3
 800ec16:	7cba      	ldrb	r2, [r7, #18]
 800ec18:	404a      	eors	r2, r1
 800ec1a:	b2d1      	uxtb	r1, r2
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ec20:	7dfb      	ldrb	r3, [r7, #23]
 800ec22:	3304      	adds	r3, #4
 800ec24:	75fb      	strb	r3, [r7, #23]
 800ec26:	7dfa      	ldrb	r2, [r7, #23]
 800ec28:	7c7b      	ldrb	r3, [r7, #17]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	f4ff af67 	bcc.w	800eafe <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ec30:	2300      	movs	r3, #0
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3718      	adds	r7, #24
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	00010101 	.word	0x00010101
 800ec40:	0801f638 	.word	0x0801f638

0800ec44 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08a      	sub	sp, #40	; 0x28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d038      	beq.n	800eccc <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	f107 0314 	add.w	r3, r7, #20
 800ec60:	68f9      	ldr	r1, [r7, #12]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7ff fc07 	bl	800e476 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec68:	2301      	movs	r3, #1
 800ec6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec6e:	e014      	b.n	800ec9a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ec70:	f107 0314 	add.w	r3, r7, #20
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7ff fd5d 	bl	800e734 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec80:	0112      	lsls	r2, r2, #4
 800ec82:	441a      	add	r2, r3
 800ec84:	f107 0314 	add.w	r3, r7, #20
 800ec88:	4611      	mov	r1, r2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff fcab 	bl	800e5e6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec94:	3301      	adds	r3, #1
 800ec96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800eca0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d3e3      	bcc.n	800ec70 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800eca8:	f107 0314 	add.w	r3, r7, #20
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7ff fca7 	bl	800e600 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecb8:	0112      	lsls	r2, r2, #4
 800ecba:	441a      	add	r2, r3
 800ecbc:	f107 0314 	add.w	r3, r7, #20
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	68b8      	ldr	r0, [r7, #8]
 800ecc4:	f7ff fbd7 	bl	800e476 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	e000      	b.n	800ecce <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800eccc:	23ff      	movs	r3, #255	; 0xff
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3728      	adds	r7, #40	; 0x28
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
	...

0800ecd8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ecd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecda:	b0a1      	sub	sp, #132	; 0x84
 800ecdc:	af12      	add	r7, sp, #72	; 0x48
 800ecde:	4603      	mov	r3, r0
 800ece0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ece4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ece8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecec:	4611      	mov	r1, r2
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f000 fa12 	bl	800f118 <SecureElementGetKeyByID>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d174      	bne.n	800ede4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed00:	e06c      	b.n	800eddc <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ed02:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed06:	4939      	ldr	r1, [pc, #228]	; (800edec <PrintKey+0x114>)
 800ed08:	4613      	mov	r3, r2
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	440b      	add	r3, r1
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d15a      	bne.n	800edd2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ed1c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed20:	4932      	ldr	r1, [pc, #200]	; (800edec <PrintKey+0x114>)
 800ed22:	4613      	mov	r3, r2
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	4413      	add	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	440b      	add	r3, r1
 800ed2c:	3308      	adds	r3, #8
 800ed2e:	6819      	ldr	r1, [r3, #0]
 800ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed32:	785b      	ldrb	r3, [r3, #1]
 800ed34:	461d      	mov	r5, r3
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	789b      	ldrb	r3, [r3, #2]
 800ed3a:	461e      	mov	r6, r3
 800ed3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3e:	78db      	ldrb	r3, [r3, #3]
 800ed40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed44:	791b      	ldrb	r3, [r3, #4]
 800ed46:	627b      	str	r3, [r7, #36]	; 0x24
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	795b      	ldrb	r3, [r3, #5]
 800ed4c:	623b      	str	r3, [r7, #32]
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed50:	799b      	ldrb	r3, [r3, #6]
 800ed52:	61fb      	str	r3, [r7, #28]
 800ed54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed56:	79db      	ldrb	r3, [r3, #7]
 800ed58:	61bb      	str	r3, [r7, #24]
 800ed5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5c:	7a1b      	ldrb	r3, [r3, #8]
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	7a5b      	ldrb	r3, [r3, #9]
 800ed64:	613b      	str	r3, [r7, #16]
 800ed66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed68:	7a9b      	ldrb	r3, [r3, #10]
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6e:	7adb      	ldrb	r3, [r3, #11]
 800ed70:	60bb      	str	r3, [r7, #8]
 800ed72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed74:	7b1b      	ldrb	r3, [r3, #12]
 800ed76:	607b      	str	r3, [r7, #4]
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	7b5b      	ldrb	r3, [r3, #13]
 800ed7c:	461c      	mov	r4, r3
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed80:	7b9b      	ldrb	r3, [r3, #14]
 800ed82:	4618      	mov	r0, r3
 800ed84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed86:	7bdb      	ldrb	r3, [r3, #15]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8c:	7c1b      	ldrb	r3, [r3, #16]
 800ed8e:	9310      	str	r3, [sp, #64]	; 0x40
 800ed90:	920f      	str	r2, [sp, #60]	; 0x3c
 800ed92:	900e      	str	r0, [sp, #56]	; 0x38
 800ed94:	940d      	str	r4, [sp, #52]	; 0x34
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	920c      	str	r2, [sp, #48]	; 0x30
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	920a      	str	r2, [sp, #40]	; 0x28
 800eda2:	693a      	ldr	r2, [r7, #16]
 800eda4:	9209      	str	r2, [sp, #36]	; 0x24
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	9208      	str	r2, [sp, #32]
 800edaa:	69ba      	ldr	r2, [r7, #24]
 800edac:	9207      	str	r2, [sp, #28]
 800edae:	69fa      	ldr	r2, [r7, #28]
 800edb0:	9206      	str	r2, [sp, #24]
 800edb2:	6a3a      	ldr	r2, [r7, #32]
 800edb4:	9205      	str	r2, [sp, #20]
 800edb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edb8:	9204      	str	r2, [sp, #16]
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	9303      	str	r3, [sp, #12]
 800edbe:	9602      	str	r6, [sp, #8]
 800edc0:	9501      	str	r5, [sp, #4]
 800edc2:	9100      	str	r1, [sp, #0]
 800edc4:	4b0a      	ldr	r3, [pc, #40]	; (800edf0 <PrintKey+0x118>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	2100      	movs	r1, #0
 800edca:	2002      	movs	r0, #2
 800edcc:	f00f fbc6 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
 800edd0:	e008      	b.n	800ede4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800edd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edd6:	3301      	adds	r3, #1
 800edd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800eddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ede0:	2b0a      	cmp	r3, #10
 800ede2:	d98e      	bls.n	800ed02 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ede4:	373c      	adds	r7, #60	; 0x3c
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edea:	bf00      	nop
 800edec:	0801f938 	.word	0x0801f938
 800edf0:	0801f1d0 	.word	0x0801f1d0

0800edf4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800edf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edf6:	b091      	sub	sp, #68	; 0x44
 800edf8:	af08      	add	r7, sp, #32
 800edfa:	4603      	mov	r3, r0
 800edfc:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800edfe:	2300      	movs	r3, #0
 800ee00:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ee02:	f107 0310 	add.w	r3, r7, #16
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fbf0 	bl	800f5ec <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ee0c:	7c3b      	ldrb	r3, [r7, #16]
 800ee0e:	7c7a      	ldrb	r2, [r7, #17]
 800ee10:	7cb9      	ldrb	r1, [r7, #18]
 800ee12:	7cf8      	ldrb	r0, [r7, #19]
 800ee14:	7d3c      	ldrb	r4, [r7, #20]
 800ee16:	7d7d      	ldrb	r5, [r7, #21]
 800ee18:	7dbe      	ldrb	r6, [r7, #22]
 800ee1a:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ee1e:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee22:	9606      	str	r6, [sp, #24]
 800ee24:	9505      	str	r5, [sp, #20]
 800ee26:	9404      	str	r4, [sp, #16]
 800ee28:	9003      	str	r0, [sp, #12]
 800ee2a:	9102      	str	r1, [sp, #8]
 800ee2c:	9201      	str	r2, [sp, #4]
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	4b24      	ldr	r3, [pc, #144]	; (800eec4 <PrintIds+0xd0>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	2100      	movs	r1, #0
 800ee36:	2002      	movs	r0, #2
 800ee38:	f00f fb90 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800ee3c:	f107 0318 	add.w	r3, r7, #24
 800ee40:	4618      	mov	r0, r3
 800ee42:	f000 fc03 	bl	800f64c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ee46:	7e3b      	ldrb	r3, [r7, #24]
 800ee48:	7e7a      	ldrb	r2, [r7, #25]
 800ee4a:	7eb9      	ldrb	r1, [r7, #26]
 800ee4c:	7ef8      	ldrb	r0, [r7, #27]
 800ee4e:	7f3c      	ldrb	r4, [r7, #28]
 800ee50:	7f7d      	ldrb	r5, [r7, #29]
 800ee52:	7fbe      	ldrb	r6, [r7, #30]
 800ee54:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ee58:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee5c:	9606      	str	r6, [sp, #24]
 800ee5e:	9505      	str	r5, [sp, #20]
 800ee60:	9404      	str	r4, [sp, #16]
 800ee62:	9003      	str	r0, [sp, #12]
 800ee64:	9102      	str	r1, [sp, #8]
 800ee66:	9201      	str	r2, [sp, #4]
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	4b17      	ldr	r3, [pc, #92]	; (800eec8 <PrintIds+0xd4>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	2100      	movs	r1, #0
 800ee70:	2002      	movs	r0, #2
 800ee72:	f00f fb73 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ee76:	f107 020c 	add.w	r2, r7, #12
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 fc16 	bl	800f6b0 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ee84:	f107 030c 	add.w	r3, r7, #12
 800ee88:	3303      	adds	r3, #3
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	f107 030c 	add.w	r3, r7, #12
 800ee92:	3302      	adds	r3, #2
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	4619      	mov	r1, r3
 800ee98:	f107 030c 	add.w	r3, r7, #12
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f107 030c 	add.w	r3, r7, #12
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	9303      	str	r3, [sp, #12]
 800eeaa:	9002      	str	r0, [sp, #8]
 800eeac:	9101      	str	r1, [sp, #4]
 800eeae:	9200      	str	r2, [sp, #0]
 800eeb0:	4b06      	ldr	r3, [pc, #24]	; (800eecc <PrintIds+0xd8>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	2100      	movs	r1, #0
 800eeb6:	2002      	movs	r0, #2
 800eeb8:	f00f fb50 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800eebc:	bf00      	nop
 800eebe:	3724      	adds	r7, #36	; 0x24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec4:	0801f22c 	.word	0x0801f22c
 800eec8:	0801f26c 	.word	0x0801f26c
 800eecc:	0801f2ac 	.word	0x0801f2ac

0800eed0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eedc:	2300      	movs	r3, #0
 800eede:	73fb      	strb	r3, [r7, #15]
 800eee0:	e01a      	b.n	800ef18 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eee2:	4b12      	ldr	r3, [pc, #72]	; (800ef2c <GetKeyByID+0x5c>)
 800eee4:	6819      	ldr	r1, [r3, #0]
 800eee6:	7bfa      	ldrb	r2, [r7, #15]
 800eee8:	4613      	mov	r3, r2
 800eeea:	011b      	lsls	r3, r3, #4
 800eeec:	4413      	add	r3, r2
 800eeee:	440b      	add	r3, r1
 800eef0:	3318      	adds	r3, #24
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	79fa      	ldrb	r2, [r7, #7]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d10b      	bne.n	800ef12 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eefa:	4b0c      	ldr	r3, [pc, #48]	; (800ef2c <GetKeyByID+0x5c>)
 800eefc:	6819      	ldr	r1, [r3, #0]
 800eefe:	7bfa      	ldrb	r2, [r7, #15]
 800ef00:	4613      	mov	r3, r2
 800ef02:	011b      	lsls	r3, r3, #4
 800ef04:	4413      	add	r3, r2
 800ef06:	3318      	adds	r3, #24
 800ef08:	18ca      	adds	r2, r1, r3
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	e006      	b.n	800ef20 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
 800ef14:	3301      	adds	r3, #1
 800ef16:	73fb      	strb	r3, [r7, #15]
 800ef18:	7bfb      	ldrb	r3, [r7, #15]
 800ef1a:	2b0a      	cmp	r3, #10
 800ef1c:	d9e1      	bls.n	800eee2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef1e:	2303      	movs	r3, #3
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3714      	adds	r7, #20
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bc80      	pop	{r7}
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	200007dc 	.word	0x200007dc

0800ef30 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b0d1      	sub	sp, #324	; 0x144
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ef3a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ef3e:	6020      	str	r0, [r4, #0]
 800ef40:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ef44:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ef48:	6001      	str	r1, [r0, #0]
 800ef4a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ef4e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ef52:	600a      	str	r2, [r1, #0]
 800ef54:	461a      	mov	r2, r3
 800ef56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef5a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef5e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ef60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef64:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d003      	beq.n	800ef76 <ComputeCmac+0x46>
 800ef6e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d101      	bne.n	800ef7a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef76:	2302      	movs	r3, #2
 800ef78:	e05d      	b.n	800f036 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ef7a:	f107 0314 	add.w	r3, r7, #20
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fe ff02 	bl	800dd88 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ef84:	f107 0210 	add.w	r2, r7, #16
 800ef88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef8c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	4611      	mov	r1, r2
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff ff9b 	bl	800eed0 <GetKeyByID>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800efa0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d144      	bne.n	800f032 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800efa8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	1c5a      	adds	r2, r3, #1
 800efb4:	f107 0314 	add.w	r3, r7, #20
 800efb8:	4611      	mov	r1, r2
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe fefd 	bl	800ddba <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800efc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efc4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d009      	beq.n	800efe2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800efce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efd2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efd6:	f107 0014 	add.w	r0, r7, #20
 800efda:	2210      	movs	r2, #16
 800efdc:	6819      	ldr	r1, [r3, #0]
 800efde:	f7fe fefb 	bl	800ddd8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800efe2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efe6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800efea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eff2:	f107 0014 	add.w	r0, r7, #20
 800eff6:	6812      	ldr	r2, [r2, #0]
 800eff8:	6819      	ldr	r1, [r3, #0]
 800effa:	f7fe feed 	bl	800ddd8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800effe:	f107 0214 	add.w	r2, r7, #20
 800f002:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f006:	4611      	mov	r1, r2
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fe ffa7 	bl	800df5c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800f00e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800f012:	461a      	mov	r2, r3
 800f014:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f018:	021b      	lsls	r3, r3, #8
 800f01a:	431a      	orrs	r2, r3
 800f01c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f020:	041b      	lsls	r3, r3, #16
 800f022:	431a      	orrs	r2, r3
 800f024:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f028:	061b      	lsls	r3, r3, #24
 800f02a:	431a      	orrs	r2, r3
 800f02c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f030:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f032:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f036:	4618      	mov	r0, r3
 800f038:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd90      	pop	{r4, r7, pc}

0800f040 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d101      	bne.n	800f052 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f04e:	2302      	movs	r3, #2
 800f050:	e00a      	b.n	800f068 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f052:	4a07      	ldr	r2, [pc, #28]	; (800f070 <SecureElementInit+0x30>)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f058:	4b05      	ldr	r3, [pc, #20]	; (800f070 <SecureElementInit+0x30>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	22d8      	movs	r2, #216	; 0xd8
 800f05e:	4905      	ldr	r1, [pc, #20]	; (800f074 <SecureElementInit+0x34>)
 800f060:	4618      	mov	r0, r3
 800f062:	f00a fed6 	bl	8019e12 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	200007dc 	.word	0x200007dc
 800f074:	0801fb54 	.word	0x0801fb54

0800f078 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800f082:	2300      	movs	r3, #0
 800f084:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800f086:	f107 030c 	add.w	r3, r7, #12
 800f08a:	4618      	mov	r0, r3
 800f08c:	f000 faae 	bl	800f5ec <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f090:	f107 0308 	add.w	r3, r7, #8
 800f094:	4619      	mov	r1, r3
 800f096:	2001      	movs	r0, #1
 800f098:	f000 fb0a 	bl	800f6b0 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d024      	beq.n	800f0ec <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	75bb      	strb	r3, [r7, #22]
 800f0aa:	e00c      	b.n	800f0c6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800f0ac:	7dbb      	ldrb	r3, [r7, #22]
 800f0ae:	3318      	adds	r3, #24
 800f0b0:	443b      	add	r3, r7
 800f0b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d002      	beq.n	800f0c0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
                break;
 800f0be:	e005      	b.n	800f0cc <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0c0:	7dbb      	ldrb	r3, [r7, #22]
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	75bb      	strb	r3, [r7, #22]
 800f0c6:	7dbb      	ldrb	r3, [r7, #22]
 800f0c8:	2b07      	cmp	r3, #7
 800f0ca:	d9ef      	bls.n	800f0ac <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800f0cc:	7dfb      	ldrb	r3, [r7, #23]
 800f0ce:	f083 0301 	eor.w	r3, r3, #1
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d009      	beq.n	800f0ec <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800f0d8:	f107 020c 	add.w	r2, r7, #12
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4610      	mov	r0, r2
 800f0e0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800f0e2:	f107 030c 	add.w	r3, r7, #12
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f000 fa68 	bl	800f5bc <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d00c      	beq.n	800f10c <SecureElementInitMcuID+0x94>
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d109      	bne.n	800f10c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800f0f8:	f107 0208 	add.w	r2, r7, #8
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	4610      	mov	r0, r2
 800f100:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	4619      	mov	r1, r3
 800f106:	2001      	movs	r0, #1
 800f108:	f000 fab8 	bl	800f67c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
	...

0800f118 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	4603      	mov	r3, r0
 800f120:	6039      	str	r1, [r7, #0]
 800f122:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f124:	2300      	movs	r3, #0
 800f126:	73fb      	strb	r3, [r7, #15]
 800f128:	e01a      	b.n	800f160 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f12a:	4b12      	ldr	r3, [pc, #72]	; (800f174 <SecureElementGetKeyByID+0x5c>)
 800f12c:	6819      	ldr	r1, [r3, #0]
 800f12e:	7bfa      	ldrb	r2, [r7, #15]
 800f130:	4613      	mov	r3, r2
 800f132:	011b      	lsls	r3, r3, #4
 800f134:	4413      	add	r3, r2
 800f136:	440b      	add	r3, r1
 800f138:	3318      	adds	r3, #24
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	79fa      	ldrb	r2, [r7, #7]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d10b      	bne.n	800f15a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f142:	4b0c      	ldr	r3, [pc, #48]	; (800f174 <SecureElementGetKeyByID+0x5c>)
 800f144:	6819      	ldr	r1, [r3, #0]
 800f146:	7bfa      	ldrb	r2, [r7, #15]
 800f148:	4613      	mov	r3, r2
 800f14a:	011b      	lsls	r3, r3, #4
 800f14c:	4413      	add	r3, r2
 800f14e:	3318      	adds	r3, #24
 800f150:	18ca      	adds	r2, r1, r3
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f156:	2300      	movs	r3, #0
 800f158:	e006      	b.n	800f168 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
 800f15c:	3301      	adds	r3, #1
 800f15e:	73fb      	strb	r3, [r7, #15]
 800f160:	7bfb      	ldrb	r3, [r7, #15]
 800f162:	2b0a      	cmp	r3, #10
 800f164:	d9e1      	bls.n	800f12a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f166:	2303      	movs	r3, #3
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3714      	adds	r7, #20
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bc80      	pop	{r7}
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop
 800f174:	200007dc 	.word	0x200007dc

0800f178 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f17c:	2000      	movs	r0, #0
 800f17e:	f7ff fdab 	bl	800ecd8 <PrintKey>
    PrintKey( NWK_KEY );
 800f182:	2001      	movs	r0, #1
 800f184:	f7ff fda8 	bl	800ecd8 <PrintKey>
    PrintKey( APP_S_KEY );
 800f188:	2009      	movs	r0, #9
 800f18a:	f7ff fda5 	bl	800ecd8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f18e:	2008      	movs	r0, #8
 800f190:	f7ff fda2 	bl	800ecd8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f194:	2000      	movs	r0, #0
 800f196:	f7ff fe2d 	bl	800edf4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f1aa:	200b      	movs	r0, #11
 800f1ac:	f7ff fd94 	bl	800ecd8 <PrintKey>
    PrintKey( MC_KE_KEY );
 800f1b0:	200c      	movs	r0, #12
 800f1b2:	f7ff fd91 	bl	800ecd8 <PrintKey>
    PrintKey( APP_S_KEY );
 800f1b6:	2009      	movs	r0, #9
 800f1b8:	f7ff fd8e 	bl	800ecd8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f1bc:	2008      	movs	r0, #8
 800f1be:	f7ff fd8b 	bl	800ecd8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f1c2:	200a      	movs	r0, #10
 800f1c4:	f7ff fd88 	bl	800ecd8 <PrintKey>
    PrintIds( mode );
 800f1c8:	79fb      	ldrb	r3, [r7, #7]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff fe12 	bl	800edf4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3708      	adds	r7, #8
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}
	...

0800f1dc <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b088      	sub	sp, #32
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	6039      	str	r1, [r7, #0]
 800f1e6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d101      	bne.n	800f1f2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	e04c      	b.n	800f28c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	77fb      	strb	r3, [r7, #31]
 800f1f6:	e045      	b.n	800f284 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f1f8:	4b26      	ldr	r3, [pc, #152]	; (800f294 <SecureElementSetKey+0xb8>)
 800f1fa:	6819      	ldr	r1, [r3, #0]
 800f1fc:	7ffa      	ldrb	r2, [r7, #31]
 800f1fe:	4613      	mov	r3, r2
 800f200:	011b      	lsls	r3, r3, #4
 800f202:	4413      	add	r3, r2
 800f204:	440b      	add	r3, r1
 800f206:	3318      	adds	r3, #24
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	79fa      	ldrb	r2, [r7, #7]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d136      	bne.n	800f27e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f210:	79fb      	ldrb	r3, [r7, #7]
 800f212:	2b0d      	cmp	r3, #13
 800f214:	d123      	bne.n	800f25e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f216:	2306      	movs	r3, #6
 800f218:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f21a:	2300      	movs	r3, #0
 800f21c:	60fb      	str	r3, [r7, #12]
 800f21e:	f107 0310 	add.w	r3, r7, #16
 800f222:	2200      	movs	r2, #0
 800f224:	601a      	str	r2, [r3, #0]
 800f226:	605a      	str	r2, [r3, #4]
 800f228:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f22a:	f107 030c 	add.w	r3, r7, #12
 800f22e:	220c      	movs	r2, #12
 800f230:	2110      	movs	r1, #16
 800f232:	6838      	ldr	r0, [r7, #0]
 800f234:	f000 f876 	bl	800f324 <SecureElementAesEncrypt>
 800f238:	4603      	mov	r3, r0
 800f23a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f23c:	4b15      	ldr	r3, [pc, #84]	; (800f294 <SecureElementSetKey+0xb8>)
 800f23e:	6819      	ldr	r1, [r3, #0]
 800f240:	7ffa      	ldrb	r2, [r7, #31]
 800f242:	4613      	mov	r3, r2
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	4413      	add	r3, r2
 800f248:	3318      	adds	r3, #24
 800f24a:	440b      	add	r3, r1
 800f24c:	3301      	adds	r3, #1
 800f24e:	f107 010c 	add.w	r1, r7, #12
 800f252:	2210      	movs	r2, #16
 800f254:	4618      	mov	r0, r3
 800f256:	f00a fddc 	bl	8019e12 <memcpy1>
                return retval;
 800f25a:	7fbb      	ldrb	r3, [r7, #30]
 800f25c:	e016      	b.n	800f28c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f25e:	4b0d      	ldr	r3, [pc, #52]	; (800f294 <SecureElementSetKey+0xb8>)
 800f260:	6819      	ldr	r1, [r3, #0]
 800f262:	7ffa      	ldrb	r2, [r7, #31]
 800f264:	4613      	mov	r3, r2
 800f266:	011b      	lsls	r3, r3, #4
 800f268:	4413      	add	r3, r2
 800f26a:	3318      	adds	r3, #24
 800f26c:	440b      	add	r3, r1
 800f26e:	3301      	adds	r3, #1
 800f270:	2210      	movs	r2, #16
 800f272:	6839      	ldr	r1, [r7, #0]
 800f274:	4618      	mov	r0, r3
 800f276:	f00a fdcc 	bl	8019e12 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f27a:	2300      	movs	r3, #0
 800f27c:	e006      	b.n	800f28c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f27e:	7ffb      	ldrb	r3, [r7, #31]
 800f280:	3301      	adds	r3, #1
 800f282:	77fb      	strb	r3, [r7, #31]
 800f284:	7ffb      	ldrb	r3, [r7, #31]
 800f286:	2b0a      	cmp	r3, #10
 800f288:	d9b6      	bls.n	800f1f8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f28a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3720      	adds	r7, #32
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	200007dc 	.word	0x200007dc

0800f298 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af02      	add	r7, sp, #8
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f2a6:	78fb      	ldrb	r3, [r7, #3]
 800f2a8:	2b0b      	cmp	r3, #11
 800f2aa:	d901      	bls.n	800f2b0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2ac:	2303      	movs	r3, #3
 800f2ae:	e009      	b.n	800f2c4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f2b0:	78fa      	ldrb	r2, [r7, #3]
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	68b9      	ldr	r1, [r7, #8]
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f7ff fe37 	bl	800ef30 <ComputeCmac>
 800f2c2:	4603      	mov	r3, r0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b088      	sub	sp, #32
 800f2d0:	af02      	add	r7, sp, #8
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	607a      	str	r2, [r7, #4]
 800f2d8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	e01b      	b.n	800f31c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f2e4:	2306      	movs	r3, #6
 800f2e6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f2ec:	78fa      	ldrb	r2, [r7, #3]
 800f2ee:	f107 0310 	add.w	r3, r7, #16
 800f2f2:	9300      	str	r3, [sp, #0]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	68f9      	ldr	r1, [r7, #12]
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	f7ff fe18 	bl	800ef30 <ComputeCmac>
 800f300:	4603      	mov	r3, r0
 800f302:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f304:	7dfb      	ldrb	r3, [r7, #23]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f30a:	7dfb      	ldrb	r3, [r7, #23]
 800f30c:	e006      	b.n	800f31c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	429a      	cmp	r2, r3
 800f314:	d001      	beq.n	800f31a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f316:	2301      	movs	r3, #1
 800f318:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b0c2      	sub	sp, #264	; 0x108
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f330:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f334:	6001      	str	r1, [r0, #0]
 800f336:	4611      	mov	r1, r2
 800f338:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f33c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f340:	6013      	str	r3, [r2, #0]
 800f342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f346:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f34a:	460a      	mov	r2, r1
 800f34c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d006      	beq.n	800f362 <SecureElementAesEncrypt+0x3e>
 800f354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d101      	bne.n	800f366 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f362:	2302      	movs	r3, #2
 800f364:	e059      	b.n	800f41a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f36a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f003 030f 	and.w	r3, r3, #15
 800f374:	2b00      	cmp	r3, #0
 800f376:	d001      	beq.n	800f37c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f378:	2305      	movs	r3, #5
 800f37a:	e04e      	b.n	800f41a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f37c:	f107 0314 	add.w	r3, r7, #20
 800f380:	22f0      	movs	r2, #240	; 0xf0
 800f382:	2100      	movs	r1, #0
 800f384:	4618      	mov	r0, r3
 800f386:	f00a fd7f 	bl	8019e88 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f38a:	f107 0210 	add.w	r2, r7, #16
 800f38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f392:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	4611      	mov	r1, r2
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fd98 	bl	800eed0 <GetKeyByID>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f3a6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d133      	bne.n	800f416 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	f107 0214 	add.w	r2, r7, #20
 800f3b6:	2110      	movs	r1, #16
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7ff fb65 	bl	800ea88 <lorawan_aes_set_key>

        uint8_t block = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f3c4:	e020      	b.n	800f408 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f3c6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	18d0      	adds	r0, r2, r3
 800f3ce:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3d2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f3d6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f3da:	6812      	ldr	r2, [r2, #0]
 800f3dc:	4413      	add	r3, r2
 800f3de:	f107 0214 	add.w	r2, r7, #20
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	f7ff fc2e 	bl	800ec44 <lorawan_aes_encrypt>
            block = block + 16;
 800f3e8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3ec:	3310      	adds	r3, #16
 800f3ee:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f3fa:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f3fe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f402:	6812      	ldr	r2, [r2, #0]
 800f404:	3a10      	subs	r2, #16
 800f406:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f40c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1d7      	bne.n	800f3c6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f416:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b088      	sub	sp, #32
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	460b      	mov	r3, r1
 800f42e:	70fb      	strb	r3, [r7, #3]
 800f430:	4613      	mov	r3, r2
 800f432:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d101      	bne.n	800f43e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f43a:	2302      	movs	r3, #2
 800f43c:	e02e      	b.n	800f49c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f43e:	2306      	movs	r3, #6
 800f440:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f442:	78bb      	ldrb	r3, [r7, #2]
 800f444:	2b0c      	cmp	r3, #12
 800f446:	d104      	bne.n	800f452 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f448:	78fb      	ldrb	r3, [r7, #3]
 800f44a:	2b0b      	cmp	r3, #11
 800f44c:	d001      	beq.n	800f452 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f44e:	2303      	movs	r3, #3
 800f450:	e024      	b.n	800f49c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f452:	2300      	movs	r3, #0
 800f454:	60fb      	str	r3, [r7, #12]
 800f456:	f107 0310 	add.w	r3, r7, #16
 800f45a:	2200      	movs	r2, #0
 800f45c:	601a      	str	r2, [r3, #0]
 800f45e:	605a      	str	r2, [r3, #4]
 800f460:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f462:	f107 030c 	add.w	r3, r7, #12
 800f466:	78fa      	ldrb	r2, [r7, #3]
 800f468:	2110      	movs	r1, #16
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7ff ff5a 	bl	800f324 <SecureElementAesEncrypt>
 800f470:	4603      	mov	r3, r0
 800f472:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f474:	7ffb      	ldrb	r3, [r7, #31]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f47a:	7ffb      	ldrb	r3, [r7, #31]
 800f47c:	e00e      	b.n	800f49c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f47e:	f107 020c 	add.w	r2, r7, #12
 800f482:	78bb      	ldrb	r3, [r7, #2]
 800f484:	4611      	mov	r1, r2
 800f486:	4618      	mov	r0, r3
 800f488:	f7ff fea8 	bl	800f1dc <SecureElementSetKey>
 800f48c:	4603      	mov	r3, r0
 800f48e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f490:	7ffb      	ldrb	r3, [r7, #31]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f496:	7ffb      	ldrb	r3, [r7, #31]
 800f498:	e000      	b.n	800f49c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f49a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3720      	adds	r7, #32
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b086      	sub	sp, #24
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60b9      	str	r1, [r7, #8]
 800f4ac:	607b      	str	r3, [r7, #4]
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	73fb      	strb	r3, [r7, #15]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d005      	beq.n	800f4c8 <SecureElementProcessJoinAccept+0x24>
 800f4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d002      	beq.n	800f4c8 <SecureElementProcessJoinAccept+0x24>
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4c8:	2302      	movs	r3, #2
 800f4ca:	e05c      	b.n	800f586 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f4cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4d0:	2b21      	cmp	r3, #33	; 0x21
 800f4d2:	d901      	bls.n	800f4d8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f4d4:	2305      	movs	r3, #5
 800f4d6:	e056      	b.n	800f586 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f4dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	6879      	ldr	r1, [r7, #4]
 800f4e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4e8:	f00a fc93 	bl	8019e12 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	1c58      	adds	r0, r3, #1
 800f4f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	7dfa      	ldrb	r2, [r7, #23]
 800f4fe:	f7ff ff11 	bl	800f324 <SecureElementAesEncrypt>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f508:	2307      	movs	r3, #7
 800f50a:	e03c      	b.n	800f586 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50e:	330b      	adds	r3, #11
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	09db      	lsrs	r3, r3, #7
 800f514:	b2da      	uxtb	r2, r3
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f51a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f51e:	3b04      	subs	r3, #4
 800f520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f522:	4413      	add	r3, r2
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	4619      	mov	r1, r3
 800f528:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f52c:	3b03      	subs	r3, #3
 800f52e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f530:	4413      	add	r3, r2
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	021b      	lsls	r3, r3, #8
 800f536:	ea41 0203 	orr.w	r2, r1, r3
 800f53a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f53e:	3b02      	subs	r3, #2
 800f540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f542:	440b      	add	r3, r1
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	041b      	lsls	r3, r3, #16
 800f548:	431a      	orrs	r2, r3
 800f54a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f54e:	3b01      	subs	r3, #1
 800f550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f552:	440b      	add	r3, r1
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	061b      	lsls	r3, r3, #24
 800f558:	4313      	orrs	r3, r2
 800f55a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d10d      	bne.n	800f580 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f564:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f568:	3b04      	subs	r3, #4
 800f56a:	4619      	mov	r1, r3
 800f56c:	2301      	movs	r3, #1
 800f56e:	693a      	ldr	r2, [r7, #16]
 800f570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f572:	f7ff feab 	bl	800f2cc <SecureElementVerifyAesCmac>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d003      	beq.n	800f584 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f57c:	2301      	movs	r3, #1
 800f57e:	e002      	b.n	800f586 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f580:	2304      	movs	r3, #4
 800f582:	e000      	b.n	800f586 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
	...

0800f590 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d101      	bne.n	800f5a2 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f59e:	2302      	movs	r3, #2
 800f5a0:	e006      	b.n	800f5b0 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f5a2:	4b05      	ldr	r3, [pc, #20]	; (800f5b8 <SecureElementRandomNumber+0x28>)
 800f5a4:	695b      	ldr	r3, [r3, #20]
 800f5a6:	4798      	blx	r3
 800f5a8:	4602      	mov	r2, r0
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	0801fa04 	.word	0x0801fa04

0800f5bc <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d101      	bne.n	800f5ce <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5ca:	2302      	movs	r3, #2
 800f5cc:	e007      	b.n	800f5de <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f5ce:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <SecureElementSetDevEui+0x2c>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2208      	movs	r2, #8
 800f5d4:	6879      	ldr	r1, [r7, #4]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f00a fc1b 	bl	8019e12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5dc:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	200007dc 	.word	0x200007dc

0800f5ec <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d101      	bne.n	800f5fe <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5fa:	2302      	movs	r3, #2
 800f5fc:	e007      	b.n	800f60e <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f5fe:	4b06      	ldr	r3, [pc, #24]	; (800f618 <SecureElementGetDevEui+0x2c>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2208      	movs	r2, #8
 800f604:	4619      	mov	r1, r3
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f00a fc03 	bl	8019e12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f60c:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3708      	adds	r7, #8
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	200007dc 	.word	0x200007dc

0800f61c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f62a:	2302      	movs	r3, #2
 800f62c:	e008      	b.n	800f640 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f62e:	4b06      	ldr	r3, [pc, #24]	; (800f648 <SecureElementSetJoinEui+0x2c>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3308      	adds	r3, #8
 800f634:	2208      	movs	r2, #8
 800f636:	6879      	ldr	r1, [r7, #4]
 800f638:	4618      	mov	r0, r3
 800f63a:	f00a fbea 	bl	8019e12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f63e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f640:	4618      	mov	r0, r3
 800f642:	3708      	adds	r7, #8
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	200007dc 	.word	0x200007dc

0800f64c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d101      	bne.n	800f65e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f65a:	2302      	movs	r3, #2
 800f65c:	e008      	b.n	800f670 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f65e:	4b06      	ldr	r3, [pc, #24]	; (800f678 <SecureElementGetJoinEui+0x2c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3308      	adds	r3, #8
 800f664:	2208      	movs	r2, #8
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f00a fbd2 	bl	8019e12 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f66e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f670:	4618      	mov	r0, r3
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	200007dc 	.word	0x200007dc

0800f67c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	6039      	str	r1, [r7, #0]
 800f686:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f688:	79fb      	ldrb	r3, [r7, #7]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d104      	bne.n	800f698 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f68e:	4b07      	ldr	r3, [pc, #28]	; (800f6ac <SecureElementSetDevAddr+0x30>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	683a      	ldr	r2, [r7, #0]
 800f694:	611a      	str	r2, [r3, #16]
 800f696:	e003      	b.n	800f6a0 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f698:	4b04      	ldr	r3, [pc, #16]	; (800f6ac <SecureElementSetDevAddr+0x30>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f6a0:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	370c      	adds	r7, #12
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bc80      	pop	{r7}
 800f6aa:	4770      	bx	lr
 800f6ac:	200007dc 	.word	0x200007dc

0800f6b0 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	6039      	str	r1, [r7, #0]
 800f6ba:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d101      	bne.n	800f6c6 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6c2:	2302      	movs	r3, #2
 800f6c4:	e00e      	b.n	800f6e4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d105      	bne.n	800f6d8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <SecureElementGetDevAddr+0x40>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	691a      	ldr	r2, [r3, #16]
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	601a      	str	r2, [r3, #0]
 800f6d6:	e004      	b.n	800f6e2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f6d8:	4b05      	ldr	r3, [pc, #20]	; (800f6f0 <SecureElementGetDevAddr+0x40>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	695a      	ldr	r2, [r3, #20]
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f6e2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bc80      	pop	{r7}
 800f6ec:	4770      	bx	lr
 800f6ee:	bf00      	nop
 800f6f0:	200007dc 	.word	0x200007dc

0800f6f4 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f6fe:	4a22      	ldr	r2, [pc, #136]	; (800f788 <LmHandlerInit+0x94>)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f704:	4b21      	ldr	r3, [pc, #132]	; (800f78c <LmHandlerInit+0x98>)
 800f706:	4a22      	ldr	r2, [pc, #136]	; (800f790 <LmHandlerInit+0x9c>)
 800f708:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f70a:	4b20      	ldr	r3, [pc, #128]	; (800f78c <LmHandlerInit+0x98>)
 800f70c:	4a21      	ldr	r2, [pc, #132]	; (800f794 <LmHandlerInit+0xa0>)
 800f70e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f710:	4b1e      	ldr	r3, [pc, #120]	; (800f78c <LmHandlerInit+0x98>)
 800f712:	4a21      	ldr	r2, [pc, #132]	; (800f798 <LmHandlerInit+0xa4>)
 800f714:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f716:	4b1d      	ldr	r3, [pc, #116]	; (800f78c <LmHandlerInit+0x98>)
 800f718:	4a20      	ldr	r2, [pc, #128]	; (800f79c <LmHandlerInit+0xa8>)
 800f71a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f71c:	4b1a      	ldr	r3, [pc, #104]	; (800f788 <LmHandlerInit+0x94>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <LmHandlerInit+0xac>)
 800f724:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f726:	4b18      	ldr	r3, [pc, #96]	; (800f788 <LmHandlerInit+0x94>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	4a1c      	ldr	r2, [pc, #112]	; (800f7a0 <LmHandlerInit+0xac>)
 800f72e:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f730:	4b15      	ldr	r3, [pc, #84]	; (800f788 <LmHandlerInit+0x94>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	4a1a      	ldr	r2, [pc, #104]	; (800f7a0 <LmHandlerInit+0xac>)
 800f738:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f73a:	4b13      	ldr	r3, [pc, #76]	; (800f788 <LmHandlerInit+0x94>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	4a17      	ldr	r2, [pc, #92]	; (800f7a0 <LmHandlerInit+0xac>)
 800f742:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f744:	4b16      	ldr	r3, [pc, #88]	; (800f7a0 <LmHandlerInit+0xac>)
 800f746:	4a17      	ldr	r2, [pc, #92]	; (800f7a4 <LmHandlerInit+0xb0>)
 800f748:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f74a:	4b0f      	ldr	r3, [pc, #60]	; (800f788 <LmHandlerInit+0x94>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	699b      	ldr	r3, [r3, #24]
 800f750:	4a13      	ldr	r2, [pc, #76]	; (800f7a0 <LmHandlerInit+0xac>)
 800f752:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f754:	4914      	ldr	r1, [pc, #80]	; (800f7a8 <LmHandlerInit+0xb4>)
 800f756:	2000      	movs	r0, #0
 800f758:	f000 fd44 	bl	80101e4 <LmHandlerPackageRegister>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f762:	f04f 33ff 	mov.w	r3, #4294967295
 800f766:	e00a      	b.n	800f77e <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f768:	463b      	mov	r3, r7
 800f76a:	4618      	mov	r0, r3
 800f76c:	f001 fa30 	bl	8010bd0 <LmhpPackagesRegistrationInit>
 800f770:	4603      	mov	r3, r0
 800f772:	2b00      	cmp	r3, #0
 800f774:	d002      	beq.n	800f77c <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f776:	f04f 33ff 	mov.w	r3, #4294967295
 800f77a:	e000      	b.n	800f77e <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	20000824 	.word	0x20000824
 800f78c:	20000828 	.word	0x20000828
 800f790:	0800fea9 	.word	0x0800fea9
 800f794:	0800ff1d 	.word	0x0800ff1d
 800f798:	0800fffd 	.word	0x0800fffd
 800f79c:	08010151 	.word	0x08010151
 800f7a0:	20000838 	.word	0x20000838
 800f7a4:	080105a5 	.word	0x080105a5
 800f7a8:	200000a4 	.word	0x200000a4

0800f7ac <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b090      	sub	sp, #64	; 0x40
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f7b4:	2218      	movs	r2, #24
 800f7b6:	6879      	ldr	r1, [r7, #4]
 800f7b8:	4852      	ldr	r0, [pc, #328]	; (800f904 <LmHandlerConfigure+0x158>)
 800f7ba:	f00a fb2a 	bl	8019e12 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f7be:	f7fe faa1 	bl	800dd04 <LoraInfo_GetPtr>
 800f7c2:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f7c4:	4b4f      	ldr	r3, [pc, #316]	; (800f904 <LmHandlerConfigure+0x158>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4093      	lsls	r3, r2
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f7da:	4b4b      	ldr	r3, [pc, #300]	; (800f908 <LmHandlerConfigure+0x15c>)
 800f7dc:	2201      	movs	r2, #1
 800f7de:	2100      	movs	r1, #0
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	f00e febb 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f7e6:	e7fe      	b.n	800f7e6 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f7e8:	4b46      	ldr	r3, [pc, #280]	; (800f904 <LmHandlerConfigure+0x158>)
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	461a      	mov	r2, r3
 800f7ee:	4947      	ldr	r1, [pc, #284]	; (800f90c <LmHandlerConfigure+0x160>)
 800f7f0:	4847      	ldr	r0, [pc, #284]	; (800f910 <LmHandlerConfigure+0x164>)
 800f7f2:	f004 fbc3 	bl	8013f7c <LoRaMacInitialization>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d002      	beq.n	800f802 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f800:	e07c      	b.n	800f8fc <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f802:	2305      	movs	r3, #5
 800f804:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f806:	2300      	movs	r3, #0
 800f808:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f80a:	f107 0314 	add.w	r3, r7, #20
 800f80e:	4618      	mov	r0, r3
 800f810:	f005 f902 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f814:	4b3d      	ldr	r3, [pc, #244]	; (800f90c <LmHandlerConfigure+0x160>)
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	4a3c      	ldr	r2, [pc, #240]	; (800f90c <LmHandlerConfigure+0x160>)
 800f81a:	68d2      	ldr	r2, [r2, #12]
 800f81c:	4611      	mov	r1, r2
 800f81e:	4618      	mov	r0, r3
 800f820:	f7ff fc2a 	bl	800f078 <SecureElementInitMcuID>
 800f824:	4603      	mov	r3, r0
 800f826:	2b00      	cmp	r3, #0
 800f828:	d002      	beq.n	800f830 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f82a:	f04f 33ff 	mov.w	r3, #4294967295
 800f82e:	e065      	b.n	800f8fc <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f830:	2306      	movs	r3, #6
 800f832:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f834:	f107 0314 	add.w	r3, r7, #20
 800f838:	4618      	mov	r0, r3
 800f83a:	f004 ff37 	bl	80146ac <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	4a34      	ldr	r2, [pc, #208]	; (800f914 <LmHandlerConfigure+0x168>)
 800f842:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f844:	f107 0314 	add.w	r3, r7, #20
 800f848:	4618      	mov	r0, r3
 800f84a:	f005 f8e5 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f84e:	2302      	movs	r3, #2
 800f850:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f852:	4b30      	ldr	r3, [pc, #192]	; (800f914 <LmHandlerConfigure+0x168>)
 800f854:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f856:	f107 0314 	add.w	r3, r7, #20
 800f85a:	4618      	mov	r0, r3
 800f85c:	f004 ff26 	bl	80146ac <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f860:	2303      	movs	r3, #3
 800f862:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f864:	4b2c      	ldr	r3, [pc, #176]	; (800f918 <LmHandlerConfigure+0x16c>)
 800f866:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f868:	f107 0314 	add.w	r3, r7, #20
 800f86c:	4618      	mov	r0, r3
 800f86e:	f004 ff1d 	bl	80146ac <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f872:	f7ff fc81 	bl	800f178 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f876:	230f      	movs	r3, #15
 800f878:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f87a:	2301      	movs	r3, #1
 800f87c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f87e:	f107 0314 	add.w	r3, r7, #20
 800f882:	4618      	mov	r0, r3
 800f884:	f005 f8c8 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f888:	2310      	movs	r3, #16
 800f88a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f88c:	2300      	movs	r3, #0
 800f88e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f890:	f107 0314 	add.w	r3, r7, #20
 800f894:	4618      	mov	r0, r3
 800f896:	f005 f8bf 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f89a:	2304      	movs	r3, #4
 800f89c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f89e:	4b19      	ldr	r3, [pc, #100]	; (800f904 <LmHandlerConfigure+0x158>)
 800f8a0:	789b      	ldrb	r3, [r3, #2]
 800f8a2:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8a4:	f107 0314 	add.w	r3, r7, #20
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f005 f8b5 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f8ae:	2339      	movs	r3, #57	; 0x39
 800f8b0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f8b2:	4b14      	ldr	r3, [pc, #80]	; (800f904 <LmHandlerConfigure+0x158>)
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8b8:	f107 0314 	add.w	r3, r7, #20
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f005 f8ab 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f8c2:	230f      	movs	r3, #15
 800f8c4:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f8c6:	4b0f      	ldr	r3, [pc, #60]	; (800f904 <LmHandlerConfigure+0x158>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	f107 020c 	add.w	r2, r7, #12
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f007 ff84 	bl	80177de <RegionGetPhyParam>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bf14      	ite	ne
 800f8e0:	2301      	movne	r3, #1
 800f8e2:	2300      	moveq	r3, #0
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	4b07      	ldr	r3, [pc, #28]	; (800f904 <LmHandlerConfigure+0x158>)
 800f8e8:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f8ea:	2014      	movs	r0, #20
 800f8ec:	f000 fac4 	bl	800fe78 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f8f0:	4b04      	ldr	r3, [pc, #16]	; (800f904 <LmHandlerConfigure+0x158>)
 800f8f2:	79db      	ldrb	r3, [r3, #7]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f005 fe6b 	bl	80155d0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3740      	adds	r7, #64	; 0x40
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	2000080c 	.word	0x2000080c
 800f908:	0801f2d8 	.word	0x0801f2d8
 800f90c:	20000838 	.word	0x20000838
 800f910:	20000828 	.word	0x20000828
 800f914:	200007e0 	.word	0x200007e0
 800f918:	200007e8 	.word	0x200007e8

0800f91c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f920:	f002 fb36 	bl	8011f90 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f924:	f000 fd9c 	bl	8010460 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f928:	f000 fd6c 	bl	8010404 <LmHandlerPackageIsTxPending>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f930:	bd80      	pop	{r7, pc}
	...

0800f934 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f934:	b480      	push	{r7}
 800f936:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f938:	4b02      	ldr	r3, [pc, #8]	; (800f944 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f93a:	681b      	ldr	r3, [r3, #0]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	46bd      	mov	sp, r7
 800f940:	bc80      	pop	{r7}
 800f942:	4770      	bx	lr
 800f944:	20000850 	.word	0x20000850

0800f948 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b092      	sub	sp, #72	; 0x48
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	4603      	mov	r3, r0
 800f950:	460a      	mov	r2, r1
 800f952:	71fb      	strb	r3, [r7, #7]
 800f954:	4613      	mov	r3, r2
 800f956:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f958:	2301      	movs	r3, #1
 800f95a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f95e:	4b47      	ldr	r3, [pc, #284]	; (800fa7c <LmHandlerJoin+0x134>)
 800f960:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f964:	b2db      	uxtb	r3, r3
 800f966:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f96a:	4b44      	ldr	r3, [pc, #272]	; (800fa7c <LmHandlerJoin+0x134>)
 800f96c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f970:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	2b02      	cmp	r3, #2
 800f978:	d110      	bne.n	800f99c <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f97a:	2302      	movs	r3, #2
 800f97c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f980:	4b3f      	ldr	r3, [pc, #252]	; (800fa80 <LmHandlerJoin+0x138>)
 800f982:	2202      	movs	r2, #2
 800f984:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f986:	4a3e      	ldr	r2, [pc, #248]	; (800fa80 <LmHandlerJoin+0x138>)
 800f988:	79bb      	ldrb	r3, [r7, #6]
 800f98a:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f98c:	f004 fda8 	bl	80144e0 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f990:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f994:	4618      	mov	r0, r3
 800f996:	f005 fbd3 	bl	8015140 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f99a:	e06b      	b.n	800fa74 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f99c:	2301      	movs	r3, #1
 800f99e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f9a2:	4b37      	ldr	r3, [pc, #220]	; (800fa80 <LmHandlerJoin+0x138>)
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f9a8:	4b34      	ldr	r3, [pc, #208]	; (800fa7c <LmHandlerJoin+0x134>)
 800f9aa:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f9ae:	4b34      	ldr	r3, [pc, #208]	; (800fa80 <LmHandlerJoin+0x138>)
 800f9b0:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f9b2:	4b32      	ldr	r3, [pc, #200]	; (800fa7c <LmHandlerJoin+0x134>)
 800f9b4:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f9b8:	4b31      	ldr	r3, [pc, #196]	; (800fa80 <LmHandlerJoin+0x138>)
 800f9ba:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f9bc:	4b30      	ldr	r3, [pc, #192]	; (800fa80 <LmHandlerJoin+0x138>)
 800f9be:	2200      	movs	r2, #0
 800f9c0:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f9c2:	4a2f      	ldr	r2, [pc, #188]	; (800fa80 <LmHandlerJoin+0x138>)
 800f9c4:	79bb      	ldrb	r3, [r7, #6]
 800f9c6:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f9c8:	4b2e      	ldr	r3, [pc, #184]	; (800fa84 <LmHandlerJoin+0x13c>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	f083 0301 	eor.w	r3, r3, #1
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d034      	beq.n	800fa40 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f9d6:	231e      	movs	r3, #30
 800f9d8:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f9da:	4b28      	ldr	r3, [pc, #160]	; (800fa7c <LmHandlerJoin+0x134>)
 800f9dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9e0:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9e2:	f107 030c 	add.w	r3, r7, #12
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f005 f816 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f9ec:	231f      	movs	r3, #31
 800f9ee:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f9f0:	4b22      	ldr	r3, [pc, #136]	; (800fa7c <LmHandlerJoin+0x134>)
 800f9f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9f6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9f8:	f107 030c 	add.w	r3, r7, #12
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f005 f80b 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800fa02:	2321      	movs	r3, #33	; 0x21
 800fa04:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800fa06:	4b1d      	ldr	r3, [pc, #116]	; (800fa7c <LmHandlerJoin+0x134>)
 800fa08:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa0c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa0e:	f107 030c 	add.w	r3, r7, #12
 800fa12:	4618      	mov	r0, r3
 800fa14:	f005 f800 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fa18:	2320      	movs	r3, #32
 800fa1a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800fa1c:	4b17      	ldr	r3, [pc, #92]	; (800fa7c <LmHandlerJoin+0x134>)
 800fa1e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa22:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa24:	f107 030c 	add.w	r3, r7, #12
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f004 fff5 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800fa2e:	2328      	movs	r3, #40	; 0x28
 800fa30:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800fa32:	4b15      	ldr	r3, [pc, #84]	; (800fa88 <LmHandlerJoin+0x140>)
 800fa34:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa36:	f107 030c 	add.w	r3, r7, #12
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f004 ffec 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800fa40:	f004 fd4e 	bl	80144e0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa44:	2301      	movs	r3, #1
 800fa46:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800fa4c:	f107 030c 	add.w	r3, r7, #12
 800fa50:	4618      	mov	r0, r3
 800fa52:	f004 ffe1 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fa56:	4b0d      	ldr	r3, [pc, #52]	; (800fa8c <LmHandlerJoin+0x144>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d004      	beq.n	800fa6a <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fa60:	4b0a      	ldr	r3, [pc, #40]	; (800fa8c <LmHandlerJoin+0x144>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa66:	4806      	ldr	r0, [pc, #24]	; (800fa80 <LmHandlerJoin+0x138>)
 800fa68:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fa6a:	4b04      	ldr	r3, [pc, #16]	; (800fa7c <LmHandlerJoin+0x134>)
 800fa6c:	785b      	ldrb	r3, [r3, #1]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 f932 	bl	800fcd8 <LmHandlerRequestClass>
}
 800fa74:	bf00      	nop
 800fa76:	3748      	adds	r7, #72	; 0x48
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	2000080c 	.word	0x2000080c
 800fa80:	200000b0 	.word	0x200000b0
 800fa84:	20000946 	.word	0x20000946
 800fa88:	01000300 	.word	0x01000300
 800fa8c:	20000824 	.word	0x20000824

0800fa90 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b08c      	sub	sp, #48	; 0x30
 800fa94:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa96:	2301      	movs	r3, #1
 800fa98:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800fa9a:	1d3b      	adds	r3, r7, #4
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f004 fe05 	bl	80146ac <LoRaMacMibGetRequestConfirm>
 800faa2:	4603      	mov	r3, r0
 800faa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800faa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800faac:	2b00      	cmp	r3, #0
 800faae:	d106      	bne.n	800fabe <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fab0:	7a3b      	ldrb	r3, [r7, #8]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d101      	bne.n	800faba <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800fab6:	2300      	movs	r3, #0
 800fab8:	e002      	b.n	800fac0 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800faba:	2301      	movs	r3, #1
 800fabc:	e000      	b.n	800fac0 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800fabe:	2300      	movs	r3, #0
    }
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3730      	adds	r7, #48	; 0x30
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b08a      	sub	sp, #40	; 0x28
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	460b      	mov	r3, r1
 800fad2:	70fb      	strb	r3, [r7, #3]
 800fad4:	4613      	mov	r3, r2
 800fad6:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fad8:	23ff      	movs	r3, #255	; 0xff
 800fada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800fade:	f001 ffe3 	bl	8011aa8 <LoRaMacIsBusy>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fae8:	f06f 0301 	mvn.w	r3, #1
 800faec:	e0be      	b.n	800fc6c <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800faee:	f001 fff7 	bl	8011ae0 <LoRaMacIsStopped>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800faf8:	f06f 0302 	mvn.w	r3, #2
 800fafc:	e0b6      	b.n	800fc6c <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fafe:	f7ff ffc7 	bl	800fa90 <LmHandlerJoinStatus>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d00a      	beq.n	800fb1e <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800fb08:	4b5a      	ldr	r3, [pc, #360]	; (800fc74 <LmHandlerSend+0x1ac>)
 800fb0a:	79db      	ldrb	r3, [r3, #7]
 800fb0c:	4a59      	ldr	r2, [pc, #356]	; (800fc74 <LmHandlerSend+0x1ac>)
 800fb0e:	7a12      	ldrb	r2, [r2, #8]
 800fb10:	4611      	mov	r1, r2
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff ff18 	bl	800f948 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb18:	f06f 0302 	mvn.w	r3, #2
 800fb1c:	e0a6      	b.n	800fc6c <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800fb1e:	4b56      	ldr	r3, [pc, #344]	; (800fc78 <LmHandlerSend+0x1b0>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	4798      	blx	r3
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00d      	beq.n	800fb48 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	781a      	ldrb	r2, [r3, #0]
 800fb30:	4b51      	ldr	r3, [pc, #324]	; (800fc78 <LmHandlerSend+0x1b0>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d006      	beq.n	800fb48 <LmHandlerSend+0x80>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d002      	beq.n	800fb48 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fb42:	f06f 0303 	mvn.w	r3, #3
 800fb46:	e091      	b.n	800fc6c <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fb48:	4a4c      	ldr	r2, [pc, #304]	; (800fc7c <LmHandlerSend+0x1b4>)
 800fb4a:	78fb      	ldrb	r3, [r7, #3]
 800fb4c:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fb4e:	78fb      	ldrb	r3, [r7, #3]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	bf14      	ite	ne
 800fb54:	2301      	movne	r3, #1
 800fb56:	2300      	moveq	r3, #0
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fb5c:	4b48      	ldr	r3, [pc, #288]	; (800fc80 <LmHandlerSend+0x1b8>)
 800fb5e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb62:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	785b      	ldrb	r3, [r3, #1]
 800fb68:	f107 020c 	add.w	r2, r7, #12
 800fb6c:	4611      	mov	r1, r2
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f004 fd16 	bl	80145a0 <LoRaMacQueryTxPossible>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d009      	beq.n	800fb8e <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fb86:	23f9      	movs	r3, #249	; 0xf9
 800fb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb8c:	e009      	b.n	800fba2 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fba2:	4b36      	ldr	r3, [pc, #216]	; (800fc7c <LmHandlerSend+0x1b4>)
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	3310      	adds	r3, #16
 800fba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbac:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fbb0:	4b33      	ldr	r3, [pc, #204]	; (800fc80 <LmHandlerSend+0x1b8>)
 800fbb2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fbb6:	4b31      	ldr	r3, [pc, #196]	; (800fc7c <LmHandlerSend+0x1b4>)
 800fbb8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fbba:	78ba      	ldrb	r2, [r7, #2]
 800fbbc:	f107 0310 	add.w	r3, r7, #16
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f005 fc0e 	bl	80153e4 <LoRaMacMcpsRequest>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fbce:	6a3b      	ldr	r3, [r7, #32]
 800fbd0:	4a2c      	ldr	r2, [pc, #176]	; (800fc84 <LmHandlerSend+0x1bc>)
 800fbd2:	6013      	str	r3, [r2, #0]

    switch( status )
 800fbd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbd8:	2b11      	cmp	r3, #17
 800fbda:	d840      	bhi.n	800fc5e <LmHandlerSend+0x196>
 800fbdc:	a201      	add	r2, pc, #4	; (adr r2, 800fbe4 <LmHandlerSend+0x11c>)
 800fbde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe2:	bf00      	nop
 800fbe4:	0800fc2d 	.word	0x0800fc2d
 800fbe8:	0800fc3f 	.word	0x0800fc3f
 800fbec:	0800fc5f 	.word	0x0800fc5f
 800fbf0:	0800fc5f 	.word	0x0800fc5f
 800fbf4:	0800fc5f 	.word	0x0800fc5f
 800fbf8:	0800fc5f 	.word	0x0800fc5f
 800fbfc:	0800fc5f 	.word	0x0800fc5f
 800fc00:	0800fc47 	.word	0x0800fc47
 800fc04:	0800fc5f 	.word	0x0800fc5f
 800fc08:	0800fc5f 	.word	0x0800fc5f
 800fc0c:	0800fc5f 	.word	0x0800fc5f
 800fc10:	0800fc57 	.word	0x0800fc57
 800fc14:	0800fc5f 	.word	0x0800fc5f
 800fc18:	0800fc5f 	.word	0x0800fc5f
 800fc1c:	0800fc3f 	.word	0x0800fc3f
 800fc20:	0800fc3f 	.word	0x0800fc3f
 800fc24:	0800fc3f 	.word	0x0800fc3f
 800fc28:	0800fc4f 	.word	0x0800fc4f
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fc2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc30:	f113 0f07 	cmn.w	r3, #7
 800fc34:	d017      	beq.n	800fc66 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fc36:	2300      	movs	r3, #0
 800fc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fc3c:	e013      	b.n	800fc66 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fc3e:	23fe      	movs	r3, #254	; 0xfe
 800fc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc44:	e010      	b.n	800fc68 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc46:	23fd      	movs	r3, #253	; 0xfd
 800fc48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc4c:	e00c      	b.n	800fc68 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fc4e:	23fb      	movs	r3, #251	; 0xfb
 800fc50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc54:	e008      	b.n	800fc68 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fc56:	23fa      	movs	r3, #250	; 0xfa
 800fc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc5c:	e004      	b.n	800fc68 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fc5e:	23ff      	movs	r3, #255	; 0xff
 800fc60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc64:	e000      	b.n	800fc68 <LmHandlerSend+0x1a0>
            break;
 800fc66:	bf00      	nop
    }

    return lmhStatus;
 800fc68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3728      	adds	r7, #40	; 0x28
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	200000b0 	.word	0x200000b0
 800fc78:	200007f8 	.word	0x200007f8
 800fc7c:	200000bc 	.word	0x200000bc
 800fc80:	2000080c 	.word	0x2000080c
 800fc84:	20000850 	.word	0x20000850

0800fc88 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b086      	sub	sp, #24
 800fc8c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fc8e:	230a      	movs	r3, #10
 800fc90:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fc92:	463b      	mov	r3, r7
 800fc94:	4618      	mov	r0, r3
 800fc96:	f005 fa53 	bl	8015140 <LoRaMacMlmeRequest>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	4a06      	ldr	r2, [pc, #24]	; (800fcbc <LmHandlerDeviceTimeReq+0x34>)
 800fca2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fca4:	7dfb      	ldrb	r3, [r7, #23]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d101      	bne.n	800fcae <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e001      	b.n	800fcb2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fcae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3718      	adds	r7, #24
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	20000850 	.word	0x20000850

0800fcc0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fcca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bc80      	pop	{r7}
 800fcd6:	4770      	bx	lr

0800fcd8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b08e      	sub	sp, #56	; 0x38
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	4603      	mov	r3, r0
 800fce0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fce2:	2300      	movs	r3, #0
 800fce4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fce8:	f001 fede 	bl	8011aa8 <LoRaMacIsBusy>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d002      	beq.n	800fcf8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fcf2:	f06f 0301 	mvn.w	r3, #1
 800fcf6:	e071      	b.n	800fddc <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fcf8:	f7ff feca 	bl	800fa90 <LmHandlerJoinStatus>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d002      	beq.n	800fd08 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fd02:	f06f 0302 	mvn.w	r3, #2
 800fd06:	e069      	b.n	800fddc <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd0c:	f107 030c 	add.w	r3, r7, #12
 800fd10:	4618      	mov	r0, r3
 800fd12:	f004 fccb 	bl	80146ac <LoRaMacMibGetRequestConfirm>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd20:	e05c      	b.n	800fddc <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fd22:	7c3b      	ldrb	r3, [r7, #16]
 800fd24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fd28:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd2c:	79fb      	ldrb	r3, [r7, #7]
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d052      	beq.n	800fdd8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	d028      	beq.n	800fd8a <LmHandlerRequestClass+0xb2>
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	dc48      	bgt.n	800fdce <LmHandlerRequestClass+0xf6>
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <LmHandlerRequestClass+0x6e>
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d01e      	beq.n	800fd82 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fd44:	e043      	b.n	800fdce <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fd46:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d041      	beq.n	800fdd2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fd4e:	79fb      	ldrb	r3, [r7, #7]
 800fd50:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd52:	f107 030c 	add.w	r3, r7, #12
 800fd56:	4618      	mov	r0, r3
 800fd58:	f004 fe5e 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d10b      	bne.n	800fd7a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd62:	4b20      	ldr	r3, [pc, #128]	; (800fde4 <LmHandlerRequestClass+0x10c>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d032      	beq.n	800fdd2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd6c:	4b1d      	ldr	r3, [pc, #116]	; (800fde4 <LmHandlerRequestClass+0x10c>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd72:	79fa      	ldrb	r2, [r7, #7]
 800fd74:	4610      	mov	r0, r2
 800fd76:	4798      	blx	r3
                break;
 800fd78:	e02b      	b.n	800fdd2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fd7a:	23ff      	movs	r3, #255	; 0xff
 800fd7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd80:	e027      	b.n	800fdd2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fd82:	23ff      	movs	r3, #255	; 0xff
 800fd84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd88:	e026      	b.n	800fdd8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fd8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fd92:	23ff      	movs	r3, #255	; 0xff
 800fd94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd98:	e01d      	b.n	800fdd6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fd9a:	79fb      	ldrb	r3, [r7, #7]
 800fd9c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd9e:	f107 030c 	add.w	r3, r7, #12
 800fda2:	4618      	mov	r0, r3
 800fda4:	f004 fe38 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d10b      	bne.n	800fdc6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fdae:	4b0d      	ldr	r3, [pc, #52]	; (800fde4 <LmHandlerRequestClass+0x10c>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00e      	beq.n	800fdd6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fdb8:	4b0a      	ldr	r3, [pc, #40]	; (800fde4 <LmHandlerRequestClass+0x10c>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdbe:	79fa      	ldrb	r2, [r7, #7]
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	4798      	blx	r3
                break;
 800fdc4:	e007      	b.n	800fdd6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fdc6:	23ff      	movs	r3, #255	; 0xff
 800fdc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdcc:	e003      	b.n	800fdd6 <LmHandlerRequestClass+0xfe>
                break;
 800fdce:	bf00      	nop
 800fdd0:	e002      	b.n	800fdd8 <LmHandlerRequestClass+0x100>
                break;
 800fdd2:	bf00      	nop
 800fdd4:	e000      	b.n	800fdd8 <LmHandlerRequestClass+0x100>
                break;
 800fdd6:	bf00      	nop
        }
    }
    return errorStatus;
 800fdd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3738      	adds	r7, #56	; 0x38
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	20000824 	.word	0x20000824

0800fde8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b08c      	sub	sp, #48	; 0x30
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d102      	bne.n	800fdfc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdfa:	e010      	b.n	800fe1e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe00:	f107 0308 	add.w	r3, r7, #8
 800fe04:	4618      	mov	r0, r3
 800fe06:	f004 fc51 	bl	80146ac <LoRaMacMibGetRequestConfirm>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe10:	f04f 33ff 	mov.w	r3, #4294967295
 800fe14:	e003      	b.n	800fe1e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fe16:	7b3a      	ldrb	r2, [r7, #12]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fe1c:	2300      	movs	r3, #0
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3730      	adds	r7, #48	; 0x30
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
	...

0800fe28 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b08c      	sub	sp, #48	; 0x30
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d102      	bne.n	800fe3c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe36:	f04f 33ff 	mov.w	r3, #4294967295
 800fe3a:	e016      	b.n	800fe6a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fe3c:	231f      	movs	r3, #31
 800fe3e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fe40:	f107 0308 	add.w	r3, r7, #8
 800fe44:	4618      	mov	r0, r3
 800fe46:	f004 fc31 	bl	80146ac <LoRaMacMibGetRequestConfirm>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe50:	f04f 33ff 	mov.w	r3, #4294967295
 800fe54:	e009      	b.n	800fe6a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fe56:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f993 2000 	ldrsb.w	r2, [r3]
 800fe64:	4b03      	ldr	r3, [pc, #12]	; (800fe74 <LmHandlerGetTxDatarate+0x4c>)
 800fe66:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fe68:	2300      	movs	r3, #0
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3730      	adds	r7, #48	; 0x30
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	2000080c 	.word	0x2000080c

0800fe78 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b08c      	sub	sp, #48	; 0x30
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fe80:	2322      	movs	r3, #34	; 0x22
 800fe82:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe88:	f107 0308 	add.w	r3, r7, #8
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f004 fdc3 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d002      	beq.n	800fe9e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe98:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9c:	e000      	b.n	800fea0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fe9e:	2300      	movs	r3, #0
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3730      	adds	r7, #48	; 0x30
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800feb0:	4b18      	ldr	r3, [pc, #96]	; (800ff14 <McpsConfirm+0x6c>)
 800feb2:	2201      	movs	r2, #1
 800feb4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	785a      	ldrb	r2, [r3, #1]
 800feba:	4b16      	ldr	r3, [pc, #88]	; (800ff14 <McpsConfirm+0x6c>)
 800febc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	789b      	ldrb	r3, [r3, #2]
 800fec2:	b25a      	sxtb	r2, r3
 800fec4:	4b13      	ldr	r3, [pc, #76]	; (800ff14 <McpsConfirm+0x6c>)
 800fec6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	4a11      	ldr	r2, [pc, #68]	; (800ff14 <McpsConfirm+0x6c>)
 800fece:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fed6:	4b0f      	ldr	r3, [pc, #60]	; (800ff14 <McpsConfirm+0x6c>)
 800fed8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	691b      	ldr	r3, [r3, #16]
 800fede:	b2da      	uxtb	r2, r3
 800fee0:	4b0c      	ldr	r3, [pc, #48]	; (800ff14 <McpsConfirm+0x6c>)
 800fee2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	791b      	ldrb	r3, [r3, #4]
 800fee8:	461a      	mov	r2, r3
 800feea:	4b0a      	ldr	r3, [pc, #40]	; (800ff14 <McpsConfirm+0x6c>)
 800feec:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800feee:	4b0a      	ldr	r3, [pc, #40]	; (800ff18 <McpsConfirm+0x70>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d004      	beq.n	800ff02 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fef8:	4b07      	ldr	r3, [pc, #28]	; (800ff18 <McpsConfirm+0x70>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fefe:	4805      	ldr	r0, [pc, #20]	; (800ff14 <McpsConfirm+0x6c>)
 800ff00:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ff02:	6879      	ldr	r1, [r7, #4]
 800ff04:	2000      	movs	r0, #0
 800ff06:	f000 f9eb 	bl	80102e0 <LmHandlerPackagesNotify>
}
 800ff0a:	bf00      	nop
 800ff0c:	3708      	adds	r7, #8
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	200000bc 	.word	0x200000bc
 800ff18:	20000824 	.word	0x20000824

0800ff1c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b088      	sub	sp, #32
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ff26:	2300      	movs	r3, #0
 800ff28:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ff2a:	4b32      	ldr	r3, [pc, #200]	; (800fff4 <McpsIndication+0xd8>)
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	785a      	ldrb	r2, [r3, #1]
 800ff34:	4b2f      	ldr	r3, [pc, #188]	; (800fff4 <McpsIndication+0xd8>)
 800ff36:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ff38:	4b2e      	ldr	r3, [pc, #184]	; (800fff4 <McpsIndication+0xd8>)
 800ff3a:	785b      	ldrb	r3, [r3, #1]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d155      	bne.n	800ffec <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	791b      	ldrb	r3, [r3, #4]
 800ff44:	b25a      	sxtb	r2, r3
 800ff46:	4b2b      	ldr	r3, [pc, #172]	; (800fff4 <McpsIndication+0xd8>)
 800ff48:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff50:	b25a      	sxtb	r2, r3
 800ff52:	4b28      	ldr	r3, [pc, #160]	; (800fff4 <McpsIndication+0xd8>)
 800ff54:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ff5c:	4b25      	ldr	r3, [pc, #148]	; (800fff4 <McpsIndication+0xd8>)
 800ff5e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	78da      	ldrb	r2, [r3, #3]
 800ff64:	4b23      	ldr	r3, [pc, #140]	; (800fff4 <McpsIndication+0xd8>)
 800ff66:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	4a21      	ldr	r2, [pc, #132]	; (800fff4 <McpsIndication+0xd8>)
 800ff6e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	78db      	ldrb	r3, [r3, #3]
 800ff74:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	7b1b      	ldrb	r3, [r3, #12]
 800ff7a:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	689b      	ldr	r3, [r3, #8]
 800ff80:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ff82:	4b1d      	ldr	r3, [pc, #116]	; (800fff8 <McpsIndication+0xdc>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d007      	beq.n	800ff9c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ff8c:	4b1a      	ldr	r3, [pc, #104]	; (800fff8 <McpsIndication+0xdc>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff92:	f107 0218 	add.w	r2, r7, #24
 800ff96:	4917      	ldr	r1, [pc, #92]	; (800fff4 <McpsIndication+0xd8>)
 800ff98:	4610      	mov	r0, r2
 800ff9a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ff9c:	4b16      	ldr	r3, [pc, #88]	; (800fff8 <McpsIndication+0xdc>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d007      	beq.n	800ffb6 <McpsIndication+0x9a>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	7e1b      	ldrb	r3, [r3, #24]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d003      	beq.n	800ffb6 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ffae:	4b12      	ldr	r3, [pc, #72]	; (800fff8 <McpsIndication+0xdc>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb4:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ffb6:	6879      	ldr	r1, [r7, #4]
 800ffb8:	2001      	movs	r0, #1
 800ffba:	f000 f991 	bl	80102e0 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ffbe:	f107 0317 	add.w	r3, r7, #23
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7ff ff10 	bl	800fde8 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	795b      	ldrb	r3, [r3, #5]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00e      	beq.n	800ffee <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	733b      	strb	r3, [r7, #12]
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	737b      	strb	r3, [r7, #13]
 800ffd8:	2300      	movs	r3, #0
 800ffda:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ffdc:	f107 030c 	add.w	r3, r7, #12
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	2100      	movs	r1, #0
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f7ff fd6f 	bl	800fac8 <LmHandlerSend>
 800ffea:	e000      	b.n	800ffee <McpsIndication+0xd2>
        return;
 800ffec:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ffee:	3720      	adds	r7, #32
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	200000d8 	.word	0x200000d8
 800fff8:	20000824 	.word	0x20000824

0800fffc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b08c      	sub	sp, #48	; 0x30
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8010004:	4b4a      	ldr	r3, [pc, #296]	; (8010130 <MlmeConfirm+0x134>)
 8010006:	2200      	movs	r2, #0
 8010008:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	785a      	ldrb	r2, [r3, #1]
 801000e:	4b48      	ldr	r3, [pc, #288]	; (8010130 <MlmeConfirm+0x134>)
 8010010:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8010012:	4b48      	ldr	r3, [pc, #288]	; (8010134 <MlmeConfirm+0x138>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010018:	2b00      	cmp	r3, #0
 801001a:	d004      	beq.n	8010026 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 801001c:	4b45      	ldr	r3, [pc, #276]	; (8010134 <MlmeConfirm+0x138>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010022:	4843      	ldr	r0, [pc, #268]	; (8010130 <MlmeConfirm+0x134>)
 8010024:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010026:	6879      	ldr	r1, [r7, #4]
 8010028:	2002      	movs	r0, #2
 801002a:	f000 f959 	bl	80102e0 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	3b01      	subs	r3, #1
 8010034:	2b0c      	cmp	r3, #12
 8010036:	d874      	bhi.n	8010122 <MlmeConfirm+0x126>
 8010038:	a201      	add	r2, pc, #4	; (adr r2, 8010040 <MlmeConfirm+0x44>)
 801003a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003e:	bf00      	nop
 8010040:	08010075 	.word	0x08010075
 8010044:	08010123 	.word	0x08010123
 8010048:	08010123 	.word	0x08010123
 801004c:	08010123 	.word	0x08010123
 8010050:	080100f1 	.word	0x080100f1
 8010054:	08010123 	.word	0x08010123
 8010058:	08010123 	.word	0x08010123
 801005c:	08010123 	.word	0x08010123
 8010060:	08010123 	.word	0x08010123
 8010064:	08010123 	.word	0x08010123
 8010068:	08010123 	.word	0x08010123
 801006c:	08010109 	.word	0x08010109
 8010070:	08010123 	.word	0x08010123
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8010074:	2306      	movs	r3, #6
 8010076:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8010078:	f107 0308 	add.w	r3, r7, #8
 801007c:	4618      	mov	r0, r3
 801007e:	f004 fb15 	bl	80146ac <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8010082:	4b2d      	ldr	r3, [pc, #180]	; (8010138 <MlmeConfirm+0x13c>)
 8010084:	79db      	ldrb	r3, [r3, #7]
 8010086:	68fa      	ldr	r2, [r7, #12]
 8010088:	4611      	mov	r1, r2
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff faf6 	bl	800f67c <SecureElementSetDevAddr>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d102      	bne.n	801009c <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	4a28      	ldr	r2, [pc, #160]	; (801013c <MlmeConfirm+0x140>)
 801009a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 801009c:	4828      	ldr	r0, [pc, #160]	; (8010140 <MlmeConfirm+0x144>)
 801009e:	f7ff fec3 	bl	800fe28 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80100a2:	4828      	ldr	r0, [pc, #160]	; (8010144 <MlmeConfirm+0x148>)
 80100a4:	f000 fa4e 	bl	8010544 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100a8:	4b21      	ldr	r3, [pc, #132]	; (8010130 <MlmeConfirm+0x134>)
 80100aa:	785b      	ldrb	r3, [r3, #1]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d108      	bne.n	80100c2 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80100b0:	4b21      	ldr	r3, [pc, #132]	; (8010138 <MlmeConfirm+0x13c>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80100b6:	4b24      	ldr	r3, [pc, #144]	; (8010148 <MlmeConfirm+0x14c>)
 80100b8:	785b      	ldrb	r3, [r3, #1]
 80100ba:	4618      	mov	r0, r3
 80100bc:	f7ff fe0c 	bl	800fcd8 <LmHandlerRequestClass>
 80100c0:	e002      	b.n	80100c8 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80100c2:	4b1d      	ldr	r3, [pc, #116]	; (8010138 <MlmeConfirm+0x13c>)
 80100c4:	22ff      	movs	r2, #255	; 0xff
 80100c6:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80100c8:	4b1a      	ldr	r3, [pc, #104]	; (8010134 <MlmeConfirm+0x138>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d004      	beq.n	80100dc <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80100d2:	4b18      	ldr	r3, [pc, #96]	; (8010134 <MlmeConfirm+0x138>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d8:	4817      	ldr	r0, [pc, #92]	; (8010138 <MlmeConfirm+0x13c>)
 80100da:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100dc:	4b14      	ldr	r3, [pc, #80]	; (8010130 <MlmeConfirm+0x134>)
 80100de:	785b      	ldrb	r3, [r3, #1]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d120      	bne.n	8010126 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80100e4:	4b14      	ldr	r3, [pc, #80]	; (8010138 <MlmeConfirm+0x13c>)
 80100e6:	79db      	ldrb	r3, [r3, #7]
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff f859 	bl	800f1a0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 80100ee:	e01a      	b.n	8010126 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 80100f0:	4b16      	ldr	r3, [pc, #88]	; (801014c <MlmeConfirm+0x150>)
 80100f2:	2201      	movs	r2, #1
 80100f4:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	7a1a      	ldrb	r2, [r3, #8]
 80100fa:	4b14      	ldr	r3, [pc, #80]	; (801014c <MlmeConfirm+0x150>)
 80100fc:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	7a5a      	ldrb	r2, [r3, #9]
 8010102:	4b12      	ldr	r3, [pc, #72]	; (801014c <MlmeConfirm+0x150>)
 8010104:	74da      	strb	r2, [r3, #19]
            }
            break;
 8010106:	e00f      	b.n	8010128 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	785b      	ldrb	r3, [r3, #1]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d105      	bne.n	801011c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010110:	4b0d      	ldr	r3, [pc, #52]	; (8010148 <MlmeConfirm+0x14c>)
 8010112:	7c1b      	ldrb	r3, [r3, #16]
 8010114:	4618      	mov	r0, r3
 8010116:	f7ff fdd3 	bl	800fcc0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801011a:	e005      	b.n	8010128 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 801011c:	f7ff fdb4 	bl	800fc88 <LmHandlerDeviceTimeReq>
            break;
 8010120:	e002      	b.n	8010128 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010122:	bf00      	nop
 8010124:	e000      	b.n	8010128 <MlmeConfirm+0x12c>
            break;
 8010126:	bf00      	nop
    }
}
 8010128:	bf00      	nop
 801012a:	3730      	adds	r7, #48	; 0x30
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	200000bc 	.word	0x200000bc
 8010134:	20000824 	.word	0x20000824
 8010138:	200000b0 	.word	0x200000b0
 801013c:	200007e0 	.word	0x200007e0
 8010140:	200000b4 	.word	0x200000b4
 8010144:	200000b5 	.word	0x200000b5
 8010148:	2000080c 	.word	0x2000080c
 801014c:	200000d8 	.word	0x200000d8

08010150 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801015a:	4b20      	ldr	r3, [pc, #128]	; (80101dc <MlmeIndication+0x8c>)
 801015c:	2200      	movs	r2, #0
 801015e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	785a      	ldrb	r2, [r3, #1]
 8010164:	4b1d      	ldr	r3, [pc, #116]	; (80101dc <MlmeIndication+0x8c>)
 8010166:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	789b      	ldrb	r3, [r3, #2]
 801016c:	b25a      	sxtb	r2, r3
 801016e:	4b1b      	ldr	r3, [pc, #108]	; (80101dc <MlmeIndication+0x8c>)
 8010170:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010178:	b25a      	sxtb	r2, r3
 801017a:	4b18      	ldr	r3, [pc, #96]	; (80101dc <MlmeIndication+0x8c>)
 801017c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010184:	4b15      	ldr	r3, [pc, #84]	; (80101dc <MlmeIndication+0x8c>)
 8010186:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	78da      	ldrb	r2, [r3, #3]
 801018c:	4b13      	ldr	r3, [pc, #76]	; (80101dc <MlmeIndication+0x8c>)
 801018e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	4a11      	ldr	r2, [pc, #68]	; (80101dc <MlmeIndication+0x8c>)
 8010196:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8010198:	4b11      	ldr	r3, [pc, #68]	; (80101e0 <MlmeIndication+0x90>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00d      	beq.n	80101be <MlmeIndication+0x6e>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2b0b      	cmp	r3, #11
 80101a8:	d009      	beq.n	80101be <MlmeIndication+0x6e>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	2b0f      	cmp	r3, #15
 80101b0:	d005      	beq.n	80101be <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80101b2:	4b0b      	ldr	r3, [pc, #44]	; (80101e0 <MlmeIndication+0x90>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b8:	4908      	ldr	r1, [pc, #32]	; (80101dc <MlmeIndication+0x8c>)
 80101ba:	2000      	movs	r0, #0
 80101bc:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80101be:	6879      	ldr	r1, [r7, #4]
 80101c0:	2003      	movs	r0, #3
 80101c2:	f000 f88d 	bl	80102e0 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	2b0b      	cmp	r3, #11
 80101cc:	d001      	beq.n	80101d2 <MlmeIndication+0x82>
 80101ce:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80101d0:	e000      	b.n	80101d4 <MlmeIndication+0x84>
            break;
 80101d2:	bf00      	nop
    }
}
 80101d4:	bf00      	nop
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	200000d8 	.word	0x200000d8
 80101e0:	20000824 	.word	0x20000824

080101e4 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	4603      	mov	r3, r0
 80101ec:	6039      	str	r1, [r7, #0]
 80101ee:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 80101f0:	2300      	movs	r3, #0
 80101f2:	60fb      	str	r3, [r7, #12]
    switch( id )
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d104      	bne.n	8010204 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 80101fa:	f000 f9dd 	bl	80105b8 <LmhpCompliancePackageFactory>
 80101fe:	4603      	mov	r3, r0
 8010200:	60fb      	str	r3, [r7, #12]
                break;
 8010202:	e00d      	b.n	8010220 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8010204:	f107 020c 	add.w	r2, r7, #12
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	4611      	mov	r1, r2
 801020c:	4618      	mov	r0, r3
 801020e:	f000 fce9 	bl	8010be4 <LmhpPackagesRegister>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d002      	beq.n	801021e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8010218:	f04f 33ff 	mov.w	r3, #4294967295
 801021c:	e031      	b.n	8010282 <LmHandlerPackageRegister+0x9e>
                }
                break;
 801021e:	bf00      	nop
            }
    }
    if( package != NULL )
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d02b      	beq.n	801027e <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8010226:	79fb      	ldrb	r3, [r7, #7]
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	4918      	ldr	r1, [pc, #96]	; (801028c <LmHandlerPackageRegister+0xa8>)
 801022c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010230:	79fb      	ldrb	r3, [r7, #7]
 8010232:	4a16      	ldr	r2, [pc, #88]	; (801028c <LmHandlerPackageRegister+0xa8>)
 8010234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010238:	4a15      	ldr	r2, [pc, #84]	; (8010290 <LmHandlerPackageRegister+0xac>)
 801023a:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 801023c:	79fb      	ldrb	r3, [r7, #7]
 801023e:	4a13      	ldr	r2, [pc, #76]	; (801028c <LmHandlerPackageRegister+0xa8>)
 8010240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010244:	4a13      	ldr	r2, [pc, #76]	; (8010294 <LmHandlerPackageRegister+0xb0>)
 8010246:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8010248:	79fb      	ldrb	r3, [r7, #7]
 801024a:	4a10      	ldr	r2, [pc, #64]	; (801028c <LmHandlerPackageRegister+0xa8>)
 801024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010250:	4a11      	ldr	r2, [pc, #68]	; (8010298 <LmHandlerPackageRegister+0xb4>)
 8010252:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010254:	4b11      	ldr	r3, [pc, #68]	; (801029c <LmHandlerPackageRegister+0xb8>)
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	79fb      	ldrb	r3, [r7, #7]
 801025a:	490c      	ldr	r1, [pc, #48]	; (801028c <LmHandlerPackageRegister+0xa8>)
 801025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010260:	6992      	ldr	r2, [r2, #24]
 8010262:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010264:	79fb      	ldrb	r3, [r7, #7]
 8010266:	4a09      	ldr	r2, [pc, #36]	; (801028c <LmHandlerPackageRegister+0xa8>)
 8010268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	4a0c      	ldr	r2, [pc, #48]	; (80102a0 <LmHandlerPackageRegister+0xbc>)
 8010270:	6851      	ldr	r1, [r2, #4]
 8010272:	4a0b      	ldr	r2, [pc, #44]	; (80102a0 <LmHandlerPackageRegister+0xbc>)
 8010274:	7852      	ldrb	r2, [r2, #1]
 8010276:	6838      	ldr	r0, [r7, #0]
 8010278:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 801027a:	2300      	movs	r3, #0
 801027c:	e001      	b.n	8010282 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 801027e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	200007f8 	.word	0x200007f8
 8010290:	0800f949 	.word	0x0800f949
 8010294:	0800fac9 	.word	0x0800fac9
 8010298:	0800fc89 	.word	0x0800fc89
 801029c:	20000824 	.word	0x20000824
 80102a0:	200000ec 	.word	0x200000ec

080102a4 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	4603      	mov	r3, r0
 80102ac:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	2b04      	cmp	r3, #4
 80102b2:	d80e      	bhi.n	80102d2 <LmHandlerPackageIsInitialized+0x2e>
 80102b4:	79fb      	ldrb	r3, [r7, #7]
 80102b6:	4a09      	ldr	r2, [pc, #36]	; (80102dc <LmHandlerPackageIsInitialized+0x38>)
 80102b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d007      	beq.n	80102d2 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80102c2:	79fb      	ldrb	r3, [r7, #7]
 80102c4:	4a05      	ldr	r2, [pc, #20]	; (80102dc <LmHandlerPackageIsInitialized+0x38>)
 80102c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	4798      	blx	r3
 80102ce:	4603      	mov	r3, r0
 80102d0:	e000      	b.n	80102d4 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80102d2:	2300      	movs	r3, #0
    }
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	200007f8 	.word	0x200007f8

080102e0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	4603      	mov	r3, r0
 80102e8:	6039      	str	r1, [r7, #0]
 80102ea:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80102ec:	2300      	movs	r3, #0
 80102ee:	73fb      	strb	r3, [r7, #15]
 80102f0:	e07c      	b.n	80103ec <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 80102f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102f6:	4a42      	ldr	r2, [pc, #264]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 80102f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d06f      	beq.n	80103e0 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 8010300:	79fb      	ldrb	r3, [r7, #7]
 8010302:	2b03      	cmp	r3, #3
 8010304:	d863      	bhi.n	80103ce <LmHandlerPackagesNotify+0xee>
 8010306:	a201      	add	r2, pc, #4	; (adr r2, 801030c <LmHandlerPackagesNotify+0x2c>)
 8010308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030c:	0801031d 	.word	0x0801031d
 8010310:	0801033f 	.word	0x0801033f
 8010314:	0801038b 	.word	0x0801038b
 8010318:	080103ad 	.word	0x080103ad
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 801031c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010320:	4a37      	ldr	r2, [pc, #220]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 8010322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010326:	69db      	ldr	r3, [r3, #28]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d052      	beq.n	80103d2 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 801032c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010330:	4a33      	ldr	r2, [pc, #204]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 8010332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	6838      	ldr	r0, [r7, #0]
 801033a:	4798      	blx	r3
                        }
                        break;
 801033c:	e049      	b.n	80103d2 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801033e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010342:	4a2f      	ldr	r2, [pc, #188]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 8010344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010348:	6a1b      	ldr	r3, [r3, #32]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d043      	beq.n	80103d6 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 801034e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010352:	4a2b      	ldr	r2, [pc, #172]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 8010354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010358:	781a      	ldrb	r2, [r3, #0]
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801035e:	429a      	cmp	r2, r3
 8010360:	d00a      	beq.n	8010378 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8010362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d135      	bne.n	80103d6 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 801036a:	4b25      	ldr	r3, [pc, #148]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	68db      	ldr	r3, [r3, #12]
 8010370:	4798      	blx	r3
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d02e      	beq.n	80103d6 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8010378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801037c:	4a20      	ldr	r2, [pc, #128]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 801037e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010382:	6a1b      	ldr	r3, [r3, #32]
 8010384:	6838      	ldr	r0, [r7, #0]
 8010386:	4798      	blx	r3
                        }
                        break;
 8010388:	e025      	b.n	80103d6 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 801038a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801038e:	4a1c      	ldr	r2, [pc, #112]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 8010390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010396:	2b00      	cmp	r3, #0
 8010398:	d01f      	beq.n	80103da <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 801039a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801039e:	4a18      	ldr	r2, [pc, #96]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 80103a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103a6:	6838      	ldr	r0, [r7, #0]
 80103a8:	4798      	blx	r3
                        }
                        break;
 80103aa:	e016      	b.n	80103da <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80103ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103b0:	4a13      	ldr	r2, [pc, #76]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 80103b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d010      	beq.n	80103de <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80103bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c0:	4a0f      	ldr	r2, [pc, #60]	; (8010400 <LmHandlerPackagesNotify+0x120>)
 80103c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103c8:	6838      	ldr	r0, [r7, #0]
 80103ca:	4798      	blx	r3
                        }
                        break;
 80103cc:	e007      	b.n	80103de <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 80103ce:	bf00      	nop
 80103d0:	e006      	b.n	80103e0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103d2:	bf00      	nop
 80103d4:	e004      	b.n	80103e0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103d6:	bf00      	nop
 80103d8:	e002      	b.n	80103e0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103da:	bf00      	nop
 80103dc:	e000      	b.n	80103e0 <LmHandlerPackagesNotify+0x100>
                        break;
 80103de:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	3301      	adds	r3, #1
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	73fb      	strb	r3, [r7, #15]
 80103ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103f0:	2b04      	cmp	r3, #4
 80103f2:	f77f af7e 	ble.w	80102f2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80103f6:	bf00      	nop
 80103f8:	bf00      	nop
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	200007f8 	.word	0x200007f8

08010404 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801040a:	2300      	movs	r3, #0
 801040c:	71fb      	strb	r3, [r7, #7]
 801040e:	e01c      	b.n	801044a <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8010410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010414:	4a11      	ldr	r2, [pc, #68]	; (801045c <LmHandlerPackageIsTxPending+0x58>)
 8010416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d00f      	beq.n	801043e <LmHandlerPackageIsTxPending+0x3a>
 801041e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00b      	beq.n	801043e <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8010426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801042a:	4a0c      	ldr	r2, [pc, #48]	; (801045c <LmHandlerPackageIsTxPending+0x58>)
 801042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010430:	691b      	ldr	r3, [r3, #16]
 8010432:	4798      	blx	r3
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d001      	beq.n	801043e <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 801043a:	2301      	movs	r3, #1
 801043c:	e00a      	b.n	8010454 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010442:	b2db      	uxtb	r3, r3
 8010444:	3301      	adds	r3, #1
 8010446:	b2db      	uxtb	r3, r3
 8010448:	71fb      	strb	r3, [r7, #7]
 801044a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801044e:	2b04      	cmp	r3, #4
 8010450:	ddde      	ble.n	8010410 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3708      	adds	r7, #8
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	200007f8 	.word	0x200007f8

08010460 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010466:	2300      	movs	r3, #0
 8010468:	71fb      	strb	r3, [r7, #7]
 801046a:	e022      	b.n	80104b2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 801046c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010470:	4a14      	ldr	r2, [pc, #80]	; (80104c4 <LmHandlerPackagesProcess+0x64>)
 8010472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d015      	beq.n	80104a6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 801047a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801047e:	4a11      	ldr	r2, [pc, #68]	; (80104c4 <LmHandlerPackagesProcess+0x64>)
 8010480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010484:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00d      	beq.n	80104a6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801048a:	79fb      	ldrb	r3, [r7, #7]
 801048c:	4618      	mov	r0, r3
 801048e:	f7ff ff09 	bl	80102a4 <LmHandlerPackageIsInitialized>
 8010492:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010494:	2b00      	cmp	r3, #0
 8010496:	d006      	beq.n	80104a6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8010498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801049c:	4a09      	ldr	r2, [pc, #36]	; (80104c4 <LmHandlerPackagesProcess+0x64>)
 801049e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a2:	695b      	ldr	r3, [r3, #20]
 80104a4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80104a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	3301      	adds	r3, #1
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	71fb      	strb	r3, [r7, #7]
 80104b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	ddd8      	ble.n	801046c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80104ba:	bf00      	nop
 80104bc:	bf00      	nop
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	200007f8 	.word	0x200007f8

080104c8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	6039      	str	r1, [r7, #0]
 80104d2:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d102      	bne.n	80104e0 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 80104da:	f04f 33ff 	mov.w	r3, #4294967295
 80104de:	e00e      	b.n	80104fe <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 80104e0:	79fb      	ldrb	r3, [r7, #7]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <LmHandlerGetVersion+0x24>
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d004      	beq.n	80104f4 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 80104ea:	e007      	b.n	80104fc <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	4a06      	ldr	r2, [pc, #24]	; (8010508 <LmHandlerGetVersion+0x40>)
 80104f0:	601a      	str	r2, [r3, #0]
            break;
 80104f2:	e003      	b.n	80104fc <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	4a05      	ldr	r2, [pc, #20]	; (801050c <LmHandlerGetVersion+0x44>)
 80104f8:	601a      	str	r2, [r3, #0]
            break;
 80104fa:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 80104fc:	2300      	movs	r3, #0
}
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	bc80      	pop	{r7}
 8010506:	4770      	bx	lr
 8010508:	01000300 	.word	0x01000300
 801050c:	01010003 	.word	0x01010003

08010510 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010514:	f005 f882 	bl	801561c <LoRaMacDeInitialization>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801051e:	2300      	movs	r3, #0
 8010520:	e001      	b.n	8010526 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010522:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010526:	4618      	mov	r0, r3
 8010528:	bd80      	pop	{r7, pc}

0801052a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 801052a:	b580      	push	{r7, lr}
 801052c:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801052e:	f004 f80d 	bl	801454c <LoRaMacHalt>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d101      	bne.n	801053c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010538:	2300      	movs	r3, #0
 801053a:	e001      	b.n	8010540 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801053c:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010540:	4618      	mov	r0, r3
 8010542:	bd80      	pop	{r7, pc}

08010544 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b08c      	sub	sp, #48	; 0x30
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d102      	bne.n	8010558 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010552:	f04f 33ff 	mov.w	r3, #4294967295
 8010556:	e016      	b.n	8010586 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010558:	2320      	movs	r3, #32
 801055a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 801055c:	f107 0308 	add.w	r3, r7, #8
 8010560:	4618      	mov	r0, r3
 8010562:	f004 f8a3 	bl	80146ac <LoRaMacMibGetRequestConfirm>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801056c:	f04f 33ff 	mov.w	r3, #4294967295
 8010570:	e009      	b.n	8010586 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8010572:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f993 2000 	ldrsb.w	r2, [r3]
 8010580:	4b03      	ldr	r3, [pc, #12]	; (8010590 <LmHandlerGetTxPower+0x4c>)
 8010582:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3730      	adds	r7, #48	; 0x30
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	2000080c 	.word	0x2000080c

08010594 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010594:	b480      	push	{r7}
 8010596:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 8010598:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801059c:	4618      	mov	r0, r3
 801059e:	46bd      	mov	sp, r7
 80105a0:	bc80      	pop	{r7}
 80105a2:	4770      	bx	lr

080105a4 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	4603      	mov	r3, r0
 80105ac:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80105ae:	bf00      	nop
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bc80      	pop	{r7}
 80105b6:	4770      	bx	lr

080105b8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80105b8:	b480      	push	{r7}
 80105ba:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80105bc:	4b02      	ldr	r3, [pc, #8]	; (80105c8 <LmhpCompliancePackageFactory+0x10>)
}
 80105be:	4618      	mov	r0, r3
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bc80      	pop	{r7}
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	200000f4 	.word	0x200000f4

080105cc <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	4613      	mov	r3, r2
 80105d8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00f      	beq.n	8010600 <LmhpComplianceInit+0x34>
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00c      	beq.n	8010600 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 80105e6:	4a0c      	ldr	r2, [pc, #48]	; (8010618 <LmhpComplianceInit+0x4c>)
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80105ec:	4a0b      	ldr	r2, [pc, #44]	; (801061c <LmhpComplianceInit+0x50>)
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80105f2:	4a0a      	ldr	r2, [pc, #40]	; (801061c <LmhpComplianceInit+0x50>)
 80105f4:	79fb      	ldrb	r3, [r7, #7]
 80105f6:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80105f8:	4b08      	ldr	r3, [pc, #32]	; (801061c <LmhpComplianceInit+0x50>)
 80105fa:	2201      	movs	r2, #1
 80105fc:	701a      	strb	r2, [r3, #0]
 80105fe:	e006      	b.n	801060e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010600:	4b05      	ldr	r3, [pc, #20]	; (8010618 <LmhpComplianceInit+0x4c>)
 8010602:	2200      	movs	r2, #0
 8010604:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010606:	4b05      	ldr	r3, [pc, #20]	; (801061c <LmhpComplianceInit+0x50>)
 8010608:	2200      	movs	r2, #0
 801060a:	701a      	strb	r2, [r3, #0]
    }
}
 801060c:	bf00      	nop
 801060e:	bf00      	nop
 8010610:	3714      	adds	r7, #20
 8010612:	46bd      	mov	sp, r7
 8010614:	bc80      	pop	{r7}
 8010616:	4770      	bx	lr
 8010618:	20000974 	.word	0x20000974
 801061c:	20000960 	.word	0x20000960

08010620 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010620:	b480      	push	{r7}
 8010622:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010624:	4b02      	ldr	r3, [pc, #8]	; (8010630 <LmhpComplianceIsInitialized+0x10>)
 8010626:	781b      	ldrb	r3, [r3, #0]
}
 8010628:	4618      	mov	r0, r3
 801062a:	46bd      	mov	sp, r7
 801062c:	bc80      	pop	{r7}
 801062e:	4770      	bx	lr
 8010630:	20000960 	.word	0x20000960

08010634 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010634:	b480      	push	{r7}
 8010636:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010638:	4b07      	ldr	r3, [pc, #28]	; (8010658 <LmhpComplianceIsRunning+0x24>)
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	f083 0301 	eor.w	r3, r3, #1
 8010640:	b2db      	uxtb	r3, r3
 8010642:	2b00      	cmp	r3, #0
 8010644:	d001      	beq.n	801064a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8010646:	2300      	movs	r3, #0
 8010648:	e001      	b.n	801064e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 801064a:	4b03      	ldr	r3, [pc, #12]	; (8010658 <LmhpComplianceIsRunning+0x24>)
 801064c:	785b      	ldrb	r3, [r3, #1]
}
 801064e:	4618      	mov	r0, r3
 8010650:	46bd      	mov	sp, r7
 8010652:	bc80      	pop	{r7}
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop
 8010658:	20000960 	.word	0x20000960

0801065c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010664:	4b0f      	ldr	r3, [pc, #60]	; (80106a4 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	f083 0301 	eor.w	r3, r3, #1
 801066c:	b2db      	uxtb	r3, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	d112      	bne.n	8010698 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010672:	4b0c      	ldr	r3, [pc, #48]	; (80106a4 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010674:	785b      	ldrb	r3, [r3, #1]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00f      	beq.n	801069a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 801067e:	2b01      	cmp	r3, #1
 8010680:	d10b      	bne.n	801069a <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8010686:	2b00      	cmp	r3, #0
 8010688:	d007      	beq.n	801069a <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801068a:	4b06      	ldr	r3, [pc, #24]	; (80106a4 <LmhpComplianceOnMcpsConfirm+0x48>)
 801068c:	899b      	ldrh	r3, [r3, #12]
 801068e:	3301      	adds	r3, #1
 8010690:	b29a      	uxth	r2, r3
 8010692:	4b04      	ldr	r3, [pc, #16]	; (80106a4 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010694:	819a      	strh	r2, [r3, #12]
 8010696:	e000      	b.n	801069a <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010698:	bf00      	nop
    }
}
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	bc80      	pop	{r7}
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	20000960 	.word	0x20000960

080106a8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80106b0:	4b12      	ldr	r3, [pc, #72]	; (80106fc <LmhpComplianceOnMlmeConfirm+0x54>)
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	f083 0301 	eor.w	r3, r3, #1
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d116      	bne.n	80106ec <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80106be:	4b0f      	ldr	r3, [pc, #60]	; (80106fc <LmhpComplianceOnMlmeConfirm+0x54>)
 80106c0:	785b      	ldrb	r3, [r3, #1]
 80106c2:	f083 0301 	eor.w	r3, r3, #1
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d111      	bne.n	80106f0 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b05      	cmp	r3, #5
 80106d2:	d10e      	bne.n	80106f2 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 80106d4:	4b09      	ldr	r3, [pc, #36]	; (80106fc <LmhpComplianceOnMlmeConfirm+0x54>)
 80106d6:	2201      	movs	r2, #1
 80106d8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	7a1a      	ldrb	r2, [r3, #8]
 80106de:	4b07      	ldr	r3, [pc, #28]	; (80106fc <LmhpComplianceOnMlmeConfirm+0x54>)
 80106e0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	7a5a      	ldrb	r2, [r3, #9]
 80106e6:	4b05      	ldr	r3, [pc, #20]	; (80106fc <LmhpComplianceOnMlmeConfirm+0x54>)
 80106e8:	741a      	strb	r2, [r3, #16]
 80106ea:	e002      	b.n	80106f2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106ec:	bf00      	nop
 80106ee:	e000      	b.n	80106f2 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106f0:	bf00      	nop
    }
}
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bc80      	pop	{r7}
 80106f8:	4770      	bx	lr
 80106fa:	bf00      	nop
 80106fc:	20000960 	.word	0x20000960

08010700 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010706:	4b36      	ldr	r3, [pc, #216]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	f083 0301 	eor.w	r3, r3, #1
 801070e:	b2db      	uxtb	r3, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010714:	f04f 33ff 	mov.w	r3, #4294967295
 8010718:	e05e      	b.n	80107d8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 801071a:	4b31      	ldr	r3, [pc, #196]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801071c:	785b      	ldrb	r3, [r3, #1]
 801071e:	f083 0301 	eor.w	r3, r3, #1
 8010722:	b2db      	uxtb	r3, r3
 8010724:	2b00      	cmp	r3, #0
 8010726:	d001      	beq.n	801072c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010728:	2300      	movs	r3, #0
 801072a:	e055      	b.n	80107d8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 801072c:	4b2c      	ldr	r3, [pc, #176]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801072e:	7b9b      	ldrb	r3, [r3, #14]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d019      	beq.n	8010768 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010734:	4b2a      	ldr	r3, [pc, #168]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010736:	2200      	movs	r2, #0
 8010738:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 801073a:	4b29      	ldr	r3, [pc, #164]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801073c:	2203      	movs	r2, #3
 801073e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010740:	4b27      	ldr	r3, [pc, #156]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	2205      	movs	r2, #5
 8010746:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8010748:	4b25      	ldr	r3, [pc, #148]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	3301      	adds	r3, #1
 801074e:	4a24      	ldr	r2, [pc, #144]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010750:	7bd2      	ldrb	r2, [r2, #15]
 8010752:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010754:	4b22      	ldr	r3, [pc, #136]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010756:	689b      	ldr	r3, [r3, #8]
 8010758:	3302      	adds	r3, #2
 801075a:	4a21      	ldr	r2, [pc, #132]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801075c:	7c12      	ldrb	r2, [r2, #16]
 801075e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010760:	4b1f      	ldr	r3, [pc, #124]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010762:	2201      	movs	r2, #1
 8010764:	709a      	strb	r2, [r3, #2]
 8010766:	e01c      	b.n	80107a2 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8010768:	4b1d      	ldr	r3, [pc, #116]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801076a:	789b      	ldrb	r3, [r3, #2]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d005      	beq.n	801077c <LmhpComplianceTxProcess+0x7c>
 8010770:	2b04      	cmp	r3, #4
 8010772:	d116      	bne.n	80107a2 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8010774:	4b1a      	ldr	r3, [pc, #104]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010776:	2201      	movs	r2, #1
 8010778:	709a      	strb	r2, [r3, #2]
                break;
 801077a:	e012      	b.n	80107a2 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 801077c:	4b18      	ldr	r3, [pc, #96]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801077e:	2202      	movs	r2, #2
 8010780:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010782:	4b17      	ldr	r3, [pc, #92]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010784:	899b      	ldrh	r3, [r3, #12]
 8010786:	0a1b      	lsrs	r3, r3, #8
 8010788:	b29a      	uxth	r2, r3
 801078a:	4b15      	ldr	r3, [pc, #84]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 801078c:	689b      	ldr	r3, [r3, #8]
 801078e:	b2d2      	uxtb	r2, r2
 8010790:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010792:	4b13      	ldr	r3, [pc, #76]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010794:	899a      	ldrh	r2, [r3, #12]
 8010796:	4b12      	ldr	r3, [pc, #72]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 8010798:	689b      	ldr	r3, [r3, #8]
 801079a:	3301      	adds	r3, #1
 801079c:	b2d2      	uxtb	r2, r2
 801079e:	701a      	strb	r2, [r3, #0]
                break;
 80107a0:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 80107a2:	23e0      	movs	r3, #224	; 0xe0
 80107a4:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 80107a6:	4b0e      	ldr	r3, [pc, #56]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 80107a8:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 80107aa:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80107ac:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 80107ae:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80107b0:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 80107b2:	480c      	ldr	r0, [pc, #48]	; (80107e4 <LmhpComplianceTxProcess+0xe4>)
 80107b4:	f00d fc5a 	bl	801e06c <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80107b8:	4b0b      	ldr	r3, [pc, #44]	; (80107e8 <LmhpComplianceTxProcess+0xe8>)
 80107ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 80107c0:	f04f 33ff 	mov.w	r3, #4294967295
 80107c4:	e008      	b.n	80107d8 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80107c6:	4b08      	ldr	r3, [pc, #32]	; (80107e8 <LmhpComplianceTxProcess+0xe8>)
 80107c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ca:	4a05      	ldr	r2, [pc, #20]	; (80107e0 <LmhpComplianceTxProcess+0xe0>)
 80107cc:	78d2      	ldrb	r2, [r2, #3]
 80107ce:	4611      	mov	r1, r2
 80107d0:	4638      	mov	r0, r7
 80107d2:	2201      	movs	r2, #1
 80107d4:	4798      	blx	r3
 80107d6:	4603      	mov	r3, r0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3708      	adds	r7, #8
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	20000960 	.word	0x20000960
 80107e4:	20000948 	.word	0x20000948
 80107e8:	200000f4 	.word	0x200000f4

080107ec <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b0a4      	sub	sp, #144	; 0x90
 80107f0:	af02      	add	r7, sp, #8
 80107f2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80107f4:	4ba5      	ldr	r3, [pc, #660]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f083 0301 	eor.w	r3, r3, #1
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f040 81c6 	bne.w	8010b90 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	7b5b      	ldrb	r3, [r3, #13]
 8010808:	f083 0301 	eor.w	r3, r3, #1
 801080c:	b2db      	uxtb	r3, r3
 801080e:	2b00      	cmp	r3, #0
 8010810:	f040 81c0 	bne.w	8010b94 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010814:	4b9d      	ldr	r3, [pc, #628]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010816:	785b      	ldrb	r3, [r3, #1]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d00c      	beq.n	8010836 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	7b9b      	ldrb	r3, [r3, #14]
 8010820:	f083 0301 	eor.w	r3, r3, #1
 8010824:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8010826:	2b00      	cmp	r3, #0
 8010828:	d005      	beq.n	8010836 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801082a:	4b98      	ldr	r3, [pc, #608]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 801082c:	899b      	ldrh	r3, [r3, #12]
 801082e:	3301      	adds	r3, #1
 8010830:	b29a      	uxth	r2, r3
 8010832:	4b96      	ldr	r3, [pc, #600]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010834:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	78db      	ldrb	r3, [r3, #3]
 801083a:	2be0      	cmp	r3, #224	; 0xe0
 801083c:	f040 81ac 	bne.w	8010b98 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010840:	4b92      	ldr	r3, [pc, #584]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010842:	785b      	ldrb	r3, [r3, #1]
 8010844:	f083 0301 	eor.w	r3, r3, #1
 8010848:	b2db      	uxtb	r3, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	d060      	beq.n	8010910 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	7b1b      	ldrb	r3, [r3, #12]
 8010852:	2b04      	cmp	r3, #4
 8010854:	f040 81a7 	bne.w	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801085e:	2b01      	cmp	r3, #1
 8010860:	f040 81a1 	bne.w	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	3301      	adds	r3, #1
 801086a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 801086c:	2b01      	cmp	r3, #1
 801086e:	f040 819a 	bne.w	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	689b      	ldr	r3, [r3, #8]
 8010876:	3302      	adds	r3, #2
 8010878:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 801087a:	2b01      	cmp	r3, #1
 801087c:	f040 8193 	bne.w	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	3303      	adds	r3, #3
 8010886:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010888:	2b01      	cmp	r3, #1
 801088a:	f040 818c 	bne.w	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 801088e:	4b7f      	ldr	r3, [pc, #508]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010890:	2200      	movs	r2, #0
 8010892:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010894:	4b7d      	ldr	r3, [pc, #500]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010896:	22e0      	movs	r2, #224	; 0xe0
 8010898:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 801089a:	4b7c      	ldr	r3, [pc, #496]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 801089c:	2202      	movs	r2, #2
 801089e:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80108a0:	4b7a      	ldr	r3, [pc, #488]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a2:	2200      	movs	r2, #0
 80108a4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80108a6:	4b79      	ldr	r3, [pc, #484]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80108ac:	4b77      	ldr	r3, [pc, #476]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ae:	2200      	movs	r2, #0
 80108b0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80108b2:	4b76      	ldr	r3, [pc, #472]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108b4:	2200      	movs	r2, #0
 80108b6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80108b8:	4b74      	ldr	r3, [pc, #464]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ba:	2201      	movs	r2, #1
 80108bc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80108be:	4b73      	ldr	r3, [pc, #460]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108c0:	2201      	movs	r2, #1
 80108c2:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 80108c4:	2304      	movs	r3, #4
 80108c6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 80108c8:	2301      	movs	r3, #1
 80108ca:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80108cc:	f107 030c 	add.w	r3, r7, #12
 80108d0:	4618      	mov	r0, r3
 80108d2:	f004 f8a1 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 80108d6:	2000      	movs	r0, #0
 80108d8:	f004 fe7a 	bl	80155d0 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80108dc:	4b6c      	ldr	r3, [pc, #432]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d003      	beq.n	80108ee <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 80108e6:	4b6a      	ldr	r3, [pc, #424]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80108ee:	2300      	movs	r3, #0
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	4b68      	ldr	r3, [pc, #416]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a8>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	f04f 31ff 	mov.w	r1, #4294967295
 80108fa:	4867      	ldr	r0, [pc, #412]	; (8010a98 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80108fc:	f00d fb80 	bl	801e000 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010900:	f241 3188 	movw	r1, #5000	; 0x1388
 8010904:	4864      	ldr	r0, [pc, #400]	; (8010a98 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010906:	f00d fc8f 	bl	801e228 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 801090a:	f7ff fef9 	bl	8010700 <LmhpComplianceTxProcess>
 801090e:	e14a      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	689b      	ldr	r3, [r3, #8]
 8010914:	781a      	ldrb	r2, [r3, #0]
 8010916:	4b5d      	ldr	r3, [pc, #372]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010918:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801091a:	4b5c      	ldr	r3, [pc, #368]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 801091c:	789b      	ldrb	r3, [r3, #2]
 801091e:	2b0a      	cmp	r3, #10
 8010920:	f200 813c 	bhi.w	8010b9c <LmhpComplianceOnMcpsIndication+0x3b0>
 8010924:	a201      	add	r2, pc, #4	; (adr r2, 801092c <LmhpComplianceOnMcpsIndication+0x140>)
 8010926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092a:	bf00      	nop
 801092c:	08010959 	.word	0x08010959
 8010930:	080109a3 	.word	0x080109a3
 8010934:	080109ab 	.word	0x080109ab
 8010938:	080109b9 	.word	0x080109b9
 801093c:	080109c7 	.word	0x080109c7
 8010940:	08010a1f 	.word	0x08010a1f
 8010944:	08010a31 	.word	0x08010a31
 8010948:	08010aa1 	.word	0x08010aa1
 801094c:	08010b49 	.word	0x08010b49
 8010950:	08010b5b 	.word	0x08010b5b
 8010954:	08010b75 	.word	0x08010b75
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010958:	484f      	ldr	r0, [pc, #316]	; (8010a98 <LmhpComplianceOnMcpsIndication+0x2ac>)
 801095a:	f00d fbf5 	bl	801e148 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 801095e:	4b4b      	ldr	r3, [pc, #300]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010960:	2200      	movs	r2, #0
 8010962:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010964:	4b49      	ldr	r3, [pc, #292]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010966:	2200      	movs	r2, #0
 8010968:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 801096a:	2304      	movs	r3, #4
 801096c:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801096e:	4b48      	ldr	r3, [pc, #288]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010976:	f107 030c 	add.w	r3, r7, #12
 801097a:	4618      	mov	r0, r3
 801097c:	f004 f84c 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010980:	4b43      	ldr	r3, [pc, #268]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	785b      	ldrb	r3, [r3, #1]
 8010986:	4618      	mov	r0, r3
 8010988:	f004 fe22 	bl	80155d0 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 801098c:	4b40      	ldr	r3, [pc, #256]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	689b      	ldr	r3, [r3, #8]
 8010992:	2b00      	cmp	r3, #0
 8010994:	f000 8104 	beq.w	8010ba0 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010998:	4b3d      	ldr	r3, [pc, #244]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	689b      	ldr	r3, [r3, #8]
 801099e:	4798      	blx	r3
                    }
                }
                break;
 80109a0:	e0fe      	b.n	8010ba0 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 80109a2:	4b3a      	ldr	r3, [pc, #232]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109a4:	2202      	movs	r2, #2
 80109a6:	719a      	strb	r2, [r3, #6]
                break;
 80109a8:	e0fd      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 80109aa:	4b38      	ldr	r3, [pc, #224]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109ac:	2201      	movs	r2, #1
 80109ae:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109b0:	4b36      	ldr	r3, [pc, #216]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109b2:	2201      	movs	r2, #1
 80109b4:	709a      	strb	r2, [r3, #2]
                break;
 80109b6:	e0f6      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 80109b8:	4b34      	ldr	r3, [pc, #208]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109ba:	2200      	movs	r2, #0
 80109bc:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109be:	4b33      	ldr	r3, [pc, #204]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109c0:	2201      	movs	r2, #1
 80109c2:	709a      	strb	r2, [r3, #2]
                break;
 80109c4:	e0ef      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	7b1a      	ldrb	r2, [r3, #12]
 80109ca:	4b30      	ldr	r3, [pc, #192]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109cc:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 80109ce:	4b2f      	ldr	r3, [pc, #188]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	2204      	movs	r2, #4
 80109d4:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109d6:	2301      	movs	r3, #1
 80109d8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80109dc:	e012      	b.n	8010a04 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	689a      	ldr	r2, [r3, #8]
 80109e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109e6:	4413      	add	r3, r2
 80109e8:	781a      	ldrb	r2, [r3, #0]
 80109ea:	4b28      	ldr	r3, [pc, #160]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109ec:	6899      	ldr	r1, [r3, #8]
 80109ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109f2:	440b      	add	r3, r1
 80109f4:	3201      	adds	r2, #1
 80109f6:	b2d2      	uxtb	r2, r2
 80109f8:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109fe:	3301      	adds	r3, #1
 8010a00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010a04:	4b21      	ldr	r3, [pc, #132]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a06:	795a      	ldrb	r2, [r3, #5]
 8010a08:	4b20      	ldr	r3, [pc, #128]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a0a:	799b      	ldrb	r3, [r3, #6]
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	bf28      	it	cs
 8010a10:	4613      	movcs	r3, r2
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d3e0      	bcc.n	80109de <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8010a1c:	e0c3      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8010a1e:	2305      	movs	r3, #5
 8010a20:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8010a24:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f004 fb89 	bl	8015140 <LoRaMacMlmeRequest>
                }
                break;
 8010a2e:	e0ba      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010a30:	4819      	ldr	r0, [pc, #100]	; (8010a98 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010a32:	f00d fb89 	bl	801e148 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8010a36:	4b15      	ldr	r3, [pc, #84]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a38:	2200      	movs	r2, #0
 8010a3a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010a3c:	4b13      	ldr	r3, [pc, #76]	; (8010a8c <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a3e:	2200      	movs	r2, #0
 8010a40:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8010a42:	2304      	movs	r3, #4
 8010a44:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010a46:	4b12      	ldr	r3, [pc, #72]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010a4e:	f107 030c 	add.w	r3, r7, #12
 8010a52:	4618      	mov	r0, r3
 8010a54:	f003 ffe0 	bl	8014a18 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010a58:	4b0d      	ldr	r3, [pc, #52]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	785b      	ldrb	r3, [r3, #1]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f004 fdb6 	bl	80155d0 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010a64:	4b0a      	ldr	r3, [pc, #40]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	689b      	ldr	r3, [r3, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d003      	beq.n	8010a76 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010a6e:	4b08      	ldr	r3, [pc, #32]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	689b      	ldr	r3, [r3, #8]
 8010a74:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8010a76:	4b09      	ldr	r3, [pc, #36]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f000 8092 	beq.w	8010ba4 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010a80:	4b06      	ldr	r3, [pc, #24]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a84:	2101      	movs	r1, #1
 8010a86:	2002      	movs	r0, #2
 8010a88:	4798      	blx	r3
                    }
                }
                break;
 8010a8a:	e08b      	b.n	8010ba4 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010a8c:	20000960 	.word	0x20000960
 8010a90:	20000974 	.word	0x20000974
 8010a94:	08010bbd 	.word	0x08010bbd
 8010a98:	20000948 	.word	0x20000948
 8010a9c:	200000f4 	.word	0x200000f4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	7b1b      	ldrb	r3, [r3, #12]
 8010aa4:	2b03      	cmp	r3, #3
 8010aa6:	d113      	bne.n	8010ad0 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010aa8:	2306      	movs	r3, #6
 8010aaa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	781b      	ldrb	r3, [r3, #0]
 8010ab6:	021b      	lsls	r3, r3, #8
 8010ab8:	b21a      	sxth	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	689b      	ldr	r3, [r3, #8]
 8010abe:	3302      	adds	r3, #2
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	b21b      	sxth	r3, r3
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	b21b      	sxth	r3, r3
 8010ac8:	b29b      	uxth	r3, r3
 8010aca:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010ace:	e032      	b.n	8010b36 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	7b1b      	ldrb	r3, [r3, #12]
 8010ad4:	2b07      	cmp	r3, #7
 8010ad6:	d12e      	bne.n	8010b36 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010ad8:	2307      	movs	r3, #7
 8010ada:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	021b      	lsls	r3, r3, #8
 8010ae8:	b21a      	sxth	r2, r3
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	3302      	adds	r3, #2
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	b21b      	sxth	r3, r3
 8010af4:	4313      	orrs	r3, r2
 8010af6:	b21b      	sxth	r3, r3
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	689b      	ldr	r3, [r3, #8]
 8010b02:	3303      	adds	r3, #3
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	041a      	lsls	r2, r3, #16
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	689b      	ldr	r3, [r3, #8]
 8010b0c:	3304      	adds	r3, #4
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	021b      	lsls	r3, r3, #8
 8010b12:	4313      	orrs	r3, r2
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	6892      	ldr	r2, [r2, #8]
 8010b18:	3205      	adds	r2, #5
 8010b1a:	7812      	ldrb	r2, [r2, #0]
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	461a      	mov	r2, r3
 8010b20:	2364      	movs	r3, #100	; 0x64
 8010b22:	fb02 f303 	mul.w	r3, r2, r3
 8010b26:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	689b      	ldr	r3, [r3, #8]
 8010b2c:	3306      	adds	r3, #6
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	b25b      	sxtb	r3, r3
 8010b32:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 8010b36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f004 fb00 	bl	8015140 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8010b40:	4b1a      	ldr	r3, [pc, #104]	; (8010bac <LmhpComplianceOnMcpsIndication+0x3c0>)
 8010b42:	2201      	movs	r2, #1
 8010b44:	709a      	strb	r2, [r3, #2]
                }
                break;
 8010b46:	e02e      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8010b48:	230a      	movs	r3, #10
 8010b4a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b52:	4618      	mov	r0, r3
 8010b54:	f004 faf4 	bl	8015140 <LoRaMacMlmeRequest>
                }
                break;
 8010b58:	e025      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	3301      	adds	r3, #1
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010b68:	f107 030c 	add.w	r3, r7, #12
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f003 ff53 	bl	8014a18 <LoRaMacMibSetRequestConfirm>
                }
                break;
 8010b72:	e018      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010b74:	230d      	movs	r3, #13
 8010b76:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	785b      	ldrb	r3, [r3, #1]
 8010b80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f004 fad9 	bl	8015140 <LoRaMacMlmeRequest>
                }
                break;
 8010b8e:	e00a      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b90:	bf00      	nop
 8010b92:	e008      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b94:	bf00      	nop
 8010b96:	e006      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b98:	bf00      	nop
 8010b9a:	e004      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010b9c:	bf00      	nop
 8010b9e:	e002      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010ba0:	bf00      	nop
 8010ba2:	e000      	b.n	8010ba6 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010ba4:	bf00      	nop
        }
    }
}
 8010ba6:	3788      	adds	r7, #136	; 0x88
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20000960 	.word	0x20000960

08010bb0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010bb4:	bf00      	nop
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bc80      	pop	{r7}
 8010bba:	4770      	bx	lr

08010bbc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b082      	sub	sp, #8
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010bc4:	f7ff fd9c 	bl	8010700 <LmhpComplianceTxProcess>
}
 8010bc8:	bf00      	nop
 8010bca:	3708      	adds	r7, #8
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	370c      	adds	r7, #12
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bc80      	pop	{r7}
 8010be2:	4770      	bx	lr

08010be4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	6039      	str	r1, [r7, #0]
 8010bee:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010bf0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bc80      	pop	{r7}
 8010bfc:	4770      	bx	lr
	...

08010c00 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010c00:	b590      	push	{r4, r7, lr}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010c06:	f00d fbb9 	bl	801e37c <UTIL_TIMER_GetCurrentTime>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	4a0f      	ldr	r2, [pc, #60]	; (8010c4c <OnRadioTxDone+0x4c>)
 8010c0e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010c10:	4c0f      	ldr	r4, [pc, #60]	; (8010c50 <OnRadioTxDone+0x50>)
 8010c12:	463b      	mov	r3, r7
 8010c14:	4618      	mov	r0, r3
 8010c16:	f00c fd2f 	bl	801d678 <SysTimeGet>
 8010c1a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c1e:	463a      	mov	r2, r7
 8010c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c24:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c28:	4a0a      	ldr	r2, [pc, #40]	; (8010c54 <OnRadioTxDone+0x54>)
 8010c2a:	7813      	ldrb	r3, [r2, #0]
 8010c2c:	f043 0310 	orr.w	r3, r3, #16
 8010c30:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c32:	f003 f8e1 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c36:	4b08      	ldr	r3, [pc, #32]	; (8010c58 <OnRadioTxDone+0x58>)
 8010c38:	2201      	movs	r2, #1
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	2002      	movs	r0, #2
 8010c3e:	f00d fc8d 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 8010c42:	bf00      	nop
 8010c44:	370c      	adds	r7, #12
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd90      	pop	{r4, r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	200015ec 	.word	0x200015ec
 8010c50:	20000978 	.word	0x20000978
 8010c54:	200015e8 	.word	0x200015e8
 8010c58:	0801f324 	.word	0x0801f324

08010c5c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	4608      	mov	r0, r1
 8010c66:	4611      	mov	r1, r2
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	817b      	strh	r3, [r7, #10]
 8010c6e:	460b      	mov	r3, r1
 8010c70:	813b      	strh	r3, [r7, #8]
 8010c72:	4613      	mov	r3, r2
 8010c74:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010c76:	f00d fb81 	bl	801e37c <UTIL_TIMER_GetCurrentTime>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	4a0f      	ldr	r2, [pc, #60]	; (8010cbc <OnRadioRxDone+0x60>)
 8010c7e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010c80:	4a0e      	ldr	r2, [pc, #56]	; (8010cbc <OnRadioRxDone+0x60>)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010c86:	4a0d      	ldr	r2, [pc, #52]	; (8010cbc <OnRadioRxDone+0x60>)
 8010c88:	897b      	ldrh	r3, [r7, #10]
 8010c8a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010c8c:	4a0b      	ldr	r2, [pc, #44]	; (8010cbc <OnRadioRxDone+0x60>)
 8010c8e:	893b      	ldrh	r3, [r7, #8]
 8010c90:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010c92:	4a0a      	ldr	r2, [pc, #40]	; (8010cbc <OnRadioRxDone+0x60>)
 8010c94:	79fb      	ldrb	r3, [r7, #7]
 8010c96:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010c98:	4a09      	ldr	r2, [pc, #36]	; (8010cc0 <OnRadioRxDone+0x64>)
 8010c9a:	7813      	ldrb	r3, [r2, #0]
 8010c9c:	f043 0308 	orr.w	r3, r3, #8
 8010ca0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010ca2:	f003 f8a9 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010ca6:	4b07      	ldr	r3, [pc, #28]	; (8010cc4 <OnRadioRxDone+0x68>)
 8010ca8:	2201      	movs	r2, #1
 8010caa:	2100      	movs	r1, #0
 8010cac:	2002      	movs	r0, #2
 8010cae:	f00d fc55 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 8010cb2:	bf00      	nop
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	200015f0 	.word	0x200015f0
 8010cc0:	200015e8 	.word	0x200015e8
 8010cc4:	0801f334 	.word	0x0801f334

08010cc8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010ccc:	4a07      	ldr	r2, [pc, #28]	; (8010cec <OnRadioTxTimeout+0x24>)
 8010cce:	7813      	ldrb	r3, [r2, #0]
 8010cd0:	f043 0304 	orr.w	r3, r3, #4
 8010cd4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010cd6:	f003 f88f 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010cda:	4b05      	ldr	r3, [pc, #20]	; (8010cf0 <OnRadioTxTimeout+0x28>)
 8010cdc:	2201      	movs	r2, #1
 8010cde:	2100      	movs	r1, #0
 8010ce0:	2002      	movs	r0, #2
 8010ce2:	f00d fc3b 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 8010ce6:	bf00      	nop
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	200015e8 	.word	0x200015e8
 8010cf0:	0801f344 	.word	0x0801f344

08010cf4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010cf8:	4a04      	ldr	r2, [pc, #16]	; (8010d0c <OnRadioRxError+0x18>)
 8010cfa:	7813      	ldrb	r3, [r2, #0]
 8010cfc:	f043 0302 	orr.w	r3, r3, #2
 8010d00:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d02:	f003 f879 	bl	8013df8 <OnMacProcessNotify>
}
 8010d06:	bf00      	nop
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	200015e8 	.word	0x200015e8

08010d10 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d14:	4a07      	ldr	r2, [pc, #28]	; (8010d34 <OnRadioRxTimeout+0x24>)
 8010d16:	7813      	ldrb	r3, [r2, #0]
 8010d18:	f043 0301 	orr.w	r3, r3, #1
 8010d1c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d1e:	f003 f86b 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d22:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <OnRadioRxTimeout+0x28>)
 8010d24:	2201      	movs	r2, #1
 8010d26:	2100      	movs	r1, #0
 8010d28:	2002      	movs	r0, #2
 8010d2a:	f00d fc17 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 8010d2e:	bf00      	nop
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	200015e8 	.word	0x200015e8
 8010d38:	0801f354 	.word	0x0801f354

08010d3c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d40:	4b08      	ldr	r3, [pc, #32]	; (8010d64 <UpdateRxSlotIdleState+0x28>)
 8010d42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d004      	beq.n	8010d54 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d4a:	4b07      	ldr	r3, [pc, #28]	; (8010d68 <UpdateRxSlotIdleState+0x2c>)
 8010d4c:	2206      	movs	r2, #6
 8010d4e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d52:	e003      	b.n	8010d5c <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d54:	4b04      	ldr	r3, [pc, #16]	; (8010d68 <UpdateRxSlotIdleState+0x2c>)
 8010d56:	2202      	movs	r2, #2
 8010d58:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8010d5c:	bf00      	nop
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bc80      	pop	{r7}
 8010d62:	4770      	bx	lr
 8010d64:	20000e80 	.word	0x20000e80
 8010d68:	20000978 	.word	0x20000978

08010d6c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b092      	sub	sp, #72	; 0x48
 8010d70:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d72:	4b50      	ldr	r3, [pc, #320]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010d74:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d78:	2b02      	cmp	r3, #2
 8010d7a:	d002      	beq.n	8010d82 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010d7c:	4b4e      	ldr	r3, [pc, #312]	; (8010eb8 <ProcessRadioTxDone+0x14c>)
 8010d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d80:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d82:	f3ef 8310 	mrs	r3, PRIMASK
 8010d86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010d8c:	b672      	cpsid	i
}
 8010d8e:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010d90:	f00d faf4 	bl	801e37c <UTIL_TIMER_GetCurrentTime>
 8010d94:	4602      	mov	r2, r0
 8010d96:	4b49      	ldr	r3, [pc, #292]	; (8010ebc <ProcessRadioTxDone+0x150>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010d9e:	4b48      	ldr	r3, [pc, #288]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010da0:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	4619      	mov	r1, r3
 8010daa:	4846      	ldr	r0, [pc, #280]	; (8010ec4 <ProcessRadioTxDone+0x158>)
 8010dac:	f00d fa3c 	bl	801e228 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010db0:	4844      	ldr	r0, [pc, #272]	; (8010ec4 <ProcessRadioTxDone+0x158>)
 8010db2:	f00d f95b 	bl	801e06c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010db6:	4b42      	ldr	r3, [pc, #264]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010db8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dbe:	1ad3      	subs	r3, r2, r3
 8010dc0:	4619      	mov	r1, r3
 8010dc2:	4841      	ldr	r0, [pc, #260]	; (8010ec8 <ProcessRadioTxDone+0x15c>)
 8010dc4:	f00d fa30 	bl	801e228 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010dc8:	483f      	ldr	r0, [pc, #252]	; (8010ec8 <ProcessRadioTxDone+0x15c>)
 8010dca:	f00d f94f 	bl	801e06c <UTIL_TIMER_Start>
 8010dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd4:	f383 8810 	msr	PRIMASK, r3
}
 8010dd8:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010dda:	4b36      	ldr	r3, [pc, #216]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010ddc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010de0:	2b02      	cmp	r3, #2
 8010de2:	d004      	beq.n	8010dee <ProcessRadioTxDone+0x82>
 8010de4:	4b36      	ldr	r3, [pc, #216]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010de6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d019      	beq.n	8010e22 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010dee:	2316      	movs	r3, #22
 8010df0:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010df4:	4b2f      	ldr	r3, [pc, #188]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010df6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010dfa:	f107 0220 	add.w	r2, r7, #32
 8010dfe:	4611      	mov	r1, r2
 8010e00:	4618      	mov	r0, r3
 8010e02:	f006 fcec 	bl	80177de <RegionGetPhyParam>
 8010e06:	4603      	mov	r3, r0
 8010e08:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010e0a:	4b2d      	ldr	r3, [pc, #180]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010e0c:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	4413      	add	r3, r2
 8010e14:	4619      	mov	r1, r3
 8010e16:	482d      	ldr	r0, [pc, #180]	; (8010ecc <ProcessRadioTxDone+0x160>)
 8010e18:	f00d fa06 	bl	801e228 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010e1c:	482b      	ldr	r0, [pc, #172]	; (8010ecc <ProcessRadioTxDone+0x160>)
 8010e1e:	f00d f925 	bl	801e06c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e22:	4b26      	ldr	r3, [pc, #152]	; (8010ebc <ProcessRadioTxDone+0x150>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	4a23      	ldr	r2, [pc, #140]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010e28:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e2a:	4b25      	ldr	r3, [pc, #148]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010e2c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010e30:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e32:	4b22      	ldr	r3, [pc, #136]	; (8010ebc <ProcessRadioTxDone+0x150>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f00c fc53 	bl	801d6e8 <SysTimeGetMcuTime>
 8010e42:	4638      	mov	r0, r7
 8010e44:	4b1b      	ldr	r3, [pc, #108]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010e46:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8010e4a:	9200      	str	r2, [sp, #0]
 8010e4c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010e50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e54:	ca06      	ldmia	r2, {r1, r2}
 8010e56:	f00c fba8 	bl	801d5aa <SysTimeSub>
 8010e5a:	f107 0314 	add.w	r3, r7, #20
 8010e5e:	463a      	mov	r2, r7
 8010e60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e64:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010e68:	4b15      	ldr	r3, [pc, #84]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010e6a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8010e6e:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010e70:	2301      	movs	r3, #1
 8010e72:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e74:	4b0f      	ldr	r3, [pc, #60]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010e76:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010e82:	4b0c      	ldr	r3, [pc, #48]	; (8010eb4 <ProcessRadioTxDone+0x148>)
 8010e84:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e88:	f107 0208 	add.w	r2, r7, #8
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f006 fcbd 	bl	801780e <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010e94:	4b0a      	ldr	r3, [pc, #40]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010e96:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010e9a:	f083 0301 	eor.w	r3, r3, #1
 8010e9e:	b2db      	uxtb	r3, r3
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d003      	beq.n	8010eac <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010ea4:	4b06      	ldr	r3, [pc, #24]	; (8010ec0 <ProcessRadioTxDone+0x154>)
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010eac:	bf00      	nop
 8010eae:	3740      	adds	r7, #64	; 0x40
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	20000e80 	.word	0x20000e80
 8010eb8:	0801fa04 	.word	0x0801fa04
 8010ebc:	200015ec 	.word	0x200015ec
 8010ec0:	20000978 	.word	0x20000978
 8010ec4:	20000cf8 	.word	0x20000cf8
 8010ec8:	20000d10 	.word	0x20000d10
 8010ecc:	20000d6c 	.word	0x20000d6c

08010ed0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ed4:	4b10      	ldr	r3, [pc, #64]	; (8010f18 <PrepareRxDoneAbort+0x48>)
 8010ed6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ede:	4a0e      	ldr	r2, [pc, #56]	; (8010f18 <PrepareRxDoneAbort+0x48>)
 8010ee0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010ee4:	4b0c      	ldr	r3, [pc, #48]	; (8010f18 <PrepareRxDoneAbort+0x48>)
 8010ee6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d002      	beq.n	8010ef4 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010eee:	2000      	movs	r0, #0
 8010ef0:	f001 f950 	bl	8012194 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010ef4:	4a08      	ldr	r2, [pc, #32]	; (8010f18 <PrepareRxDoneAbort+0x48>)
 8010ef6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010efa:	f043 0302 	orr.w	r3, r3, #2
 8010efe:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010f02:	4a05      	ldr	r2, [pc, #20]	; (8010f18 <PrepareRxDoneAbort+0x48>)
 8010f04:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010f08:	f043 0310 	orr.w	r3, r3, #16
 8010f0c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010f10:	f7ff ff14 	bl	8010d3c <UpdateRxSlotIdleState>
}
 8010f14:	bf00      	nop
 8010f16:	bd80      	pop	{r7, pc}
 8010f18:	20000978 	.word	0x20000978

08010f1c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f1c:	b5b0      	push	{r4, r5, r7, lr}
 8010f1e:	b0aa      	sub	sp, #168	; 0xa8
 8010f20:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f22:	2313      	movs	r3, #19
 8010f24:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f28:	4b78      	ldr	r3, [pc, #480]	; (801110c <ProcessRadioRxDone+0x1f0>)
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010f30:	4b76      	ldr	r3, [pc, #472]	; (801110c <ProcessRadioRxDone+0x1f0>)
 8010f32:	891b      	ldrh	r3, [r3, #8]
 8010f34:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010f38:	4b74      	ldr	r3, [pc, #464]	; (801110c <ProcessRadioRxDone+0x1f0>)
 8010f3a:	895b      	ldrh	r3, [r3, #10]
 8010f3c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010f40:	4b72      	ldr	r3, [pc, #456]	; (801110c <ProcessRadioRxDone+0x1f0>)
 8010f42:	7b1b      	ldrb	r3, [r3, #12]
 8010f44:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f52:	4b6f      	ldr	r3, [pc, #444]	; (8011110 <ProcessRadioRxDone+0x1f4>)
 8010f54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f62:	2301      	movs	r3, #1
 8010f64:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f6e:	4b69      	ldr	r3, [pc, #420]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010f76:	4a67      	ldr	r2, [pc, #412]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010f78:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010f7c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010f80:	4a64      	ldr	r2, [pc, #400]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010f82:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010f86:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010f8a:	4b62      	ldr	r3, [pc, #392]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010f8c:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010f90:	4b60      	ldr	r3, [pc, #384]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010f92:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010f96:	4b5f      	ldr	r3, [pc, #380]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010f98:	2200      	movs	r2, #0
 8010f9a:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010f9e:	4b5d      	ldr	r3, [pc, #372]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010fa6:	4b5b      	ldr	r3, [pc, #364]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010fae:	4b59      	ldr	r3, [pc, #356]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010fb6:	4b57      	ldr	r3, [pc, #348]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010fbe:	4b55      	ldr	r3, [pc, #340]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010fc6:	4b53      	ldr	r3, [pc, #332]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010fce:	4b51      	ldr	r3, [pc, #324]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010fd6:	4b4f      	ldr	r3, [pc, #316]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010fde:	4b4d      	ldr	r3, [pc, #308]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010fe6:	4b4b      	ldr	r3, [pc, #300]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010fee:	4b4a      	ldr	r3, [pc, #296]	; (8011118 <ProcessRadioRxDone+0x1fc>)
 8010ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff2:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010ff4:	4849      	ldr	r0, [pc, #292]	; (801111c <ProcessRadioRxDone+0x200>)
 8010ff6:	f00d f8a7 	bl	801e148 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010ffa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010ffe:	4619      	mov	r1, r3
 8011000:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011004:	f004 fc4b 	bl	801589e <LoRaMacClassBRxBeacon>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00b      	beq.n	8011026 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801100e:	4a41      	ldr	r2, [pc, #260]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8011010:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011014:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011018:	4a3e      	ldr	r2, [pc, #248]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 801101a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801101e:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8011022:	f000 bc1f 	b.w	8011864 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011026:	4b3a      	ldr	r3, [pc, #232]	; (8011110 <ProcessRadioRxDone+0x1f4>)
 8011028:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801102c:	2b01      	cmp	r3, #1
 801102e:	d11e      	bne.n	801106e <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011030:	f004 fc48 	bl	80158c4 <LoRaMacClassBIsPingExpected>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d00a      	beq.n	8011050 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801103a:	2000      	movs	r0, #0
 801103c:	f004 fbf9 	bl	8015832 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011040:	2000      	movs	r0, #0
 8011042:	f004 fc1a 	bl	801587a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011046:	4b33      	ldr	r3, [pc, #204]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8011048:	2204      	movs	r2, #4
 801104a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 801104e:	e00e      	b.n	801106e <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011050:	f004 fc3f 	bl	80158d2 <LoRaMacClassBIsMulticastExpected>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d009      	beq.n	801106e <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801105a:	2000      	movs	r0, #0
 801105c:	f004 fbf3 	bl	8015846 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011060:	2000      	movs	r0, #0
 8011062:	f004 fc13 	bl	801588c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8011066:	4b2b      	ldr	r3, [pc, #172]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8011068:	2205      	movs	r2, #5
 801106a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801106e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011072:	2b00      	cmp	r3, #0
 8011074:	d106      	bne.n	8011084 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011076:	4b27      	ldr	r3, [pc, #156]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8011078:	2201      	movs	r2, #1
 801107a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 801107e:	f7ff ff27 	bl	8010ed0 <PrepareRxDoneAbort>
        return;
 8011082:	e3ef      	b.n	8011864 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011084:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 801108e:	461a      	mov	r2, r3
 8011090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011094:	4413      	add	r3, r2
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 801109c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80110a4:	b2db      	uxtb	r3, r3
 80110a6:	3b01      	subs	r3, #1
 80110a8:	2b06      	cmp	r3, #6
 80110aa:	f200 83b4 	bhi.w	8011816 <ProcessRadioRxDone+0x8fa>
 80110ae:	a201      	add	r2, pc, #4	; (adr r2, 80110b4 <ProcessRadioRxDone+0x198>)
 80110b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b4:	080110d1 	.word	0x080110d1
 80110b8:	08011817 	.word	0x08011817
 80110bc:	080112b1 	.word	0x080112b1
 80110c0:	08011817 	.word	0x08011817
 80110c4:	080112a9 	.word	0x080112a9
 80110c8:	08011817 	.word	0x08011817
 80110cc:	080117bb 	.word	0x080117bb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80110d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110d4:	2b10      	cmp	r3, #16
 80110d6:	d806      	bhi.n	80110e6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110d8:	4b0e      	ldr	r3, [pc, #56]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 80110da:	2201      	movs	r2, #1
 80110dc:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80110e0:	f7ff fef6 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 80110e4:	e3be      	b.n	8011864 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 80110e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110ea:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 80110ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80110f4:	4b06      	ldr	r3, [pc, #24]	; (8011110 <ProcessRadioRxDone+0x1f4>)
 80110f6:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d010      	beq.n	8011120 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110fe:	4b05      	ldr	r3, [pc, #20]	; (8011114 <ProcessRadioRxDone+0x1f8>)
 8011100:	2201      	movs	r2, #1
 8011102:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011106:	f7ff fee3 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 801110a:	e3ab      	b.n	8011864 <ProcessRadioRxDone+0x948>
 801110c:	200015f0 	.word	0x200015f0
 8011110:	20000e80 	.word	0x20000e80
 8011114:	20000978 	.word	0x20000978
 8011118:	0801fa04 	.word	0x0801fa04
 801111c:	20000d10 	.word	0x20000d10
            }

            SecureElementGetJoinEui( joinEui );
 8011120:	1d3b      	adds	r3, r7, #4
 8011122:	4618      	mov	r0, r3
 8011124:	f7fe fa92 	bl	800f64c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8011128:	f107 0214 	add.w	r2, r7, #20
 801112c:	1d3b      	adds	r3, r7, #4
 801112e:	4619      	mov	r1, r3
 8011130:	20ff      	movs	r0, #255	; 0xff
 8011132:	f005 fdd5 	bl	8016ce0 <LoRaMacCryptoHandleJoinAccept>
 8011136:	4603      	mov	r3, r0
 8011138:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 801113c:	2300      	movs	r3, #0
 801113e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011142:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011146:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801114a:	b2db      	uxtb	r3, r3
 801114c:	b25b      	sxtb	r3, r3
 801114e:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011150:	4bbb      	ldr	r3, [pc, #748]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011152:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011156:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8011158:	4bb9      	ldr	r3, [pc, #740]	; (8011440 <ProcessRadioRxDone+0x524>)
 801115a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801115e:	4639      	mov	r1, r7
 8011160:	2207      	movs	r2, #7
 8011162:	4618      	mov	r0, r3
 8011164:	f006 fb76 	bl	8017854 <RegionVerify>
 8011168:	4603      	mov	r3, r0
 801116a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 801116e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011172:	2b00      	cmp	r3, #0
 8011174:	f040 808c 	bne.w	8011290 <ProcessRadioRxDone+0x374>
 8011178:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 8087 	beq.w	8011290 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011182:	7f7b      	ldrb	r3, [r7, #29]
 8011184:	461a      	mov	r2, r3
 8011186:	4bae      	ldr	r3, [pc, #696]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011188:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 801118c:	4bac      	ldr	r3, [pc, #688]	; (8011440 <ProcessRadioRxDone+0x524>)
 801118e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011192:	7fbb      	ldrb	r3, [r7, #30]
 8011194:	021b      	lsls	r3, r3, #8
 8011196:	4313      	orrs	r3, r2
 8011198:	4aa9      	ldr	r2, [pc, #676]	; (8011440 <ProcessRadioRxDone+0x524>)
 801119a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 801119e:	4ba8      	ldr	r3, [pc, #672]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111a4:	7ffb      	ldrb	r3, [r7, #31]
 80111a6:	041b      	lsls	r3, r3, #16
 80111a8:	4313      	orrs	r3, r2
 80111aa:	4aa5      	ldr	r2, [pc, #660]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80111b0:	6a3b      	ldr	r3, [r7, #32]
 80111b2:	4aa3      	ldr	r2, [pc, #652]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80111b8:	4ba1      	ldr	r3, [pc, #644]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80111be:	4619      	mov	r1, r3
 80111c0:	2002      	movs	r0, #2
 80111c2:	f7fe fa5b 	bl	800f67c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80111c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80111ce:	b2db      	uxtb	r3, r3
 80111d0:	461a      	mov	r2, r3
 80111d2:	4b9b      	ldr	r3, [pc, #620]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	461a      	mov	r2, r3
 80111e4:	4b96      	ldr	r3, [pc, #600]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	461a      	mov	r2, r3
 80111f6:	4b92      	ldr	r3, [pc, #584]	; (8011440 <ProcessRadioRxDone+0x524>)
 80111f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80111fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011200:	461a      	mov	r2, r3
 8011202:	4b8f      	ldr	r3, [pc, #572]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011204:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011206:	4b8e      	ldr	r3, [pc, #568]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801120a:	2b00      	cmp	r3, #0
 801120c:	d102      	bne.n	8011214 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 801120e:	4b8c      	ldr	r3, [pc, #560]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011210:	2201      	movs	r2, #1
 8011212:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011214:	4b8a      	ldr	r3, [pc, #552]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801121c:	fb02 f303 	mul.w	r3, r2, r3
 8011220:	4a87      	ldr	r2, [pc, #540]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011222:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011224:	4b86      	ldr	r3, [pc, #536]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011228:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801122c:	4a84      	ldr	r2, [pc, #528]	; (8011440 <ProcessRadioRxDone+0x524>)
 801122e:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8011230:	4b83      	ldr	r3, [pc, #524]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011232:	2201      	movs	r2, #1
 8011234:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011238:	4b81      	ldr	r3, [pc, #516]	; (8011440 <ProcessRadioRxDone+0x524>)
 801123a:	2200      	movs	r2, #0
 801123c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011240:	f107 0314 	add.w	r3, r7, #20
 8011244:	3312      	adds	r3, #18
 8011246:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011248:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801124c:	b2db      	uxtb	r3, r3
 801124e:	3b11      	subs	r3, #17
 8011250:	b2db      	uxtb	r3, r3
 8011252:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011256:	4b7a      	ldr	r3, [pc, #488]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011258:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801125c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011260:	4611      	mov	r1, r2
 8011262:	4618      	mov	r0, r3
 8011264:	f006 fb0d 	bl	8017882 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011268:	4b75      	ldr	r3, [pc, #468]	; (8011440 <ProcessRadioRxDone+0x524>)
 801126a:	2202      	movs	r2, #2
 801126c:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011270:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011274:	4618      	mov	r0, r3
 8011276:	f005 f80d 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	f000 82d2 	beq.w	8011826 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8011282:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011286:	4619      	mov	r1, r3
 8011288:	2000      	movs	r0, #0
 801128a:	f004 ff77 	bl	801617c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801128e:	e2ca      	b.n	8011826 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011290:	2001      	movs	r0, #1
 8011292:	f004 ffff 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	f000 82c3 	beq.w	8011824 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 801129e:	2101      	movs	r1, #1
 80112a0:	2007      	movs	r0, #7
 80112a2:	f004 ff6b 	bl	801617c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 80112a6:	e2bd      	b.n	8011824 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80112a8:	4b66      	ldr	r3, [pc, #408]	; (8011444 <ProcessRadioRxDone+0x528>)
 80112aa:	2201      	movs	r2, #1
 80112ac:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112b0:	4b63      	ldr	r3, [pc, #396]	; (8011440 <ProcessRadioRxDone+0x524>)
 80112b2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80112b6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80112ba:	4b62      	ldr	r3, [pc, #392]	; (8011444 <ProcessRadioRxDone+0x528>)
 80112bc:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80112c0:	b25b      	sxtb	r3, r3
 80112c2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80112c6:	230d      	movs	r3, #13
 80112c8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80112cc:	4b5c      	ldr	r3, [pc, #368]	; (8011440 <ProcessRadioRxDone+0x524>)
 80112ce:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d002      	beq.n	80112dc <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80112d6:	230e      	movs	r3, #14
 80112d8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112dc:	4b58      	ldr	r3, [pc, #352]	; (8011440 <ProcessRadioRxDone+0x524>)
 80112de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80112e6:	4611      	mov	r1, r2
 80112e8:	4618      	mov	r0, r3
 80112ea:	f006 fa78 	bl	80177de <RegionGetPhyParam>
 80112ee:	4603      	mov	r3, r0
 80112f0:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80112f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80112f6:	3b0d      	subs	r3, #13
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	b21b      	sxth	r3, r3
 80112fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011300:	b21a      	sxth	r2, r3
 8011302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011304:	b21b      	sxth	r3, r3
 8011306:	429a      	cmp	r2, r3
 8011308:	dc03      	bgt.n	8011312 <ProcessRadioRxDone+0x3f6>
 801130a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801130e:	2b0b      	cmp	r3, #11
 8011310:	d806      	bhi.n	8011320 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011312:	4b4c      	ldr	r3, [pc, #304]	; (8011444 <ProcessRadioRxDone+0x528>)
 8011314:	2201      	movs	r2, #1
 8011316:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801131a:	f7ff fdd9 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 801131e:	e2a1      	b.n	8011864 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 8011320:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011324:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 8011326:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801132a:	b2db      	uxtb	r3, r3
 801132c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011330:	4b45      	ldr	r3, [pc, #276]	; (8011448 <ProcessRadioRxDone+0x52c>)
 8011332:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011334:	23ff      	movs	r3, #255	; 0xff
 8011336:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801133a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801133e:	4618      	mov	r0, r3
 8011340:	f005 ffd0 	bl	80172e4 <LoRaMacParserData>
 8011344:	4603      	mov	r3, r0
 8011346:	2b00      	cmp	r3, #0
 8011348:	d006      	beq.n	8011358 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801134a:	4b3e      	ldr	r3, [pc, #248]	; (8011444 <ProcessRadioRxDone+0x528>)
 801134c:	2201      	movs	r2, #1
 801134e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011352:	f7ff fdbd 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 8011356:	e285      	b.n	8011864 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801135a:	4a3a      	ldr	r2, [pc, #232]	; (8011444 <ProcessRadioRxDone+0x528>)
 801135c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011360:	f107 020e 	add.w	r2, r7, #14
 8011364:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011368:	4611      	mov	r1, r2
 801136a:	4618      	mov	r0, r3
 801136c:	f002 fc6b 	bl	8013c46 <DetermineFrameType>
 8011370:	4603      	mov	r3, r0
 8011372:	2b00      	cmp	r3, #0
 8011374:	d006      	beq.n	8011384 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011376:	4b33      	ldr	r3, [pc, #204]	; (8011444 <ProcessRadioRxDone+0x528>)
 8011378:	2201      	movs	r2, #1
 801137a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801137e:	f7ff fda7 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 8011382:	e26f      	b.n	8011864 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011384:	2300      	movs	r3, #0
 8011386:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 801138a:	2300      	movs	r3, #0
 801138c:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801138e:	2300      	movs	r3, #0
 8011390:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011394:	e04f      	b.n	8011436 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011396:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 801139a:	4929      	ldr	r1, [pc, #164]	; (8011440 <ProcessRadioRxDone+0x524>)
 801139c:	4613      	mov	r3, r2
 801139e:	005b      	lsls	r3, r3, #1
 80113a0:	4413      	add	r3, r2
 80113a2:	011b      	lsls	r3, r3, #4
 80113a4:	440b      	add	r3, r1
 80113a6:	33ec      	adds	r3, #236	; 0xec
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113ac:	429a      	cmp	r2, r3
 80113ae:	d13d      	bne.n	801142c <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80113b0:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113b4:	4922      	ldr	r1, [pc, #136]	; (8011440 <ProcessRadioRxDone+0x524>)
 80113b6:	4613      	mov	r3, r2
 80113b8:	005b      	lsls	r3, r3, #1
 80113ba:	4413      	add	r3, r2
 80113bc:	011b      	lsls	r3, r3, #4
 80113be:	440b      	add	r3, r1
 80113c0:	33e9      	adds	r3, #233	; 0xe9
 80113c2:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d031      	beq.n	801142c <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 80113c8:	2301      	movs	r3, #1
 80113ca:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80113ce:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113d2:	491b      	ldr	r1, [pc, #108]	; (8011440 <ProcessRadioRxDone+0x524>)
 80113d4:	4613      	mov	r3, r2
 80113d6:	005b      	lsls	r3, r3, #1
 80113d8:	4413      	add	r3, r2
 80113da:	011b      	lsls	r3, r3, #4
 80113dc:	440b      	add	r3, r1
 80113de:	33ea      	adds	r3, #234	; 0xea
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80113e6:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113ea:	4915      	ldr	r1, [pc, #84]	; (8011440 <ProcessRadioRxDone+0x524>)
 80113ec:	4613      	mov	r3, r2
 80113ee:	005b      	lsls	r3, r3, #1
 80113f0:	4413      	add	r3, r2
 80113f2:	011b      	lsls	r3, r3, #4
 80113f4:	440b      	add	r3, r1
 80113f6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011400:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011404:	490e      	ldr	r1, [pc, #56]	; (8011440 <ProcessRadioRxDone+0x524>)
 8011406:	4613      	mov	r3, r2
 8011408:	005b      	lsls	r3, r3, #1
 801140a:	4413      	add	r3, r2
 801140c:	011b      	lsls	r3, r3, #4
 801140e:	440b      	add	r3, r1
 8011410:	33ec      	adds	r3, #236	; 0xec
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011418:	4b09      	ldr	r3, [pc, #36]	; (8011440 <ProcessRadioRxDone+0x524>)
 801141a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801141e:	2b02      	cmp	r3, #2
 8011420:	d114      	bne.n	801144c <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011422:	4b08      	ldr	r3, [pc, #32]	; (8011444 <ProcessRadioRxDone+0x528>)
 8011424:	2203      	movs	r2, #3
 8011426:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 801142a:	e00f      	b.n	801144c <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801142c:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8011430:	3301      	adds	r3, #1
 8011432:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011436:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0ab      	beq.n	8011396 <ProcessRadioRxDone+0x47a>
 801143e:	e006      	b.n	801144e <ProcessRadioRxDone+0x532>
 8011440:	20000e80 	.word	0x20000e80
 8011444:	20000978 	.word	0x20000978
 8011448:	20000bb0 	.word	0x20000bb0
                    break;
 801144c:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801144e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011452:	2b01      	cmp	r3, #1
 8011454:	d117      	bne.n	8011486 <ProcessRadioRxDone+0x56a>
 8011456:	7bbb      	ldrb	r3, [r7, #14]
 8011458:	2b03      	cmp	r3, #3
 801145a:	d10d      	bne.n	8011478 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801145c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011460:	f003 0320 	and.w	r3, r3, #32
 8011464:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011466:	2b00      	cmp	r3, #0
 8011468:	d106      	bne.n	8011478 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801146a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801146e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011472:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011474:	2b00      	cmp	r3, #0
 8011476:	d006      	beq.n	8011486 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011478:	4bb3      	ldr	r3, [pc, #716]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801147a:	2201      	movs	r2, #1
 801147c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011480:	f7ff fd26 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 8011484:	e1ee      	b.n	8011864 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011486:	2315      	movs	r3, #21
 8011488:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801148c:	4baf      	ldr	r3, [pc, #700]	; (801174c <ProcessRadioRxDone+0x830>)
 801148e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011492:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011496:	4611      	mov	r1, r2
 8011498:	4618      	mov	r0, r3
 801149a:	f006 f9a0 	bl	80177de <RegionGetPhyParam>
 801149e:	4603      	mov	r3, r0
 80114a0:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80114a2:	7bb9      	ldrb	r1, [r7, #14]
 80114a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	4da8      	ldr	r5, [pc, #672]	; (801174c <ProcessRadioRxDone+0x830>)
 80114aa:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80114ae:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80114b2:	f107 0210 	add.w	r2, r7, #16
 80114b6:	9202      	str	r2, [sp, #8]
 80114b8:	f107 020f 	add.w	r2, r7, #15
 80114bc:	9201      	str	r2, [sp, #4]
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80114c4:	4622      	mov	r2, r4
 80114c6:	f000 fe8d 	bl	80121e4 <GetFCntDown>
 80114ca:	4603      	mov	r3, r0
 80114cc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80114d0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d035      	beq.n	8011544 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80114d8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114dc:	2b07      	cmp	r3, #7
 80114de:	d119      	bne.n	8011514 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80114e0:	4b99      	ldr	r3, [pc, #612]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80114e2:	2208      	movs	r2, #8
 80114e4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80114e8:	4b98      	ldr	r3, [pc, #608]	; (801174c <ProcessRadioRxDone+0x830>)
 80114ea:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d11d      	bne.n	801152e <ProcessRadioRxDone+0x612>
 80114f2:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80114f6:	f023 031f 	bic.w	r3, r3, #31
 80114fa:	b2db      	uxtb	r3, r3
 80114fc:	2ba0      	cmp	r3, #160	; 0xa0
 80114fe:	d116      	bne.n	801152e <ProcessRadioRxDone+0x612>
 8011500:	4b92      	ldr	r3, [pc, #584]	; (801174c <ProcessRadioRxDone+0x830>)
 8011502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011506:	429a      	cmp	r2, r3
 8011508:	d111      	bne.n	801152e <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801150a:	4b90      	ldr	r3, [pc, #576]	; (801174c <ProcessRadioRxDone+0x830>)
 801150c:	2201      	movs	r2, #1
 801150e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011512:	e00c      	b.n	801152e <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011514:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011518:	2b08      	cmp	r3, #8
 801151a:	d104      	bne.n	8011526 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 801151c:	4b8a      	ldr	r3, [pc, #552]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801151e:	220a      	movs	r2, #10
 8011520:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011524:	e003      	b.n	801152e <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011526:	4b88      	ldr	r3, [pc, #544]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011528:	2201      	movs	r2, #1
 801152a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	4a85      	ldr	r2, [pc, #532]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011532:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	4a83      	ldr	r2, [pc, #524]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801153a:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 801153e:	f7ff fcc7 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 8011542:	e18f      	b.n	8011864 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011544:	7bfa      	ldrb	r2, [r7, #15]
 8011546:	6939      	ldr	r1, [r7, #16]
 8011548:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 801154c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	460b      	mov	r3, r1
 8011554:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011558:	f005 fd24 	bl	8016fa4 <LoRaMacCryptoUnsecureMessage>
 801155c:	4603      	mov	r3, r0
 801155e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011562:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011566:	2b00      	cmp	r3, #0
 8011568:	d00f      	beq.n	801158a <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801156a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801156e:	2b02      	cmp	r3, #2
 8011570:	d104      	bne.n	801157c <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011572:	4b75      	ldr	r3, [pc, #468]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011574:	220b      	movs	r2, #11
 8011576:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 801157a:	e003      	b.n	8011584 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801157c:	4b72      	ldr	r3, [pc, #456]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801157e:	220c      	movs	r2, #12
 8011580:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8011584:	f7ff fca4 	bl	8010ed0 <PrepareRxDoneAbort>
                return;
 8011588:	e16c      	b.n	8011864 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801158a:	4b6f      	ldr	r3, [pc, #444]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801158c:	2200      	movs	r2, #0
 801158e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 8011592:	4a6d      	ldr	r2, [pc, #436]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011594:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011598:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 801159c:	4b6a      	ldr	r3, [pc, #424]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801159e:	2200      	movs	r2, #0
 80115a0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 80115a4:	4b68      	ldr	r3, [pc, #416]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	4a66      	ldr	r2, [pc, #408]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115b0:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	4a64      	ldr	r2, [pc, #400]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115b8:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115bc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	bf14      	ite	ne
 80115ca:	2301      	movne	r3, #1
 80115cc:	2300      	moveq	r3, #0
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	4b5d      	ldr	r3, [pc, #372]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115d2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115d6:	4b5c      	ldr	r3, [pc, #368]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115d8:	2200      	movs	r2, #0
 80115da:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115e2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	bf14      	ite	ne
 80115ec:	2301      	movne	r3, #1
 80115ee:	2300      	moveq	r3, #0
 80115f0:	b2da      	uxtb	r2, r3
 80115f2:	4b55      	ldr	r3, [pc, #340]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115f4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115f8:	4b53      	ldr	r3, [pc, #332]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80115fa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d004      	beq.n	801160c <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011602:	4b51      	ldr	r3, [pc, #324]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011604:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011608:	2b01      	cmp	r3, #1
 801160a:	d102      	bne.n	8011612 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801160c:	4b4f      	ldr	r3, [pc, #316]	; (801174c <ProcessRadioRxDone+0x830>)
 801160e:	2200      	movs	r2, #0
 8011610:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011612:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011616:	2b01      	cmp	r3, #1
 8011618:	d104      	bne.n	8011624 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801161a:	4b4b      	ldr	r3, [pc, #300]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801161c:	2202      	movs	r2, #2
 801161e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011622:	e01f      	b.n	8011664 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011624:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011628:	f023 031f 	bic.w	r3, r3, #31
 801162c:	b2db      	uxtb	r3, r3
 801162e:	2ba0      	cmp	r3, #160	; 0xa0
 8011630:	d110      	bne.n	8011654 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011632:	4b46      	ldr	r3, [pc, #280]	; (801174c <ProcessRadioRxDone+0x830>)
 8011634:	2201      	movs	r2, #1
 8011636:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801163a:	4b44      	ldr	r3, [pc, #272]	; (801174c <ProcessRadioRxDone+0x830>)
 801163c:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011640:	2b00      	cmp	r3, #0
 8011642:	d102      	bne.n	801164a <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011646:	4a41      	ldr	r2, [pc, #260]	; (801174c <ProcessRadioRxDone+0x830>)
 8011648:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801164a:	4b3f      	ldr	r3, [pc, #252]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801164c:	2201      	movs	r2, #1
 801164e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011652:	e007      	b.n	8011664 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011654:	4b3d      	ldr	r3, [pc, #244]	; (801174c <ProcessRadioRxDone+0x830>)
 8011656:	2200      	movs	r2, #0
 8011658:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801165c:	4b3a      	ldr	r3, [pc, #232]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801165e:	2200      	movs	r2, #0
 8011660:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011664:	4b39      	ldr	r3, [pc, #228]	; (801174c <ProcessRadioRxDone+0x830>)
 8011666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801166a:	2b00      	cmp	r3, #0
 801166c:	d106      	bne.n	801167c <ProcessRadioRxDone+0x760>
 801166e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011672:	f003 0310 	and.w	r3, r3, #16
 8011676:	b2db      	uxtb	r3, r3
 8011678:	2b00      	cmp	r3, #0
 801167a:	d008      	beq.n	801168e <ProcessRadioRxDone+0x772>
 801167c:	4b33      	ldr	r3, [pc, #204]	; (801174c <ProcessRadioRxDone+0x830>)
 801167e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011682:	2b00      	cmp	r3, #0
 8011684:	d103      	bne.n	801168e <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8011686:	4b30      	ldr	r3, [pc, #192]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011688:	2201      	movs	r2, #1
 801168a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801168e:	4b2e      	ldr	r3, [pc, #184]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011690:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011694:	4a2c      	ldr	r2, [pc, #176]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011696:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 801169a:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 801169e:	4618      	mov	r0, r3
 80116a0:	f001 fef2 	bl	8013488 <RemoveMacCommands>

            switch( fType )
 80116a4:	7bbb      	ldrb	r3, [r7, #14]
 80116a6:	2b03      	cmp	r3, #3
 80116a8:	d878      	bhi.n	801179c <ProcessRadioRxDone+0x880>
 80116aa:	a201      	add	r2, pc, #4	; (adr r2, 80116b0 <ProcessRadioRxDone+0x794>)
 80116ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b0:	080116c1 	.word	0x080116c1
 80116b4:	08011711 	.word	0x08011711
 80116b8:	08011751 	.word	0x08011751
 80116bc:	08011777 	.word	0x08011777
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80116c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80116c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	461c      	mov	r4, r3
 80116cc:	4b1e      	ldr	r3, [pc, #120]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80116ce:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116d2:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80116d6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80116da:	f102 0010 	add.w	r0, r2, #16
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	460b      	mov	r3, r1
 80116e2:	4622      	mov	r2, r4
 80116e4:	2100      	movs	r1, #0
 80116e6:	f000 fef7 	bl	80124d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116ea:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116ee:	4b16      	ldr	r3, [pc, #88]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80116f0:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80116f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116f6:	4a14      	ldr	r2, [pc, #80]	; (8011748 <ProcessRadioRxDone+0x82c>)
 80116f8:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80116fc:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011700:	4b11      	ldr	r3, [pc, #68]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011702:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011706:	4b10      	ldr	r3, [pc, #64]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011708:	2201      	movs	r2, #1
 801170a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801170e:	e04c      	b.n	80117aa <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011710:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011714:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011718:	b2db      	uxtb	r3, r3
 801171a:	461c      	mov	r4, r3
 801171c:	4b0a      	ldr	r3, [pc, #40]	; (8011748 <ProcessRadioRxDone+0x82c>)
 801171e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011722:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011726:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801172a:	f102 0010 	add.w	r0, r2, #16
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	460b      	mov	r3, r1
 8011732:	4622      	mov	r2, r4
 8011734:	2100      	movs	r1, #0
 8011736:	f000 fecf 	bl	80124d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801173a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801173e:	4b02      	ldr	r3, [pc, #8]	; (8011748 <ProcessRadioRxDone+0x82c>)
 8011740:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011744:	e031      	b.n	80117aa <ProcessRadioRxDone+0x88e>
 8011746:	bf00      	nop
 8011748:	20000978 	.word	0x20000978
 801174c:	20000e80 	.word	0x20000e80
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011750:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011752:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011756:	4b45      	ldr	r3, [pc, #276]	; (801186c <ProcessRadioRxDone+0x950>)
 8011758:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801175c:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	460b      	mov	r3, r1
 8011764:	2100      	movs	r1, #0
 8011766:	f000 feb7 	bl	80124d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801176a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801176e:	4b3f      	ldr	r3, [pc, #252]	; (801186c <ProcessRadioRxDone+0x950>)
 8011770:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011774:	e019      	b.n	80117aa <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011776:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801177a:	4b3c      	ldr	r3, [pc, #240]	; (801186c <ProcessRadioRxDone+0x950>)
 801177c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011782:	4a3a      	ldr	r2, [pc, #232]	; (801186c <ProcessRadioRxDone+0x950>)
 8011784:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011788:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801178c:	4b37      	ldr	r3, [pc, #220]	; (801186c <ProcessRadioRxDone+0x950>)
 801178e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011792:	4b36      	ldr	r3, [pc, #216]	; (801186c <ProcessRadioRxDone+0x950>)
 8011794:	2201      	movs	r2, #1
 8011796:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801179a:	e006      	b.n	80117aa <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801179c:	4b33      	ldr	r3, [pc, #204]	; (801186c <ProcessRadioRxDone+0x950>)
 801179e:	2201      	movs	r2, #1
 80117a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 80117a4:	f7ff fb94 	bl	8010ed0 <PrepareRxDoneAbort>
                    break;
 80117a8:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80117aa:	4a30      	ldr	r2, [pc, #192]	; (801186c <ProcessRadioRxDone+0x950>)
 80117ac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117b0:	f043 0302 	orr.w	r3, r3, #2
 80117b4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80117b8:	e035      	b.n	8011826 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80117ba:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117c2:	18d1      	adds	r1, r2, r3
 80117c4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	461a      	mov	r2, r3
 80117d4:	4826      	ldr	r0, [pc, #152]	; (8011870 <ProcessRadioRxDone+0x954>)
 80117d6:	f008 fb1c 	bl	8019e12 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80117da:	4b24      	ldr	r3, [pc, #144]	; (801186c <ProcessRadioRxDone+0x950>)
 80117dc:	2203      	movs	r2, #3
 80117de:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117e2:	4b22      	ldr	r3, [pc, #136]	; (801186c <ProcessRadioRxDone+0x950>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80117ea:	4b20      	ldr	r3, [pc, #128]	; (801186c <ProcessRadioRxDone+0x950>)
 80117ec:	4a20      	ldr	r2, [pc, #128]	; (8011870 <ProcessRadioRxDone+0x954>)
 80117ee:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80117f2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80117f6:	b2da      	uxtb	r2, r3
 80117f8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	b2da      	uxtb	r2, r3
 8011800:	4b1a      	ldr	r3, [pc, #104]	; (801186c <ProcessRadioRxDone+0x950>)
 8011802:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011806:	4a19      	ldr	r2, [pc, #100]	; (801186c <ProcessRadioRxDone+0x950>)
 8011808:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801180c:	f043 0302 	orr.w	r3, r3, #2
 8011810:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011814:	e007      	b.n	8011826 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011816:	4b15      	ldr	r3, [pc, #84]	; (801186c <ProcessRadioRxDone+0x950>)
 8011818:	2201      	movs	r2, #1
 801181a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 801181e:	f7ff fb57 	bl	8010ed0 <PrepareRxDoneAbort>
            break;
 8011822:	e000      	b.n	8011826 <ProcessRadioRxDone+0x90a>
            break;
 8011824:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011826:	4b11      	ldr	r3, [pc, #68]	; (801186c <ProcessRadioRxDone+0x950>)
 8011828:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801182c:	2b00      	cmp	r3, #0
 801182e:	d008      	beq.n	8011842 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011830:	4b0e      	ldr	r3, [pc, #56]	; (801186c <ProcessRadioRxDone+0x950>)
 8011832:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011836:	2b00      	cmp	r3, #0
 8011838:	d00b      	beq.n	8011852 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801183a:	2000      	movs	r0, #0
 801183c:	f000 fcaa 	bl	8012194 <OnAckTimeoutTimerEvent>
 8011840:	e007      	b.n	8011852 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011842:	4b0c      	ldr	r3, [pc, #48]	; (8011874 <ProcessRadioRxDone+0x958>)
 8011844:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011848:	2b02      	cmp	r3, #2
 801184a:	d102      	bne.n	8011852 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801184c:	2000      	movs	r0, #0
 801184e:	f000 fca1 	bl	8012194 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011852:	4a06      	ldr	r2, [pc, #24]	; (801186c <ProcessRadioRxDone+0x950>)
 8011854:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011858:	f043 0310 	orr.w	r3, r3, #16
 801185c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011860:	f7ff fa6c 	bl	8010d3c <UpdateRxSlotIdleState>
}
 8011864:	3798      	adds	r7, #152	; 0x98
 8011866:	46bd      	mov	sp, r7
 8011868:	bdb0      	pop	{r4, r5, r7, pc}
 801186a:	bf00      	nop
 801186c:	20000978 	.word	0x20000978
 8011870:	20000bb0 	.word	0x20000bb0
 8011874:	20000e80 	.word	0x20000e80

08011878 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011878:	b580      	push	{r7, lr}
 801187a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801187c:	4b11      	ldr	r3, [pc, #68]	; (80118c4 <ProcessRadioTxTimeout+0x4c>)
 801187e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011882:	2b02      	cmp	r3, #2
 8011884:	d002      	beq.n	801188c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011886:	4b10      	ldr	r3, [pc, #64]	; (80118c8 <ProcessRadioTxTimeout+0x50>)
 8011888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801188a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801188c:	f7ff fa56 	bl	8010d3c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011890:	4b0e      	ldr	r3, [pc, #56]	; (80118cc <ProcessRadioTxTimeout+0x54>)
 8011892:	2202      	movs	r2, #2
 8011894:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011898:	2002      	movs	r0, #2
 801189a:	f004 fcc7 	bl	801622c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801189e:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <ProcessRadioTxTimeout+0x54>)
 80118a0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d003      	beq.n	80118b0 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 80118a8:	4b08      	ldr	r3, [pc, #32]	; (80118cc <ProcessRadioTxTimeout+0x54>)
 80118aa:	2201      	movs	r2, #1
 80118ac:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80118b0:	4a06      	ldr	r2, [pc, #24]	; (80118cc <ProcessRadioTxTimeout+0x54>)
 80118b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80118b6:	f043 0310 	orr.w	r3, r3, #16
 80118ba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80118be:	bf00      	nop
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	bf00      	nop
 80118c4:	20000e80 	.word	0x20000e80
 80118c8:	0801fa04 	.word	0x0801fa04
 80118cc:	20000978 	.word	0x20000978

080118d0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	4603      	mov	r3, r0
 80118d8:	460a      	mov	r2, r1
 80118da:	71fb      	strb	r3, [r7, #7]
 80118dc:	4613      	mov	r3, r2
 80118de:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80118e0:	2300      	movs	r3, #0
 80118e2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80118e4:	4b40      	ldr	r3, [pc, #256]	; (80119e8 <HandleRadioRxErrorTimeout+0x118>)
 80118e6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d002      	beq.n	80118f4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80118ee:	4b3f      	ldr	r3, [pc, #252]	; (80119ec <HandleRadioRxErrorTimeout+0x11c>)
 80118f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80118f4:	f003 ffdf 	bl	80158b6 <LoRaMacClassBIsBeaconExpected>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d007      	beq.n	801190e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80118fe:	2002      	movs	r0, #2
 8011900:	f003 ff8d 	bl	801581e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011904:	2000      	movs	r0, #0
 8011906:	f003 ffaf 	bl	8015868 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801190a:	2301      	movs	r3, #1
 801190c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801190e:	4b36      	ldr	r3, [pc, #216]	; (80119e8 <HandleRadioRxErrorTimeout+0x118>)
 8011910:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011914:	2b01      	cmp	r3, #1
 8011916:	d119      	bne.n	801194c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011918:	f003 ffd4 	bl	80158c4 <LoRaMacClassBIsPingExpected>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d007      	beq.n	8011932 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011922:	2000      	movs	r0, #0
 8011924:	f003 ff85 	bl	8015832 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011928:	2000      	movs	r0, #0
 801192a:	f003 ffa6 	bl	801587a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801192e:	2301      	movs	r3, #1
 8011930:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011932:	f003 ffce 	bl	80158d2 <LoRaMacClassBIsMulticastExpected>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	d007      	beq.n	801194c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801193c:	2000      	movs	r0, #0
 801193e:	f003 ff82 	bl	8015846 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011942:	2000      	movs	r0, #0
 8011944:	f003 ffa2 	bl	801588c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011948:	2301      	movs	r3, #1
 801194a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 801194c:	7bfb      	ldrb	r3, [r7, #15]
 801194e:	f083 0301 	eor.w	r3, r3, #1
 8011952:	b2db      	uxtb	r3, r3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d040      	beq.n	80119da <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011958:	4b25      	ldr	r3, [pc, #148]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 801195a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801195e:	2b00      	cmp	r3, #0
 8011960:	d122      	bne.n	80119a8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011962:	4b23      	ldr	r3, [pc, #140]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 8011964:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011968:	2b00      	cmp	r3, #0
 801196a:	d003      	beq.n	8011974 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 801196c:	4a20      	ldr	r2, [pc, #128]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 801196e:	79fb      	ldrb	r3, [r7, #7]
 8011970:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011974:	79fb      	ldrb	r3, [r7, #7]
 8011976:	4618      	mov	r0, r3
 8011978:	f004 fc58 	bl	801622c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 801197c:	4b1a      	ldr	r3, [pc, #104]	; (80119e8 <HandleRadioRxErrorTimeout+0x118>)
 801197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011980:	4618      	mov	r0, r3
 8011982:	f00c fd0d 	bl	801e3a0 <UTIL_TIMER_GetElapsedTime>
 8011986:	4602      	mov	r2, r0
 8011988:	4b19      	ldr	r3, [pc, #100]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 801198a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801198e:	429a      	cmp	r2, r3
 8011990:	d323      	bcc.n	80119da <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011992:	4818      	ldr	r0, [pc, #96]	; (80119f4 <HandleRadioRxErrorTimeout+0x124>)
 8011994:	f00c fbd8 	bl	801e148 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011998:	4a15      	ldr	r2, [pc, #84]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 801199a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801199e:	f043 0310 	orr.w	r3, r3, #16
 80119a2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80119a6:	e018      	b.n	80119da <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80119a8:	4b11      	ldr	r3, [pc, #68]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 80119aa:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d003      	beq.n	80119ba <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80119b2:	4a0f      	ldr	r2, [pc, #60]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 80119b4:	79bb      	ldrb	r3, [r7, #6]
 80119b6:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80119ba:	79bb      	ldrb	r3, [r7, #6]
 80119bc:	4618      	mov	r0, r3
 80119be:	f004 fc35 	bl	801622c <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80119c2:	4b09      	ldr	r3, [pc, #36]	; (80119e8 <HandleRadioRxErrorTimeout+0x118>)
 80119c4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d006      	beq.n	80119da <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119cc:	4a08      	ldr	r2, [pc, #32]	; (80119f0 <HandleRadioRxErrorTimeout+0x120>)
 80119ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119d2:	f043 0310 	orr.w	r3, r3, #16
 80119d6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80119da:	f7ff f9af 	bl	8010d3c <UpdateRxSlotIdleState>
}
 80119de:	bf00      	nop
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	20000e80 	.word	0x20000e80
 80119ec:	0801fa04 	.word	0x0801fa04
 80119f0:	20000978 	.word	0x20000978
 80119f4:	20000d10 	.word	0x20000d10

080119f8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80119fc:	2106      	movs	r1, #6
 80119fe:	2005      	movs	r0, #5
 8011a00:	f7ff ff66 	bl	80118d0 <HandleRadioRxErrorTimeout>
}
 8011a04:	bf00      	nop
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011a0c:	2104      	movs	r1, #4
 8011a0e:	2003      	movs	r0, #3
 8011a10:	f7ff ff5e 	bl	80118d0 <HandleRadioRxErrorTimeout>
}
 8011a14:	bf00      	nop
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b084      	sub	sp, #16
 8011a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8011a22:	607b      	str	r3, [r7, #4]
  return(result);
 8011a24:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011a26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a28:	b672      	cpsid	i
}
 8011a2a:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011a2c:	4b1d      	ldr	r3, [pc, #116]	; (8011aa4 <LoRaMacHandleIrqEvents+0x8c>)
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011a32:	4b1c      	ldr	r3, [pc, #112]	; (8011aa4 <LoRaMacHandleIrqEvents+0x8c>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	601a      	str	r2, [r3, #0]
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	f383 8810 	msr	PRIMASK, r3
}
 8011a42:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d027      	beq.n	8011a9a <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011a4a:	783b      	ldrb	r3, [r7, #0]
 8011a4c:	f003 0310 	and.w	r3, r3, #16
 8011a50:	b2db      	uxtb	r3, r3
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011a56:	f7ff f989 	bl	8010d6c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011a5a:	783b      	ldrb	r3, [r7, #0]
 8011a5c:	f003 0308 	and.w	r3, r3, #8
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d001      	beq.n	8011a6a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011a66:	f7ff fa59 	bl	8010f1c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011a6a:	783b      	ldrb	r3, [r7, #0]
 8011a6c:	f003 0304 	and.w	r3, r3, #4
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d001      	beq.n	8011a7a <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011a76:	f7ff feff 	bl	8011878 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011a7a:	783b      	ldrb	r3, [r7, #0]
 8011a7c:	f003 0302 	and.w	r3, r3, #2
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011a86:	f7ff ffb7 	bl	80119f8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011a8a:	783b      	ldrb	r3, [r7, #0]
 8011a8c:	f003 0301 	and.w	r3, r3, #1
 8011a90:	b2db      	uxtb	r3, r3
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d001      	beq.n	8011a9a <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011a96:	f7ff ffb7 	bl	8011a08 <ProcessRadioRxTimeout>
        }
    }
}
 8011a9a:	bf00      	nop
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop
 8011aa4:	200015e8 	.word	0x200015e8

08011aa8 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011aac:	4b0b      	ldr	r3, [pc, #44]	; (8011adc <LoRaMacIsBusy+0x34>)
 8011aae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d101      	bne.n	8011aba <LoRaMacIsBusy+0x12>
    {
        return false;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	e00c      	b.n	8011ad4 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011aba:	4b08      	ldr	r3, [pc, #32]	; (8011adc <LoRaMacIsBusy+0x34>)
 8011abc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d106      	bne.n	8011ad2 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011ac4:	4b05      	ldr	r3, [pc, #20]	; (8011adc <LoRaMacIsBusy+0x34>)
 8011ac6:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011aca:	2b01      	cmp	r3, #1
 8011acc:	d101      	bne.n	8011ad2 <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	e000      	b.n	8011ad4 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011ad2:	2301      	movs	r3, #1
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bc80      	pop	{r7}
 8011ada:	4770      	bx	lr
 8011adc:	20000978 	.word	0x20000978

08011ae0 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011ae4:	4b05      	ldr	r3, [pc, #20]	; (8011afc <LoRaMacIsStopped+0x1c>)
 8011ae6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d101      	bne.n	8011af2 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011aee:	2301      	movs	r3, #1
 8011af0:	e000      	b.n	8011af4 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bc80      	pop	{r7}
 8011afa:	4770      	bx	lr
 8011afc:	20000978 	.word	0x20000978

08011b00 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	4603      	mov	r3, r0
 8011b08:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011b0a:	4a04      	ldr	r2, [pc, #16]	; (8011b1c <LoRaMacEnableRequests+0x1c>)
 8011b0c:	79fb      	ldrb	r3, [r7, #7]
 8011b0e:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011b12:	bf00      	nop
 8011b14:	370c      	adds	r7, #12
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bc80      	pop	{r7}
 8011b1a:	4770      	bx	lr
 8011b1c:	20000978 	.word	0x20000978

08011b20 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011b26:	4b2c      	ldr	r3, [pc, #176]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b28:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b2c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011b2e:	4b2a      	ldr	r3, [pc, #168]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b30:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d14a      	bne.n	8011bce <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011b38:	4b27      	ldr	r3, [pc, #156]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b3a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b3e:	f003 0301 	and.w	r3, r3, #1
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d006      	beq.n	8011b56 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011b48:	4a23      	ldr	r2, [pc, #140]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b4a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b4e:	f36f 0300 	bfc	r3, #0, #1
 8011b52:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b56:	4b20      	ldr	r3, [pc, #128]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b58:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b5c:	f003 0304 	and.w	r3, r3, #4
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d006      	beq.n	8011b74 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b66:	4a1c      	ldr	r2, [pc, #112]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b68:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b6c:	f36f 0382 	bfc	r3, #2, #1
 8011b70:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b74:	2001      	movs	r0, #1
 8011b76:	f7ff ffc3 	bl	8011b00 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011b7a:	793b      	ldrb	r3, [r7, #4]
 8011b7c:	f003 0301 	and.w	r3, r3, #1
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d005      	beq.n	8011b92 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011b86:	4b14      	ldr	r3, [pc, #80]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011b88:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	4813      	ldr	r0, [pc, #76]	; (8011bdc <LoRaMacHandleRequestEvents+0xbc>)
 8011b90:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011b92:	793b      	ldrb	r3, [r7, #4]
 8011b94:	f003 0304 	and.w	r3, r3, #4
 8011b98:	b2db      	uxtb	r3, r3
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d00e      	beq.n	8011bbc <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011b9e:	4810      	ldr	r0, [pc, #64]	; (8011be0 <LoRaMacHandleRequestEvents+0xc0>)
 8011ba0:	f004 fb92 	bl	80162c8 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011ba4:	f004 fbe2 	bl	801636c <LoRaMacConfirmQueueGetCnt>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d006      	beq.n	8011bbc <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bae:	4a0a      	ldr	r2, [pc, #40]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011bb0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bb4:	f043 0304 	orr.w	r3, r3, #4
 8011bb8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011bbc:	f003 fea7 	bl	801590e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011bc0:	4a05      	ldr	r2, [pc, #20]	; (8011bd8 <LoRaMacHandleRequestEvents+0xb8>)
 8011bc2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bc6:	f36f 1304 	bfc	r3, #4, #1
 8011bca:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011bce:	bf00      	nop
 8011bd0:	3708      	adds	r7, #8
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	20000978 	.word	0x20000978
 8011bdc:	20000dac 	.word	0x20000dac
 8011be0:	20000dc0 	.word	0x20000dc0

08011be4 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011be8:	4b16      	ldr	r3, [pc, #88]	; (8011c44 <LoRaMacHandleIndicationEvents+0x60>)
 8011bea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011bee:	f003 0308 	and.w	r3, r3, #8
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d00d      	beq.n	8011c14 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011bf8:	4a12      	ldr	r2, [pc, #72]	; (8011c44 <LoRaMacHandleIndicationEvents+0x60>)
 8011bfa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bfe:	f36f 03c3 	bfc	r3, #3, #1
 8011c02:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011c06:	4b0f      	ldr	r3, [pc, #60]	; (8011c44 <LoRaMacHandleIndicationEvents+0x60>)
 8011c08:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	490e      	ldr	r1, [pc, #56]	; (8011c48 <LoRaMacHandleIndicationEvents+0x64>)
 8011c10:	480e      	ldr	r0, [pc, #56]	; (8011c4c <LoRaMacHandleIndicationEvents+0x68>)
 8011c12:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011c14:	4b0b      	ldr	r3, [pc, #44]	; (8011c44 <LoRaMacHandleIndicationEvents+0x60>)
 8011c16:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c1a:	f003 0302 	and.w	r3, r3, #2
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d00d      	beq.n	8011c40 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011c24:	4a07      	ldr	r2, [pc, #28]	; (8011c44 <LoRaMacHandleIndicationEvents+0x60>)
 8011c26:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c2a:	f36f 0341 	bfc	r3, #1, #1
 8011c2e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011c32:	4b04      	ldr	r3, [pc, #16]	; (8011c44 <LoRaMacHandleIndicationEvents+0x60>)
 8011c34:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	4903      	ldr	r1, [pc, #12]	; (8011c48 <LoRaMacHandleIndicationEvents+0x64>)
 8011c3c:	4804      	ldr	r0, [pc, #16]	; (8011c50 <LoRaMacHandleIndicationEvents+0x6c>)
 8011c3e:	4798      	blx	r3
    }
}
 8011c40:	bf00      	nop
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	20000978 	.word	0x20000978
 8011c48:	20000df4 	.word	0x20000df4
 8011c4c:	20000dd4 	.word	0x20000dd4
 8011c50:	20000d90 	.word	0x20000d90

08011c54 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011c5a:	4b32      	ldr	r3, [pc, #200]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c5c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c60:	f003 0301 	and.w	r3, r3, #1
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d058      	beq.n	8011d1c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c72:	4b2c      	ldr	r3, [pc, #176]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c74:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d004      	beq.n	8011c86 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011c7c:	4b29      	ldr	r3, [pc, #164]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c7e:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c82:	2b03      	cmp	r3, #3
 8011c84:	d104      	bne.n	8011c90 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011c86:	f002 f82d 	bl	8013ce4 <CheckRetransUnconfirmedUplink>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	71fb      	strb	r3, [r7, #7]
 8011c8e:	e020      	b.n	8011cd2 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011c90:	4b24      	ldr	r3, [pc, #144]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c92:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d11b      	bne.n	8011cd2 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011c9a:	4b22      	ldr	r3, [pc, #136]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c9c:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d014      	beq.n	8011cce <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011ca4:	f002 f84a 	bl	8013d3c <CheckRetransConfirmedUplink>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011cac:	4b1e      	ldr	r3, [pc, #120]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd4>)
 8011cae:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d10d      	bne.n	8011cd2 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011cb6:	79fb      	ldrb	r3, [r7, #7]
 8011cb8:	f083 0301 	eor.w	r3, r3, #1
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d002      	beq.n	8011cc8 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011cc2:	f002 f8cd 	bl	8013e60 <AckTimeoutRetriesProcess>
 8011cc6:	e004      	b.n	8011cd2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011cc8:	f002 f908 	bl	8013edc <AckTimeoutRetriesFinalize>
 8011ccc:	e001      	b.n	8011cd2 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011cd2:	79fb      	ldrb	r3, [r7, #7]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d00d      	beq.n	8011cf4 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011cd8:	4814      	ldr	r0, [pc, #80]	; (8011d2c <LoRaMacHandleMcpsRequest+0xd8>)
 8011cda:	f00c fa35 	bl	801e148 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011cde:	4b11      	ldr	r3, [pc, #68]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ce0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ce4:	f023 0320 	bic.w	r3, r3, #32
 8011ce8:	4a0e      	ldr	r2, [pc, #56]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cea:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011cee:	f002 f847 	bl	8013d80 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011cf2:	e013      	b.n	8011d1c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011cf4:	79bb      	ldrb	r3, [r7, #6]
 8011cf6:	f083 0301 	eor.w	r3, r3, #1
 8011cfa:	b2db      	uxtb	r3, r3
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d00d      	beq.n	8011d1c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011d00:	4a08      	ldr	r2, [pc, #32]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d02:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d06:	f36f 1304 	bfc	r3, #4, #1
 8011d0a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011d0e:	4b05      	ldr	r3, [pc, #20]	; (8011d24 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d10:	2200      	movs	r2, #0
 8011d12:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8011d16:	2000      	movs	r0, #0
 8011d18:	f000 f992 	bl	8012040 <OnTxDelayedTimerEvent>
}
 8011d1c:	bf00      	nop
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	20000978 	.word	0x20000978
 8011d28:	20000e80 	.word	0x20000e80
 8011d2c:	20000ce0 	.word	0x20000ce0

08011d30 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d34:	4b1b      	ldr	r3, [pc, #108]	; (8011da4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d36:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d3a:	f003 0304 	and.w	r3, r3, #4
 8011d3e:	b2db      	uxtb	r3, r3
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d02c      	beq.n	8011d9e <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011d44:	2001      	movs	r0, #1
 8011d46:	f004 faa5 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d012      	beq.n	8011d76 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011d50:	2001      	movs	r0, #1
 8011d52:	f004 fa41 	bl	80161d8 <LoRaMacConfirmQueueGetStatus>
 8011d56:	4603      	mov	r3, r0
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d103      	bne.n	8011d64 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011d5c:	4b11      	ldr	r3, [pc, #68]	; (8011da4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d5e:	2200      	movs	r2, #0
 8011d60:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d64:	4b0f      	ldr	r3, [pc, #60]	; (8011da4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d66:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d6a:	f023 0302 	bic.w	r3, r3, #2
 8011d6e:	4a0d      	ldr	r2, [pc, #52]	; (8011da4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d70:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011d74:	e013      	b.n	8011d9e <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d76:	2006      	movs	r0, #6
 8011d78:	f004 fa8c 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d105      	bne.n	8011d8e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011d82:	2007      	movs	r0, #7
 8011d84:	f004 fa86 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8011d88:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d007      	beq.n	8011d9e <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d8e:	4b05      	ldr	r3, [pc, #20]	; (8011da4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d94:	f023 0302 	bic.w	r3, r3, #2
 8011d98:	4a02      	ldr	r2, [pc, #8]	; (8011da4 <LoRaMacHandleMlmeRequest+0x74>)
 8011d9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011d9e:	bf00      	nop
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	20000978 	.word	0x20000978

08011da8 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011dac:	200c      	movs	r0, #12
 8011dae:	f004 fa71 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d019      	beq.n	8011dec <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011db8:	4b0e      	ldr	r3, [pc, #56]	; (8011df4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dba:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dbe:	f003 0301 	and.w	r3, r3, #1
 8011dc2:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d111      	bne.n	8011dec <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011dc8:	4b0a      	ldr	r3, [pc, #40]	; (8011df4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dce:	f003 0304 	and.w	r3, r3, #4
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d009      	beq.n	8011dec <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011dd8:	4b06      	ldr	r3, [pc, #24]	; (8011df4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dda:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dde:	f023 0302 	bic.w	r3, r3, #2
 8011de2:	4a04      	ldr	r2, [pc, #16]	; (8011df4 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011de4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011de8:	2301      	movs	r3, #1
 8011dea:	e000      	b.n	8011dee <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	20000978 	.word	0x20000978

08011df8 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011df8:	b480      	push	{r7}
 8011dfa:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011dfc:	4b0d      	ldr	r3, [pc, #52]	; (8011e34 <LoRaMacCheckForRxAbort+0x3c>)
 8011dfe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d00f      	beq.n	8011e2a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011e0a:	4b0a      	ldr	r3, [pc, #40]	; (8011e34 <LoRaMacCheckForRxAbort+0x3c>)
 8011e0c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e14:	4a07      	ldr	r2, [pc, #28]	; (8011e34 <LoRaMacCheckForRxAbort+0x3c>)
 8011e16:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e1a:	4b06      	ldr	r3, [pc, #24]	; (8011e34 <LoRaMacCheckForRxAbort+0x3c>)
 8011e1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e20:	f023 0302 	bic.w	r3, r3, #2
 8011e24:	4a03      	ldr	r2, [pc, #12]	; (8011e34 <LoRaMacCheckForRxAbort+0x3c>)
 8011e26:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011e2a:	bf00      	nop
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bc80      	pop	{r7}
 8011e30:	4770      	bx	lr
 8011e32:	bf00      	nop
 8011e34:	20000978 	.word	0x20000978

08011e38 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011e40:	2300      	movs	r3, #0
 8011e42:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011e44:	2300      	movs	r3, #0
 8011e46:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011e48:	4b50      	ldr	r3, [pc, #320]	; (8011f8c <LoRaMacHandleNvm+0x154>)
 8011e4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f040 8098 	bne.w	8011f84 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2124      	movs	r1, #36	; 0x24
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f008 f82f 	bl	8019ebc <Crc32>
 8011e5e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e64:	68ba      	ldr	r2, [r7, #8]
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d006      	beq.n	8011e78 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	68ba      	ldr	r2, [r7, #8]
 8011e6e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011e70:	89fb      	ldrh	r3, [r7, #14]
 8011e72:	f043 0301 	orr.w	r3, r3, #1
 8011e76:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	3328      	adds	r3, #40	; 0x28
 8011e7c:	211c      	movs	r1, #28
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f008 f81c 	bl	8019ebc <Crc32>
 8011e84:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d006      	beq.n	8011e9e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011e96:	89fb      	ldrh	r3, [r7, #14]
 8011e98:	f043 0302 	orr.w	r3, r3, #2
 8011e9c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	3348      	adds	r3, #72	; 0x48
 8011ea2:	21fc      	movs	r1, #252	; 0xfc
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f008 f809 	bl	8019ebc <Crc32>
 8011eaa:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011eb2:	68ba      	ldr	r2, [r7, #8]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d007      	beq.n	8011ec8 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	68ba      	ldr	r2, [r7, #8]
 8011ebc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011ec0:	89fb      	ldrh	r3, [r7, #14]
 8011ec2:	f043 0304 	orr.w	r3, r3, #4
 8011ec6:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011ece:	21d4      	movs	r1, #212	; 0xd4
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f007 fff3 	bl	8019ebc <Crc32>
 8011ed6:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011ede:	68ba      	ldr	r2, [r7, #8]
 8011ee0:	429a      	cmp	r2, r3
 8011ee2:	d007      	beq.n	8011ef4 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68ba      	ldr	r2, [r7, #8]
 8011ee8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011eec:	89fb      	ldrh	r3, [r7, #14]
 8011eee:	f043 0308 	orr.w	r3, r3, #8
 8011ef2:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011efa:	2190      	movs	r1, #144	; 0x90
 8011efc:	4618      	mov	r0, r3
 8011efe:	f007 ffdd 	bl	8019ebc <Crc32>
 8011f02:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f0a:	68ba      	ldr	r2, [r7, #8]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d007      	beq.n	8011f20 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	68ba      	ldr	r2, [r7, #8]
 8011f14:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011f18:	89fb      	ldrh	r3, [r7, #14]
 8011f1a:	f043 0310 	orr.w	r3, r3, #16
 8011f1e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011f26:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f007 ffc6 	bl	8019ebc <Crc32>
 8011f30:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011f38:	68ba      	ldr	r2, [r7, #8]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d007      	beq.n	8011f4e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68ba      	ldr	r2, [r7, #8]
 8011f42:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011f46:	89fb      	ldrh	r3, [r7, #14]
 8011f48:	f043 0320 	orr.w	r3, r3, #32
 8011f4c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011f54:	2114      	movs	r1, #20
 8011f56:	4618      	mov	r0, r3
 8011f58:	f007 ffb0 	bl	8019ebc <Crc32>
 8011f5c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d007      	beq.n	8011f7a <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011f72:	89fb      	ldrh	r3, [r7, #14]
 8011f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f78:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011f7a:	89fb      	ldrh	r3, [r7, #14]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f001 ff51 	bl	8013e24 <CallNvmDataChangeCallback>
 8011f82:	e000      	b.n	8011f86 <LoRaMacHandleNvm+0x14e>
        return;
 8011f84:	bf00      	nop
}
 8011f86:	3710      	adds	r7, #16
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}
 8011f8c:	20000978 	.word	0x20000978

08011f90 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011f96:	2300      	movs	r3, #0
 8011f98:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011f9a:	f7ff fd3d 	bl	8011a18 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011f9e:	f003 fd1a 	bl	80159d6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011fa2:	4b25      	ldr	r3, [pc, #148]	; (8012038 <LoRaMacProcess+0xa8>)
 8011fa4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011fa8:	f003 0310 	and.w	r3, r3, #16
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d023      	beq.n	8011ffa <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011fb2:	2000      	movs	r0, #0
 8011fb4:	f7ff fda4 	bl	8011b00 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011fb8:	f7ff ff1e 	bl	8011df8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011fbc:	f001 ffc2 	bl	8013f44 <IsRequestPending>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d006      	beq.n	8011fd4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011fc6:	f7ff feef 	bl	8011da8 <LoRaMacCheckForBeaconAcquisition>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	461a      	mov	r2, r3
 8011fce:	79fb      	ldrb	r3, [r7, #7]
 8011fd0:	4313      	orrs	r3, r2
 8011fd2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011fd4:	79fb      	ldrb	r3, [r7, #7]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d103      	bne.n	8011fe2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011fda:	f7ff fea9 	bl	8011d30 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011fde:	f7ff fe39 	bl	8011c54 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011fe2:	f7ff fd9d 	bl	8011b20 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011fe6:	2001      	movs	r0, #1
 8011fe8:	f7ff fd8a 	bl	8011b00 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011fec:	4a12      	ldr	r2, [pc, #72]	; (8012038 <LoRaMacProcess+0xa8>)
 8011fee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011ff2:	f043 0320 	orr.w	r3, r3, #32
 8011ff6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8011ffa:	f7ff fdf3 	bl	8011be4 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011ffe:	4b0e      	ldr	r3, [pc, #56]	; (8012038 <LoRaMacProcess+0xa8>)
 8012000:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012004:	2b02      	cmp	r3, #2
 8012006:	d101      	bne.n	801200c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8012008:	f001 fbb8 	bl	801377c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801200c:	4b0a      	ldr	r3, [pc, #40]	; (8012038 <LoRaMacProcess+0xa8>)
 801200e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012012:	f003 0320 	and.w	r3, r3, #32
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b00      	cmp	r3, #0
 801201a:	d009      	beq.n	8012030 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801201c:	4a06      	ldr	r2, [pc, #24]	; (8012038 <LoRaMacProcess+0xa8>)
 801201e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012022:	f36f 1345 	bfc	r3, #5, #1
 8012026:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 801202a:	4804      	ldr	r0, [pc, #16]	; (801203c <LoRaMacProcess+0xac>)
 801202c:	f7ff ff04 	bl	8011e38 <LoRaMacHandleNvm>
    }
}
 8012030:	bf00      	nop
 8012032:	3708      	adds	r7, #8
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	20000978 	.word	0x20000978
 801203c:	20000e80 	.word	0x20000e80

08012040 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b082      	sub	sp, #8
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012048:	4817      	ldr	r0, [pc, #92]	; (80120a8 <OnTxDelayedTimerEvent+0x68>)
 801204a:	f00c f87d 	bl	801e148 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801204e:	4b17      	ldr	r3, [pc, #92]	; (80120ac <OnTxDelayedTimerEvent+0x6c>)
 8012050:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012054:	f023 0320 	bic.w	r3, r3, #32
 8012058:	4a14      	ldr	r2, [pc, #80]	; (80120ac <OnTxDelayedTimerEvent+0x6c>)
 801205a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801205e:	2001      	movs	r0, #1
 8012060:	f001 f8e4 	bl	801322c <ScheduleTx>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	d018      	beq.n	801209c <OnTxDelayedTimerEvent+0x5c>
 801206a:	2b0b      	cmp	r3, #11
 801206c:	d016      	beq.n	801209c <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801206e:	4b10      	ldr	r3, [pc, #64]	; (80120b0 <OnTxDelayedTimerEvent+0x70>)
 8012070:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012074:	b2da      	uxtb	r2, r3
 8012076:	4b0d      	ldr	r3, [pc, #52]	; (80120ac <OnTxDelayedTimerEvent+0x6c>)
 8012078:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801207c:	4b0b      	ldr	r3, [pc, #44]	; (80120ac <OnTxDelayedTimerEvent+0x6c>)
 801207e:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012082:	4b0a      	ldr	r3, [pc, #40]	; (80120ac <OnTxDelayedTimerEvent+0x6c>)
 8012084:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012088:	4b08      	ldr	r3, [pc, #32]	; (80120ac <OnTxDelayedTimerEvent+0x6c>)
 801208a:	2209      	movs	r2, #9
 801208c:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8012090:	2009      	movs	r0, #9
 8012092:	f004 f8cb 	bl	801622c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8012096:	f001 fe73 	bl	8013d80 <StopRetransmission>
            break;
 801209a:	e000      	b.n	801209e <OnTxDelayedTimerEvent+0x5e>
            break;
 801209c:	bf00      	nop
        }
    }
}
 801209e:	bf00      	nop
 80120a0:	3708      	adds	r7, #8
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	20000ce0 	.word	0x20000ce0
 80120ac:	20000978 	.word	0x20000978
 80120b0:	20000e80 	.word	0x20000e80

080120b4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80120bc:	4b14      	ldr	r3, [pc, #80]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120be:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80120c2:	4b13      	ldr	r3, [pc, #76]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120c4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80120c8:	4b12      	ldr	r3, [pc, #72]	; (8012114 <OnRxWindow1TimerEvent+0x60>)
 80120ca:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80120ce:	b25a      	sxtb	r2, r3
 80120d0:	4b0f      	ldr	r3, [pc, #60]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120d2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120d6:	4b0f      	ldr	r3, [pc, #60]	; (8012114 <OnRxWindow1TimerEvent+0x60>)
 80120d8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80120dc:	4b0c      	ldr	r3, [pc, #48]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120de:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80120e2:	4b0c      	ldr	r3, [pc, #48]	; (8012114 <OnRxWindow1TimerEvent+0x60>)
 80120e4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80120e8:	4b09      	ldr	r3, [pc, #36]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120ea:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80120ee:	4b08      	ldr	r3, [pc, #32]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80120f6:	4b06      	ldr	r3, [pc, #24]	; (8012110 <OnRxWindow1TimerEvent+0x5c>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80120fe:	4906      	ldr	r1, [pc, #24]	; (8012118 <OnRxWindow1TimerEvent+0x64>)
 8012100:	4806      	ldr	r0, [pc, #24]	; (801211c <OnRxWindow1TimerEvent+0x68>)
 8012102:	f001 fb07 	bl	8013714 <RxWindowSetup>
}
 8012106:	bf00      	nop
 8012108:	3708      	adds	r7, #8
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	20000978 	.word	0x20000978
 8012114:	20000e80 	.word	0x20000e80
 8012118:	20000d30 	.word	0x20000d30
 801211c:	20000cf8 	.word	0x20000cf8

08012120 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012128:	4b16      	ldr	r3, [pc, #88]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 801212a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801212e:	2b00      	cmp	r3, #0
 8012130:	d023      	beq.n	801217a <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012132:	4b14      	ldr	r3, [pc, #80]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 8012134:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012138:	4b12      	ldr	r3, [pc, #72]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 801213a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801213e:	4b12      	ldr	r3, [pc, #72]	; (8012188 <OnRxWindow2TimerEvent+0x68>)
 8012140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012142:	4a10      	ldr	r2, [pc, #64]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 8012144:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012148:	4b0f      	ldr	r3, [pc, #60]	; (8012188 <OnRxWindow2TimerEvent+0x68>)
 801214a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801214e:	4b0d      	ldr	r3, [pc, #52]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 8012150:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012154:	4b0c      	ldr	r3, [pc, #48]	; (8012188 <OnRxWindow2TimerEvent+0x68>)
 8012156:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801215a:	4b0a      	ldr	r3, [pc, #40]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 801215c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012160:	4b08      	ldr	r3, [pc, #32]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 8012162:	2200      	movs	r2, #0
 8012164:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012168:	4b06      	ldr	r3, [pc, #24]	; (8012184 <OnRxWindow2TimerEvent+0x64>)
 801216a:	2201      	movs	r2, #1
 801216c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8012170:	4906      	ldr	r1, [pc, #24]	; (801218c <OnRxWindow2TimerEvent+0x6c>)
 8012172:	4807      	ldr	r0, [pc, #28]	; (8012190 <OnRxWindow2TimerEvent+0x70>)
 8012174:	f001 face 	bl	8013714 <RxWindowSetup>
 8012178:	e000      	b.n	801217c <OnRxWindow2TimerEvent+0x5c>
        return;
 801217a:	bf00      	nop
}
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	20000978 	.word	0x20000978
 8012188:	20000e80 	.word	0x20000e80
 801218c:	20000d44 	.word	0x20000d44
 8012190:	20000d10 	.word	0x20000d10

08012194 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b082      	sub	sp, #8
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 801219c:	480e      	ldr	r0, [pc, #56]	; (80121d8 <OnAckTimeoutTimerEvent+0x44>)
 801219e:	f00b ffd3 	bl	801e148 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80121a2:	4b0e      	ldr	r3, [pc, #56]	; (80121dc <OnAckTimeoutTimerEvent+0x48>)
 80121a4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d003      	beq.n	80121b4 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80121ac:	4b0b      	ldr	r3, [pc, #44]	; (80121dc <OnAckTimeoutTimerEvent+0x48>)
 80121ae:	2201      	movs	r2, #1
 80121b0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80121b4:	4b0a      	ldr	r3, [pc, #40]	; (80121e0 <OnAckTimeoutTimerEvent+0x4c>)
 80121b6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80121ba:	2b02      	cmp	r3, #2
 80121bc:	d106      	bne.n	80121cc <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80121be:	4a07      	ldr	r2, [pc, #28]	; (80121dc <OnAckTimeoutTimerEvent+0x48>)
 80121c0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80121c4:	f043 0310 	orr.w	r3, r3, #16
 80121c8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 80121cc:	f001 fe14 	bl	8013df8 <OnMacProcessNotify>
}
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	20000d6c 	.word	0x20000d6c
 80121dc:	20000978 	.word	0x20000978
 80121e0:	20000e80 	.word	0x20000e80

080121e4 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60ba      	str	r2, [r7, #8]
 80121ec:	607b      	str	r3, [r7, #4]
 80121ee:	4603      	mov	r3, r0
 80121f0:	73fb      	strb	r3, [r7, #15]
 80121f2:	460b      	mov	r3, r1
 80121f4:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d005      	beq.n	8012208 <GetFCntDown+0x24>
 80121fc:	69fb      	ldr	r3, [r7, #28]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d002      	beq.n	8012208 <GetFCntDown+0x24>
 8012202:	6a3b      	ldr	r3, [r7, #32]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012208:	230a      	movs	r3, #10
 801220a:	e029      	b.n	8012260 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 801220c:	7bfb      	ldrb	r3, [r7, #15]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d016      	beq.n	8012240 <GetFCntDown+0x5c>
 8012212:	2b01      	cmp	r3, #1
 8012214:	d118      	bne.n	8012248 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012216:	79bb      	ldrb	r3, [r7, #6]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d10d      	bne.n	8012238 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801221c:	7bbb      	ldrb	r3, [r7, #14]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d002      	beq.n	8012228 <GetFCntDown+0x44>
 8012222:	7bbb      	ldrb	r3, [r7, #14]
 8012224:	2b03      	cmp	r3, #3
 8012226:	d103      	bne.n	8012230 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012228:	69fb      	ldr	r3, [r7, #28]
 801222a:	2202      	movs	r2, #2
 801222c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801222e:	e00d      	b.n	801224c <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2201      	movs	r2, #1
 8012234:	701a      	strb	r2, [r3, #0]
            break;
 8012236:	e009      	b.n	801224c <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2203      	movs	r2, #3
 801223c:	701a      	strb	r2, [r3, #0]
            break;
 801223e:	e005      	b.n	801224c <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012240:	69fb      	ldr	r3, [r7, #28]
 8012242:	2204      	movs	r2, #4
 8012244:	701a      	strb	r2, [r3, #0]
            break;
 8012246:	e001      	b.n	801224c <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012248:	2305      	movs	r3, #5
 801224a:	e009      	b.n	8012260 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	7818      	ldrb	r0, [r3, #0]
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	89db      	ldrh	r3, [r3, #14]
 8012254:	461a      	mov	r2, r3
 8012256:	8b39      	ldrh	r1, [r7, #24]
 8012258:	6a3b      	ldr	r3, [r7, #32]
 801225a:	f004 fc25 	bl	8016aa8 <LoRaMacCryptoGetFCntDown>
 801225e:	4603      	mov	r3, r0
}
 8012260:	4618      	mov	r0, r3
 8012262:	3710      	adds	r7, #16
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012268:	b5b0      	push	{r4, r5, r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	4603      	mov	r3, r0
 8012270:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012272:	2303      	movs	r3, #3
 8012274:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012276:	4b6d      	ldr	r3, [pc, #436]	; (801242c <SwitchClass+0x1c4>)
 8012278:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801227c:	2b02      	cmp	r3, #2
 801227e:	f000 80b9 	beq.w	80123f4 <SwitchClass+0x18c>
 8012282:	2b02      	cmp	r3, #2
 8012284:	f300 80cc 	bgt.w	8012420 <SwitchClass+0x1b8>
 8012288:	2b00      	cmp	r3, #0
 801228a:	d003      	beq.n	8012294 <SwitchClass+0x2c>
 801228c:	2b01      	cmp	r3, #1
 801228e:	f000 80a3 	beq.w	80123d8 <SwitchClass+0x170>
 8012292:	e0c5      	b.n	8012420 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012294:	79fb      	ldrb	r3, [r7, #7]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d109      	bne.n	80122ae <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801229a:	4b64      	ldr	r3, [pc, #400]	; (801242c <SwitchClass+0x1c4>)
 801229c:	4a63      	ldr	r2, [pc, #396]	; (801242c <SwitchClass+0x1c4>)
 801229e:	3374      	adds	r3, #116	; 0x74
 80122a0:	326c      	adds	r2, #108	; 0x6c
 80122a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122a6:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80122aa:	2300      	movs	r3, #0
 80122ac:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d10c      	bne.n	80122ce <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80122b4:	79fb      	ldrb	r3, [r7, #7]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f003 fb2f 	bl	801591a <LoRaMacClassBSwitchClass>
 80122bc:	4603      	mov	r3, r0
 80122be:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80122c0:	7bfb      	ldrb	r3, [r7, #15]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d103      	bne.n	80122ce <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80122c6:	4a59      	ldr	r2, [pc, #356]	; (801242c <SwitchClass+0x1c4>)
 80122c8:	79fb      	ldrb	r3, [r7, #7]
 80122ca:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	f040 80a0 	bne.w	8012416 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80122d6:	4a55      	ldr	r2, [pc, #340]	; (801242c <SwitchClass+0x1c4>)
 80122d8:	79fb      	ldrb	r3, [r7, #7]
 80122da:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80122de:	4a54      	ldr	r2, [pc, #336]	; (8012430 <SwitchClass+0x1c8>)
 80122e0:	4b53      	ldr	r3, [pc, #332]	; (8012430 <SwitchClass+0x1c8>)
 80122e2:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80122e6:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80122ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122ee:	682b      	ldr	r3, [r5, #0]
 80122f0:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122f2:	4b4f      	ldr	r3, [pc, #316]	; (8012430 <SwitchClass+0x1c8>)
 80122f4:	2202      	movs	r2, #2
 80122f6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80122fa:	2300      	movs	r3, #0
 80122fc:	73bb      	strb	r3, [r7, #14]
 80122fe:	e05b      	b.n	80123b8 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012300:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012304:	4949      	ldr	r1, [pc, #292]	; (801242c <SwitchClass+0x1c4>)
 8012306:	4613      	mov	r3, r2
 8012308:	005b      	lsls	r3, r3, #1
 801230a:	4413      	add	r3, r2
 801230c:	011b      	lsls	r3, r3, #4
 801230e:	440b      	add	r3, r1
 8012310:	33e9      	adds	r3, #233	; 0xe9
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d049      	beq.n	80123ac <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012318:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801231c:	4943      	ldr	r1, [pc, #268]	; (801242c <SwitchClass+0x1c4>)
 801231e:	4613      	mov	r3, r2
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	4413      	add	r3, r2
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	440b      	add	r3, r1
 8012328:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801232c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801232e:	2b02      	cmp	r3, #2
 8012330:	d13c      	bne.n	80123ac <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8012332:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012336:	493d      	ldr	r1, [pc, #244]	; (801242c <SwitchClass+0x1c4>)
 8012338:	4613      	mov	r3, r2
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	4413      	add	r3, r2
 801233e:	011b      	lsls	r3, r3, #4
 8012340:	440b      	add	r3, r1
 8012342:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	4a38      	ldr	r2, [pc, #224]	; (801242c <SwitchClass+0x1c4>)
 801234a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801234c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012350:	4936      	ldr	r1, [pc, #216]	; (801242c <SwitchClass+0x1c4>)
 8012352:	4613      	mov	r3, r2
 8012354:	005b      	lsls	r3, r3, #1
 8012356:	4413      	add	r3, r2
 8012358:	011b      	lsls	r3, r3, #4
 801235a:	440b      	add	r3, r1
 801235c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012360:	f993 3000 	ldrsb.w	r3, [r3]
 8012364:	b2da      	uxtb	r2, r3
 8012366:	4b31      	ldr	r3, [pc, #196]	; (801242c <SwitchClass+0x1c4>)
 8012368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801236c:	4b30      	ldr	r3, [pc, #192]	; (8012430 <SwitchClass+0x1c8>)
 801236e:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012372:	4b2f      	ldr	r3, [pc, #188]	; (8012430 <SwitchClass+0x1c8>)
 8012374:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012378:	4b2c      	ldr	r3, [pc, #176]	; (801242c <SwitchClass+0x1c4>)
 801237a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801237c:	4a2c      	ldr	r2, [pc, #176]	; (8012430 <SwitchClass+0x1c8>)
 801237e:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012382:	4b2a      	ldr	r3, [pc, #168]	; (801242c <SwitchClass+0x1c4>)
 8012384:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012388:	4b29      	ldr	r3, [pc, #164]	; (8012430 <SwitchClass+0x1c8>)
 801238a:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801238e:	4b27      	ldr	r3, [pc, #156]	; (801242c <SwitchClass+0x1c4>)
 8012390:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012394:	4b26      	ldr	r3, [pc, #152]	; (8012430 <SwitchClass+0x1c8>)
 8012396:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801239a:	4b25      	ldr	r3, [pc, #148]	; (8012430 <SwitchClass+0x1c8>)
 801239c:	2203      	movs	r2, #3
 801239e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80123a2:	4b23      	ldr	r3, [pc, #140]	; (8012430 <SwitchClass+0x1c8>)
 80123a4:	2201      	movs	r2, #1
 80123a6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80123aa:	e009      	b.n	80123c0 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80123ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	3301      	adds	r3, #1
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	73bb      	strb	r3, [r7, #14]
 80123b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	dd9f      	ble.n	8012300 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80123c0:	4b1b      	ldr	r3, [pc, #108]	; (8012430 <SwitchClass+0x1c8>)
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80123c8:	4b1a      	ldr	r3, [pc, #104]	; (8012434 <SwitchClass+0x1cc>)
 80123ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123cc:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80123ce:	f001 f9d5 	bl	801377c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80123d2:	2300      	movs	r3, #0
 80123d4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80123d6:	e01e      	b.n	8012416 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80123d8:	79fb      	ldrb	r3, [r7, #7]
 80123da:	4618      	mov	r0, r3
 80123dc:	f003 fa9d 	bl	801591a <LoRaMacClassBSwitchClass>
 80123e0:	4603      	mov	r3, r0
 80123e2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80123e4:	7bfb      	ldrb	r3, [r7, #15]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d117      	bne.n	801241a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80123ea:	4a10      	ldr	r2, [pc, #64]	; (801242c <SwitchClass+0x1c4>)
 80123ec:	79fb      	ldrb	r3, [r7, #7]
 80123ee:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80123f2:	e012      	b.n	801241a <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80123f4:	79fb      	ldrb	r3, [r7, #7]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d111      	bne.n	801241e <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80123fa:	4b0d      	ldr	r3, [pc, #52]	; (8012430 <SwitchClass+0x1c8>)
 80123fc:	2206      	movs	r2, #6
 80123fe:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012402:	4a0a      	ldr	r2, [pc, #40]	; (801242c <SwitchClass+0x1c4>)
 8012404:	79fb      	ldrb	r3, [r7, #7]
 8012406:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801240a:	4b0a      	ldr	r3, [pc, #40]	; (8012434 <SwitchClass+0x1cc>)
 801240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801240e:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012410:	2300      	movs	r3, #0
 8012412:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012414:	e003      	b.n	801241e <SwitchClass+0x1b6>
            break;
 8012416:	bf00      	nop
 8012418:	e002      	b.n	8012420 <SwitchClass+0x1b8>
            break;
 801241a:	bf00      	nop
 801241c:	e000      	b.n	8012420 <SwitchClass+0x1b8>
            break;
 801241e:	bf00      	nop
        }
    }

    return status;
 8012420:	7bfb      	ldrb	r3, [r7, #15]
}
 8012422:	4618      	mov	r0, r3
 8012424:	3710      	adds	r7, #16
 8012426:	46bd      	mov	sp, r7
 8012428:	bdb0      	pop	{r4, r5, r7, pc}
 801242a:	bf00      	nop
 801242c:	20000e80 	.word	0x20000e80
 8012430:	20000978 	.word	0x20000978
 8012434:	0801fa04 	.word	0x0801fa04

08012438 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b086      	sub	sp, #24
 801243c:	af00      	add	r7, sp, #0
 801243e:	4603      	mov	r3, r0
 8012440:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012442:	4b10      	ldr	r3, [pc, #64]	; (8012484 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012444:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012448:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801244a:	79fb      	ldrb	r3, [r7, #7]
 801244c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801244e:	230d      	movs	r3, #13
 8012450:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012452:	4b0c      	ldr	r3, [pc, #48]	; (8012484 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012454:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801245c:	230e      	movs	r3, #14
 801245e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012460:	4b08      	ldr	r3, [pc, #32]	; (8012484 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012462:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012466:	f107 0210 	add.w	r2, r7, #16
 801246a:	4611      	mov	r1, r2
 801246c:	4618      	mov	r0, r3
 801246e:	f005 f9b6 	bl	80177de <RegionGetPhyParam>
 8012472:	4603      	mov	r3, r0
 8012474:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	b2db      	uxtb	r3, r3
}
 801247a:	4618      	mov	r0, r3
 801247c:	3718      	adds	r7, #24
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
 8012482:	bf00      	nop
 8012484:	20000e80 	.word	0x20000e80

08012488 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	4603      	mov	r3, r0
 8012490:	71fb      	strb	r3, [r7, #7]
 8012492:	460b      	mov	r3, r1
 8012494:	71bb      	strb	r3, [r7, #6]
 8012496:	4613      	mov	r3, r2
 8012498:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801249a:	2300      	movs	r3, #0
 801249c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801249e:	2300      	movs	r3, #0
 80124a0:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80124a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7ff ffc6 	bl	8012438 <GetMaxAppPayloadWithoutFOptsLength>
 80124ac:	4603      	mov	r3, r0
 80124ae:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80124b0:	79fb      	ldrb	r3, [r7, #7]
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	797b      	ldrb	r3, [r7, #5]
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	4413      	add	r3, r2
 80124ba:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80124bc:	89ba      	ldrh	r2, [r7, #12]
 80124be:	89fb      	ldrh	r3, [r7, #14]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d804      	bhi.n	80124ce <ValidatePayloadLength+0x46>
 80124c4:	89bb      	ldrh	r3, [r7, #12]
 80124c6:	2bff      	cmp	r3, #255	; 0xff
 80124c8:	d801      	bhi.n	80124ce <ValidatePayloadLength+0x46>
    {
        return true;
 80124ca:	2301      	movs	r3, #1
 80124cc:	e000      	b.n	80124d0 <ValidatePayloadLength+0x48>
    }
    return false;
 80124ce:	2300      	movs	r3, #0
}
 80124d0:	4618      	mov	r0, r3
 80124d2:	3710      	adds	r7, #16
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80124d8:	b590      	push	{r4, r7, lr}
 80124da:	b0a5      	sub	sp, #148	; 0x94
 80124dc:	af02      	add	r7, sp, #8
 80124de:	6078      	str	r0, [r7, #4]
 80124e0:	4608      	mov	r0, r1
 80124e2:	4611      	mov	r1, r2
 80124e4:	461a      	mov	r2, r3
 80124e6:	4603      	mov	r3, r0
 80124e8:	70fb      	strb	r3, [r7, #3]
 80124ea:	460b      	mov	r3, r1
 80124ec:	70bb      	strb	r3, [r7, #2]
 80124ee:	4613      	mov	r3, r2
 80124f0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80124f2:	2300      	movs	r3, #0
 80124f4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80124f8:	2300      	movs	r3, #0
 80124fa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80124fe:	2300      	movs	r3, #0
 8012500:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012504:	f000 bc6d 	b.w	8012de2 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012508:	78fb      	ldrb	r3, [r7, #3]
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	4413      	add	r3, r2
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	4618      	mov	r0, r3
 8012512:	f003 fce7 	bl	8015ee4 <LoRaMacCommandsGetCmdSize>
 8012516:	4603      	mov	r3, r0
 8012518:	461a      	mov	r2, r3
 801251a:	78fb      	ldrb	r3, [r7, #3]
 801251c:	441a      	add	r2, r3
 801251e:	78bb      	ldrb	r3, [r7, #2]
 8012520:	429a      	cmp	r2, r3
 8012522:	f300 8464 	bgt.w	8012dee <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012526:	78fb      	ldrb	r3, [r7, #3]
 8012528:	1c5a      	adds	r2, r3, #1
 801252a:	70fa      	strb	r2, [r7, #3]
 801252c:	461a      	mov	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4413      	add	r3, r2
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	3b02      	subs	r3, #2
 8012536:	2b11      	cmp	r3, #17
 8012538:	f200 845b 	bhi.w	8012df2 <ProcessMacCommands+0x91a>
 801253c:	a201      	add	r2, pc, #4	; (adr r2, 8012544 <ProcessMacCommands+0x6c>)
 801253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012542:	bf00      	nop
 8012544:	0801258d 	.word	0x0801258d
 8012548:	080125cf 	.word	0x080125cf
 801254c:	080126eb 	.word	0x080126eb
 8012550:	08012729 	.word	0x08012729
 8012554:	08012815 	.word	0x08012815
 8012558:	08012871 	.word	0x08012871
 801255c:	0801292d 	.word	0x0801292d
 8012560:	08012983 	.word	0x08012983
 8012564:	08012a69 	.word	0x08012a69
 8012568:	08012df3 	.word	0x08012df3
 801256c:	08012df3 	.word	0x08012df3
 8012570:	08012b0d 	.word	0x08012b0d
 8012574:	08012df3 	.word	0x08012df3
 8012578:	08012df3 	.word	0x08012df3
 801257c:	08012c23 	.word	0x08012c23
 8012580:	08012c57 	.word	0x08012c57
 8012584:	08012ce7 	.word	0x08012ce7
 8012588:	08012d5d 	.word	0x08012d5d
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801258c:	2005      	movs	r0, #5
 801258e:	f003 fe81 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	f000 8424 	beq.w	8012de2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801259a:	2105      	movs	r1, #5
 801259c:	2000      	movs	r0, #0
 801259e:	f003 fded 	bl	801617c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80125a2:	78fb      	ldrb	r3, [r7, #3]
 80125a4:	1c5a      	adds	r2, r3, #1
 80125a6:	70fa      	strb	r2, [r7, #3]
 80125a8:	461a      	mov	r2, r3
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4413      	add	r3, r2
 80125ae:	781a      	ldrb	r2, [r3, #0]
 80125b0:	4bac      	ldr	r3, [pc, #688]	; (8012864 <ProcessMacCommands+0x38c>)
 80125b2:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80125b6:	78fb      	ldrb	r3, [r7, #3]
 80125b8:	1c5a      	adds	r2, r3, #1
 80125ba:	70fa      	strb	r2, [r7, #3]
 80125bc:	461a      	mov	r2, r3
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4413      	add	r3, r2
 80125c2:	781a      	ldrb	r2, [r3, #0]
 80125c4:	4ba7      	ldr	r3, [pc, #668]	; (8012864 <ProcessMacCommands+0x38c>)
 80125c6:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 80125ca:	f000 bc0a 	b.w	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80125ce:	2300      	movs	r3, #0
 80125d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80125d4:	2300      	movs	r3, #0
 80125d6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80125da:	2300      	movs	r3, #0
 80125dc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80125e0:	2300      	movs	r3, #0
 80125e2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80125e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80125ea:	f083 0301 	eor.w	r3, r3, #1
 80125ee:	b2db      	uxtb	r3, r3
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d078      	beq.n	80126e6 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80125f4:	2301      	movs	r3, #1
 80125f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80125fa:	78fb      	ldrb	r3, [r7, #3]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	4413      	add	r3, r2
 8012602:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012604:	78ba      	ldrb	r2, [r7, #2]
 8012606:	78fb      	ldrb	r3, [r7, #3]
 8012608:	1ad3      	subs	r3, r2, r3
 801260a:	b2db      	uxtb	r3, r3
 801260c:	3301      	adds	r3, #1
 801260e:	b2db      	uxtb	r3, r3
 8012610:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012614:	4b94      	ldr	r3, [pc, #592]	; (8012868 <ProcessMacCommands+0x390>)
 8012616:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801261a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801261e:	4b92      	ldr	r3, [pc, #584]	; (8012868 <ProcessMacCommands+0x390>)
 8012620:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012624:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012628:	4b8f      	ldr	r3, [pc, #572]	; (8012868 <ProcessMacCommands+0x390>)
 801262a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801262e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012632:	4b8d      	ldr	r3, [pc, #564]	; (8012868 <ProcessMacCommands+0x390>)
 8012634:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012638:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801263c:	4b8a      	ldr	r3, [pc, #552]	; (8012868 <ProcessMacCommands+0x390>)
 801263e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012642:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012646:	4b88      	ldr	r3, [pc, #544]	; (8012868 <ProcessMacCommands+0x390>)
 8012648:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801264c:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801264e:	4b86      	ldr	r3, [pc, #536]	; (8012868 <ProcessMacCommands+0x390>)
 8012650:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012654:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012658:	f107 0257 	add.w	r2, r7, #87	; 0x57
 801265c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012664:	9301      	str	r3, [sp, #4]
 8012666:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	4623      	mov	r3, r4
 801266e:	f005 f973 	bl	8017958 <RegionLinkAdrReq>
 8012672:	4603      	mov	r3, r0
 8012674:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012678:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801267c:	f003 0307 	and.w	r3, r3, #7
 8012680:	2b07      	cmp	r3, #7
 8012682:	d10e      	bne.n	80126a2 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012684:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012688:	4b77      	ldr	r3, [pc, #476]	; (8012868 <ProcessMacCommands+0x390>)
 801268a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801268e:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012692:	4b75      	ldr	r3, [pc, #468]	; (8012868 <ProcessMacCommands+0x390>)
 8012694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012698:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 801269c:	4b72      	ldr	r3, [pc, #456]	; (8012868 <ProcessMacCommands+0x390>)
 801269e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126a2:	2300      	movs	r3, #0
 80126a4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126a8:	e00b      	b.n	80126c2 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80126aa:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80126ae:	2201      	movs	r2, #1
 80126b0:	4619      	mov	r1, r3
 80126b2:	2003      	movs	r0, #3
 80126b4:	f003 fab6 	bl	8015c24 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126b8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80126bc:	3301      	adds	r3, #1
 80126be:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126c2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80126c6:	4a69      	ldr	r2, [pc, #420]	; (801286c <ProcessMacCommands+0x394>)
 80126c8:	fba2 2303 	umull	r2, r3, r2, r3
 80126cc:	089b      	lsrs	r3, r3, #2
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d3e8      	bcc.n	80126aa <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80126d8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80126dc:	78fb      	ldrb	r3, [r7, #3]
 80126de:	4413      	add	r3, r2
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	3b01      	subs	r3, #1
 80126e4:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80126e6:	bf00      	nop
 80126e8:	e37b      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80126ea:	78fb      	ldrb	r3, [r7, #3]
 80126ec:	1c5a      	adds	r2, r3, #1
 80126ee:	70fa      	strb	r2, [r7, #3]
 80126f0:	461a      	mov	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4413      	add	r3, r2
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	f003 030f 	and.w	r3, r3, #15
 80126fc:	b2da      	uxtb	r2, r3
 80126fe:	4b5a      	ldr	r3, [pc, #360]	; (8012868 <ProcessMacCommands+0x390>)
 8012700:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012704:	4b58      	ldr	r3, [pc, #352]	; (8012868 <ProcessMacCommands+0x390>)
 8012706:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801270a:	461a      	mov	r2, r3
 801270c:	2301      	movs	r3, #1
 801270e:	4093      	lsls	r3, r2
 8012710:	b29a      	uxth	r2, r3
 8012712:	4b55      	ldr	r3, [pc, #340]	; (8012868 <ProcessMacCommands+0x390>)
 8012714:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012718:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801271c:	2200      	movs	r2, #0
 801271e:	4619      	mov	r1, r3
 8012720:	2004      	movs	r0, #4
 8012722:	f003 fa7f 	bl	8015c24 <LoRaMacCommandsAddCmd>
                break;
 8012726:	e35c      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012728:	2307      	movs	r3, #7
 801272a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801272e:	78fb      	ldrb	r3, [r7, #3]
 8012730:	687a      	ldr	r2, [r7, #4]
 8012732:	4413      	add	r3, r2
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	091b      	lsrs	r3, r3, #4
 8012738:	b2db      	uxtb	r3, r3
 801273a:	b25b      	sxtb	r3, r3
 801273c:	f003 0307 	and.w	r3, r3, #7
 8012740:	b25b      	sxtb	r3, r3
 8012742:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012746:	78fb      	ldrb	r3, [r7, #3]
 8012748:	687a      	ldr	r2, [r7, #4]
 801274a:	4413      	add	r3, r2
 801274c:	781b      	ldrb	r3, [r3, #0]
 801274e:	b25b      	sxtb	r3, r3
 8012750:	f003 030f 	and.w	r3, r3, #15
 8012754:	b25b      	sxtb	r3, r3
 8012756:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801275a:	78fb      	ldrb	r3, [r7, #3]
 801275c:	3301      	adds	r3, #1
 801275e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012760:	78fb      	ldrb	r3, [r7, #3]
 8012762:	1c5a      	adds	r2, r3, #1
 8012764:	70fa      	strb	r2, [r7, #3]
 8012766:	461a      	mov	r2, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	4413      	add	r3, r2
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	1c5a      	adds	r2, r3, #1
 8012774:	70fa      	strb	r2, [r7, #3]
 8012776:	461a      	mov	r2, r3
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4413      	add	r3, r2
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	021a      	lsls	r2, r3, #8
 8012780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012782:	4313      	orrs	r3, r2
 8012784:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012786:	78fb      	ldrb	r3, [r7, #3]
 8012788:	1c5a      	adds	r2, r3, #1
 801278a:	70fa      	strb	r2, [r7, #3]
 801278c:	461a      	mov	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	4413      	add	r3, r2
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	041a      	lsls	r2, r3, #16
 8012796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012798:	4313      	orrs	r3, r2
 801279a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 801279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801279e:	2264      	movs	r2, #100	; 0x64
 80127a0:	fb02 f303 	mul.w	r3, r2, r3
 80127a4:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80127a6:	4b30      	ldr	r3, [pc, #192]	; (8012868 <ProcessMacCommands+0x390>)
 80127a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127ac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80127b0:	4611      	mov	r1, r2
 80127b2:	4618      	mov	r0, r3
 80127b4:	f005 f8ea 	bl	801798c <RegionRxParamSetupReq>
 80127b8:	4603      	mov	r3, r0
 80127ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80127be:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127c2:	f003 0307 	and.w	r3, r3, #7
 80127c6:	2b07      	cmp	r3, #7
 80127c8:	d117      	bne.n	80127fa <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80127ca:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127ce:	b2da      	uxtb	r2, r3
 80127d0:	4b25      	ldr	r3, [pc, #148]	; (8012868 <ProcessMacCommands+0x390>)
 80127d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80127d6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	4b22      	ldr	r3, [pc, #136]	; (8012868 <ProcessMacCommands+0x390>)
 80127de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80127e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e4:	4a20      	ldr	r2, [pc, #128]	; (8012868 <ProcessMacCommands+0x390>)
 80127e6:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80127e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ea:	4a1f      	ldr	r2, [pc, #124]	; (8012868 <ProcessMacCommands+0x390>)
 80127ec:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80127ee:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80127f2:	b2da      	uxtb	r2, r3
 80127f4:	4b1c      	ldr	r3, [pc, #112]	; (8012868 <ProcessMacCommands+0x390>)
 80127f6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80127fa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127fe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012802:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012806:	2201      	movs	r2, #1
 8012808:	4619      	mov	r1, r3
 801280a:	2005      	movs	r0, #5
 801280c:	f003 fa0a 	bl	8015c24 <LoRaMacCommandsAddCmd>
                break;
 8012810:	bf00      	nop
 8012812:	e2e6      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012814:	23ff      	movs	r3, #255	; 0xff
 8012816:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801281a:	4b12      	ldr	r3, [pc, #72]	; (8012864 <ProcessMacCommands+0x38c>)
 801281c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012820:	2b00      	cmp	r3, #0
 8012822:	d00d      	beq.n	8012840 <ProcessMacCommands+0x368>
 8012824:	4b0f      	ldr	r3, [pc, #60]	; (8012864 <ProcessMacCommands+0x38c>)
 8012826:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d007      	beq.n	8012840 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012830:	4b0c      	ldr	r3, [pc, #48]	; (8012864 <ProcessMacCommands+0x38c>)
 8012832:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4798      	blx	r3
 801283a:	4603      	mov	r3, r0
 801283c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012840:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012844:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012848:	787b      	ldrb	r3, [r7, #1]
 801284a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801284e:	b2db      	uxtb	r3, r3
 8012850:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012854:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012858:	2202      	movs	r2, #2
 801285a:	4619      	mov	r1, r3
 801285c:	2006      	movs	r0, #6
 801285e:	f003 f9e1 	bl	8015c24 <LoRaMacCommandsAddCmd>
                break;
 8012862:	e2be      	b.n	8012de2 <ProcessMacCommands+0x90a>
 8012864:	20000978 	.word	0x20000978
 8012868:	20000e80 	.word	0x20000e80
 801286c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012870:	2303      	movs	r3, #3
 8012872:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012876:	78fb      	ldrb	r3, [r7, #3]
 8012878:	1c5a      	adds	r2, r3, #1
 801287a:	70fa      	strb	r2, [r7, #3]
 801287c:	461a      	mov	r2, r3
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	4413      	add	r3, r2
 8012882:	781b      	ldrb	r3, [r3, #0]
 8012884:	b25b      	sxtb	r3, r3
 8012886:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801288a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801288e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012890:	78fb      	ldrb	r3, [r7, #3]
 8012892:	1c5a      	adds	r2, r3, #1
 8012894:	70fa      	strb	r2, [r7, #3]
 8012896:	461a      	mov	r2, r3
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	4413      	add	r3, r2
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80128a0:	78fb      	ldrb	r3, [r7, #3]
 80128a2:	1c5a      	adds	r2, r3, #1
 80128a4:	70fa      	strb	r2, [r7, #3]
 80128a6:	461a      	mov	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4413      	add	r3, r2
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	021a      	lsls	r2, r3, #8
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	4313      	orrs	r3, r2
 80128b4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80128b6:	78fb      	ldrb	r3, [r7, #3]
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	70fa      	strb	r2, [r7, #3]
 80128bc:	461a      	mov	r2, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	4413      	add	r3, r2
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	041a      	lsls	r2, r3, #16
 80128c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c8:	4313      	orrs	r3, r2
 80128ca:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80128cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ce:	2264      	movs	r2, #100	; 0x64
 80128d0:	fb02 f303 	mul.w	r3, r2, r3
 80128d4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80128d6:	2300      	movs	r3, #0
 80128d8:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80128da:	78fb      	ldrb	r3, [r7, #3]
 80128dc:	1c5a      	adds	r2, r3, #1
 80128de:	70fa      	strb	r2, [r7, #3]
 80128e0:	461a      	mov	r2, r3
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4413      	add	r3, r2
 80128e6:	781b      	ldrb	r3, [r3, #0]
 80128e8:	b25b      	sxtb	r3, r3
 80128ea:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80128ee:	4b85      	ldr	r3, [pc, #532]	; (8012b04 <ProcessMacCommands+0x62c>)
 80128f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128f4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80128f8:	4611      	mov	r1, r2
 80128fa:	4618      	mov	r0, r3
 80128fc:	f005 f859 	bl	80179b2 <RegionNewChannelReq>
 8012900:	4603      	mov	r3, r0
 8012902:	b2db      	uxtb	r3, r3
 8012904:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012908:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801290c:	b25b      	sxtb	r3, r3
 801290e:	2b00      	cmp	r3, #0
 8012910:	db0a      	blt.n	8012928 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012912:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012916:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801291a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801291e:	2201      	movs	r2, #1
 8012920:	4619      	mov	r1, r3
 8012922:	2007      	movs	r0, #7
 8012924:	f003 f97e 	bl	8015c24 <LoRaMacCommandsAddCmd>
                }
                break;
 8012928:	bf00      	nop
 801292a:	e25a      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801292c:	78fb      	ldrb	r3, [r7, #3]
 801292e:	1c5a      	adds	r2, r3, #1
 8012930:	70fa      	strb	r2, [r7, #3]
 8012932:	461a      	mov	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4413      	add	r3, r2
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	f003 030f 	and.w	r3, r3, #15
 801293e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012942:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012946:	2b00      	cmp	r3, #0
 8012948:	d104      	bne.n	8012954 <ProcessMacCommands+0x47c>
                {
                    delay++;
 801294a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801294e:	3301      	adds	r3, #1
 8012950:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012954:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012958:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801295c:	fb02 f303 	mul.w	r3, r2, r3
 8012960:	461a      	mov	r2, r3
 8012962:	4b68      	ldr	r3, [pc, #416]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012964:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012966:	4b67      	ldr	r3, [pc, #412]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801296a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801296e:	4a65      	ldr	r2, [pc, #404]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012970:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012972:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012976:	2200      	movs	r2, #0
 8012978:	4619      	mov	r1, r3
 801297a:	2008      	movs	r0, #8
 801297c:	f003 f952 	bl	8015c24 <LoRaMacCommandsAddCmd>
                break;
 8012980:	e22f      	b.n	8012de2 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012982:	78fb      	ldrb	r3, [r7, #3]
 8012984:	1c5a      	adds	r2, r3, #1
 8012986:	70fa      	strb	r2, [r7, #3]
 8012988:	461a      	mov	r2, r3
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	4413      	add	r3, r2
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012994:	2300      	movs	r3, #0
 8012996:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80129a0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129a4:	f003 0320 	and.w	r3, r3, #32
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d002      	beq.n	80129b2 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80129ac:	2301      	movs	r3, #1
 80129ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80129b2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129b6:	f003 0310 	and.w	r3, r3, #16
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d002      	beq.n	80129c4 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80129be:	2301      	movs	r3, #1
 80129c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80129c4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129c8:	f003 030f 	and.w	r3, r3, #15
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80129d2:	4b4c      	ldr	r3, [pc, #304]	; (8012b04 <ProcessMacCommands+0x62c>)
 80129d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80129dc:	4611      	mov	r1, r2
 80129de:	4618      	mov	r0, r3
 80129e0:	f004 fffa 	bl	80179d8 <RegionTxParamSetupReq>
 80129e4:	4603      	mov	r3, r0
 80129e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ea:	d03b      	beq.n	8012a64 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80129ec:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80129f0:	4b44      	ldr	r3, [pc, #272]	; (8012b04 <ProcessMacCommands+0x62c>)
 80129f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80129f6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80129fa:	4b42      	ldr	r3, [pc, #264]	; (8012b04 <ProcessMacCommands+0x62c>)
 80129fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012a00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a04:	461a      	mov	r2, r3
 8012a06:	4b40      	ldr	r3, [pc, #256]	; (8012b08 <ProcessMacCommands+0x630>)
 8012a08:	5c9b      	ldrb	r3, [r3, r2]
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7ee f940 	bl	8000c90 <__aeabi_ui2f>
 8012a10:	4603      	mov	r3, r0
 8012a12:	4a3c      	ldr	r2, [pc, #240]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012a18:	2302      	movs	r3, #2
 8012a1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a1e:	4b39      	ldr	r3, [pc, #228]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012a20:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a28:	4b36      	ldr	r3, [pc, #216]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012a2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a32:	4611      	mov	r1, r2
 8012a34:	4618      	mov	r0, r3
 8012a36:	f004 fed2 	bl	80177de <RegionGetPhyParam>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	b25a      	sxtb	r2, r3
 8012a42:	4b30      	ldr	r3, [pc, #192]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012a44:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	bfb8      	it	lt
 8012a4c:	4613      	movlt	r3, r2
 8012a4e:	b25a      	sxtb	r2, r3
 8012a50:	4b2c      	ldr	r3, [pc, #176]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012a56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	2009      	movs	r0, #9
 8012a60:	f003 f8e0 	bl	8015c24 <LoRaMacCommandsAddCmd>
                }
                break;
 8012a64:	bf00      	nop
 8012a66:	e1bc      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012a68:	2303      	movs	r3, #3
 8012a6a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012a6e:	78fb      	ldrb	r3, [r7, #3]
 8012a70:	1c5a      	adds	r2, r3, #1
 8012a72:	70fa      	strb	r2, [r7, #3]
 8012a74:	461a      	mov	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	4413      	add	r3, r2
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012a80:	78fb      	ldrb	r3, [r7, #3]
 8012a82:	1c5a      	adds	r2, r3, #1
 8012a84:	70fa      	strb	r2, [r7, #3]
 8012a86:	461a      	mov	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a90:	78fb      	ldrb	r3, [r7, #3]
 8012a92:	1c5a      	adds	r2, r3, #1
 8012a94:	70fa      	strb	r2, [r7, #3]
 8012a96:	461a      	mov	r2, r3
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	781b      	ldrb	r3, [r3, #0]
 8012a9e:	021a      	lsls	r2, r3, #8
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	4313      	orrs	r3, r2
 8012aa4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012aa6:	78fb      	ldrb	r3, [r7, #3]
 8012aa8:	1c5a      	adds	r2, r3, #1
 8012aaa:	70fa      	strb	r2, [r7, #3]
 8012aac:	461a      	mov	r2, r3
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	041a      	lsls	r2, r3, #16
 8012ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab8:	4313      	orrs	r3, r2
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	2264      	movs	r2, #100	; 0x64
 8012ac0:	fb02 f303 	mul.w	r3, r2, r3
 8012ac4:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012ac6:	4b0f      	ldr	r3, [pc, #60]	; (8012b04 <ProcessMacCommands+0x62c>)
 8012ac8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012acc:	f107 0220 	add.w	r2, r7, #32
 8012ad0:	4611      	mov	r1, r2
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f004 ff93 	bl	80179fe <RegionDlChannelReq>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012ae0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ae4:	b25b      	sxtb	r3, r3
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	db0a      	blt.n	8012b00 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012aea:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012aee:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012af2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012af6:	2201      	movs	r2, #1
 8012af8:	4619      	mov	r1, r3
 8012afa:	200a      	movs	r0, #10
 8012afc:	f003 f892 	bl	8015c24 <LoRaMacCommandsAddCmd>
                }
                break;
 8012b00:	bf00      	nop
 8012b02:	e16e      	b.n	8012de2 <ProcessMacCommands+0x90a>
 8012b04:	20000e80 	.word	0x20000e80
 8012b08:	0801f9bc 	.word	0x0801f9bc
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012b0c:	200a      	movs	r0, #10
 8012b0e:	f003 fbc1 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8012b12:	4603      	mov	r3, r0
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	f000 8164 	beq.w	8012de2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012b1a:	210a      	movs	r1, #10
 8012b1c:	2000      	movs	r0, #0
 8012b1e:	f003 fb2d 	bl	801617c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012b22:	f107 0318 	add.w	r3, r7, #24
 8012b26:	2200      	movs	r2, #0
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012b2c:	f107 0310 	add.w	r3, r7, #16
 8012b30:	2200      	movs	r2, #0
 8012b32:	601a      	str	r2, [r3, #0]
 8012b34:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012b36:	f107 0308 	add.w	r3, r7, #8
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	601a      	str	r2, [r3, #0]
 8012b3e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012b40:	78fb      	ldrb	r3, [r7, #3]
 8012b42:	1c5a      	adds	r2, r3, #1
 8012b44:	70fa      	strb	r2, [r7, #3]
 8012b46:	461a      	mov	r2, r3
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012b50:	78fb      	ldrb	r3, [r7, #3]
 8012b52:	1c5a      	adds	r2, r3, #1
 8012b54:	70fa      	strb	r2, [r7, #3]
 8012b56:	461a      	mov	r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	4413      	add	r3, r2
 8012b5c:	781b      	ldrb	r3, [r3, #0]
 8012b5e:	021a      	lsls	r2, r3, #8
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	4313      	orrs	r3, r2
 8012b64:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012b66:	78fb      	ldrb	r3, [r7, #3]
 8012b68:	1c5a      	adds	r2, r3, #1
 8012b6a:	70fa      	strb	r2, [r7, #3]
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	4413      	add	r3, r2
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	041a      	lsls	r2, r3, #16
 8012b76:	69bb      	ldr	r3, [r7, #24]
 8012b78:	4313      	orrs	r3, r2
 8012b7a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012b7c:	78fb      	ldrb	r3, [r7, #3]
 8012b7e:	1c5a      	adds	r2, r3, #1
 8012b80:	70fa      	strb	r2, [r7, #3]
 8012b82:	461a      	mov	r2, r3
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	4413      	add	r3, r2
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	061a      	lsls	r2, r3, #24
 8012b8c:	69bb      	ldr	r3, [r7, #24]
 8012b8e:	4313      	orrs	r3, r2
 8012b90:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012b92:	78fb      	ldrb	r3, [r7, #3]
 8012b94:	1c5a      	adds	r2, r3, #1
 8012b96:	70fa      	strb	r2, [r7, #3]
 8012b98:	461a      	mov	r2, r3
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	b21b      	sxth	r3, r3
 8012ba2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012ba4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bae:	fb02 f303 	mul.w	r3, r2, r3
 8012bb2:	121b      	asrs	r3, r3, #8
 8012bb4:	b21b      	sxth	r3, r3
 8012bb6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012bb8:	f107 0310 	add.w	r3, r7, #16
 8012bbc:	f107 0218 	add.w	r2, r7, #24
 8012bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bc4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012bc8:	693a      	ldr	r2, [r7, #16]
 8012bca:	4b8c      	ldr	r3, [pc, #560]	; (8012dfc <ProcessMacCommands+0x924>)
 8012bcc:	4413      	add	r3, r2
 8012bce:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012bd0:	f107 0308 	add.w	r3, r7, #8
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f00a fd4f 	bl	801d678 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012bda:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012bde:	4b88      	ldr	r3, [pc, #544]	; (8012e00 <ProcessMacCommands+0x928>)
 8012be0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012be4:	9200      	str	r2, [sp, #0]
 8012be6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012bea:	f107 0210 	add.w	r2, r7, #16
 8012bee:	ca06      	ldmia	r2, {r1, r2}
 8012bf0:	f00a fcdb 	bl	801d5aa <SysTimeSub>
 8012bf4:	f107 0010 	add.w	r0, r7, #16
 8012bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bfa:	9300      	str	r3, [sp, #0]
 8012bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bfe:	f107 0208 	add.w	r2, r7, #8
 8012c02:	ca06      	ldmia	r2, {r1, r2}
 8012c04:	f00a fc98 	bl	801d538 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012c08:	f107 0310 	add.w	r3, r7, #16
 8012c0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012c10:	f00a fd04 	bl	801d61c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012c14:	f002 febf 	bl	8015996 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012c18:	4b79      	ldr	r3, [pc, #484]	; (8012e00 <ProcessMacCommands+0x928>)
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012c20:	e0df      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012c22:	200d      	movs	r0, #13
 8012c24:	f003 fb36 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	f000 80d9 	beq.w	8012de2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012c30:	210d      	movs	r1, #13
 8012c32:	2000      	movs	r0, #0
 8012c34:	f003 faa2 	bl	801617c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012c38:	4b71      	ldr	r3, [pc, #452]	; (8012e00 <ProcessMacCommands+0x928>)
 8012c3a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c3e:	2b04      	cmp	r3, #4
 8012c40:	f000 80cf 	beq.w	8012de2 <ProcessMacCommands+0x90a>
 8012c44:	4b6e      	ldr	r3, [pc, #440]	; (8012e00 <ProcessMacCommands+0x928>)
 8012c46:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c4a:	2b05      	cmp	r3, #5
 8012c4c:	f000 80c9 	beq.w	8012de2 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012c50:	f002 fe82 	bl	8015958 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012c54:	e0c5      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012c56:	2303      	movs	r3, #3
 8012c58:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012c60:	78fb      	ldrb	r3, [r7, #3]
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	70fa      	strb	r2, [r7, #3]
 8012c66:	461a      	mov	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012c70:	78fb      	ldrb	r3, [r7, #3]
 8012c72:	1c5a      	adds	r2, r3, #1
 8012c74:	70fa      	strb	r2, [r7, #3]
 8012c76:	461a      	mov	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	021b      	lsls	r3, r3, #8
 8012c80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c82:	4313      	orrs	r3, r2
 8012c84:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c86:	78fb      	ldrb	r3, [r7, #3]
 8012c88:	1c5a      	adds	r2, r3, #1
 8012c8a:	70fa      	strb	r2, [r7, #3]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	4413      	add	r3, r2
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	041b      	lsls	r3, r3, #16
 8012c96:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c9e:	2264      	movs	r2, #100	; 0x64
 8012ca0:	fb02 f303 	mul.w	r3, r2, r3
 8012ca4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012ca6:	78fb      	ldrb	r3, [r7, #3]
 8012ca8:	1c5a      	adds	r2, r3, #1
 8012caa:	70fa      	strb	r2, [r7, #3]
 8012cac:	461a      	mov	r2, r3
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	f003 030f 	and.w	r3, r3, #15
 8012cb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012cbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012cc0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f002 fe4e 	bl	8015964 <LoRaMacClassBPingSlotChannelReq>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012cce:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012cd2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012cd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cda:	2201      	movs	r2, #1
 8012cdc:	4619      	mov	r1, r3
 8012cde:	2011      	movs	r0, #17
 8012ce0:	f002 ffa0 	bl	8015c24 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012ce4:	e07d      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012ce6:	200e      	movs	r0, #14
 8012ce8:	f003 fad4 	bl	8016294 <LoRaMacConfirmQueueIsCmdActive>
 8012cec:	4603      	mov	r3, r0
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d077      	beq.n	8012de2 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012cf2:	210e      	movs	r1, #14
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	f003 fa41 	bl	801617c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012d00:	2300      	movs	r3, #0
 8012d02:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012d06:	78fb      	ldrb	r3, [r7, #3]
 8012d08:	1c5a      	adds	r2, r3, #1
 8012d0a:	70fa      	strb	r2, [r7, #3]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	4413      	add	r3, r2
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012d18:	78fb      	ldrb	r3, [r7, #3]
 8012d1a:	1c5a      	adds	r2, r3, #1
 8012d1c:	70fa      	strb	r2, [r7, #3]
 8012d1e:	461a      	mov	r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4413      	add	r3, r2
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	021b      	lsls	r3, r3, #8
 8012d28:	b21a      	sxth	r2, r3
 8012d2a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012d2e:	4313      	orrs	r3, r2
 8012d30:	b21b      	sxth	r3, r3
 8012d32:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012d36:	78fb      	ldrb	r3, [r7, #3]
 8012d38:	1c5a      	adds	r2, r3, #1
 8012d3a:	70fa      	strb	r2, [r7, #3]
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	4413      	add	r3, r2
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012d48:	4b2e      	ldr	r3, [pc, #184]	; (8012e04 <ProcessMacCommands+0x92c>)
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012d50:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012d54:	4618      	mov	r0, r3
 8012d56:	f002 fe11 	bl	801597c <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012d5a:	e042      	b.n	8012de2 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012d62:	78fb      	ldrb	r3, [r7, #3]
 8012d64:	1c5a      	adds	r2, r3, #1
 8012d66:	70fa      	strb	r2, [r7, #3]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	781b      	ldrb	r3, [r3, #0]
 8012d70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012d74:	78fb      	ldrb	r3, [r7, #3]
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	70fa      	strb	r2, [r7, #3]
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	4413      	add	r3, r2
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	021b      	lsls	r3, r3, #8
 8012d84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d88:	4313      	orrs	r3, r2
 8012d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012d8e:	78fb      	ldrb	r3, [r7, #3]
 8012d90:	1c5a      	adds	r2, r3, #1
 8012d92:	70fa      	strb	r2, [r7, #3]
 8012d94:	461a      	mov	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4413      	add	r3, r2
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	041b      	lsls	r3, r3, #16
 8012d9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012da2:	4313      	orrs	r3, r2
 8012da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012dac:	2264      	movs	r2, #100	; 0x64
 8012dae:	fb02 f303 	mul.w	r3, r2, r3
 8012db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012db6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012dba:	f002 fdf2 	bl	80159a2 <LoRaMacClassBBeaconFreqReq>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d003      	beq.n	8012dcc <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012dca:	e002      	b.n	8012dd2 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012dd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	4619      	mov	r1, r3
 8012dda:	2013      	movs	r0, #19
 8012ddc:	f002 ff22 	bl	8015c24 <LoRaMacCommandsAddCmd>
                }
                break;
 8012de0:	bf00      	nop
    while( macIndex < commandsSize )
 8012de2:	78fa      	ldrb	r2, [r7, #3]
 8012de4:	78bb      	ldrb	r3, [r7, #2]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	f4ff ab8e 	bcc.w	8012508 <ProcessMacCommands+0x30>
 8012dec:	e002      	b.n	8012df4 <ProcessMacCommands+0x91c>
            return;
 8012dee:	bf00      	nop
 8012df0:	e000      	b.n	8012df4 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012df2:	bf00      	nop
        }
    }
}
 8012df4:	378c      	adds	r7, #140	; 0x8c
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd90      	pop	{r4, r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	12d53d80 	.word	0x12d53d80
 8012e00:	20000978 	.word	0x20000978
 8012e04:	200015f0 	.word	0x200015f0

08012e08 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b08e      	sub	sp, #56	; 0x38
 8012e0c:	af02      	add	r7, sp, #8
 8012e0e:	60f8      	str	r0, [r7, #12]
 8012e10:	607a      	str	r2, [r7, #4]
 8012e12:	461a      	mov	r2, r3
 8012e14:	460b      	mov	r3, r1
 8012e16:	72fb      	strb	r3, [r7, #11]
 8012e18:	4613      	mov	r3, r2
 8012e1a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e1c:	2303      	movs	r3, #3
 8012e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e22:	4b65      	ldr	r3, [pc, #404]	; (8012fb8 <Send+0x1b0>)
 8012e24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012e28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e2c:	4b62      	ldr	r3, [pc, #392]	; (8012fb8 <Send+0x1b0>)
 8012e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012e36:	4b60      	ldr	r3, [pc, #384]	; (8012fb8 <Send+0x1b0>)
 8012e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e3c:	4b5e      	ldr	r3, [pc, #376]	; (8012fb8 <Send+0x1b0>)
 8012e3e:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d101      	bne.n	8012e4a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012e46:	2307      	movs	r3, #7
 8012e48:	e0b1      	b.n	8012fae <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012e4a:	4b5b      	ldr	r3, [pc, #364]	; (8012fb8 <Send+0x1b0>)
 8012e4c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d102      	bne.n	8012e5a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012e54:	4b58      	ldr	r3, [pc, #352]	; (8012fb8 <Send+0x1b0>)
 8012e56:	2200      	movs	r2, #0
 8012e58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012e60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e64:	f36f 0303 	bfc	r3, #0, #4
 8012e68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012e6c:	4b52      	ldr	r3, [pc, #328]	; (8012fb8 <Send+0x1b0>)
 8012e6e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012e72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e76:	f362 13c7 	bfi	r3, r2, #7, #1
 8012e7a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e7e:	4b4e      	ldr	r3, [pc, #312]	; (8012fb8 <Send+0x1b0>)
 8012e80:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d106      	bne.n	8012e96 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012e88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e8c:	f043 0310 	orr.w	r3, r3, #16
 8012e90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012e94:	e005      	b.n	8012ea2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012e96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e9a:	f36f 1304 	bfc	r3, #4, #1
 8012e9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012ea2:	4b45      	ldr	r3, [pc, #276]	; (8012fb8 <Send+0x1b0>)
 8012ea4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d005      	beq.n	8012eb8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012eac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eb0:	f043 0320 	orr.w	r3, r3, #32
 8012eb4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012eb8:	2301      	movs	r3, #1
 8012eba:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ec0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	bf14      	ite	ne
 8012eca:	2301      	movne	r3, #1
 8012ecc:	2300      	moveq	r3, #0
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012ed2:	4b39      	ldr	r3, [pc, #228]	; (8012fb8 <Send+0x1b0>)
 8012ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ed6:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012ed8:	4b37      	ldr	r3, [pc, #220]	; (8012fb8 <Send+0x1b0>)
 8012eda:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012ede:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012ee0:	4b35      	ldr	r3, [pc, #212]	; (8012fb8 <Send+0x1b0>)
 8012ee2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012ee6:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012ee8:	4b33      	ldr	r3, [pc, #204]	; (8012fb8 <Send+0x1b0>)
 8012eea:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012eee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012ef2:	4b31      	ldr	r3, [pc, #196]	; (8012fb8 <Send+0x1b0>)
 8012ef4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012ef8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012efc:	4b2e      	ldr	r3, [pc, #184]	; (8012fb8 <Send+0x1b0>)
 8012efe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012f06:	4b2c      	ldr	r3, [pc, #176]	; (8012fb8 <Send+0x1b0>)
 8012f08:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012f10:	4b29      	ldr	r3, [pc, #164]	; (8012fb8 <Send+0x1b0>)
 8012f12:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012f16:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f1c:	f107 0014 	add.w	r0, r7, #20
 8012f20:	4a26      	ldr	r2, [pc, #152]	; (8012fbc <Send+0x1b4>)
 8012f22:	4927      	ldr	r1, [pc, #156]	; (8012fc0 <Send+0x1b8>)
 8012f24:	f002 fc58 	bl	80157d8 <LoRaMacAdrCalcNext>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012f30:	f362 1386 	bfi	r3, r2, #6, #1
 8012f34:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012f38:	7afa      	ldrb	r2, [r7, #11]
 8012f3a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012f3e:	893b      	ldrh	r3, [r7, #8]
 8012f40:	9300      	str	r3, [sp, #0]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 fc5d 	bl	8013804 <PrepareFrame>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d003      	beq.n	8012f60 <Send+0x158>
 8012f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f5c:	2b0a      	cmp	r3, #10
 8012f5e:	d107      	bne.n	8012f70 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012f60:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012f64:	4618      	mov	r0, r3
 8012f66:	f000 f961 	bl	801322c <ScheduleTx>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d00a      	beq.n	8012f8e <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012f78:	4a0f      	ldr	r2, [pc, #60]	; (8012fb8 <Send+0x1b0>)
 8012f7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012f7e:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012f82:	4a0d      	ldr	r2, [pc, #52]	; (8012fb8 <Send+0x1b0>)
 8012f84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f88:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012f8c:	e00d      	b.n	8012faa <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012f8e:	4b0a      	ldr	r3, [pc, #40]	; (8012fb8 <Send+0x1b0>)
 8012f90:	2200      	movs	r2, #0
 8012f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f98:	4a07      	ldr	r2, [pc, #28]	; (8012fb8 <Send+0x1b0>)
 8012f9a:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012f9c:	f002 fee8 	bl	8015d70 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d001      	beq.n	8012faa <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012fa6:	2313      	movs	r3, #19
 8012fa8:	e001      	b.n	8012fae <Send+0x1a6>
        }
    }
    return status;
 8012faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3730      	adds	r7, #48	; 0x30
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	20000e80 	.word	0x20000e80
 8012fbc:	20000eb8 	.word	0x20000eb8
 8012fc0:	20000eb9 	.word	0x20000eb9

08012fc4 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012fda:	79fb      	ldrb	r3, [r7, #7]
 8012fdc:	2bff      	cmp	r3, #255	; 0xff
 8012fde:	d11f      	bne.n	8013020 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012fe0:	2000      	movs	r0, #0
 8012fe2:	f7ff f941 	bl	8012268 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012fe6:	4b15      	ldr	r3, [pc, #84]	; (801303c <SendReJoinReq+0x78>)
 8012fe8:	2200      	movs	r2, #0
 8012fea:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012fee:	4b13      	ldr	r3, [pc, #76]	; (801303c <SendReJoinReq+0x78>)
 8012ff0:	4a13      	ldr	r2, [pc, #76]	; (8013040 <SendReJoinReq+0x7c>)
 8012ff2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012ff6:	4b11      	ldr	r3, [pc, #68]	; (801303c <SendReJoinReq+0x78>)
 8012ff8:	22ff      	movs	r2, #255	; 0xff
 8012ffa:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012ffe:	7b3b      	ldrb	r3, [r7, #12]
 8013000:	f36f 1347 	bfc	r3, #5, #3
 8013004:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8013006:	7b3a      	ldrb	r2, [r7, #12]
 8013008:	4b0c      	ldr	r3, [pc, #48]	; (801303c <SendReJoinReq+0x78>)
 801300a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801300e:	480d      	ldr	r0, [pc, #52]	; (8013044 <SendReJoinReq+0x80>)
 8013010:	f7fc fb1c 	bl	800f64c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8013014:	480c      	ldr	r0, [pc, #48]	; (8013048 <SendReJoinReq+0x84>)
 8013016:	f7fc fae9 	bl	800f5ec <SecureElementGetDevEui>

            allowDelayedTx = false;
 801301a:	2300      	movs	r3, #0
 801301c:	73fb      	strb	r3, [r7, #15]

            break;
 801301e:	e002      	b.n	8013026 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013020:	2302      	movs	r3, #2
 8013022:	73bb      	strb	r3, [r7, #14]
            break;
 8013024:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013026:	7bfb      	ldrb	r3, [r7, #15]
 8013028:	4618      	mov	r0, r3
 801302a:	f000 f8ff 	bl	801322c <ScheduleTx>
 801302e:	4603      	mov	r3, r0
 8013030:	73bb      	strb	r3, [r7, #14]
    return status;
 8013032:	7bbb      	ldrb	r3, [r7, #14]
}
 8013034:	4618      	mov	r0, r3
 8013036:	3710      	adds	r7, #16
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	20000978 	.word	0x20000978
 8013040:	2000097a 	.word	0x2000097a
 8013044:	20000a86 	.word	0x20000a86
 8013048:	20000a8e 	.word	0x20000a8e

0801304c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013050:	f002 fc31 	bl	80158b6 <LoRaMacClassBIsBeaconExpected>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d001      	beq.n	801305e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801305a:	230e      	movs	r3, #14
 801305c:	e013      	b.n	8013086 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801305e:	4b0b      	ldr	r3, [pc, #44]	; (801308c <CheckForClassBCollision+0x40>)
 8013060:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013064:	2b01      	cmp	r3, #1
 8013066:	d10d      	bne.n	8013084 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013068:	f002 fc2c 	bl	80158c4 <LoRaMacClassBIsPingExpected>
 801306c:	4603      	mov	r3, r0
 801306e:	2b00      	cmp	r3, #0
 8013070:	d001      	beq.n	8013076 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013072:	230f      	movs	r3, #15
 8013074:	e007      	b.n	8013086 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013076:	f002 fc2c 	bl	80158d2 <LoRaMacClassBIsMulticastExpected>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d001      	beq.n	8013084 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013080:	230f      	movs	r3, #15
 8013082:	e000      	b.n	8013086 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013084:	2300      	movs	r3, #0
}
 8013086:	4618      	mov	r0, r3
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	20000e80 	.word	0x20000e80

08013090 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8013090:	b590      	push	{r4, r7, lr}
 8013092:	b083      	sub	sp, #12
 8013094:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013096:	4b2d      	ldr	r3, [pc, #180]	; (801314c <ComputeRxWindowParameters+0xbc>)
 8013098:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801309c:	4b2b      	ldr	r3, [pc, #172]	; (801314c <ComputeRxWindowParameters+0xbc>)
 801309e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80130a2:	4b2a      	ldr	r3, [pc, #168]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130a4:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80130a8:	4b28      	ldr	r3, [pc, #160]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130aa:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80130ae:	4b27      	ldr	r3, [pc, #156]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130b0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130b4:	b25b      	sxtb	r3, r3
 80130b6:	f004 fcf9 	bl	8017aac <RegionApplyDrOffset>
 80130ba:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130bc:	b259      	sxtb	r1, r3
 80130be:	4b23      	ldr	r3, [pc, #140]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130c0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130c4:	4b21      	ldr	r3, [pc, #132]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130c8:	4821      	ldr	r0, [pc, #132]	; (8013150 <ComputeRxWindowParameters+0xc0>)
 80130ca:	9000      	str	r0, [sp, #0]
 80130cc:	4620      	mov	r0, r4
 80130ce:	f004 fbfd 	bl	80178cc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130d2:	4b1e      	ldr	r3, [pc, #120]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130d4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80130d8:	4b1c      	ldr	r3, [pc, #112]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130da:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130de:	b259      	sxtb	r1, r3
 80130e0:	4b1a      	ldr	r3, [pc, #104]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130e2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130e6:	4b19      	ldr	r3, [pc, #100]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130ea:	4c1a      	ldr	r4, [pc, #104]	; (8013154 <ComputeRxWindowParameters+0xc4>)
 80130ec:	9400      	str	r4, [sp, #0]
 80130ee:	f004 fbed 	bl	80178cc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80130f2:	4b16      	ldr	r3, [pc, #88]	; (801314c <ComputeRxWindowParameters+0xbc>)
 80130f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130f6:	4a18      	ldr	r2, [pc, #96]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 80130f8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80130fc:	4413      	add	r3, r2
 80130fe:	4a16      	ldr	r2, [pc, #88]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 8013100:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013104:	4b11      	ldr	r3, [pc, #68]	; (801314c <ComputeRxWindowParameters+0xbc>)
 8013106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013108:	4a13      	ldr	r2, [pc, #76]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 801310a:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801310e:	4413      	add	r3, r2
 8013110:	4a11      	ldr	r2, [pc, #68]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 8013112:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8013116:	4b10      	ldr	r3, [pc, #64]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 8013118:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801311c:	2b04      	cmp	r3, #4
 801311e:	d011      	beq.n	8013144 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013120:	4b0a      	ldr	r3, [pc, #40]	; (801314c <ComputeRxWindowParameters+0xbc>)
 8013122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013124:	4a0c      	ldr	r2, [pc, #48]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 8013126:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801312a:	4413      	add	r3, r2
 801312c:	4a0a      	ldr	r2, [pc, #40]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 801312e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013132:	4b06      	ldr	r3, [pc, #24]	; (801314c <ComputeRxWindowParameters+0xbc>)
 8013134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013136:	4a08      	ldr	r2, [pc, #32]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 8013138:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 801313c:	4413      	add	r3, r2
 801313e:	4a06      	ldr	r2, [pc, #24]	; (8013158 <ComputeRxWindowParameters+0xc8>)
 8013140:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013144:	bf00      	nop
 8013146:	3704      	adds	r7, #4
 8013148:	46bd      	mov	sp, r7
 801314a:	bd90      	pop	{r4, r7, pc}
 801314c:	20000e80 	.word	0x20000e80
 8013150:	20000d30 	.word	0x20000d30
 8013154:	20000d44 	.word	0x20000d44
 8013158:	20000978 	.word	0x20000978

0801315c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013162:	2300      	movs	r3, #0
 8013164:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013166:	4b13      	ldr	r3, [pc, #76]	; (80131b4 <VerifyTxFrame+0x58>)
 8013168:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801316c:	2b00      	cmp	r3, #0
 801316e:	d01b      	beq.n	80131a8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013170:	1d3b      	adds	r3, r7, #4
 8013172:	4618      	mov	r0, r3
 8013174:	f002 fe4c 	bl	8015e10 <LoRaMacCommandsGetSizeSerializedCmds>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801317e:	2313      	movs	r3, #19
 8013180:	e013      	b.n	80131aa <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013182:	4b0d      	ldr	r3, [pc, #52]	; (80131b8 <VerifyTxFrame+0x5c>)
 8013184:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013188:	4a0a      	ldr	r2, [pc, #40]	; (80131b4 <VerifyTxFrame+0x58>)
 801318a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801318e:	687a      	ldr	r2, [r7, #4]
 8013190:	b2d2      	uxtb	r2, r2
 8013192:	4618      	mov	r0, r3
 8013194:	f7ff f978 	bl	8012488 <ValidatePayloadLength>
 8013198:	4603      	mov	r3, r0
 801319a:	f083 0301 	eor.w	r3, r3, #1
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d001      	beq.n	80131a8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80131a4:	2308      	movs	r3, #8
 80131a6:	e000      	b.n	80131aa <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80131a8:	2300      	movs	r3, #0
}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	20000e80 	.word	0x20000e80
 80131b8:	20000978 	.word	0x20000978

080131bc <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b082      	sub	sp, #8
 80131c0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80131c2:	4b18      	ldr	r3, [pc, #96]	; (8013224 <SerializeTxFrame+0x68>)
 80131c4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d002      	beq.n	80131d2 <SerializeTxFrame+0x16>
 80131cc:	2b04      	cmp	r3, #4
 80131ce:	d011      	beq.n	80131f4 <SerializeTxFrame+0x38>
 80131d0:	e021      	b.n	8013216 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80131d2:	4815      	ldr	r0, [pc, #84]	; (8013228 <SerializeTxFrame+0x6c>)
 80131d4:	f004 f97a 	bl	80174cc <LoRaMacSerializerJoinRequest>
 80131d8:	4603      	mov	r3, r0
 80131da:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80131dc:	79fb      	ldrb	r3, [r7, #7]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d001      	beq.n	80131e6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80131e2:	2311      	movs	r3, #17
 80131e4:	e01a      	b.n	801321c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80131e6:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <SerializeTxFrame+0x68>)
 80131e8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	4b0d      	ldr	r3, [pc, #52]	; (8013224 <SerializeTxFrame+0x68>)
 80131f0:	801a      	strh	r2, [r3, #0]
            break;
 80131f2:	e012      	b.n	801321a <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80131f4:	480c      	ldr	r0, [pc, #48]	; (8013228 <SerializeTxFrame+0x6c>)
 80131f6:	f004 f9eb 	bl	80175d0 <LoRaMacSerializerData>
 80131fa:	4603      	mov	r3, r0
 80131fc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80131fe:	79fb      	ldrb	r3, [r7, #7]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d001      	beq.n	8013208 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013204:	2311      	movs	r3, #17
 8013206:	e009      	b.n	801321c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013208:	4b06      	ldr	r3, [pc, #24]	; (8013224 <SerializeTxFrame+0x68>)
 801320a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801320e:	b29a      	uxth	r2, r3
 8013210:	4b04      	ldr	r3, [pc, #16]	; (8013224 <SerializeTxFrame+0x68>)
 8013212:	801a      	strh	r2, [r3, #0]
            break;
 8013214:	e001      	b.n	801321a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013216:	2303      	movs	r3, #3
 8013218:	e000      	b.n	801321c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801321a:	2300      	movs	r3, #0
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	20000978 	.word	0x20000978
 8013228:	20000a80 	.word	0x20000a80

0801322c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b090      	sub	sp, #64	; 0x40
 8013230:	af02      	add	r7, sp, #8
 8013232:	4603      	mov	r3, r0
 8013234:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013236:	2303      	movs	r3, #3
 8013238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801323c:	f7ff ff06 	bl	801304c <CheckForClassBCollision>
 8013240:	4603      	mov	r3, r0
 8013242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013246:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801324a:	2b00      	cmp	r3, #0
 801324c:	d002      	beq.n	8013254 <ScheduleTx+0x28>
    {
        return status;
 801324e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013252:	e092      	b.n	801337a <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013254:	f000 f8fe 	bl	8013454 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013258:	f7ff ffb0 	bl	80131bc <SerializeTxFrame>
 801325c:	4603      	mov	r3, r0
 801325e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013262:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013266:	2b00      	cmp	r3, #0
 8013268:	d002      	beq.n	8013270 <ScheduleTx+0x44>
    {
        return status;
 801326a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801326e:	e084      	b.n	801337a <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013270:	4b44      	ldr	r3, [pc, #272]	; (8013384 <ScheduleTx+0x158>)
 8013272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013274:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013276:	4b43      	ldr	r3, [pc, #268]	; (8013384 <ScheduleTx+0x158>)
 8013278:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801327c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801327e:	4b41      	ldr	r3, [pc, #260]	; (8013384 <ScheduleTx+0x158>)
 8013280:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013284:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801328a:	4618      	mov	r0, r3
 801328c:	f00a fa2c 	bl	801d6e8 <SysTimeGetMcuTime>
 8013290:	4638      	mov	r0, r7
 8013292:	4b3c      	ldr	r3, [pc, #240]	; (8013384 <ScheduleTx+0x158>)
 8013294:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8013298:	9200      	str	r2, [sp, #0]
 801329a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801329e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80132a2:	ca06      	ldmia	r2, {r1, r2}
 80132a4:	f00a f981 	bl	801d5aa <SysTimeSub>
 80132a8:	f107 0320 	add.w	r3, r7, #32
 80132ac:	463a      	mov	r2, r7
 80132ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132b2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80132b6:	4b33      	ldr	r3, [pc, #204]	; (8013384 <ScheduleTx+0x158>)
 80132b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ba:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80132bc:	2300      	movs	r3, #0
 80132be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80132c2:	2301      	movs	r3, #1
 80132c4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80132c6:	4b30      	ldr	r3, [pc, #192]	; (8013388 <ScheduleTx+0x15c>)
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80132cc:	4b2d      	ldr	r3, [pc, #180]	; (8013384 <ScheduleTx+0x158>)
 80132ce:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d104      	bne.n	80132e0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80132d6:	2301      	movs	r3, #1
 80132d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80132dc:	2300      	movs	r3, #0
 80132de:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80132e0:	4b28      	ldr	r3, [pc, #160]	; (8013384 <ScheduleTx+0x158>)
 80132e2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80132e6:	f107 0114 	add.w	r1, r7, #20
 80132ea:	4b28      	ldr	r3, [pc, #160]	; (801338c <ScheduleTx+0x160>)
 80132ec:	9300      	str	r3, [sp, #0]
 80132ee:	4b28      	ldr	r3, [pc, #160]	; (8013390 <ScheduleTx+0x164>)
 80132f0:	4a28      	ldr	r2, [pc, #160]	; (8013394 <ScheduleTx+0x168>)
 80132f2:	f004 fbb1 	bl	8017a58 <RegionNextChannel>
 80132f6:	4603      	mov	r3, r0
 80132f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80132fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013300:	2b00      	cmp	r3, #0
 8013302:	d025      	beq.n	8013350 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013308:	2b0b      	cmp	r3, #11
 801330a:	d11e      	bne.n	801334a <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 801330c:	4b1e      	ldr	r3, [pc, #120]	; (8013388 <ScheduleTx+0x15c>)
 801330e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013312:	2b00      	cmp	r3, #0
 8013314:	d01c      	beq.n	8013350 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8013316:	7bfb      	ldrb	r3, [r7, #15]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d013      	beq.n	8013344 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 801331c:	4b1a      	ldr	r3, [pc, #104]	; (8013388 <ScheduleTx+0x15c>)
 801331e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013322:	f043 0320 	orr.w	r3, r3, #32
 8013326:	4a18      	ldr	r2, [pc, #96]	; (8013388 <ScheduleTx+0x15c>)
 8013328:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 801332c:	4b16      	ldr	r3, [pc, #88]	; (8013388 <ScheduleTx+0x15c>)
 801332e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013332:	4619      	mov	r1, r3
 8013334:	4818      	ldr	r0, [pc, #96]	; (8013398 <ScheduleTx+0x16c>)
 8013336:	f00a ff77 	bl	801e228 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801333a:	4817      	ldr	r0, [pc, #92]	; (8013398 <ScheduleTx+0x16c>)
 801333c:	f00a fe96 	bl	801e06c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8013340:	2300      	movs	r3, #0
 8013342:	e01a      	b.n	801337a <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8013344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013348:	e017      	b.n	801337a <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801334a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801334e:	e014      	b.n	801337a <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013350:	f7ff fe9e 	bl	8013090 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013354:	f7ff ff02 	bl	801315c <VerifyTxFrame>
 8013358:	4603      	mov	r3, r0
 801335a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801335e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013362:	2b00      	cmp	r3, #0
 8013364:	d002      	beq.n	801336c <ScheduleTx+0x140>
    {
        return status;
 8013366:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801336a:	e006      	b.n	801337a <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801336c:	4b06      	ldr	r3, [pc, #24]	; (8013388 <ScheduleTx+0x15c>)
 801336e:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013372:	4618      	mov	r0, r3
 8013374:	f000 fb62 	bl	8013a3c <SendFrameOnChannel>
 8013378:	4603      	mov	r3, r0
}
 801337a:	4618      	mov	r0, r3
 801337c:	3738      	adds	r7, #56	; 0x38
 801337e:	46bd      	mov	sp, r7
 8013380:	bd80      	pop	{r7, pc}
 8013382:	bf00      	nop
 8013384:	20000e80 	.word	0x20000e80
 8013388:	20000978 	.word	0x20000978
 801338c:	20000eb0 	.word	0x20000eb0
 8013390:	20000dfc 	.word	0x20000dfc
 8013394:	20000d89 	.word	0x20000d89
 8013398:	20000ce0 	.word	0x20000ce0

0801339c <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b084      	sub	sp, #16
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	4603      	mov	r3, r0
 80133a4:	460a      	mov	r2, r1
 80133a6:	71fb      	strb	r3, [r7, #7]
 80133a8:	4613      	mov	r3, r2
 80133aa:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133ac:	2313      	movs	r3, #19
 80133ae:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80133b0:	2300      	movs	r3, #0
 80133b2:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80133b4:	4b25      	ldr	r3, [pc, #148]	; (801344c <SecureFrame+0xb0>)
 80133b6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d002      	beq.n	80133c4 <SecureFrame+0x28>
 80133be:	2b04      	cmp	r3, #4
 80133c0:	d011      	beq.n	80133e6 <SecureFrame+0x4a>
 80133c2:	e03b      	b.n	801343c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133c4:	4822      	ldr	r0, [pc, #136]	; (8013450 <SecureFrame+0xb4>)
 80133c6:	f003 fc47 	bl	8016c58 <LoRaMacCryptoPrepareJoinRequest>
 80133ca:	4603      	mov	r3, r0
 80133cc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80133ce:	7bfb      	ldrb	r3, [r7, #15]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d001      	beq.n	80133d8 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133d4:	2311      	movs	r3, #17
 80133d6:	e034      	b.n	8013442 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80133d8:	4b1c      	ldr	r3, [pc, #112]	; (801344c <SecureFrame+0xb0>)
 80133da:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133de:	b29a      	uxth	r2, r3
 80133e0:	4b1a      	ldr	r3, [pc, #104]	; (801344c <SecureFrame+0xb0>)
 80133e2:	801a      	strh	r2, [r3, #0]
            break;
 80133e4:	e02c      	b.n	8013440 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80133e6:	f107 0308 	add.w	r3, r7, #8
 80133ea:	4618      	mov	r0, r3
 80133ec:	f003 fb44 	bl	8016a78 <LoRaMacCryptoGetFCntUp>
 80133f0:	4603      	mov	r3, r0
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d001      	beq.n	80133fa <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80133f6:	2312      	movs	r3, #18
 80133f8:	e023      	b.n	8013442 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80133fa:	4b14      	ldr	r3, [pc, #80]	; (801344c <SecureFrame+0xb0>)
 80133fc:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013400:	2b00      	cmp	r3, #0
 8013402:	d104      	bne.n	801340e <SecureFrame+0x72>
 8013404:	4b11      	ldr	r3, [pc, #68]	; (801344c <SecureFrame+0xb0>)
 8013406:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 801340a:	2b01      	cmp	r3, #1
 801340c:	d902      	bls.n	8013414 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	3b01      	subs	r3, #1
 8013412:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013414:	68b8      	ldr	r0, [r7, #8]
 8013416:	79ba      	ldrb	r2, [r7, #6]
 8013418:	79f9      	ldrb	r1, [r7, #7]
 801341a:	4b0d      	ldr	r3, [pc, #52]	; (8013450 <SecureFrame+0xb4>)
 801341c:	f003 fd4a 	bl	8016eb4 <LoRaMacCryptoSecureMessage>
 8013420:	4603      	mov	r3, r0
 8013422:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013424:	7bfb      	ldrb	r3, [r7, #15]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d001      	beq.n	801342e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801342a:	2311      	movs	r3, #17
 801342c:	e009      	b.n	8013442 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801342e:	4b07      	ldr	r3, [pc, #28]	; (801344c <SecureFrame+0xb0>)
 8013430:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013434:	b29a      	uxth	r2, r3
 8013436:	4b05      	ldr	r3, [pc, #20]	; (801344c <SecureFrame+0xb0>)
 8013438:	801a      	strh	r2, [r3, #0]
            break;
 801343a:	e001      	b.n	8013440 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801343c:	2303      	movs	r3, #3
 801343e:	e000      	b.n	8013442 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013440:	2300      	movs	r3, #0
}
 8013442:	4618      	mov	r0, r3
 8013444:	3710      	adds	r7, #16
 8013446:	46bd      	mov	sp, r7
 8013448:	bd80      	pop	{r7, pc}
 801344a:	bf00      	nop
 801344c:	20000978 	.word	0x20000978
 8013450:	20000a80 	.word	0x20000a80

08013454 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013454:	b480      	push	{r7}
 8013456:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013458:	4b09      	ldr	r3, [pc, #36]	; (8013480 <CalculateBackOff+0x2c>)
 801345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801345c:	2b00      	cmp	r3, #0
 801345e:	d10a      	bne.n	8013476 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013460:	4b07      	ldr	r3, [pc, #28]	; (8013480 <CalculateBackOff+0x2c>)
 8013462:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8013466:	3b01      	subs	r3, #1
 8013468:	4a06      	ldr	r2, [pc, #24]	; (8013484 <CalculateBackOff+0x30>)
 801346a:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 801346e:	fb02 f303 	mul.w	r3, r2, r3
 8013472:	4a03      	ldr	r2, [pc, #12]	; (8013480 <CalculateBackOff+0x2c>)
 8013474:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013476:	bf00      	nop
 8013478:	46bd      	mov	sp, r7
 801347a:	bc80      	pop	{r7}
 801347c:	4770      	bx	lr
 801347e:	bf00      	nop
 8013480:	20000e80 	.word	0x20000e80
 8013484:	20000978 	.word	0x20000978

08013488 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b082      	sub	sp, #8
 801348c:	af00      	add	r7, sp, #0
 801348e:	4603      	mov	r3, r0
 8013490:	7139      	strb	r1, [r7, #4]
 8013492:	71fb      	strb	r3, [r7, #7]
 8013494:	4613      	mov	r3, r2
 8013496:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013498:	79fb      	ldrb	r3, [r7, #7]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d002      	beq.n	80134a4 <RemoveMacCommands+0x1c>
 801349e:	79fb      	ldrb	r3, [r7, #7]
 80134a0:	2b01      	cmp	r3, #1
 80134a2:	d10d      	bne.n	80134c0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80134a4:	79bb      	ldrb	r3, [r7, #6]
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d108      	bne.n	80134bc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80134aa:	793b      	ldrb	r3, [r7, #4]
 80134ac:	f003 0320 	and.w	r3, r3, #32
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d004      	beq.n	80134c0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80134b6:	f002 fc7f 	bl	8015db8 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80134ba:	e001      	b.n	80134c0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80134bc:	f002 fc7c 	bl	8015db8 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80134c0:	bf00      	nop
 80134c2:	3708      	adds	r7, #8
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80134c8:	b5b0      	push	{r4, r5, r7, lr}
 80134ca:	b090      	sub	sp, #64	; 0x40
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	4603      	mov	r3, r0
 80134d0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80134d2:	79fb      	ldrb	r3, [r7, #7]
 80134d4:	f083 0301 	eor.w	r3, r3, #1
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d003      	beq.n	80134e6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80134de:	4b80      	ldr	r3, [pc, #512]	; (80136e0 <ResetMacParameters+0x218>)
 80134e0:	2200      	movs	r2, #0
 80134e2:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80134e6:	4b7e      	ldr	r3, [pc, #504]	; (80136e0 <ResetMacParameters+0x218>)
 80134e8:	2200      	movs	r2, #0
 80134ea:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80134ec:	4b7d      	ldr	r3, [pc, #500]	; (80136e4 <ResetMacParameters+0x21c>)
 80134ee:	2200      	movs	r2, #0
 80134f0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80134f4:	4b7b      	ldr	r3, [pc, #492]	; (80136e4 <ResetMacParameters+0x21c>)
 80134f6:	2201      	movs	r2, #1
 80134f8:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80134fc:	4b79      	ldr	r3, [pc, #484]	; (80136e4 <ResetMacParameters+0x21c>)
 80134fe:	2201      	movs	r2, #1
 8013500:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8013504:	4b77      	ldr	r3, [pc, #476]	; (80136e4 <ResetMacParameters+0x21c>)
 8013506:	2200      	movs	r2, #0
 8013508:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801350c:	4b74      	ldr	r3, [pc, #464]	; (80136e0 <ResetMacParameters+0x218>)
 801350e:	2200      	movs	r2, #0
 8013510:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013514:	4b72      	ldr	r3, [pc, #456]	; (80136e0 <ResetMacParameters+0x218>)
 8013516:	2201      	movs	r2, #1
 8013518:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801351c:	4b70      	ldr	r3, [pc, #448]	; (80136e0 <ResetMacParameters+0x218>)
 801351e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013522:	4b6f      	ldr	r3, [pc, #444]	; (80136e0 <ResetMacParameters+0x218>)
 8013524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013528:	4b6d      	ldr	r3, [pc, #436]	; (80136e0 <ResetMacParameters+0x218>)
 801352a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801352e:	4b6c      	ldr	r3, [pc, #432]	; (80136e0 <ResetMacParameters+0x218>)
 8013530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013534:	4b6a      	ldr	r3, [pc, #424]	; (80136e0 <ResetMacParameters+0x218>)
 8013536:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 801353a:	4b69      	ldr	r3, [pc, #420]	; (80136e0 <ResetMacParameters+0x218>)
 801353c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013540:	4b67      	ldr	r3, [pc, #412]	; (80136e0 <ResetMacParameters+0x218>)
 8013542:	4a67      	ldr	r2, [pc, #412]	; (80136e0 <ResetMacParameters+0x218>)
 8013544:	336c      	adds	r3, #108	; 0x6c
 8013546:	32b4      	adds	r2, #180	; 0xb4
 8013548:	e892 0003 	ldmia.w	r2, {r0, r1}
 801354c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013550:	4b63      	ldr	r3, [pc, #396]	; (80136e0 <ResetMacParameters+0x218>)
 8013552:	4a63      	ldr	r2, [pc, #396]	; (80136e0 <ResetMacParameters+0x218>)
 8013554:	3374      	adds	r3, #116	; 0x74
 8013556:	32bc      	adds	r2, #188	; 0xbc
 8013558:	e892 0003 	ldmia.w	r2, {r0, r1}
 801355c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013560:	4b5f      	ldr	r3, [pc, #380]	; (80136e0 <ResetMacParameters+0x218>)
 8013562:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8013566:	4b5e      	ldr	r3, [pc, #376]	; (80136e0 <ResetMacParameters+0x218>)
 8013568:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801356c:	4b5c      	ldr	r3, [pc, #368]	; (80136e0 <ResetMacParameters+0x218>)
 801356e:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8013572:	4b5b      	ldr	r3, [pc, #364]	; (80136e0 <ResetMacParameters+0x218>)
 8013574:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013578:	4b59      	ldr	r3, [pc, #356]	; (80136e0 <ResetMacParameters+0x218>)
 801357a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801357e:	4a58      	ldr	r2, [pc, #352]	; (80136e0 <ResetMacParameters+0x218>)
 8013580:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013584:	4b56      	ldr	r3, [pc, #344]	; (80136e0 <ResetMacParameters+0x218>)
 8013586:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801358a:	4a55      	ldr	r2, [pc, #340]	; (80136e0 <ResetMacParameters+0x218>)
 801358c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013590:	4b53      	ldr	r3, [pc, #332]	; (80136e0 <ResetMacParameters+0x218>)
 8013592:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8013596:	4b52      	ldr	r3, [pc, #328]	; (80136e0 <ResetMacParameters+0x218>)
 8013598:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801359c:	4b50      	ldr	r3, [pc, #320]	; (80136e0 <ResetMacParameters+0x218>)
 801359e:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80135a2:	4b4f      	ldr	r3, [pc, #316]	; (80136e0 <ResetMacParameters+0x218>)
 80135a4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 80135a8:	4b4e      	ldr	r3, [pc, #312]	; (80136e4 <ResetMacParameters+0x21c>)
 80135aa:	2200      	movs	r2, #0
 80135ac:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80135b0:	4b4b      	ldr	r3, [pc, #300]	; (80136e0 <ResetMacParameters+0x218>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80135b8:	4b49      	ldr	r3, [pc, #292]	; (80136e0 <ResetMacParameters+0x218>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80135c0:	4b47      	ldr	r3, [pc, #284]	; (80136e0 <ResetMacParameters+0x218>)
 80135c2:	2200      	movs	r2, #0
 80135c4:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80135c8:	4b45      	ldr	r3, [pc, #276]	; (80136e0 <ResetMacParameters+0x218>)
 80135ca:	2200      	movs	r2, #0
 80135cc:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80135d0:	4b43      	ldr	r3, [pc, #268]	; (80136e0 <ResetMacParameters+0x218>)
 80135d2:	2200      	movs	r2, #0
 80135d4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80135d8:	4b41      	ldr	r3, [pc, #260]	; (80136e0 <ResetMacParameters+0x218>)
 80135da:	2200      	movs	r2, #0
 80135dc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80135e0:	4b3f      	ldr	r3, [pc, #252]	; (80136e0 <ResetMacParameters+0x218>)
 80135e2:	2200      	movs	r2, #0
 80135e4:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80135e8:	4b3d      	ldr	r3, [pc, #244]	; (80136e0 <ResetMacParameters+0x218>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80135f0:	4b3b      	ldr	r3, [pc, #236]	; (80136e0 <ResetMacParameters+0x218>)
 80135f2:	2200      	movs	r2, #0
 80135f4:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80135f8:	2301      	movs	r3, #1
 80135fa:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80135fc:	4b3a      	ldr	r3, [pc, #232]	; (80136e8 <ResetMacParameters+0x220>)
 80135fe:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013600:	4b3a      	ldr	r3, [pc, #232]	; (80136ec <ResetMacParameters+0x224>)
 8013602:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013604:	4b36      	ldr	r3, [pc, #216]	; (80136e0 <ResetMacParameters+0x218>)
 8013606:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801360a:	f107 020c 	add.w	r2, r7, #12
 801360e:	4611      	mov	r1, r2
 8013610:	4618      	mov	r0, r3
 8013612:	f004 f90d 	bl	8017830 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013616:	4b33      	ldr	r3, [pc, #204]	; (80136e4 <ResetMacParameters+0x21c>)
 8013618:	2200      	movs	r2, #0
 801361a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801361e:	4b31      	ldr	r3, [pc, #196]	; (80136e4 <ResetMacParameters+0x21c>)
 8013620:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8013624:	4b2f      	ldr	r3, [pc, #188]	; (80136e4 <ResetMacParameters+0x21c>)
 8013626:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801362a:	4b2d      	ldr	r3, [pc, #180]	; (80136e0 <ResetMacParameters+0x218>)
 801362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801362e:	4a2d      	ldr	r2, [pc, #180]	; (80136e4 <ResetMacParameters+0x21c>)
 8013630:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013634:	4b2a      	ldr	r3, [pc, #168]	; (80136e0 <ResetMacParameters+0x218>)
 8013636:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801363a:	4b2a      	ldr	r3, [pc, #168]	; (80136e4 <ResetMacParameters+0x21c>)
 801363c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013640:	4b27      	ldr	r3, [pc, #156]	; (80136e0 <ResetMacParameters+0x218>)
 8013642:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013646:	4b27      	ldr	r3, [pc, #156]	; (80136e4 <ResetMacParameters+0x21c>)
 8013648:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801364c:	4b25      	ldr	r3, [pc, #148]	; (80136e4 <ResetMacParameters+0x21c>)
 801364e:	2200      	movs	r2, #0
 8013650:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013654:	4b23      	ldr	r3, [pc, #140]	; (80136e4 <ResetMacParameters+0x21c>)
 8013656:	2201      	movs	r2, #1
 8013658:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801365c:	4a21      	ldr	r2, [pc, #132]	; (80136e4 <ResetMacParameters+0x21c>)
 801365e:	4b21      	ldr	r3, [pc, #132]	; (80136e4 <ResetMacParameters+0x21c>)
 8013660:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013664:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801366a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801366c:	682b      	ldr	r3, [r5, #0]
 801366e:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013670:	4b1c      	ldr	r3, [pc, #112]	; (80136e4 <ResetMacParameters+0x21c>)
 8013672:	2201      	movs	r2, #1
 8013674:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013678:	4b1a      	ldr	r3, [pc, #104]	; (80136e4 <ResetMacParameters+0x21c>)
 801367a:	2202      	movs	r2, #2
 801367c:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013680:	2300      	movs	r3, #0
 8013682:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8013684:	2300      	movs	r3, #0
 8013686:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8013688:	4b16      	ldr	r3, [pc, #88]	; (80136e4 <ResetMacParameters+0x21c>)
 801368a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801368e:	2b00      	cmp	r3, #0
 8013690:	d009      	beq.n	80136a6 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013692:	4b14      	ldr	r3, [pc, #80]	; (80136e4 <ResetMacParameters+0x21c>)
 8013694:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801369c:	4b11      	ldr	r3, [pc, #68]	; (80136e4 <ResetMacParameters+0x21c>)
 801369e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136a2:	695b      	ldr	r3, [r3, #20]
 80136a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80136a6:	4b12      	ldr	r3, [pc, #72]	; (80136f0 <ResetMacParameters+0x228>)
 80136a8:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80136aa:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <ResetMacParameters+0x22c>)
 80136ac:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80136ae:	4b12      	ldr	r3, [pc, #72]	; (80136f8 <ResetMacParameters+0x230>)
 80136b0:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80136b2:	4b12      	ldr	r3, [pc, #72]	; (80136fc <ResetMacParameters+0x234>)
 80136b4:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80136b6:	4b12      	ldr	r3, [pc, #72]	; (8013700 <ResetMacParameters+0x238>)
 80136b8:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80136ba:	4b12      	ldr	r3, [pc, #72]	; (8013704 <ResetMacParameters+0x23c>)
 80136bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80136be:	4b12      	ldr	r3, [pc, #72]	; (8013708 <ResetMacParameters+0x240>)
 80136c0:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80136c2:	4b12      	ldr	r3, [pc, #72]	; (801370c <ResetMacParameters+0x244>)
 80136c4:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80136c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80136ca:	f107 0318 	add.w	r3, r7, #24
 80136ce:	4a10      	ldr	r2, [pc, #64]	; (8013710 <ResetMacParameters+0x248>)
 80136d0:	4618      	mov	r0, r3
 80136d2:	f002 f899 	bl	8015808 <LoRaMacClassBInit>
}
 80136d6:	bf00      	nop
 80136d8:	3740      	adds	r7, #64	; 0x40
 80136da:	46bd      	mov	sp, r7
 80136dc:	bdb0      	pop	{r4, r5, r7, pc}
 80136de:	bf00      	nop
 80136e0:	20000e80 	.word	0x20000e80
 80136e4:	20000978 	.word	0x20000978
 80136e8:	200010a0 	.word	0x200010a0
 80136ec:	20001134 	.word	0x20001134
 80136f0:	20000dd4 	.word	0x20000dd4
 80136f4:	20000d90 	.word	0x20000d90
 80136f8:	20000dc0 	.word	0x20000dc0
 80136fc:	20000df9 	.word	0x20000df9
 8013700:	20000f64 	.word	0x20000f64
 8013704:	20000ec8 	.word	0x20000ec8
 8013708:	20000ecc 	.word	0x20000ecc
 801370c:	20000f68 	.word	0x20000f68
 8013710:	200015d0 	.word	0x200015d0

08013714 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f00a fd12 	bl	801e148 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013724:	4b11      	ldr	r3, [pc, #68]	; (801376c <RxWindowSetup+0x58>)
 8013726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013728:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801372a:	4b11      	ldr	r3, [pc, #68]	; (8013770 <RxWindowSetup+0x5c>)
 801372c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013730:	4a10      	ldr	r2, [pc, #64]	; (8013774 <RxWindowSetup+0x60>)
 8013732:	6839      	ldr	r1, [r7, #0]
 8013734:	4618      	mov	r0, r3
 8013736:	f004 f8e3 	bl	8017900 <RegionRxConfig>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d010      	beq.n	8013762 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013740:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <RxWindowSetup+0x64>)
 8013742:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8013746:	4b0c      	ldr	r3, [pc, #48]	; (8013778 <RxWindowSetup+0x64>)
 8013748:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801374c:	4b07      	ldr	r3, [pc, #28]	; (801376c <RxWindowSetup+0x58>)
 801374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013750:	4a07      	ldr	r2, [pc, #28]	; (8013770 <RxWindowSetup+0x5c>)
 8013752:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013754:	4610      	mov	r0, r2
 8013756:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	7cda      	ldrb	r2, [r3, #19]
 801375c:	4b06      	ldr	r3, [pc, #24]	; (8013778 <RxWindowSetup+0x64>)
 801375e:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013762:	bf00      	nop
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop
 801376c:	0801fa04 	.word	0x0801fa04
 8013770:	20000e80 	.word	0x20000e80
 8013774:	20000d94 	.word	0x20000d94
 8013778:	20000978 	.word	0x20000978

0801377c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801377c:	b590      	push	{r4, r7, lr}
 801377e:	b083      	sub	sp, #12
 8013780:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013782:	4b1b      	ldr	r3, [pc, #108]	; (80137f0 <OpenContinuousRxCWindow+0x74>)
 8013784:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013788:	4b19      	ldr	r3, [pc, #100]	; (80137f0 <OpenContinuousRxCWindow+0x74>)
 801378a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801378e:	b259      	sxtb	r1, r3
 8013790:	4b17      	ldr	r3, [pc, #92]	; (80137f0 <OpenContinuousRxCWindow+0x74>)
 8013792:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013796:	4b16      	ldr	r3, [pc, #88]	; (80137f0 <OpenContinuousRxCWindow+0x74>)
 8013798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801379a:	4c16      	ldr	r4, [pc, #88]	; (80137f4 <OpenContinuousRxCWindow+0x78>)
 801379c:	9400      	str	r4, [sp, #0]
 801379e:	f004 f895 	bl	80178cc <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80137a2:	4b15      	ldr	r3, [pc, #84]	; (80137f8 <OpenContinuousRxCWindow+0x7c>)
 80137a4:	2202      	movs	r2, #2
 80137a6:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80137aa:	4b13      	ldr	r3, [pc, #76]	; (80137f8 <OpenContinuousRxCWindow+0x7c>)
 80137ac:	2201      	movs	r2, #1
 80137ae:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80137b2:	4b0f      	ldr	r3, [pc, #60]	; (80137f0 <OpenContinuousRxCWindow+0x74>)
 80137b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137b8:	4a10      	ldr	r2, [pc, #64]	; (80137fc <OpenContinuousRxCWindow+0x80>)
 80137ba:	490e      	ldr	r1, [pc, #56]	; (80137f4 <OpenContinuousRxCWindow+0x78>)
 80137bc:	4618      	mov	r0, r3
 80137be:	f004 f89f 	bl	8017900 <RegionRxConfig>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00f      	beq.n	80137e8 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80137c8:	4b0b      	ldr	r3, [pc, #44]	; (80137f8 <OpenContinuousRxCWindow+0x7c>)
 80137ca:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80137ce:	4b0a      	ldr	r3, [pc, #40]	; (80137f8 <OpenContinuousRxCWindow+0x7c>)
 80137d0:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 80137d4:	4b0a      	ldr	r3, [pc, #40]	; (8013800 <OpenContinuousRxCWindow+0x84>)
 80137d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137d8:	2000      	movs	r0, #0
 80137da:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80137dc:	4b06      	ldr	r3, [pc, #24]	; (80137f8 <OpenContinuousRxCWindow+0x7c>)
 80137de:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80137e2:	4b05      	ldr	r3, [pc, #20]	; (80137f8 <OpenContinuousRxCWindow+0x7c>)
 80137e4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80137e8:	bf00      	nop
 80137ea:	3704      	adds	r7, #4
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd90      	pop	{r4, r7, pc}
 80137f0:	20000e80 	.word	0x20000e80
 80137f4:	20000d58 	.word	0x20000d58
 80137f8:	20000978 	.word	0x20000978
 80137fc:	20000d94 	.word	0x20000d94
 8013800:	0801fa04 	.word	0x0801fa04

08013804 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b088      	sub	sp, #32
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	603b      	str	r3, [r7, #0]
 8013810:	4613      	mov	r3, r2
 8013812:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013814:	4b82      	ldr	r3, [pc, #520]	; (8013a20 <PrepareFrame+0x21c>)
 8013816:	2200      	movs	r2, #0
 8013818:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801381a:	4b81      	ldr	r3, [pc, #516]	; (8013a20 <PrepareFrame+0x21c>)
 801381c:	2200      	movs	r2, #0
 801381e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8013822:	2300      	movs	r3, #0
 8013824:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013826:	2300      	movs	r3, #0
 8013828:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801382a:	2300      	movs	r3, #0
 801382c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d101      	bne.n	8013838 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013834:	2300      	movs	r3, #0
 8013836:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013838:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801383a:	461a      	mov	r2, r3
 801383c:	6839      	ldr	r1, [r7, #0]
 801383e:	4879      	ldr	r0, [pc, #484]	; (8013a24 <PrepareFrame+0x220>)
 8013840:	f006 fae7 	bl	8019e12 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013844:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013846:	b2da      	uxtb	r2, r3
 8013848:	4b75      	ldr	r3, [pc, #468]	; (8013a20 <PrepareFrame+0x21c>)
 801384a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	781a      	ldrb	r2, [r3, #0]
 8013852:	4b73      	ldr	r3, [pc, #460]	; (8013a20 <PrepareFrame+0x21c>)
 8013854:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801385e:	b2db      	uxtb	r3, r3
 8013860:	2b07      	cmp	r3, #7
 8013862:	f000 80b9 	beq.w	80139d8 <PrepareFrame+0x1d4>
 8013866:	2b07      	cmp	r3, #7
 8013868:	f300 80d0 	bgt.w	8013a0c <PrepareFrame+0x208>
 801386c:	2b02      	cmp	r3, #2
 801386e:	d006      	beq.n	801387e <PrepareFrame+0x7a>
 8013870:	2b04      	cmp	r3, #4
 8013872:	f040 80cb 	bne.w	8013a0c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013876:	4b6a      	ldr	r3, [pc, #424]	; (8013a20 <PrepareFrame+0x21c>)
 8013878:	2201      	movs	r2, #1
 801387a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801387e:	4b68      	ldr	r3, [pc, #416]	; (8013a20 <PrepareFrame+0x21c>)
 8013880:	2204      	movs	r2, #4
 8013882:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013886:	4b66      	ldr	r3, [pc, #408]	; (8013a20 <PrepareFrame+0x21c>)
 8013888:	4a67      	ldr	r2, [pc, #412]	; (8013a28 <PrepareFrame+0x224>)
 801388a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801388e:	4b64      	ldr	r3, [pc, #400]	; (8013a20 <PrepareFrame+0x21c>)
 8013890:	22ff      	movs	r2, #255	; 0xff
 8013892:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	781a      	ldrb	r2, [r3, #0]
 801389a:	4b61      	ldr	r3, [pc, #388]	; (8013a20 <PrepareFrame+0x21c>)
 801389c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80138a0:	4a5f      	ldr	r2, [pc, #380]	; (8013a20 <PrepareFrame+0x21c>)
 80138a2:	79fb      	ldrb	r3, [r7, #7]
 80138a4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80138a8:	4b60      	ldr	r3, [pc, #384]	; (8013a2c <PrepareFrame+0x228>)
 80138aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80138ae:	4a5c      	ldr	r2, [pc, #368]	; (8013a20 <PrepareFrame+0x21c>)
 80138b0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80138b4:	68bb      	ldr	r3, [r7, #8]
 80138b6:	781a      	ldrb	r2, [r3, #0]
 80138b8:	4b59      	ldr	r3, [pc, #356]	; (8013a20 <PrepareFrame+0x21c>)
 80138ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80138be:	4b58      	ldr	r3, [pc, #352]	; (8013a20 <PrepareFrame+0x21c>)
 80138c0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80138c4:	4b56      	ldr	r3, [pc, #344]	; (8013a20 <PrepareFrame+0x21c>)
 80138c6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80138ca:	4b55      	ldr	r3, [pc, #340]	; (8013a20 <PrepareFrame+0x21c>)
 80138cc:	4a55      	ldr	r2, [pc, #340]	; (8013a24 <PrepareFrame+0x220>)
 80138ce:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80138d2:	f107 0318 	add.w	r3, r7, #24
 80138d6:	4618      	mov	r0, r3
 80138d8:	f003 f8ce 	bl	8016a78 <LoRaMacCryptoGetFCntUp>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d001      	beq.n	80138e6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80138e2:	2312      	movs	r3, #18
 80138e4:	e098      	b.n	8013a18 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	b29a      	uxth	r2, r3
 80138ea:	4b4d      	ldr	r3, [pc, #308]	; (8013a20 <PrepareFrame+0x21c>)
 80138ec:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80138f0:	4b4b      	ldr	r3, [pc, #300]	; (8013a20 <PrepareFrame+0x21c>)
 80138f2:	2200      	movs	r2, #0
 80138f4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80138f8:	4b49      	ldr	r3, [pc, #292]	; (8013a20 <PrepareFrame+0x21c>)
 80138fa:	2200      	movs	r2, #0
 80138fc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013900:	69bb      	ldr	r3, [r7, #24]
 8013902:	4a47      	ldr	r2, [pc, #284]	; (8013a20 <PrepareFrame+0x21c>)
 8013904:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013908:	f107 0314 	add.w	r3, r7, #20
 801390c:	4618      	mov	r0, r3
 801390e:	f002 fa7f 	bl	8015e10 <LoRaMacCommandsGetSizeSerializedCmds>
 8013912:	4603      	mov	r3, r0
 8013914:	2b00      	cmp	r3, #0
 8013916:	d001      	beq.n	801391c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013918:	2313      	movs	r3, #19
 801391a:	e07d      	b.n	8013a18 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d076      	beq.n	8013a10 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013922:	4b42      	ldr	r3, [pc, #264]	; (8013a2c <PrepareFrame+0x228>)
 8013924:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013928:	4618      	mov	r0, r3
 801392a:	f7fe fd85 	bl	8012438 <GetMaxAppPayloadWithoutFOptsLength>
 801392e:	4603      	mov	r3, r0
 8013930:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013932:	4b3b      	ldr	r3, [pc, #236]	; (8013a20 <PrepareFrame+0x21c>)
 8013934:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013938:	2b00      	cmp	r3, #0
 801393a:	d01d      	beq.n	8013978 <PrepareFrame+0x174>
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	2b0f      	cmp	r3, #15
 8013940:	d81a      	bhi.n	8013978 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013942:	f107 0314 	add.w	r3, r7, #20
 8013946:	4a3a      	ldr	r2, [pc, #232]	; (8013a30 <PrepareFrame+0x22c>)
 8013948:	4619      	mov	r1, r3
 801394a:	200f      	movs	r0, #15
 801394c:	f002 fa76 	bl	8015e3c <LoRaMacCommandsSerializeCmds>
 8013950:	4603      	mov	r3, r0
 8013952:	2b00      	cmp	r3, #0
 8013954:	d001      	beq.n	801395a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013956:	2313      	movs	r3, #19
 8013958:	e05e      	b.n	8013a18 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	f003 030f 	and.w	r3, r3, #15
 8013960:	b2d9      	uxtb	r1, r3
 8013962:	68ba      	ldr	r2, [r7, #8]
 8013964:	7813      	ldrb	r3, [r2, #0]
 8013966:	f361 0303 	bfi	r3, r1, #0, #4
 801396a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	781a      	ldrb	r2, [r3, #0]
 8013970:	4b2b      	ldr	r3, [pc, #172]	; (8013a20 <PrepareFrame+0x21c>)
 8013972:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013976:	e04b      	b.n	8013a10 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013978:	4b29      	ldr	r3, [pc, #164]	; (8013a20 <PrepareFrame+0x21c>)
 801397a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801397e:	2b00      	cmp	r3, #0
 8013980:	d010      	beq.n	80139a4 <PrepareFrame+0x1a0>
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	2b0f      	cmp	r3, #15
 8013986:	d90d      	bls.n	80139a4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013988:	7ffb      	ldrb	r3, [r7, #31]
 801398a:	f107 0114 	add.w	r1, r7, #20
 801398e:	4a29      	ldr	r2, [pc, #164]	; (8013a34 <PrepareFrame+0x230>)
 8013990:	4618      	mov	r0, r3
 8013992:	f002 fa53 	bl	8015e3c <LoRaMacCommandsSerializeCmds>
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	d001      	beq.n	80139a0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801399c:	2313      	movs	r3, #19
 801399e:	e03b      	b.n	8013a18 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80139a0:	230a      	movs	r3, #10
 80139a2:	e039      	b.n	8013a18 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80139a4:	7ffb      	ldrb	r3, [r7, #31]
 80139a6:	f107 0114 	add.w	r1, r7, #20
 80139aa:	4a22      	ldr	r2, [pc, #136]	; (8013a34 <PrepareFrame+0x230>)
 80139ac:	4618      	mov	r0, r3
 80139ae:	f002 fa45 	bl	8015e3c <LoRaMacCommandsSerializeCmds>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d001      	beq.n	80139bc <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139b8:	2313      	movs	r3, #19
 80139ba:	e02d      	b.n	8013a18 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80139bc:	4b18      	ldr	r3, [pc, #96]	; (8013a20 <PrepareFrame+0x21c>)
 80139be:	2200      	movs	r2, #0
 80139c0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80139c4:	4b16      	ldr	r3, [pc, #88]	; (8013a20 <PrepareFrame+0x21c>)
 80139c6:	4a1b      	ldr	r2, [pc, #108]	; (8013a34 <PrepareFrame+0x230>)
 80139c8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	b2da      	uxtb	r2, r3
 80139d0:	4b13      	ldr	r3, [pc, #76]	; (8013a20 <PrepareFrame+0x21c>)
 80139d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80139d6:	e01b      	b.n	8013a10 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d01a      	beq.n	8013a14 <PrepareFrame+0x210>
 80139de:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <PrepareFrame+0x21c>)
 80139e0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d015      	beq.n	8013a14 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80139e8:	4813      	ldr	r0, [pc, #76]	; (8013a38 <PrepareFrame+0x234>)
 80139ea:	4b0d      	ldr	r3, [pc, #52]	; (8013a20 <PrepareFrame+0x21c>)
 80139ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	461a      	mov	r2, r3
 80139f4:	6839      	ldr	r1, [r7, #0]
 80139f6:	f006 fa0c 	bl	8019e12 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80139fa:	4b09      	ldr	r3, [pc, #36]	; (8013a20 <PrepareFrame+0x21c>)
 80139fc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	3301      	adds	r3, #1
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	4b06      	ldr	r3, [pc, #24]	; (8013a20 <PrepareFrame+0x21c>)
 8013a08:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013a0a:	e003      	b.n	8013a14 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	e003      	b.n	8013a18 <PrepareFrame+0x214>
            break;
 8013a10:	bf00      	nop
 8013a12:	e000      	b.n	8013a16 <PrepareFrame+0x212>
            break;
 8013a14:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013a16:	2300      	movs	r3, #0
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3720      	adds	r7, #32
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}
 8013a20:	20000978 	.word	0x20000978
 8013a24:	20000ab0 	.word	0x20000ab0
 8013a28:	2000097a 	.word	0x2000097a
 8013a2c:	20000e80 	.word	0x20000e80
 8013a30:	20000a90 	.word	0x20000a90
 8013a34:	20000e00 	.word	0x20000e00
 8013a38:	2000097b 	.word	0x2000097b

08013a3c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b08a      	sub	sp, #40	; 0x28
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	4603      	mov	r3, r0
 8013a44:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a46:	2303      	movs	r3, #3
 8013a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013a50:	79fb      	ldrb	r3, [r7, #7]
 8013a52:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a54:	4b48      	ldr	r3, [pc, #288]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013a56:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a5a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a5c:	4b46      	ldr	r3, [pc, #280]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013a5e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013a62:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013a64:	4b44      	ldr	r3, [pc, #272]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a6a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013a6c:	4b42      	ldr	r3, [pc, #264]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a72:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013a74:	4b41      	ldr	r3, [pc, #260]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013a7a:	4b3f      	ldr	r3, [pc, #252]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013a7c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013a80:	f107 020f 	add.w	r2, r7, #15
 8013a84:	f107 0110 	add.w	r1, r7, #16
 8013a88:	4b3d      	ldr	r3, [pc, #244]	; (8013b80 <SendFrameOnChannel+0x144>)
 8013a8a:	f003 ff4e 	bl	801792a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a8e:	4b3b      	ldr	r3, [pc, #236]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013a90:	2201      	movs	r2, #1
 8013a92:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a96:	4b38      	ldr	r3, [pc, #224]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013a98:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a9c:	b2da      	uxtb	r2, r3
 8013a9e:	4b37      	ldr	r3, [pc, #220]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013aa0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013aa4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013aa8:	4b34      	ldr	r3, [pc, #208]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013aaa:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013aae:	79fb      	ldrb	r3, [r7, #7]
 8013ab0:	4a32      	ldr	r2, [pc, #200]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013ab2:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ab6:	4b31      	ldr	r3, [pc, #196]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013ab8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013abc:	4a2f      	ldr	r2, [pc, #188]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013abe:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ac2:	4b2e      	ldr	r3, [pc, #184]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013ac4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013ac8:	4a2c      	ldr	r2, [pc, #176]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013aca:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013ace:	f001 ff07 	bl	80158e0 <LoRaMacClassBIsBeaconModeActive>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d00b      	beq.n	8013af0 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013ad8:	4b28      	ldr	r3, [pc, #160]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013ada:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f001 ff69 	bl	80159b6 <LoRaMacClassBIsUplinkCollision>
 8013ae4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013ae6:	6a3b      	ldr	r3, [r7, #32]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d001      	beq.n	8013af0 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013aec:	2310      	movs	r3, #16
 8013aee:	e03e      	b.n	8013b6e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013af0:	4b21      	ldr	r3, [pc, #132]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013af2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013af6:	2b01      	cmp	r3, #1
 8013af8:	d101      	bne.n	8013afe <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013afa:	f001 ff66 	bl	80159ca <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013afe:	f001 ff00 	bl	8015902 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013b02:	4b1d      	ldr	r3, [pc, #116]	; (8013b78 <SendFrameOnChannel+0x13c>)
 8013b04:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	4a1c      	ldr	r2, [pc, #112]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b0c:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013b10:	4611      	mov	r1, r2
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff fc42 	bl	801339c <SecureFrame>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d002      	beq.n	8013b2c <SendFrameOnChannel+0xf0>
    {
        return status;
 8013b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b2a:	e020      	b.n	8013b6e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b2c:	4b13      	ldr	r3, [pc, #76]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013b32:	f043 0302 	orr.w	r3, r3, #2
 8013b36:	4a11      	ldr	r2, [pc, #68]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b38:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013b3c:	4b0f      	ldr	r3, [pc, #60]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b3e:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013b42:	f083 0301 	eor.w	r3, r3, #1
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d007      	beq.n	8013b5c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013b4c:	4b0b      	ldr	r3, [pc, #44]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b4e:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013b52:	3301      	adds	r3, #1
 8013b54:	b2da      	uxtb	r2, r3
 8013b56:	4b09      	ldr	r3, [pc, #36]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b58:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013b5c:	4b09      	ldr	r3, [pc, #36]	; (8013b84 <SendFrameOnChannel+0x148>)
 8013b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b60:	4a06      	ldr	r2, [pc, #24]	; (8013b7c <SendFrameOnChannel+0x140>)
 8013b62:	8812      	ldrh	r2, [r2, #0]
 8013b64:	b2d2      	uxtb	r2, r2
 8013b66:	4611      	mov	r1, r2
 8013b68:	4807      	ldr	r0, [pc, #28]	; (8013b88 <SendFrameOnChannel+0x14c>)
 8013b6a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013b6c:	2300      	movs	r3, #0
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3728      	adds	r7, #40	; 0x28
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	20000e80 	.word	0x20000e80
 8013b7c:	20000978 	.word	0x20000978
 8013b80:	20000d8c 	.word	0x20000d8c
 8013b84:	0801fa04 	.word	0x0801fa04
 8013b88:	2000097a 	.word	0x2000097a

08013b8c <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b086      	sub	sp, #24
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	4603      	mov	r3, r0
 8013b94:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013b96:	4b16      	ldr	r3, [pc, #88]	; (8013bf0 <SetTxContinuousWave+0x64>)
 8013b98:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013b9c:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013b9e:	4b15      	ldr	r3, [pc, #84]	; (8013bf4 <SetTxContinuousWave+0x68>)
 8013ba0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ba4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013ba6:	4b13      	ldr	r3, [pc, #76]	; (8013bf4 <SetTxContinuousWave+0x68>)
 8013ba8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013bac:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013bae:	4b11      	ldr	r3, [pc, #68]	; (8013bf4 <SetTxContinuousWave+0x68>)
 8013bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bb4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013bb6:	4b0f      	ldr	r3, [pc, #60]	; (8013bf4 <SetTxContinuousWave+0x68>)
 8013bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bbc:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013bbe:	88fb      	ldrh	r3, [r7, #6]
 8013bc0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013bc2:	4b0c      	ldr	r3, [pc, #48]	; (8013bf4 <SetTxContinuousWave+0x68>)
 8013bc4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bc8:	f107 0208 	add.w	r2, r7, #8
 8013bcc:	4611      	mov	r1, r2
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f003 ff5a 	bl	8017a88 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013bd4:	4b06      	ldr	r3, [pc, #24]	; (8013bf0 <SetTxContinuousWave+0x64>)
 8013bd6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013bda:	f043 0302 	orr.w	r3, r3, #2
 8013bde:	4a04      	ldr	r2, [pc, #16]	; (8013bf0 <SetTxContinuousWave+0x64>)
 8013be0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	20000978 	.word	0x20000978
 8013bf4:	20000e80 	.word	0x20000e80

08013bf8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	4603      	mov	r3, r0
 8013c00:	6039      	str	r1, [r7, #0]
 8013c02:	80fb      	strh	r3, [r7, #6]
 8013c04:	4613      	mov	r3, r2
 8013c06:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013c08:	4b09      	ldr	r3, [pc, #36]	; (8013c30 <SetTxContinuousWave1+0x38>)
 8013c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c0c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013c10:	88fa      	ldrh	r2, [r7, #6]
 8013c12:	6838      	ldr	r0, [r7, #0]
 8013c14:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c16:	4b07      	ldr	r3, [pc, #28]	; (8013c34 <SetTxContinuousWave1+0x3c>)
 8013c18:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c1c:	f043 0302 	orr.w	r3, r3, #2
 8013c20:	4a04      	ldr	r2, [pc, #16]	; (8013c34 <SetTxContinuousWave1+0x3c>)
 8013c22:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3708      	adds	r7, #8
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	0801fa04 	.word	0x0801fa04
 8013c34:	20000978 	.word	0x20000978

08013c38 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013c38:	b480      	push	{r7}
 8013c3a:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013c3c:	2300      	movs	r3, #0
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bc80      	pop	{r7}
 8013c44:	4770      	bx	lr

08013c46 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013c46:	b480      	push	{r7}
 8013c48:	b083      	sub	sp, #12
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	6078      	str	r0, [r7, #4]
 8013c4e:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d002      	beq.n	8013c5c <DetermineFrameType+0x16>
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d101      	bne.n	8013c60 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013c5c:	2303      	movs	r3, #3
 8013c5e:	e03b      	b.n	8013cd8 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	7b1b      	ldrb	r3, [r3, #12]
 8013c64:	f003 030f 	and.w	r3, r3, #15
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d008      	beq.n	8013c80 <DetermineFrameType+0x3a>
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d003      	beq.n	8013c80 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	701a      	strb	r2, [r3, #0]
 8013c7e:	e02a      	b.n	8013cd6 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d103      	bne.n	8013c92 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	701a      	strb	r2, [r3, #0]
 8013c90:	e021      	b.n	8013cd6 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	7b1b      	ldrb	r3, [r3, #12]
 8013c96:	f003 030f 	and.w	r3, r3, #15
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d108      	bne.n	8013cb2 <DetermineFrameType+0x6c>
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d103      	bne.n	8013cb2 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	2202      	movs	r2, #2
 8013cae:	701a      	strb	r2, [r3, #0]
 8013cb0:	e011      	b.n	8013cd6 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	7b1b      	ldrb	r3, [r3, #12]
 8013cb6:	f003 030f 	and.w	r3, r3, #15
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d108      	bne.n	8013cd2 <DetermineFrameType+0x8c>
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d003      	beq.n	8013cd2 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	2203      	movs	r2, #3
 8013cce:	701a      	strb	r2, [r3, #0]
 8013cd0:	e001      	b.n	8013cd6 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013cd2:	2318      	movs	r3, #24
 8013cd4:	e000      	b.n	8013cd8 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013cd6:	2300      	movs	r3, #0
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	370c      	adds	r7, #12
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bc80      	pop	{r7}
 8013ce0:	4770      	bx	lr
	...

08013ce4 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013ce8:	4b12      	ldr	r3, [pc, #72]	; (8013d34 <CheckRetransUnconfirmedUplink+0x50>)
 8013cea:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013cee:	4b12      	ldr	r3, [pc, #72]	; (8013d38 <CheckRetransUnconfirmedUplink+0x54>)
 8013cf0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d301      	bcc.n	8013cfc <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013cf8:	2301      	movs	r3, #1
 8013cfa:	e016      	b.n	8013d2a <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013cfc:	4b0d      	ldr	r3, [pc, #52]	; (8013d34 <CheckRetransUnconfirmedUplink+0x50>)
 8013cfe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d02:	f003 0302 	and.w	r3, r3, #2
 8013d06:	b2db      	uxtb	r3, r3
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d00d      	beq.n	8013d28 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013d0c:	4b0a      	ldr	r3, [pc, #40]	; (8013d38 <CheckRetransUnconfirmedUplink+0x54>)
 8013d0e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d101      	bne.n	8013d1a <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013d16:	2301      	movs	r3, #1
 8013d18:	e007      	b.n	8013d2a <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013d1a:	4b06      	ldr	r3, [pc, #24]	; (8013d34 <CheckRetransUnconfirmedUplink+0x50>)
 8013d1c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d101      	bne.n	8013d28 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013d24:	2301      	movs	r3, #1
 8013d26:	e000      	b.n	8013d2a <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bc80      	pop	{r7}
 8013d30:	4770      	bx	lr
 8013d32:	bf00      	nop
 8013d34:	20000978 	.word	0x20000978
 8013d38:	20000e80 	.word	0x20000e80

08013d3c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013d3c:	b480      	push	{r7}
 8013d3e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d40:	4b0e      	ldr	r3, [pc, #56]	; (8013d7c <CheckRetransConfirmedUplink+0x40>)
 8013d42:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8013d46:	4b0d      	ldr	r3, [pc, #52]	; (8013d7c <CheckRetransConfirmedUplink+0x40>)
 8013d48:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d301      	bcc.n	8013d54 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013d50:	2301      	movs	r3, #1
 8013d52:	e00f      	b.n	8013d74 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d54:	4b09      	ldr	r3, [pc, #36]	; (8013d7c <CheckRetransConfirmedUplink+0x40>)
 8013d56:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d5a:	f003 0302 	and.w	r3, r3, #2
 8013d5e:	b2db      	uxtb	r3, r3
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d006      	beq.n	8013d72 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d64:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <CheckRetransConfirmedUplink+0x40>)
 8013d66:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d001      	beq.n	8013d72 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013d6e:	2301      	movs	r3, #1
 8013d70:	e000      	b.n	8013d74 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013d72:	2300      	movs	r3, #0
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bc80      	pop	{r7}
 8013d7a:	4770      	bx	lr
 8013d7c:	20000978 	.word	0x20000978

08013d80 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d80:	b480      	push	{r7}
 8013d82:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d84:	4b1a      	ldr	r3, [pc, #104]	; (8013df0 <StopRetransmission+0x70>)
 8013d86:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d8a:	f003 0302 	and.w	r3, r3, #2
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d009      	beq.n	8013da8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d94:	4b16      	ldr	r3, [pc, #88]	; (8013df0 <StopRetransmission+0x70>)
 8013d96:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00e      	beq.n	8013dbc <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013d9e:	4b14      	ldr	r3, [pc, #80]	; (8013df0 <StopRetransmission+0x70>)
 8013da0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d009      	beq.n	8013dbc <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013da8:	4b12      	ldr	r3, [pc, #72]	; (8013df4 <StopRetransmission+0x74>)
 8013daa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d004      	beq.n	8013dbc <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013db2:	4b10      	ldr	r3, [pc, #64]	; (8013df4 <StopRetransmission+0x74>)
 8013db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013db6:	3301      	adds	r3, #1
 8013db8:	4a0e      	ldr	r2, [pc, #56]	; (8013df4 <StopRetransmission+0x74>)
 8013dba:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013dbc:	4b0c      	ldr	r3, [pc, #48]	; (8013df0 <StopRetransmission+0x70>)
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013dc4:	4b0a      	ldr	r3, [pc, #40]	; (8013df0 <StopRetransmission+0x70>)
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013dcc:	4b08      	ldr	r3, [pc, #32]	; (8013df0 <StopRetransmission+0x70>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013dd4:	4b06      	ldr	r3, [pc, #24]	; (8013df0 <StopRetransmission+0x70>)
 8013dd6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dda:	f023 0302 	bic.w	r3, r3, #2
 8013dde:	4a04      	ldr	r2, [pc, #16]	; (8013df0 <StopRetransmission+0x70>)
 8013de0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013de4:	2301      	movs	r3, #1
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bc80      	pop	{r7}
 8013dec:	4770      	bx	lr
 8013dee:	bf00      	nop
 8013df0:	20000978 	.word	0x20000978
 8013df4:	20000e80 	.word	0x20000e80

08013df8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013dfc:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <OnMacProcessNotify+0x28>)
 8013dfe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00a      	beq.n	8013e1c <OnMacProcessNotify+0x24>
 8013e06:	4b06      	ldr	r3, [pc, #24]	; (8013e20 <OnMacProcessNotify+0x28>)
 8013e08:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e0c:	695b      	ldr	r3, [r3, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d004      	beq.n	8013e1c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013e12:	4b03      	ldr	r3, [pc, #12]	; (8013e20 <OnMacProcessNotify+0x28>)
 8013e14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e18:	695b      	ldr	r3, [r3, #20]
 8013e1a:	4798      	blx	r3
    }
}
 8013e1c:	bf00      	nop
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	20000978 	.word	0x20000978

08013e24 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e2e:	4b0b      	ldr	r3, [pc, #44]	; (8013e5c <CallNvmDataChangeCallback+0x38>)
 8013e30:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d00c      	beq.n	8013e52 <CallNvmDataChangeCallback+0x2e>
 8013e38:	4b08      	ldr	r3, [pc, #32]	; (8013e5c <CallNvmDataChangeCallback+0x38>)
 8013e3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e3e:	691b      	ldr	r3, [r3, #16]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d006      	beq.n	8013e52 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e44:	4b05      	ldr	r3, [pc, #20]	; (8013e5c <CallNvmDataChangeCallback+0x38>)
 8013e46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e4a:	691b      	ldr	r3, [r3, #16]
 8013e4c:	88fa      	ldrh	r2, [r7, #6]
 8013e4e:	4610      	mov	r0, r2
 8013e50:	4798      	blx	r3
    }
}
 8013e52:	bf00      	nop
 8013e54:	3708      	adds	r7, #8
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	20000978 	.word	0x20000978

08013e60 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013e66:	4b1b      	ldr	r3, [pc, #108]	; (8013ed4 <AckTimeoutRetriesProcess+0x74>)
 8013e68:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013e6c:	4b19      	ldr	r3, [pc, #100]	; (8013ed4 <AckTimeoutRetriesProcess+0x74>)
 8013e6e:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d229      	bcs.n	8013eca <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013e76:	4b17      	ldr	r3, [pc, #92]	; (8013ed4 <AckTimeoutRetriesProcess+0x74>)
 8013e78:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	b2da      	uxtb	r2, r3
 8013e80:	4b14      	ldr	r3, [pc, #80]	; (8013ed4 <AckTimeoutRetriesProcess+0x74>)
 8013e82:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013e86:	4b13      	ldr	r3, [pc, #76]	; (8013ed4 <AckTimeoutRetriesProcess+0x74>)
 8013e88:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e8c:	f003 0301 	and.w	r3, r3, #1
 8013e90:	b2db      	uxtb	r3, r3
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d019      	beq.n	8013eca <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013e96:	2322      	movs	r3, #34	; 0x22
 8013e98:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e9a:	4b0f      	ldr	r3, [pc, #60]	; (8013ed8 <AckTimeoutRetriesProcess+0x78>)
 8013e9c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013ea0:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013ea2:	4b0d      	ldr	r3, [pc, #52]	; (8013ed8 <AckTimeoutRetriesProcess+0x78>)
 8013ea4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ea8:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013eaa:	4b0b      	ldr	r3, [pc, #44]	; (8013ed8 <AckTimeoutRetriesProcess+0x78>)
 8013eac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013eb0:	f107 0208 	add.w	r2, r7, #8
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f003 fc91 	bl	80177de <RegionGetPhyParam>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	b25a      	sxtb	r2, r3
 8013ec4:	4b04      	ldr	r3, [pc, #16]	; (8013ed8 <AckTimeoutRetriesProcess+0x78>)
 8013ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013eca:	bf00      	nop
 8013ecc:	3710      	adds	r7, #16
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	20000978 	.word	0x20000978
 8013ed8:	20000e80 	.word	0x20000e80

08013edc <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b084      	sub	sp, #16
 8013ee0:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013ee2:	4b14      	ldr	r3, [pc, #80]	; (8013f34 <AckTimeoutRetriesFinalize+0x58>)
 8013ee4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013ee8:	f083 0301 	eor.w	r3, r3, #1
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d015      	beq.n	8013f1e <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013ef2:	2302      	movs	r3, #2
 8013ef4:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013ef6:	4b10      	ldr	r3, [pc, #64]	; (8013f38 <AckTimeoutRetriesFinalize+0x5c>)
 8013ef8:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013efa:	4b10      	ldr	r3, [pc, #64]	; (8013f3c <AckTimeoutRetriesFinalize+0x60>)
 8013efc:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013efe:	4b10      	ldr	r3, [pc, #64]	; (8013f40 <AckTimeoutRetriesFinalize+0x64>)
 8013f00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f04:	1d3a      	adds	r2, r7, #4
 8013f06:	4611      	mov	r1, r2
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f003 fc91 	bl	8017830 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013f0e:	4b09      	ldr	r3, [pc, #36]	; (8013f34 <AckTimeoutRetriesFinalize+0x58>)
 8013f10:	2200      	movs	r2, #0
 8013f12:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013f16:	4b07      	ldr	r3, [pc, #28]	; (8013f34 <AckTimeoutRetriesFinalize+0x58>)
 8013f18:	2200      	movs	r2, #0
 8013f1a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013f1e:	4b05      	ldr	r3, [pc, #20]	; (8013f34 <AckTimeoutRetriesFinalize+0x58>)
 8013f20:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013f24:	4b03      	ldr	r3, [pc, #12]	; (8013f34 <AckTimeoutRetriesFinalize+0x58>)
 8013f26:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013f2a:	bf00      	nop
 8013f2c:	3710      	adds	r7, #16
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	20000978 	.word	0x20000978
 8013f38:	200010a0 	.word	0x200010a0
 8013f3c:	20001134 	.word	0x20001134
 8013f40:	20000e80 	.word	0x20000e80

08013f44 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013f44:	b480      	push	{r7}
 8013f46:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f48:	4b0b      	ldr	r3, [pc, #44]	; (8013f78 <IsRequestPending+0x34>)
 8013f4a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f4e:	f003 0304 	and.w	r3, r3, #4
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d107      	bne.n	8013f68 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013f58:	4b07      	ldr	r3, [pc, #28]	; (8013f78 <IsRequestPending+0x34>)
 8013f5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f5e:	f003 0301 	and.w	r3, r3, #1
 8013f62:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d001      	beq.n	8013f6c <IsRequestPending+0x28>
    {
        return 1;
 8013f68:	2301      	movs	r3, #1
 8013f6a:	e000      	b.n	8013f6e <IsRequestPending+0x2a>
    }
    return 0;
 8013f6c:	2300      	movs	r3, #0
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bc80      	pop	{r7}
 8013f74:	4770      	bx	lr
 8013f76:	bf00      	nop
 8013f78:	20000978 	.word	0x20000978

08013f7c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b08f      	sub	sp, #60	; 0x3c
 8013f80:	af02      	add	r7, sp, #8
 8013f82:	6178      	str	r0, [r7, #20]
 8013f84:	6139      	str	r1, [r7, #16]
 8013f86:	4613      	mov	r3, r2
 8013f88:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d002      	beq.n	8013f96 <LoRaMacInitialization+0x1a>
 8013f90:	693b      	ldr	r3, [r7, #16]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d101      	bne.n	8013f9a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f96:	2303      	movs	r3, #3
 8013f98:	e273      	b.n	8014482 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d00b      	beq.n	8013fba <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d007      	beq.n	8013fba <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d003      	beq.n	8013fba <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fba:	2303      	movs	r3, #3
 8013fbc:	e261      	b.n	8014482 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013fbe:	7bfb      	ldrb	r3, [r7, #15]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f003 fbfc 	bl	80177be <RegionIsActive>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	f083 0301 	eor.w	r3, r3, #1
 8013fcc:	b2db      	uxtb	r3, r3
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d001      	beq.n	8013fd6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013fd2:	2309      	movs	r3, #9
 8013fd4:	e255      	b.n	8014482 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013fd6:	6978      	ldr	r0, [r7, #20]
 8013fd8:	f002 f852 	bl	8016080 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013fdc:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013fe0:	2100      	movs	r1, #0
 8013fe2:	48c7      	ldr	r0, [pc, #796]	; (8014300 <LoRaMacInitialization+0x384>)
 8013fe4:	f005 ff50 	bl	8019e88 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013fe8:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013fec:	2100      	movs	r1, #0
 8013fee:	48c5      	ldr	r0, [pc, #788]	; (8014304 <LoRaMacInitialization+0x388>)
 8013ff0:	f005 ff4a 	bl	8019e88 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013ff4:	4bc3      	ldr	r3, [pc, #780]	; (8014304 <LoRaMacInitialization+0x388>)
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8013ffc:	4bc1      	ldr	r3, [pc, #772]	; (8014304 <LoRaMacInitialization+0x388>)
 8013ffe:	2201      	movs	r2, #1
 8014000:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014004:	4abe      	ldr	r2, [pc, #760]	; (8014300 <LoRaMacInitialization+0x384>)
 8014006:	7bfb      	ldrb	r3, [r7, #15]
 8014008:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 801400c:	4bbc      	ldr	r3, [pc, #752]	; (8014300 <LoRaMacInitialization+0x384>)
 801400e:	2200      	movs	r2, #0
 8014010:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014014:	4bba      	ldr	r3, [pc, #744]	; (8014300 <LoRaMacInitialization+0x384>)
 8014016:	2200      	movs	r2, #0
 8014018:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 801401c:	4bb8      	ldr	r3, [pc, #736]	; (8014300 <LoRaMacInitialization+0x384>)
 801401e:	4aba      	ldr	r2, [pc, #744]	; (8014308 <LoRaMacInitialization+0x38c>)
 8014020:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014024:	230f      	movs	r3, #15
 8014026:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801402a:	4bb5      	ldr	r3, [pc, #724]	; (8014300 <LoRaMacInitialization+0x384>)
 801402c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014030:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014034:	4611      	mov	r1, r2
 8014036:	4618      	mov	r0, r3
 8014038:	f003 fbd1 	bl	80177de <RegionGetPhyParam>
 801403c:	4603      	mov	r3, r0
 801403e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014042:	2b00      	cmp	r3, #0
 8014044:	bf14      	ite	ne
 8014046:	2301      	movne	r3, #1
 8014048:	2300      	moveq	r3, #0
 801404a:	b2da      	uxtb	r2, r3
 801404c:	4bac      	ldr	r3, [pc, #688]	; (8014300 <LoRaMacInitialization+0x384>)
 801404e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8014052:	230a      	movs	r3, #10
 8014054:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014058:	4ba9      	ldr	r3, [pc, #676]	; (8014300 <LoRaMacInitialization+0x384>)
 801405a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801405e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014062:	4611      	mov	r1, r2
 8014064:	4618      	mov	r0, r3
 8014066:	f003 fbba 	bl	80177de <RegionGetPhyParam>
 801406a:	4603      	mov	r3, r0
 801406c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014070:	b25a      	sxtb	r2, r3
 8014072:	4ba3      	ldr	r3, [pc, #652]	; (8014300 <LoRaMacInitialization+0x384>)
 8014074:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8014078:	2306      	movs	r3, #6
 801407a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801407e:	4ba0      	ldr	r3, [pc, #640]	; (8014300 <LoRaMacInitialization+0x384>)
 8014080:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014084:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014088:	4611      	mov	r1, r2
 801408a:	4618      	mov	r0, r3
 801408c:	f003 fba7 	bl	80177de <RegionGetPhyParam>
 8014090:	4603      	mov	r3, r0
 8014092:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014096:	b25a      	sxtb	r2, r3
 8014098:	4b99      	ldr	r3, [pc, #612]	; (8014300 <LoRaMacInitialization+0x384>)
 801409a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801409e:	2310      	movs	r3, #16
 80140a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140a4:	4b96      	ldr	r3, [pc, #600]	; (8014300 <LoRaMacInitialization+0x384>)
 80140a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140ae:	4611      	mov	r1, r2
 80140b0:	4618      	mov	r0, r3
 80140b2:	f003 fb94 	bl	80177de <RegionGetPhyParam>
 80140b6:	4603      	mov	r3, r0
 80140b8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80140ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140bc:	4a90      	ldr	r2, [pc, #576]	; (8014300 <LoRaMacInitialization+0x384>)
 80140be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80140c2:	2311      	movs	r3, #17
 80140c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140c8:	4b8d      	ldr	r3, [pc, #564]	; (8014300 <LoRaMacInitialization+0x384>)
 80140ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140d2:	4611      	mov	r1, r2
 80140d4:	4618      	mov	r0, r3
 80140d6:	f003 fb82 	bl	80177de <RegionGetPhyParam>
 80140da:	4603      	mov	r3, r0
 80140dc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80140de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e0:	4a87      	ldr	r2, [pc, #540]	; (8014300 <LoRaMacInitialization+0x384>)
 80140e2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80140e6:	2312      	movs	r3, #18
 80140e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140ec:	4b84      	ldr	r3, [pc, #528]	; (8014300 <LoRaMacInitialization+0x384>)
 80140ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140f6:	4611      	mov	r1, r2
 80140f8:	4618      	mov	r0, r3
 80140fa:	f003 fb70 	bl	80177de <RegionGetPhyParam>
 80140fe:	4603      	mov	r3, r0
 8014100:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014104:	4a7e      	ldr	r2, [pc, #504]	; (8014300 <LoRaMacInitialization+0x384>)
 8014106:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801410a:	2313      	movs	r3, #19
 801410c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014110:	4b7b      	ldr	r3, [pc, #492]	; (8014300 <LoRaMacInitialization+0x384>)
 8014112:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801411a:	4611      	mov	r1, r2
 801411c:	4618      	mov	r0, r3
 801411e:	f003 fb5e 	bl	80177de <RegionGetPhyParam>
 8014122:	4603      	mov	r3, r0
 8014124:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014128:	4a75      	ldr	r2, [pc, #468]	; (8014300 <LoRaMacInitialization+0x384>)
 801412a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801412e:	2314      	movs	r3, #20
 8014130:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014134:	4b72      	ldr	r3, [pc, #456]	; (8014300 <LoRaMacInitialization+0x384>)
 8014136:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801413a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801413e:	4611      	mov	r1, r2
 8014140:	4618      	mov	r0, r3
 8014142:	f003 fb4c 	bl	80177de <RegionGetPhyParam>
 8014146:	4603      	mov	r3, r0
 8014148:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414c:	4a6c      	ldr	r2, [pc, #432]	; (8014300 <LoRaMacInitialization+0x384>)
 801414e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014152:	2317      	movs	r3, #23
 8014154:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014158:	4b69      	ldr	r3, [pc, #420]	; (8014300 <LoRaMacInitialization+0x384>)
 801415a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801415e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014162:	4611      	mov	r1, r2
 8014164:	4618      	mov	r0, r3
 8014166:	f003 fb3a 	bl	80177de <RegionGetPhyParam>
 801416a:	4603      	mov	r3, r0
 801416c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014170:	b2da      	uxtb	r2, r3
 8014172:	4b63      	ldr	r3, [pc, #396]	; (8014300 <LoRaMacInitialization+0x384>)
 8014174:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8014178:	2318      	movs	r3, #24
 801417a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801417e:	4b60      	ldr	r3, [pc, #384]	; (8014300 <LoRaMacInitialization+0x384>)
 8014180:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014184:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014188:	4611      	mov	r1, r2
 801418a:	4618      	mov	r0, r3
 801418c:	f003 fb27 	bl	80177de <RegionGetPhyParam>
 8014190:	4603      	mov	r3, r0
 8014192:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014196:	4a5a      	ldr	r2, [pc, #360]	; (8014300 <LoRaMacInitialization+0x384>)
 8014198:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419e:	4a58      	ldr	r2, [pc, #352]	; (8014300 <LoRaMacInitialization+0x384>)
 80141a0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80141a4:	2319      	movs	r3, #25
 80141a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141aa:	4b55      	ldr	r3, [pc, #340]	; (8014300 <LoRaMacInitialization+0x384>)
 80141ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141b4:	4611      	mov	r1, r2
 80141b6:	4618      	mov	r0, r3
 80141b8:	f003 fb11 	bl	80177de <RegionGetPhyParam>
 80141bc:	4603      	mov	r3, r0
 80141be:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	b2da      	uxtb	r2, r3
 80141c4:	4b4e      	ldr	r3, [pc, #312]	; (8014300 <LoRaMacInitialization+0x384>)
 80141c6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80141ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141cc:	b2da      	uxtb	r2, r3
 80141ce:	4b4c      	ldr	r3, [pc, #304]	; (8014300 <LoRaMacInitialization+0x384>)
 80141d0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80141d4:	231e      	movs	r3, #30
 80141d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141da:	4b49      	ldr	r3, [pc, #292]	; (8014300 <LoRaMacInitialization+0x384>)
 80141dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141e4:	4611      	mov	r1, r2
 80141e6:	4618      	mov	r0, r3
 80141e8:	f003 faf9 	bl	80177de <RegionGetPhyParam>
 80141ec:	4603      	mov	r3, r0
 80141ee:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80141f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f2:	b2da      	uxtb	r2, r3
 80141f4:	4b42      	ldr	r3, [pc, #264]	; (8014300 <LoRaMacInitialization+0x384>)
 80141f6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80141fa:	231f      	movs	r3, #31
 80141fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014200:	4b3f      	ldr	r3, [pc, #252]	; (8014300 <LoRaMacInitialization+0x384>)
 8014202:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801420a:	4611      	mov	r1, r2
 801420c:	4618      	mov	r0, r3
 801420e:	f003 fae6 	bl	80177de <RegionGetPhyParam>
 8014212:	4603      	mov	r3, r0
 8014214:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	b2da      	uxtb	r2, r3
 801421a:	4b39      	ldr	r3, [pc, #228]	; (8014300 <LoRaMacInitialization+0x384>)
 801421c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014220:	2320      	movs	r3, #32
 8014222:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014226:	4b36      	ldr	r3, [pc, #216]	; (8014300 <LoRaMacInitialization+0x384>)
 8014228:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801422c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014230:	4611      	mov	r1, r2
 8014232:	4618      	mov	r0, r3
 8014234:	f003 fad3 	bl	80177de <RegionGetPhyParam>
 8014238:	4603      	mov	r3, r0
 801423a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423e:	4a30      	ldr	r2, [pc, #192]	; (8014300 <LoRaMacInitialization+0x384>)
 8014240:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014244:	2321      	movs	r3, #33	; 0x21
 8014246:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801424a:	4b2d      	ldr	r3, [pc, #180]	; (8014300 <LoRaMacInitialization+0x384>)
 801424c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014250:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f003 fac1 	bl	80177de <RegionGetPhyParam>
 801425c:	4603      	mov	r3, r0
 801425e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014262:	4a27      	ldr	r2, [pc, #156]	; (8014300 <LoRaMacInitialization+0x384>)
 8014264:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014268:	230b      	movs	r3, #11
 801426a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801426e:	4b24      	ldr	r3, [pc, #144]	; (8014300 <LoRaMacInitialization+0x384>)
 8014270:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014274:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014278:	4611      	mov	r1, r2
 801427a:	4618      	mov	r0, r3
 801427c:	f003 faaf 	bl	80177de <RegionGetPhyParam>
 8014280:	4603      	mov	r3, r0
 8014282:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014286:	b29a      	uxth	r2, r3
 8014288:	4b1d      	ldr	r3, [pc, #116]	; (8014300 <LoRaMacInitialization+0x384>)
 801428a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801428e:	230c      	movs	r3, #12
 8014290:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014294:	4b1a      	ldr	r3, [pc, #104]	; (8014300 <LoRaMacInitialization+0x384>)
 8014296:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801429a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801429e:	4611      	mov	r1, r2
 80142a0:	4618      	mov	r0, r3
 80142a2:	f003 fa9c 	bl	80177de <RegionGetPhyParam>
 80142a6:	4603      	mov	r3, r0
 80142a8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80142aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	4b14      	ldr	r3, [pc, #80]	; (8014300 <LoRaMacInitialization+0x384>)
 80142b0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80142b4:	4b12      	ldr	r3, [pc, #72]	; (8014300 <LoRaMacInitialization+0x384>)
 80142b6:	2201      	movs	r2, #1
 80142b8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80142bc:	4b10      	ldr	r3, [pc, #64]	; (8014300 <LoRaMacInitialization+0x384>)
 80142be:	220a      	movs	r2, #10
 80142c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80142c4:	4b0e      	ldr	r3, [pc, #56]	; (8014300 <LoRaMacInitialization+0x384>)
 80142c6:	2206      	movs	r2, #6
 80142c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80142cc:	4b0c      	ldr	r3, [pc, #48]	; (8014300 <LoRaMacInitialization+0x384>)
 80142ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80142d2:	4a0b      	ldr	r2, [pc, #44]	; (8014300 <LoRaMacInitialization+0x384>)
 80142d4:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80142d6:	4b0a      	ldr	r3, [pc, #40]	; (8014300 <LoRaMacInitialization+0x384>)
 80142d8:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80142dc:	4b08      	ldr	r3, [pc, #32]	; (8014300 <LoRaMacInitialization+0x384>)
 80142de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80142e2:	4b07      	ldr	r3, [pc, #28]	; (8014300 <LoRaMacInitialization+0x384>)
 80142e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80142e8:	4a05      	ldr	r2, [pc, #20]	; (8014300 <LoRaMacInitialization+0x384>)
 80142ea:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80142ec:	4b04      	ldr	r3, [pc, #16]	; (8014300 <LoRaMacInitialization+0x384>)
 80142ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80142f2:	4a03      	ldr	r2, [pc, #12]	; (8014300 <LoRaMacInitialization+0x384>)
 80142f4:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80142f6:	4b02      	ldr	r3, [pc, #8]	; (8014300 <LoRaMacInitialization+0x384>)
 80142f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80142fc:	e006      	b.n	801430c <LoRaMacInitialization+0x390>
 80142fe:	bf00      	nop
 8014300:	20000e80 	.word	0x20000e80
 8014304:	20000978 	.word	0x20000978
 8014308:	01000300 	.word	0x01000300
 801430c:	4a5f      	ldr	r2, [pc, #380]	; (801448c <LoRaMacInitialization+0x510>)
 801430e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014310:	4b5e      	ldr	r3, [pc, #376]	; (801448c <LoRaMacInitialization+0x510>)
 8014312:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014316:	4a5d      	ldr	r2, [pc, #372]	; (801448c <LoRaMacInitialization+0x510>)
 8014318:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801431a:	4b5c      	ldr	r3, [pc, #368]	; (801448c <LoRaMacInitialization+0x510>)
 801431c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014320:	4a5a      	ldr	r2, [pc, #360]	; (801448c <LoRaMacInitialization+0x510>)
 8014322:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014324:	4b59      	ldr	r3, [pc, #356]	; (801448c <LoRaMacInitialization+0x510>)
 8014326:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801432a:	4b58      	ldr	r3, [pc, #352]	; (801448c <LoRaMacInitialization+0x510>)
 801432c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014330:	2300      	movs	r3, #0
 8014332:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014336:	4b56      	ldr	r3, [pc, #344]	; (8014490 <LoRaMacInitialization+0x514>)
 8014338:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801433a:	4b56      	ldr	r3, [pc, #344]	; (8014494 <LoRaMacInitialization+0x518>)
 801433c:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801433e:	4b53      	ldr	r3, [pc, #332]	; (801448c <LoRaMacInitialization+0x510>)
 8014340:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014344:	f107 0218 	add.w	r2, r7, #24
 8014348:	4611      	mov	r1, r2
 801434a:	4618      	mov	r0, r3
 801434c:	f003 fa70 	bl	8017830 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014350:	4a51      	ldr	r2, [pc, #324]	; (8014498 <LoRaMacInitialization+0x51c>)
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014358:	2000      	movs	r0, #0
 801435a:	f7ff f8b5 	bl	80134c8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801435e:	4b4b      	ldr	r3, [pc, #300]	; (801448c <LoRaMacInitialization+0x510>)
 8014360:	2201      	movs	r2, #1
 8014362:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8014366:	4a4c      	ldr	r2, [pc, #304]	; (8014498 <LoRaMacInitialization+0x51c>)
 8014368:	697b      	ldr	r3, [r7, #20]
 801436a:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801436e:	4b4a      	ldr	r3, [pc, #296]	; (8014498 <LoRaMacInitialization+0x51c>)
 8014370:	2200      	movs	r2, #0
 8014372:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8014376:	4b48      	ldr	r3, [pc, #288]	; (8014498 <LoRaMacInitialization+0x51c>)
 8014378:	2201      	movs	r2, #1
 801437a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801437e:	4b43      	ldr	r3, [pc, #268]	; (801448c <LoRaMacInitialization+0x510>)
 8014380:	2200      	movs	r2, #0
 8014382:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014384:	4b41      	ldr	r3, [pc, #260]	; (801448c <LoRaMacInitialization+0x510>)
 8014386:	2200      	movs	r2, #0
 8014388:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801438a:	2300      	movs	r3, #0
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	4b43      	ldr	r3, [pc, #268]	; (801449c <LoRaMacInitialization+0x520>)
 8014390:	2200      	movs	r2, #0
 8014392:	f04f 31ff 	mov.w	r1, #4294967295
 8014396:	4842      	ldr	r0, [pc, #264]	; (80144a0 <LoRaMacInitialization+0x524>)
 8014398:	f009 fe32 	bl	801e000 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801439c:	2300      	movs	r3, #0
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	4b40      	ldr	r3, [pc, #256]	; (80144a4 <LoRaMacInitialization+0x528>)
 80143a2:	2200      	movs	r2, #0
 80143a4:	f04f 31ff 	mov.w	r1, #4294967295
 80143a8:	483f      	ldr	r0, [pc, #252]	; (80144a8 <LoRaMacInitialization+0x52c>)
 80143aa:	f009 fe29 	bl	801e000 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80143ae:	2300      	movs	r3, #0
 80143b0:	9300      	str	r3, [sp, #0]
 80143b2:	4b3e      	ldr	r3, [pc, #248]	; (80144ac <LoRaMacInitialization+0x530>)
 80143b4:	2200      	movs	r2, #0
 80143b6:	f04f 31ff 	mov.w	r1, #4294967295
 80143ba:	483d      	ldr	r0, [pc, #244]	; (80144b0 <LoRaMacInitialization+0x534>)
 80143bc:	f009 fe20 	bl	801e000 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80143c0:	2300      	movs	r3, #0
 80143c2:	9300      	str	r3, [sp, #0]
 80143c4:	4b3b      	ldr	r3, [pc, #236]	; (80144b4 <LoRaMacInitialization+0x538>)
 80143c6:	2200      	movs	r2, #0
 80143c8:	f04f 31ff 	mov.w	r1, #4294967295
 80143cc:	483a      	ldr	r0, [pc, #232]	; (80144b8 <LoRaMacInitialization+0x53c>)
 80143ce:	f009 fe17 	bl	801e000 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80143d2:	4c2e      	ldr	r4, [pc, #184]	; (801448c <LoRaMacInitialization+0x510>)
 80143d4:	463b      	mov	r3, r7
 80143d6:	4618      	mov	r0, r3
 80143d8:	f009 f986 	bl	801d6e8 <SysTimeGetMcuTime>
 80143dc:	f504 7390 	add.w	r3, r4, #288	; 0x120
 80143e0:	463a      	mov	r2, r7
 80143e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143e6:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80143ea:	4b2b      	ldr	r3, [pc, #172]	; (8014498 <LoRaMacInitialization+0x51c>)
 80143ec:	4a33      	ldr	r2, [pc, #204]	; (80144bc <LoRaMacInitialization+0x540>)
 80143ee:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80143f2:	4b29      	ldr	r3, [pc, #164]	; (8014498 <LoRaMacInitialization+0x51c>)
 80143f4:	4a32      	ldr	r2, [pc, #200]	; (80144c0 <LoRaMacInitialization+0x544>)
 80143f6:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80143fa:	4b27      	ldr	r3, [pc, #156]	; (8014498 <LoRaMacInitialization+0x51c>)
 80143fc:	4a31      	ldr	r2, [pc, #196]	; (80144c4 <LoRaMacInitialization+0x548>)
 80143fe:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014402:	4b25      	ldr	r3, [pc, #148]	; (8014498 <LoRaMacInitialization+0x51c>)
 8014404:	4a30      	ldr	r2, [pc, #192]	; (80144c8 <LoRaMacInitialization+0x54c>)
 8014406:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801440a:	4b23      	ldr	r3, [pc, #140]	; (8014498 <LoRaMacInitialization+0x51c>)
 801440c:	4a2f      	ldr	r2, [pc, #188]	; (80144cc <LoRaMacInitialization+0x550>)
 801440e:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014412:	4b2f      	ldr	r3, [pc, #188]	; (80144d0 <LoRaMacInitialization+0x554>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	482f      	ldr	r0, [pc, #188]	; (80144d4 <LoRaMacInitialization+0x558>)
 8014418:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801441a:	482f      	ldr	r0, [pc, #188]	; (80144d8 <LoRaMacInitialization+0x55c>)
 801441c:	f7fa fe10 	bl	800f040 <SecureElementInit>
 8014420:	4603      	mov	r3, r0
 8014422:	2b00      	cmp	r3, #0
 8014424:	d001      	beq.n	801442a <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014426:	2311      	movs	r3, #17
 8014428:	e02b      	b.n	8014482 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801442a:	4818      	ldr	r0, [pc, #96]	; (801448c <LoRaMacInitialization+0x510>)
 801442c:	f002 fae8 	bl	8016a00 <LoRaMacCryptoInit>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d001      	beq.n	801443a <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014436:	2311      	movs	r3, #17
 8014438:	e023      	b.n	8014482 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801443a:	f001 fbe3 	bl	8015c04 <LoRaMacCommandsInit>
 801443e:	4603      	mov	r3, r0
 8014440:	2b00      	cmp	r3, #0
 8014442:	d001      	beq.n	8014448 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014444:	2313      	movs	r3, #19
 8014446:	e01c      	b.n	8014482 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014448:	4824      	ldr	r0, [pc, #144]	; (80144dc <LoRaMacInitialization+0x560>)
 801444a:	f002 fba3 	bl	8016b94 <LoRaMacCryptoSetMulticastReference>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d001      	beq.n	8014458 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014454:	2311      	movs	r3, #17
 8014456:	e014      	b.n	8014482 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014458:	4b1d      	ldr	r3, [pc, #116]	; (80144d0 <LoRaMacInitialization+0x554>)
 801445a:	695b      	ldr	r3, [r3, #20]
 801445c:	4798      	blx	r3
 801445e:	4603      	mov	r3, r0
 8014460:	4618      	mov	r0, r3
 8014462:	f005 fcb1 	bl	8019dc8 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014466:	4b1a      	ldr	r3, [pc, #104]	; (80144d0 <LoRaMacInitialization+0x554>)
 8014468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801446a:	4a08      	ldr	r2, [pc, #32]	; (801448c <LoRaMacInitialization+0x510>)
 801446c:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014470:	4610      	mov	r0, r2
 8014472:	4798      	blx	r3
    Radio.Sleep( );
 8014474:	4b16      	ldr	r3, [pc, #88]	; (80144d0 <LoRaMacInitialization+0x554>)
 8014476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014478:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801447a:	2001      	movs	r0, #1
 801447c:	f7fd fb40 	bl	8011b00 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014480:	2300      	movs	r3, #0
}
 8014482:	4618      	mov	r0, r3
 8014484:	3734      	adds	r7, #52	; 0x34
 8014486:	46bd      	mov	sp, r7
 8014488:	bd90      	pop	{r4, r7, pc}
 801448a:	bf00      	nop
 801448c:	20000e80 	.word	0x20000e80
 8014490:	200010a0 	.word	0x200010a0
 8014494:	20001134 	.word	0x20001134
 8014498:	20000978 	.word	0x20000978
 801449c:	08012041 	.word	0x08012041
 80144a0:	20000ce0 	.word	0x20000ce0
 80144a4:	080120b5 	.word	0x080120b5
 80144a8:	20000cf8 	.word	0x20000cf8
 80144ac:	08012121 	.word	0x08012121
 80144b0:	20000d10 	.word	0x20000d10
 80144b4:	08012195 	.word	0x08012195
 80144b8:	20000d6c 	.word	0x20000d6c
 80144bc:	08010c01 	.word	0x08010c01
 80144c0:	08010c5d 	.word	0x08010c5d
 80144c4:	08010cf5 	.word	0x08010cf5
 80144c8:	08010cc9 	.word	0x08010cc9
 80144cc:	08010d11 	.word	0x08010d11
 80144d0:	0801fa04 	.word	0x0801fa04
 80144d4:	20000cc4 	.word	0x20000cc4
 80144d8:	20000fc8 	.word	0x20000fc8
 80144dc:	20000f68 	.word	0x20000f68

080144e0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80144e4:	4b04      	ldr	r3, [pc, #16]	; (80144f8 <LoRaMacStart+0x18>)
 80144e6:	2200      	movs	r2, #0
 80144e8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80144ec:	f7fc fc26 	bl	8010d3c <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80144f0:	2300      	movs	r3, #0
}
 80144f2:	4618      	mov	r0, r3
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop
 80144f8:	20000978 	.word	0x20000978

080144fc <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014500:	f7fd fad2 	bl	8011aa8 <LoRaMacIsBusy>
 8014504:	4603      	mov	r3, r0
 8014506:	f083 0301 	eor.w	r3, r3, #1
 801450a:	b2db      	uxtb	r3, r3
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00d      	beq.n	801452c <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014510:	4b0b      	ldr	r3, [pc, #44]	; (8014540 <LoRaMacStop+0x44>)
 8014512:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014516:	2b02      	cmp	r3, #2
 8014518:	d102      	bne.n	8014520 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801451a:	4b0a      	ldr	r3, [pc, #40]	; (8014544 <LoRaMacStop+0x48>)
 801451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801451e:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014520:	4b09      	ldr	r3, [pc, #36]	; (8014548 <LoRaMacStop+0x4c>)
 8014522:	2201      	movs	r2, #1
 8014524:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014528:	2300      	movs	r3, #0
 801452a:	e007      	b.n	801453c <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 801452c:	4b06      	ldr	r3, [pc, #24]	; (8014548 <LoRaMacStop+0x4c>)
 801452e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014532:	2b01      	cmp	r3, #1
 8014534:	d101      	bne.n	801453a <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8014536:	2300      	movs	r3, #0
 8014538:	e000      	b.n	801453c <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801453a:	2301      	movs	r3, #1
}
 801453c:	4618      	mov	r0, r3
 801453e:	bd80      	pop	{r7, pc}
 8014540:	20000e80 	.word	0x20000e80
 8014544:	0801fa04 	.word	0x0801fa04
 8014548:	20000978 	.word	0x20000978

0801454c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 801454c:	b580      	push	{r7, lr}
 801454e:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014550:	480d      	ldr	r0, [pc, #52]	; (8014588 <LoRaMacHalt+0x3c>)
 8014552:	f009 fdf9 	bl	801e148 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014556:	480d      	ldr	r0, [pc, #52]	; (801458c <LoRaMacHalt+0x40>)
 8014558:	f009 fdf6 	bl	801e148 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 801455c:	480c      	ldr	r0, [pc, #48]	; (8014590 <LoRaMacHalt+0x44>)
 801455e:	f009 fdf3 	bl	801e148 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014562:	480c      	ldr	r0, [pc, #48]	; (8014594 <LoRaMacHalt+0x48>)
 8014564:	f009 fdf0 	bl	801e148 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014568:	f001 f9cb 	bl	8015902 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801456c:	4b0a      	ldr	r3, [pc, #40]	; (8014598 <LoRaMacHalt+0x4c>)
 801456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014570:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014572:	4b0a      	ldr	r3, [pc, #40]	; (801459c <LoRaMacHalt+0x50>)
 8014574:	2200      	movs	r2, #0
 8014576:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801457a:	4b08      	ldr	r3, [pc, #32]	; (801459c <LoRaMacHalt+0x50>)
 801457c:	2201      	movs	r2, #1
 801457e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014582:	2300      	movs	r3, #0
}
 8014584:	4618      	mov	r0, r3
 8014586:	bd80      	pop	{r7, pc}
 8014588:	20000ce0 	.word	0x20000ce0
 801458c:	20000cf8 	.word	0x20000cf8
 8014590:	20000d10 	.word	0x20000d10
 8014594:	20000d6c 	.word	0x20000d6c
 8014598:	0801fa04 	.word	0x0801fa04
 801459c:	20000978 	.word	0x20000978

080145a0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b08a      	sub	sp, #40	; 0x28
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	4603      	mov	r3, r0
 80145a8:	6039      	str	r1, [r7, #0]
 80145aa:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145ac:	4b3e      	ldr	r3, [pc, #248]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80145b2:	4b3d      	ldr	r3, [pc, #244]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145b4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80145b8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80145ba:	4b3b      	ldr	r3, [pc, #236]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145bc:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80145c0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80145c2:	2300      	movs	r3, #0
 80145c4:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d101      	bne.n	80145d0 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145cc:	2303      	movs	r3, #3
 80145ce:	e066      	b.n	801469e <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80145d0:	4b35      	ldr	r3, [pc, #212]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80145d6:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80145d8:	2300      	movs	r3, #0
 80145da:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80145dc:	4b32      	ldr	r3, [pc, #200]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145de:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80145e2:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145e4:	4b30      	ldr	r3, [pc, #192]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145e8:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80145ea:	4b2f      	ldr	r3, [pc, #188]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145ec:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80145f0:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80145f2:	4b2d      	ldr	r3, [pc, #180]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145f4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80145f8:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80145fa:	4b2b      	ldr	r3, [pc, #172]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 80145fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014600:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014604:	4b28      	ldr	r3, [pc, #160]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 8014606:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801460a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801460e:	4b26      	ldr	r3, [pc, #152]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 8014610:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014618:	4b23      	ldr	r3, [pc, #140]	; (80146a8 <LoRaMacQueryTxPossible+0x108>)
 801461a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801461e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014622:	f107 0310 	add.w	r3, r7, #16
 8014626:	f107 020e 	add.w	r2, r7, #14
 801462a:	f107 010f 	add.w	r1, r7, #15
 801462e:	f107 0014 	add.w	r0, r7, #20
 8014632:	f001 f8d1 	bl	80157d8 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801463a:	4618      	mov	r0, r3
 801463c:	f7fd fefc 	bl	8012438 <GetMaxAppPayloadWithoutFOptsLength>
 8014640:	4603      	mov	r3, r0
 8014642:	461a      	mov	r2, r3
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014648:	f107 0308 	add.w	r3, r7, #8
 801464c:	4618      	mov	r0, r3
 801464e:	f001 fbdf 	bl	8015e10 <LoRaMacCommandsGetSizeSerializedCmds>
 8014652:	4603      	mov	r3, r0
 8014654:	2b00      	cmp	r3, #0
 8014656:	d001      	beq.n	801465c <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014658:	2313      	movs	r3, #19
 801465a:	e020      	b.n	801469e <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 801465c:	68bb      	ldr	r3, [r7, #8]
 801465e:	2b0f      	cmp	r3, #15
 8014660:	d819      	bhi.n	8014696 <LoRaMacQueryTxPossible+0xf6>
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	785b      	ldrb	r3, [r3, #1]
 8014666:	461a      	mov	r2, r3
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	429a      	cmp	r2, r3
 801466c:	d313      	bcc.n	8014696 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	785a      	ldrb	r2, [r3, #1]
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	b2db      	uxtb	r3, r3
 8014676:	1ad3      	subs	r3, r2, r3
 8014678:	b2da      	uxtb	r2, r3
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	785b      	ldrb	r3, [r3, #1]
 8014682:	4619      	mov	r1, r3
 8014684:	79fa      	ldrb	r2, [r7, #7]
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	4413      	add	r3, r2
 801468a:	4299      	cmp	r1, r3
 801468c:	d301      	bcc.n	8014692 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801468e:	2300      	movs	r3, #0
 8014690:	e005      	b.n	801469e <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014692:	2308      	movs	r3, #8
 8014694:	e003      	b.n	801469e <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	2200      	movs	r2, #0
 801469a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801469c:	2308      	movs	r3, #8
    }
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3728      	adds	r7, #40	; 0x28
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	20000e80 	.word	0x20000e80

080146ac <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80146ac:	b590      	push	{r4, r7, lr}
 80146ae:	b087      	sub	sp, #28
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146b4:	2300      	movs	r3, #0
 80146b6:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d101      	bne.n	80146c2 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80146be:	2303      	movs	r3, #3
 80146c0:	e1a4      	b.n	8014a0c <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	2b3f      	cmp	r3, #63	; 0x3f
 80146c8:	f200 8199 	bhi.w	80149fe <LoRaMacMibGetRequestConfirm+0x352>
 80146cc:	a201      	add	r2, pc, #4	; (adr r2, 80146d4 <LoRaMacMibGetRequestConfirm+0x28>)
 80146ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d2:	bf00      	nop
 80146d4:	080147d5 	.word	0x080147d5
 80146d8:	080147e1 	.word	0x080147e1
 80146dc:	080147ed 	.word	0x080147ed
 80146e0:	080147f9 	.word	0x080147f9
 80146e4:	08014805 	.word	0x08014805
 80146e8:	08014811 	.word	0x08014811
 80146ec:	0801481d 	.word	0x0801481d
 80146f0:	080149ff 	.word	0x080149ff
 80146f4:	080149ff 	.word	0x080149ff
 80146f8:	080149ff 	.word	0x080149ff
 80146fc:	080149ff 	.word	0x080149ff
 8014700:	080149ff 	.word	0x080149ff
 8014704:	080149ff 	.word	0x080149ff
 8014708:	080149ff 	.word	0x080149ff
 801470c:	080149ff 	.word	0x080149ff
 8014710:	08014831 	.word	0x08014831
 8014714:	0801483d 	.word	0x0801483d
 8014718:	08014849 	.word	0x08014849
 801471c:	0801486b 	.word	0x0801486b
 8014720:	0801487d 	.word	0x0801487d
 8014724:	0801488f 	.word	0x0801488f
 8014728:	080148a1 	.word	0x080148a1
 801472c:	080148d5 	.word	0x080148d5
 8014730:	080148b3 	.word	0x080148b3
 8014734:	080148f7 	.word	0x080148f7
 8014738:	08014903 	.word	0x08014903
 801473c:	0801490d 	.word	0x0801490d
 8014740:	08014917 	.word	0x08014917
 8014744:	08014921 	.word	0x08014921
 8014748:	0801492b 	.word	0x0801492b
 801474c:	08014935 	.word	0x08014935
 8014750:	08014941 	.word	0x08014941
 8014754:	08014959 	.word	0x08014959
 8014758:	0801494d 	.word	0x0801494d
 801475c:	08014965 	.word	0x08014965
 8014760:	0801496f 	.word	0x0801496f
 8014764:	0801497b 	.word	0x0801497b
 8014768:	08014997 	.word	0x08014997
 801476c:	08014987 	.word	0x08014987
 8014770:	0801498f 	.word	0x0801498f
 8014774:	080149ff 	.word	0x080149ff
 8014778:	080149a3 	.word	0x080149a3
 801477c:	080149ff 	.word	0x080149ff
 8014780:	080149ff 	.word	0x080149ff
 8014784:	080149ff 	.word	0x080149ff
 8014788:	080149ff 	.word	0x080149ff
 801478c:	080149ff 	.word	0x080149ff
 8014790:	080149ff 	.word	0x080149ff
 8014794:	080149ff 	.word	0x080149ff
 8014798:	080149ff 	.word	0x080149ff
 801479c:	080149ff 	.word	0x080149ff
 80147a0:	080149ff 	.word	0x080149ff
 80147a4:	080149ff 	.word	0x080149ff
 80147a8:	080149ff 	.word	0x080149ff
 80147ac:	080149ff 	.word	0x080149ff
 80147b0:	080149ff 	.word	0x080149ff
 80147b4:	080149ff 	.word	0x080149ff
 80147b8:	080149b7 	.word	0x080149b7
 80147bc:	080149c3 	.word	0x080149c3
 80147c0:	080149cf 	.word	0x080149cf
 80147c4:	080149db 	.word	0x080149db
 80147c8:	080149e7 	.word	0x080149e7
 80147cc:	080149f3 	.word	0x080149f3
 80147d0:	080149f9 	.word	0x080149f9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80147d4:	4b8f      	ldr	r3, [pc, #572]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80147d6:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	711a      	strb	r2, [r3, #4]
            break;
 80147de:	e114      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80147e0:	4b8c      	ldr	r3, [pc, #560]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80147e2:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	711a      	strb	r2, [r3, #4]
            break;
 80147ea:	e10e      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7fa fefb 	bl	800f5ec <SecureElementGetDevEui>
            break;
 80147f6:	e108      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7fa ff25 	bl	800f64c <SecureElementGetJoinEui>
            break;
 8014802:	e102      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014804:	4b83      	ldr	r3, [pc, #524]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014806:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	711a      	strb	r2, [r3, #4]
            break;
 801480e:	e0fc      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014810:	4b80      	ldr	r3, [pc, #512]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014812:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	605a      	str	r2, [r3, #4]
            break;
 801481a:	e0f6      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 801481c:	4b7d      	ldr	r3, [pc, #500]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801481e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	3304      	adds	r3, #4
 8014826:	4619      	mov	r1, r3
 8014828:	4610      	mov	r0, r2
 801482a:	f7fa ff41 	bl	800f6b0 <SecureElementGetDevAddr>
            break;
 801482e:	e0ec      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014830:	4b78      	ldr	r3, [pc, #480]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014832:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	711a      	strb	r2, [r3, #4]
            break;
 801483a:	e0e6      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801483c:	4b75      	ldr	r3, [pc, #468]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801483e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	711a      	strb	r2, [r3, #4]
            break;
 8014846:	e0e0      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014848:	231d      	movs	r3, #29
 801484a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801484c:	4b71      	ldr	r3, [pc, #452]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801484e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014852:	f107 0210 	add.w	r2, r7, #16
 8014856:	4611      	mov	r1, r2
 8014858:	4618      	mov	r0, r3
 801485a:	f002 ffc0 	bl	80177de <RegionGetPhyParam>
 801485e:	4603      	mov	r3, r0
 8014860:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014862:	68fa      	ldr	r2, [r7, #12]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	605a      	str	r2, [r3, #4]
            break;
 8014868:	e0cf      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	4a69      	ldr	r2, [pc, #420]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801486e:	3304      	adds	r3, #4
 8014870:	326c      	adds	r2, #108	; 0x6c
 8014872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014876:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801487a:	e0c6      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	4a65      	ldr	r2, [pc, #404]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014880:	3304      	adds	r3, #4
 8014882:	32b4      	adds	r2, #180	; 0xb4
 8014884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014888:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801488c:	e0bd      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	4a60      	ldr	r2, [pc, #384]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014892:	3304      	adds	r3, #4
 8014894:	3274      	adds	r2, #116	; 0x74
 8014896:	e892 0003 	ldmia.w	r2, {r0, r1}
 801489a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801489e:	e0b4      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	4a5c      	ldr	r2, [pc, #368]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80148a4:	3304      	adds	r3, #4
 80148a6:	32bc      	adds	r2, #188	; 0xbc
 80148a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148ac:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148b0:	e0ab      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80148b2:	231b      	movs	r3, #27
 80148b4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148b6:	4b57      	ldr	r3, [pc, #348]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80148b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148bc:	f107 0210 	add.w	r2, r7, #16
 80148c0:	4611      	mov	r1, r2
 80148c2:	4618      	mov	r0, r3
 80148c4:	f002 ff8b 	bl	80177de <RegionGetPhyParam>
 80148c8:	4603      	mov	r3, r0
 80148ca:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	605a      	str	r2, [r3, #4]
            break;
 80148d2:	e09a      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80148d4:	231a      	movs	r3, #26
 80148d6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148d8:	4b4e      	ldr	r3, [pc, #312]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80148da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148de:	f107 0210 	add.w	r2, r7, #16
 80148e2:	4611      	mov	r1, r2
 80148e4:	4618      	mov	r0, r3
 80148e6:	f002 ff7a 	bl	80177de <RegionGetPhyParam>
 80148ea:	4603      	mov	r3, r0
 80148ec:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	605a      	str	r2, [r3, #4]
            break;
 80148f4:	e089      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80148f6:	4b47      	ldr	r3, [pc, #284]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80148f8:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	711a      	strb	r2, [r3, #4]
            break;
 8014900:	e083      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014902:	4b44      	ldr	r3, [pc, #272]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	605a      	str	r2, [r3, #4]
            break;
 801490a:	e07e      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 801490c:	4b41      	ldr	r3, [pc, #260]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801490e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	605a      	str	r2, [r3, #4]
            break;
 8014914:	e079      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014916:	4b3f      	ldr	r3, [pc, #252]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	605a      	str	r2, [r3, #4]
            break;
 801491e:	e074      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014920:	4b3c      	ldr	r3, [pc, #240]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	605a      	str	r2, [r3, #4]
            break;
 8014928:	e06f      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801492a:	4b3a      	ldr	r3, [pc, #232]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801492c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	605a      	str	r2, [r3, #4]
            break;
 8014932:	e06a      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014934:	4b37      	ldr	r3, [pc, #220]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014936:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	711a      	strb	r2, [r3, #4]
            break;
 801493e:	e064      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014940:	4b34      	ldr	r3, [pc, #208]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014942:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	711a      	strb	r2, [r3, #4]
            break;
 801494a:	e05e      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801494c:	4b31      	ldr	r3, [pc, #196]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801494e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	711a      	strb	r2, [r3, #4]
            break;
 8014956:	e058      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014958:	4b2e      	ldr	r3, [pc, #184]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801495a:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	711a      	strb	r2, [r3, #4]
            break;
 8014962:	e052      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014964:	4b2b      	ldr	r3, [pc, #172]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	605a      	str	r2, [r3, #4]
            break;
 801496c:	e04d      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801496e:	4b29      	ldr	r3, [pc, #164]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014970:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	711a      	strb	r2, [r3, #4]
            break;
 8014978:	e047      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801497a:	4b26      	ldr	r3, [pc, #152]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801497c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	605a      	str	r2, [r3, #4]
            break;
 8014984:	e041      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4a22      	ldr	r2, [pc, #136]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 801498a:	605a      	str	r2, [r3, #4]
            break;
 801498c:	e03d      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2200      	movs	r2, #0
 8014992:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014994:	e039      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014996:	4b1f      	ldr	r3, [pc, #124]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 8014998:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	605a      	str	r2, [r3, #4]
            break;
 80149a0:	e033      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	4a1b      	ldr	r2, [pc, #108]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80149a6:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80149aa:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80149ac:	687c      	ldr	r4, [r7, #4]
 80149ae:	f003 f89f 	bl	8017af0 <RegionGetVersion>
 80149b2:	60a0      	str	r0, [r4, #8]
            break;
 80149b4:	e029      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80149b6:	4b17      	ldr	r3, [pc, #92]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80149b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	605a      	str	r2, [r3, #4]
            break;
 80149c0:	e023      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80149c2:	4b14      	ldr	r3, [pc, #80]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80149c4:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	809a      	strh	r2, [r3, #4]
            break;
 80149cc:	e01d      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80149ce:	4b11      	ldr	r3, [pc, #68]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80149d0:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	809a      	strh	r2, [r3, #4]
            break;
 80149d8:	e017      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80149da:	4b0e      	ldr	r3, [pc, #56]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80149dc:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	809a      	strh	r2, [r3, #4]
            break;
 80149e4:	e011      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80149e6:	4b0b      	ldr	r3, [pc, #44]	; (8014a14 <LoRaMacMibGetRequestConfirm+0x368>)
 80149e8:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	809a      	strh	r2, [r3, #4]
            break;
 80149f0:	e00b      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80149f2:	2318      	movs	r3, #24
 80149f4:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80149f6:	e008      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80149f8:	2318      	movs	r3, #24
 80149fa:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80149fc:	e005      	b.n	8014a0a <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f000 ff96 	bl	8015930 <LoRaMacClassBMibGetRequestConfirm>
 8014a04:	4603      	mov	r3, r0
 8014a06:	75fb      	strb	r3, [r7, #23]
            break;
 8014a08:	bf00      	nop
        }
    }
    return status;
 8014a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	371c      	adds	r7, #28
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd90      	pop	{r4, r7, pc}
 8014a14:	20000e80 	.word	0x20000e80

08014a18 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014a20:	2300      	movs	r3, #0
 8014a22:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d101      	bne.n	8014a2e <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a2a:	2303      	movs	r3, #3
 8014a2c:	e382      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014a2e:	4bbb      	ldr	r3, [pc, #748]	; (8014d1c <LoRaMacMibSetRequestConfirm+0x304>)
 8014a30:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a34:	f003 0302 	and.w	r3, r3, #2
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d001      	beq.n	8014a40 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e379      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	2b3f      	cmp	r3, #63	; 0x3f
 8014a46:	f200 8353 	bhi.w	80150f0 <LoRaMacMibSetRequestConfirm+0x6d8>
 8014a4a:	a201      	add	r2, pc, #4	; (adr r2, 8014a50 <LoRaMacMibSetRequestConfirm+0x38>)
 8014a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a50:	08014b51 	.word	0x08014b51
 8014a54:	08014b61 	.word	0x08014b61
 8014a58:	08014b7b 	.word	0x08014b7b
 8014a5c:	08014b93 	.word	0x08014b93
 8014a60:	08014bab 	.word	0x08014bab
 8014a64:	08014bb7 	.word	0x08014bb7
 8014a68:	08014bc3 	.word	0x08014bc3
 8014a6c:	08014bed 	.word	0x08014bed
 8014a70:	08014c13 	.word	0x08014c13
 8014a74:	08014c39 	.word	0x08014c39
 8014a78:	08014c5f 	.word	0x08014c5f
 8014a7c:	08014c85 	.word	0x08014c85
 8014a80:	08014cab 	.word	0x08014cab
 8014a84:	08014cd1 	.word	0x08014cd1
 8014a88:	08014cf7 	.word	0x08014cf7
 8014a8c:	08014d25 	.word	0x08014d25
 8014a90:	08014d45 	.word	0x08014d45
 8014a94:	080150f1 	.word	0x080150f1
 8014a98:	08014d51 	.word	0x08014d51
 8014a9c:	08014dc1 	.word	0x08014dc1
 8014aa0:	08014e01 	.word	0x08014e01
 8014aa4:	08014e63 	.word	0x08014e63
 8014aa8:	08014ed3 	.word	0x08014ed3
 8014aac:	08014ea3 	.word	0x08014ea3
 8014ab0:	08014f03 	.word	0x08014f03
 8014ab4:	08014f25 	.word	0x08014f25
 8014ab8:	08014f2f 	.word	0x08014f2f
 8014abc:	08014f39 	.word	0x08014f39
 8014ac0:	08014f43 	.word	0x08014f43
 8014ac4:	08014f4d 	.word	0x08014f4d
 8014ac8:	08014f57 	.word	0x08014f57
 8014acc:	08014f89 	.word	0x08014f89
 8014ad0:	08014ffd 	.word	0x08014ffd
 8014ad4:	08014fc3 	.word	0x08014fc3
 8014ad8:	0801502f 	.word	0x0801502f
 8014adc:	08015045 	.word	0x08015045
 8014ae0:	0801505d 	.word	0x0801505d
 8014ae4:	08015069 	.word	0x08015069
 8014ae8:	08015075 	.word	0x08015075
 8014aec:	080150f1 	.word	0x080150f1
 8014af0:	0801507f 	.word	0x0801507f
 8014af4:	080150f1 	.word	0x080150f1
 8014af8:	080150f1 	.word	0x080150f1
 8014afc:	080150f1 	.word	0x080150f1
 8014b00:	080150f1 	.word	0x080150f1
 8014b04:	080150f1 	.word	0x080150f1
 8014b08:	080150f1 	.word	0x080150f1
 8014b0c:	080150f1 	.word	0x080150f1
 8014b10:	080150f1 	.word	0x080150f1
 8014b14:	080150f1 	.word	0x080150f1
 8014b18:	080150f1 	.word	0x080150f1
 8014b1c:	080150f1 	.word	0x080150f1
 8014b20:	080150f1 	.word	0x080150f1
 8014b24:	080150f1 	.word	0x080150f1
 8014b28:	080150f1 	.word	0x080150f1
 8014b2c:	080150f1 	.word	0x080150f1
 8014b30:	080150f1 	.word	0x080150f1
 8014b34:	080150a9 	.word	0x080150a9
 8014b38:	080150b5 	.word	0x080150b5
 8014b3c:	080150c1 	.word	0x080150c1
 8014b40:	080150cd 	.word	0x080150cd
 8014b44:	080150d9 	.word	0x080150d9
 8014b48:	080150e5 	.word	0x080150e5
 8014b4c:	080150eb 	.word	0x080150eb
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	791b      	ldrb	r3, [r3, #4]
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7fd fb87 	bl	8012268 <SwitchClass>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	75fb      	strb	r3, [r7, #23]
            break;
 8014b5e:	e2e8      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	791b      	ldrb	r3, [r3, #4]
 8014b64:	2b02      	cmp	r3, #2
 8014b66:	d005      	beq.n	8014b74 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	791a      	ldrb	r2, [r3, #4]
 8014b6c:	4b6c      	ldr	r3, [pc, #432]	; (8014d20 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b6e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b72:	e2de      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b74:	2303      	movs	r3, #3
 8014b76:	75fb      	strb	r3, [r7, #23]
            break;
 8014b78:	e2db      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	685b      	ldr	r3, [r3, #4]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7fa fd1c 	bl	800f5bc <SecureElementSetDevEui>
 8014b84:	4603      	mov	r3, r0
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	f000 82b8 	beq.w	80150fc <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b8c:	2303      	movs	r3, #3
 8014b8e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b90:	e2b4      	b.n	80150fc <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7fa fd40 	bl	800f61c <SecureElementSetJoinEui>
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 82ae 	beq.w	8015100 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ba4:	2303      	movs	r3, #3
 8014ba6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ba8:	e2aa      	b.n	8015100 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	791a      	ldrb	r2, [r3, #4]
 8014bae:	4b5c      	ldr	r3, [pc, #368]	; (8014d20 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bb0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014bb4:	e2bd      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	685b      	ldr	r3, [r3, #4]
 8014bba:	4a59      	ldr	r2, [pc, #356]	; (8014d20 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014bc0:	e2b7      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014bc2:	4b57      	ldr	r3, [pc, #348]	; (8014d20 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bc4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	4619      	mov	r1, r3
 8014bce:	4610      	mov	r0, r2
 8014bd0:	f7fa fd54 	bl	800f67c <SecureElementSetDevAddr>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d002      	beq.n	8014be0 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bda:	2303      	movs	r3, #3
 8014bdc:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014bde:	e2a8      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	4a4e      	ldr	r2, [pc, #312]	; (8014d20 <LoRaMacMibSetRequestConfirm+0x308>)
 8014be6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014bea:	e2a2      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	685b      	ldr	r3, [r3, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00b      	beq.n	8014c0c <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	685b      	ldr	r3, [r3, #4]
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	2000      	movs	r0, #0
 8014bfc:	f001 fff4 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014c00:	4603      	mov	r3, r0
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	f000 827e 	beq.w	8015104 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c08:	2311      	movs	r3, #17
 8014c0a:	e293      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c0c:	2303      	movs	r3, #3
 8014c0e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c10:	e278      	b.n	8015104 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00b      	beq.n	8014c32 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	4619      	mov	r1, r3
 8014c20:	2001      	movs	r0, #1
 8014c22:	f001 ffe1 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014c26:	4603      	mov	r3, r0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f000 826d 	beq.w	8015108 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c2e:	2311      	movs	r3, #17
 8014c30:	e280      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c32:	2303      	movs	r3, #3
 8014c34:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c36:	e267      	b.n	8015108 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d00b      	beq.n	8014c58 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	685b      	ldr	r3, [r3, #4]
 8014c44:	4619      	mov	r1, r3
 8014c46:	2008      	movs	r0, #8
 8014c48:	f001 ffce 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	f000 825c 	beq.w	801510c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c54:	2311      	movs	r3, #17
 8014c56:	e26d      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c58:	2303      	movs	r3, #3
 8014c5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c5c:	e256      	b.n	801510c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	685b      	ldr	r3, [r3, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d00b      	beq.n	8014c7e <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	2009      	movs	r0, #9
 8014c6e:	f001 ffbb 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	f000 824b 	beq.w	8015110 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c7a:	2311      	movs	r3, #17
 8014c7c:	e25a      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c7e:	2303      	movs	r3, #3
 8014c80:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c82:	e245      	b.n	8015110 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	685b      	ldr	r3, [r3, #4]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d00b      	beq.n	8014ca4 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	4619      	mov	r1, r3
 8014c92:	200c      	movs	r0, #12
 8014c94:	f001 ffa8 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	f000 823a 	beq.w	8015114 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ca0:	2311      	movs	r3, #17
 8014ca2:	e247      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ca8:	e234      	b.n	8015114 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d00b      	beq.n	8014cca <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	685b      	ldr	r3, [r3, #4]
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	200d      	movs	r0, #13
 8014cba:	f001 ff95 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	f000 8229 	beq.w	8015118 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cc6:	2311      	movs	r3, #17
 8014cc8:	e234      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cca:	2303      	movs	r3, #3
 8014ccc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cce:	e223      	b.n	8015118 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	685b      	ldr	r3, [r3, #4]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d00b      	beq.n	8014cf0 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	4619      	mov	r1, r3
 8014cde:	200e      	movs	r0, #14
 8014ce0:	f001 ff82 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	f000 8218 	beq.w	801511c <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cec:	2311      	movs	r3, #17
 8014cee:	e221      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cf0:	2303      	movs	r3, #3
 8014cf2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cf4:	e212      	b.n	801511c <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d00b      	beq.n	8014d16 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	4619      	mov	r1, r3
 8014d04:	200f      	movs	r0, #15
 8014d06:	f001 ff6f 	bl	8016be8 <LoRaMacCryptoSetKey>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f000 8207 	beq.w	8015120 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d12:	2311      	movs	r3, #17
 8014d14:	e20e      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d16:	2303      	movs	r3, #3
 8014d18:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d1a:	e201      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x708>
 8014d1c:	20000978 	.word	0x20000978
 8014d20:	20000e80 	.word	0x20000e80
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	791a      	ldrb	r2, [r3, #4]
 8014d28:	4bb2      	ldr	r3, [pc, #712]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d2a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014d2e:	4bb2      	ldr	r3, [pc, #712]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d32:	4ab0      	ldr	r2, [pc, #704]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d34:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014d38:	4610      	mov	r0, r2
 8014d3a:	4798      	blx	r3
            Radio.Sleep( );
 8014d3c:	4bae      	ldr	r3, [pc, #696]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d40:	4798      	blx	r3
            break;
 8014d42:	e1f6      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	791a      	ldrb	r2, [r3, #4]
 8014d48:	4baa      	ldr	r3, [pc, #680]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d4a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014d4e:	e1f0      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	7a1b      	ldrb	r3, [r3, #8]
 8014d54:	b25b      	sxtb	r3, r3
 8014d56:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d58:	4ba6      	ldr	r3, [pc, #664]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d5a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d5e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014d60:	4ba4      	ldr	r3, [pc, #656]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d62:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d66:	f107 0108 	add.w	r1, r7, #8
 8014d6a:	2207      	movs	r2, #7
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f002 fd71 	bl	8017854 <RegionVerify>
 8014d72:	4603      	mov	r3, r0
 8014d74:	f083 0301 	eor.w	r3, r3, #1
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d002      	beq.n	8014d84 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d7e:	2303      	movs	r3, #3
 8014d80:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d82:	e1d6      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d8a:	4b9a      	ldr	r3, [pc, #616]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d90:	f107 0108 	add.w	r1, r7, #8
 8014d94:	2200      	movs	r2, #0
 8014d96:	4618      	mov	r0, r3
 8014d98:	f002 fd5c 	bl	8017854 <RegionVerify>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	f083 0301 	eor.w	r3, r3, #1
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d002      	beq.n	8014dae <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014da8:	2303      	movs	r3, #3
 8014daa:	75fb      	strb	r3, [r7, #23]
            break;
 8014dac:	e1c1      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014dae:	4b91      	ldr	r3, [pc, #580]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	336c      	adds	r3, #108	; 0x6c
 8014db4:	3204      	adds	r2, #4
 8014db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dba:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014dbe:	e1b8      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	7a1b      	ldrb	r3, [r3, #8]
 8014dc4:	b25b      	sxtb	r3, r3
 8014dc6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014dc8:	4b8a      	ldr	r3, [pc, #552]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dca:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dce:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014dd0:	4b88      	ldr	r3, [pc, #544]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dd6:	f107 0108 	add.w	r1, r7, #8
 8014dda:	2207      	movs	r2, #7
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f002 fd39 	bl	8017854 <RegionVerify>
 8014de2:	4603      	mov	r3, r0
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d008      	beq.n	8014dfa <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014de8:	4b82      	ldr	r3, [pc, #520]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	33b4      	adds	r3, #180	; 0xb4
 8014dee:	3204      	adds	r2, #4
 8014df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014df4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014df8:	e19b      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dfa:	2303      	movs	r3, #3
 8014dfc:	75fb      	strb	r3, [r7, #23]
            break;
 8014dfe:	e198      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	7a1b      	ldrb	r3, [r3, #8]
 8014e04:	b25b      	sxtb	r3, r3
 8014e06:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e08:	4b7a      	ldr	r3, [pc, #488]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e0a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e0e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e10:	4b78      	ldr	r3, [pc, #480]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e16:	f107 0108 	add.w	r1, r7, #8
 8014e1a:	2207      	movs	r2, #7
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f002 fd19 	bl	8017854 <RegionVerify>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d019      	beq.n	8014e5c <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014e28:	4b72      	ldr	r3, [pc, #456]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	3374      	adds	r3, #116	; 0x74
 8014e2e:	3204      	adds	r2, #4
 8014e30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e34:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014e38:	4b6e      	ldr	r3, [pc, #440]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e3a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014e3e:	2b02      	cmp	r3, #2
 8014e40:	f040 8170 	bne.w	8015124 <LoRaMacMibSetRequestConfirm+0x70c>
 8014e44:	4b6b      	ldr	r3, [pc, #428]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e46:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	f000 816a 	beq.w	8015124 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014e50:	4b69      	ldr	r3, [pc, #420]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e54:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014e56:	f7fe fc91 	bl	801377c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e5a:	e163      	b.n	8015124 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e5c:	2303      	movs	r3, #3
 8014e5e:	75fb      	strb	r3, [r7, #23]
            break;
 8014e60:	e160      	b.n	8015124 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	7a1b      	ldrb	r3, [r3, #8]
 8014e66:	b25b      	sxtb	r3, r3
 8014e68:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e6a:	4b62      	ldr	r3, [pc, #392]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e6c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e70:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e72:	4b60      	ldr	r3, [pc, #384]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e78:	f107 0108 	add.w	r1, r7, #8
 8014e7c:	2207      	movs	r2, #7
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f002 fce8 	bl	8017854 <RegionVerify>
 8014e84:	4603      	mov	r3, r0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d008      	beq.n	8014e9c <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e8a:	4b5a      	ldr	r3, [pc, #360]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	33bc      	adds	r3, #188	; 0xbc
 8014e90:	3204      	adds	r2, #4
 8014e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e96:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e9a:	e14a      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e9c:	2303      	movs	r3, #3
 8014e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8014ea0:	e147      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014eac:	4b51      	ldr	r3, [pc, #324]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014eae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014eb2:	f107 020c 	add.w	r2, r7, #12
 8014eb6:	4611      	mov	r1, r2
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f002 fcf4 	bl	80178a6 <RegionChanMaskSet>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	f083 0301 	eor.w	r3, r3, #1
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	f000 812e 	beq.w	8015128 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ecc:	2303      	movs	r3, #3
 8014ece:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ed0:	e12a      	b.n	8015128 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014ed8:	2300      	movs	r3, #0
 8014eda:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014edc:	4b45      	ldr	r3, [pc, #276]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ede:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ee2:	f107 020c 	add.w	r2, r7, #12
 8014ee6:	4611      	mov	r1, r2
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f002 fcdc 	bl	80178a6 <RegionChanMaskSet>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	f083 0301 	eor.w	r3, r3, #1
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	f000 8118 	beq.w	801512c <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014efc:	2303      	movs	r3, #3
 8014efe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f00:	e114      	b.n	801512c <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	791b      	ldrb	r3, [r3, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d009      	beq.n	8014f1e <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f0e:	2b0f      	cmp	r3, #15
 8014f10:	d805      	bhi.n	8014f1e <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	791a      	ldrb	r2, [r3, #4]
 8014f16:	4b37      	ldr	r3, [pc, #220]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f1c:	e109      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f1e:	2303      	movs	r3, #3
 8014f20:	75fb      	strb	r3, [r7, #23]
            break;
 8014f22:	e106      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	4a32      	ldr	r2, [pc, #200]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f2a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014f2c:	e101      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	4a30      	ldr	r2, [pc, #192]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f34:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014f36:	e0fc      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	4a2d      	ldr	r2, [pc, #180]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f3e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014f40:	e0f7      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	4a2b      	ldr	r2, [pc, #172]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f48:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014f4a:	e0f2      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	4a28      	ldr	r2, [pc, #160]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f52:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014f54:	e0ed      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f5c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014f5e:	4b25      	ldr	r3, [pc, #148]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f64:	f107 0108 	add.w	r1, r7, #8
 8014f68:	2206      	movs	r2, #6
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f002 fc72 	bl	8017854 <RegionVerify>
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d005      	beq.n	8014f82 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014f76:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f7a:	4b1e      	ldr	r3, [pc, #120]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f7c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f80:	e0d7      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f82:	2303      	movs	r3, #3
 8014f84:	75fb      	strb	r3, [r7, #23]
            break;
 8014f86:	e0d4      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f8e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f90:	4b18      	ldr	r3, [pc, #96]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f96:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014f98:	4b16      	ldr	r3, [pc, #88]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f9e:	f107 0108 	add.w	r1, r7, #8
 8014fa2:	2205      	movs	r2, #5
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f002 fc55 	bl	8017854 <RegionVerify>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d005      	beq.n	8014fbc <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014fb0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fb4:	4b0f      	ldr	r3, [pc, #60]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fba:	e0ba      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fbc:	2303      	movs	r3, #3
 8014fbe:	75fb      	strb	r3, [r7, #23]
            break;
 8014fc0:	e0b7      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fc8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014fca:	4b0a      	ldr	r3, [pc, #40]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fcc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fd0:	f107 0108 	add.w	r1, r7, #8
 8014fd4:	220a      	movs	r2, #10
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f002 fc3c 	bl	8017854 <RegionVerify>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d005      	beq.n	8014fee <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014fe2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fe6:	4b03      	ldr	r3, [pc, #12]	; (8014ff4 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fe8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fec:	e0a1      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fee:	2303      	movs	r3, #3
 8014ff0:	75fb      	strb	r3, [r7, #23]
            break;
 8014ff2:	e09e      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
 8014ff4:	20000e80 	.word	0x20000e80
 8014ff8:	0801fa04 	.word	0x0801fa04
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015002:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015004:	4b4d      	ldr	r3, [pc, #308]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015006:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801500a:	f107 0108 	add.w	r1, r7, #8
 801500e:	2209      	movs	r2, #9
 8015010:	4618      	mov	r0, r3
 8015012:	f002 fc1f 	bl	8017854 <RegionVerify>
 8015016:	4603      	mov	r3, r0
 8015018:	2b00      	cmp	r3, #0
 801501a:	d005      	beq.n	8015028 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801501c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015020:	4b46      	ldr	r3, [pc, #280]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015026:	e084      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015028:	2303      	movs	r3, #3
 801502a:	75fb      	strb	r3, [r7, #23]
            break;
 801502c:	e081      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	685b      	ldr	r3, [r3, #4]
 8015032:	4a42      	ldr	r2, [pc, #264]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015038:	4b40      	ldr	r3, [pc, #256]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 801503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801503e:	4a3f      	ldr	r2, [pc, #252]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015040:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015042:	e076      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	791a      	ldrb	r2, [r3, #4]
 8015048:	4b3c      	ldr	r3, [pc, #240]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 801504a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801504e:	4b3b      	ldr	r3, [pc, #236]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015050:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015054:	4b39      	ldr	r3, [pc, #228]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801505a:	e06a      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	4a36      	ldr	r2, [pc, #216]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015062:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8015066:	e064      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	4a33      	ldr	r2, [pc, #204]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 801506e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8015072:	e05e      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015074:	f7fe fde0 	bl	8013c38 <RestoreNvmData>
 8015078:	4603      	mov	r3, r0
 801507a:	75fb      	strb	r3, [r7, #23]
            break;
 801507c:	e059      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	799b      	ldrb	r3, [r3, #6]
 8015082:	2b01      	cmp	r3, #1
 8015084:	d80d      	bhi.n	80150a2 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8015086:	4a2d      	ldr	r2, [pc, #180]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6858      	ldr	r0, [r3, #4]
 8015094:	f001 fce0 	bl	8016a58 <LoRaMacCryptoSetLrWanVersion>
 8015098:	4603      	mov	r3, r0
 801509a:	2b00      	cmp	r3, #0
 801509c:	d048      	beq.n	8015130 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801509e:	2311      	movs	r3, #17
 80150a0:	e048      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150a2:	2303      	movs	r3, #3
 80150a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80150a6:	e043      	b.n	8015130 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	4a23      	ldr	r2, [pc, #140]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 80150ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80150b2:	e03e      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	889a      	ldrh	r2, [r3, #4]
 80150b8:	4b20      	ldr	r3, [pc, #128]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 80150ba:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80150be:	e038      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	889a      	ldrh	r2, [r3, #4]
 80150c4:	4b1d      	ldr	r3, [pc, #116]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 80150c6:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80150ca:	e032      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	889a      	ldrh	r2, [r3, #4]
 80150d0:	4b1a      	ldr	r3, [pc, #104]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 80150d2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80150d6:	e02c      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	889a      	ldrh	r2, [r3, #4]
 80150dc:	4b17      	ldr	r3, [pc, #92]	; (801513c <LoRaMacMibSetRequestConfirm+0x724>)
 80150de:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80150e2:	e026      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150e4:	2318      	movs	r3, #24
 80150e6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150e8:	e023      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150ea:	2318      	movs	r3, #24
 80150ec:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150ee:	e020      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f000 fc27 	bl	8015944 <LoRaMacMibClassBSetRequestConfirm>
 80150f6:	4603      	mov	r3, r0
 80150f8:	75fb      	strb	r3, [r7, #23]
            break;
 80150fa:	e01a      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150fc:	bf00      	nop
 80150fe:	e018      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015100:	bf00      	nop
 8015102:	e016      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015104:	bf00      	nop
 8015106:	e014      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015108:	bf00      	nop
 801510a:	e012      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801510c:	bf00      	nop
 801510e:	e010      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015110:	bf00      	nop
 8015112:	e00e      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015114:	bf00      	nop
 8015116:	e00c      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015118:	bf00      	nop
 801511a:	e00a      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801511c:	bf00      	nop
 801511e:	e008      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015120:	bf00      	nop
 8015122:	e006      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015124:	bf00      	nop
 8015126:	e004      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015128:	bf00      	nop
 801512a:	e002      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801512c:	bf00      	nop
 801512e:	e000      	b.n	8015132 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015130:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015132:	7dfb      	ldrb	r3, [r7, #23]
}
 8015134:	4618      	mov	r0, r3
 8015136:	3718      	adds	r7, #24
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	20000e80 	.word	0x20000e80

08015140 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b086      	sub	sp, #24
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015148:	2302      	movs	r3, #2
 801514a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801514c:	2300      	movs	r3, #0
 801514e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d101      	bne.n	801515a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015156:	2303      	movs	r3, #3
 8015158:	e13a      	b.n	80153d0 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801515a:	f7fc fca5 	bl	8011aa8 <LoRaMacIsBusy>
 801515e:	4603      	mov	r3, r0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015164:	2301      	movs	r3, #1
 8015166:	e133      	b.n	80153d0 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015168:	f001 f90c 	bl	8016384 <LoRaMacConfirmQueueIsFull>
 801516c:	4603      	mov	r3, r0
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8015172:	2301      	movs	r3, #1
 8015174:	e12c      	b.n	80153d0 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015176:	f001 f8f9 	bl	801636c <LoRaMacConfirmQueueGetCnt>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d104      	bne.n	801518a <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015180:	2214      	movs	r2, #20
 8015182:	2100      	movs	r1, #0
 8015184:	4894      	ldr	r0, [pc, #592]	; (80153d8 <LoRaMacMlmeRequest+0x298>)
 8015186:	f004 fe7f 	bl	8019e88 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801518a:	4b94      	ldr	r3, [pc, #592]	; (80153dc <LoRaMacMlmeRequest+0x29c>)
 801518c:	2201      	movs	r2, #1
 801518e:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8015192:	4a92      	ldr	r2, [pc, #584]	; (80153dc <LoRaMacMlmeRequest+0x29c>)
 8015194:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015198:	f043 0304 	orr.w	r3, r3, #4
 801519c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	781b      	ldrb	r3, [r3, #0]
 80151a4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151a6:	2301      	movs	r3, #1
 80151a8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80151aa:	2300      	movs	r3, #0
 80151ac:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	3b01      	subs	r3, #1
 80151b4:	2b0d      	cmp	r3, #13
 80151b6:	f200 80e1 	bhi.w	801537c <LoRaMacMlmeRequest+0x23c>
 80151ba:	a201      	add	r2, pc, #4	; (adr r2, 80151c0 <LoRaMacMlmeRequest+0x80>)
 80151bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151c0:	080151f9 	.word	0x080151f9
 80151c4:	0801537d 	.word	0x0801537d
 80151c8:	0801537d 	.word	0x0801537d
 80151cc:	0801537d 	.word	0x0801537d
 80151d0:	08015271 	.word	0x08015271
 80151d4:	0801528f 	.word	0x0801528f
 80151d8:	0801529f 	.word	0x0801529f
 80151dc:	0801537d 	.word	0x0801537d
 80151e0:	0801537d 	.word	0x0801537d
 80151e4:	080152bb 	.word	0x080152bb
 80151e8:	0801537d 	.word	0x0801537d
 80151ec:	08015351 	.word	0x08015351
 80151f0:	080152f1 	.word	0x080152f1
 80151f4:	08015333 	.word	0x08015333
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80151f8:	4b78      	ldr	r3, [pc, #480]	; (80153dc <LoRaMacMlmeRequest+0x29c>)
 80151fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80151fe:	f003 0320 	and.w	r3, r3, #32
 8015202:	2b00      	cmp	r3, #0
 8015204:	d001      	beq.n	801520a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015206:	2301      	movs	r3, #1
 8015208:	e0e2      	b.n	80153d0 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801520a:	2000      	movs	r0, #0
 801520c:	f7fe f95c 	bl	80134c8 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015210:	4b73      	ldr	r3, [pc, #460]	; (80153e0 <LoRaMacMlmeRequest+0x2a0>)
 8015212:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	795b      	ldrb	r3, [r3, #5]
 801521a:	b25b      	sxtb	r3, r3
 801521c:	2200      	movs	r2, #0
 801521e:	4619      	mov	r1, r3
 8015220:	f002 fc00 	bl	8017a24 <RegionAlternateDr>
 8015224:	4603      	mov	r3, r0
 8015226:	461a      	mov	r2, r3
 8015228:	4b6d      	ldr	r3, [pc, #436]	; (80153e0 <LoRaMacMlmeRequest+0x2a0>)
 801522a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015234:	4b6a      	ldr	r3, [pc, #424]	; (80153e0 <LoRaMacMlmeRequest+0x2a0>)
 8015236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801523a:	2307      	movs	r3, #7
 801523c:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801523e:	20ff      	movs	r0, #255	; 0xff
 8015240:	f7fd fec0 	bl	8012fc4 <SendReJoinReq>
 8015244:	4603      	mov	r3, r0
 8015246:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8015248:	7dfb      	ldrb	r3, [r7, #23]
 801524a:	2b00      	cmp	r3, #0
 801524c:	f000 8098 	beq.w	8015380 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015250:	4b63      	ldr	r3, [pc, #396]	; (80153e0 <LoRaMacMlmeRequest+0x2a0>)
 8015252:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	795b      	ldrb	r3, [r3, #5]
 801525a:	b25b      	sxtb	r3, r3
 801525c:	2201      	movs	r2, #1
 801525e:	4619      	mov	r1, r3
 8015260:	f002 fbe0 	bl	8017a24 <RegionAlternateDr>
 8015264:	4603      	mov	r3, r0
 8015266:	461a      	mov	r2, r3
 8015268:	4b5d      	ldr	r3, [pc, #372]	; (80153e0 <LoRaMacMlmeRequest+0x2a0>)
 801526a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801526e:	e087      	b.n	8015380 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015270:	2300      	movs	r3, #0
 8015272:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015274:	f107 030c 	add.w	r3, r7, #12
 8015278:	2200      	movs	r2, #0
 801527a:	4619      	mov	r1, r3
 801527c:	2002      	movs	r0, #2
 801527e:	f000 fcd1 	bl	8015c24 <LoRaMacCommandsAddCmd>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d07d      	beq.n	8015384 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015288:	2313      	movs	r3, #19
 801528a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801528c:	e07a      	b.n	8015384 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	889b      	ldrh	r3, [r3, #4]
 8015292:	4618      	mov	r0, r3
 8015294:	f7fe fc7a 	bl	8013b8c <SetTxContinuousWave>
 8015298:	4603      	mov	r3, r0
 801529a:	75fb      	strb	r3, [r7, #23]
            break;
 801529c:	e079      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	8898      	ldrh	r0, [r3, #4]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6899      	ldr	r1, [r3, #8]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	461a      	mov	r2, r3
 80152b0:	f7fe fca2 	bl	8013bf8 <SetTxContinuousWave1>
 80152b4:	4603      	mov	r3, r0
 80152b6:	75fb      	strb	r3, [r7, #23]
            break;
 80152b8:	e06b      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152ba:	2300      	movs	r3, #0
 80152bc:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152be:	f107 0308 	add.w	r3, r7, #8
 80152c2:	4619      	mov	r1, r3
 80152c4:	200d      	movs	r0, #13
 80152c6:	f000 fd2d 	bl	8015d24 <LoRaMacCommandsGetCmd>
 80152ca:	4603      	mov	r3, r0
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d102      	bne.n	80152d6 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80152d0:	2300      	movs	r3, #0
 80152d2:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80152d4:	e058      	b.n	8015388 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152d6:	f107 030c 	add.w	r3, r7, #12
 80152da:	2200      	movs	r2, #0
 80152dc:	4619      	mov	r1, r3
 80152de:	200d      	movs	r0, #13
 80152e0:	f000 fca0 	bl	8015c24 <LoRaMacCommandsAddCmd>
 80152e4:	4603      	mov	r3, r0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d04e      	beq.n	8015388 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152ea:	2313      	movs	r3, #19
 80152ec:	75fb      	strb	r3, [r7, #23]
            break;
 80152ee:	e04b      	b.n	8015388 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80152f0:	4b3b      	ldr	r3, [pc, #236]	; (80153e0 <LoRaMacMlmeRequest+0x2a0>)
 80152f2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d148      	bne.n	801538c <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	791b      	ldrb	r3, [r3, #4]
 80152fe:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	791b      	ldrb	r3, [r3, #4]
 8015304:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015308:	b2db      	uxtb	r3, r3
 801530a:	4618      	mov	r0, r3
 801530c:	f000 faef 	bl	80158ee <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015310:	7dbb      	ldrb	r3, [r7, #22]
 8015312:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015314:	2300      	movs	r3, #0
 8015316:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015318:	f107 030c 	add.w	r3, r7, #12
 801531c:	2201      	movs	r2, #1
 801531e:	4619      	mov	r1, r3
 8015320:	2010      	movs	r0, #16
 8015322:	f000 fc7f 	bl	8015c24 <LoRaMacCommandsAddCmd>
 8015326:	4603      	mov	r3, r0
 8015328:	2b00      	cmp	r3, #0
 801532a:	d02f      	beq.n	801538c <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801532c:	2313      	movs	r3, #19
 801532e:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015330:	e02c      	b.n	801538c <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015332:	2300      	movs	r3, #0
 8015334:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015336:	f107 030c 	add.w	r3, r7, #12
 801533a:	2200      	movs	r2, #0
 801533c:	4619      	mov	r1, r3
 801533e:	2012      	movs	r0, #18
 8015340:	f000 fc70 	bl	8015c24 <LoRaMacCommandsAddCmd>
 8015344:	4603      	mov	r3, r0
 8015346:	2b00      	cmp	r3, #0
 8015348:	d022      	beq.n	8015390 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801534a:	2313      	movs	r3, #19
 801534c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801534e:	e01f      	b.n	8015390 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015350:	2301      	movs	r3, #1
 8015352:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015354:	f000 fa81 	bl	801585a <LoRaMacClassBIsAcquisitionInProgress>
 8015358:	4603      	mov	r3, r0
 801535a:	f083 0301 	eor.w	r3, r3, #1
 801535e:	b2db      	uxtb	r3, r3
 8015360:	2b00      	cmp	r3, #0
 8015362:	d008      	beq.n	8015376 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015364:	2000      	movs	r0, #0
 8015366:	f000 fa5a 	bl	801581e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801536a:	2000      	movs	r0, #0
 801536c:	f000 fa7c 	bl	8015868 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015370:	2300      	movs	r3, #0
 8015372:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015374:	e00d      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8015376:	2301      	movs	r3, #1
 8015378:	75fb      	strb	r3, [r7, #23]
            break;
 801537a:	e00a      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 801537c:	bf00      	nop
 801537e:	e008      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
            break;
 8015380:	bf00      	nop
 8015382:	e006      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
            break;
 8015384:	bf00      	nop
 8015386:	e004      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
            break;
 8015388:	bf00      	nop
 801538a:	e002      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
            break;
 801538c:	bf00      	nop
 801538e:	e000      	b.n	8015392 <LoRaMacMlmeRequest+0x252>
            break;
 8015390:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015392:	4b12      	ldr	r3, [pc, #72]	; (80153dc <LoRaMacMlmeRequest+0x29c>)
 8015394:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801539c:	7dfb      	ldrb	r3, [r7, #23]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d010      	beq.n	80153c4 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80153a2:	f000 ffe3 	bl	801636c <LoRaMacConfirmQueueGetCnt>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d110      	bne.n	80153ce <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 80153ac:	4b0b      	ldr	r3, [pc, #44]	; (80153dc <LoRaMacMlmeRequest+0x29c>)
 80153ae:	2200      	movs	r2, #0
 80153b0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80153b4:	4a09      	ldr	r2, [pc, #36]	; (80153dc <LoRaMacMlmeRequest+0x29c>)
 80153b6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80153ba:	f36f 0382 	bfc	r3, #2, #1
 80153be:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80153c2:	e004      	b.n	80153ce <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80153c4:	f107 0310 	add.w	r3, r7, #16
 80153c8:	4618      	mov	r0, r3
 80153ca:	f000 fe7b 	bl	80160c4 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80153ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3718      	adds	r7, #24
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	20000dc0 	.word	0x20000dc0
 80153dc:	20000978 	.word	0x20000978
 80153e0:	20000e80 	.word	0x20000e80

080153e4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b08c      	sub	sp, #48	; 0x30
 80153e8:	af02      	add	r7, sp, #8
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	460b      	mov	r3, r1
 80153ee:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153f0:	2302      	movs	r3, #2
 80153f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80153f6:	2300      	movs	r3, #0
 80153f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 80153fc:	2300      	movs	r3, #0
 80153fe:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015400:	2300      	movs	r3, #0
 8015402:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015404:	2300      	movs	r3, #0
 8015406:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d101      	bne.n	8015412 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801540e:	2303      	movs	r3, #3
 8015410:	e0d4      	b.n	80155bc <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015412:	f7fc fb49 	bl	8011aa8 <LoRaMacIsBusy>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d001      	beq.n	8015420 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 801541c:	2301      	movs	r3, #1
 801541e:	e0cd      	b.n	80155bc <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015420:	2300      	movs	r3, #0
 8015422:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015424:	2214      	movs	r2, #20
 8015426:	2100      	movs	r1, #0
 8015428:	4866      	ldr	r0, [pc, #408]	; (80155c4 <LoRaMacMcpsRequest+0x1e0>)
 801542a:	f004 fd2d 	bl	8019e88 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801542e:	4b66      	ldr	r3, [pc, #408]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 8015430:	2201      	movs	r2, #1
 8015432:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015436:	4b64      	ldr	r3, [pc, #400]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 8015438:	2201      	movs	r2, #1
 801543a:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	2b03      	cmp	r3, #3
 8015444:	d03d      	beq.n	80154c2 <LoRaMacMcpsRequest+0xde>
 8015446:	2b03      	cmp	r3, #3
 8015448:	dc4f      	bgt.n	80154ea <LoRaMacMcpsRequest+0x106>
 801544a:	2b00      	cmp	r3, #0
 801544c:	d002      	beq.n	8015454 <LoRaMacMcpsRequest+0x70>
 801544e:	2b01      	cmp	r3, #1
 8015450:	d019      	beq.n	8015486 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015452:	e04a      	b.n	80154ea <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015454:	2301      	movs	r3, #1
 8015456:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015458:	4b5b      	ldr	r3, [pc, #364]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 801545a:	2201      	movs	r2, #1
 801545c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015460:	7b3b      	ldrb	r3, [r7, #12]
 8015462:	2202      	movs	r2, #2
 8015464:	f362 1347 	bfi	r3, r2, #5, #3
 8015468:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	791b      	ldrb	r3, [r3, #4]
 801546e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	689b      	ldr	r3, [r3, #8]
 8015476:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	899b      	ldrh	r3, [r3, #12]
 801547c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	7b9b      	ldrb	r3, [r3, #14]
 8015482:	777b      	strb	r3, [r7, #29]
            break;
 8015484:	e032      	b.n	80154ec <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015486:	2301      	movs	r3, #1
 8015488:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	7bdb      	ldrb	r3, [r3, #15]
 801548e:	2b08      	cmp	r3, #8
 8015490:	bf28      	it	cs
 8015492:	2308      	movcs	r3, #8
 8015494:	b2da      	uxtb	r2, r3
 8015496:	4b4c      	ldr	r3, [pc, #304]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 8015498:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 801549c:	7b3b      	ldrb	r3, [r7, #12]
 801549e:	2204      	movs	r2, #4
 80154a0:	f362 1347 	bfi	r3, r2, #5, #3
 80154a4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	791b      	ldrb	r3, [r3, #4]
 80154aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	689b      	ldr	r3, [r3, #8]
 80154b2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	899b      	ldrh	r3, [r3, #12]
 80154b8:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	7b9b      	ldrb	r3, [r3, #14]
 80154be:	777b      	strb	r3, [r7, #29]
            break;
 80154c0:	e014      	b.n	80154ec <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80154c2:	2301      	movs	r3, #1
 80154c4:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80154c6:	4b40      	ldr	r3, [pc, #256]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 80154c8:	2201      	movs	r2, #1
 80154ca:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80154ce:	7b3b      	ldrb	r3, [r7, #12]
 80154d0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80154d4:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	891b      	ldrh	r3, [r3, #8]
 80154e0:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	7a9b      	ldrb	r3, [r3, #10]
 80154e6:	777b      	strb	r3, [r7, #29]
            break;
 80154e8:	e000      	b.n	80154ec <LoRaMacMcpsRequest+0x108>
            break;
 80154ea:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80154ec:	2302      	movs	r3, #2
 80154ee:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80154f0:	4b36      	ldr	r3, [pc, #216]	; (80155cc <LoRaMacMcpsRequest+0x1e8>)
 80154f2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80154f6:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80154f8:	4b34      	ldr	r3, [pc, #208]	; (80155cc <LoRaMacMcpsRequest+0x1e8>)
 80154fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154fe:	f107 0214 	add.w	r2, r7, #20
 8015502:	4611      	mov	r1, r2
 8015504:	4618      	mov	r0, r3
 8015506:	f002 f96a 	bl	80177de <RegionGetPhyParam>
 801550a:	4603      	mov	r3, r0
 801550c:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	b25b      	sxtb	r3, r3
 8015512:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015516:	4293      	cmp	r3, r2
 8015518:	bfb8      	it	lt
 801551a:	4613      	movlt	r3, r2
 801551c:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801551e:	7f3b      	ldrb	r3, [r7, #28]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d044      	beq.n	80155ae <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015524:	4b29      	ldr	r3, [pc, #164]	; (80155cc <LoRaMacMcpsRequest+0x1e8>)
 8015526:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801552a:	f083 0301 	eor.w	r3, r3, #1
 801552e:	b2db      	uxtb	r3, r3
 8015530:	2b00      	cmp	r3, #0
 8015532:	d019      	beq.n	8015568 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015534:	7f7b      	ldrb	r3, [r7, #29]
 8015536:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015538:	4b24      	ldr	r3, [pc, #144]	; (80155cc <LoRaMacMcpsRequest+0x1e8>)
 801553a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801553e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015540:	4b22      	ldr	r3, [pc, #136]	; (80155cc <LoRaMacMcpsRequest+0x1e8>)
 8015542:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015546:	f107 0108 	add.w	r1, r7, #8
 801554a:	2205      	movs	r2, #5
 801554c:	4618      	mov	r0, r3
 801554e:	f002 f981 	bl	8017854 <RegionVerify>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d005      	beq.n	8015564 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015558:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801555c:	4b1b      	ldr	r3, [pc, #108]	; (80155cc <LoRaMacMcpsRequest+0x1e8>)
 801555e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015562:	e001      	b.n	8015568 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015564:	2303      	movs	r3, #3
 8015566:	e029      	b.n	80155bc <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015568:	8bfa      	ldrh	r2, [r7, #30]
 801556a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801556e:	f107 000c 	add.w	r0, r7, #12
 8015572:	78fb      	ldrb	r3, [r7, #3]
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	4613      	mov	r3, r2
 8015578:	6a3a      	ldr	r2, [r7, #32]
 801557a:	f7fd fc45 	bl	8012e08 <Send>
 801557e:	4603      	mov	r3, r0
 8015580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015588:	2b00      	cmp	r3, #0
 801558a:	d10c      	bne.n	80155a6 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	781a      	ldrb	r2, [r3, #0]
 8015590:	4b0d      	ldr	r3, [pc, #52]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 8015592:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015596:	4a0c      	ldr	r2, [pc, #48]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 8015598:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801559c:	f043 0301 	orr.w	r3, r3, #1
 80155a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80155a4:	e003      	b.n	80155ae <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80155a6:	4b08      	ldr	r3, [pc, #32]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 80155a8:	2200      	movs	r2, #0
 80155aa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80155ae:	4b06      	ldr	r3, [pc, #24]	; (80155c8 <LoRaMacMcpsRequest+0x1e4>)
 80155b0:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	611a      	str	r2, [r3, #16]

    return status;
 80155b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3728      	adds	r7, #40	; 0x28
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	20000dac 	.word	0x20000dac
 80155c8:	20000978 	.word	0x20000978
 80155cc:	20000e80 	.word	0x20000e80

080155d0 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b084      	sub	sp, #16
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	4603      	mov	r3, r0
 80155d8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80155da:	79fb      	ldrb	r3, [r7, #7]
 80155dc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80155de:	4b0d      	ldr	r3, [pc, #52]	; (8015614 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155e4:	f107 010c 	add.w	r1, r7, #12
 80155e8:	220f      	movs	r2, #15
 80155ea:	4618      	mov	r0, r3
 80155ec:	f002 f932 	bl	8017854 <RegionVerify>
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d00a      	beq.n	801560c <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80155f6:	4a07      	ldr	r2, [pc, #28]	; (8015614 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155f8:	79fb      	ldrb	r3, [r7, #7]
 80155fa:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80155fe:	4a06      	ldr	r2, [pc, #24]	; (8015618 <LoRaMacTestSetDutyCycleOn+0x48>)
 8015600:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015604:	f043 0320 	orr.w	r3, r3, #32
 8015608:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 801560c:	bf00      	nop
 801560e:	3710      	adds	r7, #16
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}
 8015614:	20000e80 	.word	0x20000e80
 8015618:	20000978 	.word	0x20000978

0801561c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801561c:	b580      	push	{r7, lr}
 801561e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015620:	f7fe ff6c 	bl	80144fc <LoRaMacStop>
 8015624:	4603      	mov	r3, r0
 8015626:	2b00      	cmp	r3, #0
 8015628:	d115      	bne.n	8015656 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801562a:	480c      	ldr	r0, [pc, #48]	; (801565c <LoRaMacDeInitialization+0x40>)
 801562c:	f008 fd8c 	bl	801e148 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015630:	480b      	ldr	r0, [pc, #44]	; (8015660 <LoRaMacDeInitialization+0x44>)
 8015632:	f008 fd89 	bl	801e148 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015636:	480b      	ldr	r0, [pc, #44]	; (8015664 <LoRaMacDeInitialization+0x48>)
 8015638:	f008 fd86 	bl	801e148 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 801563c:	480a      	ldr	r0, [pc, #40]	; (8015668 <LoRaMacDeInitialization+0x4c>)
 801563e:	f008 fd83 	bl	801e148 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015642:	f000 f95e 	bl	8015902 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015646:	2000      	movs	r0, #0
 8015648:	f7fd ff3e 	bl	80134c8 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801564c:	4b07      	ldr	r3, [pc, #28]	; (801566c <LoRaMacDeInitialization+0x50>)
 801564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015650:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015652:	2300      	movs	r3, #0
 8015654:	e000      	b.n	8015658 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015656:	2301      	movs	r3, #1
    }
}
 8015658:	4618      	mov	r0, r3
 801565a:	bd80      	pop	{r7, pc}
 801565c:	20000ce0 	.word	0x20000ce0
 8015660:	20000cf8 	.word	0x20000cf8
 8015664:	20000d10 	.word	0x20000d10
 8015668:	20000d6c 	.word	0x20000d6c
 801566c:	0801fa04 	.word	0x0801fa04

08015670 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b08c      	sub	sp, #48	; 0x30
 8015674:	af00      	add	r7, sp, #0
 8015676:	60f8      	str	r0, [r7, #12]
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
 801567c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801567e:	2300      	movs	r3, #0
 8015680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	7c1b      	ldrb	r3, [r3, #16]
 8015688:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	7c5b      	ldrb	r3, [r3, #17]
 8015690:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	689a      	ldr	r2, [r3, #8]
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	795b      	ldrb	r3, [r3, #5]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f000 808b 	beq.w	80157bc <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80156a6:	2302      	movs	r3, #2
 80156a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	7c9b      	ldrb	r3, [r3, #18]
 80156b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	7cdb      	ldrb	r3, [r3, #19]
 80156b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156bc:	4611      	mov	r1, r2
 80156be:	4618      	mov	r0, r3
 80156c0:	f002 f88d 	bl	80177de <RegionGetPhyParam>
 80156c4:	4603      	mov	r3, r0
 80156c6:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80156c8:	6a3b      	ldr	r3, [r7, #32]
 80156ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80156ce:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80156d2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80156d6:	4293      	cmp	r3, r2
 80156d8:	bfb8      	it	lt
 80156da:	4613      	movlt	r3, r2
 80156dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80156e0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80156e4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d106      	bne.n	80156fa <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	2200      	movs	r2, #0
 80156f0:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80156f2:	2300      	movs	r3, #0
 80156f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80156f8:	e060      	b.n	80157bc <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	689b      	ldr	r3, [r3, #8]
 80156fe:	68fa      	ldr	r2, [r7, #12]
 8015700:	8992      	ldrh	r2, [r2, #12]
 8015702:	4293      	cmp	r3, r2
 8015704:	d303      	bcc.n	801570e <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015706:	2301      	movs	r3, #1
 8015708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801570c:	e002      	b.n	8015714 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801570e:	2300      	movs	r3, #0
 8015710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	689b      	ldr	r3, [r3, #8]
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	8992      	ldrh	r2, [r2, #12]
 801571c:	4611      	mov	r1, r2
 801571e:	68fa      	ldr	r2, [r7, #12]
 8015720:	89d2      	ldrh	r2, [r2, #14]
 8015722:	440a      	add	r2, r1
 8015724:	4293      	cmp	r3, r2
 8015726:	d349      	bcc.n	80157bc <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015728:	2308      	movs	r3, #8
 801572a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	7cdb      	ldrb	r3, [r3, #19]
 8015732:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015736:	4611      	mov	r1, r2
 8015738:	4618      	mov	r0, r3
 801573a:	f002 f850 	bl	80177de <RegionGetPhyParam>
 801573e:	4603      	mov	r3, r0
 8015740:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8015742:	6a3b      	ldr	r3, [r7, #32]
 8015744:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	689b      	ldr	r3, [r3, #8]
 801574c:	68fa      	ldr	r2, [r7, #12]
 801574e:	89d2      	ldrh	r2, [r2, #14]
 8015750:	fbb3 f1f2 	udiv	r1, r3, r2
 8015754:	fb01 f202 	mul.w	r2, r1, r2
 8015758:	1a9b      	subs	r3, r3, r2
 801575a:	2b01      	cmp	r3, #1
 801575c:	d12e      	bne.n	80157bc <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801575e:	2322      	movs	r3, #34	; 0x22
 8015760:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015764:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	7c9b      	ldrb	r3, [r3, #18]
 8015770:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	7cdb      	ldrb	r3, [r3, #19]
 8015778:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801577c:	4611      	mov	r1, r2
 801577e:	4618      	mov	r0, r3
 8015780:	f002 f82d 	bl	80177de <RegionGetPhyParam>
 8015784:	4603      	mov	r3, r0
 8015786:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015788:	6a3b      	ldr	r3, [r7, #32]
 801578a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801578e:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015792:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015796:	429a      	cmp	r2, r3
 8015798:	d110      	bne.n	80157bc <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801579a:	2300      	movs	r3, #0
 801579c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	791b      	ldrb	r3, [r3, #4]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d009      	beq.n	80157bc <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80157a8:	2302      	movs	r3, #2
 80157aa:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	7cdb      	ldrb	r3, [r3, #19]
 80157b0:	f107 0214 	add.w	r2, r7, #20
 80157b4:	4611      	mov	r1, r2
 80157b6:	4618      	mov	r0, r3
 80157b8:	f002 f83a 	bl	8017830 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80157c2:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157ca:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80157cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3730      	adds	r7, #48	; 0x30
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	789b      	ldrb	r3, [r3, #2]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d107      	bne.n	80157fe <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	68b9      	ldr	r1, [r7, #8]
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f7ff ff3b 	bl	8015670 <CalcNextV10X>
 80157fa:	4603      	mov	r3, r0
 80157fc:	e000      	b.n	8015800 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80157fe:	2300      	movs	r3, #0
}
 8015800:	4618      	mov	r0, r3
 8015802:	3710      	adds	r7, #16
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015808:	b480      	push	{r7}
 801580a:	b085      	sub	sp, #20
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015814:	bf00      	nop
 8015816:	3714      	adds	r7, #20
 8015818:	46bd      	mov	sp, r7
 801581a:	bc80      	pop	{r7}
 801581c:	4770      	bx	lr

0801581e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801581e:	b480      	push	{r7}
 8015820:	b083      	sub	sp, #12
 8015822:	af00      	add	r7, sp, #0
 8015824:	4603      	mov	r3, r0
 8015826:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015828:	bf00      	nop
 801582a:	370c      	adds	r7, #12
 801582c:	46bd      	mov	sp, r7
 801582e:	bc80      	pop	{r7}
 8015830:	4770      	bx	lr

08015832 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015832:	b480      	push	{r7}
 8015834:	b083      	sub	sp, #12
 8015836:	af00      	add	r7, sp, #0
 8015838:	4603      	mov	r3, r0
 801583a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801583c:	bf00      	nop
 801583e:	370c      	adds	r7, #12
 8015840:	46bd      	mov	sp, r7
 8015842:	bc80      	pop	{r7}
 8015844:	4770      	bx	lr

08015846 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015846:	b480      	push	{r7}
 8015848:	b083      	sub	sp, #12
 801584a:	af00      	add	r7, sp, #0
 801584c:	4603      	mov	r3, r0
 801584e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015850:	bf00      	nop
 8015852:	370c      	adds	r7, #12
 8015854:	46bd      	mov	sp, r7
 8015856:	bc80      	pop	{r7}
 8015858:	4770      	bx	lr

0801585a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801585a:	b480      	push	{r7}
 801585c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801585e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015860:	4618      	mov	r0, r3
 8015862:	46bd      	mov	sp, r7
 8015864:	bc80      	pop	{r7}
 8015866:	4770      	bx	lr

08015868 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015870:	bf00      	nop
 8015872:	370c      	adds	r7, #12
 8015874:	46bd      	mov	sp, r7
 8015876:	bc80      	pop	{r7}
 8015878:	4770      	bx	lr

0801587a <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801587a:	b480      	push	{r7}
 801587c:	b083      	sub	sp, #12
 801587e:	af00      	add	r7, sp, #0
 8015880:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015882:	bf00      	nop
 8015884:	370c      	adds	r7, #12
 8015886:	46bd      	mov	sp, r7
 8015888:	bc80      	pop	{r7}
 801588a:	4770      	bx	lr

0801588c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015894:	bf00      	nop
 8015896:	370c      	adds	r7, #12
 8015898:	46bd      	mov	sp, r7
 801589a:	bc80      	pop	{r7}
 801589c:	4770      	bx	lr

0801589e <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801589e:	b480      	push	{r7}
 80158a0:	b083      	sub	sp, #12
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
 80158a6:	460b      	mov	r3, r1
 80158a8:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80158aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bc80      	pop	{r7}
 80158b4:	4770      	bx	lr

080158b6 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80158b6:	b480      	push	{r7}
 80158b8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158bc:	4618      	mov	r0, r3
 80158be:	46bd      	mov	sp, r7
 80158c0:	bc80      	pop	{r7}
 80158c2:	4770      	bx	lr

080158c4 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80158c4:	b480      	push	{r7}
 80158c6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ca:	4618      	mov	r0, r3
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bc80      	pop	{r7}
 80158d0:	4770      	bx	lr

080158d2 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80158d2:	b480      	push	{r7}
 80158d4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158d6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158d8:	4618      	mov	r0, r3
 80158da:	46bd      	mov	sp, r7
 80158dc:	bc80      	pop	{r7}
 80158de:	4770      	bx	lr

080158e0 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80158e0:	b480      	push	{r7}
 80158e2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bc80      	pop	{r7}
 80158ec:	4770      	bx	lr

080158ee <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80158ee:	b480      	push	{r7}
 80158f0:	b083      	sub	sp, #12
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	4603      	mov	r3, r0
 80158f6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f8:	bf00      	nop
 80158fa:	370c      	adds	r7, #12
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bc80      	pop	{r7}
 8015900:	4770      	bx	lr

08015902 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015902:	b480      	push	{r7}
 8015904:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015906:	bf00      	nop
 8015908:	46bd      	mov	sp, r7
 801590a:	bc80      	pop	{r7}
 801590c:	4770      	bx	lr

0801590e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801590e:	b480      	push	{r7}
 8015910:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015912:	bf00      	nop
 8015914:	46bd      	mov	sp, r7
 8015916:	bc80      	pop	{r7}
 8015918:	4770      	bx	lr

0801591a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801591a:	b480      	push	{r7}
 801591c:	b083      	sub	sp, #12
 801591e:	af00      	add	r7, sp, #0
 8015920:	4603      	mov	r3, r0
 8015922:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015924:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015926:	4618      	mov	r0, r3
 8015928:	370c      	adds	r7, #12
 801592a:	46bd      	mov	sp, r7
 801592c:	bc80      	pop	{r7}
 801592e:	4770      	bx	lr

08015930 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015930:	b480      	push	{r7}
 8015932:	b083      	sub	sp, #12
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015938:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801593a:	4618      	mov	r0, r3
 801593c:	370c      	adds	r7, #12
 801593e:	46bd      	mov	sp, r7
 8015940:	bc80      	pop	{r7}
 8015942:	4770      	bx	lr

08015944 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801594c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801594e:	4618      	mov	r0, r3
 8015950:	370c      	adds	r7, #12
 8015952:	46bd      	mov	sp, r7
 8015954:	bc80      	pop	{r7}
 8015956:	4770      	bx	lr

08015958 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015958:	b480      	push	{r7}
 801595a:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801595c:	bf00      	nop
 801595e:	46bd      	mov	sp, r7
 8015960:	bc80      	pop	{r7}
 8015962:	4770      	bx	lr

08015964 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015964:	b480      	push	{r7}
 8015966:	b083      	sub	sp, #12
 8015968:	af00      	add	r7, sp, #0
 801596a:	4603      	mov	r3, r0
 801596c:	6039      	str	r1, [r7, #0]
 801596e:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015970:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015972:	4618      	mov	r0, r3
 8015974:	370c      	adds	r7, #12
 8015976:	46bd      	mov	sp, r7
 8015978:	bc80      	pop	{r7}
 801597a:	4770      	bx	lr

0801597c <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	4603      	mov	r3, r0
 8015984:	603a      	str	r2, [r7, #0]
 8015986:	80fb      	strh	r3, [r7, #6]
 8015988:	460b      	mov	r3, r1
 801598a:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801598c:	bf00      	nop
 801598e:	370c      	adds	r7, #12
 8015990:	46bd      	mov	sp, r7
 8015992:	bc80      	pop	{r7}
 8015994:	4770      	bx	lr

08015996 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015996:	b480      	push	{r7}
 8015998:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599a:	bf00      	nop
 801599c:	46bd      	mov	sp, r7
 801599e:	bc80      	pop	{r7}
 80159a0:	4770      	bx	lr

080159a2 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80159a2:	b480      	push	{r7}
 80159a4:	b083      	sub	sp, #12
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80159aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	370c      	adds	r7, #12
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bc80      	pop	{r7}
 80159b4:	4770      	bx	lr

080159b6 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80159b6:	b480      	push	{r7}
 80159b8:	b083      	sub	sp, #12
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80159be:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	370c      	adds	r7, #12
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bc80      	pop	{r7}
 80159c8:	4770      	bx	lr

080159ca <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80159ca:	b480      	push	{r7}
 80159cc:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ce:	bf00      	nop
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bc80      	pop	{r7}
 80159d4:	4770      	bx	lr

080159d6 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80159d6:	b480      	push	{r7}
 80159d8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159da:	bf00      	nop
 80159dc:	46bd      	mov	sp, r7
 80159de:	bc80      	pop	{r7}
 80159e0:	4770      	bx	lr

080159e2 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80159e2:	b480      	push	{r7}
 80159e4:	b085      	sub	sp, #20
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80159ee:	2300      	movs	r3, #0
 80159f0:	81fb      	strh	r3, [r7, #14]
 80159f2:	e00a      	b.n	8015a0a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80159f4:	89fb      	ldrh	r3, [r7, #14]
 80159f6:	68ba      	ldr	r2, [r7, #8]
 80159f8:	4413      	add	r3, r2
 80159fa:	781b      	ldrb	r3, [r3, #0]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d001      	beq.n	8015a04 <IsSlotFree+0x22>
        {
            return false;
 8015a00:	2300      	movs	r3, #0
 8015a02:	e006      	b.n	8015a12 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a04:	89fb      	ldrh	r3, [r7, #14]
 8015a06:	3301      	adds	r3, #1
 8015a08:	81fb      	strh	r3, [r7, #14]
 8015a0a:	89fb      	ldrh	r3, [r7, #14]
 8015a0c:	2b0f      	cmp	r3, #15
 8015a0e:	d9f1      	bls.n	80159f4 <IsSlotFree+0x12>
        }
    }
    return true;
 8015a10:	2301      	movs	r3, #1
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3714      	adds	r7, #20
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bc80      	pop	{r7}
 8015a1a:	4770      	bx	lr

08015a1c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b082      	sub	sp, #8
 8015a20:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015a22:	2300      	movs	r3, #0
 8015a24:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a26:	e007      	b.n	8015a38 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015a28:	79fb      	ldrb	r3, [r7, #7]
 8015a2a:	3301      	adds	r3, #1
 8015a2c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015a2e:	79fb      	ldrb	r3, [r7, #7]
 8015a30:	2b0f      	cmp	r3, #15
 8015a32:	d101      	bne.n	8015a38 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015a34:	2300      	movs	r3, #0
 8015a36:	e012      	b.n	8015a5e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a38:	79fb      	ldrb	r3, [r7, #7]
 8015a3a:	011b      	lsls	r3, r3, #4
 8015a3c:	3308      	adds	r3, #8
 8015a3e:	4a0a      	ldr	r2, [pc, #40]	; (8015a68 <MallocNewMacCommandSlot+0x4c>)
 8015a40:	4413      	add	r3, r2
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7ff ffcd 	bl	80159e2 <IsSlotFree>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	f083 0301 	eor.w	r3, r3, #1
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d1e9      	bne.n	8015a28 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015a54:	79fb      	ldrb	r3, [r7, #7]
 8015a56:	011b      	lsls	r3, r3, #4
 8015a58:	3308      	adds	r3, #8
 8015a5a:	4a03      	ldr	r2, [pc, #12]	; (8015a68 <MallocNewMacCommandSlot+0x4c>)
 8015a5c:	4413      	add	r3, r2
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3708      	adds	r7, #8
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	20001600 	.word	0x20001600

08015a6c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d101      	bne.n	8015a7e <FreeMacCommandSlot+0x12>
    {
        return false;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	e005      	b.n	8015a8a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015a7e:	2210      	movs	r2, #16
 8015a80:	2100      	movs	r1, #0
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f004 fa00 	bl	8019e88 <memset1>

    return true;
 8015a88:	2301      	movs	r3, #1
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3708      	adds	r7, #8
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}

08015a92 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015a92:	b480      	push	{r7}
 8015a94:	b083      	sub	sp, #12
 8015a96:	af00      	add	r7, sp, #0
 8015a98:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d101      	bne.n	8015aa4 <LinkedListInit+0x12>
    {
        return false;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	e006      	b.n	8015ab2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	2200      	movs	r2, #0
 8015aae:	605a      	str	r2, [r3, #4]

    return true;
 8015ab0:	2301      	movs	r3, #1
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	370c      	adds	r7, #12
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bc80      	pop	{r7}
 8015aba:	4770      	bx	lr

08015abc <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015abc:	b480      	push	{r7}
 8015abe:	b083      	sub	sp, #12
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d002      	beq.n	8015ad2 <LinkedListAdd+0x16>
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d101      	bne.n	8015ad6 <LinkedListAdd+0x1a>
    {
        return false;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	e015      	b.n	8015b02 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d102      	bne.n	8015ae4 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	683a      	ldr	r2, [r7, #0]
 8015ae2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d003      	beq.n	8015af4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	685b      	ldr	r3, [r3, #4]
 8015af0:	683a      	ldr	r2, [r7, #0]
 8015af2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2200      	movs	r2, #0
 8015af8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	683a      	ldr	r2, [r7, #0]
 8015afe:	605a      	str	r2, [r3, #4]

    return true;
 8015b00:	2301      	movs	r3, #1
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	370c      	adds	r7, #12
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bc80      	pop	{r7}
 8015b0a:	4770      	bx	lr

08015b0c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	6078      	str	r0, [r7, #4]
 8015b14:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d002      	beq.n	8015b22 <LinkedListGetPrevious+0x16>
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d101      	bne.n	8015b26 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015b22:	2300      	movs	r3, #0
 8015b24:	e016      	b.n	8015b54 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015b2c:	683a      	ldr	r2, [r7, #0]
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d00c      	beq.n	8015b4e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b34:	e002      	b.n	8015b3c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d007      	beq.n	8015b52 <LinkedListGetPrevious+0x46>
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	683a      	ldr	r2, [r7, #0]
 8015b48:	429a      	cmp	r2, r3
 8015b4a:	d1f4      	bne.n	8015b36 <LinkedListGetPrevious+0x2a>
 8015b4c:	e001      	b.n	8015b52 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015b52:	68fb      	ldr	r3, [r7, #12]
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3714      	adds	r7, #20
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bc80      	pop	{r7}
 8015b5c:	4770      	bx	lr

08015b5e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b5e:	b580      	push	{r7, lr}
 8015b60:	b084      	sub	sp, #16
 8015b62:	af00      	add	r7, sp, #0
 8015b64:	6078      	str	r0, [r7, #4]
 8015b66:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d002      	beq.n	8015b74 <LinkedListRemove+0x16>
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d101      	bne.n	8015b78 <LinkedListRemove+0x1a>
    {
        return false;
 8015b74:	2300      	movs	r3, #0
 8015b76:	e020      	b.n	8015bba <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015b78:	6839      	ldr	r1, [r7, #0]
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f7ff ffc6 	bl	8015b0c <LinkedListGetPrevious>
 8015b80:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	d103      	bne.n	8015b94 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	681a      	ldr	r2, [r3, #0]
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	685b      	ldr	r3, [r3, #4]
 8015b98:	683a      	ldr	r2, [r7, #0]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d102      	bne.n	8015ba4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	68fa      	ldr	r2, [r7, #12]
 8015ba2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d003      	beq.n	8015bb2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	681a      	ldr	r2, [r3, #0]
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	601a      	str	r2, [r3, #0]

    return true;
 8015bb8:	2301      	movs	r3, #1
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3710      	adds	r7, #16
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015bc2:	b480      	push	{r7}
 8015bc4:	b083      	sub	sp, #12
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	4603      	mov	r3, r0
 8015bca:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015bcc:	79fb      	ldrb	r3, [r7, #7]
 8015bce:	2b05      	cmp	r3, #5
 8015bd0:	d004      	beq.n	8015bdc <IsSticky+0x1a>
 8015bd2:	2b05      	cmp	r3, #5
 8015bd4:	db04      	blt.n	8015be0 <IsSticky+0x1e>
 8015bd6:	3b08      	subs	r3, #8
 8015bd8:	2b02      	cmp	r3, #2
 8015bda:	d801      	bhi.n	8015be0 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	e000      	b.n	8015be2 <IsSticky+0x20>
        default:
            return false;
 8015be0:	2300      	movs	r3, #0
    }
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	370c      	adds	r7, #12
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bc80      	pop	{r7}
 8015bea:	4770      	bx	lr

08015bec <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015bec:	b480      	push	{r7}
 8015bee:	b083      	sub	sp, #12
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015bf6:	2300      	movs	r3, #0
    }
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	370c      	adds	r7, #12
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bc80      	pop	{r7}
 8015c00:	4770      	bx	lr
	...

08015c04 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015c08:	22fc      	movs	r2, #252	; 0xfc
 8015c0a:	2100      	movs	r1, #0
 8015c0c:	4804      	ldr	r0, [pc, #16]	; (8015c20 <LoRaMacCommandsInit+0x1c>)
 8015c0e:	f004 f93b 	bl	8019e88 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015c12:	4803      	ldr	r0, [pc, #12]	; (8015c20 <LoRaMacCommandsInit+0x1c>)
 8015c14:	f7ff ff3d 	bl	8015a92 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c18:	2300      	movs	r3, #0
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	bd80      	pop	{r7, pc}
 8015c1e:	bf00      	nop
 8015c20:	20001600 	.word	0x20001600

08015c24 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b086      	sub	sp, #24
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	60b9      	str	r1, [r7, #8]
 8015c2e:	607a      	str	r2, [r7, #4]
 8015c30:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d101      	bne.n	8015c3c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c38:	2301      	movs	r3, #1
 8015c3a:	e03b      	b.n	8015cb4 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015c3c:	f7ff feee 	bl	8015a1c <MallocNewMacCommandSlot>
 8015c40:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015c48:	2302      	movs	r3, #2
 8015c4a:	e033      	b.n	8015cb4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015c4c:	6979      	ldr	r1, [r7, #20]
 8015c4e:	481b      	ldr	r0, [pc, #108]	; (8015cbc <LoRaMacCommandsAddCmd+0x98>)
 8015c50:	f7ff ff34 	bl	8015abc <LinkedListAdd>
 8015c54:	4603      	mov	r3, r0
 8015c56:	f083 0301 	eor.w	r3, r3, #1
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d001      	beq.n	8015c64 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015c60:	2305      	movs	r3, #5
 8015c62:	e027      	b.n	8015cb4 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015c64:	697b      	ldr	r3, [r7, #20]
 8015c66:	7bfa      	ldrb	r2, [r7, #15]
 8015c68:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	687a      	ldr	r2, [r7, #4]
 8015c6e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	3305      	adds	r3, #5
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	b292      	uxth	r2, r2
 8015c78:	68b9      	ldr	r1, [r7, #8]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f004 f8c9 	bl	8019e12 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015c80:	7bfb      	ldrb	r3, [r7, #15]
 8015c82:	4618      	mov	r0, r3
 8015c84:	f7ff ff9d 	bl	8015bc2 <IsSticky>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015c90:	7bfb      	ldrb	r3, [r7, #15]
 8015c92:	4618      	mov	r0, r3
 8015c94:	f7ff ffaa 	bl	8015bec <IsConfirmationRequired>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	697b      	ldr	r3, [r7, #20]
 8015c9e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015ca0:	4b06      	ldr	r3, [pc, #24]	; (8015cbc <LoRaMacCommandsAddCmd+0x98>)
 8015ca2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	4413      	add	r3, r2
 8015caa:	3301      	adds	r3, #1
 8015cac:	4a03      	ldr	r2, [pc, #12]	; (8015cbc <LoRaMacCommandsAddCmd+0x98>)
 8015cae:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015cb2:	2300      	movs	r3, #0
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3718      	adds	r7, #24
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	20001600 	.word	0x20001600

08015cc0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b082      	sub	sp, #8
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e021      	b.n	8015d16 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015cd2:	6879      	ldr	r1, [r7, #4]
 8015cd4:	4812      	ldr	r0, [pc, #72]	; (8015d20 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cd6:	f7ff ff42 	bl	8015b5e <LinkedListRemove>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	f083 0301 	eor.w	r3, r3, #1
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d001      	beq.n	8015cea <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015ce6:	2303      	movs	r3, #3
 8015ce8:	e015      	b.n	8015d16 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015cea:	4b0d      	ldr	r3, [pc, #52]	; (8015d20 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cec:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	689b      	ldr	r3, [r3, #8]
 8015cf4:	1ad3      	subs	r3, r2, r3
 8015cf6:	3b01      	subs	r3, #1
 8015cf8:	4a09      	ldr	r2, [pc, #36]	; (8015d20 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cfa:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ff feb4 	bl	8015a6c <FreeMacCommandSlot>
 8015d04:	4603      	mov	r3, r0
 8015d06:	f083 0301 	eor.w	r3, r3, #1
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d001      	beq.n	8015d14 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d10:	2305      	movs	r3, #5
 8015d12:	e000      	b.n	8015d16 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d14:	2300      	movs	r3, #0
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3708      	adds	r7, #8
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	20001600 	.word	0x20001600

08015d24 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015d24:	b480      	push	{r7}
 8015d26:	b085      	sub	sp, #20
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	6039      	str	r1, [r7, #0]
 8015d2e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d30:	4b0e      	ldr	r3, [pc, #56]	; (8015d6c <LoRaMacCommandsGetCmd+0x48>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d36:	e002      	b.n	8015d3e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d004      	beq.n	8015d4e <LoRaMacCommandsGetCmd+0x2a>
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	791b      	ldrb	r3, [r3, #4]
 8015d48:	79fa      	ldrb	r2, [r7, #7]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d1f4      	bne.n	8015d38 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	68fa      	ldr	r2, [r7, #12]
 8015d52:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d101      	bne.n	8015d5e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d5a:	2303      	movs	r3, #3
 8015d5c:	e000      	b.n	8015d60 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015d5e:	2300      	movs	r3, #0
}
 8015d60:	4618      	mov	r0, r3
 8015d62:	3714      	adds	r7, #20
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bc80      	pop	{r7}
 8015d68:	4770      	bx	lr
 8015d6a:	bf00      	nop
 8015d6c:	20001600 	.word	0x20001600

08015d70 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b082      	sub	sp, #8
 8015d74:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d76:	4b0f      	ldr	r3, [pc, #60]	; (8015db4 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d7c:	e012      	b.n	8015da4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	7b1b      	ldrb	r3, [r3, #12]
 8015d82:	f083 0301 	eor.w	r3, r3, #1
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d008      	beq.n	8015d9e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f7ff ff94 	bl	8015cc0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	607b      	str	r3, [r7, #4]
 8015d9c:	e002      	b.n	8015da4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1e9      	bne.n	8015d7e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	20001600 	.word	0x20001600

08015db8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015dbe:	4b13      	ldr	r3, [pc, #76]	; (8015e0c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015dc4:	e01a      	b.n	8015dfc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	791b      	ldrb	r3, [r3, #4]
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f7ff fef6 	bl	8015bc2 <IsSticky>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00d      	beq.n	8015df8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	791b      	ldrb	r3, [r3, #4]
 8015de0:	4618      	mov	r0, r3
 8015de2:	f7ff ff03 	bl	8015bec <IsConfirmationRequired>
 8015de6:	4603      	mov	r3, r0
 8015de8:	f083 0301 	eor.w	r3, r3, #1
 8015dec:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d002      	beq.n	8015df8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f7ff ff64 	bl	8015cc0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d1e1      	bne.n	8015dc6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e02:	2300      	movs	r3, #0
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3708      	adds	r7, #8
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	20001600 	.word	0x20001600

08015e10 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015e10:	b480      	push	{r7}
 8015e12:	b083      	sub	sp, #12
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d101      	bne.n	8015e22 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	e005      	b.n	8015e2e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015e22:	4b05      	ldr	r3, [pc, #20]	; (8015e38 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015e24:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e2c:	2300      	movs	r3, #0
}
 8015e2e:	4618      	mov	r0, r3
 8015e30:	370c      	adds	r7, #12
 8015e32:	46bd      	mov	sp, r7
 8015e34:	bc80      	pop	{r7}
 8015e36:	4770      	bx	lr
 8015e38:	20001600 	.word	0x20001600

08015e3c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b088      	sub	sp, #32
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	60f8      	str	r0, [r7, #12]
 8015e44:	60b9      	str	r1, [r7, #8]
 8015e46:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e48:	4b25      	ldr	r3, [pc, #148]	; (8015ee0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d002      	beq.n	8015e5e <LoRaMacCommandsSerializeCmds+0x22>
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d126      	bne.n	8015eac <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e5e:	2301      	movs	r3, #1
 8015e60:	e039      	b.n	8015ed6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e62:	7efb      	ldrb	r3, [r7, #27]
 8015e64:	68fa      	ldr	r2, [r7, #12]
 8015e66:	1ad2      	subs	r2, r2, r3
 8015e68:	69fb      	ldr	r3, [r7, #28]
 8015e6a:	689b      	ldr	r3, [r3, #8]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d320      	bcc.n	8015eb4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015e72:	7efb      	ldrb	r3, [r7, #27]
 8015e74:	1c5a      	adds	r2, r3, #1
 8015e76:	76fa      	strb	r2, [r7, #27]
 8015e78:	461a      	mov	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	4413      	add	r3, r2
 8015e7e:	69fa      	ldr	r2, [r7, #28]
 8015e80:	7912      	ldrb	r2, [r2, #4]
 8015e82:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e84:	7efb      	ldrb	r3, [r7, #27]
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	18d0      	adds	r0, r2, r3
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	1d59      	adds	r1, r3, #5
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	689b      	ldr	r3, [r3, #8]
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	461a      	mov	r2, r3
 8015e96:	f003 ffbc 	bl	8019e12 <memcpy1>
            itr += curElement->PayloadSize;
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	689b      	ldr	r3, [r3, #8]
 8015e9e:	b2da      	uxtb	r2, r3
 8015ea0:	7efb      	ldrb	r3, [r7, #27]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015ea6:	69fb      	ldr	r3, [r7, #28]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d1d7      	bne.n	8015e62 <LoRaMacCommandsSerializeCmds+0x26>
 8015eb2:	e009      	b.n	8015ec8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015eb4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015eb6:	e007      	b.n	8015ec8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015eb8:	69fb      	ldr	r3, [r7, #28]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015ebe:	69f8      	ldr	r0, [r7, #28]
 8015ec0:	f7ff fefe 	bl	8015cc0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d1f4      	bne.n	8015eb8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015ece:	68b8      	ldr	r0, [r7, #8]
 8015ed0:	f7ff ff9e 	bl	8015e10 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015ed4:	2300      	movs	r3, #0
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3720      	adds	r7, #32
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop
 8015ee0:	20001600 	.word	0x20001600

08015ee4 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	b085      	sub	sp, #20
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	4603      	mov	r3, r0
 8015eec:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015eee:	2300      	movs	r3, #0
 8015ef0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015ef2:	79fb      	ldrb	r3, [r7, #7]
 8015ef4:	3b02      	subs	r3, #2
 8015ef6:	2b11      	cmp	r3, #17
 8015ef8:	d850      	bhi.n	8015f9c <LoRaMacCommandsGetCmdSize+0xb8>
 8015efa:	a201      	add	r2, pc, #4	; (adr r2, 8015f00 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f00:	08015f49 	.word	0x08015f49
 8015f04:	08015f4f 	.word	0x08015f4f
 8015f08:	08015f55 	.word	0x08015f55
 8015f0c:	08015f5b 	.word	0x08015f5b
 8015f10:	08015f61 	.word	0x08015f61
 8015f14:	08015f67 	.word	0x08015f67
 8015f18:	08015f6d 	.word	0x08015f6d
 8015f1c:	08015f73 	.word	0x08015f73
 8015f20:	08015f79 	.word	0x08015f79
 8015f24:	08015f9d 	.word	0x08015f9d
 8015f28:	08015f9d 	.word	0x08015f9d
 8015f2c:	08015f7f 	.word	0x08015f7f
 8015f30:	08015f9d 	.word	0x08015f9d
 8015f34:	08015f9d 	.word	0x08015f9d
 8015f38:	08015f85 	.word	0x08015f85
 8015f3c:	08015f8b 	.word	0x08015f8b
 8015f40:	08015f91 	.word	0x08015f91
 8015f44:	08015f97 	.word	0x08015f97
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015f48:	2303      	movs	r3, #3
 8015f4a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f4c:	e027      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015f4e:	2305      	movs	r3, #5
 8015f50:	73fb      	strb	r3, [r7, #15]
            break;
 8015f52:	e024      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015f54:	2302      	movs	r3, #2
 8015f56:	73fb      	strb	r3, [r7, #15]
            break;
 8015f58:	e021      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015f5a:	2305      	movs	r3, #5
 8015f5c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f5e:	e01e      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015f60:	2301      	movs	r3, #1
 8015f62:	73fb      	strb	r3, [r7, #15]
            break;
 8015f64:	e01b      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015f66:	2306      	movs	r3, #6
 8015f68:	73fb      	strb	r3, [r7, #15]
            break;
 8015f6a:	e018      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015f6c:	2302      	movs	r3, #2
 8015f6e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f70:	e015      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015f72:	2302      	movs	r3, #2
 8015f74:	73fb      	strb	r3, [r7, #15]
            break;
 8015f76:	e012      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015f78:	2305      	movs	r3, #5
 8015f7a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f7c:	e00f      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015f7e:	2306      	movs	r3, #6
 8015f80:	73fb      	strb	r3, [r7, #15]
            break;
 8015f82:	e00c      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015f84:	2301      	movs	r3, #1
 8015f86:	73fb      	strb	r3, [r7, #15]
            break;
 8015f88:	e009      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015f8a:	2305      	movs	r3, #5
 8015f8c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f8e:	e006      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015f90:	2304      	movs	r3, #4
 8015f92:	73fb      	strb	r3, [r7, #15]
            break;
 8015f94:	e003      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015f96:	2304      	movs	r3, #4
 8015f98:	73fb      	strb	r3, [r7, #15]
            break;
 8015f9a:	e000      	b.n	8015f9e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015f9c:	bf00      	nop
        }
    }
    return cidSize;
 8015f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3714      	adds	r7, #20
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bc80      	pop	{r7}
 8015fa8:	4770      	bx	lr
 8015faa:	bf00      	nop

08015fac <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015fac:	b480      	push	{r7}
 8015fae:	b083      	sub	sp, #12
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	4a07      	ldr	r2, [pc, #28]	; (8015fd4 <IncreaseBufferPointer+0x28>)
 8015fb8:	4293      	cmp	r3, r2
 8015fba:	d102      	bne.n	8015fc2 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015fbc:	4b06      	ldr	r3, [pc, #24]	; (8015fd8 <IncreaseBufferPointer+0x2c>)
 8015fbe:	607b      	str	r3, [r7, #4]
 8015fc0:	e002      	b.n	8015fc8 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	3304      	adds	r3, #4
 8015fc6:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015fc8:	687b      	ldr	r3, [r7, #4]
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bc80      	pop	{r7}
 8015fd2:	4770      	bx	lr
 8015fd4:	20001718 	.word	0x20001718
 8015fd8:	20001708 	.word	0x20001708

08015fdc <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015fe6:	79fb      	ldrb	r3, [r7, #7]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d101      	bne.n	8015ff0 <IsListEmpty+0x14>
    {
        return true;
 8015fec:	2301      	movs	r3, #1
 8015fee:	e000      	b.n	8015ff2 <IsListEmpty+0x16>
    }
    return false;
 8015ff0:	2300      	movs	r3, #0
}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	370c      	adds	r7, #12
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bc80      	pop	{r7}
 8015ffa:	4770      	bx	lr

08015ffc <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b083      	sub	sp, #12
 8016000:	af00      	add	r7, sp, #0
 8016002:	4603      	mov	r3, r0
 8016004:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8016006:	79fb      	ldrb	r3, [r7, #7]
 8016008:	2b04      	cmp	r3, #4
 801600a:	d901      	bls.n	8016010 <IsListFull+0x14>
    {
        return true;
 801600c:	2301      	movs	r3, #1
 801600e:	e000      	b.n	8016012 <IsListFull+0x16>
    }
    return false;
 8016010:	2300      	movs	r3, #0
}
 8016012:	4618      	mov	r0, r3
 8016014:	370c      	adds	r7, #12
 8016016:	46bd      	mov	sp, r7
 8016018:	bc80      	pop	{r7}
 801601a:	4770      	bx	lr

0801601c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b086      	sub	sp, #24
 8016020:	af00      	add	r7, sp, #0
 8016022:	4603      	mov	r3, r0
 8016024:	60b9      	str	r1, [r7, #8]
 8016026:	607a      	str	r2, [r7, #4]
 8016028:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801602e:	4b13      	ldr	r3, [pc, #76]	; (801607c <GetElement+0x60>)
 8016030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016034:	4618      	mov	r0, r3
 8016036:	f7ff ffd1 	bl	8015fdc <IsListEmpty>
 801603a:	4603      	mov	r3, r0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d001      	beq.n	8016044 <GetElement+0x28>
    {
        return NULL;
 8016040:	2300      	movs	r3, #0
 8016042:	e017      	b.n	8016074 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016044:	2300      	movs	r3, #0
 8016046:	74fb      	strb	r3, [r7, #19]
 8016048:	e00d      	b.n	8016066 <GetElement+0x4a>
    {
        if( element->Request == request )
 801604a:	697b      	ldr	r3, [r7, #20]
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	7bfa      	ldrb	r2, [r7, #15]
 8016050:	429a      	cmp	r2, r3
 8016052:	d101      	bne.n	8016058 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016054:	697b      	ldr	r3, [r7, #20]
 8016056:	e00d      	b.n	8016074 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016058:	6978      	ldr	r0, [r7, #20]
 801605a:	f7ff ffa7 	bl	8015fac <IncreaseBufferPointer>
 801605e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016060:	7cfb      	ldrb	r3, [r7, #19]
 8016062:	3301      	adds	r3, #1
 8016064:	74fb      	strb	r3, [r7, #19]
 8016066:	4b05      	ldr	r3, [pc, #20]	; (801607c <GetElement+0x60>)
 8016068:	f893 3020 	ldrb.w	r3, [r3, #32]
 801606c:	7cfa      	ldrb	r2, [r7, #19]
 801606e:	429a      	cmp	r2, r3
 8016070:	d3eb      	bcc.n	801604a <GetElement+0x2e>
    }

    return NULL;
 8016072:	2300      	movs	r3, #0
}
 8016074:	4618      	mov	r0, r3
 8016076:	3718      	adds	r7, #24
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	200016fc 	.word	0x200016fc

08016080 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8016088:	4a0c      	ldr	r2, [pc, #48]	; (80160bc <LoRaMacConfirmQueueInit+0x3c>)
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801608e:	4b0b      	ldr	r3, [pc, #44]	; (80160bc <LoRaMacConfirmQueueInit+0x3c>)
 8016090:	2200      	movs	r2, #0
 8016092:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016096:	4b09      	ldr	r3, [pc, #36]	; (80160bc <LoRaMacConfirmQueueInit+0x3c>)
 8016098:	4a09      	ldr	r2, [pc, #36]	; (80160c0 <LoRaMacConfirmQueueInit+0x40>)
 801609a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801609c:	4b07      	ldr	r3, [pc, #28]	; (80160bc <LoRaMacConfirmQueueInit+0x3c>)
 801609e:	4a08      	ldr	r2, [pc, #32]	; (80160c0 <LoRaMacConfirmQueueInit+0x40>)
 80160a0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80160a2:	2214      	movs	r2, #20
 80160a4:	21ff      	movs	r1, #255	; 0xff
 80160a6:	4806      	ldr	r0, [pc, #24]	; (80160c0 <LoRaMacConfirmQueueInit+0x40>)
 80160a8:	f003 feee 	bl	8019e88 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80160ac:	4b03      	ldr	r3, [pc, #12]	; (80160bc <LoRaMacConfirmQueueInit+0x3c>)
 80160ae:	2201      	movs	r2, #1
 80160b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80160b4:	bf00      	nop
 80160b6:	3708      	adds	r7, #8
 80160b8:	46bd      	mov	sp, r7
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	200016fc 	.word	0x200016fc
 80160c0:	20001708 	.word	0x20001708

080160c4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160cc:	4b19      	ldr	r3, [pc, #100]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 80160ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160d2:	4618      	mov	r0, r3
 80160d4:	f7ff ff92 	bl	8015ffc <IsListFull>
 80160d8:	4603      	mov	r3, r0
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d001      	beq.n	80160e2 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80160de:	2300      	movs	r3, #0
 80160e0:	e023      	b.n	801612a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80160e2:	4b14      	ldr	r3, [pc, #80]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 80160e4:	689b      	ldr	r3, [r3, #8]
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	7812      	ldrb	r2, [r2, #0]
 80160ea:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80160ec:	4b11      	ldr	r3, [pc, #68]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 80160ee:	689b      	ldr	r3, [r3, #8]
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	7852      	ldrb	r2, [r2, #1]
 80160f4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80160f6:	4b0f      	ldr	r3, [pc, #60]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 80160f8:	689b      	ldr	r3, [r3, #8]
 80160fa:	687a      	ldr	r2, [r7, #4]
 80160fc:	78d2      	ldrb	r2, [r2, #3]
 80160fe:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016100:	4b0c      	ldr	r3, [pc, #48]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 8016102:	689b      	ldr	r3, [r3, #8]
 8016104:	2200      	movs	r2, #0
 8016106:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8016108:	4b0a      	ldr	r3, [pc, #40]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 801610a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801610e:	3301      	adds	r3, #1
 8016110:	b2da      	uxtb	r2, r3
 8016112:	4b08      	ldr	r3, [pc, #32]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 8016114:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016118:	4b06      	ldr	r3, [pc, #24]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	4618      	mov	r0, r3
 801611e:	f7ff ff45 	bl	8015fac <IncreaseBufferPointer>
 8016122:	4603      	mov	r3, r0
 8016124:	4a03      	ldr	r2, [pc, #12]	; (8016134 <LoRaMacConfirmQueueAdd+0x70>)
 8016126:	6093      	str	r3, [r2, #8]

    return true;
 8016128:	2301      	movs	r3, #1
}
 801612a:	4618      	mov	r0, r3
 801612c:	3708      	adds	r7, #8
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	200016fc 	.word	0x200016fc

08016138 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016138:	b580      	push	{r7, lr}
 801613a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801613c:	4b0e      	ldr	r3, [pc, #56]	; (8016178 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801613e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016142:	4618      	mov	r0, r3
 8016144:	f7ff ff4a 	bl	8015fdc <IsListEmpty>
 8016148:	4603      	mov	r3, r0
 801614a:	2b00      	cmp	r3, #0
 801614c:	d001      	beq.n	8016152 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801614e:	2300      	movs	r3, #0
 8016150:	e010      	b.n	8016174 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016152:	4b09      	ldr	r3, [pc, #36]	; (8016178 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016158:	3b01      	subs	r3, #1
 801615a:	b2da      	uxtb	r2, r3
 801615c:	4b06      	ldr	r3, [pc, #24]	; (8016178 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801615e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016162:	4b05      	ldr	r3, [pc, #20]	; (8016178 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	4618      	mov	r0, r3
 8016168:	f7ff ff20 	bl	8015fac <IncreaseBufferPointer>
 801616c:	4603      	mov	r3, r0
 801616e:	4a02      	ldr	r2, [pc, #8]	; (8016178 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016170:	6053      	str	r3, [r2, #4]

    return true;
 8016172:	2301      	movs	r3, #1
}
 8016174:	4618      	mov	r0, r3
 8016176:	bd80      	pop	{r7, pc}
 8016178:	200016fc 	.word	0x200016fc

0801617c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801617c:	b580      	push	{r7, lr}
 801617e:	b084      	sub	sp, #16
 8016180:	af00      	add	r7, sp, #0
 8016182:	4603      	mov	r3, r0
 8016184:	460a      	mov	r2, r1
 8016186:	71fb      	strb	r3, [r7, #7]
 8016188:	4613      	mov	r3, r2
 801618a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801618c:	2300      	movs	r3, #0
 801618e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016190:	4b10      	ldr	r3, [pc, #64]	; (80161d4 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016196:	4618      	mov	r0, r3
 8016198:	f7ff ff20 	bl	8015fdc <IsListEmpty>
 801619c:	4603      	mov	r3, r0
 801619e:	f083 0301 	eor.w	r3, r3, #1
 80161a2:	b2db      	uxtb	r3, r3
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d011      	beq.n	80161cc <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161a8:	4b0a      	ldr	r3, [pc, #40]	; (80161d4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161aa:	6859      	ldr	r1, [r3, #4]
 80161ac:	4b09      	ldr	r3, [pc, #36]	; (80161d4 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161ae:	689a      	ldr	r2, [r3, #8]
 80161b0:	79bb      	ldrb	r3, [r7, #6]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f7ff ff32 	bl	801601c <GetElement>
 80161b8:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d005      	beq.n	80161cc <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	79fa      	ldrb	r2, [r7, #7]
 80161c4:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2201      	movs	r2, #1
 80161ca:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80161cc:	bf00      	nop
 80161ce:	3710      	adds	r7, #16
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}
 80161d4:	200016fc 	.word	0x200016fc

080161d8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b084      	sub	sp, #16
 80161dc:	af00      	add	r7, sp, #0
 80161de:	4603      	mov	r3, r0
 80161e0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80161e2:	2300      	movs	r3, #0
 80161e4:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161e6:	4b10      	ldr	r3, [pc, #64]	; (8016228 <LoRaMacConfirmQueueGetStatus+0x50>)
 80161e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161ec:	4618      	mov	r0, r3
 80161ee:	f7ff fef5 	bl	8015fdc <IsListEmpty>
 80161f2:	4603      	mov	r3, r0
 80161f4:	f083 0301 	eor.w	r3, r3, #1
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d00e      	beq.n	801621c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161fe:	4b0a      	ldr	r3, [pc, #40]	; (8016228 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016200:	6859      	ldr	r1, [r3, #4]
 8016202:	4b09      	ldr	r3, [pc, #36]	; (8016228 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016204:	689a      	ldr	r2, [r3, #8]
 8016206:	79fb      	ldrb	r3, [r7, #7]
 8016208:	4618      	mov	r0, r3
 801620a:	f7ff ff07 	bl	801601c <GetElement>
 801620e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d002      	beq.n	801621c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	785b      	ldrb	r3, [r3, #1]
 801621a:	e000      	b.n	801621e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801621c:	2301      	movs	r3, #1
}
 801621e:	4618      	mov	r0, r3
 8016220:	3710      	adds	r7, #16
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}
 8016226:	bf00      	nop
 8016228:	200016fc 	.word	0x200016fc

0801622c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af00      	add	r7, sp, #0
 8016232:	4603      	mov	r3, r0
 8016234:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016236:	4b16      	ldr	r3, [pc, #88]	; (8016290 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801623c:	4a14      	ldr	r2, [pc, #80]	; (8016290 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801623e:	79fb      	ldrb	r3, [r7, #7]
 8016240:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016244:	4b12      	ldr	r3, [pc, #72]	; (8016290 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016246:	f893 3020 	ldrb.w	r3, [r3, #32]
 801624a:	4618      	mov	r0, r3
 801624c:	f7ff fec6 	bl	8015fdc <IsListEmpty>
 8016250:	4603      	mov	r3, r0
 8016252:	f083 0301 	eor.w	r3, r3, #1
 8016256:	b2db      	uxtb	r3, r3
 8016258:	2b00      	cmp	r3, #0
 801625a:	d015      	beq.n	8016288 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	79fa      	ldrb	r2, [r7, #7]
 8016260:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	78db      	ldrb	r3, [r3, #3]
 8016266:	f083 0301 	eor.w	r3, r3, #1
 801626a:	b2db      	uxtb	r3, r3
 801626c:	2b00      	cmp	r3, #0
 801626e:	d002      	beq.n	8016276 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2201      	movs	r2, #1
 8016274:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	f7ff fe98 	bl	8015fac <IncreaseBufferPointer>
 801627c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801627e:	4b04      	ldr	r3, [pc, #16]	; (8016290 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016280:	689b      	ldr	r3, [r3, #8]
 8016282:	68fa      	ldr	r2, [r7, #12]
 8016284:	429a      	cmp	r2, r3
 8016286:	d1e9      	bne.n	801625c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016288:	bf00      	nop
 801628a:	3710      	adds	r7, #16
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	200016fc 	.word	0x200016fc

08016294 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	4603      	mov	r3, r0
 801629c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801629e:	4b09      	ldr	r3, [pc, #36]	; (80162c4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162a0:	6859      	ldr	r1, [r3, #4]
 80162a2:	4b08      	ldr	r3, [pc, #32]	; (80162c4 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162a4:	689a      	ldr	r2, [r3, #8]
 80162a6:	79fb      	ldrb	r3, [r7, #7]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7ff feb7 	bl	801601c <GetElement>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d001      	beq.n	80162b8 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80162b4:	2301      	movs	r3, #1
 80162b6:	e000      	b.n	80162ba <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80162b8:	2300      	movs	r3, #0
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3708      	adds	r7, #8
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	200016fc 	.word	0x200016fc

080162c8 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b084      	sub	sp, #16
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80162d0:	4b25      	ldr	r3, [pc, #148]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162d6:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80162d8:	2300      	movs	r3, #0
 80162da:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80162dc:	f107 0308 	add.w	r3, r7, #8
 80162e0:	2204      	movs	r2, #4
 80162e2:	2100      	movs	r1, #0
 80162e4:	4618      	mov	r0, r3
 80162e6:	f003 fdcf 	bl	8019e88 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80162ea:	2300      	movs	r3, #0
 80162ec:	73fb      	strb	r3, [r7, #15]
 80162ee:	e032      	b.n	8016356 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80162f0:	4b1d      	ldr	r3, [pc, #116]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	781a      	ldrb	r2, [r3, #0]
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80162fa:	4b1b      	ldr	r3, [pc, #108]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	785a      	ldrb	r2, [r3, #1]
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016304:	4b18      	ldr	r3, [pc, #96]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016306:	685b      	ldr	r3, [r3, #4]
 8016308:	789b      	ldrb	r3, [r3, #2]
 801630a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801630c:	7b7b      	ldrb	r3, [r7, #13]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d005      	beq.n	801631e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016312:	4b15      	ldr	r3, [pc, #84]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	689b      	ldr	r3, [r3, #8]
 8016318:	6878      	ldr	r0, [r7, #4]
 801631a:	4798      	blx	r3
 801631c:	e00b      	b.n	8016336 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801631e:	4b12      	ldr	r3, [pc, #72]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016320:	685b      	ldr	r3, [r3, #4]
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016326:	4b10      	ldr	r3, [pc, #64]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016328:	685b      	ldr	r3, [r3, #4]
 801632a:	785b      	ldrb	r3, [r3, #1]
 801632c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801632e:	4b0e      	ldr	r3, [pc, #56]	; (8016368 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016330:	685b      	ldr	r3, [r3, #4]
 8016332:	78db      	ldrb	r3, [r3, #3]
 8016334:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016336:	f7ff feff 	bl	8016138 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801633a:	7b7b      	ldrb	r3, [r7, #13]
 801633c:	f083 0301 	eor.w	r3, r3, #1
 8016340:	b2db      	uxtb	r3, r3
 8016342:	2b00      	cmp	r3, #0
 8016344:	d004      	beq.n	8016350 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016346:	f107 0308 	add.w	r3, r7, #8
 801634a:	4618      	mov	r0, r3
 801634c:	f7ff feba 	bl	80160c4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016350:	7bfb      	ldrb	r3, [r7, #15]
 8016352:	3301      	adds	r3, #1
 8016354:	73fb      	strb	r3, [r7, #15]
 8016356:	7bfa      	ldrb	r2, [r7, #15]
 8016358:	7bbb      	ldrb	r3, [r7, #14]
 801635a:	429a      	cmp	r2, r3
 801635c:	d3c8      	bcc.n	80162f0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801635e:	bf00      	nop
 8016360:	bf00      	nop
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	200016fc 	.word	0x200016fc

0801636c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801636c:	b480      	push	{r7}
 801636e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016370:	4b03      	ldr	r3, [pc, #12]	; (8016380 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016372:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016376:	4618      	mov	r0, r3
 8016378:	46bd      	mov	sp, r7
 801637a:	bc80      	pop	{r7}
 801637c:	4770      	bx	lr
 801637e:	bf00      	nop
 8016380:	200016fc 	.word	0x200016fc

08016384 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016388:	4b06      	ldr	r3, [pc, #24]	; (80163a4 <LoRaMacConfirmQueueIsFull+0x20>)
 801638a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801638e:	4618      	mov	r0, r3
 8016390:	f7ff fe34 	bl	8015ffc <IsListFull>
 8016394:	4603      	mov	r3, r0
 8016396:	2b00      	cmp	r3, #0
 8016398:	d001      	beq.n	801639e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801639a:	2301      	movs	r3, #1
 801639c:	e000      	b.n	80163a0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801639e:	2300      	movs	r3, #0
    }
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	bd80      	pop	{r7, pc}
 80163a4:	200016fc 	.word	0x200016fc

080163a8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b08e      	sub	sp, #56	; 0x38
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	60f8      	str	r0, [r7, #12]
 80163b0:	607b      	str	r3, [r7, #4]
 80163b2:	460b      	mov	r3, r1
 80163b4:	817b      	strh	r3, [r7, #10]
 80163b6:	4613      	mov	r3, r2
 80163b8:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d101      	bne.n	80163c4 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163c0:	230a      	movs	r3, #10
 80163c2:	e086      	b.n	80164d2 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80163c4:	2300      	movs	r3, #0
 80163c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80163ca:	2301      	movs	r3, #1
 80163cc:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80163ce:	2300      	movs	r3, #0
 80163d0:	623b      	str	r3, [r7, #32]
 80163d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163d6:	2200      	movs	r2, #0
 80163d8:	601a      	str	r2, [r3, #0]
 80163da:	605a      	str	r2, [r3, #4]
 80163dc:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80163de:	2300      	movs	r3, #0
 80163e0:	613b      	str	r3, [r7, #16]
 80163e2:	f107 0314 	add.w	r3, r7, #20
 80163e6:	2200      	movs	r2, #0
 80163e8:	601a      	str	r2, [r3, #0]
 80163ea:	605a      	str	r2, [r3, #4]
 80163ec:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80163ee:	2301      	movs	r3, #1
 80163f0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80163f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80163f6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	0a1b      	lsrs	r3, r3, #8
 8016402:	b2db      	uxtb	r3, r3
 8016404:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	0c1b      	lsrs	r3, r3, #16
 801640a:	b2db      	uxtb	r3, r3
 801640c:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	0e1b      	lsrs	r3, r3, #24
 8016412:	b2db      	uxtb	r3, r3
 8016414:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8016416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016418:	b2db      	uxtb	r3, r3
 801641a:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801641c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641e:	0a1b      	lsrs	r3, r3, #8
 8016420:	b2db      	uxtb	r3, r3
 8016422:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016426:	0c1b      	lsrs	r3, r3, #16
 8016428:	b2db      	uxtb	r3, r3
 801642a:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 801642c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801642e:	0e1b      	lsrs	r3, r3, #24
 8016430:	b2db      	uxtb	r3, r3
 8016432:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016434:	e048      	b.n	80164c8 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016436:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016438:	b2db      	uxtb	r3, r3
 801643a:	77fb      	strb	r3, [r7, #31]
        ctr++;
 801643c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801643e:	3301      	adds	r3, #1
 8016440:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016442:	f107 0320 	add.w	r3, r7, #32
 8016446:	7a7a      	ldrb	r2, [r7, #9]
 8016448:	f107 0010 	add.w	r0, r7, #16
 801644c:	2110      	movs	r1, #16
 801644e:	f7f8 ff69 	bl	800f324 <SecureElementAesEncrypt>
 8016452:	4603      	mov	r3, r0
 8016454:	2b00      	cmp	r3, #0
 8016456:	d001      	beq.n	801645c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016458:	230f      	movs	r3, #15
 801645a:	e03a      	b.n	80164d2 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801645c:	2300      	movs	r3, #0
 801645e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016462:	e01e      	b.n	80164a2 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016464:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801646c:	4413      	add	r3, r2
 801646e:	461a      	mov	r2, r3
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	4413      	add	r3, r2
 8016474:	7819      	ldrb	r1, [r3, #0]
 8016476:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801647a:	3338      	adds	r3, #56	; 0x38
 801647c:	443b      	add	r3, r7
 801647e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016482:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801648a:	4403      	add	r3, r0
 801648c:	4618      	mov	r0, r3
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	4403      	add	r3, r0
 8016492:	404a      	eors	r2, r1
 8016494:	b2d2      	uxtb	r2, r2
 8016496:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016498:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801649c:	3301      	adds	r3, #1
 801649e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164a6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80164aa:	2a10      	cmp	r2, #16
 80164ac:	bfa8      	it	ge
 80164ae:	2210      	movge	r2, #16
 80164b0:	b212      	sxth	r2, r2
 80164b2:	4293      	cmp	r3, r2
 80164b4:	dbd6      	blt.n	8016464 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80164b6:	897b      	ldrh	r3, [r7, #10]
 80164b8:	3b10      	subs	r3, #16
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80164be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164c2:	3310      	adds	r3, #16
 80164c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80164c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	dcb2      	bgt.n	8016436 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3738      	adds	r7, #56	; 0x38
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}

080164da <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80164da:	b490      	push	{r4, r7}
 80164dc:	b082      	sub	sp, #8
 80164de:	af00      	add	r7, sp, #0
 80164e0:	4604      	mov	r4, r0
 80164e2:	4608      	mov	r0, r1
 80164e4:	4611      	mov	r1, r2
 80164e6:	461a      	mov	r2, r3
 80164e8:	4623      	mov	r3, r4
 80164ea:	80fb      	strh	r3, [r7, #6]
 80164ec:	4603      	mov	r3, r0
 80164ee:	717b      	strb	r3, [r7, #5]
 80164f0:	460b      	mov	r3, r1
 80164f2:	713b      	strb	r3, [r7, #4]
 80164f4:	4613      	mov	r3, r2
 80164f6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80164f8:	69bb      	ldr	r3, [r7, #24]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d101      	bne.n	8016502 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164fe:	230a      	movs	r3, #10
 8016500:	e04e      	b.n	80165a0 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016502:	69bb      	ldr	r3, [r7, #24]
 8016504:	2249      	movs	r2, #73	; 0x49
 8016506:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8016508:	69bb      	ldr	r3, [r7, #24]
 801650a:	3301      	adds	r3, #1
 801650c:	2200      	movs	r2, #0
 801650e:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016510:	69bb      	ldr	r3, [r7, #24]
 8016512:	3302      	adds	r3, #2
 8016514:	2200      	movs	r2, #0
 8016516:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	3303      	adds	r3, #3
 801651c:	2200      	movs	r2, #0
 801651e:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016520:	69bb      	ldr	r3, [r7, #24]
 8016522:	3304      	adds	r3, #4
 8016524:	2200      	movs	r2, #0
 8016526:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	3305      	adds	r3, #5
 801652c:	78fa      	ldrb	r2, [r7, #3]
 801652e:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016530:	69bb      	ldr	r3, [r7, #24]
 8016532:	3306      	adds	r3, #6
 8016534:	693a      	ldr	r2, [r7, #16]
 8016536:	b2d2      	uxtb	r2, r2
 8016538:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	0a1a      	lsrs	r2, r3, #8
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	3307      	adds	r3, #7
 8016542:	b2d2      	uxtb	r2, r2
 8016544:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016546:	693b      	ldr	r3, [r7, #16]
 8016548:	0c1a      	lsrs	r2, r3, #16
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	3308      	adds	r3, #8
 801654e:	b2d2      	uxtb	r2, r2
 8016550:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	0e1a      	lsrs	r2, r3, #24
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	3309      	adds	r3, #9
 801655a:	b2d2      	uxtb	r2, r2
 801655c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801655e:	69bb      	ldr	r3, [r7, #24]
 8016560:	330a      	adds	r3, #10
 8016562:	697a      	ldr	r2, [r7, #20]
 8016564:	b2d2      	uxtb	r2, r2
 8016566:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	0a1a      	lsrs	r2, r3, #8
 801656c:	69bb      	ldr	r3, [r7, #24]
 801656e:	330b      	adds	r3, #11
 8016570:	b2d2      	uxtb	r2, r2
 8016572:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	0c1a      	lsrs	r2, r3, #16
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	330c      	adds	r3, #12
 801657c:	b2d2      	uxtb	r2, r2
 801657e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	0e1a      	lsrs	r2, r3, #24
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	330d      	adds	r3, #13
 8016588:	b2d2      	uxtb	r2, r2
 801658a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801658c:	69bb      	ldr	r3, [r7, #24]
 801658e:	330e      	adds	r3, #14
 8016590:	2200      	movs	r2, #0
 8016592:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016594:	69bb      	ldr	r3, [r7, #24]
 8016596:	330f      	adds	r3, #15
 8016598:	88fa      	ldrh	r2, [r7, #6]
 801659a:	b2d2      	uxtb	r2, r2
 801659c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801659e:	2300      	movs	r3, #0
}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3708      	adds	r7, #8
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bc90      	pop	{r4, r7}
 80165a8:	4770      	bx	lr

080165aa <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80165aa:	b590      	push	{r4, r7, lr}
 80165ac:	b08b      	sub	sp, #44	; 0x2c
 80165ae:	af04      	add	r7, sp, #16
 80165b0:	6078      	str	r0, [r7, #4]
 80165b2:	4608      	mov	r0, r1
 80165b4:	4611      	mov	r1, r2
 80165b6:	461a      	mov	r2, r3
 80165b8:	4603      	mov	r3, r0
 80165ba:	807b      	strh	r3, [r7, #2]
 80165bc:	460b      	mov	r3, r1
 80165be:	707b      	strb	r3, [r7, #1]
 80165c0:	4613      	mov	r3, r2
 80165c2:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d002      	beq.n	80165d0 <ComputeCmacB0+0x26>
 80165ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d101      	bne.n	80165d4 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165d0:	230a      	movs	r3, #10
 80165d2:	e024      	b.n	801661e <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80165d4:	887b      	ldrh	r3, [r7, #2]
 80165d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165da:	d901      	bls.n	80165e0 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80165dc:	230e      	movs	r3, #14
 80165de:	e01e      	b.n	801661e <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80165e0:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80165e4:	783a      	ldrb	r2, [r7, #0]
 80165e6:	7879      	ldrb	r1, [r7, #1]
 80165e8:	8878      	ldrh	r0, [r7, #2]
 80165ea:	f107 0308 	add.w	r3, r7, #8
 80165ee:	9302      	str	r3, [sp, #8]
 80165f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f2:	9301      	str	r3, [sp, #4]
 80165f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	4623      	mov	r3, r4
 80165fa:	f7ff ff6e 	bl	80164da <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80165fe:	887a      	ldrh	r2, [r7, #2]
 8016600:	7879      	ldrb	r1, [r7, #1]
 8016602:	f107 0008 	add.w	r0, r7, #8
 8016606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016608:	9300      	str	r3, [sp, #0]
 801660a:	460b      	mov	r3, r1
 801660c:	6879      	ldr	r1, [r7, #4]
 801660e:	f7f8 fe43 	bl	800f298 <SecureElementComputeAesCmac>
 8016612:	4603      	mov	r3, r0
 8016614:	2b00      	cmp	r3, #0
 8016616:	d001      	beq.n	801661c <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016618:	230f      	movs	r3, #15
 801661a:	e000      	b.n	801661e <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801661c:	2300      	movs	r3, #0
}
 801661e:	4618      	mov	r0, r3
 8016620:	371c      	adds	r7, #28
 8016622:	46bd      	mov	sp, r7
 8016624:	bd90      	pop	{r4, r7, pc}

08016626 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016626:	b590      	push	{r4, r7, lr}
 8016628:	b0cd      	sub	sp, #308	; 0x134
 801662a:	af04      	add	r7, sp, #16
 801662c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016630:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016634:	6020      	str	r0, [r4, #0]
 8016636:	460c      	mov	r4, r1
 8016638:	4610      	mov	r0, r2
 801663a:	4619      	mov	r1, r3
 801663c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016640:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016644:	4622      	mov	r2, r4
 8016646:	801a      	strh	r2, [r3, #0]
 8016648:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801664c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016650:	4602      	mov	r2, r0
 8016652:	701a      	strb	r2, [r3, #0]
 8016654:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016658:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801665c:	460a      	mov	r2, r1
 801665e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016660:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016664:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d101      	bne.n	8016672 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801666e:	230a      	movs	r3, #10
 8016670:	e063      	b.n	801673a <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016672:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016676:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801667a:	881b      	ldrh	r3, [r3, #0]
 801667c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016680:	d901      	bls.n	8016686 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016682:	230e      	movs	r3, #14
 8016684:	e059      	b.n	801673a <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016686:	f107 030c 	add.w	r3, r7, #12
 801668a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801668e:	2100      	movs	r1, #0
 8016690:	4618      	mov	r0, r3
 8016692:	f003 fbf9 	bl	8019e88 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016696:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801669a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801669e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166a2:	781a      	ldrb	r2, [r3, #0]
 80166a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166a8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166ac:	7819      	ldrb	r1, [r3, #0]
 80166ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166b2:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166b6:	8818      	ldrh	r0, [r3, #0]
 80166b8:	f107 030c 	add.w	r3, r7, #12
 80166bc:	9302      	str	r3, [sp, #8]
 80166be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80166c2:	9301      	str	r3, [sp, #4]
 80166c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	4623      	mov	r3, r4
 80166cc:	f7ff ff05 	bl	80164da <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80166d0:	f107 030c 	add.w	r3, r7, #12
 80166d4:	3310      	adds	r3, #16
 80166d6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80166da:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80166de:	8812      	ldrh	r2, [r2, #0]
 80166e0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80166e4:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80166e8:	6809      	ldr	r1, [r1, #0]
 80166ea:	4618      	mov	r0, r3
 80166ec:	f003 fb91 	bl	8019e12 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80166f0:	2306      	movs	r3, #6
 80166f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80166f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166fa:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166fe:	881b      	ldrh	r3, [r3, #0]
 8016700:	3310      	adds	r3, #16
 8016702:	4619      	mov	r1, r3
 8016704:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016708:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	f107 000c 	add.w	r0, r7, #12
 8016712:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016716:	f7f8 fdd9 	bl	800f2cc <SecureElementVerifyAesCmac>
 801671a:	4603      	mov	r3, r0
 801671c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016724:	2b00      	cmp	r3, #0
 8016726:	d101      	bne.n	801672c <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016728:	2300      	movs	r3, #0
 801672a:	e006      	b.n	801673a <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 801672c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016730:	2b01      	cmp	r3, #1
 8016732:	d101      	bne.n	8016738 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016734:	2301      	movs	r3, #1
 8016736:	e000      	b.n	801673a <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016738:	230f      	movs	r3, #15
}
 801673a:	4618      	mov	r0, r3
 801673c:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016740:	46bd      	mov	sp, r7
 8016742:	bd90      	pop	{r4, r7, pc}

08016744 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016744:	b480      	push	{r7}
 8016746:	b085      	sub	sp, #20
 8016748:	af00      	add	r7, sp, #0
 801674a:	4603      	mov	r3, r0
 801674c:	6039      	str	r1, [r7, #0]
 801674e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016750:	2300      	movs	r3, #0
 8016752:	73fb      	strb	r3, [r7, #15]
 8016754:	e011      	b.n	801677a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016756:	7bfb      	ldrb	r3, [r7, #15]
 8016758:	4a0c      	ldr	r2, [pc, #48]	; (801678c <GetKeyAddrItem+0x48>)
 801675a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801675e:	79fa      	ldrb	r2, [r7, #7]
 8016760:	429a      	cmp	r2, r3
 8016762:	d107      	bne.n	8016774 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016764:	7bfb      	ldrb	r3, [r7, #15]
 8016766:	009b      	lsls	r3, r3, #2
 8016768:	4a08      	ldr	r2, [pc, #32]	; (801678c <GetKeyAddrItem+0x48>)
 801676a:	441a      	add	r2, r3
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016770:	2300      	movs	r3, #0
 8016772:	e006      	b.n	8016782 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016774:	7bfb      	ldrb	r3, [r7, #15]
 8016776:	3301      	adds	r3, #1
 8016778:	73fb      	strb	r3, [r7, #15]
 801677a:	7bfb      	ldrb	r3, [r7, #15]
 801677c:	2b01      	cmp	r3, #1
 801677e:	d9ea      	bls.n	8016756 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016780:	230c      	movs	r3, #12
}
 8016782:	4618      	mov	r0, r3
 8016784:	3714      	adds	r7, #20
 8016786:	46bd      	mov	sp, r7
 8016788:	bc80      	pop	{r7}
 801678a:	4770      	bx	lr
 801678c:	20000130 	.word	0x20000130

08016790 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b088      	sub	sp, #32
 8016794:	af00      	add	r7, sp, #0
 8016796:	60b9      	str	r1, [r7, #8]
 8016798:	607a      	str	r2, [r7, #4]
 801679a:	461a      	mov	r2, r3
 801679c:	4603      	mov	r3, r0
 801679e:	73fb      	strb	r3, [r7, #15]
 80167a0:	4613      	mov	r3, r2
 80167a2:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80167a4:	2300      	movs	r3, #0
 80167a6:	613b      	str	r3, [r7, #16]
 80167a8:	f107 0314 	add.w	r3, r7, #20
 80167ac:	2200      	movs	r2, #0
 80167ae:	601a      	str	r2, [r3, #0]
 80167b0:	605a      	str	r2, [r3, #4]
 80167b2:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80167b4:	7bfb      	ldrb	r3, [r7, #15]
 80167b6:	2b08      	cmp	r3, #8
 80167b8:	d002      	beq.n	80167c0 <DeriveSessionKey10x+0x30>
 80167ba:	2b09      	cmp	r3, #9
 80167bc:	d003      	beq.n	80167c6 <DeriveSessionKey10x+0x36>
 80167be:	e005      	b.n	80167cc <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80167c0:	2301      	movs	r3, #1
 80167c2:	743b      	strb	r3, [r7, #16]
            break;
 80167c4:	e004      	b.n	80167d0 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80167c6:	2302      	movs	r3, #2
 80167c8:	743b      	strb	r3, [r7, #16]
            break;
 80167ca:	e001      	b.n	80167d0 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80167cc:	230b      	movs	r3, #11
 80167ce:	e02a      	b.n	8016826 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80167d0:	68bb      	ldr	r3, [r7, #8]
 80167d2:	b2db      	uxtb	r3, r3
 80167d4:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	0a1b      	lsrs	r3, r3, #8
 80167da:	b2db      	uxtb	r3, r3
 80167dc:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	0c1b      	lsrs	r3, r3, #16
 80167e2:	b2db      	uxtb	r3, r3
 80167e4:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	b2db      	uxtb	r3, r3
 80167ea:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	0a1b      	lsrs	r3, r3, #8
 80167f0:	b2db      	uxtb	r3, r3
 80167f2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	0c1b      	lsrs	r3, r3, #16
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80167fc:	89bb      	ldrh	r3, [r7, #12]
 80167fe:	b2db      	uxtb	r3, r3
 8016800:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016802:	89bb      	ldrh	r3, [r7, #12]
 8016804:	0a1b      	lsrs	r3, r3, #8
 8016806:	b29b      	uxth	r3, r3
 8016808:	b2db      	uxtb	r3, r3
 801680a:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801680c:	7bfa      	ldrb	r2, [r7, #15]
 801680e:	f107 0310 	add.w	r3, r7, #16
 8016812:	2101      	movs	r1, #1
 8016814:	4618      	mov	r0, r3
 8016816:	f7f8 fe05 	bl	800f424 <SecureElementDeriveAndStoreKey>
 801681a:	4603      	mov	r3, r0
 801681c:	2b00      	cmp	r3, #0
 801681e:	d001      	beq.n	8016824 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016820:	230f      	movs	r3, #15
 8016822:	e000      	b.n	8016826 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016824:	2300      	movs	r3, #0
}
 8016826:	4618      	mov	r0, r3
 8016828:	3720      	adds	r7, #32
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}
	...

08016830 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016830:	b480      	push	{r7}
 8016832:	b083      	sub	sp, #12
 8016834:	af00      	add	r7, sp, #0
 8016836:	4603      	mov	r3, r0
 8016838:	6039      	str	r1, [r7, #0]
 801683a:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d101      	bne.n	8016846 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016842:	230a      	movs	r3, #10
 8016844:	e029      	b.n	801689a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016846:	79fb      	ldrb	r3, [r7, #7]
 8016848:	3b01      	subs	r3, #1
 801684a:	2b03      	cmp	r3, #3
 801684c:	d822      	bhi.n	8016894 <GetLastFcntDown+0x64>
 801684e:	a201      	add	r2, pc, #4	; (adr r2, 8016854 <GetLastFcntDown+0x24>)
 8016850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016854:	08016865 	.word	0x08016865
 8016858:	08016871 	.word	0x08016871
 801685c:	0801687d 	.word	0x0801687d
 8016860:	08016889 	.word	0x08016889
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016864:	4b0f      	ldr	r3, [pc, #60]	; (80168a4 <GetLastFcntDown+0x74>)
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	691a      	ldr	r2, [r3, #16]
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	601a      	str	r2, [r3, #0]
            break;
 801686e:	e013      	b.n	8016898 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016870:	4b0c      	ldr	r3, [pc, #48]	; (80168a4 <GetLastFcntDown+0x74>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	695a      	ldr	r2, [r3, #20]
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	601a      	str	r2, [r3, #0]
            break;
 801687a:	e00d      	b.n	8016898 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801687c:	4b09      	ldr	r3, [pc, #36]	; (80168a4 <GetLastFcntDown+0x74>)
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	699a      	ldr	r2, [r3, #24]
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	601a      	str	r2, [r3, #0]
            break;
 8016886:	e007      	b.n	8016898 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016888:	4b06      	ldr	r3, [pc, #24]	; (80168a4 <GetLastFcntDown+0x74>)
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	69da      	ldr	r2, [r3, #28]
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	601a      	str	r2, [r3, #0]
            break;
 8016892:	e001      	b.n	8016898 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016894:	2305      	movs	r3, #5
 8016896:	e000      	b.n	801689a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016898:	2300      	movs	r3, #0
}
 801689a:	4618      	mov	r0, r3
 801689c:	370c      	adds	r7, #12
 801689e:	46bd      	mov	sp, r7
 80168a0:	bc80      	pop	{r7}
 80168a2:	4770      	bx	lr
 80168a4:	20001720 	.word	0x20001720

080168a8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b084      	sub	sp, #16
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	4603      	mov	r3, r0
 80168b0:	6039      	str	r1, [r7, #0]
 80168b2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80168b4:	2300      	movs	r3, #0
 80168b6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80168b8:	f107 020c 	add.w	r2, r7, #12
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	4611      	mov	r1, r2
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7ff ffb5 	bl	8016830 <GetLastFcntDown>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <CheckFCntDown+0x28>
    {
        return false;
 80168cc:	2300      	movs	r3, #0
 80168ce:	e00a      	b.n	80168e6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	683a      	ldr	r2, [r7, #0]
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d803      	bhi.n	80168e0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80168d8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80168da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168de:	d101      	bne.n	80168e4 <CheckFCntDown+0x3c>
    {
        return true;
 80168e0:	2301      	movs	r3, #1
 80168e2:	e000      	b.n	80168e6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80168e4:	2300      	movs	r3, #0
    }
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3710      	adds	r7, #16
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
	...

080168f0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168f0:	b480      	push	{r7}
 80168f2:	b083      	sub	sp, #12
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	4603      	mov	r3, r0
 80168f8:	6039      	str	r1, [r7, #0]
 80168fa:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80168fc:	79fb      	ldrb	r3, [r7, #7]
 80168fe:	3b01      	subs	r3, #1
 8016900:	2b03      	cmp	r3, #3
 8016902:	d82b      	bhi.n	801695c <UpdateFCntDown+0x6c>
 8016904:	a201      	add	r2, pc, #4	; (adr r2, 801690c <UpdateFCntDown+0x1c>)
 8016906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801690a:	bf00      	nop
 801690c:	0801691d 	.word	0x0801691d
 8016910:	0801692f 	.word	0x0801692f
 8016914:	08016941 	.word	0x08016941
 8016918:	08016953 	.word	0x08016953
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801691c:	4b12      	ldr	r3, [pc, #72]	; (8016968 <UpdateFCntDown+0x78>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	683a      	ldr	r2, [r7, #0]
 8016922:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016924:	4b10      	ldr	r3, [pc, #64]	; (8016968 <UpdateFCntDown+0x78>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	683a      	ldr	r2, [r7, #0]
 801692a:	621a      	str	r2, [r3, #32]
            break;
 801692c:	e017      	b.n	801695e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801692e:	4b0e      	ldr	r3, [pc, #56]	; (8016968 <UpdateFCntDown+0x78>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	683a      	ldr	r2, [r7, #0]
 8016934:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016936:	4b0c      	ldr	r3, [pc, #48]	; (8016968 <UpdateFCntDown+0x78>)
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	621a      	str	r2, [r3, #32]
            break;
 801693e:	e00e      	b.n	801695e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016940:	4b09      	ldr	r3, [pc, #36]	; (8016968 <UpdateFCntDown+0x78>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	683a      	ldr	r2, [r7, #0]
 8016946:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016948:	4b07      	ldr	r3, [pc, #28]	; (8016968 <UpdateFCntDown+0x78>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	683a      	ldr	r2, [r7, #0]
 801694e:	621a      	str	r2, [r3, #32]
            break;
 8016950:	e005      	b.n	801695e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016952:	4b05      	ldr	r3, [pc, #20]	; (8016968 <UpdateFCntDown+0x78>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	683a      	ldr	r2, [r7, #0]
 8016958:	61da      	str	r2, [r3, #28]
            break;
 801695a:	e000      	b.n	801695e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 801695c:	bf00      	nop
    }
}
 801695e:	bf00      	nop
 8016960:	370c      	adds	r7, #12
 8016962:	46bd      	mov	sp, r7
 8016964:	bc80      	pop	{r7}
 8016966:	4770      	bx	lr
 8016968:	20001720 	.word	0x20001720

0801696c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801696c:	b480      	push	{r7}
 801696e:	b083      	sub	sp, #12
 8016970:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016972:	4b18      	ldr	r3, [pc, #96]	; (80169d4 <ResetFCnts+0x68>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	2200      	movs	r2, #0
 8016978:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801697a:	4b16      	ldr	r3, [pc, #88]	; (80169d4 <ResetFCnts+0x68>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f04f 32ff 	mov.w	r2, #4294967295
 8016982:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016984:	4b13      	ldr	r3, [pc, #76]	; (80169d4 <ResetFCnts+0x68>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f04f 32ff 	mov.w	r2, #4294967295
 801698c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801698e:	4b11      	ldr	r3, [pc, #68]	; (80169d4 <ResetFCnts+0x68>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	f04f 32ff 	mov.w	r2, #4294967295
 8016996:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016998:	4b0e      	ldr	r3, [pc, #56]	; (80169d4 <ResetFCnts+0x68>)
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	4b0d      	ldr	r3, [pc, #52]	; (80169d4 <ResetFCnts+0x68>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	6992      	ldr	r2, [r2, #24]
 80169a2:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169a4:	2300      	movs	r3, #0
 80169a6:	607b      	str	r3, [r7, #4]
 80169a8:	e00b      	b.n	80169c2 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80169aa:	4b0a      	ldr	r3, [pc, #40]	; (80169d4 <ResetFCnts+0x68>)
 80169ac:	681a      	ldr	r2, [r3, #0]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	3306      	adds	r3, #6
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	4413      	add	r3, r2
 80169b6:	f04f 32ff 	mov.w	r2, #4294967295
 80169ba:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	3301      	adds	r3, #1
 80169c0:	607b      	str	r3, [r7, #4]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	ddf0      	ble.n	80169aa <ResetFCnts+0x3e>
    }
}
 80169c8:	bf00      	nop
 80169ca:	bf00      	nop
 80169cc:	370c      	adds	r7, #12
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bc80      	pop	{r7}
 80169d2:	4770      	bx	lr
 80169d4:	20001720 	.word	0x20001720

080169d8 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80169d8:	b480      	push	{r7}
 80169da:	b083      	sub	sp, #12
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80169e0:	4b06      	ldr	r3, [pc, #24]	; (80169fc <IsJoinNonce10xOk+0x24>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	689b      	ldr	r3, [r3, #8]
 80169e6:	687a      	ldr	r2, [r7, #4]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	bf8c      	ite	hi
 80169ec:	2301      	movhi	r3, #1
 80169ee:	2300      	movls	r3, #0
 80169f0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	370c      	adds	r7, #12
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bc80      	pop	{r7}
 80169fa:	4770      	bx	lr
 80169fc:	20001720 	.word	0x20001720

08016a00 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d101      	bne.n	8016a12 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016a0e:	2309      	movs	r3, #9
 8016a10:	e01c      	b.n	8016a4c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016a12:	4a10      	ldr	r2, [pc, #64]	; (8016a54 <LoRaMacCryptoInit+0x54>)
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a18:	4b0e      	ldr	r3, [pc, #56]	; (8016a54 <LoRaMacCryptoInit+0x54>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	2228      	movs	r2, #40	; 0x28
 8016a1e:	2100      	movs	r1, #0
 8016a20:	4618      	mov	r0, r3
 8016a22:	f003 fa31 	bl	8019e88 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a26:	4b0b      	ldr	r3, [pc, #44]	; (8016a54 <LoRaMacCryptoInit+0x54>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	2201      	movs	r2, #1
 8016a2c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a2e:	4b09      	ldr	r3, [pc, #36]	; (8016a54 <LoRaMacCryptoInit+0x54>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2201      	movs	r2, #1
 8016a34:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a36:	4b07      	ldr	r3, [pc, #28]	; (8016a54 <LoRaMacCryptoInit+0x54>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	2201      	movs	r2, #1
 8016a3c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a3e:	4b05      	ldr	r3, [pc, #20]	; (8016a54 <LoRaMacCryptoInit+0x54>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	2200      	movs	r2, #0
 8016a44:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a46:	f7ff ff91 	bl	801696c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a4a:	2300      	movs	r3, #0
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	3708      	adds	r7, #8
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd80      	pop	{r7, pc}
 8016a54:	20001720 	.word	0x20001720

08016a58 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b083      	sub	sp, #12
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a60:	4b04      	ldr	r3, [pc, #16]	; (8016a74 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	687a      	ldr	r2, [r7, #4]
 8016a66:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016a68:	2300      	movs	r3, #0
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	370c      	adds	r7, #12
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bc80      	pop	{r7}
 8016a72:	4770      	bx	lr
 8016a74:	20001720 	.word	0x20001720

08016a78 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016a78:	b480      	push	{r7}
 8016a7a:	b083      	sub	sp, #12
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d101      	bne.n	8016a8a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a86:	230a      	movs	r3, #10
 8016a88:	e006      	b.n	8016a98 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016a8a:	4b06      	ldr	r3, [pc, #24]	; (8016aa4 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	68db      	ldr	r3, [r3, #12]
 8016a90:	1c5a      	adds	r2, r3, #1
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a96:	2300      	movs	r3, #0
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	370c      	adds	r7, #12
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bc80      	pop	{r7}
 8016aa0:	4770      	bx	lr
 8016aa2:	bf00      	nop
 8016aa4:	20001720 	.word	0x20001720

08016aa8 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016aac:	b08a      	sub	sp, #40	; 0x28
 8016aae:	af00      	add	r7, sp, #0
 8016ab0:	613a      	str	r2, [r7, #16]
 8016ab2:	60fb      	str	r3, [r7, #12]
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	75fb      	strb	r3, [r7, #23]
 8016ab8:	460b      	mov	r3, r1
 8016aba:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016abc:	2300      	movs	r3, #0
 8016abe:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016ac4:	2313      	movs	r3, #19
 8016ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d101      	bne.n	8016ad4 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ad0:	230a      	movs	r3, #10
 8016ad2:	e057      	b.n	8016b84 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ad4:	f107 021c 	add.w	r2, r7, #28
 8016ad8:	7dfb      	ldrb	r3, [r7, #23]
 8016ada:	4611      	mov	r1, r2
 8016adc:	4618      	mov	r0, r3
 8016ade:	f7ff fea7 	bl	8016830 <GetLastFcntDown>
 8016ae2:	4603      	mov	r3, r0
 8016ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d002      	beq.n	8016af6 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016af0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016af4:	e046      	b.n	8016b84 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016af6:	69fb      	ldr	r3, [r7, #28]
 8016af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016afc:	d103      	bne.n	8016b06 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	693a      	ldr	r2, [r7, #16]
 8016b02:	601a      	str	r2, [r3, #0]
 8016b04:	e01e      	b.n	8016b44 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	b29b      	uxth	r3, r3
 8016b0a:	693a      	ldr	r2, [r7, #16]
 8016b0c:	1ad3      	subs	r3, r2, r3
 8016b0e:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	dd05      	ble.n	8016b22 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b16:	69fa      	ldr	r2, [r7, #28]
 8016b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1a:	441a      	add	r2, r3
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	601a      	str	r2, [r3, #0]
 8016b20:	e010      	b.n	8016b44 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d104      	bne.n	8016b32 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b28:	69fa      	ldr	r2, [r7, #28]
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b2e:	2307      	movs	r3, #7
 8016b30:	e028      	b.n	8016b84 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	0c1b      	lsrs	r3, r3, #16
 8016b36:	041b      	lsls	r3, r3, #16
 8016b38:	693a      	ldr	r2, [r7, #16]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b44:	4b12      	ldr	r3, [pc, #72]	; (8016b90 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	789b      	ldrb	r3, [r3, #2]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d119      	bne.n	8016b82 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	2200      	movs	r2, #0
 8016b54:	603b      	str	r3, [r7, #0]
 8016b56:	607a      	str	r2, [r7, #4]
 8016b58:	69fb      	ldr	r3, [r7, #28]
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	469a      	mov	sl, r3
 8016b5e:	4693      	mov	fp, r2
 8016b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b64:	4611      	mov	r1, r2
 8016b66:	ebb1 040a 	subs.w	r4, r1, sl
 8016b6a:	eb63 050b 	sbc.w	r5, r3, fp
 8016b6e:	8abb      	ldrh	r3, [r7, #20]
 8016b70:	2200      	movs	r2, #0
 8016b72:	4698      	mov	r8, r3
 8016b74:	4691      	mov	r9, r2
 8016b76:	4544      	cmp	r4, r8
 8016b78:	eb75 0309 	sbcs.w	r3, r5, r9
 8016b7c:	db01      	blt.n	8016b82 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016b7e:	2308      	movs	r3, #8
 8016b80:	e000      	b.n	8016b84 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b82:	2300      	movs	r3, #0
}
 8016b84:	4618      	mov	r0, r3
 8016b86:	3728      	adds	r7, #40	; 0x28
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b8e:	bf00      	nop
 8016b90:	20001720 	.word	0x20001720

08016b94 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016b94:	b480      	push	{r7}
 8016b96:	b085      	sub	sp, #20
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d101      	bne.n	8016ba6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ba2:	230a      	movs	r3, #10
 8016ba4:	e019      	b.n	8016bda <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	60fb      	str	r3, [r7, #12]
 8016baa:	e012      	b.n	8016bd2 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016bac:	4b0d      	ldr	r3, [pc, #52]	; (8016be4 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016bae:	6819      	ldr	r1, [r3, #0]
 8016bb0:	68fa      	ldr	r2, [r7, #12]
 8016bb2:	4613      	mov	r3, r2
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	4413      	add	r3, r2
 8016bb8:	011b      	lsls	r3, r3, #4
 8016bba:	461a      	mov	r2, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	4413      	add	r3, r2
 8016bc0:	68fa      	ldr	r2, [r7, #12]
 8016bc2:	3206      	adds	r2, #6
 8016bc4:	0092      	lsls	r2, r2, #2
 8016bc6:	440a      	add	r2, r1
 8016bc8:	3204      	adds	r2, #4
 8016bca:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	3301      	adds	r3, #1
 8016bd0:	60fb      	str	r3, [r7, #12]
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	dde9      	ble.n	8016bac <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bd8:	2300      	movs	r3, #0
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3714      	adds	r7, #20
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bc80      	pop	{r7}
 8016be2:	4770      	bx	lr
 8016be4:	20001720 	.word	0x20001720

08016be8 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b082      	sub	sp, #8
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	4603      	mov	r3, r0
 8016bf0:	6039      	str	r1, [r7, #0]
 8016bf2:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7f8 faef 	bl	800f1dc <SecureElementSetKey>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d001      	beq.n	8016c08 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c04:	230f      	movs	r3, #15
 8016c06:	e021      	b.n	8016c4c <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016c08:	79fb      	ldrb	r3, [r7, #7]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d11d      	bne.n	8016c4a <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c0e:	4b11      	ldr	r3, [pc, #68]	; (8016c54 <LoRaMacCryptoSetKey+0x6c>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	789b      	ldrb	r3, [r3, #2]
 8016c14:	210b      	movs	r1, #11
 8016c16:	4618      	mov	r0, r3
 8016c18:	f000 fa5e 	bl	80170d8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d001      	beq.n	8016c26 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c22:	230f      	movs	r3, #15
 8016c24:	e012      	b.n	8016c4c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c26:	210c      	movs	r1, #12
 8016c28:	2000      	movs	r0, #0
 8016c2a:	f000 fa55 	bl	80170d8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d001      	beq.n	8016c38 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c34:	230f      	movs	r3, #15
 8016c36:	e009      	b.n	8016c4c <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c38:	210a      	movs	r1, #10
 8016c3a:	2000      	movs	r0, #0
 8016c3c:	f000 fa4c 	bl	80170d8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c40:	4603      	mov	r3, r0
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d001      	beq.n	8016c4a <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c46:	230f      	movs	r3, #15
 8016c48:	e000      	b.n	8016c4c <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c4a:	2300      	movs	r3, #0
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	3708      	adds	r7, #8
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd80      	pop	{r7, pc}
 8016c54:	20001720 	.word	0x20001720

08016c58 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b086      	sub	sp, #24
 8016c5c:	af02      	add	r7, sp, #8
 8016c5e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d101      	bne.n	8016c6a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c66:	230a      	movs	r3, #10
 8016c68:	e033      	b.n	8016cd2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016c72:	f107 0308 	add.w	r3, r7, #8
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7f8 fc8a 	bl	800f590 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016c7c:	68ba      	ldr	r2, [r7, #8]
 8016c7e:	4b17      	ldr	r3, [pc, #92]	; (8016cdc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	b292      	uxth	r2, r2
 8016c84:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016c86:	4b15      	ldr	r3, [pc, #84]	; (8016cdc <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	889a      	ldrh	r2, [r3, #4]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f000 fc1b 	bl	80174cc <LoRaMacSerializerJoinRequest>
 8016c96:	4603      	mov	r3, r0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d001      	beq.n	8016ca0 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016c9c:	2311      	movs	r3, #17
 8016c9e:	e018      	b.n	8016cd2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	6819      	ldr	r1, [r3, #0]
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	3318      	adds	r3, #24
 8016ca8:	7bfa      	ldrb	r2, [r7, #15]
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	4613      	mov	r3, r2
 8016cae:	2213      	movs	r2, #19
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	f7f8 faf1 	bl	800f298 <SecureElementComputeAesCmac>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cbc:	230f      	movs	r3, #15
 8016cbe:	e008      	b.n	8016cd2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f000 fc03 	bl	80174cc <LoRaMacSerializerJoinRequest>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d001      	beq.n	8016cd0 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ccc:	2311      	movs	r3, #17
 8016cce:	e000      	b.n	8016cd2 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cd0:	2300      	movs	r3, #0
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3710      	adds	r7, #16
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}
 8016cda:	bf00      	nop
 8016cdc:	20001720 	.word	0x20001720

08016ce0 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016ce0:	b590      	push	{r4, r7, lr}
 8016ce2:	b097      	sub	sp, #92	; 0x5c
 8016ce4:	af04      	add	r7, sp, #16
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	60b9      	str	r1, [r7, #8]
 8016cea:	607a      	str	r2, [r7, #4]
 8016cec:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d002      	beq.n	8016cfa <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016cf4:	68bb      	ldr	r3, [r7, #8]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d101      	bne.n	8016cfe <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016cfa:	230a      	movs	r3, #10
 8016cfc:	e0d3      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016cfe:	2313      	movs	r3, #19
 8016d00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d04:	2300      	movs	r3, #0
 8016d06:	617b      	str	r3, [r7, #20]
 8016d08:	f107 0318 	add.w	r3, r7, #24
 8016d0c:	221d      	movs	r2, #29
 8016d0e:	2100      	movs	r1, #0
 8016d10:	4618      	mov	r0, r3
 8016d12:	f007 fe9b 	bl	801ea4c <memset>
    uint8_t versionMinor         = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d1a:	4b65      	ldr	r3, [pc, #404]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	889b      	ldrh	r3, [r3, #4]
 8016d20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	681c      	ldr	r4, [r3, #0]
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	791b      	ldrb	r3, [r3, #4]
 8016d2c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d30:	7bf8      	ldrb	r0, [r7, #15]
 8016d32:	f107 0213 	add.w	r2, r7, #19
 8016d36:	9202      	str	r2, [sp, #8]
 8016d38:	f107 0214 	add.w	r2, r7, #20
 8016d3c:	9201      	str	r2, [sp, #4]
 8016d3e:	9300      	str	r3, [sp, #0]
 8016d40:	4623      	mov	r3, r4
 8016d42:	460a      	mov	r2, r1
 8016d44:	68b9      	ldr	r1, [r7, #8]
 8016d46:	f7f8 fbad 	bl	800f4a4 <SecureElementProcessJoinAccept>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d001      	beq.n	8016d54 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d50:	230f      	movs	r3, #15
 8016d52:	e0a8      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6818      	ldr	r0, [r3, #0]
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	791b      	ldrb	r3, [r3, #4]
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	f107 0314 	add.w	r3, r7, #20
 8016d62:	4619      	mov	r1, r3
 8016d64:	f003 f855 	bl	8019e12 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	f000 f9f0 	bl	801714e <LoRaMacParserJoinAccept>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d001      	beq.n	8016d78 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016d74:	2310      	movs	r3, #16
 8016d76:	e096      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	799b      	ldrb	r3, [r3, #6]
 8016d82:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	79db      	ldrb	r3, [r3, #7]
 8016d88:	021b      	lsls	r3, r3, #8
 8016d8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d8c:	4313      	orrs	r3, r2
 8016d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	7a1b      	ldrb	r3, [r3, #8]
 8016d94:	041b      	lsls	r3, r3, #16
 8016d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d98:	4313      	orrs	r3, r2
 8016d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016d9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d9e:	f7ff fe1b 	bl	80169d8 <IsJoinNonce10xOk>
 8016da2:	4603      	mov	r3, r0
 8016da4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016da8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d010      	beq.n	8016dd2 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016db0:	4b3f      	ldr	r3, [pc, #252]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016db6:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016db8:	7cfb      	ldrb	r3, [r7, #19]
 8016dba:	210b      	movs	r1, #11
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f000 f98b 	bl	80170d8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d005      	beq.n	8016ddc <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016dd0:	e001      	b.n	8016dd6 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016dd2:	2303      	movs	r3, #3
 8016dd4:	e067      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016dd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dda:	e064      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016ddc:	210c      	movs	r1, #12
 8016dde:	2000      	movs	r0, #0
 8016de0:	f000 f97a 	bl	80170d8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016de4:	4603      	mov	r3, r0
 8016de6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d002      	beq.n	8016df8 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016df2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016df6:	e056      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016df8:	210a      	movs	r1, #10
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	f000 f96c 	bl	80170d8 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e00:	4603      	mov	r3, r0
 8016e02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d002      	beq.n	8016e14 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016e0e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e12:	e048      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	7a5b      	ldrb	r3, [r3, #9]
 8016e18:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	7a9b      	ldrb	r3, [r3, #10]
 8016e1e:	021b      	lsls	r3, r3, #8
 8016e20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e22:	4313      	orrs	r3, r2
 8016e24:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	7adb      	ldrb	r3, [r3, #11]
 8016e2a:	041b      	lsls	r3, r3, #16
 8016e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e3a:	2009      	movs	r0, #9
 8016e3c:	f7ff fca8 	bl	8016790 <DeriveSessionKey10x>
 8016e40:	4603      	mov	r3, r0
 8016e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d002      	beq.n	8016e54 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e52:	e028      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e5c:	2008      	movs	r0, #8
 8016e5e:	f7ff fc97 	bl	8016790 <DeriveSessionKey10x>
 8016e62:	4603      	mov	r3, r0
 8016e64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d002      	beq.n	8016e76 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016e70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e74:	e017      	b.n	8016ea6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016e76:	4b0e      	ldr	r3, [pc, #56]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	7cfa      	ldrb	r2, [r7, #19]
 8016e7c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e7e:	4b0c      	ldr	r3, [pc, #48]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2200      	movs	r2, #0
 8016e84:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e86:	4b0a      	ldr	r3, [pc, #40]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e8e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e90:	4b07      	ldr	r3, [pc, #28]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	f04f 32ff 	mov.w	r2, #4294967295
 8016e98:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e9a:	4b05      	ldr	r3, [pc, #20]	; (8016eb0 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e9c:	681b      	ldr	r3, [r3, #0]
 8016e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8016ea2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ea4:	2300      	movs	r3, #0
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	374c      	adds	r7, #76	; 0x4c
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd90      	pop	{r4, r7, pc}
 8016eae:	bf00      	nop
 8016eb0:	20001720 	.word	0x20001720

08016eb4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016eb4:	b590      	push	{r4, r7, lr}
 8016eb6:	b08b      	sub	sp, #44	; 0x2c
 8016eb8:	af04      	add	r7, sp, #16
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	607b      	str	r3, [r7, #4]
 8016ebe:	460b      	mov	r3, r1
 8016ec0:	72fb      	strb	r3, [r7, #11]
 8016ec2:	4613      	mov	r3, r2
 8016ec4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016ec6:	2313      	movs	r3, #19
 8016ec8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016eca:	2309      	movs	r3, #9
 8016ecc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d101      	bne.n	8016ed8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ed4:	230a      	movs	r3, #10
 8016ed6:	e05f      	b.n	8016f98 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016ed8:	4b31      	ldr	r3, [pc, #196]	; (8016fa0 <LoRaMacCryptoSecureMessage+0xec>)
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	68db      	ldr	r3, [r3, #12]
 8016ede:	68fa      	ldr	r2, [r7, #12]
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	d201      	bcs.n	8016ee8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016ee4:	2306      	movs	r3, #6
 8016ee6:	e057      	b.n	8016f98 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d101      	bne.n	8016ef6 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016ef2:	2308      	movs	r3, #8
 8016ef4:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016ef6:	4b2a      	ldr	r3, [pc, #168]	; (8016fa0 <LoRaMacCryptoSecureMessage+0xec>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	68fa      	ldr	r2, [r7, #12]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d916      	bls.n	8016f30 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f0c:	b219      	sxth	r1, r3
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	689c      	ldr	r4, [r3, #8]
 8016f12:	7dfa      	ldrb	r2, [r7, #23]
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	9301      	str	r3, [sp, #4]
 8016f18:	2300      	movs	r3, #0
 8016f1a:	9300      	str	r3, [sp, #0]
 8016f1c:	4623      	mov	r3, r4
 8016f1e:	f7ff fa43 	bl	80163a8 <PayloadEncrypt>
 8016f22:	4603      	mov	r3, r0
 8016f24:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f26:	7dbb      	ldrb	r3, [r7, #22]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d001      	beq.n	8016f30 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f2c:	7dbb      	ldrb	r3, [r7, #22]
 8016f2e:	e033      	b.n	8016f98 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	f000 fb4d 	bl	80175d0 <LoRaMacSerializerData>
 8016f36:	4603      	mov	r3, r0
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d001      	beq.n	8016f40 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f3c:	2311      	movs	r3, #17
 8016f3e:	e02b      	b.n	8016f98 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f40:	2308      	movs	r3, #8
 8016f42:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6818      	ldr	r0, [r3, #0]
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	791b      	ldrb	r3, [r3, #4]
 8016f4c:	b29b      	uxth	r3, r3
 8016f4e:	3b04      	subs	r3, #4
 8016f50:	b299      	uxth	r1, r3
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	689b      	ldr	r3, [r3, #8]
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	322c      	adds	r2, #44	; 0x2c
 8016f5a:	7dfc      	ldrb	r4, [r7, #23]
 8016f5c:	9203      	str	r2, [sp, #12]
 8016f5e:	68fa      	ldr	r2, [r7, #12]
 8016f60:	9202      	str	r2, [sp, #8]
 8016f62:	9301      	str	r3, [sp, #4]
 8016f64:	2300      	movs	r3, #0
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	2300      	movs	r3, #0
 8016f6a:	4622      	mov	r2, r4
 8016f6c:	f7ff fb1d 	bl	80165aa <ComputeCmacB0>
 8016f70:	4603      	mov	r3, r0
 8016f72:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f74:	7dbb      	ldrb	r3, [r7, #22]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d001      	beq.n	8016f7e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016f7a:	7dbb      	ldrb	r3, [r7, #22]
 8016f7c:	e00c      	b.n	8016f98 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f000 fb26 	bl	80175d0 <LoRaMacSerializerData>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d001      	beq.n	8016f8e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f8a:	2311      	movs	r3, #17
 8016f8c:	e004      	b.n	8016f98 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f8e:	4b04      	ldr	r3, [pc, #16]	; (8016fa0 <LoRaMacCryptoSecureMessage+0xec>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	68fa      	ldr	r2, [r7, #12]
 8016f94:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f96:	2300      	movs	r3, #0
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	371c      	adds	r7, #28
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd90      	pop	{r4, r7, pc}
 8016fa0:	20001720 	.word	0x20001720

08016fa4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016fa4:	b590      	push	{r4, r7, lr}
 8016fa6:	b08b      	sub	sp, #44	; 0x2c
 8016fa8:	af04      	add	r7, sp, #16
 8016faa:	60b9      	str	r1, [r7, #8]
 8016fac:	607b      	str	r3, [r7, #4]
 8016fae:	4603      	mov	r3, r0
 8016fb0:	73fb      	strb	r3, [r7, #15]
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d101      	bne.n	8016fc0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016fbc:	230a      	movs	r3, #10
 8016fbe:	e084      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016fc0:	7bbb      	ldrb	r3, [r7, #14]
 8016fc2:	6879      	ldr	r1, [r7, #4]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7ff fc6f 	bl	80168a8 <CheckFCntDown>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	f083 0301 	eor.w	r3, r3, #1
 8016fd0:	b2db      	uxtb	r3, r3
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d001      	beq.n	8016fda <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016fd6:	2306      	movs	r3, #6
 8016fd8:	e077      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016fda:	2313      	movs	r3, #19
 8016fdc:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016fde:	2309      	movs	r3, #9
 8016fe0:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016fe2:	2308      	movs	r3, #8
 8016fe4:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016fe6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fe8:	f000 f97c 	bl	80172e4 <LoRaMacParserData>
 8016fec:	4603      	mov	r3, r0
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d001      	beq.n	8016ff6 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016ff2:	2310      	movs	r3, #16
 8016ff4:	e069      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016ff6:	f107 0210 	add.w	r2, r7, #16
 8016ffa:	7bfb      	ldrb	r3, [r7, #15]
 8016ffc:	4611      	mov	r1, r2
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7ff fba0 	bl	8016744 <GetKeyAddrItem>
 8017004:	4603      	mov	r3, r0
 8017006:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017008:	7d7b      	ldrb	r3, [r7, #21]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d001      	beq.n	8017012 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801700e:	7d7b      	ldrb	r3, [r7, #21]
 8017010:	e05b      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	785b      	ldrb	r3, [r3, #1]
 8017016:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	789b      	ldrb	r3, [r3, #2]
 801701c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017020:	689b      	ldr	r3, [r3, #8]
 8017022:	68ba      	ldr	r2, [r7, #8]
 8017024:	429a      	cmp	r2, r3
 8017026:	d001      	beq.n	801702c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017028:	2302      	movs	r3, #2
 801702a:	e04e      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702e:	7b1b      	ldrb	r3, [r3, #12]
 8017030:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b00      	cmp	r3, #0
 8017038:	bf14      	ite	ne
 801703a:	2301      	movne	r3, #1
 801703c:	2300      	moveq	r3, #0
 801703e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017040:	4b24      	ldr	r3, [pc, #144]	; (80170d4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	789b      	ldrb	r3, [r3, #2]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d101      	bne.n	801704e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801704a:	2300      	movs	r3, #0
 801704c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017050:	6818      	ldr	r0, [r3, #0]
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	791b      	ldrb	r3, [r3, #4]
 8017056:	b29b      	uxth	r3, r3
 8017058:	3b04      	subs	r3, #4
 801705a:	b299      	uxth	r1, r3
 801705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017060:	7dbc      	ldrb	r4, [r7, #22]
 8017062:	7d3a      	ldrb	r2, [r7, #20]
 8017064:	9303      	str	r3, [sp, #12]
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	9302      	str	r3, [sp, #8]
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	9301      	str	r3, [sp, #4]
 801706e:	2301      	movs	r3, #1
 8017070:	9300      	str	r3, [sp, #0]
 8017072:	4623      	mov	r3, r4
 8017074:	f7ff fad7 	bl	8016626 <VerifyCmacB0>
 8017078:	4603      	mov	r3, r0
 801707a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801707c:	7d7b      	ldrb	r3, [r7, #21]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d001      	beq.n	8017086 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8017082:	7d7b      	ldrb	r3, [r7, #21]
 8017084:	e021      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017088:	f893 3020 	ldrb.w	r3, [r3, #32]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d101      	bne.n	8017094 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017090:	2308      	movs	r3, #8
 8017092:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017096:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801709a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801709e:	b219      	sxth	r1, r3
 80170a0:	7dfa      	ldrb	r2, [r7, #23]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	9301      	str	r3, [sp, #4]
 80170a6:	2301      	movs	r3, #1
 80170a8:	9300      	str	r3, [sp, #0]
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	f7ff f97c 	bl	80163a8 <PayloadEncrypt>
 80170b0:	4603      	mov	r3, r0
 80170b2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170b4:	7d7b      	ldrb	r3, [r7, #21]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d001      	beq.n	80170be <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80170ba:	7d7b      	ldrb	r3, [r7, #21]
 80170bc:	e005      	b.n	80170ca <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80170be:	7bbb      	ldrb	r3, [r7, #14]
 80170c0:	6879      	ldr	r1, [r7, #4]
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7ff fc14 	bl	80168f0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80170c8:	2300      	movs	r3, #0
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	371c      	adds	r7, #28
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd90      	pop	{r4, r7, pc}
 80170d2:	bf00      	nop
 80170d4:	20001720 	.word	0x20001720

080170d8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b088      	sub	sp, #32
 80170dc:	af00      	add	r7, sp, #0
 80170de:	4603      	mov	r3, r0
 80170e0:	460a      	mov	r2, r1
 80170e2:	71fb      	strb	r3, [r7, #7]
 80170e4:	4613      	mov	r3, r2
 80170e6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80170e8:	2300      	movs	r3, #0
 80170ea:	60fb      	str	r3, [r7, #12]
 80170ec:	f107 0310 	add.w	r3, r7, #16
 80170f0:	2200      	movs	r2, #0
 80170f2:	601a      	str	r2, [r3, #0]
 80170f4:	605a      	str	r2, [r3, #4]
 80170f6:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80170f8:	2300      	movs	r3, #0
 80170fa:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80170fc:	79bb      	ldrb	r3, [r7, #6]
 80170fe:	2b0c      	cmp	r3, #12
 8017100:	d00b      	beq.n	801711a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017102:	2b0c      	cmp	r3, #12
 8017104:	dc0f      	bgt.n	8017126 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017106:	2b0a      	cmp	r3, #10
 8017108:	d00a      	beq.n	8017120 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801710a:	2b0b      	cmp	r3, #11
 801710c:	d10b      	bne.n	8017126 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801710e:	79fb      	ldrb	r3, [r7, #7]
 8017110:	2b01      	cmp	r3, #1
 8017112:	d10a      	bne.n	801712a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017114:	2320      	movs	r3, #32
 8017116:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017118:	e007      	b.n	801712a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801711a:	230b      	movs	r3, #11
 801711c:	77fb      	strb	r3, [r7, #31]
            break;
 801711e:	e005      	b.n	801712c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8017120:	2330      	movs	r3, #48	; 0x30
 8017122:	733b      	strb	r3, [r7, #12]
            break;
 8017124:	e002      	b.n	801712c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017126:	230b      	movs	r3, #11
 8017128:	e00d      	b.n	8017146 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801712a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801712c:	79ba      	ldrb	r2, [r7, #6]
 801712e:	7ff9      	ldrb	r1, [r7, #31]
 8017130:	f107 030c 	add.w	r3, r7, #12
 8017134:	4618      	mov	r0, r3
 8017136:	f7f8 f975 	bl	800f424 <SecureElementDeriveAndStoreKey>
 801713a:	4603      	mov	r3, r0
 801713c:	2b00      	cmp	r3, #0
 801713e:	d001      	beq.n	8017144 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017140:	230f      	movs	r3, #15
 8017142:	e000      	b.n	8017146 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017144:	2300      	movs	r3, #0
}
 8017146:	4618      	mov	r0, r3
 8017148:	3720      	adds	r7, #32
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}

0801714e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801714e:	b580      	push	{r7, lr}
 8017150:	b084      	sub	sp, #16
 8017152:	af00      	add	r7, sp, #0
 8017154:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2b00      	cmp	r3, #0
 801715a:	d003      	beq.n	8017164 <LoRaMacParserJoinAccept+0x16>
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d101      	bne.n	8017168 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017164:	2302      	movs	r3, #2
 8017166:	e0b9      	b.n	80172dc <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017168:	2300      	movs	r3, #0
 801716a:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681a      	ldr	r2, [r3, #0]
 8017170:	89fb      	ldrh	r3, [r7, #14]
 8017172:	1c59      	adds	r1, r3, #1
 8017174:	81f9      	strh	r1, [r7, #14]
 8017176:	4413      	add	r3, r2
 8017178:	781a      	ldrb	r2, [r3, #0]
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	1d98      	adds	r0, r3, #6
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681a      	ldr	r2, [r3, #0]
 8017186:	89fb      	ldrh	r3, [r7, #14]
 8017188:	4413      	add	r3, r2
 801718a:	2203      	movs	r2, #3
 801718c:	4619      	mov	r1, r3
 801718e:	f002 fe40 	bl	8019e12 <memcpy1>
    bufItr = bufItr + 3;
 8017192:	89fb      	ldrh	r3, [r7, #14]
 8017194:	3303      	adds	r3, #3
 8017196:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	f103 0009 	add.w	r0, r3, #9
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681a      	ldr	r2, [r3, #0]
 80171a2:	89fb      	ldrh	r3, [r7, #14]
 80171a4:	4413      	add	r3, r2
 80171a6:	2203      	movs	r2, #3
 80171a8:	4619      	mov	r1, r3
 80171aa:	f002 fe32 	bl	8019e12 <memcpy1>
    bufItr = bufItr + 3;
 80171ae:	89fb      	ldrh	r3, [r7, #14]
 80171b0:	3303      	adds	r3, #3
 80171b2:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	89fb      	ldrh	r3, [r7, #14]
 80171ba:	1c59      	adds	r1, r3, #1
 80171bc:	81f9      	strh	r1, [r7, #14]
 80171be:	4413      	add	r3, r2
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	461a      	mov	r2, r3
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	681a      	ldr	r2, [r3, #0]
 80171cc:	89fb      	ldrh	r3, [r7, #14]
 80171ce:	1c59      	adds	r1, r3, #1
 80171d0:	81f9      	strh	r1, [r7, #14]
 80171d2:	4413      	add	r3, r2
 80171d4:	781b      	ldrb	r3, [r3, #0]
 80171d6:	021a      	lsls	r2, r3, #8
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	68db      	ldr	r3, [r3, #12]
 80171dc:	431a      	orrs	r2, r3
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681a      	ldr	r2, [r3, #0]
 80171e6:	89fb      	ldrh	r3, [r7, #14]
 80171e8:	1c59      	adds	r1, r3, #1
 80171ea:	81f9      	strh	r1, [r7, #14]
 80171ec:	4413      	add	r3, r2
 80171ee:	781b      	ldrb	r3, [r3, #0]
 80171f0:	041a      	lsls	r2, r3, #16
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	431a      	orrs	r2, r3
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	89fb      	ldrh	r3, [r7, #14]
 8017202:	1c59      	adds	r1, r3, #1
 8017204:	81f9      	strh	r1, [r7, #14]
 8017206:	4413      	add	r3, r2
 8017208:	781b      	ldrb	r3, [r3, #0]
 801720a:	061a      	lsls	r2, r3, #24
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	431a      	orrs	r2, r3
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	681a      	ldr	r2, [r3, #0]
 801721a:	89fb      	ldrh	r3, [r7, #14]
 801721c:	1c59      	adds	r1, r3, #1
 801721e:	81f9      	strh	r1, [r7, #14]
 8017220:	4413      	add	r3, r2
 8017222:	781a      	ldrb	r2, [r3, #0]
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681a      	ldr	r2, [r3, #0]
 801722c:	89fb      	ldrh	r3, [r7, #14]
 801722e:	1c59      	adds	r1, r3, #1
 8017230:	81f9      	strh	r1, [r7, #14]
 8017232:	4413      	add	r3, r2
 8017234:	781a      	ldrb	r2, [r3, #0]
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	791b      	ldrb	r3, [r3, #4]
 801723e:	1f1a      	subs	r2, r3, #4
 8017240:	89fb      	ldrh	r3, [r7, #14]
 8017242:	1ad3      	subs	r3, r2, r3
 8017244:	2b10      	cmp	r3, #16
 8017246:	d10e      	bne.n	8017266 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f103 0012 	add.w	r0, r3, #18
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681a      	ldr	r2, [r3, #0]
 8017252:	89fb      	ldrh	r3, [r7, #14]
 8017254:	4413      	add	r3, r2
 8017256:	2210      	movs	r2, #16
 8017258:	4619      	mov	r1, r3
 801725a:	f002 fdda 	bl	8019e12 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801725e:	89fb      	ldrh	r3, [r7, #14]
 8017260:	3310      	adds	r3, #16
 8017262:	81fb      	strh	r3, [r7, #14]
 8017264:	e008      	b.n	8017278 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	791b      	ldrb	r3, [r3, #4]
 801726a:	1f1a      	subs	r2, r3, #4
 801726c:	89fb      	ldrh	r3, [r7, #14]
 801726e:	1ad3      	subs	r3, r2, r3
 8017270:	2b00      	cmp	r3, #0
 8017272:	dd01      	ble.n	8017278 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017274:	2301      	movs	r3, #1
 8017276:	e031      	b.n	80172dc <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	89fb      	ldrh	r3, [r7, #14]
 801727e:	1c59      	adds	r1, r3, #1
 8017280:	81f9      	strh	r1, [r7, #14]
 8017282:	4413      	add	r3, r2
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	461a      	mov	r2, r3
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681a      	ldr	r2, [r3, #0]
 8017290:	89fb      	ldrh	r3, [r7, #14]
 8017292:	1c59      	adds	r1, r3, #1
 8017294:	81f9      	strh	r1, [r7, #14]
 8017296:	4413      	add	r3, r2
 8017298:	781b      	ldrb	r3, [r3, #0]
 801729a:	021a      	lsls	r2, r3, #8
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172a0:	431a      	orrs	r2, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	89fb      	ldrh	r3, [r7, #14]
 80172ac:	1c59      	adds	r1, r3, #1
 80172ae:	81f9      	strh	r1, [r7, #14]
 80172b0:	4413      	add	r3, r2
 80172b2:	781b      	ldrb	r3, [r3, #0]
 80172b4:	041a      	lsls	r2, r3, #16
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172ba:	431a      	orrs	r2, r3
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	89fb      	ldrh	r3, [r7, #14]
 80172c6:	1c59      	adds	r1, r3, #1
 80172c8:	81f9      	strh	r1, [r7, #14]
 80172ca:	4413      	add	r3, r2
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	061a      	lsls	r2, r3, #24
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d4:	431a      	orrs	r2, r3
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80172da:	2300      	movs	r3, #0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3710      	adds	r7, #16
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}

080172e4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b084      	sub	sp, #16
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d003      	beq.n	80172fa <LoRaMacParserData+0x16>
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d101      	bne.n	80172fe <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80172fa:	2302      	movs	r3, #2
 80172fc:	e0e2      	b.n	80174c4 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80172fe:	2300      	movs	r3, #0
 8017300:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	89fb      	ldrh	r3, [r7, #14]
 8017308:	1c59      	adds	r1, r3, #1
 801730a:	81f9      	strh	r1, [r7, #14]
 801730c:	4413      	add	r3, r2
 801730e:	781a      	ldrb	r2, [r3, #0]
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681a      	ldr	r2, [r3, #0]
 8017318:	89fb      	ldrh	r3, [r7, #14]
 801731a:	1c59      	adds	r1, r3, #1
 801731c:	81f9      	strh	r1, [r7, #14]
 801731e:	4413      	add	r3, r2
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	461a      	mov	r2, r3
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	89fb      	ldrh	r3, [r7, #14]
 801732e:	1c59      	adds	r1, r3, #1
 8017330:	81f9      	strh	r1, [r7, #14]
 8017332:	4413      	add	r3, r2
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	021a      	lsls	r2, r3, #8
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	689b      	ldr	r3, [r3, #8]
 801733c:	431a      	orrs	r2, r3
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681a      	ldr	r2, [r3, #0]
 8017346:	89fb      	ldrh	r3, [r7, #14]
 8017348:	1c59      	adds	r1, r3, #1
 801734a:	81f9      	strh	r1, [r7, #14]
 801734c:	4413      	add	r3, r2
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	041a      	lsls	r2, r3, #16
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	689b      	ldr	r3, [r3, #8]
 8017356:	431a      	orrs	r2, r3
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	89fb      	ldrh	r3, [r7, #14]
 8017362:	1c59      	adds	r1, r3, #1
 8017364:	81f9      	strh	r1, [r7, #14]
 8017366:	4413      	add	r3, r2
 8017368:	781b      	ldrb	r3, [r3, #0]
 801736a:	061a      	lsls	r2, r3, #24
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	689b      	ldr	r3, [r3, #8]
 8017370:	431a      	orrs	r2, r3
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	89fb      	ldrh	r3, [r7, #14]
 801737c:	1c59      	adds	r1, r3, #1
 801737e:	81f9      	strh	r1, [r7, #14]
 8017380:	4413      	add	r3, r2
 8017382:	781a      	ldrb	r2, [r3, #0]
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	89fb      	ldrh	r3, [r7, #14]
 801738e:	1c59      	adds	r1, r3, #1
 8017390:	81f9      	strh	r1, [r7, #14]
 8017392:	4413      	add	r3, r2
 8017394:	781b      	ldrb	r3, [r3, #0]
 8017396:	b29a      	uxth	r2, r3
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	681a      	ldr	r2, [r3, #0]
 80173a0:	89fb      	ldrh	r3, [r7, #14]
 80173a2:	1c59      	adds	r1, r3, #1
 80173a4:	81f9      	strh	r1, [r7, #14]
 80173a6:	4413      	add	r3, r2
 80173a8:	781b      	ldrb	r3, [r3, #0]
 80173aa:	0219      	lsls	r1, r3, #8
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	89db      	ldrh	r3, [r3, #14]
 80173b0:	b21a      	sxth	r2, r3
 80173b2:	b20b      	sxth	r3, r1
 80173b4:	4313      	orrs	r3, r2
 80173b6:	b21b      	sxth	r3, r3
 80173b8:	b29a      	uxth	r2, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f103 0010 	add.w	r0, r3, #16
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681a      	ldr	r2, [r3, #0]
 80173c8:	89fb      	ldrh	r3, [r7, #14]
 80173ca:	18d1      	adds	r1, r2, r3
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	7b1b      	ldrb	r3, [r3, #12]
 80173d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173d4:	b2db      	uxtb	r3, r3
 80173d6:	b29b      	uxth	r3, r3
 80173d8:	461a      	mov	r2, r3
 80173da:	f002 fd1a 	bl	8019e12 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	7b1b      	ldrb	r3, [r3, #12]
 80173e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	b29a      	uxth	r2, r3
 80173ea:	89fb      	ldrh	r3, [r7, #14]
 80173ec:	4413      	add	r3, r2
 80173ee:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2200      	movs	r2, #0
 80173f4:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2200      	movs	r2, #0
 80173fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	791b      	ldrb	r3, [r3, #4]
 8017404:	461a      	mov	r2, r3
 8017406:	89fb      	ldrh	r3, [r7, #14]
 8017408:	1ad3      	subs	r3, r2, r3
 801740a:	2b04      	cmp	r3, #4
 801740c:	dd28      	ble.n	8017460 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	89fb      	ldrh	r3, [r7, #14]
 8017414:	1c59      	adds	r1, r3, #1
 8017416:	81f9      	strh	r1, [r7, #14]
 8017418:	4413      	add	r3, r2
 801741a:	781a      	ldrb	r2, [r3, #0]
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	791a      	ldrb	r2, [r3, #4]
 8017426:	89fb      	ldrh	r3, [r7, #14]
 8017428:	b2db      	uxtb	r3, r3
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	b2db      	uxtb	r3, r3
 801742e:	3b04      	subs	r3, #4
 8017430:	b2da      	uxtb	r2, r3
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681a      	ldr	r2, [r3, #0]
 8017440:	89fb      	ldrh	r3, [r7, #14]
 8017442:	18d1      	adds	r1, r2, r3
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801744a:	b29b      	uxth	r3, r3
 801744c:	461a      	mov	r2, r3
 801744e:	f002 fce0 	bl	8019e12 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017458:	b29a      	uxth	r2, r3
 801745a:	89fb      	ldrh	r3, [r7, #14]
 801745c:	4413      	add	r3, r2
 801745e:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681a      	ldr	r2, [r3, #0]
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	791b      	ldrb	r3, [r3, #4]
 8017468:	3b04      	subs	r3, #4
 801746a:	4413      	add	r3, r2
 801746c:	781b      	ldrb	r3, [r3, #0]
 801746e:	461a      	mov	r2, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	6819      	ldr	r1, [r3, #0]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	791b      	ldrb	r3, [r3, #4]
 8017480:	3b03      	subs	r3, #3
 8017482:	440b      	add	r3, r1
 8017484:	781b      	ldrb	r3, [r3, #0]
 8017486:	021b      	lsls	r3, r3, #8
 8017488:	431a      	orrs	r2, r3
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6819      	ldr	r1, [r3, #0]
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	791b      	ldrb	r3, [r3, #4]
 801749a:	3b02      	subs	r3, #2
 801749c:	440b      	add	r3, r1
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	041b      	lsls	r3, r3, #16
 80174a2:	431a      	orrs	r2, r3
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6819      	ldr	r1, [r3, #0]
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	791b      	ldrb	r3, [r3, #4]
 80174b4:	3b01      	subs	r3, #1
 80174b6:	440b      	add	r3, r1
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	061b      	lsls	r3, r3, #24
 80174bc:	431a      	orrs	r2, r3
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174c2:	2300      	movs	r3, #0
}
 80174c4:	4618      	mov	r0, r3
 80174c6:	3710      	adds	r7, #16
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174cc:	b580      	push	{r7, lr}
 80174ce:	b084      	sub	sp, #16
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d003      	beq.n	80174e2 <LoRaMacSerializerJoinRequest+0x16>
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d101      	bne.n	80174e6 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80174e2:	2301      	movs	r3, #1
 80174e4:	e070      	b.n	80175c8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80174e6:	2300      	movs	r3, #0
 80174e8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	791b      	ldrb	r3, [r3, #4]
 80174ee:	2b16      	cmp	r3, #22
 80174f0:	d801      	bhi.n	80174f6 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80174f2:	2302      	movs	r3, #2
 80174f4:	e068      	b.n	80175c8 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681a      	ldr	r2, [r3, #0]
 80174fa:	89fb      	ldrh	r3, [r7, #14]
 80174fc:	1c59      	adds	r1, r3, #1
 80174fe:	81f9      	strh	r1, [r7, #14]
 8017500:	4413      	add	r3, r2
 8017502:	687a      	ldr	r2, [r7, #4]
 8017504:	7952      	ldrb	r2, [r2, #5]
 8017506:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681a      	ldr	r2, [r3, #0]
 801750c:	89fb      	ldrh	r3, [r7, #14]
 801750e:	18d0      	adds	r0, r2, r3
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	3306      	adds	r3, #6
 8017514:	2208      	movs	r2, #8
 8017516:	4619      	mov	r1, r3
 8017518:	f002 fc96 	bl	8019e48 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801751c:	89fb      	ldrh	r3, [r7, #14]
 801751e:	3308      	adds	r3, #8
 8017520:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681a      	ldr	r2, [r3, #0]
 8017526:	89fb      	ldrh	r3, [r7, #14]
 8017528:	18d0      	adds	r0, r2, r3
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	330e      	adds	r3, #14
 801752e:	2208      	movs	r2, #8
 8017530:	4619      	mov	r1, r3
 8017532:	f002 fc89 	bl	8019e48 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017536:	89fb      	ldrh	r3, [r7, #14]
 8017538:	3308      	adds	r3, #8
 801753a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	8ad9      	ldrh	r1, [r3, #22]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681a      	ldr	r2, [r3, #0]
 8017544:	89fb      	ldrh	r3, [r7, #14]
 8017546:	1c58      	adds	r0, r3, #1
 8017548:	81f8      	strh	r0, [r7, #14]
 801754a:	4413      	add	r3, r2
 801754c:	b2ca      	uxtb	r2, r1
 801754e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	8adb      	ldrh	r3, [r3, #22]
 8017554:	0a1b      	lsrs	r3, r3, #8
 8017556:	b299      	uxth	r1, r3
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	89fb      	ldrh	r3, [r7, #14]
 801755e:	1c58      	adds	r0, r3, #1
 8017560:	81f8      	strh	r0, [r7, #14]
 8017562:	4413      	add	r3, r2
 8017564:	b2ca      	uxtb	r2, r1
 8017566:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	6999      	ldr	r1, [r3, #24]
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681a      	ldr	r2, [r3, #0]
 8017570:	89fb      	ldrh	r3, [r7, #14]
 8017572:	1c58      	adds	r0, r3, #1
 8017574:	81f8      	strh	r0, [r7, #14]
 8017576:	4413      	add	r3, r2
 8017578:	b2ca      	uxtb	r2, r1
 801757a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	699b      	ldr	r3, [r3, #24]
 8017580:	0a19      	lsrs	r1, r3, #8
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	89fb      	ldrh	r3, [r7, #14]
 8017588:	1c58      	adds	r0, r3, #1
 801758a:	81f8      	strh	r0, [r7, #14]
 801758c:	4413      	add	r3, r2
 801758e:	b2ca      	uxtb	r2, r1
 8017590:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	699b      	ldr	r3, [r3, #24]
 8017596:	0c19      	lsrs	r1, r3, #16
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681a      	ldr	r2, [r3, #0]
 801759c:	89fb      	ldrh	r3, [r7, #14]
 801759e:	1c58      	adds	r0, r3, #1
 80175a0:	81f8      	strh	r0, [r7, #14]
 80175a2:	4413      	add	r3, r2
 80175a4:	b2ca      	uxtb	r2, r1
 80175a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	699b      	ldr	r3, [r3, #24]
 80175ac:	0e19      	lsrs	r1, r3, #24
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681a      	ldr	r2, [r3, #0]
 80175b2:	89fb      	ldrh	r3, [r7, #14]
 80175b4:	1c58      	adds	r0, r3, #1
 80175b6:	81f8      	strh	r0, [r7, #14]
 80175b8:	4413      	add	r3, r2
 80175ba:	b2ca      	uxtb	r2, r1
 80175bc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175be:	89fb      	ldrh	r3, [r7, #14]
 80175c0:	b2da      	uxtb	r2, r3
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175c6:	2300      	movs	r3, #0
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3710      	adds	r7, #16
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}

080175d0 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b084      	sub	sp, #16
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d003      	beq.n	80175e6 <LoRaMacSerializerData+0x16>
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d101      	bne.n	80175ea <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80175e6:	2301      	movs	r3, #1
 80175e8:	e0e5      	b.n	80177b6 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80175ea:	2300      	movs	r3, #0
 80175ec:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80175ee:	2308      	movs	r3, #8
 80175f0:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	7b1b      	ldrb	r3, [r3, #12]
 80175f6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80175fa:	b2db      	uxtb	r3, r3
 80175fc:	b29a      	uxth	r2, r3
 80175fe:	89bb      	ldrh	r3, [r7, #12]
 8017600:	4413      	add	r3, r2
 8017602:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801760a:	2b00      	cmp	r3, #0
 801760c:	d002      	beq.n	8017614 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801760e:	89bb      	ldrh	r3, [r7, #12]
 8017610:	3301      	adds	r3, #1
 8017612:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801761a:	b29a      	uxth	r2, r3
 801761c:	89bb      	ldrh	r3, [r7, #12]
 801761e:	4413      	add	r3, r2
 8017620:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017622:	89bb      	ldrh	r3, [r7, #12]
 8017624:	3304      	adds	r3, #4
 8017626:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	791b      	ldrb	r3, [r3, #4]
 801762c:	b29b      	uxth	r3, r3
 801762e:	89ba      	ldrh	r2, [r7, #12]
 8017630:	429a      	cmp	r2, r3
 8017632:	d901      	bls.n	8017638 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017634:	2302      	movs	r3, #2
 8017636:	e0be      	b.n	80177b6 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681a      	ldr	r2, [r3, #0]
 801763c:	89fb      	ldrh	r3, [r7, #14]
 801763e:	1c59      	adds	r1, r3, #1
 8017640:	81f9      	strh	r1, [r7, #14]
 8017642:	4413      	add	r3, r2
 8017644:	687a      	ldr	r2, [r7, #4]
 8017646:	7952      	ldrb	r2, [r2, #5]
 8017648:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	6899      	ldr	r1, [r3, #8]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681a      	ldr	r2, [r3, #0]
 8017652:	89fb      	ldrh	r3, [r7, #14]
 8017654:	1c58      	adds	r0, r3, #1
 8017656:	81f8      	strh	r0, [r7, #14]
 8017658:	4413      	add	r3, r2
 801765a:	b2ca      	uxtb	r2, r1
 801765c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	689b      	ldr	r3, [r3, #8]
 8017662:	0a19      	lsrs	r1, r3, #8
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681a      	ldr	r2, [r3, #0]
 8017668:	89fb      	ldrh	r3, [r7, #14]
 801766a:	1c58      	adds	r0, r3, #1
 801766c:	81f8      	strh	r0, [r7, #14]
 801766e:	4413      	add	r3, r2
 8017670:	b2ca      	uxtb	r2, r1
 8017672:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	689b      	ldr	r3, [r3, #8]
 8017678:	0c19      	lsrs	r1, r3, #16
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	681a      	ldr	r2, [r3, #0]
 801767e:	89fb      	ldrh	r3, [r7, #14]
 8017680:	1c58      	adds	r0, r3, #1
 8017682:	81f8      	strh	r0, [r7, #14]
 8017684:	4413      	add	r3, r2
 8017686:	b2ca      	uxtb	r2, r1
 8017688:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	689b      	ldr	r3, [r3, #8]
 801768e:	0e19      	lsrs	r1, r3, #24
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681a      	ldr	r2, [r3, #0]
 8017694:	89fb      	ldrh	r3, [r7, #14]
 8017696:	1c58      	adds	r0, r3, #1
 8017698:	81f8      	strh	r0, [r7, #14]
 801769a:	4413      	add	r3, r2
 801769c:	b2ca      	uxtb	r2, r1
 801769e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	89fb      	ldrh	r3, [r7, #14]
 80176a6:	1c59      	adds	r1, r3, #1
 80176a8:	81f9      	strh	r1, [r7, #14]
 80176aa:	4413      	add	r3, r2
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	7b12      	ldrb	r2, [r2, #12]
 80176b0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	89d9      	ldrh	r1, [r3, #14]
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	89fb      	ldrh	r3, [r7, #14]
 80176bc:	1c58      	adds	r0, r3, #1
 80176be:	81f8      	strh	r0, [r7, #14]
 80176c0:	4413      	add	r3, r2
 80176c2:	b2ca      	uxtb	r2, r1
 80176c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	89db      	ldrh	r3, [r3, #14]
 80176ca:	0a1b      	lsrs	r3, r3, #8
 80176cc:	b299      	uxth	r1, r3
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	89fb      	ldrh	r3, [r7, #14]
 80176d4:	1c58      	adds	r0, r3, #1
 80176d6:	81f8      	strh	r0, [r7, #14]
 80176d8:	4413      	add	r3, r2
 80176da:	b2ca      	uxtb	r2, r1
 80176dc:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681a      	ldr	r2, [r3, #0]
 80176e2:	89fb      	ldrh	r3, [r7, #14]
 80176e4:	18d0      	adds	r0, r2, r3
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	f103 0110 	add.w	r1, r3, #16
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	7b1b      	ldrb	r3, [r3, #12]
 80176f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	b29b      	uxth	r3, r3
 80176f8:	461a      	mov	r2, r3
 80176fa:	f002 fb8a 	bl	8019e12 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	7b1b      	ldrb	r3, [r3, #12]
 8017702:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017706:	b2db      	uxtb	r3, r3
 8017708:	b29a      	uxth	r2, r3
 801770a:	89fb      	ldrh	r3, [r7, #14]
 801770c:	4413      	add	r3, r2
 801770e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017716:	2b00      	cmp	r3, #0
 8017718:	d009      	beq.n	801772e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	89fb      	ldrh	r3, [r7, #14]
 8017720:	1c59      	adds	r1, r3, #1
 8017722:	81f9      	strh	r1, [r7, #14]
 8017724:	4413      	add	r3, r2
 8017726:	687a      	ldr	r2, [r7, #4]
 8017728:	f892 2020 	ldrb.w	r2, [r2, #32]
 801772c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	89fb      	ldrh	r3, [r7, #14]
 8017734:	18d0      	adds	r0, r2, r3
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017740:	b29b      	uxth	r3, r3
 8017742:	461a      	mov	r2, r3
 8017744:	f002 fb65 	bl	8019e12 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801774e:	b29a      	uxth	r2, r3
 8017750:	89fb      	ldrh	r3, [r7, #14]
 8017752:	4413      	add	r3, r2
 8017754:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681a      	ldr	r2, [r3, #0]
 801775e:	89fb      	ldrh	r3, [r7, #14]
 8017760:	1c58      	adds	r0, r3, #1
 8017762:	81f8      	strh	r0, [r7, #14]
 8017764:	4413      	add	r3, r2
 8017766:	b2ca      	uxtb	r2, r1
 8017768:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801776e:	0a19      	lsrs	r1, r3, #8
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	681a      	ldr	r2, [r3, #0]
 8017774:	89fb      	ldrh	r3, [r7, #14]
 8017776:	1c58      	adds	r0, r3, #1
 8017778:	81f8      	strh	r0, [r7, #14]
 801777a:	4413      	add	r3, r2
 801777c:	b2ca      	uxtb	r2, r1
 801777e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017784:	0c19      	lsrs	r1, r3, #16
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681a      	ldr	r2, [r3, #0]
 801778a:	89fb      	ldrh	r3, [r7, #14]
 801778c:	1c58      	adds	r0, r3, #1
 801778e:	81f8      	strh	r0, [r7, #14]
 8017790:	4413      	add	r3, r2
 8017792:	b2ca      	uxtb	r2, r1
 8017794:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779a:	0e19      	lsrs	r1, r3, #24
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681a      	ldr	r2, [r3, #0]
 80177a0:	89fb      	ldrh	r3, [r7, #14]
 80177a2:	1c58      	adds	r0, r3, #1
 80177a4:	81f8      	strh	r0, [r7, #14]
 80177a6:	4413      	add	r3, r2
 80177a8:	b2ca      	uxtb	r2, r1
 80177aa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80177ac:	89fb      	ldrh	r3, [r7, #14]
 80177ae:	b2da      	uxtb	r2, r3
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80177b4:	2300      	movs	r3, #0
}
 80177b6:	4618      	mov	r0, r3
 80177b8:	3710      	adds	r7, #16
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}

080177be <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177be:	b480      	push	{r7}
 80177c0:	b083      	sub	sp, #12
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	4603      	mov	r3, r0
 80177c6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177c8:	79fb      	ldrb	r3, [r7, #7]
 80177ca:	2b05      	cmp	r3, #5
 80177cc:	d101      	bne.n	80177d2 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177ce:	2301      	movs	r3, #1
 80177d0:	e000      	b.n	80177d4 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80177d2:	2300      	movs	r3, #0
        }
    }
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	370c      	adds	r7, #12
 80177d8:	46bd      	mov	sp, r7
 80177da:	bc80      	pop	{r7}
 80177dc:	4770      	bx	lr

080177de <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80177de:	b580      	push	{r7, lr}
 80177e0:	b084      	sub	sp, #16
 80177e2:	af00      	add	r7, sp, #0
 80177e4:	4603      	mov	r3, r0
 80177e6:	6039      	str	r1, [r7, #0]
 80177e8:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80177ea:	2300      	movs	r3, #0
 80177ec:	60bb      	str	r3, [r7, #8]
    switch( region )
 80177ee:	79fb      	ldrb	r3, [r7, #7]
 80177f0:	2b05      	cmp	r3, #5
 80177f2:	d105      	bne.n	8017800 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80177f4:	6838      	ldr	r0, [r7, #0]
 80177f6:	f001 f995 	bl	8018b24 <RegionEU868GetPhyParam>
 80177fa:	4603      	mov	r3, r0
 80177fc:	60fb      	str	r3, [r7, #12]
 80177fe:	e001      	b.n	8017804 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017800:	68bb      	ldr	r3, [r7, #8]
 8017802:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	4618      	mov	r0, r3
 8017808:	3710      	adds	r7, #16
 801780a:	46bd      	mov	sp, r7
 801780c:	bd80      	pop	{r7, pc}

0801780e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801780e:	b580      	push	{r7, lr}
 8017810:	b082      	sub	sp, #8
 8017812:	af00      	add	r7, sp, #0
 8017814:	4603      	mov	r3, r0
 8017816:	6039      	str	r1, [r7, #0]
 8017818:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801781a:	79fb      	ldrb	r3, [r7, #7]
 801781c:	2b05      	cmp	r3, #5
 801781e:	d103      	bne.n	8017828 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017820:	6838      	ldr	r0, [r7, #0]
 8017822:	f001 facb 	bl	8018dbc <RegionEU868SetBandTxDone>
 8017826:	e000      	b.n	801782a <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017828:	bf00      	nop
        }
    }
}
 801782a:	3708      	adds	r7, #8
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}

08017830 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b082      	sub	sp, #8
 8017834:	af00      	add	r7, sp, #0
 8017836:	4603      	mov	r3, r0
 8017838:	6039      	str	r1, [r7, #0]
 801783a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801783c:	79fb      	ldrb	r3, [r7, #7]
 801783e:	2b05      	cmp	r3, #5
 8017840:	d103      	bne.n	801784a <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017842:	6838      	ldr	r0, [r7, #0]
 8017844:	f001 fae6 	bl	8018e14 <RegionEU868InitDefaults>
 8017848:	e000      	b.n	801784c <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801784a:	bf00      	nop
        }
    }
}
 801784c:	bf00      	nop
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	4603      	mov	r3, r0
 801785c:	6039      	str	r1, [r7, #0]
 801785e:	71fb      	strb	r3, [r7, #7]
 8017860:	4613      	mov	r3, r2
 8017862:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017864:	79fb      	ldrb	r3, [r7, #7]
 8017866:	2b05      	cmp	r3, #5
 8017868:	d106      	bne.n	8017878 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801786a:	79bb      	ldrb	r3, [r7, #6]
 801786c:	4619      	mov	r1, r3
 801786e:	6838      	ldr	r0, [r7, #0]
 8017870:	f001 fb6e 	bl	8018f50 <RegionEU868Verify>
 8017874:	4603      	mov	r3, r0
 8017876:	e000      	b.n	801787a <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017878:	2300      	movs	r3, #0
        }
    }
}
 801787a:	4618      	mov	r0, r3
 801787c:	3708      	adds	r7, #8
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017882:	b580      	push	{r7, lr}
 8017884:	b082      	sub	sp, #8
 8017886:	af00      	add	r7, sp, #0
 8017888:	4603      	mov	r3, r0
 801788a:	6039      	str	r1, [r7, #0]
 801788c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801788e:	79fb      	ldrb	r3, [r7, #7]
 8017890:	2b05      	cmp	r3, #5
 8017892:	d103      	bne.n	801789c <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017894:	6838      	ldr	r0, [r7, #0]
 8017896:	f001 fbd7 	bl	8019048 <RegionEU868ApplyCFList>
 801789a:	e000      	b.n	801789e <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801789c:	bf00      	nop
        }
    }
}
 801789e:	bf00      	nop
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	4603      	mov	r3, r0
 80178ae:	6039      	str	r1, [r7, #0]
 80178b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178b2:	79fb      	ldrb	r3, [r7, #7]
 80178b4:	2b05      	cmp	r3, #5
 80178b6:	d104      	bne.n	80178c2 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80178b8:	6838      	ldr	r0, [r7, #0]
 80178ba:	f001 fc39 	bl	8019130 <RegionEU868ChanMaskSet>
 80178be:	4603      	mov	r3, r0
 80178c0:	e000      	b.n	80178c4 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80178c2:	2300      	movs	r3, #0
        }
    }
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	3708      	adds	r7, #8
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	603b      	str	r3, [r7, #0]
 80178d4:	4603      	mov	r3, r0
 80178d6:	71fb      	strb	r3, [r7, #7]
 80178d8:	460b      	mov	r3, r1
 80178da:	71bb      	strb	r3, [r7, #6]
 80178dc:	4613      	mov	r3, r2
 80178de:	717b      	strb	r3, [r7, #5]
    switch( region )
 80178e0:	79fb      	ldrb	r3, [r7, #7]
 80178e2:	2b05      	cmp	r3, #5
 80178e4:	d107      	bne.n	80178f6 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80178e6:	7979      	ldrb	r1, [r7, #5]
 80178e8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80178ec:	693b      	ldr	r3, [r7, #16]
 80178ee:	683a      	ldr	r2, [r7, #0]
 80178f0:	f001 fc48 	bl	8019184 <RegionEU868ComputeRxWindowParameters>
 80178f4:	e000      	b.n	80178f8 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80178f6:	bf00      	nop
        }
    }
}
 80178f8:	bf00      	nop
 80178fa:	3708      	adds	r7, #8
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b084      	sub	sp, #16
 8017904:	af00      	add	r7, sp, #0
 8017906:	4603      	mov	r3, r0
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	607a      	str	r2, [r7, #4]
 801790c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801790e:	7bfb      	ldrb	r3, [r7, #15]
 8017910:	2b05      	cmp	r3, #5
 8017912:	d105      	bne.n	8017920 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017914:	6879      	ldr	r1, [r7, #4]
 8017916:	68b8      	ldr	r0, [r7, #8]
 8017918:	f001 fc8e 	bl	8019238 <RegionEU868RxConfig>
 801791c:	4603      	mov	r3, r0
 801791e:	e000      	b.n	8017922 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017920:	2300      	movs	r3, #0
        }
    }
}
 8017922:	4618      	mov	r0, r3
 8017924:	3710      	adds	r7, #16
 8017926:	46bd      	mov	sp, r7
 8017928:	bd80      	pop	{r7, pc}

0801792a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801792a:	b580      	push	{r7, lr}
 801792c:	b084      	sub	sp, #16
 801792e:	af00      	add	r7, sp, #0
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
 8017934:	603b      	str	r3, [r7, #0]
 8017936:	4603      	mov	r3, r0
 8017938:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801793a:	7bfb      	ldrb	r3, [r7, #15]
 801793c:	2b05      	cmp	r3, #5
 801793e:	d106      	bne.n	801794e <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017940:	683a      	ldr	r2, [r7, #0]
 8017942:	6879      	ldr	r1, [r7, #4]
 8017944:	68b8      	ldr	r0, [r7, #8]
 8017946:	f001 fd47 	bl	80193d8 <RegionEU868TxConfig>
 801794a:	4603      	mov	r3, r0
 801794c:	e000      	b.n	8017950 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801794e:	2300      	movs	r3, #0
        }
    }
}
 8017950:	4618      	mov	r0, r3
 8017952:	3710      	adds	r7, #16
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}

08017958 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b086      	sub	sp, #24
 801795c:	af02      	add	r7, sp, #8
 801795e:	60b9      	str	r1, [r7, #8]
 8017960:	607a      	str	r2, [r7, #4]
 8017962:	603b      	str	r3, [r7, #0]
 8017964:	4603      	mov	r3, r0
 8017966:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017968:	7bfb      	ldrb	r3, [r7, #15]
 801796a:	2b05      	cmp	r3, #5
 801796c:	d109      	bne.n	8017982 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801796e:	69fb      	ldr	r3, [r7, #28]
 8017970:	9300      	str	r3, [sp, #0]
 8017972:	69bb      	ldr	r3, [r7, #24]
 8017974:	683a      	ldr	r2, [r7, #0]
 8017976:	6879      	ldr	r1, [r7, #4]
 8017978:	68b8      	ldr	r0, [r7, #8]
 801797a:	f001 fdfd 	bl	8019578 <RegionEU868LinkAdrReq>
 801797e:	4603      	mov	r3, r0
 8017980:	e000      	b.n	8017984 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017982:	2300      	movs	r3, #0
        }
    }
}
 8017984:	4618      	mov	r0, r3
 8017986:	3710      	adds	r7, #16
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}

0801798c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b082      	sub	sp, #8
 8017990:	af00      	add	r7, sp, #0
 8017992:	4603      	mov	r3, r0
 8017994:	6039      	str	r1, [r7, #0]
 8017996:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017998:	79fb      	ldrb	r3, [r7, #7]
 801799a:	2b05      	cmp	r3, #5
 801799c:	d104      	bne.n	80179a8 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801799e:	6838      	ldr	r0, [r7, #0]
 80179a0:	f001 ff0c 	bl	80197bc <RegionEU868RxParamSetupReq>
 80179a4:	4603      	mov	r3, r0
 80179a6:	e000      	b.n	80179aa <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179a8:	2300      	movs	r3, #0
        }
    }
}
 80179aa:	4618      	mov	r0, r3
 80179ac:	3708      	adds	r7, #8
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}

080179b2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80179b2:	b580      	push	{r7, lr}
 80179b4:	b082      	sub	sp, #8
 80179b6:	af00      	add	r7, sp, #0
 80179b8:	4603      	mov	r3, r0
 80179ba:	6039      	str	r1, [r7, #0]
 80179bc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179be:	79fb      	ldrb	r3, [r7, #7]
 80179c0:	2b05      	cmp	r3, #5
 80179c2:	d104      	bne.n	80179ce <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80179c4:	6838      	ldr	r0, [r7, #0]
 80179c6:	f001 ff37 	bl	8019838 <RegionEU868NewChannelReq>
 80179ca:	4603      	mov	r3, r0
 80179cc:	e000      	b.n	80179d0 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80179ce:	2300      	movs	r3, #0
        }
    }
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3708      	adds	r7, #8
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	4603      	mov	r3, r0
 80179e0:	6039      	str	r1, [r7, #0]
 80179e2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179e4:	79fb      	ldrb	r3, [r7, #7]
 80179e6:	2b05      	cmp	r3, #5
 80179e8:	d104      	bne.n	80179f4 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80179ea:	6838      	ldr	r0, [r7, #0]
 80179ec:	f001 ff82 	bl	80198f4 <RegionEU868TxParamSetupReq>
 80179f0:	4603      	mov	r3, r0
 80179f2:	e000      	b.n	80179f6 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179f4:	2300      	movs	r3, #0
        }
    }
}
 80179f6:	4618      	mov	r0, r3
 80179f8:	3708      	adds	r7, #8
 80179fa:	46bd      	mov	sp, r7
 80179fc:	bd80      	pop	{r7, pc}

080179fe <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80179fe:	b580      	push	{r7, lr}
 8017a00:	b082      	sub	sp, #8
 8017a02:	af00      	add	r7, sp, #0
 8017a04:	4603      	mov	r3, r0
 8017a06:	6039      	str	r1, [r7, #0]
 8017a08:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a0a:	79fb      	ldrb	r3, [r7, #7]
 8017a0c:	2b05      	cmp	r3, #5
 8017a0e:	d104      	bne.n	8017a1a <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017a10:	6838      	ldr	r0, [r7, #0]
 8017a12:	f001 ff7b 	bl	801990c <RegionEU868DlChannelReq>
 8017a16:	4603      	mov	r3, r0
 8017a18:	e000      	b.n	8017a1c <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017a1a:	2300      	movs	r3, #0
        }
    }
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3708      	adds	r7, #8
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	71fb      	strb	r3, [r7, #7]
 8017a2e:	460b      	mov	r3, r1
 8017a30:	71bb      	strb	r3, [r7, #6]
 8017a32:	4613      	mov	r3, r2
 8017a34:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017a36:	79fb      	ldrb	r3, [r7, #7]
 8017a38:	2b05      	cmp	r3, #5
 8017a3a:	d108      	bne.n	8017a4e <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017a3c:	797a      	ldrb	r2, [r7, #5]
 8017a3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a42:	4611      	mov	r1, r2
 8017a44:	4618      	mov	r0, r3
 8017a46:	f001 ffab 	bl	80199a0 <RegionEU868AlternateDr>
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	e000      	b.n	8017a50 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017a4e:	2300      	movs	r3, #0
        }
    }
}
 8017a50:	4618      	mov	r0, r3
 8017a52:	3708      	adds	r7, #8
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}

08017a58 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b084      	sub	sp, #16
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60b9      	str	r1, [r7, #8]
 8017a60:	607a      	str	r2, [r7, #4]
 8017a62:	603b      	str	r3, [r7, #0]
 8017a64:	4603      	mov	r3, r0
 8017a66:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a68:	7bfb      	ldrb	r3, [r7, #15]
 8017a6a:	2b05      	cmp	r3, #5
 8017a6c:	d107      	bne.n	8017a7e <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017a6e:	69bb      	ldr	r3, [r7, #24]
 8017a70:	683a      	ldr	r2, [r7, #0]
 8017a72:	6879      	ldr	r1, [r7, #4]
 8017a74:	68b8      	ldr	r0, [r7, #8]
 8017a76:	f001 ffa3 	bl	80199c0 <RegionEU868NextChannel>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	e000      	b.n	8017a80 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017a7e:	2309      	movs	r3, #9
        }
    }
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3710      	adds	r7, #16
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b082      	sub	sp, #8
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	4603      	mov	r3, r0
 8017a90:	6039      	str	r1, [r7, #0]
 8017a92:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a94:	79fb      	ldrb	r3, [r7, #7]
 8017a96:	2b05      	cmp	r3, #5
 8017a98:	d103      	bne.n	8017aa2 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017a9a:	6838      	ldr	r0, [r7, #0]
 8017a9c:	f002 f90a 	bl	8019cb4 <RegionEU868SetContinuousWave>
 8017aa0:	e000      	b.n	8017aa4 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017aa2:	bf00      	nop
        }
    }
}
 8017aa4:	bf00      	nop
 8017aa6:	3708      	adds	r7, #8
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	bd80      	pop	{r7, pc}

08017aac <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017aac:	b590      	push	{r4, r7, lr}
 8017aae:	b083      	sub	sp, #12
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	4604      	mov	r4, r0
 8017ab4:	4608      	mov	r0, r1
 8017ab6:	4611      	mov	r1, r2
 8017ab8:	461a      	mov	r2, r3
 8017aba:	4623      	mov	r3, r4
 8017abc:	71fb      	strb	r3, [r7, #7]
 8017abe:	4603      	mov	r3, r0
 8017ac0:	71bb      	strb	r3, [r7, #6]
 8017ac2:	460b      	mov	r3, r1
 8017ac4:	717b      	strb	r3, [r7, #5]
 8017ac6:	4613      	mov	r3, r2
 8017ac8:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017aca:	79fb      	ldrb	r3, [r7, #7]
 8017acc:	2b05      	cmp	r3, #5
 8017ace:	d109      	bne.n	8017ae4 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017ad0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017ad4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017ad8:	79bb      	ldrb	r3, [r7, #6]
 8017ada:	4618      	mov	r0, r3
 8017adc:	f002 f938 	bl	8019d50 <RegionEU868ApplyDrOffset>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	e000      	b.n	8017ae6 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017ae4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	370c      	adds	r7, #12
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd90      	pop	{r4, r7, pc}
	...

08017af0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017af0:	b480      	push	{r7}
 8017af2:	b083      	sub	sp, #12
 8017af4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017af6:	4b04      	ldr	r3, [pc, #16]	; (8017b08 <RegionGetVersion+0x18>)
 8017af8:	607b      	str	r3, [r7, #4]

    return version;
 8017afa:	687b      	ldr	r3, [r7, #4]
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	370c      	adds	r7, #12
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bc80      	pop	{r7}
 8017b04:	4770      	bx	lr
 8017b06:	bf00      	nop
 8017b08:	01010003 	.word	0x01010003

08017b0c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b087      	sub	sp, #28
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	4608      	mov	r0, r1
 8017b16:	4639      	mov	r1, r7
 8017b18:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	881b      	ldrh	r3, [r3, #0]
 8017b24:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017b26:	7afb      	ldrb	r3, [r7, #11]
 8017b28:	f083 0301 	eor.w	r3, r3, #1
 8017b2c:	b2db      	uxtb	r3, r3
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d01b      	beq.n	8017b6a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b32:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b36:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017b3e:	d202      	bcs.n	8017b46 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017b40:	2364      	movs	r3, #100	; 0x64
 8017b42:	82bb      	strh	r3, [r7, #20]
 8017b44:	e00b      	b.n	8017b5e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017b46:	683b      	ldr	r3, [r7, #0]
 8017b48:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	d803      	bhi.n	8017b58 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b54:	82bb      	strh	r3, [r7, #20]
 8017b56:	e002      	b.n	8017b5e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b58:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b5c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017b5e:	8aba      	ldrh	r2, [r7, #20]
 8017b60:	8afb      	ldrh	r3, [r7, #22]
 8017b62:	4293      	cmp	r3, r2
 8017b64:	bf38      	it	cc
 8017b66:	4613      	movcc	r3, r2
 8017b68:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017b6a:	8afb      	ldrh	r3, [r7, #22]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d101      	bne.n	8017b74 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017b70:	2301      	movs	r3, #1
 8017b72:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017b74:	8afb      	ldrh	r3, [r7, #22]
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	371c      	adds	r7, #28
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	bc80      	pop	{r7}
 8017b7e:	4770      	bx	lr

08017b80 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b08e      	sub	sp, #56	; 0x38
 8017b84:	af02      	add	r7, sp, #8
 8017b86:	60f8      	str	r0, [r7, #12]
 8017b88:	4608      	mov	r0, r1
 8017b8a:	4639      	mov	r1, r7
 8017b8c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b90:	4603      	mov	r3, r0
 8017b92:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	881b      	ldrh	r3, [r3, #0]
 8017b98:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017b9a:	4b4b      	ldr	r3, [pc, #300]	; (8017cc8 <SetMaxTimeCredits+0x148>)
 8017b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017b9e:	463b      	mov	r3, r7
 8017ba0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ba4:	f005 fdc0 	bl	801d728 <SysTimeToMs>
 8017ba8:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017baa:	f107 0314 	add.w	r3, r7, #20
 8017bae:	2200      	movs	r2, #0
 8017bb0:	601a      	str	r2, [r3, #0]
 8017bb2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017bb4:	7af9      	ldrb	r1, [r7, #11]
 8017bb6:	463b      	mov	r3, r7
 8017bb8:	cb0c      	ldmia	r3, {r2, r3}
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	f7ff ffa6 	bl	8017b0c <GetDutyCycle>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017bc4:	7afb      	ldrb	r3, [r7, #11]
 8017bc6:	f083 0301 	eor.w	r3, r3, #1
 8017bca:	b2db      	uxtb	r3, r3
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d062      	beq.n	8017c96 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017bd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bd2:	2b64      	cmp	r3, #100	; 0x64
 8017bd4:	d105      	bne.n	8017be2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017bd6:	4b3c      	ldr	r3, [pc, #240]	; (8017cc8 <SetMaxTimeCredits+0x148>)
 8017bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bde:	609a      	str	r2, [r3, #8]
 8017be0:	e00b      	b.n	8017bfa <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017be2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017be8:	d105      	bne.n	8017bf6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017bea:	4b38      	ldr	r3, [pc, #224]	; (8017ccc <SetMaxTimeCredits+0x14c>)
 8017bec:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bf2:	609a      	str	r2, [r3, #8]
 8017bf4:	e001      	b.n	8017bfa <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017bf6:	4b36      	ldr	r3, [pc, #216]	; (8017cd0 <SetMaxTimeCredits+0x150>)
 8017bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	689a      	ldr	r2, [r3, #8]
 8017bfe:	f107 031c 	add.w	r3, r7, #28
 8017c02:	4611      	mov	r1, r2
 8017c04:	4618      	mov	r0, r3
 8017c06:	f005 fdb7 	bl	801d778 <SysTimeFromMs>
 8017c0a:	f107 0014 	add.w	r0, r7, #20
 8017c0e:	6a3b      	ldr	r3, [r7, #32]
 8017c10:	9300      	str	r3, [sp, #0]
 8017c12:	69fb      	ldr	r3, [r7, #28]
 8017c14:	463a      	mov	r2, r7
 8017c16:	ca06      	ldmia	r2, {r1, r2}
 8017c18:	f005 fcc7 	bl	801d5aa <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c1c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c20:	f083 0301 	eor.w	r3, r3, #1
 8017c24:	b2db      	uxtb	r3, r3
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d006      	beq.n	8017c38 <SetMaxTimeCredits+0xb8>
 8017c2a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017c2e:	f083 0301 	eor.w	r3, r3, #1
 8017c32:	b2db      	uxtb	r3, r3
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d108      	bne.n	8017c4a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c3e:	429a      	cmp	r2, r3
 8017c40:	d103      	bne.n	8017c4a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017c42:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c44:	4a23      	ldr	r2, [pc, #140]	; (8017cd4 <SetMaxTimeCredits+0x154>)
 8017c46:	4293      	cmp	r3, r2
 8017c48:	d92f      	bls.n	8017caa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c4e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c50:	683b      	ldr	r3, [r7, #0]
 8017c52:	4a21      	ldr	r2, [pc, #132]	; (8017cd8 <SetMaxTimeCredits+0x158>)
 8017c54:	4293      	cmp	r3, r2
 8017c56:	d928      	bls.n	8017caa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c5e:	3b30      	subs	r3, #48	; 0x30
 8017c60:	4a1e      	ldr	r2, [pc, #120]	; (8017cdc <SetMaxTimeCredits+0x15c>)
 8017c62:	fba2 2303 	umull	r2, r3, r2, r3
 8017c66:	0c1b      	lsrs	r3, r3, #16
 8017c68:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017c6a:	697b      	ldr	r3, [r7, #20]
 8017c6c:	4a1c      	ldr	r2, [pc, #112]	; (8017ce0 <SetMaxTimeCredits+0x160>)
 8017c6e:	fb02 f303 	mul.w	r3, r2, r3
 8017c72:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017c7a:	3330      	adds	r3, #48	; 0x30
 8017c7c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017c7e:	2300      	movs	r3, #0
 8017c80:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017c82:	f107 0314 	add.w	r3, r7, #20
 8017c86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c8a:	f005 fd4d 	bl	801d728 <SysTimeToMs>
 8017c8e:	4602      	mov	r2, r0
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	609a      	str	r2, [r3, #8]
 8017c94:	e009      	b.n	8017caa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017c96:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c9a:	f083 0301 	eor.w	r3, r3, #1
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d002      	beq.n	8017caa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ca8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d102      	bne.n	8017cb8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017cb2:	68fb      	ldr	r3, [r7, #12]
 8017cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cb6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cbc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017cbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	3730      	adds	r7, #48	; 0x30
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}
 8017cc8:	001b7740 	.word	0x001b7740
 8017ccc:	0112a880 	.word	0x0112a880
 8017cd0:	02932e00 	.word	0x02932e00
 8017cd4:	0001517f 	.word	0x0001517f
 8017cd8:	0001ec2f 	.word	0x0001ec2f
 8017cdc:	c22e4507 	.word	0xc22e4507
 8017ce0:	00015180 	.word	0x00015180

08017ce4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b086      	sub	sp, #24
 8017ce8:	af02      	add	r7, sp, #8
 8017cea:	6078      	str	r0, [r7, #4]
 8017cec:	4608      	mov	r0, r1
 8017cee:	4611      	mov	r1, r2
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	70fb      	strb	r3, [r7, #3]
 8017cf6:	460b      	mov	r3, r1
 8017cf8:	70bb      	strb	r3, [r7, #2]
 8017cfa:	4613      	mov	r3, r2
 8017cfc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017cfe:	78f9      	ldrb	r1, [r7, #3]
 8017d00:	787b      	ldrb	r3, [r7, #1]
 8017d02:	9301      	str	r3, [sp, #4]
 8017d04:	78bb      	ldrb	r3, [r7, #2]
 8017d06:	9300      	str	r3, [sp, #0]
 8017d08:	f107 0318 	add.w	r3, r7, #24
 8017d0c:	cb0c      	ldmia	r3, {r2, r3}
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7ff ff36 	bl	8017b80 <SetMaxTimeCredits>
 8017d14:	4603      	mov	r3, r0
 8017d16:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017d18:	78fb      	ldrb	r3, [r7, #3]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d00a      	beq.n	8017d34 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	685b      	ldr	r3, [r3, #4]
 8017d22:	4618      	mov	r0, r3
 8017d24:	f006 fb3c 	bl	801e3a0 <UTIL_TIMER_GetElapsedTime>
 8017d28:	4602      	mov	r2, r0
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	68db      	ldr	r3, [r3, #12]
 8017d2e:	441a      	add	r2, r3
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	68da      	ldr	r2, [r3, #12]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	691b      	ldr	r3, [r3, #16]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d903      	bls.n	8017d48 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	691a      	ldr	r2, [r3, #16]
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	6a3a      	ldr	r2, [r7, #32]
 8017d4c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017d4e:	89fb      	ldrh	r3, [r7, #14]
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3710      	adds	r7, #16
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b085      	sub	sp, #20
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	4603      	mov	r3, r0
 8017d60:	460a      	mov	r2, r1
 8017d62:	80fb      	strh	r3, [r7, #6]
 8017d64:	4613      	mov	r3, r2
 8017d66:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017d68:	2300      	movs	r3, #0
 8017d6a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	73bb      	strb	r3, [r7, #14]
 8017d70:	e011      	b.n	8017d96 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017d72:	88fa      	ldrh	r2, [r7, #6]
 8017d74:	7bbb      	ldrb	r3, [r7, #14]
 8017d76:	2101      	movs	r1, #1
 8017d78:	fa01 f303 	lsl.w	r3, r1, r3
 8017d7c:	401a      	ands	r2, r3
 8017d7e:	7bbb      	ldrb	r3, [r7, #14]
 8017d80:	2101      	movs	r1, #1
 8017d82:	fa01 f303 	lsl.w	r3, r1, r3
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d102      	bne.n	8017d90 <CountChannels+0x38>
        {
            nbActiveBits++;
 8017d8a:	7bfb      	ldrb	r3, [r7, #15]
 8017d8c:	3301      	adds	r3, #1
 8017d8e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017d90:	7bbb      	ldrb	r3, [r7, #14]
 8017d92:	3301      	adds	r3, #1
 8017d94:	73bb      	strb	r3, [r7, #14]
 8017d96:	7bba      	ldrb	r2, [r7, #14]
 8017d98:	797b      	ldrb	r3, [r7, #5]
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d3e9      	bcc.n	8017d72 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3714      	adds	r7, #20
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bc80      	pop	{r7}
 8017da8:	4770      	bx	lr

08017daa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017daa:	b580      	push	{r7, lr}
 8017dac:	b084      	sub	sp, #16
 8017dae:	af00      	add	r7, sp, #0
 8017db0:	6039      	str	r1, [r7, #0]
 8017db2:	4611      	mov	r1, r2
 8017db4:	461a      	mov	r2, r3
 8017db6:	4603      	mov	r3, r0
 8017db8:	71fb      	strb	r3, [r7, #7]
 8017dba:	460b      	mov	r3, r1
 8017dbc:	71bb      	strb	r3, [r7, #6]
 8017dbe:	4613      	mov	r3, r2
 8017dc0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017dc2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017dc6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017dca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f000 f85d 	bl	8017e8e <RegionCommonValueInRange>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d101      	bne.n	8017dde <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017dda:	2300      	movs	r3, #0
 8017ddc:	e053      	b.n	8017e86 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017dde:	2300      	movs	r3, #0
 8017de0:	73fb      	strb	r3, [r7, #15]
 8017de2:	2300      	movs	r3, #0
 8017de4:	73bb      	strb	r3, [r7, #14]
 8017de6:	e049      	b.n	8017e7c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017de8:	2300      	movs	r3, #0
 8017dea:	737b      	strb	r3, [r7, #13]
 8017dec:	e03d      	b.n	8017e6a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017dee:	7bbb      	ldrb	r3, [r7, #14]
 8017df0:	005b      	lsls	r3, r3, #1
 8017df2:	683a      	ldr	r2, [r7, #0]
 8017df4:	4413      	add	r3, r2
 8017df6:	881b      	ldrh	r3, [r3, #0]
 8017df8:	461a      	mov	r2, r3
 8017dfa:	7b7b      	ldrb	r3, [r7, #13]
 8017dfc:	fa42 f303 	asr.w	r3, r2, r3
 8017e00:	f003 0301 	and.w	r3, r3, #1
 8017e04:	2b00      	cmp	r3, #0
 8017e06:	d02d      	beq.n	8017e64 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e08:	7bfa      	ldrb	r2, [r7, #15]
 8017e0a:	7b7b      	ldrb	r3, [r7, #13]
 8017e0c:	4413      	add	r3, r2
 8017e0e:	461a      	mov	r2, r3
 8017e10:	4613      	mov	r3, r2
 8017e12:	005b      	lsls	r3, r3, #1
 8017e14:	4413      	add	r3, r2
 8017e16:	009b      	lsls	r3, r3, #2
 8017e18:	461a      	mov	r2, r3
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	4413      	add	r3, r2
 8017e1e:	7a1b      	ldrb	r3, [r3, #8]
 8017e20:	f343 0303 	sbfx	r3, r3, #0, #4
 8017e24:	b25b      	sxtb	r3, r3
 8017e26:	f003 030f 	and.w	r3, r3, #15
 8017e2a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017e2c:	7bfa      	ldrb	r2, [r7, #15]
 8017e2e:	7b7b      	ldrb	r3, [r7, #13]
 8017e30:	4413      	add	r3, r2
 8017e32:	461a      	mov	r2, r3
 8017e34:	4613      	mov	r3, r2
 8017e36:	005b      	lsls	r3, r3, #1
 8017e38:	4413      	add	r3, r2
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	69fb      	ldr	r3, [r7, #28]
 8017e40:	4413      	add	r3, r2
 8017e42:	7a1b      	ldrb	r3, [r3, #8]
 8017e44:	f343 1303 	sbfx	r3, r3, #4, #4
 8017e48:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e4a:	f003 030f 	and.w	r3, r3, #15
 8017e4e:	b25a      	sxtb	r2, r3
 8017e50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e54:	4618      	mov	r0, r3
 8017e56:	f000 f81a 	bl	8017e8e <RegionCommonValueInRange>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	2b01      	cmp	r3, #1
 8017e5e:	d101      	bne.n	8017e64 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017e60:	2301      	movs	r3, #1
 8017e62:	e010      	b.n	8017e86 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017e64:	7b7b      	ldrb	r3, [r7, #13]
 8017e66:	3301      	adds	r3, #1
 8017e68:	737b      	strb	r3, [r7, #13]
 8017e6a:	7b7b      	ldrb	r3, [r7, #13]
 8017e6c:	2b0f      	cmp	r3, #15
 8017e6e:	d9be      	bls.n	8017dee <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017e70:	7bfb      	ldrb	r3, [r7, #15]
 8017e72:	3310      	adds	r3, #16
 8017e74:	73fb      	strb	r3, [r7, #15]
 8017e76:	7bbb      	ldrb	r3, [r7, #14]
 8017e78:	3301      	adds	r3, #1
 8017e7a:	73bb      	strb	r3, [r7, #14]
 8017e7c:	7bfa      	ldrb	r2, [r7, #15]
 8017e7e:	79fb      	ldrb	r3, [r7, #7]
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d3b1      	bcc.n	8017de8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017e84:	2300      	movs	r3, #0
}
 8017e86:	4618      	mov	r0, r3
 8017e88:	3710      	adds	r7, #16
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}

08017e8e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017e8e:	b480      	push	{r7}
 8017e90:	b083      	sub	sp, #12
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	4603      	mov	r3, r0
 8017e96:	71fb      	strb	r3, [r7, #7]
 8017e98:	460b      	mov	r3, r1
 8017e9a:	71bb      	strb	r3, [r7, #6]
 8017e9c:	4613      	mov	r3, r2
 8017e9e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017ea0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017ea4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	db07      	blt.n	8017ebc <RegionCommonValueInRange+0x2e>
 8017eac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017eb0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	dc01      	bgt.n	8017ebc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017eb8:	2301      	movs	r3, #1
 8017eba:	e000      	b.n	8017ebe <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017ebc:	2300      	movs	r3, #0
}
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	370c      	adds	r7, #12
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	bc80      	pop	{r7}
 8017ec6:	4770      	bx	lr

08017ec8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b085      	sub	sp, #20
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	460b      	mov	r3, r1
 8017ed2:	70fb      	strb	r3, [r7, #3]
 8017ed4:	4613      	mov	r3, r2
 8017ed6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017ed8:	78fb      	ldrb	r3, [r7, #3]
 8017eda:	091b      	lsrs	r3, r3, #4
 8017edc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017ede:	78bb      	ldrb	r3, [r7, #2]
 8017ee0:	091b      	lsrs	r3, r3, #4
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	7bfa      	ldrb	r2, [r7, #15]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d803      	bhi.n	8017ef2 <RegionCommonChanDisable+0x2a>
 8017eea:	78fa      	ldrb	r2, [r7, #3]
 8017eec:	78bb      	ldrb	r3, [r7, #2]
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d301      	bcc.n	8017ef6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	e017      	b.n	8017f26 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017ef6:	7bfb      	ldrb	r3, [r7, #15]
 8017ef8:	005b      	lsls	r3, r3, #1
 8017efa:	687a      	ldr	r2, [r7, #4]
 8017efc:	4413      	add	r3, r2
 8017efe:	881b      	ldrh	r3, [r3, #0]
 8017f00:	b21a      	sxth	r2, r3
 8017f02:	78fb      	ldrb	r3, [r7, #3]
 8017f04:	f003 030f 	and.w	r3, r3, #15
 8017f08:	2101      	movs	r1, #1
 8017f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8017f0e:	b21b      	sxth	r3, r3
 8017f10:	43db      	mvns	r3, r3
 8017f12:	b21b      	sxth	r3, r3
 8017f14:	4013      	ands	r3, r2
 8017f16:	b219      	sxth	r1, r3
 8017f18:	7bfb      	ldrb	r3, [r7, #15]
 8017f1a:	005b      	lsls	r3, r3, #1
 8017f1c:	687a      	ldr	r2, [r7, #4]
 8017f1e:	4413      	add	r3, r2
 8017f20:	b28a      	uxth	r2, r1
 8017f22:	801a      	strh	r2, [r3, #0]

    return true;
 8017f24:	2301      	movs	r3, #1
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3714      	adds	r7, #20
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bc80      	pop	{r7}
 8017f2e:	4770      	bx	lr

08017f30 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b084      	sub	sp, #16
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	460b      	mov	r3, r1
 8017f3a:	70fb      	strb	r3, [r7, #3]
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017f40:	2300      	movs	r3, #0
 8017f42:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d101      	bne.n	8017f4e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	e018      	b.n	8017f80 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f4e:	78fb      	ldrb	r3, [r7, #3]
 8017f50:	73bb      	strb	r3, [r7, #14]
 8017f52:	e010      	b.n	8017f76 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017f54:	7bbb      	ldrb	r3, [r7, #14]
 8017f56:	005b      	lsls	r3, r3, #1
 8017f58:	687a      	ldr	r2, [r7, #4]
 8017f5a:	4413      	add	r3, r2
 8017f5c:	881b      	ldrh	r3, [r3, #0]
 8017f5e:	2110      	movs	r1, #16
 8017f60:	4618      	mov	r0, r3
 8017f62:	f7ff fef9 	bl	8017d58 <CountChannels>
 8017f66:	4603      	mov	r3, r0
 8017f68:	461a      	mov	r2, r3
 8017f6a:	7bfb      	ldrb	r3, [r7, #15]
 8017f6c:	4413      	add	r3, r2
 8017f6e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f70:	7bbb      	ldrb	r3, [r7, #14]
 8017f72:	3301      	adds	r3, #1
 8017f74:	73bb      	strb	r3, [r7, #14]
 8017f76:	7bba      	ldrb	r2, [r7, #14]
 8017f78:	78bb      	ldrb	r3, [r7, #2]
 8017f7a:	429a      	cmp	r2, r3
 8017f7c:	d3ea      	bcc.n	8017f54 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3710      	adds	r7, #16
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd80      	pop	{r7, pc}

08017f88 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017f88:	b480      	push	{r7}
 8017f8a:	b087      	sub	sp, #28
 8017f8c:	af00      	add	r7, sp, #0
 8017f8e:	60f8      	str	r0, [r7, #12]
 8017f90:	60b9      	str	r1, [r7, #8]
 8017f92:	4613      	mov	r3, r2
 8017f94:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d016      	beq.n	8017fca <RegionCommonChanMaskCopy+0x42>
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d013      	beq.n	8017fca <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	75fb      	strb	r3, [r7, #23]
 8017fa6:	e00c      	b.n	8017fc2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017fa8:	7dfb      	ldrb	r3, [r7, #23]
 8017faa:	005b      	lsls	r3, r3, #1
 8017fac:	68ba      	ldr	r2, [r7, #8]
 8017fae:	441a      	add	r2, r3
 8017fb0:	7dfb      	ldrb	r3, [r7, #23]
 8017fb2:	005b      	lsls	r3, r3, #1
 8017fb4:	68f9      	ldr	r1, [r7, #12]
 8017fb6:	440b      	add	r3, r1
 8017fb8:	8812      	ldrh	r2, [r2, #0]
 8017fba:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017fbc:	7dfb      	ldrb	r3, [r7, #23]
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	75fb      	strb	r3, [r7, #23]
 8017fc2:	7dfa      	ldrb	r2, [r7, #23]
 8017fc4:	79fb      	ldrb	r3, [r7, #7]
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d3ee      	bcc.n	8017fa8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017fca:	bf00      	nop
 8017fcc:	371c      	adds	r7, #28
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bc80      	pop	{r7}
 8017fd2:	4770      	bx	lr

08017fd4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017fd4:	b082      	sub	sp, #8
 8017fd6:	b580      	push	{r7, lr}
 8017fd8:	b086      	sub	sp, #24
 8017fda:	af00      	add	r7, sp, #0
 8017fdc:	60f8      	str	r0, [r7, #12]
 8017fde:	60b9      	str	r1, [r7, #8]
 8017fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017fe6:	79f9      	ldrb	r1, [r7, #7]
 8017fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017fec:	cb0c      	ldmia	r3, {r2, r3}
 8017fee:	68f8      	ldr	r0, [r7, #12]
 8017ff0:	f7ff fd8c 	bl	8017b0c <GetDutyCycle>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	68da      	ldr	r2, [r3, #12]
 8017ffc:	8afb      	ldrh	r3, [r7, #22]
 8017ffe:	68b9      	ldr	r1, [r7, #8]
 8018000:	fb01 f303 	mul.w	r3, r1, r3
 8018004:	429a      	cmp	r2, r3
 8018006:	d909      	bls.n	801801c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	68da      	ldr	r2, [r3, #12]
 801800c:	8afb      	ldrh	r3, [r7, #22]
 801800e:	68b9      	ldr	r1, [r7, #8]
 8018010:	fb01 f303 	mul.w	r3, r1, r3
 8018014:	1ad2      	subs	r2, r2, r3
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801801a:	e002      	b.n	8018022 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	2200      	movs	r2, #0
 8018020:	60da      	str	r2, [r3, #12]
}
 8018022:	bf00      	nop
 8018024:	3718      	adds	r7, #24
 8018026:	46bd      	mov	sp, r7
 8018028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801802c:	b002      	add	sp, #8
 801802e:	4770      	bx	lr

08018030 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018032:	b08f      	sub	sp, #60	; 0x3c
 8018034:	af04      	add	r7, sp, #16
 8018036:	6039      	str	r1, [r7, #0]
 8018038:	4611      	mov	r1, r2
 801803a:	461a      	mov	r2, r3
 801803c:	4603      	mov	r3, r0
 801803e:	71fb      	strb	r3, [r7, #7]
 8018040:	460b      	mov	r3, r1
 8018042:	71bb      	strb	r3, [r7, #6]
 8018044:	4613      	mov	r3, r2
 8018046:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018048:	f04f 33ff 	mov.w	r3, #4294967295
 801804c:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801804e:	f006 f995 	bl	801e37c <UTIL_TIMER_GetCurrentTime>
 8018052:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018054:	2300      	movs	r3, #0
 8018056:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018058:	2301      	movs	r3, #1
 801805a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 801805c:	2300      	movs	r3, #0
 801805e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8018062:	2300      	movs	r3, #0
 8018064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018068:	e0ba      	b.n	80181e0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801806a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801806e:	4613      	mov	r3, r2
 8018070:	005b      	lsls	r3, r3, #1
 8018072:	4413      	add	r3, r2
 8018074:	00db      	lsls	r3, r3, #3
 8018076:	461a      	mov	r2, r3
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	189c      	adds	r4, r3, r2
 801807c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018080:	797a      	ldrb	r2, [r7, #5]
 8018082:	79fd      	ldrb	r5, [r7, #7]
 8018084:	69fb      	ldr	r3, [r7, #28]
 8018086:	9302      	str	r3, [sp, #8]
 8018088:	46ec      	mov	ip, sp
 801808a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801808e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018092:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018096:	4633      	mov	r3, r6
 8018098:	4629      	mov	r1, r5
 801809a:	4620      	mov	r0, r4
 801809c:	f7ff fe22 	bl	8017ce4 <UpdateTimeCredits>
 80180a0:	4603      	mov	r3, r0
 80180a2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80180a4:	8afa      	ldrh	r2, [r7, #22]
 80180a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180a8:	fb02 f303 	mul.w	r3, r2, r3
 80180ac:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180ae:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180b2:	4613      	mov	r3, r2
 80180b4:	005b      	lsls	r3, r3, #1
 80180b6:	4413      	add	r3, r2
 80180b8:	00db      	lsls	r3, r3, #3
 80180ba:	461a      	mov	r2, r3
 80180bc:	683b      	ldr	r3, [r7, #0]
 80180be:	4413      	add	r3, r2
 80180c0:	68db      	ldr	r3, [r3, #12]
 80180c2:	69ba      	ldr	r2, [r7, #24]
 80180c4:	429a      	cmp	r2, r3
 80180c6:	d908      	bls.n	80180da <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180c8:	797b      	ldrb	r3, [r7, #5]
 80180ca:	f083 0301 	eor.w	r3, r3, #1
 80180ce:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d013      	beq.n	80180fc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180d4:	79fb      	ldrb	r3, [r7, #7]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d010      	beq.n	80180fc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80180da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180de:	4613      	mov	r3, r2
 80180e0:	005b      	lsls	r3, r3, #1
 80180e2:	4413      	add	r3, r2
 80180e4:	00db      	lsls	r3, r3, #3
 80180e6:	461a      	mov	r2, r3
 80180e8:	683b      	ldr	r3, [r7, #0]
 80180ea:	4413      	add	r3, r2
 80180ec:	2201      	movs	r2, #1
 80180ee:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80180f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180f4:	3301      	adds	r3, #1
 80180f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80180fa:	e06c      	b.n	80181d6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80180fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018100:	4613      	mov	r3, r2
 8018102:	005b      	lsls	r3, r3, #1
 8018104:	4413      	add	r3, r2
 8018106:	00db      	lsls	r3, r3, #3
 8018108:	461a      	mov	r2, r3
 801810a:	683b      	ldr	r3, [r7, #0]
 801810c:	4413      	add	r3, r2
 801810e:	2200      	movs	r2, #0
 8018110:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018112:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018116:	4613      	mov	r3, r2
 8018118:	005b      	lsls	r3, r3, #1
 801811a:	4413      	add	r3, r2
 801811c:	00db      	lsls	r3, r3, #3
 801811e:	461a      	mov	r2, r3
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	4413      	add	r3, r2
 8018124:	691b      	ldr	r3, [r3, #16]
 8018126:	69ba      	ldr	r2, [r7, #24]
 8018128:	429a      	cmp	r2, r3
 801812a:	d815      	bhi.n	8018158 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 801812c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018130:	4613      	mov	r3, r2
 8018132:	005b      	lsls	r3, r3, #1
 8018134:	4413      	add	r3, r2
 8018136:	00db      	lsls	r3, r3, #3
 8018138:	461a      	mov	r2, r3
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	4413      	add	r3, r2
 801813e:	68db      	ldr	r3, [r3, #12]
 8018140:	69ba      	ldr	r2, [r7, #24]
 8018142:	1ad3      	subs	r3, r2, r3
 8018144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018146:	4293      	cmp	r3, r2
 8018148:	bf28      	it	cs
 801814a:	4613      	movcs	r3, r2
 801814c:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801814e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018152:	3301      	adds	r3, #1
 8018154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018158:	79fb      	ldrb	r3, [r7, #7]
 801815a:	f083 0301 	eor.w	r3, r3, #1
 801815e:	b2db      	uxtb	r3, r3
 8018160:	2b00      	cmp	r3, #0
 8018162:	d038      	beq.n	80181d6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018164:	2300      	movs	r3, #0
 8018166:	60fb      	str	r3, [r7, #12]
 8018168:	2300      	movs	r3, #0
 801816a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801816c:	8afb      	ldrh	r3, [r7, #22]
 801816e:	2b64      	cmp	r3, #100	; 0x64
 8018170:	d103      	bne.n	801817a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8018172:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018176:	60fb      	str	r3, [r7, #12]
 8018178:	e009      	b.n	801818e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801817a:	8afb      	ldrh	r3, [r7, #22]
 801817c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018180:	d103      	bne.n	801818a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8018182:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	e001      	b.n	801818e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801818a:	4b1e      	ldr	r3, [pc, #120]	; (8018204 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801818c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018190:	4a1c      	ldr	r2, [pc, #112]	; (8018204 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018192:	4293      	cmp	r3, r2
 8018194:	d90e      	bls.n	80181b4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8018196:	68fa      	ldr	r2, [r7, #12]
 8018198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801819a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801819e:	3b30      	subs	r3, #48	; 0x30
 80181a0:	4919      	ldr	r1, [pc, #100]	; (8018208 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80181a2:	fba1 1303 	umull	r1, r3, r1, r3
 80181a6:	0c1b      	lsrs	r3, r3, #16
 80181a8:	3301      	adds	r3, #1
 80181aa:	4918      	ldr	r1, [pc, #96]	; (801820c <RegionCommonUpdateBandTimeOff+0x1dc>)
 80181ac:	fb01 f303 	mul.w	r3, r1, r3
 80181b0:	4413      	add	r3, r2
 80181b2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80181b4:	f107 000c 	add.w	r0, r7, #12
 80181b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181ba:	9300      	str	r3, [sp, #0]
 80181bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181be:	f107 020c 	add.w	r2, r7, #12
 80181c2:	ca06      	ldmia	r2, {r1, r2}
 80181c4:	f005 f9f1 	bl	801d5aa <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80181c8:	f107 030c 	add.w	r3, r7, #12
 80181cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181d0:	f005 faaa 	bl	801d728 <SysTimeToMs>
 80181d4:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80181d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80181da:	3301      	adds	r3, #1
 80181dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80181e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181e4:	79bb      	ldrb	r3, [r7, #6]
 80181e6:	429a      	cmp	r2, r3
 80181e8:	f4ff af3f 	bcc.w	801806a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80181ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d102      	bne.n	80181fa <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80181f4:	f04f 33ff 	mov.w	r3, #4294967295
 80181f8:	e000      	b.n	80181fc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80181fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	372c      	adds	r7, #44	; 0x2c
 8018200:	46bd      	mov	sp, r7
 8018202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018204:	0001ec30 	.word	0x0001ec30
 8018208:	c22e4507 	.word	0xc22e4507
 801820c:	00015180 	.word	0x00015180

08018210 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018210:	b480      	push	{r7}
 8018212:	b085      	sub	sp, #20
 8018214:	af00      	add	r7, sp, #0
 8018216:	6078      	str	r0, [r7, #4]
 8018218:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801821a:	2300      	movs	r3, #0
 801821c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	781b      	ldrb	r3, [r3, #0]
 8018222:	2b03      	cmp	r3, #3
 8018224:	d13f      	bne.n	80182a6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	3301      	adds	r3, #1
 801822a:	781b      	ldrb	r3, [r3, #0]
 801822c:	b25a      	sxtb	r2, r3
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018238:	f003 030f 	and.w	r3, r3, #15
 801823c:	b25a      	sxtb	r2, r3
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018248:	b2db      	uxtb	r3, r3
 801824a:	091b      	lsrs	r3, r3, #4
 801824c:	b2db      	uxtb	r3, r3
 801824e:	b25a      	sxtb	r2, r3
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	3302      	adds	r3, #2
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	b29a      	uxth	r2, r3
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	889b      	ldrh	r3, [r3, #4]
 8018264:	b21a      	sxth	r2, r3
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	3303      	adds	r3, #3
 801826a:	781b      	ldrb	r3, [r3, #0]
 801826c:	021b      	lsls	r3, r3, #8
 801826e:	b21b      	sxth	r3, r3
 8018270:	4313      	orrs	r3, r2
 8018272:	b21b      	sxth	r3, r3
 8018274:	b29a      	uxth	r2, r3
 8018276:	683b      	ldr	r3, [r7, #0]
 8018278:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	791a      	ldrb	r2, [r3, #4]
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	091b      	lsrs	r3, r3, #4
 8018288:	b2db      	uxtb	r3, r3
 801828a:	f003 0307 	and.w	r3, r3, #7
 801828e:	b2da      	uxtb	r2, r3
 8018290:	683b      	ldr	r3, [r7, #0]
 8018292:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	f003 030f 	and.w	r3, r3, #15
 801829c:	b2da      	uxtb	r2, r3
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80182a2:	2305      	movs	r3, #5
 80182a4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80182a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3714      	adds	r7, #20
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bc80      	pop	{r7}
 80182b0:	4770      	bx	lr

080182b2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80182b2:	b5b0      	push	{r4, r5, r7, lr}
 80182b4:	b088      	sub	sp, #32
 80182b6:	af02      	add	r7, sp, #8
 80182b8:	60f8      	str	r0, [r7, #12]
 80182ba:	60b9      	str	r1, [r7, #8]
 80182bc:	607a      	str	r2, [r7, #4]
 80182be:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	791b      	ldrb	r3, [r3, #4]
 80182c4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	799b      	ldrb	r3, [r3, #6]
 80182ca:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	79db      	ldrb	r3, [r3, #7]
 80182d0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	7a1b      	ldrb	r3, [r3, #8]
 80182d6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	795b      	ldrb	r3, [r3, #5]
 80182dc:	f083 0301 	eor.w	r3, r3, #1
 80182e0:	b2db      	uxtb	r3, r3
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d008      	beq.n	80182f8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	7adb      	ldrb	r3, [r3, #11]
 80182ea:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	7a5b      	ldrb	r3, [r3, #9]
 80182f0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	7a9b      	ldrb	r3, [r3, #10]
 80182f6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80182f8:	7dfb      	ldrb	r3, [r7, #23]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d04a      	beq.n	8018394 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80182fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018302:	2b0f      	cmp	r3, #15
 8018304:	d103      	bne.n	801830e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	7a5b      	ldrb	r3, [r3, #9]
 801830a:	75bb      	strb	r3, [r7, #22]
 801830c:	e01d      	b.n	801834a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	7b18      	ldrb	r0, [r3, #12]
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	6919      	ldr	r1, [r3, #16]
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018322:	68fa      	ldr	r2, [r7, #12]
 8018324:	6992      	ldr	r2, [r2, #24]
 8018326:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801832a:	9201      	str	r2, [sp, #4]
 801832c:	9300      	str	r3, [sp, #0]
 801832e:	462b      	mov	r3, r5
 8018330:	4622      	mov	r2, r4
 8018332:	f7ff fd3a 	bl	8017daa <RegionCommonChanVerifyDr>
 8018336:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018338:	f083 0301 	eor.w	r3, r3, #1
 801833c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801833e:	2b00      	cmp	r3, #0
 8018340:	d003      	beq.n	801834a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018342:	7dfb      	ldrb	r3, [r7, #23]
 8018344:	f023 0302 	bic.w	r3, r3, #2
 8018348:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801834a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801834e:	2b0f      	cmp	r3, #15
 8018350:	d103      	bne.n	801835a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	7a9b      	ldrb	r3, [r3, #10]
 8018356:	757b      	strb	r3, [r7, #21]
 8018358:	e01c      	b.n	8018394 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018366:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801836a:	4618      	mov	r0, r3
 801836c:	f7ff fd8f 	bl	8017e8e <RegionCommonValueInRange>
 8018370:	4603      	mov	r3, r0
 8018372:	2b00      	cmp	r3, #0
 8018374:	d10e      	bne.n	8018394 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801837c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018380:	429a      	cmp	r2, r3
 8018382:	da03      	bge.n	801838c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	7f5b      	ldrb	r3, [r3, #29]
 8018388:	757b      	strb	r3, [r7, #21]
 801838a:	e003      	b.n	8018394 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801838c:	7dfb      	ldrb	r3, [r7, #23]
 801838e:	f023 0304 	bic.w	r3, r3, #4
 8018392:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018394:	7dfb      	ldrb	r3, [r7, #23]
 8018396:	2b07      	cmp	r3, #7
 8018398:	d105      	bne.n	80183a6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801839a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d101      	bne.n	80183a6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80183a2:	2301      	movs	r3, #1
 80183a4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80183a6:	68bb      	ldr	r3, [r7, #8]
 80183a8:	7dba      	ldrb	r2, [r7, #22]
 80183aa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	7d7a      	ldrb	r2, [r7, #21]
 80183b0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80183b2:	7d3a      	ldrb	r2, [r7, #20]
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	701a      	strb	r2, [r3, #0]

    return status;
 80183b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80183ba:	4618      	mov	r0, r3
 80183bc:	3718      	adds	r7, #24
 80183be:	46bd      	mov	sp, r7
 80183c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080183c4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80183c4:	b480      	push	{r7}
 80183c6:	b083      	sub	sp, #12
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	4603      	mov	r3, r0
 80183cc:	6039      	str	r1, [r7, #0]
 80183ce:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80183d0:	79fb      	ldrb	r3, [r7, #7]
 80183d2:	4a06      	ldr	r2, [pc, #24]	; (80183ec <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80183d4:	fa02 f303 	lsl.w	r3, r2, r3
 80183d8:	461a      	mov	r2, r3
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	370c      	adds	r7, #12
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bc80      	pop	{r7}
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop
 80183ec:	000f4240 	.word	0x000f4240

080183f0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80183f0:	b480      	push	{r7}
 80183f2:	b083      	sub	sp, #12
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	4603      	mov	r3, r0
 80183f8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80183fa:	79fb      	ldrb	r3, [r7, #7]
 80183fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018400:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018404:	4618      	mov	r0, r3
 8018406:	370c      	adds	r7, #12
 8018408:	46bd      	mov	sp, r7
 801840a:	bc80      	pop	{r7}
 801840c:	4770      	bx	lr
	...

08018410 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018410:	b480      	push	{r7}
 8018412:	b085      	sub	sp, #20
 8018414:	af00      	add	r7, sp, #0
 8018416:	60f8      	str	r0, [r7, #12]
 8018418:	607a      	str	r2, [r7, #4]
 801841a:	603b      	str	r3, [r7, #0]
 801841c:	460b      	mov	r3, r1
 801841e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018420:	7afa      	ldrb	r2, [r7, #11]
 8018422:	7afb      	ldrb	r3, [r7, #11]
 8018424:	3b04      	subs	r3, #4
 8018426:	4619      	mov	r1, r3
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	fb03 f101 	mul.w	r1, r3, r1
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018434:	fb00 f303 	mul.w	r3, r0, r3
 8018438:	440b      	add	r3, r1
 801843a:	005b      	lsls	r3, r3, #1
 801843c:	2b00      	cmp	r3, #0
 801843e:	d013      	beq.n	8018468 <RegionCommonComputeRxWindowParameters+0x58>
 8018440:	7afb      	ldrb	r3, [r7, #11]
 8018442:	3b04      	subs	r3, #4
 8018444:	4619      	mov	r1, r3
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	fb03 f101 	mul.w	r1, r3, r1
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018452:	fb00 f303 	mul.w	r3, r0, r3
 8018456:	440b      	add	r3, r1
 8018458:	0059      	lsls	r1, r3, #1
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	440b      	add	r3, r1
 801845e:	1e59      	subs	r1, r3, #1
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	fbb1 f3f3 	udiv	r3, r1, r3
 8018466:	e00f      	b.n	8018488 <RegionCommonComputeRxWindowParameters+0x78>
 8018468:	7afb      	ldrb	r3, [r7, #11]
 801846a:	3b04      	subs	r3, #4
 801846c:	4619      	mov	r1, r3
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	fb03 f101 	mul.w	r1, r3, r1
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801847a:	fb00 f303 	mul.w	r3, r0, r3
 801847e:	440b      	add	r3, r1
 8018480:	0059      	lsls	r1, r3, #1
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	fbb1 f3f3 	udiv	r3, r1, r3
 8018488:	429a      	cmp	r2, r3
 801848a:	bf38      	it	cc
 801848c:	461a      	movcc	r2, r3
 801848e:	69bb      	ldr	r3, [r7, #24]
 8018490:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	009b      	lsls	r3, r3, #2
 8018496:	4619      	mov	r1, r3
 8018498:	69bb      	ldr	r3, [r7, #24]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	68fa      	ldr	r2, [r7, #12]
 801849e:	fb02 f303 	mul.w	r3, r2, r3
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d007      	beq.n	80184b6 <RegionCommonComputeRxWindowParameters+0xa6>
 80184a6:	69bb      	ldr	r3, [r7, #24]
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	68fa      	ldr	r2, [r7, #12]
 80184ac:	fb02 f303 	mul.w	r3, r2, r3
 80184b0:	3301      	adds	r3, #1
 80184b2:	085b      	lsrs	r3, r3, #1
 80184b4:	e005      	b.n	80184c2 <RegionCommonComputeRxWindowParameters+0xb2>
 80184b6:	69bb      	ldr	r3, [r7, #24]
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	68fa      	ldr	r2, [r7, #12]
 80184bc:	fb02 f303 	mul.w	r3, r2, r3
 80184c0:	085b      	lsrs	r3, r3, #1
 80184c2:	1acb      	subs	r3, r1, r3
 80184c4:	683a      	ldr	r2, [r7, #0]
 80184c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184ca:	fb01 f202 	mul.w	r2, r1, r2
 80184ce:	1a9b      	subs	r3, r3, r2
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	dd27      	ble.n	8018524 <RegionCommonComputeRxWindowParameters+0x114>
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	009b      	lsls	r3, r3, #2
 80184d8:	4619      	mov	r1, r3
 80184da:	69bb      	ldr	r3, [r7, #24]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	68fa      	ldr	r2, [r7, #12]
 80184e0:	fb02 f303 	mul.w	r3, r2, r3
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d007      	beq.n	80184f8 <RegionCommonComputeRxWindowParameters+0xe8>
 80184e8:	69bb      	ldr	r3, [r7, #24]
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	68fa      	ldr	r2, [r7, #12]
 80184ee:	fb02 f303 	mul.w	r3, r2, r3
 80184f2:	3301      	adds	r3, #1
 80184f4:	085b      	lsrs	r3, r3, #1
 80184f6:	e005      	b.n	8018504 <RegionCommonComputeRxWindowParameters+0xf4>
 80184f8:	69bb      	ldr	r3, [r7, #24]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	68fa      	ldr	r2, [r7, #12]
 80184fe:	fb02 f303 	mul.w	r3, r2, r3
 8018502:	085b      	lsrs	r3, r3, #1
 8018504:	1acb      	subs	r3, r1, r3
 8018506:	683a      	ldr	r2, [r7, #0]
 8018508:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801850c:	fb01 f202 	mul.w	r2, r1, r2
 8018510:	1a9b      	subs	r3, r3, r2
 8018512:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018516:	4a19      	ldr	r2, [pc, #100]	; (801857c <RegionCommonComputeRxWindowParameters+0x16c>)
 8018518:	fb82 1203 	smull	r1, r2, r2, r3
 801851c:	1192      	asrs	r2, r2, #6
 801851e:	17db      	asrs	r3, r3, #31
 8018520:	1ad3      	subs	r3, r2, r3
 8018522:	e024      	b.n	801856e <RegionCommonComputeRxWindowParameters+0x15e>
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	009b      	lsls	r3, r3, #2
 8018528:	4619      	mov	r1, r3
 801852a:	69bb      	ldr	r3, [r7, #24]
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	68fa      	ldr	r2, [r7, #12]
 8018530:	fb02 f303 	mul.w	r3, r2, r3
 8018534:	2b00      	cmp	r3, #0
 8018536:	d007      	beq.n	8018548 <RegionCommonComputeRxWindowParameters+0x138>
 8018538:	69bb      	ldr	r3, [r7, #24]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	68fa      	ldr	r2, [r7, #12]
 801853e:	fb02 f303 	mul.w	r3, r2, r3
 8018542:	3301      	adds	r3, #1
 8018544:	085b      	lsrs	r3, r3, #1
 8018546:	e005      	b.n	8018554 <RegionCommonComputeRxWindowParameters+0x144>
 8018548:	69bb      	ldr	r3, [r7, #24]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	68fa      	ldr	r2, [r7, #12]
 801854e:	fb02 f303 	mul.w	r3, r2, r3
 8018552:	085b      	lsrs	r3, r3, #1
 8018554:	1acb      	subs	r3, r1, r3
 8018556:	683a      	ldr	r2, [r7, #0]
 8018558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801855c:	fb01 f202 	mul.w	r2, r1, r2
 8018560:	1a9b      	subs	r3, r3, r2
 8018562:	4a06      	ldr	r2, [pc, #24]	; (801857c <RegionCommonComputeRxWindowParameters+0x16c>)
 8018564:	fb82 1203 	smull	r1, r2, r2, r3
 8018568:	1192      	asrs	r2, r2, #6
 801856a:	17db      	asrs	r3, r3, #31
 801856c:	1ad3      	subs	r3, r2, r3
 801856e:	69fa      	ldr	r2, [r7, #28]
 8018570:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018572:	bf00      	nop
 8018574:	3714      	adds	r7, #20
 8018576:	46bd      	mov	sp, r7
 8018578:	bc80      	pop	{r7}
 801857a:	4770      	bx	lr
 801857c:	10624dd3 	.word	0x10624dd3

08018580 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b086      	sub	sp, #24
 8018584:	af00      	add	r7, sp, #0
 8018586:	4603      	mov	r3, r0
 8018588:	60b9      	str	r1, [r7, #8]
 801858a:	607a      	str	r2, [r7, #4]
 801858c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801858e:	2300      	movs	r3, #0
 8018590:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018596:	005b      	lsls	r3, r3, #1
 8018598:	4618      	mov	r0, r3
 801859a:	f7e8 fb79 	bl	8000c90 <__aeabi_ui2f>
 801859e:	4603      	mov	r3, r0
 80185a0:	4619      	mov	r1, r3
 80185a2:	68b8      	ldr	r0, [r7, #8]
 80185a4:	f7e8 fac2 	bl	8000b2c <__aeabi_fsub>
 80185a8:	4603      	mov	r3, r0
 80185aa:	6879      	ldr	r1, [r7, #4]
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7e8 fabd 	bl	8000b2c <__aeabi_fsub>
 80185b2:	4603      	mov	r3, r0
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7e7 ff4b 	bl	8000450 <__aeabi_f2d>
 80185ba:	4602      	mov	r2, r0
 80185bc:	460b      	mov	r3, r1
 80185be:	4610      	mov	r0, r2
 80185c0:	4619      	mov	r1, r3
 80185c2:	f006 fad5 	bl	801eb70 <floor>
 80185c6:	4602      	mov	r2, r0
 80185c8:	460b      	mov	r3, r1
 80185ca:	4610      	mov	r0, r2
 80185cc:	4619      	mov	r1, r3
 80185ce:	f7e8 fa31 	bl	8000a34 <__aeabi_d2iz>
 80185d2:	4603      	mov	r3, r0
 80185d4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80185d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80185da:	4618      	mov	r0, r3
 80185dc:	3718      	adds	r7, #24
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}

080185e2 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80185e2:	b590      	push	{r4, r7, lr}
 80185e4:	b087      	sub	sp, #28
 80185e6:	af00      	add	r7, sp, #0
 80185e8:	60f8      	str	r0, [r7, #12]
 80185ea:	60b9      	str	r1, [r7, #8]
 80185ec:	607a      	str	r2, [r7, #4]
 80185ee:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80185f0:	2300      	movs	r3, #0
 80185f2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80185f8:	2300      	movs	r3, #0
 80185fa:	757b      	strb	r3, [r7, #21]
 80185fc:	2300      	movs	r3, #0
 80185fe:	753b      	strb	r3, [r7, #20]
 8018600:	e09c      	b.n	801873c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018602:	2300      	movs	r3, #0
 8018604:	74fb      	strb	r3, [r7, #19]
 8018606:	e08f      	b.n	8018728 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	685a      	ldr	r2, [r3, #4]
 801860c:	7d3b      	ldrb	r3, [r7, #20]
 801860e:	005b      	lsls	r3, r3, #1
 8018610:	4413      	add	r3, r2
 8018612:	881b      	ldrh	r3, [r3, #0]
 8018614:	461a      	mov	r2, r3
 8018616:	7cfb      	ldrb	r3, [r7, #19]
 8018618:	fa42 f303 	asr.w	r3, r2, r3
 801861c:	f003 0301 	and.w	r3, r3, #1
 8018620:	2b00      	cmp	r3, #0
 8018622:	d07e      	beq.n	8018722 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	689a      	ldr	r2, [r3, #8]
 8018628:	7d79      	ldrb	r1, [r7, #21]
 801862a:	7cfb      	ldrb	r3, [r7, #19]
 801862c:	440b      	add	r3, r1
 801862e:	4619      	mov	r1, r3
 8018630:	460b      	mov	r3, r1
 8018632:	005b      	lsls	r3, r3, #1
 8018634:	440b      	add	r3, r1
 8018636:	009b      	lsls	r3, r3, #2
 8018638:	4413      	add	r3, r2
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d06b      	beq.n	8018718 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	f083 0301 	eor.w	r3, r3, #1
 8018648:	b2db      	uxtb	r3, r3
 801864a:	2b00      	cmp	r3, #0
 801864c:	d011      	beq.n	8018672 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00d      	beq.n	8018672 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	695a      	ldr	r2, [r3, #20]
 801865a:	7d3b      	ldrb	r3, [r7, #20]
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	4413      	add	r3, r2
 8018660:	881b      	ldrh	r3, [r3, #0]
 8018662:	461a      	mov	r2, r3
 8018664:	7cfb      	ldrb	r3, [r7, #19]
 8018666:	fa42 f303 	asr.w	r3, r2, r3
 801866a:	f003 0301 	and.w	r3, r3, #1
 801866e:	2b00      	cmp	r3, #0
 8018670:	d054      	beq.n	801871c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	785b      	ldrb	r3, [r3, #1]
 8018676:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	689a      	ldr	r2, [r3, #8]
 801867c:	7d79      	ldrb	r1, [r7, #21]
 801867e:	7cfb      	ldrb	r3, [r7, #19]
 8018680:	440b      	add	r3, r1
 8018682:	4619      	mov	r1, r3
 8018684:	460b      	mov	r3, r1
 8018686:	005b      	lsls	r3, r3, #1
 8018688:	440b      	add	r3, r1
 801868a:	009b      	lsls	r3, r3, #2
 801868c:	4413      	add	r3, r2
 801868e:	7a1b      	ldrb	r3, [r3, #8]
 8018690:	f343 0303 	sbfx	r3, r3, #0, #4
 8018694:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018696:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	689a      	ldr	r2, [r3, #8]
 801869c:	7d79      	ldrb	r1, [r7, #21]
 801869e:	7cfb      	ldrb	r3, [r7, #19]
 80186a0:	440b      	add	r3, r1
 80186a2:	4619      	mov	r1, r3
 80186a4:	460b      	mov	r3, r1
 80186a6:	005b      	lsls	r3, r3, #1
 80186a8:	440b      	add	r3, r1
 80186aa:	009b      	lsls	r3, r3, #2
 80186ac:	4413      	add	r3, r2
 80186ae:	7a1b      	ldrb	r3, [r3, #8]
 80186b0:	f343 1303 	sbfx	r3, r3, #4, #4
 80186b4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186b6:	461a      	mov	r2, r3
 80186b8:	4621      	mov	r1, r4
 80186ba:	f7ff fbe8 	bl	8017e8e <RegionCommonValueInRange>
 80186be:	4603      	mov	r3, r0
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d02d      	beq.n	8018720 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	68da      	ldr	r2, [r3, #12]
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	6899      	ldr	r1, [r3, #8]
 80186cc:	7d78      	ldrb	r0, [r7, #21]
 80186ce:	7cfb      	ldrb	r3, [r7, #19]
 80186d0:	4403      	add	r3, r0
 80186d2:	4618      	mov	r0, r3
 80186d4:	4603      	mov	r3, r0
 80186d6:	005b      	lsls	r3, r3, #1
 80186d8:	4403      	add	r3, r0
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	440b      	add	r3, r1
 80186de:	7a5b      	ldrb	r3, [r3, #9]
 80186e0:	4619      	mov	r1, r3
 80186e2:	460b      	mov	r3, r1
 80186e4:	005b      	lsls	r3, r3, #1
 80186e6:	440b      	add	r3, r1
 80186e8:	00db      	lsls	r3, r3, #3
 80186ea:	4413      	add	r3, r2
 80186ec:	7d1b      	ldrb	r3, [r3, #20]
 80186ee:	f083 0301 	eor.w	r3, r3, #1
 80186f2:	b2db      	uxtb	r3, r3
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d003      	beq.n	8018700 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80186f8:	7dbb      	ldrb	r3, [r7, #22]
 80186fa:	3301      	adds	r3, #1
 80186fc:	75bb      	strb	r3, [r7, #22]
                    continue;
 80186fe:	e010      	b.n	8018722 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018700:	7dfb      	ldrb	r3, [r7, #23]
 8018702:	1c5a      	adds	r2, r3, #1
 8018704:	75fa      	strb	r2, [r7, #23]
 8018706:	461a      	mov	r2, r3
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	4413      	add	r3, r2
 801870c:	7d79      	ldrb	r1, [r7, #21]
 801870e:	7cfa      	ldrb	r2, [r7, #19]
 8018710:	440a      	add	r2, r1
 8018712:	b2d2      	uxtb	r2, r2
 8018714:	701a      	strb	r2, [r3, #0]
 8018716:	e004      	b.n	8018722 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018718:	bf00      	nop
 801871a:	e002      	b.n	8018722 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801871c:	bf00      	nop
 801871e:	e000      	b.n	8018722 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018720:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018722:	7cfb      	ldrb	r3, [r7, #19]
 8018724:	3301      	adds	r3, #1
 8018726:	74fb      	strb	r3, [r7, #19]
 8018728:	7cfb      	ldrb	r3, [r7, #19]
 801872a:	2b0f      	cmp	r3, #15
 801872c:	f67f af6c 	bls.w	8018608 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018730:	7d7b      	ldrb	r3, [r7, #21]
 8018732:	3310      	adds	r3, #16
 8018734:	757b      	strb	r3, [r7, #21]
 8018736:	7d3b      	ldrb	r3, [r7, #20]
 8018738:	3301      	adds	r3, #1
 801873a:	753b      	strb	r3, [r7, #20]
 801873c:	7d7b      	ldrb	r3, [r7, #21]
 801873e:	b29a      	uxth	r2, r3
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	8a1b      	ldrh	r3, [r3, #16]
 8018744:	429a      	cmp	r2, r3
 8018746:	f4ff af5c 	bcc.w	8018602 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	7dfa      	ldrb	r2, [r7, #23]
 801874e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	7dba      	ldrb	r2, [r7, #22]
 8018754:	701a      	strb	r2, [r3, #0]
}
 8018756:	bf00      	nop
 8018758:	371c      	adds	r7, #28
 801875a:	46bd      	mov	sp, r7
 801875c:	bd90      	pop	{r4, r7, pc}

0801875e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801875e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018760:	b08b      	sub	sp, #44	; 0x2c
 8018762:	af04      	add	r7, sp, #16
 8018764:	60f8      	str	r0, [r7, #12]
 8018766:	60b9      	str	r1, [r7, #8]
 8018768:	607a      	str	r2, [r7, #4]
 801876a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	685b      	ldr	r3, [r3, #4]
 8018770:	4618      	mov	r0, r3
 8018772:	f005 fe15 	bl	801e3a0 <UTIL_TIMER_GetElapsedTime>
 8018776:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	681a      	ldr	r2, [r3, #0]
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	1ad2      	subs	r2, r2, r3
 8018780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018782:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018786:	2201      	movs	r2, #1
 8018788:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	2200      	movs	r2, #0
 801878e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d004      	beq.n	80187a2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801879c:	697a      	ldr	r2, [r7, #20]
 801879e:	429a      	cmp	r2, r3
 80187a0:	d32b      	bcc.n	80187fa <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80187a2:	68bb      	ldr	r3, [r7, #8]
 80187a4:	2200      	movs	r2, #0
 80187a6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	69db      	ldr	r3, [r3, #28]
 80187ac:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187b2:	68dd      	ldr	r5, [r3, #12]
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	7a5e      	ldrb	r6, [r3, #9]
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	f893 c008 	ldrb.w	ip, [r3, #8]
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	7d1b      	ldrb	r3, [r3, #20]
 80187c2:	68fa      	ldr	r2, [r7, #12]
 80187c4:	6992      	ldr	r2, [r2, #24]
 80187c6:	9203      	str	r2, [sp, #12]
 80187c8:	68fa      	ldr	r2, [r7, #12]
 80187ca:	f10d 0e04 	add.w	lr, sp, #4
 80187ce:	320c      	adds	r2, #12
 80187d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187d4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80187d8:	9300      	str	r3, [sp, #0]
 80187da:	4663      	mov	r3, ip
 80187dc:	4632      	mov	r2, r6
 80187de:	4629      	mov	r1, r5
 80187e0:	4620      	mov	r0, r4
 80187e2:	f7ff fc25 	bl	8018030 <RegionCommonUpdateBandTimeOff>
 80187e6:	4602      	mov	r2, r0
 80187e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ea:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	69d8      	ldr	r0, [r3, #28]
 80187f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f2:	683a      	ldr	r2, [r7, #0]
 80187f4:	6879      	ldr	r1, [r7, #4]
 80187f6:	f7ff fef4 	bl	80185e2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d004      	beq.n	801880c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018804:	2200      	movs	r2, #0
 8018806:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018808:	2300      	movs	r3, #0
 801880a:	e006      	b.n	801881a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d001      	beq.n	8018818 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018814:	230b      	movs	r3, #11
 8018816:	e000      	b.n	801881a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018818:	230c      	movs	r3, #12
    }
}
 801881a:	4618      	mov	r0, r3
 801881c:	371c      	adds	r7, #28
 801881e:	46bd      	mov	sp, r7
 8018820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018822 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018822:	b5b0      	push	{r4, r5, r7, lr}
 8018824:	b086      	sub	sp, #24
 8018826:	af02      	add	r7, sp, #8
 8018828:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	f993 2000 	ldrsb.w	r2, [r3]
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801883c:	429a      	cmp	r2, r3
 801883e:	d103      	bne.n	8018848 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018846:	e026      	b.n	8018896 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018848:	7bfb      	ldrb	r3, [r7, #15]
 801884a:	3b01      	subs	r3, #1
 801884c:	b2db      	uxtb	r3, r3
 801884e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018856:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801885a:	429a      	cmp	r2, r3
 801885c:	d019      	beq.n	8018892 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	78d8      	ldrb	r0, [r3, #3]
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6859      	ldr	r1, [r3, #4]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	6892      	ldr	r2, [r2, #8]
 8018876:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801887a:	9201      	str	r2, [sp, #4]
 801887c:	9300      	str	r3, [sp, #0]
 801887e:	462b      	mov	r3, r5
 8018880:	4622      	mov	r2, r4
 8018882:	f7ff fa92 	bl	8017daa <RegionCommonChanVerifyDr>
 8018886:	4603      	mov	r3, r0
 8018888:	f083 0301 	eor.w	r3, r3, #1
 801888c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801888e:	2b00      	cmp	r3, #0
 8018890:	d1da      	bne.n	8018848 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018892:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018896:	4618      	mov	r0, r3
 8018898:	3710      	adds	r7, #16
 801889a:	46bd      	mov	sp, r7
 801889c:	bdb0      	pop	{r4, r5, r7, pc}

0801889e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801889e:	b480      	push	{r7}
 80188a0:	b083      	sub	sp, #12
 80188a2:	af00      	add	r7, sp, #0
 80188a4:	4603      	mov	r3, r0
 80188a6:	460a      	mov	r2, r1
 80188a8:	71fb      	strb	r3, [r7, #7]
 80188aa:	4613      	mov	r3, r2
 80188ac:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80188ae:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80188b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188b6:	4293      	cmp	r3, r2
 80188b8:	bfb8      	it	lt
 80188ba:	4613      	movlt	r3, r2
 80188bc:	b25b      	sxtb	r3, r3
}
 80188be:	4618      	mov	r0, r3
 80188c0:	370c      	adds	r7, #12
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bc80      	pop	{r7}
 80188c6:	4770      	bx	lr

080188c8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80188c8:	b480      	push	{r7}
 80188ca:	b083      	sub	sp, #12
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
 80188d0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	009b      	lsls	r3, r3, #2
 80188d6:	683a      	ldr	r2, [r7, #0]
 80188d8:	4413      	add	r3, r2
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	4a07      	ldr	r2, [pc, #28]	; (80188fc <RegionCommonGetBandwidth+0x34>)
 80188de:	4293      	cmp	r3, r2
 80188e0:	d004      	beq.n	80188ec <RegionCommonGetBandwidth+0x24>
 80188e2:	4a07      	ldr	r2, [pc, #28]	; (8018900 <RegionCommonGetBandwidth+0x38>)
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d003      	beq.n	80188f0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80188e8:	2300      	movs	r3, #0
 80188ea:	e002      	b.n	80188f2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80188ec:	2301      	movs	r3, #1
 80188ee:	e000      	b.n	80188f2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80188f0:	2302      	movs	r3, #2
    }
}
 80188f2:	4618      	mov	r0, r3
 80188f4:	370c      	adds	r7, #12
 80188f6:	46bd      	mov	sp, r7
 80188f8:	bc80      	pop	{r7}
 80188fa:	4770      	bx	lr
 80188fc:	0003d090 	.word	0x0003d090
 8018900:	0007a120 	.word	0x0007a120

08018904 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b086      	sub	sp, #24
 8018908:	af04      	add	r7, sp, #16
 801890a:	4603      	mov	r3, r0
 801890c:	6039      	str	r1, [r7, #0]
 801890e:	71fb      	strb	r3, [r7, #7]
 8018910:	4613      	mov	r3, r2
 8018912:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018914:	79fb      	ldrb	r3, [r7, #7]
 8018916:	2b05      	cmp	r3, #5
 8018918:	d810      	bhi.n	801893c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801891a:	79fb      	ldrb	r3, [r7, #7]
 801891c:	4a0f      	ldr	r2, [pc, #60]	; (801895c <RegionCommonRxConfigPrint+0x58>)
 801891e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018922:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018926:	9202      	str	r2, [sp, #8]
 8018928:	683a      	ldr	r2, [r7, #0]
 801892a:	9201      	str	r2, [sp, #4]
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	4b0c      	ldr	r3, [pc, #48]	; (8018960 <RegionCommonRxConfigPrint+0x5c>)
 8018930:	2201      	movs	r2, #1
 8018932:	2100      	movs	r1, #0
 8018934:	2002      	movs	r0, #2
 8018936:	f005 fe11 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801893a:	e00a      	b.n	8018952 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801893c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018940:	9301      	str	r3, [sp, #4]
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	9300      	str	r3, [sp, #0]
 8018946:	4b07      	ldr	r3, [pc, #28]	; (8018964 <RegionCommonRxConfigPrint+0x60>)
 8018948:	2201      	movs	r2, #1
 801894a:	2100      	movs	r1, #0
 801894c:	2002      	movs	r0, #2
 801894e:	f005 fe05 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 8018952:	bf00      	nop
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	20000138 	.word	0x20000138
 8018960:	0801f3a4 	.word	0x0801f3a4
 8018964:	0801f3c4 	.word	0x0801f3c4

08018968 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af02      	add	r7, sp, #8
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	460b      	mov	r3, r1
 8018972:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018978:	9301      	str	r3, [sp, #4]
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	9300      	str	r3, [sp, #0]
 801897e:	4b05      	ldr	r3, [pc, #20]	; (8018994 <RegionCommonTxConfigPrint+0x2c>)
 8018980:	2201      	movs	r2, #1
 8018982:	2100      	movs	r1, #0
 8018984:	2002      	movs	r0, #2
 8018986:	f005 fde9 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
}
 801898a:	bf00      	nop
 801898c:	3708      	adds	r7, #8
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	0801f3e0 	.word	0x0801f3e0

08018998 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b082      	sub	sp, #8
 801899c:	af00      	add	r7, sp, #0
 801899e:	6078      	str	r0, [r7, #4]
 80189a0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80189a2:	4b2d      	ldr	r3, [pc, #180]	; (8018a58 <VerifyRfFreq+0xc0>)
 80189a4:	6a1b      	ldr	r3, [r3, #32]
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	4798      	blx	r3
 80189aa:	4603      	mov	r3, r0
 80189ac:	f083 0301 	eor.w	r3, r3, #1
 80189b0:	b2db      	uxtb	r3, r3
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d001      	beq.n	80189ba <VerifyRfFreq+0x22>
    {
        return false;
 80189b6:	2300      	movs	r3, #0
 80189b8:	e04a      	b.n	8018a50 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	4a27      	ldr	r2, [pc, #156]	; (8018a5c <VerifyRfFreq+0xc4>)
 80189be:	4293      	cmp	r3, r2
 80189c0:	d307      	bcc.n	80189d2 <VerifyRfFreq+0x3a>
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	4a26      	ldr	r2, [pc, #152]	; (8018a60 <VerifyRfFreq+0xc8>)
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d803      	bhi.n	80189d2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80189ca:	683b      	ldr	r3, [r7, #0]
 80189cc:	2202      	movs	r2, #2
 80189ce:	701a      	strb	r2, [r3, #0]
 80189d0:	e03d      	b.n	8018a4e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	4a22      	ldr	r2, [pc, #136]	; (8018a60 <VerifyRfFreq+0xc8>)
 80189d6:	4293      	cmp	r3, r2
 80189d8:	d907      	bls.n	80189ea <VerifyRfFreq+0x52>
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	4a21      	ldr	r2, [pc, #132]	; (8018a64 <VerifyRfFreq+0xcc>)
 80189de:	4293      	cmp	r3, r2
 80189e0:	d803      	bhi.n	80189ea <VerifyRfFreq+0x52>
    {
        *band = 0;
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	2200      	movs	r2, #0
 80189e6:	701a      	strb	r2, [r3, #0]
 80189e8:	e031      	b.n	8018a4e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4a1d      	ldr	r2, [pc, #116]	; (8018a64 <VerifyRfFreq+0xcc>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d907      	bls.n	8018a02 <VerifyRfFreq+0x6a>
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	4a1c      	ldr	r2, [pc, #112]	; (8018a68 <VerifyRfFreq+0xd0>)
 80189f6:	4293      	cmp	r3, r2
 80189f8:	d803      	bhi.n	8018a02 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	2201      	movs	r2, #1
 80189fe:	701a      	strb	r2, [r3, #0]
 8018a00:	e025      	b.n	8018a4e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	4a19      	ldr	r2, [pc, #100]	; (8018a6c <VerifyRfFreq+0xd4>)
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d907      	bls.n	8018a1a <VerifyRfFreq+0x82>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	4a18      	ldr	r2, [pc, #96]	; (8018a70 <VerifyRfFreq+0xd8>)
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d803      	bhi.n	8018a1a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	2205      	movs	r2, #5
 8018a16:	701a      	strb	r2, [r3, #0]
 8018a18:	e019      	b.n	8018a4e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	4a15      	ldr	r2, [pc, #84]	; (8018a74 <VerifyRfFreq+0xdc>)
 8018a1e:	4293      	cmp	r3, r2
 8018a20:	d907      	bls.n	8018a32 <VerifyRfFreq+0x9a>
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	4a14      	ldr	r2, [pc, #80]	; (8018a78 <VerifyRfFreq+0xe0>)
 8018a26:	4293      	cmp	r3, r2
 8018a28:	d803      	bhi.n	8018a32 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	2203      	movs	r2, #3
 8018a2e:	701a      	strb	r2, [r3, #0]
 8018a30:	e00d      	b.n	8018a4e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	4a11      	ldr	r2, [pc, #68]	; (8018a7c <VerifyRfFreq+0xe4>)
 8018a36:	4293      	cmp	r3, r2
 8018a38:	d307      	bcc.n	8018a4a <VerifyRfFreq+0xb2>
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	4a10      	ldr	r2, [pc, #64]	; (8018a80 <VerifyRfFreq+0xe8>)
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d803      	bhi.n	8018a4a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	2204      	movs	r2, #4
 8018a46:	701a      	strb	r2, [r3, #0]
 8018a48:	e001      	b.n	8018a4e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	e000      	b.n	8018a50 <VerifyRfFreq+0xb8>
    }
    return true;
 8018a4e:	2301      	movs	r3, #1
}
 8018a50:	4618      	mov	r0, r3
 8018a52:	3708      	adds	r7, #8
 8018a54:	46bd      	mov	sp, r7
 8018a56:	bd80      	pop	{r7, pc}
 8018a58:	0801fa04 	.word	0x0801fa04
 8018a5c:	337055c0 	.word	0x337055c0
 8018a60:	338eda3f 	.word	0x338eda3f
 8018a64:	33bca100 	.word	0x33bca100
 8018a68:	33c5c8c0 	.word	0x33c5c8c0
 8018a6c:	33c74f5f 	.word	0x33c74f5f
 8018a70:	33cef080 	.word	0x33cef080
 8018a74:	33d1fdbf 	.word	0x33d1fdbf
 8018a78:	33d5ce50 	.word	0x33d5ce50
 8018a7c:	33d691a0 	.word	0x33d691a0
 8018a80:	33db2580 	.word	0x33db2580

08018a84 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018a84:	b590      	push	{r4, r7, lr}
 8018a86:	b08b      	sub	sp, #44	; 0x2c
 8018a88:	af04      	add	r7, sp, #16
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	460a      	mov	r2, r1
 8018a8e:	71fb      	strb	r3, [r7, #7]
 8018a90:	4613      	mov	r3, r2
 8018a92:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a98:	4a1f      	ldr	r2, [pc, #124]	; (8018b18 <GetTimeOnAir+0x94>)
 8018a9a:	5cd3      	ldrb	r3, [r2, r3]
 8018a9c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018aa2:	491e      	ldr	r1, [pc, #120]	; (8018b1c <GetTimeOnAir+0x98>)
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f7ff ff0f 	bl	80188c8 <RegionCommonGetBandwidth>
 8018aaa:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018aac:	2300      	movs	r3, #0
 8018aae:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ab4:	2b07      	cmp	r3, #7
 8018ab6:	d118      	bne.n	8018aea <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018ab8:	4b19      	ldr	r3, [pc, #100]	; (8018b20 <GetTimeOnAir+0x9c>)
 8018aba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018abc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ac4:	fb02 f303 	mul.w	r3, r2, r3
 8018ac8:	4619      	mov	r1, r3
 8018aca:	88bb      	ldrh	r3, [r7, #4]
 8018acc:	b2db      	uxtb	r3, r3
 8018ace:	2201      	movs	r2, #1
 8018ad0:	9203      	str	r2, [sp, #12]
 8018ad2:	9302      	str	r3, [sp, #8]
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	9301      	str	r3, [sp, #4]
 8018ad8:	2305      	movs	r3, #5
 8018ada:	9300      	str	r3, [sp, #0]
 8018adc:	2300      	movs	r3, #0
 8018ade:	460a      	mov	r2, r1
 8018ae0:	68f9      	ldr	r1, [r7, #12]
 8018ae2:	2000      	movs	r0, #0
 8018ae4:	47a0      	blx	r4
 8018ae6:	6178      	str	r0, [r7, #20]
 8018ae8:	e011      	b.n	8018b0e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018aea:	4b0d      	ldr	r3, [pc, #52]	; (8018b20 <GetTimeOnAir+0x9c>)
 8018aec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018aee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018af2:	88bb      	ldrh	r3, [r7, #4]
 8018af4:	b2db      	uxtb	r3, r3
 8018af6:	2101      	movs	r1, #1
 8018af8:	9103      	str	r1, [sp, #12]
 8018afa:	9302      	str	r3, [sp, #8]
 8018afc:	2300      	movs	r3, #0
 8018afe:	9301      	str	r3, [sp, #4]
 8018b00:	2308      	movs	r3, #8
 8018b02:	9300      	str	r3, [sp, #0]
 8018b04:	2301      	movs	r3, #1
 8018b06:	68f9      	ldr	r1, [r7, #12]
 8018b08:	2001      	movs	r0, #1
 8018b0a:	47a0      	blx	r4
 8018b0c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018b0e:	697b      	ldr	r3, [r7, #20]
}
 8018b10:	4618      	mov	r0, r3
 8018b12:	371c      	adds	r7, #28
 8018b14:	46bd      	mov	sp, r7
 8018b16:	bd90      	pop	{r4, r7, pc}
 8018b18:	0801f9cc 	.word	0x0801f9cc
 8018b1c:	0801f9d4 	.word	0x0801f9d4
 8018b20:	0801fa04 	.word	0x0801fa04

08018b24 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b088      	sub	sp, #32
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	781b      	ldrb	r3, [r3, #0]
 8018b34:	3b01      	subs	r3, #1
 8018b36:	2b38      	cmp	r3, #56	; 0x38
 8018b38:	f200 8128 	bhi.w	8018d8c <RegionEU868GetPhyParam+0x268>
 8018b3c:	a201      	add	r2, pc, #4	; (adr r2, 8018b44 <RegionEU868GetPhyParam+0x20>)
 8018b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b42:	bf00      	nop
 8018b44:	08018c29 	.word	0x08018c29
 8018b48:	08018c2f 	.word	0x08018c2f
 8018b4c:	08018d8d 	.word	0x08018d8d
 8018b50:	08018d8d 	.word	0x08018d8d
 8018b54:	08018d8d 	.word	0x08018d8d
 8018b58:	08018c35 	.word	0x08018c35
 8018b5c:	08018d8d 	.word	0x08018d8d
 8018b60:	08018c6f 	.word	0x08018c6f
 8018b64:	08018d8d 	.word	0x08018d8d
 8018b68:	08018c75 	.word	0x08018c75
 8018b6c:	08018c7b 	.word	0x08018c7b
 8018b70:	08018c81 	.word	0x08018c81
 8018b74:	08018c87 	.word	0x08018c87
 8018b78:	08018c97 	.word	0x08018c97
 8018b7c:	08018ca7 	.word	0x08018ca7
 8018b80:	08018cad 	.word	0x08018cad
 8018b84:	08018cb5 	.word	0x08018cb5
 8018b88:	08018cbd 	.word	0x08018cbd
 8018b8c:	08018cc5 	.word	0x08018cc5
 8018b90:	08018ccd 	.word	0x08018ccd
 8018b94:	08018cd5 	.word	0x08018cd5
 8018b98:	08018cdd 	.word	0x08018cdd
 8018b9c:	08018cf1 	.word	0x08018cf1
 8018ba0:	08018cf7 	.word	0x08018cf7
 8018ba4:	08018cfd 	.word	0x08018cfd
 8018ba8:	08018d03 	.word	0x08018d03
 8018bac:	08018d0f 	.word	0x08018d0f
 8018bb0:	08018d1b 	.word	0x08018d1b
 8018bb4:	08018d21 	.word	0x08018d21
 8018bb8:	08018d29 	.word	0x08018d29
 8018bbc:	08018d2f 	.word	0x08018d2f
 8018bc0:	08018d35 	.word	0x08018d35
 8018bc4:	08018d3d 	.word	0x08018d3d
 8018bc8:	08018c3b 	.word	0x08018c3b
 8018bcc:	08018d8d 	.word	0x08018d8d
 8018bd0:	08018d8d 	.word	0x08018d8d
 8018bd4:	08018d8d 	.word	0x08018d8d
 8018bd8:	08018d8d 	.word	0x08018d8d
 8018bdc:	08018d8d 	.word	0x08018d8d
 8018be0:	08018d8d 	.word	0x08018d8d
 8018be4:	08018d8d 	.word	0x08018d8d
 8018be8:	08018d8d 	.word	0x08018d8d
 8018bec:	08018d8d 	.word	0x08018d8d
 8018bf0:	08018d8d 	.word	0x08018d8d
 8018bf4:	08018d8d 	.word	0x08018d8d
 8018bf8:	08018d8d 	.word	0x08018d8d
 8018bfc:	08018d8d 	.word	0x08018d8d
 8018c00:	08018d43 	.word	0x08018d43
 8018c04:	08018d49 	.word	0x08018d49
 8018c08:	08018d57 	.word	0x08018d57
 8018c0c:	08018d8d 	.word	0x08018d8d
 8018c10:	08018d8d 	.word	0x08018d8d
 8018c14:	08018d5d 	.word	0x08018d5d
 8018c18:	08018d63 	.word	0x08018d63
 8018c1c:	08018d8d 	.word	0x08018d8d
 8018c20:	08018d69 	.word	0x08018d69
 8018c24:	08018d79 	.word	0x08018d79
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	61bb      	str	r3, [r7, #24]
            break;
 8018c2c:	e0af      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018c2e:	2300      	movs	r3, #0
 8018c30:	61bb      	str	r3, [r7, #24]
            break;
 8018c32:	e0ac      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018c34:	2300      	movs	r3, #0
 8018c36:	61bb      	str	r3, [r7, #24]
            break;
 8018c38:	e0a9      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c40:	733b      	strb	r3, [r7, #12]
 8018c42:	2307      	movs	r3, #7
 8018c44:	737b      	strb	r3, [r7, #13]
 8018c46:	2300      	movs	r3, #0
 8018c48:	73bb      	strb	r3, [r7, #14]
 8018c4a:	2310      	movs	r3, #16
 8018c4c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018c4e:	4b53      	ldr	r3, [pc, #332]	; (8018d9c <RegionEU868GetPhyParam+0x278>)
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c56:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018c58:	4b50      	ldr	r3, [pc, #320]	; (8018d9c <RegionEU868GetPhyParam+0x278>)
 8018c5a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c5c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018c5e:	f107 030c 	add.w	r3, r7, #12
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7ff fddd 	bl	8018822 <RegionCommonGetNextLowerTxDr>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	61bb      	str	r3, [r7, #24]
            break;
 8018c6c:	e08f      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	61bb      	str	r3, [r7, #24]
            break;
 8018c72:	e08c      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018c74:	2300      	movs	r3, #0
 8018c76:	61bb      	str	r3, [r7, #24]
            break;
 8018c78:	e089      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018c7a:	2340      	movs	r3, #64	; 0x40
 8018c7c:	61bb      	str	r3, [r7, #24]
            break;
 8018c7e:	e086      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018c80:	2320      	movs	r3, #32
 8018c82:	61bb      	str	r3, [r7, #24]
            break;
 8018c84:	e083      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	4b44      	ldr	r3, [pc, #272]	; (8018da0 <RegionEU868GetPhyParam+0x27c>)
 8018c90:	5c9b      	ldrb	r3, [r3, r2]
 8018c92:	61bb      	str	r3, [r7, #24]
            break;
 8018c94:	e07b      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c9c:	461a      	mov	r2, r3
 8018c9e:	4b41      	ldr	r3, [pc, #260]	; (8018da4 <RegionEU868GetPhyParam+0x280>)
 8018ca0:	5c9b      	ldrb	r3, [r3, r2]
 8018ca2:	61bb      	str	r3, [r7, #24]
            break;
 8018ca4:	e073      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	61bb      	str	r3, [r7, #24]
            break;
 8018caa:	e070      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018cac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018cb0:	61bb      	str	r3, [r7, #24]
            break;
 8018cb2:	e06c      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018cb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018cb8:	61bb      	str	r3, [r7, #24]
            break;
 8018cba:	e068      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018cbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018cc0:	61bb      	str	r3, [r7, #24]
            break;
 8018cc2:	e064      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018cc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8018cc8:	61bb      	str	r3, [r7, #24]
            break;
 8018cca:	e060      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018ccc:	f241 7370 	movw	r3, #6000	; 0x1770
 8018cd0:	61bb      	str	r3, [r7, #24]
            break;
 8018cd2:	e05c      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018cd8:	61bb      	str	r3, [r7, #24]
            break;
 8018cda:	e058      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018ce0:	4831      	ldr	r0, [pc, #196]	; (8018da8 <RegionEU868GetPhyParam+0x284>)
 8018ce2:	f001 f87f 	bl	8019de4 <randr>
 8018ce6:	4603      	mov	r3, r0
 8018ce8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018cec:	61bb      	str	r3, [r7, #24]
            break;
 8018cee:	e04e      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	61bb      	str	r3, [r7, #24]
            break;
 8018cf4:	e04b      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018cf6:	4b2d      	ldr	r3, [pc, #180]	; (8018dac <RegionEU868GetPhyParam+0x288>)
 8018cf8:	61bb      	str	r3, [r7, #24]
            break;
 8018cfa:	e048      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	61bb      	str	r3, [r7, #24]
            break;
 8018d00:	e045      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018d02:	4b26      	ldr	r3, [pc, #152]	; (8018d9c <RegionEU868GetPhyParam+0x278>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018d0a:	61bb      	str	r3, [r7, #24]
            break;
 8018d0c:	e03f      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018d0e:	4b23      	ldr	r3, [pc, #140]	; (8018d9c <RegionEU868GetPhyParam+0x278>)
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018d16:	61bb      	str	r3, [r7, #24]
            break;
 8018d18:	e039      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018d1a:	2310      	movs	r3, #16
 8018d1c:	61bb      	str	r3, [r7, #24]
            break;
 8018d1e:	e036      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018d20:	4b1e      	ldr	r3, [pc, #120]	; (8018d9c <RegionEU868GetPhyParam+0x278>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	61bb      	str	r3, [r7, #24]
            break;
 8018d26:	e032      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018d28:	2300      	movs	r3, #0
 8018d2a:	61bb      	str	r3, [r7, #24]
            break;
 8018d2c:	e02f      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018d2e:	2300      	movs	r3, #0
 8018d30:	61bb      	str	r3, [r7, #24]
            break;
 8018d32:	e02c      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018d34:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018d38:	61bb      	str	r3, [r7, #24]
            break;
 8018d3a:	e028      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018d3c:	4b1c      	ldr	r3, [pc, #112]	; (8018db0 <RegionEU868GetPhyParam+0x28c>)
 8018d3e:	61bb      	str	r3, [r7, #24]
            break;
 8018d40:	e025      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018d42:	4b1a      	ldr	r3, [pc, #104]	; (8018dac <RegionEU868GetPhyParam+0x288>)
 8018d44:	61bb      	str	r3, [r7, #24]
            break;
 8018d46:	e022      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018d48:	2311      	movs	r3, #17
 8018d4a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018d4c:	2302      	movs	r3, #2
 8018d4e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018d50:	2300      	movs	r3, #0
 8018d52:	76bb      	strb	r3, [r7, #26]
            break;
 8018d54:	e01b      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018d56:	2303      	movs	r3, #3
 8018d58:	61bb      	str	r3, [r7, #24]
            break;
 8018d5a:	e018      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018d5c:	4b13      	ldr	r3, [pc, #76]	; (8018dac <RegionEU868GetPhyParam+0x288>)
 8018d5e:	61bb      	str	r3, [r7, #24]
            break;
 8018d60:	e015      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018d62:	2303      	movs	r3, #3
 8018d64:	61bb      	str	r3, [r7, #24]
            break;
 8018d66:	e012      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d6e:	461a      	mov	r2, r3
 8018d70:	4b10      	ldr	r3, [pc, #64]	; (8018db4 <RegionEU868GetPhyParam+0x290>)
 8018d72:	5c9b      	ldrb	r3, [r3, r2]
 8018d74:	61bb      	str	r3, [r7, #24]
            break;
 8018d76:	e00a      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d7e:	490e      	ldr	r1, [pc, #56]	; (8018db8 <RegionEU868GetPhyParam+0x294>)
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7ff fda1 	bl	80188c8 <RegionCommonGetBandwidth>
 8018d86:	4603      	mov	r3, r0
 8018d88:	61bb      	str	r3, [r7, #24]
            break;
 8018d8a:	e000      	b.n	8018d8e <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018d8c:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018d8e:	69bb      	ldr	r3, [r7, #24]
 8018d90:	61fb      	str	r3, [r7, #28]
 8018d92:	69fb      	ldr	r3, [r7, #28]
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3720      	adds	r7, #32
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	20001728 	.word	0x20001728
 8018da0:	0801f9f4 	.word	0x0801f9f4
 8018da4:	0801f9fc 	.word	0x0801f9fc
 8018da8:	fffffc18 	.word	0xfffffc18
 8018dac:	33d3e608 	.word	0x33d3e608
 8018db0:	4009999a 	.word	0x4009999a
 8018db4:	0801f9cc 	.word	0x0801f9cc
 8018db8:	0801f9d4 	.word	0x0801f9d4

08018dbc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018dbc:	b590      	push	{r4, r7, lr}
 8018dbe:	b085      	sub	sp, #20
 8018dc0:	af02      	add	r7, sp, #8
 8018dc2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018dc4:	4b11      	ldr	r3, [pc, #68]	; (8018e0c <RegionEU868SetBandTxDone+0x50>)
 8018dc6:	681a      	ldr	r2, [r3, #0]
 8018dc8:	4b11      	ldr	r3, [pc, #68]	; (8018e10 <RegionEU868SetBandTxDone+0x54>)
 8018dca:	6819      	ldr	r1, [r3, #0]
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	781b      	ldrb	r3, [r3, #0]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	4603      	mov	r3, r0
 8018dd4:	005b      	lsls	r3, r3, #1
 8018dd6:	4403      	add	r3, r0
 8018dd8:	009b      	lsls	r3, r3, #2
 8018dda:	440b      	add	r3, r1
 8018ddc:	3309      	adds	r3, #9
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	4619      	mov	r1, r3
 8018de2:	460b      	mov	r3, r1
 8018de4:	005b      	lsls	r3, r3, #1
 8018de6:	440b      	add	r3, r1
 8018de8:	00db      	lsls	r3, r3, #3
 8018dea:	18d0      	adds	r0, r2, r3
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	6899      	ldr	r1, [r3, #8]
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	785c      	ldrb	r4, [r3, #1]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	691a      	ldr	r2, [r3, #16]
 8018df8:	9200      	str	r2, [sp, #0]
 8018dfa:	68db      	ldr	r3, [r3, #12]
 8018dfc:	4622      	mov	r2, r4
 8018dfe:	f7ff f8e9 	bl	8017fd4 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018e02:	bf00      	nop
 8018e04:	370c      	adds	r7, #12
 8018e06:	46bd      	mov	sp, r7
 8018e08:	bd90      	pop	{r4, r7, pc}
 8018e0a:	bf00      	nop
 8018e0c:	20001724 	.word	0x20001724
 8018e10:	20001728 	.word	0x20001728

08018e14 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b0b0      	sub	sp, #192	; 0xc0
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e20:	2290      	movs	r2, #144	; 0x90
 8018e22:	2100      	movs	r1, #0
 8018e24:	4618      	mov	r0, r3
 8018e26:	f005 fe11 	bl	801ea4c <memset>
 8018e2a:	2364      	movs	r3, #100	; 0x64
 8018e2c:	863b      	strh	r3, [r7, #48]	; 0x30
 8018e2e:	2364      	movs	r3, #100	; 0x64
 8018e30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e38:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018e3c:	230a      	movs	r3, #10
 8018e3e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018e42:	2364      	movs	r3, #100	; 0x64
 8018e44:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018e48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e4c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	7a1b      	ldrb	r3, [r3, #8]
 8018e54:	2b02      	cmp	r3, #2
 8018e56:	d05e      	beq.n	8018f16 <RegionEU868InitDefaults+0x102>
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	dc6b      	bgt.n	8018f34 <RegionEU868InitDefaults+0x120>
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d002      	beq.n	8018e66 <RegionEU868InitDefaults+0x52>
 8018e60:	2b01      	cmp	r3, #1
 8018e62:	d03f      	beq.n	8018ee4 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018e64:	e066      	b.n	8018f34 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d063      	beq.n	8018f36 <RegionEU868InitDefaults+0x122>
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	685b      	ldr	r3, [r3, #4]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d05f      	beq.n	8018f36 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	4a30      	ldr	r2, [pc, #192]	; (8018f3c <RegionEU868InitDefaults+0x128>)
 8018e7c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	685b      	ldr	r3, [r3, #4]
 8018e82:	4a2f      	ldr	r2, [pc, #188]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018e84:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018e86:	4b2d      	ldr	r3, [pc, #180]	; (8018f3c <RegionEU868InitDefaults+0x128>)
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e90:	2290      	movs	r2, #144	; 0x90
 8018e92:	4619      	mov	r1, r3
 8018e94:	f000 ffbd 	bl	8019e12 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018e98:	4b29      	ldr	r3, [pc, #164]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	4a29      	ldr	r2, [pc, #164]	; (8018f44 <RegionEU868InitDefaults+0x130>)
 8018e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018ea4:	4b26      	ldr	r3, [pc, #152]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	4a27      	ldr	r2, [pc, #156]	; (8018f48 <RegionEU868InitDefaults+0x134>)
 8018eaa:	330c      	adds	r3, #12
 8018eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8018eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018eb2:	4b23      	ldr	r3, [pc, #140]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	4a25      	ldr	r2, [pc, #148]	; (8018f4c <RegionEU868InitDefaults+0x138>)
 8018eb8:	3318      	adds	r3, #24
 8018eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018ec0:	4b1f      	ldr	r3, [pc, #124]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	2207      	movs	r2, #7
 8018ec6:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018eca:	4b1d      	ldr	r3, [pc, #116]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018ed2:	4b1b      	ldr	r3, [pc, #108]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018eda:	2201      	movs	r2, #1
 8018edc:	4619      	mov	r1, r3
 8018ede:	f7ff f853 	bl	8017f88 <RegionCommonChanMaskCopy>
 8018ee2:	e028      	b.n	8018f36 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018ee4:	4b16      	ldr	r3, [pc, #88]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018eec:	4b14      	ldr	r3, [pc, #80]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018ef4:	4b12      	ldr	r3, [pc, #72]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2200      	movs	r2, #0
 8018efa:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018efc:	4b10      	ldr	r3, [pc, #64]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018f04:	4b0e      	ldr	r3, [pc, #56]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018f0c:	2201      	movs	r2, #1
 8018f0e:	4619      	mov	r1, r3
 8018f10:	f7ff f83a 	bl	8017f88 <RegionCommonChanMaskCopy>
            break;
 8018f14:	e00f      	b.n	8018f36 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018f16:	4b0a      	ldr	r3, [pc, #40]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018f1e:	4b08      	ldr	r3, [pc, #32]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018f26:	4b06      	ldr	r3, [pc, #24]	; (8018f40 <RegionEU868InitDefaults+0x12c>)
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	430a      	orrs	r2, r1
 8018f2c:	b292      	uxth	r2, r2
 8018f2e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018f32:	e000      	b.n	8018f36 <RegionEU868InitDefaults+0x122>
            break;
 8018f34:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018f36:	37c0      	adds	r7, #192	; 0xc0
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}
 8018f3c:	20001724 	.word	0x20001724
 8018f40:	20001728 	.word	0x20001728
 8018f44:	0801f3fc 	.word	0x0801f3fc
 8018f48:	0801f408 	.word	0x0801f408
 8018f4c:	0801f414 	.word	0x0801f414

08018f50 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b084      	sub	sp, #16
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018f5c:	78fb      	ldrb	r3, [r7, #3]
 8018f5e:	2b0f      	cmp	r3, #15
 8018f60:	d86c      	bhi.n	801903c <RegionEU868Verify+0xec>
 8018f62:	a201      	add	r2, pc, #4	; (adr r2, 8018f68 <RegionEU868Verify+0x18>)
 8018f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f68:	08018fa9 	.word	0x08018fa9
 8018f6c:	0801903d 	.word	0x0801903d
 8018f70:	0801903d 	.word	0x0801903d
 8018f74:	0801903d 	.word	0x0801903d
 8018f78:	0801903d 	.word	0x0801903d
 8018f7c:	08018fc1 	.word	0x08018fc1
 8018f80:	08018fdf 	.word	0x08018fdf
 8018f84:	08018ffd 	.word	0x08018ffd
 8018f88:	0801903d 	.word	0x0801903d
 8018f8c:	0801901b 	.word	0x0801901b
 8018f90:	0801901b 	.word	0x0801901b
 8018f94:	0801903d 	.word	0x0801903d
 8018f98:	0801903d 	.word	0x0801903d
 8018f9c:	0801903d 	.word	0x0801903d
 8018fa0:	0801903d 	.word	0x0801903d
 8018fa4:	08019039 	.word	0x08019039
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	f107 020f 	add.w	r2, r7, #15
 8018fb4:	4611      	mov	r1, r2
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	f7ff fcee 	bl	8018998 <VerifyRfFreq>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	e03e      	b.n	801903e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8018fc6:	2207      	movs	r2, #7
 8018fc8:	2100      	movs	r1, #0
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f7fe ff5f 	bl	8017e8e <RegionCommonValueInRange>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	bf14      	ite	ne
 8018fd6:	2301      	movne	r3, #1
 8018fd8:	2300      	moveq	r3, #0
 8018fda:	b2db      	uxtb	r3, r3
 8018fdc:	e02f      	b.n	801903e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8018fe4:	2205      	movs	r2, #5
 8018fe6:	2100      	movs	r1, #0
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7fe ff50 	bl	8017e8e <RegionCommonValueInRange>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	bf14      	ite	ne
 8018ff4:	2301      	movne	r3, #1
 8018ff6:	2300      	moveq	r3, #0
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	e020      	b.n	801903e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8019002:	2207      	movs	r2, #7
 8019004:	2100      	movs	r1, #0
 8019006:	4618      	mov	r0, r3
 8019008:	f7fe ff41 	bl	8017e8e <RegionCommonValueInRange>
 801900c:	4603      	mov	r3, r0
 801900e:	2b00      	cmp	r3, #0
 8019010:	bf14      	ite	ne
 8019012:	2301      	movne	r3, #1
 8019014:	2300      	moveq	r3, #0
 8019016:	b2db      	uxtb	r3, r3
 8019018:	e011      	b.n	801903e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	f993 3000 	ldrsb.w	r3, [r3]
 8019020:	2207      	movs	r2, #7
 8019022:	2100      	movs	r1, #0
 8019024:	4618      	mov	r0, r3
 8019026:	f7fe ff32 	bl	8017e8e <RegionCommonValueInRange>
 801902a:	4603      	mov	r3, r0
 801902c:	2b00      	cmp	r3, #0
 801902e:	bf14      	ite	ne
 8019030:	2301      	movne	r3, #1
 8019032:	2300      	moveq	r3, #0
 8019034:	b2db      	uxtb	r3, r3
 8019036:	e002      	b.n	801903e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019038:	2301      	movs	r3, #1
 801903a:	e000      	b.n	801903e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801903c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801903e:	4618      	mov	r0, r3
 8019040:	3710      	adds	r7, #16
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}
 8019046:	bf00      	nop

08019048 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b08a      	sub	sp, #40	; 0x28
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019050:	2350      	movs	r3, #80	; 0x50
 8019052:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	791b      	ldrb	r3, [r3, #4]
 801905a:	2b10      	cmp	r3, #16
 801905c:	d162      	bne.n	8019124 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	330f      	adds	r3, #15
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d15e      	bne.n	8019128 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801906a:	2300      	movs	r3, #0
 801906c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019070:	2303      	movs	r3, #3
 8019072:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019076:	e050      	b.n	801911a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019078:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801907c:	2b07      	cmp	r3, #7
 801907e:	d824      	bhi.n	80190ca <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	681a      	ldr	r2, [r3, #0]
 8019084:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019088:	4413      	add	r3, r2
 801908a:	781b      	ldrb	r3, [r3, #0]
 801908c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801908e:	69ba      	ldr	r2, [r7, #24]
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6819      	ldr	r1, [r3, #0]
 8019094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019098:	3301      	adds	r3, #1
 801909a:	440b      	add	r3, r1
 801909c:	781b      	ldrb	r3, [r3, #0]
 801909e:	021b      	lsls	r3, r3, #8
 80190a0:	4313      	orrs	r3, r2
 80190a2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80190a4:	69ba      	ldr	r2, [r7, #24]
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	6819      	ldr	r1, [r3, #0]
 80190aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190ae:	3302      	adds	r3, #2
 80190b0:	440b      	add	r3, r1
 80190b2:	781b      	ldrb	r3, [r3, #0]
 80190b4:	041b      	lsls	r3, r3, #16
 80190b6:	4313      	orrs	r3, r2
 80190b8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80190ba:	69bb      	ldr	r3, [r7, #24]
 80190bc:	2264      	movs	r2, #100	; 0x64
 80190be:	fb02 f303 	mul.w	r3, r2, r3
 80190c2:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80190c4:	2300      	movs	r3, #0
 80190c6:	61fb      	str	r3, [r7, #28]
 80190c8:	e006      	b.n	80190d8 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80190ca:	2300      	movs	r3, #0
 80190cc:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80190ce:	2300      	movs	r3, #0
 80190d0:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80190d4:	2300      	movs	r3, #0
 80190d6:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80190d8:	69bb      	ldr	r3, [r7, #24]
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d00b      	beq.n	80190f6 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80190de:	f107 0318 	add.w	r3, r7, #24
 80190e2:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80190e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190e8:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80190ea:	f107 0310 	add.w	r3, r7, #16
 80190ee:	4618      	mov	r0, r3
 80190f0:	f000 fd14 	bl	8019b1c <RegionEU868ChannelAdd>
 80190f4:	e007      	b.n	8019106 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80190f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190fa:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80190fc:	f107 030c 	add.w	r3, r7, #12
 8019100:	4618      	mov	r0, r3
 8019102:	f000 fdad 	bl	8019c60 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801910a:	3303      	adds	r3, #3
 801910c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019114:	3301      	adds	r3, #1
 8019116:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801911a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801911e:	2b0f      	cmp	r3, #15
 8019120:	d9aa      	bls.n	8019078 <RegionEU868ApplyCFList+0x30>
 8019122:	e002      	b.n	801912a <RegionEU868ApplyCFList+0xe2>
        return;
 8019124:	bf00      	nop
 8019126:	e000      	b.n	801912a <RegionEU868ApplyCFList+0xe2>
        return;
 8019128:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801912a:	3728      	adds	r7, #40	; 0x28
 801912c:	46bd      	mov	sp, r7
 801912e:	bd80      	pop	{r7, pc}

08019130 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019130:	b580      	push	{r7, lr}
 8019132:	b082      	sub	sp, #8
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	791b      	ldrb	r3, [r3, #4]
 801913c:	2b00      	cmp	r3, #0
 801913e:	d002      	beq.n	8019146 <RegionEU868ChanMaskSet+0x16>
 8019140:	2b01      	cmp	r3, #1
 8019142:	d00b      	beq.n	801915c <RegionEU868ChanMaskSet+0x2c>
 8019144:	e015      	b.n	8019172 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019146:	4b0e      	ldr	r3, [pc, #56]	; (8019180 <RegionEU868ChanMaskSet+0x50>)
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	2201      	movs	r2, #1
 8019154:	4619      	mov	r1, r3
 8019156:	f7fe ff17 	bl	8017f88 <RegionCommonChanMaskCopy>
            break;
 801915a:	e00c      	b.n	8019176 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801915c:	4b08      	ldr	r3, [pc, #32]	; (8019180 <RegionEU868ChanMaskSet+0x50>)
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2201      	movs	r2, #1
 801916a:	4619      	mov	r1, r3
 801916c:	f7fe ff0c 	bl	8017f88 <RegionCommonChanMaskCopy>
            break;
 8019170:	e001      	b.n	8019176 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8019172:	2300      	movs	r3, #0
 8019174:	e000      	b.n	8019178 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8019176:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019178:	4618      	mov	r0, r3
 801917a:	3708      	adds	r7, #8
 801917c:	46bd      	mov	sp, r7
 801917e:	bd80      	pop	{r7, pc}
 8019180:	20001728 	.word	0x20001728

08019184 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b088      	sub	sp, #32
 8019188:	af02      	add	r7, sp, #8
 801918a:	60ba      	str	r2, [r7, #8]
 801918c:	607b      	str	r3, [r7, #4]
 801918e:	4603      	mov	r3, r0
 8019190:	73fb      	strb	r3, [r7, #15]
 8019192:	460b      	mov	r3, r1
 8019194:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8019196:	2300      	movs	r3, #0
 8019198:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801919a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801919e:	2b07      	cmp	r3, #7
 80191a0:	bfa8      	it	ge
 80191a2:	2307      	movge	r3, #7
 80191a4:	b25a      	sxtb	r2, r3
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191b0:	491e      	ldr	r1, [pc, #120]	; (801922c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191b2:	4618      	mov	r0, r3
 80191b4:	f7ff fb88 	bl	80188c8 <RegionCommonGetBandwidth>
 80191b8:	4603      	mov	r3, r0
 80191ba:	b2da      	uxtb	r2, r3
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191c6:	2b07      	cmp	r3, #7
 80191c8:	d10a      	bne.n	80191e0 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191d0:	461a      	mov	r2, r3
 80191d2:	4b17      	ldr	r3, [pc, #92]	; (8019230 <RegionEU868ComputeRxWindowParameters+0xac>)
 80191d4:	5c9b      	ldrb	r3, [r3, r2]
 80191d6:	4618      	mov	r0, r3
 80191d8:	f7ff f90a 	bl	80183f0 <RegionCommonComputeSymbolTimeFsk>
 80191dc:	6178      	str	r0, [r7, #20]
 80191de:	e011      	b.n	8019204 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191e6:	461a      	mov	r2, r3
 80191e8:	4b11      	ldr	r3, [pc, #68]	; (8019230 <RegionEU868ComputeRxWindowParameters+0xac>)
 80191ea:	5c9a      	ldrb	r2, [r3, r2]
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191f2:	4619      	mov	r1, r3
 80191f4:	4b0d      	ldr	r3, [pc, #52]	; (801922c <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80191fa:	4619      	mov	r1, r3
 80191fc:	4610      	mov	r0, r2
 80191fe:	f7ff f8e1 	bl	80183c4 <RegionCommonComputeSymbolTimeLoRa>
 8019202:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019204:	4b0b      	ldr	r3, [pc, #44]	; (8019234 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8019206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019208:	4798      	blx	r3
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	3308      	adds	r3, #8
 801920e:	687a      	ldr	r2, [r7, #4]
 8019210:	320c      	adds	r2, #12
 8019212:	7bb9      	ldrb	r1, [r7, #14]
 8019214:	9201      	str	r2, [sp, #4]
 8019216:	9300      	str	r3, [sp, #0]
 8019218:	4603      	mov	r3, r0
 801921a:	68ba      	ldr	r2, [r7, #8]
 801921c:	6978      	ldr	r0, [r7, #20]
 801921e:	f7ff f8f7 	bl	8018410 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8019222:	bf00      	nop
 8019224:	3718      	adds	r7, #24
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}
 801922a:	bf00      	nop
 801922c:	0801f9d4 	.word	0x0801f9d4
 8019230:	0801f9cc 	.word	0x0801f9cc
 8019234:	0801fa04 	.word	0x0801fa04

08019238 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019238:	b5b0      	push	{r4, r5, r7, lr}
 801923a:	b090      	sub	sp, #64	; 0x40
 801923c:	af0a      	add	r7, sp, #40	; 0x28
 801923e:	6078      	str	r0, [r7, #4]
 8019240:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	785b      	ldrb	r3, [r3, #1]
 8019246:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019248:	2300      	movs	r3, #0
 801924a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801924c:	2300      	movs	r3, #0
 801924e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	685b      	ldr	r3, [r3, #4]
 8019254:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019256:	4b5a      	ldr	r3, [pc, #360]	; (80193c0 <RegionEU868RxConfig+0x188>)
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	4798      	blx	r3
 801925c:	4603      	mov	r3, r0
 801925e:	2b00      	cmp	r3, #0
 8019260:	d001      	beq.n	8019266 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8019262:	2300      	movs	r3, #0
 8019264:	e0a8      	b.n	80193b8 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	7cdb      	ldrb	r3, [r3, #19]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d126      	bne.n	80192bc <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801926e:	4b55      	ldr	r3, [pc, #340]	; (80193c4 <RegionEU868RxConfig+0x18c>)
 8019270:	681a      	ldr	r2, [r3, #0]
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	4619      	mov	r1, r3
 8019278:	460b      	mov	r3, r1
 801927a:	005b      	lsls	r3, r3, #1
 801927c:	440b      	add	r3, r1
 801927e:	009b      	lsls	r3, r3, #2
 8019280:	4413      	add	r3, r2
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019286:	4b4f      	ldr	r3, [pc, #316]	; (80193c4 <RegionEU868RxConfig+0x18c>)
 8019288:	681a      	ldr	r2, [r3, #0]
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	781b      	ldrb	r3, [r3, #0]
 801928e:	4619      	mov	r1, r3
 8019290:	460b      	mov	r3, r1
 8019292:	005b      	lsls	r3, r3, #1
 8019294:	440b      	add	r3, r1
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	4413      	add	r3, r2
 801929a:	3304      	adds	r3, #4
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d00c      	beq.n	80192bc <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80192a2:	4b48      	ldr	r3, [pc, #288]	; (80193c4 <RegionEU868RxConfig+0x18c>)
 80192a4:	681a      	ldr	r2, [r3, #0]
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	781b      	ldrb	r3, [r3, #0]
 80192aa:	4619      	mov	r1, r3
 80192ac:	460b      	mov	r3, r1
 80192ae:	005b      	lsls	r3, r3, #1
 80192b0:	440b      	add	r3, r1
 80192b2:	009b      	lsls	r3, r3, #2
 80192b4:	4413      	add	r3, r2
 80192b6:	3304      	adds	r3, #4
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80192bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192c0:	4a41      	ldr	r2, [pc, #260]	; (80193c8 <RegionEU868RxConfig+0x190>)
 80192c2:	5cd3      	ldrb	r3, [r2, r3]
 80192c4:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80192c6:	4b3e      	ldr	r3, [pc, #248]	; (80193c0 <RegionEU868RxConfig+0x188>)
 80192c8:	68db      	ldr	r3, [r3, #12]
 80192ca:	6938      	ldr	r0, [r7, #16]
 80192cc:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80192ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192d2:	2b07      	cmp	r3, #7
 80192d4:	d128      	bne.n	8019328 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80192d6:	2300      	movs	r3, #0
 80192d8:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80192da:	4b39      	ldr	r3, [pc, #228]	; (80193c0 <RegionEU868RxConfig+0x188>)
 80192dc:	699c      	ldr	r4, [r3, #24]
 80192de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80192e6:	fb02 f303 	mul.w	r3, r2, r3
 80192ea:	4619      	mov	r1, r3
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	689b      	ldr	r3, [r3, #8]
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	687a      	ldr	r2, [r7, #4]
 80192f4:	7c92      	ldrb	r2, [r2, #18]
 80192f6:	7df8      	ldrb	r0, [r7, #23]
 80192f8:	9209      	str	r2, [sp, #36]	; 0x24
 80192fa:	2200      	movs	r2, #0
 80192fc:	9208      	str	r2, [sp, #32]
 80192fe:	2200      	movs	r2, #0
 8019300:	9207      	str	r2, [sp, #28]
 8019302:	2200      	movs	r2, #0
 8019304:	9206      	str	r2, [sp, #24]
 8019306:	2201      	movs	r2, #1
 8019308:	9205      	str	r2, [sp, #20]
 801930a:	2200      	movs	r2, #0
 801930c:	9204      	str	r2, [sp, #16]
 801930e:	2200      	movs	r2, #0
 8019310:	9203      	str	r2, [sp, #12]
 8019312:	9302      	str	r3, [sp, #8]
 8019314:	2305      	movs	r3, #5
 8019316:	9301      	str	r3, [sp, #4]
 8019318:	4b2c      	ldr	r3, [pc, #176]	; (80193cc <RegionEU868RxConfig+0x194>)
 801931a:	9300      	str	r3, [sp, #0]
 801931c:	2300      	movs	r3, #0
 801931e:	460a      	mov	r2, r1
 8019320:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019324:	47a0      	blx	r4
 8019326:	e024      	b.n	8019372 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019328:	2301      	movs	r3, #1
 801932a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801932c:	4b24      	ldr	r3, [pc, #144]	; (80193c0 <RegionEU868RxConfig+0x188>)
 801932e:	699c      	ldr	r4, [r3, #24]
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	789b      	ldrb	r3, [r3, #2]
 8019334:	461d      	mov	r5, r3
 8019336:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	689b      	ldr	r3, [r3, #8]
 801933e:	b29b      	uxth	r3, r3
 8019340:	687a      	ldr	r2, [r7, #4]
 8019342:	7c92      	ldrb	r2, [r2, #18]
 8019344:	7df8      	ldrb	r0, [r7, #23]
 8019346:	9209      	str	r2, [sp, #36]	; 0x24
 8019348:	2201      	movs	r2, #1
 801934a:	9208      	str	r2, [sp, #32]
 801934c:	2200      	movs	r2, #0
 801934e:	9207      	str	r2, [sp, #28]
 8019350:	2200      	movs	r2, #0
 8019352:	9206      	str	r2, [sp, #24]
 8019354:	2200      	movs	r2, #0
 8019356:	9205      	str	r2, [sp, #20]
 8019358:	2200      	movs	r2, #0
 801935a:	9204      	str	r2, [sp, #16]
 801935c:	2200      	movs	r2, #0
 801935e:	9203      	str	r2, [sp, #12]
 8019360:	9302      	str	r3, [sp, #8]
 8019362:	2308      	movs	r3, #8
 8019364:	9301      	str	r3, [sp, #4]
 8019366:	2300      	movs	r3, #0
 8019368:	9300      	str	r3, [sp, #0]
 801936a:	2301      	movs	r3, #1
 801936c:	460a      	mov	r2, r1
 801936e:	4629      	mov	r1, r5
 8019370:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	7c5b      	ldrb	r3, [r3, #17]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d005      	beq.n	8019386 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801937a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801937e:	4a14      	ldr	r2, [pc, #80]	; (80193d0 <RegionEU868RxConfig+0x198>)
 8019380:	5cd3      	ldrb	r3, [r2, r3]
 8019382:	75bb      	strb	r3, [r7, #22]
 8019384:	e004      	b.n	8019390 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8019386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801938a:	4a12      	ldr	r2, [pc, #72]	; (80193d4 <RegionEU868RxConfig+0x19c>)
 801938c:	5cd3      	ldrb	r3, [r2, r3]
 801938e:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019390:	4b0b      	ldr	r3, [pc, #44]	; (80193c0 <RegionEU868RxConfig+0x188>)
 8019392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019394:	7dba      	ldrb	r2, [r7, #22]
 8019396:	320d      	adds	r2, #13
 8019398:	b2d1      	uxtb	r1, r2
 801939a:	7dfa      	ldrb	r2, [r7, #23]
 801939c:	4610      	mov	r0, r2
 801939e:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	7cdb      	ldrb	r3, [r3, #19]
 80193a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80193a8:	6939      	ldr	r1, [r7, #16]
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7ff faaa 	bl	8018904 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	7bfa      	ldrb	r2, [r7, #15]
 80193b4:	701a      	strb	r2, [r3, #0]
    return true;
 80193b6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	3718      	adds	r7, #24
 80193bc:	46bd      	mov	sp, r7
 80193be:	bdb0      	pop	{r4, r5, r7, pc}
 80193c0:	0801fa04 	.word	0x0801fa04
 80193c4:	20001728 	.word	0x20001728
 80193c8:	0801f9cc 	.word	0x0801f9cc
 80193cc:	00014585 	.word	0x00014585
 80193d0:	0801f9fc 	.word	0x0801f9fc
 80193d4:	0801f9f4 	.word	0x0801f9f4

080193d8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80193d8:	b590      	push	{r4, r7, lr}
 80193da:	b093      	sub	sp, #76	; 0x4c
 80193dc:	af0a      	add	r7, sp, #40	; 0x28
 80193de:	60f8      	str	r0, [r7, #12]
 80193e0:	60b9      	str	r1, [r7, #8]
 80193e2:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193ea:	461a      	mov	r2, r3
 80193ec:	4b5d      	ldr	r3, [pc, #372]	; (8019564 <RegionEU868TxConfig+0x18c>)
 80193ee:	5c9b      	ldrb	r3, [r3, r2]
 80193f0:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80193f8:	4b5b      	ldr	r3, [pc, #364]	; (8019568 <RegionEU868TxConfig+0x190>)
 80193fa:	681a      	ldr	r2, [r3, #0]
 80193fc:	4b5b      	ldr	r3, [pc, #364]	; (801956c <RegionEU868TxConfig+0x194>)
 80193fe:	6819      	ldr	r1, [r3, #0]
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	781b      	ldrb	r3, [r3, #0]
 8019404:	461c      	mov	r4, r3
 8019406:	4623      	mov	r3, r4
 8019408:	005b      	lsls	r3, r3, #1
 801940a:	4423      	add	r3, r4
 801940c:	009b      	lsls	r3, r3, #2
 801940e:	440b      	add	r3, r1
 8019410:	3309      	adds	r3, #9
 8019412:	781b      	ldrb	r3, [r3, #0]
 8019414:	4619      	mov	r1, r3
 8019416:	460b      	mov	r3, r1
 8019418:	005b      	lsls	r3, r3, #1
 801941a:	440b      	add	r3, r1
 801941c:	00db      	lsls	r3, r3, #3
 801941e:	4413      	add	r3, r2
 8019420:	3302      	adds	r3, #2
 8019422:	f993 3000 	ldrsb.w	r3, [r3]
 8019426:	4619      	mov	r1, r3
 8019428:	f7ff fa39 	bl	801889e <RegionCommonLimitTxPower>
 801942c:	4603      	mov	r3, r0
 801942e:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019436:	494e      	ldr	r1, [pc, #312]	; (8019570 <RegionEU868TxConfig+0x198>)
 8019438:	4618      	mov	r0, r3
 801943a:	f7ff fa45 	bl	80188c8 <RegionCommonGetBandwidth>
 801943e:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019440:	2300      	movs	r3, #0
 8019442:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	6859      	ldr	r1, [r3, #4]
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	689a      	ldr	r2, [r3, #8]
 801944c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019450:	4618      	mov	r0, r3
 8019452:	f7ff f895 	bl	8018580 <RegionCommonComputeTxPower>
 8019456:	4603      	mov	r3, r0
 8019458:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801945a:	4b46      	ldr	r3, [pc, #280]	; (8019574 <RegionEU868TxConfig+0x19c>)
 801945c:	68da      	ldr	r2, [r3, #12]
 801945e:	4b43      	ldr	r3, [pc, #268]	; (801956c <RegionEU868TxConfig+0x194>)
 8019460:	6819      	ldr	r1, [r3, #0]
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	4618      	mov	r0, r3
 8019468:	4603      	mov	r3, r0
 801946a:	005b      	lsls	r3, r3, #1
 801946c:	4403      	add	r3, r0
 801946e:	009b      	lsls	r3, r3, #2
 8019470:	440b      	add	r3, r1
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	4618      	mov	r0, r3
 8019476:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801947e:	2b07      	cmp	r3, #7
 8019480:	d124      	bne.n	80194cc <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019482:	2300      	movs	r3, #0
 8019484:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019486:	4b3b      	ldr	r3, [pc, #236]	; (8019574 <RegionEU868TxConfig+0x19c>)
 8019488:	69dc      	ldr	r4, [r3, #28]
 801948a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801948e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019492:	fb02 f303 	mul.w	r3, r2, r3
 8019496:	461a      	mov	r2, r3
 8019498:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801949c:	7ff8      	ldrb	r0, [r7, #31]
 801949e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80194a2:	9308      	str	r3, [sp, #32]
 80194a4:	2300      	movs	r3, #0
 80194a6:	9307      	str	r3, [sp, #28]
 80194a8:	2300      	movs	r3, #0
 80194aa:	9306      	str	r3, [sp, #24]
 80194ac:	2300      	movs	r3, #0
 80194ae:	9305      	str	r3, [sp, #20]
 80194b0:	2301      	movs	r3, #1
 80194b2:	9304      	str	r3, [sp, #16]
 80194b4:	2300      	movs	r3, #0
 80194b6:	9303      	str	r3, [sp, #12]
 80194b8:	2305      	movs	r3, #5
 80194ba:	9302      	str	r3, [sp, #8]
 80194bc:	2300      	movs	r3, #0
 80194be:	9301      	str	r3, [sp, #4]
 80194c0:	9200      	str	r2, [sp, #0]
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80194c8:	47a0      	blx	r4
 80194ca:	e01d      	b.n	8019508 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80194cc:	2301      	movs	r3, #1
 80194ce:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80194d0:	4b28      	ldr	r3, [pc, #160]	; (8019574 <RegionEU868TxConfig+0x19c>)
 80194d2:	69dc      	ldr	r4, [r3, #28]
 80194d4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80194d8:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194dc:	7ff8      	ldrb	r0, [r7, #31]
 80194de:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80194e2:	9208      	str	r2, [sp, #32]
 80194e4:	2200      	movs	r2, #0
 80194e6:	9207      	str	r2, [sp, #28]
 80194e8:	2200      	movs	r2, #0
 80194ea:	9206      	str	r2, [sp, #24]
 80194ec:	2200      	movs	r2, #0
 80194ee:	9205      	str	r2, [sp, #20]
 80194f0:	2201      	movs	r2, #1
 80194f2:	9204      	str	r2, [sp, #16]
 80194f4:	2200      	movs	r2, #0
 80194f6:	9203      	str	r2, [sp, #12]
 80194f8:	2208      	movs	r2, #8
 80194fa:	9202      	str	r2, [sp, #8]
 80194fc:	2201      	movs	r2, #1
 80194fe:	9201      	str	r2, [sp, #4]
 8019500:	9300      	str	r3, [sp, #0]
 8019502:	69bb      	ldr	r3, [r7, #24]
 8019504:	2200      	movs	r2, #0
 8019506:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019508:	4b18      	ldr	r3, [pc, #96]	; (801956c <RegionEU868TxConfig+0x194>)
 801950a:	681a      	ldr	r2, [r3, #0]
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	4619      	mov	r1, r3
 8019512:	460b      	mov	r3, r1
 8019514:	005b      	lsls	r3, r3, #1
 8019516:	440b      	add	r3, r1
 8019518:	009b      	lsls	r3, r3, #2
 801951a:	4413      	add	r3, r2
 801951c:	681a      	ldr	r2, [r3, #0]
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019524:	4619      	mov	r1, r3
 8019526:	4610      	mov	r0, r2
 8019528:	f7ff fa1e 	bl	8018968 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019532:	68fb      	ldr	r3, [r7, #12]
 8019534:	899b      	ldrh	r3, [r3, #12]
 8019536:	4619      	mov	r1, r3
 8019538:	4610      	mov	r0, r2
 801953a:	f7ff faa3 	bl	8018a84 <GetTimeOnAir>
 801953e:	4602      	mov	r2, r0
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019544:	4b0b      	ldr	r3, [pc, #44]	; (8019574 <RegionEU868TxConfig+0x19c>)
 8019546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019548:	68fa      	ldr	r2, [r7, #12]
 801954a:	8992      	ldrh	r2, [r2, #12]
 801954c:	b2d1      	uxtb	r1, r2
 801954e:	7ffa      	ldrb	r2, [r7, #31]
 8019550:	4610      	mov	r0, r2
 8019552:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019554:	68bb      	ldr	r3, [r7, #8]
 8019556:	7f7a      	ldrb	r2, [r7, #29]
 8019558:	701a      	strb	r2, [r3, #0]
    return true;
 801955a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801955c:	4618      	mov	r0, r3
 801955e:	3724      	adds	r7, #36	; 0x24
 8019560:	46bd      	mov	sp, r7
 8019562:	bd90      	pop	{r4, r7, pc}
 8019564:	0801f9cc 	.word	0x0801f9cc
 8019568:	20001724 	.word	0x20001724
 801956c:	20001728 	.word	0x20001728
 8019570:	0801f9d4 	.word	0x0801f9d4
 8019574:	0801fa04 	.word	0x0801fa04

08019578 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019578:	b590      	push	{r4, r7, lr}
 801957a:	b093      	sub	sp, #76	; 0x4c
 801957c:	af00      	add	r7, sp, #0
 801957e:	60f8      	str	r0, [r7, #12]
 8019580:	60b9      	str	r1, [r7, #8]
 8019582:	607a      	str	r2, [r7, #4]
 8019584:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019586:	2307      	movs	r3, #7
 8019588:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801958c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019590:	2200      	movs	r2, #0
 8019592:	601a      	str	r2, [r3, #0]
 8019594:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019596:	2300      	movs	r3, #0
 8019598:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 801959c:	2300      	movs	r3, #0
 801959e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80195a2:	2300      	movs	r3, #0
 80195a4:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195a6:	e085      	b.n	80196b4 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	685a      	ldr	r2, [r3, #4]
 80195ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80195b0:	4413      	add	r3, r2
 80195b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80195b6:	4611      	mov	r1, r2
 80195b8:	4618      	mov	r0, r3
 80195ba:	f7fe fe29 	bl	8018210 <RegionCommonParseLinkAdrReq>
 80195be:	4603      	mov	r3, r0
 80195c0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80195c4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d07b      	beq.n	80196c4 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80195cc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80195d0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195d4:	4413      	add	r3, r2
 80195d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80195da:	2307      	movs	r3, #7
 80195dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80195e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195e4:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80195e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d109      	bne.n	8019602 <RegionEU868LinkAdrReq+0x8a>
 80195ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d106      	bne.n	8019602 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80195f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80195f8:	f023 0301 	bic.w	r3, r3, #1
 80195fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019600:	e058      	b.n	80196b4 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019602:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019606:	2b00      	cmp	r3, #0
 8019608:	d003      	beq.n	8019612 <RegionEU868LinkAdrReq+0x9a>
 801960a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801960e:	2b05      	cmp	r3, #5
 8019610:	d903      	bls.n	801961a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019616:	2b06      	cmp	r3, #6
 8019618:	d906      	bls.n	8019628 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801961a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801961e:	f023 0301 	bic.w	r3, r3, #1
 8019622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019626:	e045      	b.n	80196b4 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019628:	2300      	movs	r3, #0
 801962a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801962e:	e03d      	b.n	80196ac <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019634:	2b06      	cmp	r3, #6
 8019636:	d118      	bne.n	801966a <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019638:	4b5f      	ldr	r3, [pc, #380]	; (80197b8 <RegionEU868LinkAdrReq+0x240>)
 801963a:	6819      	ldr	r1, [r3, #0]
 801963c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019640:	4613      	mov	r3, r2
 8019642:	005b      	lsls	r3, r3, #1
 8019644:	4413      	add	r3, r2
 8019646:	009b      	lsls	r3, r3, #2
 8019648:	440b      	add	r3, r1
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d028      	beq.n	80196a2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019650:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019654:	2201      	movs	r2, #1
 8019656:	fa02 f303 	lsl.w	r3, r2, r3
 801965a:	b21a      	sxth	r2, r3
 801965c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801965e:	b21b      	sxth	r3, r3
 8019660:	4313      	orrs	r3, r2
 8019662:	b21b      	sxth	r3, r3
 8019664:	b29b      	uxth	r3, r3
 8019666:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019668:	e01b      	b.n	80196a2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801966a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801966c:	461a      	mov	r2, r3
 801966e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019672:	fa42 f303 	asr.w	r3, r2, r3
 8019676:	f003 0301 	and.w	r3, r3, #1
 801967a:	2b00      	cmp	r3, #0
 801967c:	d011      	beq.n	80196a2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801967e:	4b4e      	ldr	r3, [pc, #312]	; (80197b8 <RegionEU868LinkAdrReq+0x240>)
 8019680:	6819      	ldr	r1, [r3, #0]
 8019682:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019686:	4613      	mov	r3, r2
 8019688:	005b      	lsls	r3, r3, #1
 801968a:	4413      	add	r3, r2
 801968c:	009b      	lsls	r3, r3, #2
 801968e:	440b      	add	r3, r1
 8019690:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019692:	2b00      	cmp	r3, #0
 8019694:	d105      	bne.n	80196a2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019696:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801969a:	f023 0301 	bic.w	r3, r3, #1
 801969e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80196a2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196a6:	3301      	adds	r3, #1
 80196a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80196ac:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196b0:	2b0f      	cmp	r3, #15
 80196b2:	d9bd      	bls.n	8019630 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	7a1b      	ldrb	r3, [r3, #8]
 80196b8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80196bc:	429a      	cmp	r2, r3
 80196be:	f4ff af73 	bcc.w	80195a8 <RegionEU868LinkAdrReq+0x30>
 80196c2:	e000      	b.n	80196c6 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80196c4:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80196c6:	2302      	movs	r3, #2
 80196c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	7a5b      	ldrb	r3, [r3, #9]
 80196d0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80196d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80196d8:	4618      	mov	r0, r3
 80196da:	f7ff fa23 	bl	8018b24 <RegionEU868GetPhyParam>
 80196de:	4603      	mov	r3, r0
 80196e0:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80196e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196e6:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	7a9b      	ldrb	r3, [r3, #10]
 80196ec:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80196ee:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80196f2:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80196f4:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80196f8:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80196fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80196fe:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019706:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801970e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	7b5b      	ldrb	r3, [r3, #13]
 8019714:	b25b      	sxtb	r3, r3
 8019716:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019718:	2310      	movs	r3, #16
 801971a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801971c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019720:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019724:	b25b      	sxtb	r3, r3
 8019726:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801972a:	2307      	movs	r3, #7
 801972c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019730:	4b21      	ldr	r3, [pc, #132]	; (80197b8 <RegionEU868LinkAdrReq+0x240>)
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019736:	2307      	movs	r3, #7
 8019738:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801973c:	2300      	movs	r3, #0
 801973e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019748:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801974c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019750:	1c9a      	adds	r2, r3, #2
 8019752:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019756:	1c59      	adds	r1, r3, #1
 8019758:	f107 0010 	add.w	r0, r7, #16
 801975c:	4623      	mov	r3, r4
 801975e:	f7fe fda8 	bl	80182b2 <RegionCommonLinkAdrReqVerifyParams>
 8019762:	4603      	mov	r3, r0
 8019764:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019768:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801976c:	2b07      	cmp	r3, #7
 801976e:	d10d      	bne.n	801978c <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019770:	4b11      	ldr	r3, [pc, #68]	; (80197b8 <RegionEU868LinkAdrReq+0x240>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019778:	220c      	movs	r2, #12
 801977a:	2100      	movs	r1, #0
 801977c:	4618      	mov	r0, r3
 801977e:	f000 fb83 	bl	8019e88 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019782:	4b0d      	ldr	r3, [pc, #52]	; (80197b8 <RegionEU868LinkAdrReq+0x240>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019788:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801978c:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019794:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801979c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80197a0:	683b      	ldr	r3, [r7, #0]
 80197a2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80197a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80197a6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80197aa:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80197ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	374c      	adds	r7, #76	; 0x4c
 80197b4:	46bd      	mov	sp, r7
 80197b6:	bd90      	pop	{r4, r7, pc}
 80197b8:	20001728 	.word	0x20001728

080197bc <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b084      	sub	sp, #16
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80197c4:	2307      	movs	r3, #7
 80197c6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80197c8:	2300      	movs	r3, #0
 80197ca:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	685b      	ldr	r3, [r3, #4]
 80197d0:	f107 020e 	add.w	r2, r7, #14
 80197d4:	4611      	mov	r1, r2
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7ff f8de 	bl	8018998 <VerifyRfFreq>
 80197dc:	4603      	mov	r3, r0
 80197de:	f083 0301 	eor.w	r3, r3, #1
 80197e2:	b2db      	uxtb	r3, r3
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d003      	beq.n	80197f0 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80197e8:	7bfb      	ldrb	r3, [r7, #15]
 80197ea:	f023 0301 	bic.w	r3, r3, #1
 80197ee:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	f993 3000 	ldrsb.w	r3, [r3]
 80197f6:	2207      	movs	r2, #7
 80197f8:	2100      	movs	r1, #0
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7fe fb47 	bl	8017e8e <RegionCommonValueInRange>
 8019800:	4603      	mov	r3, r0
 8019802:	2b00      	cmp	r3, #0
 8019804:	d103      	bne.n	801980e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019806:	7bfb      	ldrb	r3, [r7, #15]
 8019808:	f023 0302 	bic.w	r3, r3, #2
 801980c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019814:	2205      	movs	r2, #5
 8019816:	2100      	movs	r1, #0
 8019818:	4618      	mov	r0, r3
 801981a:	f7fe fb38 	bl	8017e8e <RegionCommonValueInRange>
 801981e:	4603      	mov	r3, r0
 8019820:	2b00      	cmp	r3, #0
 8019822:	d103      	bne.n	801982c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019824:	7bfb      	ldrb	r3, [r7, #15]
 8019826:	f023 0304 	bic.w	r3, r3, #4
 801982a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801982c:	7bfb      	ldrb	r3, [r7, #15]
}
 801982e:	4618      	mov	r0, r3
 8019830:	3710      	adds	r7, #16
 8019832:	46bd      	mov	sp, r7
 8019834:	bd80      	pop	{r7, pc}
	...

08019838 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b086      	sub	sp, #24
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019840:	2303      	movs	r3, #3
 8019842:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d114      	bne.n	8019878 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019854:	b2db      	uxtb	r3, r3
 8019856:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019858:	f107 0308 	add.w	r3, r7, #8
 801985c:	4618      	mov	r0, r3
 801985e:	f000 f9ff 	bl	8019c60 <RegionEU868ChannelsRemove>
 8019862:	4603      	mov	r3, r0
 8019864:	f083 0301 	eor.w	r3, r3, #1
 8019868:	b2db      	uxtb	r3, r3
 801986a:	2b00      	cmp	r3, #0
 801986c:	d03b      	beq.n	80198e6 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801986e:	7dfb      	ldrb	r3, [r7, #23]
 8019870:	f023 0303 	bic.w	r3, r3, #3
 8019874:	75fb      	strb	r3, [r7, #23]
 8019876:	e036      	b.n	80198e6 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019884:	b2db      	uxtb	r3, r3
 8019886:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019888:	f107 030c 	add.w	r3, r7, #12
 801988c:	4618      	mov	r0, r3
 801988e:	f000 f945 	bl	8019b1c <RegionEU868ChannelAdd>
 8019892:	4603      	mov	r3, r0
 8019894:	2b06      	cmp	r3, #6
 8019896:	d820      	bhi.n	80198da <RegionEU868NewChannelReq+0xa2>
 8019898:	a201      	add	r2, pc, #4	; (adr r2, 80198a0 <RegionEU868NewChannelReq+0x68>)
 801989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801989e:	bf00      	nop
 80198a0:	080198e5 	.word	0x080198e5
 80198a4:	080198db 	.word	0x080198db
 80198a8:	080198db 	.word	0x080198db
 80198ac:	080198db 	.word	0x080198db
 80198b0:	080198bd 	.word	0x080198bd
 80198b4:	080198c7 	.word	0x080198c7
 80198b8:	080198d1 	.word	0x080198d1
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80198bc:	7dfb      	ldrb	r3, [r7, #23]
 80198be:	f023 0301 	bic.w	r3, r3, #1
 80198c2:	75fb      	strb	r3, [r7, #23]
                break;
 80198c4:	e00f      	b.n	80198e6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80198c6:	7dfb      	ldrb	r3, [r7, #23]
 80198c8:	f023 0302 	bic.w	r3, r3, #2
 80198cc:	75fb      	strb	r3, [r7, #23]
                break;
 80198ce:	e00a      	b.n	80198e6 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80198d0:	7dfb      	ldrb	r3, [r7, #23]
 80198d2:	f023 0303 	bic.w	r3, r3, #3
 80198d6:	75fb      	strb	r3, [r7, #23]
                break;
 80198d8:	e005      	b.n	80198e6 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80198da:	7dfb      	ldrb	r3, [r7, #23]
 80198dc:	f023 0303 	bic.w	r3, r3, #3
 80198e0:	75fb      	strb	r3, [r7, #23]
                break;
 80198e2:	e000      	b.n	80198e6 <RegionEU868NewChannelReq+0xae>
                break;
 80198e4:	bf00      	nop
            }
        }
    }

    return status;
 80198e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	3718      	adds	r7, #24
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bd80      	pop	{r7, pc}
 80198f2:	bf00      	nop

080198f4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80198f4:	b480      	push	{r7}
 80198f6:	b083      	sub	sp, #12
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80198fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019900:	4618      	mov	r0, r3
 8019902:	370c      	adds	r7, #12
 8019904:	46bd      	mov	sp, r7
 8019906:	bc80      	pop	{r7}
 8019908:	4770      	bx	lr
	...

0801990c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b084      	sub	sp, #16
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019914:	2303      	movs	r3, #3
 8019916:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019918:	2300      	movs	r3, #0
 801991a:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	781b      	ldrb	r3, [r3, #0]
 8019920:	2b0f      	cmp	r3, #15
 8019922:	d901      	bls.n	8019928 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019924:	2300      	movs	r3, #0
 8019926:	e035      	b.n	8019994 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	685b      	ldr	r3, [r3, #4]
 801992c:	f107 020e 	add.w	r2, r7, #14
 8019930:	4611      	mov	r1, r2
 8019932:	4618      	mov	r0, r3
 8019934:	f7ff f830 	bl	8018998 <VerifyRfFreq>
 8019938:	4603      	mov	r3, r0
 801993a:	f083 0301 	eor.w	r3, r3, #1
 801993e:	b2db      	uxtb	r3, r3
 8019940:	2b00      	cmp	r3, #0
 8019942:	d003      	beq.n	801994c <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019944:	7bfb      	ldrb	r3, [r7, #15]
 8019946:	f023 0301 	bic.w	r3, r3, #1
 801994a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801994c:	4b13      	ldr	r3, [pc, #76]	; (801999c <RegionEU868DlChannelReq+0x90>)
 801994e:	681a      	ldr	r2, [r3, #0]
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	781b      	ldrb	r3, [r3, #0]
 8019954:	4619      	mov	r1, r3
 8019956:	460b      	mov	r3, r1
 8019958:	005b      	lsls	r3, r3, #1
 801995a:	440b      	add	r3, r1
 801995c:	009b      	lsls	r3, r3, #2
 801995e:	4413      	add	r3, r2
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	2b00      	cmp	r3, #0
 8019964:	d103      	bne.n	801996e <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019966:	7bfb      	ldrb	r3, [r7, #15]
 8019968:	f023 0302 	bic.w	r3, r3, #2
 801996c:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801996e:	7bfb      	ldrb	r3, [r7, #15]
 8019970:	2b03      	cmp	r3, #3
 8019972:	d10d      	bne.n	8019990 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019974:	4b09      	ldr	r3, [pc, #36]	; (801999c <RegionEU868DlChannelReq+0x90>)
 8019976:	6819      	ldr	r1, [r3, #0]
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	781b      	ldrb	r3, [r3, #0]
 801997c:	4618      	mov	r0, r3
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	685a      	ldr	r2, [r3, #4]
 8019982:	4603      	mov	r3, r0
 8019984:	005b      	lsls	r3, r3, #1
 8019986:	4403      	add	r3, r0
 8019988:	009b      	lsls	r3, r3, #2
 801998a:	440b      	add	r3, r1
 801998c:	3304      	adds	r3, #4
 801998e:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019994:	4618      	mov	r0, r3
 8019996:	3710      	adds	r7, #16
 8019998:	46bd      	mov	sp, r7
 801999a:	bd80      	pop	{r7, pc}
 801999c:	20001728 	.word	0x20001728

080199a0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80199a0:	b480      	push	{r7}
 80199a2:	b083      	sub	sp, #12
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	4603      	mov	r3, r0
 80199a8:	460a      	mov	r2, r1
 80199aa:	71fb      	strb	r3, [r7, #7]
 80199ac:	4613      	mov	r3, r2
 80199ae:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80199b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80199b4:	4618      	mov	r0, r3
 80199b6:	370c      	adds	r7, #12
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bc80      	pop	{r7}
 80199bc:	4770      	bx	lr
	...

080199c0 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80199c0:	b580      	push	{r7, lr}
 80199c2:	b09a      	sub	sp, #104	; 0x68
 80199c4:	af02      	add	r7, sp, #8
 80199c6:	60f8      	str	r0, [r7, #12]
 80199c8:	60b9      	str	r1, [r7, #8]
 80199ca:	607a      	str	r2, [r7, #4]
 80199cc:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80199ce:	2300      	movs	r3, #0
 80199d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80199d4:	2300      	movs	r3, #0
 80199d6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80199da:	2300      	movs	r3, #0
 80199dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80199de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80199e2:	2200      	movs	r2, #0
 80199e4:	601a      	str	r2, [r3, #0]
 80199e6:	605a      	str	r2, [r3, #4]
 80199e8:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80199ea:	230c      	movs	r3, #12
 80199ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80199f0:	2307      	movs	r3, #7
 80199f2:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80199f4:	4b47      	ldr	r3, [pc, #284]	; (8019b14 <RegionEU868NextChannel+0x154>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80199fc:	2201      	movs	r2, #1
 80199fe:	2100      	movs	r1, #0
 8019a00:	4618      	mov	r0, r3
 8019a02:	f7fe fa95 	bl	8017f30 <RegionCommonCountChannels>
 8019a06:	4603      	mov	r3, r0
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d10a      	bne.n	8019a22 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019a0c:	4b41      	ldr	r3, [pc, #260]	; (8019b14 <RegionEU868NextChannel+0x154>)
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019a14:	4b3f      	ldr	r3, [pc, #252]	; (8019b14 <RegionEU868NextChannel+0x154>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	f042 0207 	orr.w	r2, r2, #7
 8019a1c:	b292      	uxth	r2, r2
 8019a1e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	7a5b      	ldrb	r3, [r3, #9]
 8019a26:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019a2e:	b2db      	uxtb	r3, r3
 8019a30:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019a32:	4b38      	ldr	r3, [pc, #224]	; (8019b14 <RegionEU868NextChannel+0x154>)
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a3a:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019a3c:	4b35      	ldr	r3, [pc, #212]	; (8019b14 <RegionEU868NextChannel+0x154>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019a42:	4b35      	ldr	r3, [pc, #212]	; (8019b18 <RegionEU868NextChannel+0x158>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019a48:	2310      	movs	r3, #16
 8019a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019a4c:	f107 0312 	add.w	r3, r7, #18
 8019a50:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019a58:	68fb      	ldr	r3, [r7, #12]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	7a9b      	ldrb	r3, [r3, #10]
 8019a62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019a66:	2306      	movs	r3, #6
 8019a68:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019a6c:	68fa      	ldr	r2, [r7, #12]
 8019a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019a72:	320c      	adds	r2, #12
 8019a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a78:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	7d1b      	ldrb	r3, [r3, #20]
 8019a80:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	8adb      	ldrh	r3, [r3, #22]
 8019a8e:	4619      	mov	r1, r3
 8019a90:	4610      	mov	r0, r2
 8019a92:	f7fe fff7 	bl	8018a84 <GetTimeOnAir>
 8019a96:	4603      	mov	r3, r0
 8019a98:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019a9a:	f107 0314 	add.w	r3, r7, #20
 8019a9e:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019aa0:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019aa4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019aa8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	9301      	str	r3, [sp, #4]
 8019ab0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019ab4:	9300      	str	r3, [sp, #0]
 8019ab6:	460b      	mov	r3, r1
 8019ab8:	6839      	ldr	r1, [r7, #0]
 8019aba:	f7fe fe50 	bl	801875e <RegionCommonIdentifyChannels>
 8019abe:	4603      	mov	r3, r0
 8019ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019ac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d10e      	bne.n	8019aea <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019acc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019ad0:	3b01      	subs	r3, #1
 8019ad2:	4619      	mov	r1, r3
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	f000 f985 	bl	8019de4 <randr>
 8019ada:	4603      	mov	r3, r0
 8019adc:	3360      	adds	r3, #96	; 0x60
 8019ade:	443b      	add	r3, r7
 8019ae0:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019ae4:	68bb      	ldr	r3, [r7, #8]
 8019ae6:	701a      	strb	r2, [r3, #0]
 8019ae8:	e00e      	b.n	8019b08 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019aee:	2b0c      	cmp	r3, #12
 8019af0:	d10a      	bne.n	8019b08 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019af2:	4b08      	ldr	r3, [pc, #32]	; (8019b14 <RegionEU868NextChannel+0x154>)
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019afa:	4b06      	ldr	r3, [pc, #24]	; (8019b14 <RegionEU868NextChannel+0x154>)
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	f042 0207 	orr.w	r2, r2, #7
 8019b02:	b292      	uxth	r2, r2
 8019b04:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019b08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	3760      	adds	r7, #96	; 0x60
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bd80      	pop	{r7, pc}
 8019b14:	20001728 	.word	0x20001728
 8019b18:	20001724 	.word	0x20001724

08019b1c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b084      	sub	sp, #16
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019b24:	2300      	movs	r3, #0
 8019b26:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	791b      	ldrb	r3, [r3, #4]
 8019b34:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019b36:	7b7b      	ldrb	r3, [r7, #13]
 8019b38:	2b02      	cmp	r3, #2
 8019b3a:	d801      	bhi.n	8019b40 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b3c:	2306      	movs	r3, #6
 8019b3e:	e089      	b.n	8019c54 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019b40:	7b7b      	ldrb	r3, [r7, #13]
 8019b42:	2b0f      	cmp	r3, #15
 8019b44:	d901      	bls.n	8019b4a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b46:	2303      	movs	r3, #3
 8019b48:	e084      	b.n	8019c54 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	7a1b      	ldrb	r3, [r3, #8]
 8019b50:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b54:	b25b      	sxtb	r3, r3
 8019b56:	2207      	movs	r2, #7
 8019b58:	2100      	movs	r1, #0
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f7fe f997 	bl	8017e8e <RegionCommonValueInRange>
 8019b60:	4603      	mov	r3, r0
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d101      	bne.n	8019b6a <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019b66:	2301      	movs	r3, #1
 8019b68:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	7a1b      	ldrb	r3, [r3, #8]
 8019b70:	f343 1303 	sbfx	r3, r3, #4, #4
 8019b74:	b25b      	sxtb	r3, r3
 8019b76:	2207      	movs	r2, #7
 8019b78:	2100      	movs	r1, #0
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7fe f987 	bl	8017e8e <RegionCommonValueInRange>
 8019b80:	4603      	mov	r3, r0
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d101      	bne.n	8019b8a <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019b86:	2301      	movs	r3, #1
 8019b88:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	7a1b      	ldrb	r3, [r3, #8]
 8019b90:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b94:	b25a      	sxtb	r2, r3
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	7a1b      	ldrb	r3, [r3, #8]
 8019b9c:	f343 1303 	sbfx	r3, r3, #4, #4
 8019ba0:	b25b      	sxtb	r3, r3
 8019ba2:	429a      	cmp	r2, r3
 8019ba4:	dd01      	ble.n	8019baa <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019ba6:	2301      	movs	r3, #1
 8019ba8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019baa:	7bbb      	ldrb	r3, [r7, #14]
 8019bac:	f083 0301 	eor.w	r3, r3, #1
 8019bb0:	b2db      	uxtb	r3, r3
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d010      	beq.n	8019bd8 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	f107 020c 	add.w	r2, r7, #12
 8019bc0:	4611      	mov	r1, r2
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f7fe fee8 	bl	8018998 <VerifyRfFreq>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	f083 0301 	eor.w	r3, r3, #1
 8019bce:	b2db      	uxtb	r3, r3
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d001      	beq.n	8019bd8 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019bd8:	7bfb      	ldrb	r3, [r7, #15]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d004      	beq.n	8019be8 <RegionEU868ChannelAdd+0xcc>
 8019bde:	7bbb      	ldrb	r3, [r7, #14]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d001      	beq.n	8019be8 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019be4:	2306      	movs	r3, #6
 8019be6:	e035      	b.n	8019c54 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019be8:	7bfb      	ldrb	r3, [r7, #15]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d001      	beq.n	8019bf2 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019bee:	2305      	movs	r3, #5
 8019bf0:	e030      	b.n	8019c54 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019bf2:	7bbb      	ldrb	r3, [r7, #14]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d001      	beq.n	8019bfc <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019bf8:	2304      	movs	r3, #4
 8019bfa:	e02b      	b.n	8019c54 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019bfc:	4b17      	ldr	r3, [pc, #92]	; (8019c5c <RegionEU868ChannelAdd+0x140>)
 8019bfe:	6819      	ldr	r1, [r3, #0]
 8019c00:	7b7a      	ldrb	r2, [r7, #13]
 8019c02:	4613      	mov	r3, r2
 8019c04:	005b      	lsls	r3, r3, #1
 8019c06:	4413      	add	r3, r2
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	18c8      	adds	r0, r1, r3
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	220c      	movs	r2, #12
 8019c12:	4619      	mov	r1, r3
 8019c14:	f000 f8fd 	bl	8019e12 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019c18:	4b10      	ldr	r3, [pc, #64]	; (8019c5c <RegionEU868ChannelAdd+0x140>)
 8019c1a:	6819      	ldr	r1, [r3, #0]
 8019c1c:	7b7a      	ldrb	r2, [r7, #13]
 8019c1e:	7b38      	ldrb	r0, [r7, #12]
 8019c20:	4613      	mov	r3, r2
 8019c22:	005b      	lsls	r3, r3, #1
 8019c24:	4413      	add	r3, r2
 8019c26:	009b      	lsls	r3, r3, #2
 8019c28:	440b      	add	r3, r1
 8019c2a:	3309      	adds	r3, #9
 8019c2c:	4602      	mov	r2, r0
 8019c2e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019c30:	4b0a      	ldr	r3, [pc, #40]	; (8019c5c <RegionEU868ChannelAdd+0x140>)
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019c38:	b21a      	sxth	r2, r3
 8019c3a:	7b7b      	ldrb	r3, [r7, #13]
 8019c3c:	2101      	movs	r1, #1
 8019c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8019c42:	b21b      	sxth	r3, r3
 8019c44:	4313      	orrs	r3, r2
 8019c46:	b21a      	sxth	r2, r3
 8019c48:	4b04      	ldr	r3, [pc, #16]	; (8019c5c <RegionEU868ChannelAdd+0x140>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	b292      	uxth	r2, r2
 8019c4e:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019c52:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3710      	adds	r7, #16
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	20001728 	.word	0x20001728

08019c60 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b086      	sub	sp, #24
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	781b      	ldrb	r3, [r3, #0]
 8019c6c:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c6e:	7dfb      	ldrb	r3, [r7, #23]
 8019c70:	2b02      	cmp	r3, #2
 8019c72:	d801      	bhi.n	8019c78 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019c74:	2300      	movs	r3, #0
 8019c76:	e016      	b.n	8019ca6 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019c78:	4b0d      	ldr	r3, [pc, #52]	; (8019cb0 <RegionEU868ChannelsRemove+0x50>)
 8019c7a:	6819      	ldr	r1, [r3, #0]
 8019c7c:	7dfa      	ldrb	r2, [r7, #23]
 8019c7e:	4613      	mov	r3, r2
 8019c80:	005b      	lsls	r3, r3, #1
 8019c82:	4413      	add	r3, r2
 8019c84:	009b      	lsls	r3, r3, #2
 8019c86:	440b      	add	r3, r1
 8019c88:	461a      	mov	r2, r3
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	6013      	str	r3, [r2, #0]
 8019c8e:	6053      	str	r3, [r2, #4]
 8019c90:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019c92:	4b07      	ldr	r3, [pc, #28]	; (8019cb0 <RegionEU868ChannelsRemove+0x50>)
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019c9a:	7df9      	ldrb	r1, [r7, #23]
 8019c9c:	2210      	movs	r2, #16
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7fe f912 	bl	8017ec8 <RegionCommonChanDisable>
 8019ca4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3718      	adds	r7, #24
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}
 8019cae:	bf00      	nop
 8019cb0:	20001728 	.word	0x20001728

08019cb4 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019cb4:	b590      	push	{r4, r7, lr}
 8019cb6:	b085      	sub	sp, #20
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019cc2:	4b20      	ldr	r3, [pc, #128]	; (8019d44 <RegionEU868SetContinuousWave+0x90>)
 8019cc4:	681a      	ldr	r2, [r3, #0]
 8019cc6:	4b20      	ldr	r3, [pc, #128]	; (8019d48 <RegionEU868SetContinuousWave+0x94>)
 8019cc8:	6819      	ldr	r1, [r3, #0]
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	781b      	ldrb	r3, [r3, #0]
 8019cce:	461c      	mov	r4, r3
 8019cd0:	4623      	mov	r3, r4
 8019cd2:	005b      	lsls	r3, r3, #1
 8019cd4:	4423      	add	r3, r4
 8019cd6:	009b      	lsls	r3, r3, #2
 8019cd8:	440b      	add	r3, r1
 8019cda:	3309      	adds	r3, #9
 8019cdc:	781b      	ldrb	r3, [r3, #0]
 8019cde:	4619      	mov	r1, r3
 8019ce0:	460b      	mov	r3, r1
 8019ce2:	005b      	lsls	r3, r3, #1
 8019ce4:	440b      	add	r3, r1
 8019ce6:	00db      	lsls	r3, r3, #3
 8019ce8:	4413      	add	r3, r2
 8019cea:	3302      	adds	r3, #2
 8019cec:	f993 3000 	ldrsb.w	r3, [r3]
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	f7fe fdd4 	bl	801889e <RegionCommonLimitTxPower>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019cfe:	4b12      	ldr	r3, [pc, #72]	; (8019d48 <RegionEU868SetContinuousWave+0x94>)
 8019d00:	681a      	ldr	r2, [r3, #0]
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	4619      	mov	r1, r3
 8019d08:	460b      	mov	r3, r1
 8019d0a:	005b      	lsls	r3, r3, #1
 8019d0c:	440b      	add	r3, r1
 8019d0e:	009b      	lsls	r3, r3, #2
 8019d10:	4413      	add	r3, r2
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	6859      	ldr	r1, [r3, #4]
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	689a      	ldr	r2, [r3, #8]
 8019d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d22:	4618      	mov	r0, r3
 8019d24:	f7fe fc2c 	bl	8018580 <RegionCommonComputeTxPower>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019d2c:	4b07      	ldr	r3, [pc, #28]	; (8019d4c <RegionEU868SetContinuousWave+0x98>)
 8019d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d30:	687a      	ldr	r2, [r7, #4]
 8019d32:	8992      	ldrh	r2, [r2, #12]
 8019d34:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019d38:	68b8      	ldr	r0, [r7, #8]
 8019d3a:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019d3c:	bf00      	nop
 8019d3e:	3714      	adds	r7, #20
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd90      	pop	{r4, r7, pc}
 8019d44:	20001724 	.word	0x20001724
 8019d48:	20001728 	.word	0x20001728
 8019d4c:	0801fa04 	.word	0x0801fa04

08019d50 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d50:	b480      	push	{r7}
 8019d52:	b085      	sub	sp, #20
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	4603      	mov	r3, r0
 8019d58:	71fb      	strb	r3, [r7, #7]
 8019d5a:	460b      	mov	r3, r1
 8019d5c:	71bb      	strb	r3, [r7, #6]
 8019d5e:	4613      	mov	r3, r2
 8019d60:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019d62:	79ba      	ldrb	r2, [r7, #6]
 8019d64:	797b      	ldrb	r3, [r7, #5]
 8019d66:	1ad3      	subs	r3, r2, r3
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	da01      	bge.n	8019d78 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019d74:	2300      	movs	r3, #0
 8019d76:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019d78:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019d7a:	4618      	mov	r0, r3
 8019d7c:	3714      	adds	r7, #20
 8019d7e:	46bd      	mov	sp, r7
 8019d80:	bc80      	pop	{r7}
 8019d82:	4770      	bx	lr

08019d84 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019d84:	b480      	push	{r7}
 8019d86:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019d88:	4b0d      	ldr	r3, [pc, #52]	; (8019dc0 <rand1+0x3c>)
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	4a0d      	ldr	r2, [pc, #52]	; (8019dc4 <rand1+0x40>)
 8019d8e:	fb02 f303 	mul.w	r3, r2, r3
 8019d92:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019d96:	3339      	adds	r3, #57	; 0x39
 8019d98:	4a09      	ldr	r2, [pc, #36]	; (8019dc0 <rand1+0x3c>)
 8019d9a:	6013      	str	r3, [r2, #0]
 8019d9c:	4b08      	ldr	r3, [pc, #32]	; (8019dc0 <rand1+0x3c>)
 8019d9e:	681a      	ldr	r2, [r3, #0]
 8019da0:	2303      	movs	r3, #3
 8019da2:	fba3 1302 	umull	r1, r3, r3, r2
 8019da6:	1ad1      	subs	r1, r2, r3
 8019da8:	0849      	lsrs	r1, r1, #1
 8019daa:	440b      	add	r3, r1
 8019dac:	0f99      	lsrs	r1, r3, #30
 8019dae:	460b      	mov	r3, r1
 8019db0:	07db      	lsls	r3, r3, #31
 8019db2:	1a5b      	subs	r3, r3, r1
 8019db4:	1ad1      	subs	r1, r2, r3
 8019db6:	460b      	mov	r3, r1
}
 8019db8:	4618      	mov	r0, r3
 8019dba:	46bd      	mov	sp, r7
 8019dbc:	bc80      	pop	{r7}
 8019dbe:	4770      	bx	lr
 8019dc0:	20000150 	.word	0x20000150
 8019dc4:	41c64e6d 	.word	0x41c64e6d

08019dc8 <srand1>:

void srand1( uint32_t seed )
{
 8019dc8:	b480      	push	{r7}
 8019dca:	b083      	sub	sp, #12
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
    next = seed;
 8019dd0:	4a03      	ldr	r2, [pc, #12]	; (8019de0 <srand1+0x18>)
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	6013      	str	r3, [r2, #0]
}
 8019dd6:	bf00      	nop
 8019dd8:	370c      	adds	r7, #12
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bc80      	pop	{r7}
 8019dde:	4770      	bx	lr
 8019de0:	20000150 	.word	0x20000150

08019de4 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b082      	sub	sp, #8
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019dee:	f7ff ffc9 	bl	8019d84 <rand1>
 8019df2:	4602      	mov	r2, r0
 8019df4:	6839      	ldr	r1, [r7, #0]
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	1acb      	subs	r3, r1, r3
 8019dfa:	3301      	adds	r3, #1
 8019dfc:	fb92 f1f3 	sdiv	r1, r2, r3
 8019e00:	fb01 f303 	mul.w	r3, r1, r3
 8019e04:	1ad2      	subs	r2, r2, r3
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	4413      	add	r3, r2
}
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	3708      	adds	r7, #8
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}

08019e12 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e12:	b480      	push	{r7}
 8019e14:	b085      	sub	sp, #20
 8019e16:	af00      	add	r7, sp, #0
 8019e18:	60f8      	str	r0, [r7, #12]
 8019e1a:	60b9      	str	r1, [r7, #8]
 8019e1c:	4613      	mov	r3, r2
 8019e1e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019e20:	e007      	b.n	8019e32 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019e22:	68ba      	ldr	r2, [r7, #8]
 8019e24:	1c53      	adds	r3, r2, #1
 8019e26:	60bb      	str	r3, [r7, #8]
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	1c59      	adds	r1, r3, #1
 8019e2c:	60f9      	str	r1, [r7, #12]
 8019e2e:	7812      	ldrb	r2, [r2, #0]
 8019e30:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e32:	88fb      	ldrh	r3, [r7, #6]
 8019e34:	1e5a      	subs	r2, r3, #1
 8019e36:	80fa      	strh	r2, [r7, #6]
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	d1f2      	bne.n	8019e22 <memcpy1+0x10>
    }
}
 8019e3c:	bf00      	nop
 8019e3e:	bf00      	nop
 8019e40:	3714      	adds	r7, #20
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bc80      	pop	{r7}
 8019e46:	4770      	bx	lr

08019e48 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e48:	b480      	push	{r7}
 8019e4a:	b085      	sub	sp, #20
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	60f8      	str	r0, [r7, #12]
 8019e50:	60b9      	str	r1, [r7, #8]
 8019e52:	4613      	mov	r3, r2
 8019e54:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019e56:	88fb      	ldrh	r3, [r7, #6]
 8019e58:	3b01      	subs	r3, #1
 8019e5a:	68fa      	ldr	r2, [r7, #12]
 8019e5c:	4413      	add	r3, r2
 8019e5e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019e60:	e007      	b.n	8019e72 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019e62:	68ba      	ldr	r2, [r7, #8]
 8019e64:	1c53      	adds	r3, r2, #1
 8019e66:	60bb      	str	r3, [r7, #8]
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	1e59      	subs	r1, r3, #1
 8019e6c:	60f9      	str	r1, [r7, #12]
 8019e6e:	7812      	ldrb	r2, [r2, #0]
 8019e70:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e72:	88fb      	ldrh	r3, [r7, #6]
 8019e74:	1e5a      	subs	r2, r3, #1
 8019e76:	80fa      	strh	r2, [r7, #6]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d1f2      	bne.n	8019e62 <memcpyr+0x1a>
    }
}
 8019e7c:	bf00      	nop
 8019e7e:	bf00      	nop
 8019e80:	3714      	adds	r7, #20
 8019e82:	46bd      	mov	sp, r7
 8019e84:	bc80      	pop	{r7}
 8019e86:	4770      	bx	lr

08019e88 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019e88:	b480      	push	{r7}
 8019e8a:	b083      	sub	sp, #12
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
 8019e90:	460b      	mov	r3, r1
 8019e92:	70fb      	strb	r3, [r7, #3]
 8019e94:	4613      	mov	r3, r2
 8019e96:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019e98:	e004      	b.n	8019ea4 <memset1+0x1c>
    {
        *dst++ = value;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	1c5a      	adds	r2, r3, #1
 8019e9e:	607a      	str	r2, [r7, #4]
 8019ea0:	78fa      	ldrb	r2, [r7, #3]
 8019ea2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019ea4:	883b      	ldrh	r3, [r7, #0]
 8019ea6:	1e5a      	subs	r2, r3, #1
 8019ea8:	803a      	strh	r2, [r7, #0]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d1f5      	bne.n	8019e9a <memset1+0x12>
    }
}
 8019eae:	bf00      	nop
 8019eb0:	bf00      	nop
 8019eb2:	370c      	adds	r7, #12
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bc80      	pop	{r7}
 8019eb8:	4770      	bx	lr
	...

08019ebc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019ebc:	b480      	push	{r7}
 8019ebe:	b085      	sub	sp, #20
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
 8019ec4:	460b      	mov	r3, r1
 8019ec6:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8019ecc:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d101      	bne.n	8019ed8 <Crc32+0x1c>
    {
        return 0;
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	e026      	b.n	8019f26 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019ed8:	2300      	movs	r3, #0
 8019eda:	817b      	strh	r3, [r7, #10]
 8019edc:	e01d      	b.n	8019f1a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019ede:	897b      	ldrh	r3, [r7, #10]
 8019ee0:	687a      	ldr	r2, [r7, #4]
 8019ee2:	4413      	add	r3, r2
 8019ee4:	781b      	ldrb	r3, [r3, #0]
 8019ee6:	461a      	mov	r2, r3
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	4053      	eors	r3, r2
 8019eec:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019eee:	2300      	movs	r3, #0
 8019ef0:	813b      	strh	r3, [r7, #8]
 8019ef2:	e00c      	b.n	8019f0e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	085a      	lsrs	r2, r3, #1
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	f003 0301 	and.w	r3, r3, #1
 8019efe:	425b      	negs	r3, r3
 8019f00:	490b      	ldr	r1, [pc, #44]	; (8019f30 <Crc32+0x74>)
 8019f02:	400b      	ands	r3, r1
 8019f04:	4053      	eors	r3, r2
 8019f06:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019f08:	893b      	ldrh	r3, [r7, #8]
 8019f0a:	3301      	adds	r3, #1
 8019f0c:	813b      	strh	r3, [r7, #8]
 8019f0e:	893b      	ldrh	r3, [r7, #8]
 8019f10:	2b07      	cmp	r3, #7
 8019f12:	d9ef      	bls.n	8019ef4 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019f14:	897b      	ldrh	r3, [r7, #10]
 8019f16:	3301      	adds	r3, #1
 8019f18:	817b      	strh	r3, [r7, #10]
 8019f1a:	897a      	ldrh	r2, [r7, #10]
 8019f1c:	887b      	ldrh	r3, [r7, #2]
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d3dd      	bcc.n	8019ede <Crc32+0x22>
        }
    }

    return ~crc;
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	43db      	mvns	r3, r3
}
 8019f26:	4618      	mov	r0, r3
 8019f28:	3714      	adds	r7, #20
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bc80      	pop	{r7}
 8019f2e:	4770      	bx	lr
 8019f30:	edb88320 	.word	0xedb88320

08019f34 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b084      	sub	sp, #16
 8019f38:	af02      	add	r7, sp, #8
 8019f3a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019f3c:	4a24      	ldr	r2, [pc, #144]	; (8019fd0 <RadioInit+0x9c>)
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019f42:	4b24      	ldr	r3, [pc, #144]	; (8019fd4 <RadioInit+0xa0>)
 8019f44:	2200      	movs	r2, #0
 8019f46:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019f48:	4b22      	ldr	r3, [pc, #136]	; (8019fd4 <RadioInit+0xa0>)
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019f4e:	4b21      	ldr	r3, [pc, #132]	; (8019fd4 <RadioInit+0xa0>)
 8019f50:	2200      	movs	r2, #0
 8019f52:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f54:	4b1f      	ldr	r3, [pc, #124]	; (8019fd4 <RadioInit+0xa0>)
 8019f56:	2200      	movs	r2, #0
 8019f58:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019f5a:	481f      	ldr	r0, [pc, #124]	; (8019fd8 <RadioInit+0xa4>)
 8019f5c:	f001 ffc2 	bl	801bee4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019f60:	4b1c      	ldr	r3, [pc, #112]	; (8019fd4 <RadioInit+0xa0>)
 8019f62:	2200      	movs	r2, #0
 8019f64:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019f66:	4b1b      	ldr	r3, [pc, #108]	; (8019fd4 <RadioInit+0xa0>)
 8019f68:	2200      	movs	r2, #0
 8019f6a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019f6c:	f002 fa56 	bl	801c41c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019f70:	2100      	movs	r1, #0
 8019f72:	2000      	movs	r0, #0
 8019f74:	f002 fe22 	bl	801cbbc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019f78:	2204      	movs	r2, #4
 8019f7a:	2100      	movs	r1, #0
 8019f7c:	2001      	movs	r0, #1
 8019f7e:	f002 fbdf 	bl	801c740 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019f82:	2300      	movs	r3, #0
 8019f84:	2200      	movs	r2, #0
 8019f86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f8a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f8e:	f002 fb0f 	bl	801c5b0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019f92:	f000 fe99 	bl	801acc8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019f96:	2300      	movs	r3, #0
 8019f98:	9300      	str	r3, [sp, #0]
 8019f9a:	4b10      	ldr	r3, [pc, #64]	; (8019fdc <RadioInit+0xa8>)
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8019fa2:	480f      	ldr	r0, [pc, #60]	; (8019fe0 <RadioInit+0xac>)
 8019fa4:	f004 f82c 	bl	801e000 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019fa8:	2300      	movs	r3, #0
 8019faa:	9300      	str	r3, [sp, #0]
 8019fac:	4b0d      	ldr	r3, [pc, #52]	; (8019fe4 <RadioInit+0xb0>)
 8019fae:	2200      	movs	r2, #0
 8019fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8019fb4:	480c      	ldr	r0, [pc, #48]	; (8019fe8 <RadioInit+0xb4>)
 8019fb6:	f004 f823 	bl	801e000 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019fba:	4809      	ldr	r0, [pc, #36]	; (8019fe0 <RadioInit+0xac>)
 8019fbc:	f004 f8c4 	bl	801e148 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019fc0:	4809      	ldr	r0, [pc, #36]	; (8019fe8 <RadioInit+0xb4>)
 8019fc2:	f004 f8c1 	bl	801e148 <UTIL_TIMER_Stop>
}
 8019fc6:	bf00      	nop
 8019fc8:	3708      	adds	r7, #8
 8019fca:	46bd      	mov	sp, r7
 8019fcc:	bd80      	pop	{r7, pc}
 8019fce:	bf00      	nop
 8019fd0:	2000182c 	.word	0x2000182c
 8019fd4:	20001830 	.word	0x20001830
 8019fd8:	0801b0c1 	.word	0x0801b0c1
 8019fdc:	0801b049 	.word	0x0801b049
 8019fe0:	2000188c 	.word	0x2000188c
 8019fe4:	0801b05d 	.word	0x0801b05d
 8019fe8:	200018a4 	.word	0x200018a4

08019fec <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019ff0:	f001 ffc0 	bl	801bf74 <SUBGRF_GetOperatingMode>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	2b07      	cmp	r3, #7
 8019ff8:	d00a      	beq.n	801a010 <RadioGetStatus+0x24>
 8019ffa:	2b07      	cmp	r3, #7
 8019ffc:	dc0a      	bgt.n	801a014 <RadioGetStatus+0x28>
 8019ffe:	2b04      	cmp	r3, #4
 801a000:	d002      	beq.n	801a008 <RadioGetStatus+0x1c>
 801a002:	2b05      	cmp	r3, #5
 801a004:	d002      	beq.n	801a00c <RadioGetStatus+0x20>
 801a006:	e005      	b.n	801a014 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a008:	2302      	movs	r3, #2
 801a00a:	e004      	b.n	801a016 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a00c:	2301      	movs	r3, #1
 801a00e:	e002      	b.n	801a016 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a010:	2303      	movs	r3, #3
 801a012:	e000      	b.n	801a016 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a014:	2300      	movs	r3, #0
    }
}
 801a016:	4618      	mov	r0, r3
 801a018:	bd80      	pop	{r7, pc}
	...

0801a01c <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b082      	sub	sp, #8
 801a020:	af00      	add	r7, sp, #0
 801a022:	4603      	mov	r3, r0
 801a024:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a026:	4a2a      	ldr	r2, [pc, #168]	; (801a0d0 <RadioSetModem+0xb4>)
 801a028:	79fb      	ldrb	r3, [r7, #7]
 801a02a:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a02c:	79fb      	ldrb	r3, [r7, #7]
 801a02e:	4618      	mov	r0, r3
 801a030:	f003 f997 	bl	801d362 <RFW_SetRadioModem>
    switch( modem )
 801a034:	79fb      	ldrb	r3, [r7, #7]
 801a036:	2b05      	cmp	r3, #5
 801a038:	d80e      	bhi.n	801a058 <RadioSetModem+0x3c>
 801a03a:	a201      	add	r2, pc, #4	; (adr r2, 801a040 <RadioSetModem+0x24>)
 801a03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a040:	0801a067 	.word	0x0801a067
 801a044:	0801a075 	.word	0x0801a075
 801a048:	0801a059 	.word	0x0801a059
 801a04c:	0801a09b 	.word	0x0801a09b
 801a050:	0801a0a9 	.word	0x0801a0a9
 801a054:	0801a0b7 	.word	0x0801a0b7
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a058:	2003      	movs	r0, #3
 801a05a:	f002 fb4b 	bl	801c6f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a05e:	4b1c      	ldr	r3, [pc, #112]	; (801a0d0 <RadioSetModem+0xb4>)
 801a060:	2200      	movs	r2, #0
 801a062:	735a      	strb	r2, [r3, #13]
        break;
 801a064:	e02f      	b.n	801a0c6 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a066:	2000      	movs	r0, #0
 801a068:	f002 fb44 	bl	801c6f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a06c:	4b18      	ldr	r3, [pc, #96]	; (801a0d0 <RadioSetModem+0xb4>)
 801a06e:	2200      	movs	r2, #0
 801a070:	735a      	strb	r2, [r3, #13]
        break;
 801a072:	e028      	b.n	801a0c6 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a074:	2001      	movs	r0, #1
 801a076:	f002 fb3d 	bl	801c6f4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a07a:	4b15      	ldr	r3, [pc, #84]	; (801a0d0 <RadioSetModem+0xb4>)
 801a07c:	7b5a      	ldrb	r2, [r3, #13]
 801a07e:	4b14      	ldr	r3, [pc, #80]	; (801a0d0 <RadioSetModem+0xb4>)
 801a080:	7b1b      	ldrb	r3, [r3, #12]
 801a082:	429a      	cmp	r2, r3
 801a084:	d01e      	beq.n	801a0c4 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a086:	4b12      	ldr	r3, [pc, #72]	; (801a0d0 <RadioSetModem+0xb4>)
 801a088:	7b1a      	ldrb	r2, [r3, #12]
 801a08a:	4b11      	ldr	r3, [pc, #68]	; (801a0d0 <RadioSetModem+0xb4>)
 801a08c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a08e:	4b10      	ldr	r3, [pc, #64]	; (801a0d0 <RadioSetModem+0xb4>)
 801a090:	7b5b      	ldrb	r3, [r3, #13]
 801a092:	4618      	mov	r0, r3
 801a094:	f000 ffa2 	bl	801afdc <RadioSetPublicNetwork>
        }
        break;
 801a098:	e014      	b.n	801a0c4 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a09a:	2002      	movs	r0, #2
 801a09c:	f002 fb2a 	bl	801c6f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0a0:	4b0b      	ldr	r3, [pc, #44]	; (801a0d0 <RadioSetModem+0xb4>)
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	735a      	strb	r2, [r3, #13]
        break;
 801a0a6:	e00e      	b.n	801a0c6 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a0a8:	2002      	movs	r0, #2
 801a0aa:	f002 fb23 	bl	801c6f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0ae:	4b08      	ldr	r3, [pc, #32]	; (801a0d0 <RadioSetModem+0xb4>)
 801a0b0:	2200      	movs	r2, #0
 801a0b2:	735a      	strb	r2, [r3, #13]
        break;
 801a0b4:	e007      	b.n	801a0c6 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a0b6:	2000      	movs	r0, #0
 801a0b8:	f002 fb1c 	bl	801c6f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0bc:	4b04      	ldr	r3, [pc, #16]	; (801a0d0 <RadioSetModem+0xb4>)
 801a0be:	2200      	movs	r2, #0
 801a0c0:	735a      	strb	r2, [r3, #13]
        break;
 801a0c2:	e000      	b.n	801a0c6 <RadioSetModem+0xaa>
        break;
 801a0c4:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a0c6:	bf00      	nop
 801a0c8:	3708      	adds	r7, #8
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	bd80      	pop	{r7, pc}
 801a0ce:	bf00      	nop
 801a0d0:	20001830 	.word	0x20001830

0801a0d4 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b082      	sub	sp, #8
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a0dc:	6878      	ldr	r0, [r7, #4]
 801a0de:	f002 fac3 	bl	801c668 <SUBGRF_SetRfFrequency>
}
 801a0e2:	bf00      	nop
 801a0e4:	3708      	adds	r7, #8
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bd80      	pop	{r7, pc}

0801a0ea <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a0ea:	b580      	push	{r7, lr}
 801a0ec:	b090      	sub	sp, #64	; 0x40
 801a0ee:	af0a      	add	r7, sp, #40	; 0x28
 801a0f0:	60f8      	str	r0, [r7, #12]
 801a0f2:	60b9      	str	r1, [r7, #8]
 801a0f4:	603b      	str	r3, [r7, #0]
 801a0f6:	4613      	mov	r3, r2
 801a0f8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a0fe:	2300      	movs	r3, #0
 801a100:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a102:	2300      	movs	r3, #0
 801a104:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a106:	f000 fdf2 	bl	801acee <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a10a:	2000      	movs	r0, #0
 801a10c:	f7ff ff86 	bl	801a01c <RadioSetModem>

    RadioSetChannel( freq );
 801a110:	68f8      	ldr	r0, [r7, #12]
 801a112:	f7ff ffdf 	bl	801a0d4 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a116:	2301      	movs	r3, #1
 801a118:	9309      	str	r3, [sp, #36]	; 0x24
 801a11a:	2300      	movs	r3, #0
 801a11c:	9308      	str	r3, [sp, #32]
 801a11e:	2300      	movs	r3, #0
 801a120:	9307      	str	r3, [sp, #28]
 801a122:	2300      	movs	r3, #0
 801a124:	9306      	str	r3, [sp, #24]
 801a126:	2300      	movs	r3, #0
 801a128:	9305      	str	r3, [sp, #20]
 801a12a:	2300      	movs	r3, #0
 801a12c:	9304      	str	r3, [sp, #16]
 801a12e:	2300      	movs	r3, #0
 801a130:	9303      	str	r3, [sp, #12]
 801a132:	2300      	movs	r3, #0
 801a134:	9302      	str	r3, [sp, #8]
 801a136:	2303      	movs	r3, #3
 801a138:	9301      	str	r3, [sp, #4]
 801a13a:	68bb      	ldr	r3, [r7, #8]
 801a13c:	9300      	str	r3, [sp, #0]
 801a13e:	2300      	movs	r3, #0
 801a140:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a144:	68b9      	ldr	r1, [r7, #8]
 801a146:	2000      	movs	r0, #0
 801a148:	f000 f83c 	bl	801a1c4 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a14c:	2000      	movs	r0, #0
 801a14e:	f000 fdd5 	bl	801acfc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a152:	f000 ff71 	bl	801b038 <RadioGetWakeupTime>
 801a156:	4603      	mov	r3, r0
 801a158:	4618      	mov	r0, r3
 801a15a:	f7e8 fd7d 	bl	8002c58 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a15e:	f004 f90d 	bl	801e37c <UTIL_TIMER_GetCurrentTime>
 801a162:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a164:	e00d      	b.n	801a182 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a166:	2000      	movs	r0, #0
 801a168:	f000 feb6 	bl	801aed8 <RadioRssi>
 801a16c:	4603      	mov	r3, r0
 801a16e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a170:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a178:	429a      	cmp	r2, r3
 801a17a:	dd02      	ble.n	801a182 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a17c:	2300      	movs	r3, #0
 801a17e:	75fb      	strb	r3, [r7, #23]
            break;
 801a180:	e006      	b.n	801a190 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a182:	6938      	ldr	r0, [r7, #16]
 801a184:	f004 f90c 	bl	801e3a0 <UTIL_TIMER_GetElapsedTime>
 801a188:	4602      	mov	r2, r0
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	4293      	cmp	r3, r2
 801a18e:	d8ea      	bhi.n	801a166 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a190:	f000 fdad 	bl	801acee <RadioStandby>

    return status;
 801a194:	7dfb      	ldrb	r3, [r7, #23]
}
 801a196:	4618      	mov	r0, r3
 801a198:	3718      	adds	r7, #24
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}

0801a19e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a19e:	b580      	push	{r7, lr}
 801a1a0:	b082      	sub	sp, #8
 801a1a2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	2100      	movs	r1, #0
 801a1ae:	2000      	movs	r0, #0
 801a1b0:	f002 f9fe 	bl	801c5b0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a1b4:	f001 ffaf 	bl	801c116 <SUBGRF_GetRandom>
 801a1b8:	6078      	str	r0, [r7, #4]

    return rnd;
 801a1ba:	687b      	ldr	r3, [r7, #4]
}
 801a1bc:	4618      	mov	r0, r3
 801a1be:	3708      	adds	r7, #8
 801a1c0:	46bd      	mov	sp, r7
 801a1c2:	bd80      	pop	{r7, pc}

0801a1c4 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b08a      	sub	sp, #40	; 0x28
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	60b9      	str	r1, [r7, #8]
 801a1cc:	607a      	str	r2, [r7, #4]
 801a1ce:	461a      	mov	r2, r3
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	73fb      	strb	r3, [r7, #15]
 801a1d4:	4613      	mov	r3, r2
 801a1d6:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a1d8:	4ab9      	ldr	r2, [pc, #740]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a1da:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1de:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a1e0:	f003 f87d 	bl	801d2de <RFW_DeInit>
    if( rxContinuous == true )
 801a1e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d001      	beq.n	801a1f0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a1f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d004      	beq.n	801a202 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a1f8:	4ab2      	ldr	r2, [pc, #712]	; (801a4c4 <RadioSetRxConfig+0x300>)
 801a1fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a1fe:	7013      	strb	r3, [r2, #0]
 801a200:	e002      	b.n	801a208 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a202:	4bb0      	ldr	r3, [pc, #704]	; (801a4c4 <RadioSetRxConfig+0x300>)
 801a204:	22ff      	movs	r2, #255	; 0xff
 801a206:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a208:	7bfb      	ldrb	r3, [r7, #15]
 801a20a:	2b05      	cmp	r3, #5
 801a20c:	d009      	beq.n	801a222 <RadioSetRxConfig+0x5e>
 801a20e:	2b05      	cmp	r3, #5
 801a210:	f300 81d7 	bgt.w	801a5c2 <RadioSetRxConfig+0x3fe>
 801a214:	2b00      	cmp	r3, #0
 801a216:	f000 80bf 	beq.w	801a398 <RadioSetRxConfig+0x1d4>
 801a21a:	2b01      	cmp	r3, #1
 801a21c:	f000 8124 	beq.w	801a468 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a220:	e1cf      	b.n	801a5c2 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a222:	2001      	movs	r0, #1
 801a224:	f002 f8bc 	bl	801c3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a228:	4ba5      	ldr	r3, [pc, #660]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a22a:	2200      	movs	r2, #0
 801a22c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a230:	4aa3      	ldr	r2, [pc, #652]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a236:	4ba2      	ldr	r3, [pc, #648]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a238:	2209      	movs	r2, #9
 801a23a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a23e:	4ba0      	ldr	r3, [pc, #640]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a240:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a244:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a246:	68b8      	ldr	r0, [r7, #8]
 801a248:	f002 ff7c 	bl	801d144 <SUBGRF_GetFskBandwidthRegValue>
 801a24c:	4603      	mov	r3, r0
 801a24e:	461a      	mov	r2, r3
 801a250:	4b9b      	ldr	r3, [pc, #620]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a256:	4b9a      	ldr	r3, [pc, #616]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a258:	2200      	movs	r2, #0
 801a25a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a25c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a25e:	00db      	lsls	r3, r3, #3
 801a260:	b29a      	uxth	r2, r3
 801a262:	4b97      	ldr	r3, [pc, #604]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a264:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a266:	4b96      	ldr	r3, [pc, #600]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a268:	2200      	movs	r2, #0
 801a26a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a26c:	4b94      	ldr	r3, [pc, #592]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a26e:	2210      	movs	r2, #16
 801a270:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a272:	4b93      	ldr	r3, [pc, #588]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a274:	2200      	movs	r2, #0
 801a276:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a278:	4b91      	ldr	r3, [pc, #580]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a27a:	2200      	movs	r2, #0
 801a27c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a27e:	4b91      	ldr	r3, [pc, #580]	; (801a4c4 <RadioSetRxConfig+0x300>)
 801a280:	781a      	ldrb	r2, [r3, #0]
 801a282:	4b8f      	ldr	r3, [pc, #572]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a284:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a286:	4b8e      	ldr	r3, [pc, #568]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a288:	2201      	movs	r2, #1
 801a28a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a28c:	4b8c      	ldr	r3, [pc, #560]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a28e:	2200      	movs	r2, #0
 801a290:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a292:	2005      	movs	r0, #5
 801a294:	f7ff fec2 	bl	801a01c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a298:	488b      	ldr	r0, [pc, #556]	; (801a4c8 <RadioSetRxConfig+0x304>)
 801a29a:	f002 fb1f 	bl	801c8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a29e:	488b      	ldr	r0, [pc, #556]	; (801a4cc <RadioSetRxConfig+0x308>)
 801a2a0:	f002 fbee 	bl	801ca80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a2a4:	4a8a      	ldr	r2, [pc, #552]	; (801a4d0 <RadioSetRxConfig+0x30c>)
 801a2a6:	f107 031c 	add.w	r3, r7, #28
 801a2aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a2ae:	e883 0003 	stmia.w	r3, {r0, r1}
 801a2b2:	f107 031c 	add.w	r3, r7, #28
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f001 feab 	bl	801c012 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a2bc:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a2c0:	f001 fef6 	bl	801c0b0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a2c4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2c8:	f000 fe25 	bl	801af16 <RadioRead>
 801a2cc:	4603      	mov	r3, r0
 801a2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2d6:	f023 0310 	bic.w	r3, r3, #16
 801a2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a2de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2e2:	4619      	mov	r1, r3
 801a2e4:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2e8:	f000 fe03 	bl	801aef2 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a2ec:	2104      	movs	r1, #4
 801a2ee:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a2f2:	f000 fdfe 	bl	801aef2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a2f6:	f640 009b 	movw	r0, #2203	; 0x89b
 801a2fa:	f000 fe0c 	bl	801af16 <RadioRead>
 801a2fe:	4603      	mov	r3, r0
 801a300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a308:	f023 031c 	bic.w	r3, r3, #28
 801a30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a314:	f043 0308 	orr.w	r3, r3, #8
 801a318:	b2db      	uxtb	r3, r3
 801a31a:	4619      	mov	r1, r3
 801a31c:	f640 009b 	movw	r0, #2203	; 0x89b
 801a320:	f000 fde7 	bl	801aef2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a324:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a328:	f000 fdf5 	bl	801af16 <RadioRead>
 801a32c:	4603      	mov	r3, r0
 801a32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a336:	f023 0318 	bic.w	r3, r3, #24
 801a33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a33e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a342:	f043 0318 	orr.w	r3, r3, #24
 801a346:	b2db      	uxtb	r3, r3
 801a348:	4619      	mov	r1, r3
 801a34a:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a34e:	f000 fdd0 	bl	801aef2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a352:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a356:	f000 fdde 	bl	801af16 <RadioRead>
 801a35a:	4603      	mov	r3, r0
 801a35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a370:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a374:	b2db      	uxtb	r3, r3
 801a376:	4619      	mov	r1, r3
 801a378:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a37c:	f000 fdb9 	bl	801aef2 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a380:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a382:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a386:	fb02 f303 	mul.w	r3, r2, r3
 801a38a:	461a      	mov	r2, r3
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a392:	4a4b      	ldr	r2, [pc, #300]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a394:	6093      	str	r3, [r2, #8]
            break;
 801a396:	e115      	b.n	801a5c4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a398:	2000      	movs	r0, #0
 801a39a:	f002 f801 	bl	801c3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a39e:	4b48      	ldr	r3, [pc, #288]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a3a6:	4a46      	ldr	r2, [pc, #280]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a3ac:	4b44      	ldr	r3, [pc, #272]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3ae:	220b      	movs	r2, #11
 801a3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a3b4:	68b8      	ldr	r0, [r7, #8]
 801a3b6:	f002 fec5 	bl	801d144 <SUBGRF_GetFskBandwidthRegValue>
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	461a      	mov	r2, r3
 801a3be:	4b40      	ldr	r3, [pc, #256]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a3c4:	4b3e      	ldr	r3, [pc, #248]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a3ca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a3cc:	00db      	lsls	r3, r3, #3
 801a3ce:	b29a      	uxth	r2, r3
 801a3d0:	4b3b      	ldr	r3, [pc, #236]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3d2:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a3d4:	4b3a      	ldr	r3, [pc, #232]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3d6:	2204      	movs	r2, #4
 801a3d8:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a3da:	4b39      	ldr	r3, [pc, #228]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3dc:	2218      	movs	r2, #24
 801a3de:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a3e0:	4b37      	ldr	r3, [pc, #220]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a3e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a3ea:	f083 0301 	eor.w	r3, r3, #1
 801a3ee:	b2db      	uxtb	r3, r3
 801a3f0:	461a      	mov	r2, r3
 801a3f2:	4b33      	ldr	r3, [pc, #204]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3f4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a3f6:	4b33      	ldr	r3, [pc, #204]	; (801a4c4 <RadioSetRxConfig+0x300>)
 801a3f8:	781a      	ldrb	r2, [r3, #0]
 801a3fa:	4b31      	ldr	r3, [pc, #196]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a3fc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a3fe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a402:	2b00      	cmp	r3, #0
 801a404:	d003      	beq.n	801a40e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a406:	4b2e      	ldr	r3, [pc, #184]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a408:	22f2      	movs	r2, #242	; 0xf2
 801a40a:	75da      	strb	r2, [r3, #23]
 801a40c:	e002      	b.n	801a414 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a40e:	4b2c      	ldr	r3, [pc, #176]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a410:	2201      	movs	r2, #1
 801a412:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a414:	4b2a      	ldr	r3, [pc, #168]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a416:	2201      	movs	r2, #1
 801a418:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a41a:	f000 fc68 	bl	801acee <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a41e:	2000      	movs	r0, #0
 801a420:	f7ff fdfc 	bl	801a01c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a424:	4828      	ldr	r0, [pc, #160]	; (801a4c8 <RadioSetRxConfig+0x304>)
 801a426:	f002 fa59 	bl	801c8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a42a:	4828      	ldr	r0, [pc, #160]	; (801a4cc <RadioSetRxConfig+0x308>)
 801a42c:	f002 fb28 	bl	801ca80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a430:	4a28      	ldr	r2, [pc, #160]	; (801a4d4 <RadioSetRxConfig+0x310>)
 801a432:	f107 0314 	add.w	r3, r7, #20
 801a436:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a43a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a43e:	f107 0314 	add.w	r3, r7, #20
 801a442:	4618      	mov	r0, r3
 801a444:	f001 fde5 	bl	801c012 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a448:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a44c:	f001 fe30 	bl	801c0b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a450:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a452:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a456:	fb02 f303 	mul.w	r3, r2, r3
 801a45a:	461a      	mov	r2, r3
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a462:	4a17      	ldr	r2, [pc, #92]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a464:	6093      	str	r3, [r2, #8]
            break;
 801a466:	e0ad      	b.n	801a5c4 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a468:	2000      	movs	r0, #0
 801a46a:	f001 ff99 	bl	801c3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a46e:	4b14      	ldr	r3, [pc, #80]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a470:	2201      	movs	r2, #1
 801a472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	b2da      	uxtb	r2, r3
 801a47a:	4b11      	ldr	r3, [pc, #68]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a47c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a480:	4a15      	ldr	r2, [pc, #84]	; (801a4d8 <RadioSetRxConfig+0x314>)
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	4413      	add	r3, r2
 801a486:	781a      	ldrb	r2, [r3, #0]
 801a488:	4b0d      	ldr	r3, [pc, #52]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a48a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a48e:	4a0c      	ldr	r2, [pc, #48]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a490:	7bbb      	ldrb	r3, [r7, #14]
 801a492:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a496:	68bb      	ldr	r3, [r7, #8]
 801a498:	2b00      	cmp	r3, #0
 801a49a:	d105      	bne.n	801a4a8 <RadioSetRxConfig+0x2e4>
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2b0b      	cmp	r3, #11
 801a4a0:	d008      	beq.n	801a4b4 <RadioSetRxConfig+0x2f0>
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	2b0c      	cmp	r3, #12
 801a4a6:	d005      	beq.n	801a4b4 <RadioSetRxConfig+0x2f0>
 801a4a8:	68bb      	ldr	r3, [r7, #8]
 801a4aa:	2b01      	cmp	r3, #1
 801a4ac:	d116      	bne.n	801a4dc <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2b0c      	cmp	r3, #12
 801a4b2:	d113      	bne.n	801a4dc <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a4b4:	4b02      	ldr	r3, [pc, #8]	; (801a4c0 <RadioSetRxConfig+0x2fc>)
 801a4b6:	2201      	movs	r2, #1
 801a4b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a4bc:	e012      	b.n	801a4e4 <RadioSetRxConfig+0x320>
 801a4be:	bf00      	nop
 801a4c0:	20001830 	.word	0x20001830
 801a4c4:	20000154 	.word	0x20000154
 801a4c8:	20001868 	.word	0x20001868
 801a4cc:	2000183e 	.word	0x2000183e
 801a4d0:	0801f420 	.word	0x0801f420
 801a4d4:	0801f428 	.word	0x0801f428
 801a4d8:	0801fa90 	.word	0x0801fa90
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a4dc:	4b3b      	ldr	r3, [pc, #236]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a4de:	2200      	movs	r2, #0
 801a4e0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a4e4:	4b39      	ldr	r3, [pc, #228]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a4e6:	2201      	movs	r2, #1
 801a4e8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4ea:	4b38      	ldr	r3, [pc, #224]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a4ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a4f0:	2b05      	cmp	r3, #5
 801a4f2:	d004      	beq.n	801a4fe <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a4f4:	4b35      	ldr	r3, [pc, #212]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a4f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4fa:	2b06      	cmp	r3, #6
 801a4fc:	d10a      	bne.n	801a514 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a4fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a500:	2b0b      	cmp	r3, #11
 801a502:	d803      	bhi.n	801a50c <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a504:	4b31      	ldr	r3, [pc, #196]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a506:	220c      	movs	r2, #12
 801a508:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a50a:	e006      	b.n	801a51a <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a50c:	4a2f      	ldr	r2, [pc, #188]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a50e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a510:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a512:	e002      	b.n	801a51a <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a514:	4a2d      	ldr	r2, [pc, #180]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a516:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a518:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a51a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a51e:	4b2b      	ldr	r3, [pc, #172]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a520:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a522:	4b2b      	ldr	r3, [pc, #172]	; (801a5d0 <RadioSetRxConfig+0x40c>)
 801a524:	781a      	ldrb	r2, [r3, #0]
 801a526:	4b29      	ldr	r3, [pc, #164]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a528:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a52a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a52e:	4b27      	ldr	r3, [pc, #156]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a530:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a534:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a538:	4b24      	ldr	r3, [pc, #144]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a53a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a53e:	f000 fbd6 	bl	801acee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a542:	2001      	movs	r0, #1
 801a544:	f7ff fd6a 	bl	801a01c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a548:	4822      	ldr	r0, [pc, #136]	; (801a5d4 <RadioSetRxConfig+0x410>)
 801a54a:	f002 f9c7 	bl	801c8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a54e:	4822      	ldr	r0, [pc, #136]	; (801a5d8 <RadioSetRxConfig+0x414>)
 801a550:	f002 fa96 	bl	801ca80 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a554:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a556:	b2db      	uxtb	r3, r3
 801a558:	4618      	mov	r0, r3
 801a55a:	f001 ff30 	bl	801c3be <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a55e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a562:	f002 fbe9 	bl	801cd38 <SUBGRF_ReadRegister>
 801a566:	4603      	mov	r3, r0
 801a568:	f003 0301 	and.w	r3, r3, #1
 801a56c:	b2db      	uxtb	r3, r3
 801a56e:	4619      	mov	r1, r3
 801a570:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a574:	f002 fbcc 	bl	801cd10 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a578:	4b14      	ldr	r3, [pc, #80]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a57a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a57e:	2b01      	cmp	r3, #1
 801a580:	d10d      	bne.n	801a59e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a582:	f240 7036 	movw	r0, #1846	; 0x736
 801a586:	f002 fbd7 	bl	801cd38 <SUBGRF_ReadRegister>
 801a58a:	4603      	mov	r3, r0
 801a58c:	f023 0304 	bic.w	r3, r3, #4
 801a590:	b2db      	uxtb	r3, r3
 801a592:	4619      	mov	r1, r3
 801a594:	f240 7036 	movw	r0, #1846	; 0x736
 801a598:	f002 fbba 	bl	801cd10 <SUBGRF_WriteRegister>
 801a59c:	e00c      	b.n	801a5b8 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a59e:	f240 7036 	movw	r0, #1846	; 0x736
 801a5a2:	f002 fbc9 	bl	801cd38 <SUBGRF_ReadRegister>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	f043 0304 	orr.w	r3, r3, #4
 801a5ac:	b2db      	uxtb	r3, r3
 801a5ae:	4619      	mov	r1, r3
 801a5b0:	f240 7036 	movw	r0, #1846	; 0x736
 801a5b4:	f002 fbac 	bl	801cd10 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a5b8:	4b04      	ldr	r3, [pc, #16]	; (801a5cc <RadioSetRxConfig+0x408>)
 801a5ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5be:	609a      	str	r2, [r3, #8]
            break;
 801a5c0:	e000      	b.n	801a5c4 <RadioSetRxConfig+0x400>
            break;
 801a5c2:	bf00      	nop
    }
}
 801a5c4:	bf00      	nop
 801a5c6:	3728      	adds	r7, #40	; 0x28
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}
 801a5cc:	20001830 	.word	0x20001830
 801a5d0:	20000154 	.word	0x20000154
 801a5d4:	20001868 	.word	0x20001868
 801a5d8:	2000183e 	.word	0x2000183e

0801a5dc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b086      	sub	sp, #24
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	60ba      	str	r2, [r7, #8]
 801a5e4:	607b      	str	r3, [r7, #4]
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	73fb      	strb	r3, [r7, #15]
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a5ee:	f002 fe76 	bl	801d2de <RFW_DeInit>
    switch( modem )
 801a5f2:	7bfb      	ldrb	r3, [r7, #15]
 801a5f4:	2b04      	cmp	r3, #4
 801a5f6:	f000 80c7 	beq.w	801a788 <RadioSetTxConfig+0x1ac>
 801a5fa:	2b04      	cmp	r3, #4
 801a5fc:	f300 80d6 	bgt.w	801a7ac <RadioSetTxConfig+0x1d0>
 801a600:	2b00      	cmp	r3, #0
 801a602:	d002      	beq.n	801a60a <RadioSetTxConfig+0x2e>
 801a604:	2b01      	cmp	r3, #1
 801a606:	d059      	beq.n	801a6bc <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a608:	e0d0      	b.n	801a7ac <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a60a:	4b77      	ldr	r3, [pc, #476]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a60c:	2200      	movs	r2, #0
 801a60e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a612:	4a75      	ldr	r2, [pc, #468]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a614:	6a3b      	ldr	r3, [r7, #32]
 801a616:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a618:	4b73      	ldr	r3, [pc, #460]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a61a:	220b      	movs	r2, #11
 801a61c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a620:	6878      	ldr	r0, [r7, #4]
 801a622:	f002 fd8f 	bl	801d144 <SUBGRF_GetFskBandwidthRegValue>
 801a626:	4603      	mov	r3, r0
 801a628:	461a      	mov	r2, r3
 801a62a:	4b6f      	ldr	r3, [pc, #444]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a630:	4a6d      	ldr	r2, [pc, #436]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a632:	68bb      	ldr	r3, [r7, #8]
 801a634:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a636:	4b6c      	ldr	r3, [pc, #432]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a638:	2200      	movs	r2, #0
 801a63a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a63c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a63e:	00db      	lsls	r3, r3, #3
 801a640:	b29a      	uxth	r2, r3
 801a642:	4b69      	ldr	r3, [pc, #420]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a644:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a646:	4b68      	ldr	r3, [pc, #416]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a648:	2204      	movs	r2, #4
 801a64a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a64c:	4b66      	ldr	r3, [pc, #408]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a64e:	2218      	movs	r2, #24
 801a650:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a652:	4b65      	ldr	r3, [pc, #404]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a654:	2200      	movs	r2, #0
 801a656:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a658:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a65c:	f083 0301 	eor.w	r3, r3, #1
 801a660:	b2db      	uxtb	r3, r3
 801a662:	461a      	mov	r2, r3
 801a664:	4b60      	ldr	r3, [pc, #384]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a666:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a668:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d003      	beq.n	801a678 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a670:	4b5d      	ldr	r3, [pc, #372]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a672:	22f2      	movs	r2, #242	; 0xf2
 801a674:	75da      	strb	r2, [r3, #23]
 801a676:	e002      	b.n	801a67e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a678:	4b5b      	ldr	r3, [pc, #364]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a67a:	2201      	movs	r2, #1
 801a67c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a67e:	4b5a      	ldr	r3, [pc, #360]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a680:	2201      	movs	r2, #1
 801a682:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a684:	f000 fb33 	bl	801acee <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a688:	2000      	movs	r0, #0
 801a68a:	f7ff fcc7 	bl	801a01c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a68e:	4857      	ldr	r0, [pc, #348]	; (801a7ec <RadioSetTxConfig+0x210>)
 801a690:	f002 f924 	bl	801c8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a694:	4856      	ldr	r0, [pc, #344]	; (801a7f0 <RadioSetTxConfig+0x214>)
 801a696:	f002 f9f3 	bl	801ca80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a69a:	4a56      	ldr	r2, [pc, #344]	; (801a7f4 <RadioSetTxConfig+0x218>)
 801a69c:	f107 0310 	add.w	r3, r7, #16
 801a6a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6a4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6a8:	f107 0310 	add.w	r3, r7, #16
 801a6ac:	4618      	mov	r0, r3
 801a6ae:	f001 fcb0 	bl	801c012 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a6b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a6b6:	f001 fcfb 	bl	801c0b0 <SUBGRF_SetWhiteningSeed>
            break;
 801a6ba:	e078      	b.n	801a7ae <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a6bc:	4b4a      	ldr	r3, [pc, #296]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a6be:	2201      	movs	r2, #1
 801a6c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a6c4:	6a3b      	ldr	r3, [r7, #32]
 801a6c6:	b2da      	uxtb	r2, r3
 801a6c8:	4b47      	ldr	r3, [pc, #284]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a6ce:	4a4a      	ldr	r2, [pc, #296]	; (801a7f8 <RadioSetTxConfig+0x21c>)
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	4413      	add	r3, r2
 801a6d4:	781a      	ldrb	r2, [r3, #0]
 801a6d6:	4b44      	ldr	r3, [pc, #272]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a6d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a6dc:	4a42      	ldr	r2, [pc, #264]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a6de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a6e2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d105      	bne.n	801a6f8 <RadioSetTxConfig+0x11c>
 801a6ec:	6a3b      	ldr	r3, [r7, #32]
 801a6ee:	2b0b      	cmp	r3, #11
 801a6f0:	d008      	beq.n	801a704 <RadioSetTxConfig+0x128>
 801a6f2:	6a3b      	ldr	r3, [r7, #32]
 801a6f4:	2b0c      	cmp	r3, #12
 801a6f6:	d005      	beq.n	801a704 <RadioSetTxConfig+0x128>
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	2b01      	cmp	r3, #1
 801a6fc:	d107      	bne.n	801a70e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a6fe:	6a3b      	ldr	r3, [r7, #32]
 801a700:	2b0c      	cmp	r3, #12
 801a702:	d104      	bne.n	801a70e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a704:	4b38      	ldr	r3, [pc, #224]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a706:	2201      	movs	r2, #1
 801a708:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a70c:	e003      	b.n	801a716 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a70e:	4b36      	ldr	r3, [pc, #216]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a710:	2200      	movs	r2, #0
 801a712:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a716:	4b34      	ldr	r3, [pc, #208]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a718:	2201      	movs	r2, #1
 801a71a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a71c:	4b32      	ldr	r3, [pc, #200]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a71e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a722:	2b05      	cmp	r3, #5
 801a724:	d004      	beq.n	801a730 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a726:	4b30      	ldr	r3, [pc, #192]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a728:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a72c:	2b06      	cmp	r3, #6
 801a72e:	d10a      	bne.n	801a746 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a730:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a732:	2b0b      	cmp	r3, #11
 801a734:	d803      	bhi.n	801a73e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a736:	4b2c      	ldr	r3, [pc, #176]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a738:	220c      	movs	r2, #12
 801a73a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a73c:	e006      	b.n	801a74c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a73e:	4a2a      	ldr	r2, [pc, #168]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a740:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a742:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a744:	e002      	b.n	801a74c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a746:	4a28      	ldr	r2, [pc, #160]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a748:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a74a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a74c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a750:	4b25      	ldr	r3, [pc, #148]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a752:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a754:	4b29      	ldr	r3, [pc, #164]	; (801a7fc <RadioSetTxConfig+0x220>)
 801a756:	781a      	ldrb	r2, [r3, #0]
 801a758:	4b23      	ldr	r3, [pc, #140]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a75a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a75c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a760:	4b21      	ldr	r3, [pc, #132]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a762:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a766:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a76a:	4b1f      	ldr	r3, [pc, #124]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a76c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a770:	f000 fabd 	bl	801acee <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a774:	2001      	movs	r0, #1
 801a776:	f7ff fc51 	bl	801a01c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a77a:	481c      	ldr	r0, [pc, #112]	; (801a7ec <RadioSetTxConfig+0x210>)
 801a77c:	f002 f8ae 	bl	801c8dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a780:	481b      	ldr	r0, [pc, #108]	; (801a7f0 <RadioSetTxConfig+0x214>)
 801a782:	f002 f97d 	bl	801ca80 <SUBGRF_SetPacketParams>
            break;
 801a786:	e012      	b.n	801a7ae <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a788:	2004      	movs	r0, #4
 801a78a:	f7ff fc47 	bl	801a01c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a78e:	4b16      	ldr	r3, [pc, #88]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a790:	2202      	movs	r2, #2
 801a792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a796:	4a14      	ldr	r2, [pc, #80]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a798:	6a3b      	ldr	r3, [r7, #32]
 801a79a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a79c:	4b12      	ldr	r3, [pc, #72]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a79e:	2216      	movs	r2, #22
 801a7a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7a4:	4811      	ldr	r0, [pc, #68]	; (801a7ec <RadioSetTxConfig+0x210>)
 801a7a6:	f002 f899 	bl	801c8dc <SUBGRF_SetModulationParams>
            break;
 801a7aa:	e000      	b.n	801a7ae <RadioSetTxConfig+0x1d2>
            break;
 801a7ac:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a7ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	f002 fbc8 	bl	801cf48 <SUBGRF_SetRfTxPower>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	461a      	mov	r2, r3
 801a7bc:	4b0a      	ldr	r3, [pc, #40]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a7be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a7c2:	210e      	movs	r1, #14
 801a7c4:	f640 101f 	movw	r0, #2335	; 0x91f
 801a7c8:	f002 faa2 	bl	801cd10 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a7cc:	4b06      	ldr	r3, [pc, #24]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a7ce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7d2:	4618      	mov	r0, r3
 801a7d4:	f002 fd97 	bl	801d306 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a7d8:	4a03      	ldr	r2, [pc, #12]	; (801a7e8 <RadioSetTxConfig+0x20c>)
 801a7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7dc:	6053      	str	r3, [r2, #4]
}
 801a7de:	bf00      	nop
 801a7e0:	3718      	adds	r7, #24
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	20001830 	.word	0x20001830
 801a7ec:	20001868 	.word	0x20001868
 801a7f0:	2000183e 	.word	0x2000183e
 801a7f4:	0801f428 	.word	0x0801f428
 801a7f8:	0801fa90 	.word	0x0801fa90
 801a7fc:	20000154 	.word	0x20000154

0801a800 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a800:	b480      	push	{r7}
 801a802:	b083      	sub	sp, #12
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
    return true;
 801a808:	2301      	movs	r3, #1
}
 801a80a:	4618      	mov	r0, r3
 801a80c:	370c      	adds	r7, #12
 801a80e:	46bd      	mov	sp, r7
 801a810:	bc80      	pop	{r7}
 801a812:	4770      	bx	lr

0801a814 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a814:	b480      	push	{r7}
 801a816:	b085      	sub	sp, #20
 801a818:	af00      	add	r7, sp, #0
 801a81a:	4603      	mov	r3, r0
 801a81c:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a81e:	2300      	movs	r3, #0
 801a820:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a822:	79fb      	ldrb	r3, [r7, #7]
 801a824:	2b0a      	cmp	r3, #10
 801a826:	d83e      	bhi.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
 801a828:	a201      	add	r2, pc, #4	; (adr r2, 801a830 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a82a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a82e:	bf00      	nop
 801a830:	0801a85d 	.word	0x0801a85d
 801a834:	0801a86d 	.word	0x0801a86d
 801a838:	0801a87d 	.word	0x0801a87d
 801a83c:	0801a88d 	.word	0x0801a88d
 801a840:	0801a895 	.word	0x0801a895
 801a844:	0801a89b 	.word	0x0801a89b
 801a848:	0801a8a1 	.word	0x0801a8a1
 801a84c:	0801a8a7 	.word	0x0801a8a7
 801a850:	0801a865 	.word	0x0801a865
 801a854:	0801a875 	.word	0x0801a875
 801a858:	0801a885 	.word	0x0801a885
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a85c:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a860:	60fb      	str	r3, [r7, #12]
        break;
 801a862:	e020      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a864:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a868:	60fb      	str	r3, [r7, #12]
        break;
 801a86a:	e01c      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a86c:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a870:	60fb      	str	r3, [r7, #12]
        break;
 801a872:	e018      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a874:	f245 1361 	movw	r3, #20833	; 0x5161
 801a878:	60fb      	str	r3, [r7, #12]
        break;
 801a87a:	e014      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a87c:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a880:	60fb      	str	r3, [r7, #12]
        break;
 801a882:	e010      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a884:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a888:	60fb      	str	r3, [r7, #12]
        break;
 801a88a:	e00c      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a88c:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a890:	60fb      	str	r3, [r7, #12]
        break;
 801a892:	e008      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a894:	4b07      	ldr	r3, [pc, #28]	; (801a8b4 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a896:	60fb      	str	r3, [r7, #12]
        break;
 801a898:	e005      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a89a:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a89c:	60fb      	str	r3, [r7, #12]
        break;
 801a89e:	e002      	b.n	801a8a6 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a8a0:	4b06      	ldr	r3, [pc, #24]	; (801a8bc <RadioGetLoRaBandwidthInHz+0xa8>)
 801a8a2:	60fb      	str	r3, [r7, #12]
        break;
 801a8a4:	bf00      	nop
    }

    return bandwidthInHz;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
}
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	3714      	adds	r7, #20
 801a8ac:	46bd      	mov	sp, r7
 801a8ae:	bc80      	pop	{r7}
 801a8b0:	4770      	bx	lr
 801a8b2:	bf00      	nop
 801a8b4:	0001e848 	.word	0x0001e848
 801a8b8:	0003d090 	.word	0x0003d090
 801a8bc:	0007a120 	.word	0x0007a120

0801a8c0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b083      	sub	sp, #12
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
 801a8c8:	4608      	mov	r0, r1
 801a8ca:	4611      	mov	r1, r2
 801a8cc:	461a      	mov	r2, r3
 801a8ce:	4603      	mov	r3, r0
 801a8d0:	70fb      	strb	r3, [r7, #3]
 801a8d2:	460b      	mov	r3, r1
 801a8d4:	803b      	strh	r3, [r7, #0]
 801a8d6:	4613      	mov	r3, r2
 801a8d8:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a8da:	883b      	ldrh	r3, [r7, #0]
 801a8dc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8de:	78ba      	ldrb	r2, [r7, #2]
 801a8e0:	f082 0201 	eor.w	r2, r2, #1
 801a8e4:	b2d2      	uxtb	r2, r2
 801a8e6:	2a00      	cmp	r2, #0
 801a8e8:	d001      	beq.n	801a8ee <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a8ea:	2208      	movs	r2, #8
 801a8ec:	e000      	b.n	801a8f0 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a8ee:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a8f0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8f2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a8f6:	7c3b      	ldrb	r3, [r7, #16]
 801a8f8:	7d39      	ldrb	r1, [r7, #20]
 801a8fa:	2900      	cmp	r1, #0
 801a8fc:	d001      	beq.n	801a902 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a8fe:	2102      	movs	r1, #2
 801a900:	e000      	b.n	801a904 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a902:	2100      	movs	r1, #0
 801a904:	440b      	add	r3, r1
 801a906:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a908:	4413      	add	r3, r2
}
 801a90a:	4618      	mov	r0, r3
 801a90c:	370c      	adds	r7, #12
 801a90e:	46bd      	mov	sp, r7
 801a910:	bc80      	pop	{r7}
 801a912:	4770      	bx	lr

0801a914 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a914:	b480      	push	{r7}
 801a916:	b08b      	sub	sp, #44	; 0x2c
 801a918:	af00      	add	r7, sp, #0
 801a91a:	60f8      	str	r0, [r7, #12]
 801a91c:	60b9      	str	r1, [r7, #8]
 801a91e:	4611      	mov	r1, r2
 801a920:	461a      	mov	r2, r3
 801a922:	460b      	mov	r3, r1
 801a924:	71fb      	strb	r3, [r7, #7]
 801a926:	4613      	mov	r3, r2
 801a928:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a92a:	79fb      	ldrb	r3, [r7, #7]
 801a92c:	3304      	adds	r3, #4
 801a92e:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a930:	2300      	movs	r3, #0
 801a932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	2b05      	cmp	r3, #5
 801a93a:	d002      	beq.n	801a942 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a93c:	68bb      	ldr	r3, [r7, #8]
 801a93e:	2b06      	cmp	r3, #6
 801a940:	d104      	bne.n	801a94c <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a942:	88bb      	ldrh	r3, [r7, #4]
 801a944:	2b0b      	cmp	r3, #11
 801a946:	d801      	bhi.n	801a94c <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a948:	230c      	movs	r3, #12
 801a94a:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d105      	bne.n	801a95e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a952:	68bb      	ldr	r3, [r7, #8]
 801a954:	2b0b      	cmp	r3, #11
 801a956:	d008      	beq.n	801a96a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	2b0c      	cmp	r3, #12
 801a95c:	d005      	beq.n	801a96a <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a95e:	68fb      	ldr	r3, [r7, #12]
 801a960:	2b01      	cmp	r3, #1
 801a962:	d105      	bne.n	801a970 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	2b0c      	cmp	r3, #12
 801a968:	d102      	bne.n	801a970 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a96a:	2301      	movs	r3, #1
 801a96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a970:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a974:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a976:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a97a:	2a00      	cmp	r2, #0
 801a97c:	d001      	beq.n	801a982 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a97e:	2210      	movs	r2, #16
 801a980:	e000      	b.n	801a984 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a982:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a984:	4413      	add	r3, r2
 801a986:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a98c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a98e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a992:	2a00      	cmp	r2, #0
 801a994:	d001      	beq.n	801a99a <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a996:	2200      	movs	r2, #0
 801a998:	e000      	b.n	801a99c <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a99a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a99c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a99e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a9a0:	68bb      	ldr	r3, [r7, #8]
 801a9a2:	2b06      	cmp	r3, #6
 801a9a4:	d803      	bhi.n	801a9ae <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a9a6:	68bb      	ldr	r3, [r7, #8]
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	623b      	str	r3, [r7, #32]
 801a9ac:	e00e      	b.n	801a9cc <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a9ae:	69fb      	ldr	r3, [r7, #28]
 801a9b0:	3308      	adds	r3, #8
 801a9b2:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d004      	beq.n	801a9c6 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a9bc:	68bb      	ldr	r3, [r7, #8]
 801a9be:	3b02      	subs	r3, #2
 801a9c0:	009b      	lsls	r3, r3, #2
 801a9c2:	623b      	str	r3, [r7, #32]
 801a9c4:	e002      	b.n	801a9cc <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	009b      	lsls	r3, r3, #2
 801a9ca:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a9cc:	69fb      	ldr	r3, [r7, #28]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	da01      	bge.n	801a9d6 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a9d6:	69fa      	ldr	r2, [r7, #28]
 801a9d8:	6a3b      	ldr	r3, [r7, #32]
 801a9da:	4413      	add	r3, r2
 801a9dc:	1e5a      	subs	r2, r3, #1
 801a9de:	6a3b      	ldr	r3, [r7, #32]
 801a9e0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9e4:	697a      	ldr	r2, [r7, #20]
 801a9e6:	fb03 f202 	mul.w	r2, r3, r2
 801a9ea:	88bb      	ldrh	r3, [r7, #4]
 801a9ec:	4413      	add	r3, r2
    int32_t intermediate =
 801a9ee:	330c      	adds	r3, #12
 801a9f0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a9f2:	68bb      	ldr	r3, [r7, #8]
 801a9f4:	2b06      	cmp	r3, #6
 801a9f6:	d802      	bhi.n	801a9fe <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a9f8:	69bb      	ldr	r3, [r7, #24]
 801a9fa:	3302      	adds	r3, #2
 801a9fc:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a9fe:	69bb      	ldr	r3, [r7, #24]
 801aa00:	009b      	lsls	r3, r3, #2
 801aa02:	1c5a      	adds	r2, r3, #1
 801aa04:	68bb      	ldr	r3, [r7, #8]
 801aa06:	3b02      	subs	r3, #2
 801aa08:	fa02 f303 	lsl.w	r3, r2, r3
}
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	372c      	adds	r7, #44	; 0x2c
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bc80      	pop	{r7}
 801aa14:	4770      	bx	lr
	...

0801aa18 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b08a      	sub	sp, #40	; 0x28
 801aa1c:	af04      	add	r7, sp, #16
 801aa1e:	60b9      	str	r1, [r7, #8]
 801aa20:	607a      	str	r2, [r7, #4]
 801aa22:	461a      	mov	r2, r3
 801aa24:	4603      	mov	r3, r0
 801aa26:	73fb      	strb	r3, [r7, #15]
 801aa28:	4613      	mov	r3, r2
 801aa2a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801aa2c:	2300      	movs	r3, #0
 801aa2e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801aa30:	2301      	movs	r3, #1
 801aa32:	613b      	str	r3, [r7, #16]

    switch( modem )
 801aa34:	7bfb      	ldrb	r3, [r7, #15]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d002      	beq.n	801aa40 <RadioTimeOnAir+0x28>
 801aa3a:	2b01      	cmp	r3, #1
 801aa3c:	d017      	beq.n	801aa6e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801aa3e:	e035      	b.n	801aaac <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801aa40:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801aa44:	8c3a      	ldrh	r2, [r7, #32]
 801aa46:	7bb9      	ldrb	r1, [r7, #14]
 801aa48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa4c:	9301      	str	r3, [sp, #4]
 801aa4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa52:	9300      	str	r3, [sp, #0]
 801aa54:	4603      	mov	r3, r0
 801aa56:	6878      	ldr	r0, [r7, #4]
 801aa58:	f7ff ff32 	bl	801a8c0 <RadioGetGfskTimeOnAirNumerator>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa62:	fb02 f303 	mul.w	r3, r2, r3
 801aa66:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	613b      	str	r3, [r7, #16]
        break;
 801aa6c:	e01e      	b.n	801aaac <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801aa6e:	8c39      	ldrh	r1, [r7, #32]
 801aa70:	7bba      	ldrb	r2, [r7, #14]
 801aa72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa76:	9302      	str	r3, [sp, #8]
 801aa78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa7c:	9301      	str	r3, [sp, #4]
 801aa7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa82:	9300      	str	r3, [sp, #0]
 801aa84:	460b      	mov	r3, r1
 801aa86:	6879      	ldr	r1, [r7, #4]
 801aa88:	68b8      	ldr	r0, [r7, #8]
 801aa8a:	f7ff ff43 	bl	801a914 <RadioGetLoRaTimeOnAirNumerator>
 801aa8e:	4603      	mov	r3, r0
 801aa90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa94:	fb02 f303 	mul.w	r3, r2, r3
 801aa98:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801aa9a:	4a0a      	ldr	r2, [pc, #40]	; (801aac4 <RadioTimeOnAir+0xac>)
 801aa9c:	68bb      	ldr	r3, [r7, #8]
 801aa9e:	4413      	add	r3, r2
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	f7ff feb6 	bl	801a814 <RadioGetLoRaBandwidthInHz>
 801aaa8:	6138      	str	r0, [r7, #16]
        break;
 801aaaa:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801aaac:	697a      	ldr	r2, [r7, #20]
 801aaae:	693b      	ldr	r3, [r7, #16]
 801aab0:	4413      	add	r3, r2
 801aab2:	1e5a      	subs	r2, r3, #1
 801aab4:	693b      	ldr	r3, [r7, #16]
 801aab6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801aaba:	4618      	mov	r0, r3
 801aabc:	3718      	adds	r7, #24
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}
 801aac2:	bf00      	nop
 801aac4:	0801fa90 	.word	0x0801fa90

0801aac8 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b084      	sub	sp, #16
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
 801aad0:	460b      	mov	r3, r1
 801aad2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801aad4:	2300      	movs	r3, #0
 801aad6:	2200      	movs	r2, #0
 801aad8:	f240 2101 	movw	r1, #513	; 0x201
 801aadc:	f240 2001 	movw	r0, #513	; 0x201
 801aae0:	f001 fd66 	bl	801c5b0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801aae4:	4b73      	ldr	r3, [pc, #460]	; (801acb4 <RadioSend+0x1ec>)
 801aae6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aaea:	2101      	movs	r1, #1
 801aaec:	4618      	mov	r0, r3
 801aaee:	f002 fa03 	bl	801cef8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801aaf2:	4b70      	ldr	r3, [pc, #448]	; (801acb4 <RadioSend+0x1ec>)
 801aaf4:	781b      	ldrb	r3, [r3, #0]
 801aaf6:	2b01      	cmp	r3, #1
 801aaf8:	d112      	bne.n	801ab20 <RadioSend+0x58>
 801aafa:	4b6e      	ldr	r3, [pc, #440]	; (801acb4 <RadioSend+0x1ec>)
 801aafc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ab00:	2b06      	cmp	r3, #6
 801ab02:	d10d      	bne.n	801ab20 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ab04:	f640 0089 	movw	r0, #2185	; 0x889
 801ab08:	f002 f916 	bl	801cd38 <SUBGRF_ReadRegister>
 801ab0c:	4603      	mov	r3, r0
 801ab0e:	f023 0304 	bic.w	r3, r3, #4
 801ab12:	b2db      	uxtb	r3, r3
 801ab14:	4619      	mov	r1, r3
 801ab16:	f640 0089 	movw	r0, #2185	; 0x889
 801ab1a:	f002 f8f9 	bl	801cd10 <SUBGRF_WriteRegister>
 801ab1e:	e00c      	b.n	801ab3a <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab20:	f640 0089 	movw	r0, #2185	; 0x889
 801ab24:	f002 f908 	bl	801cd38 <SUBGRF_ReadRegister>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	f043 0304 	orr.w	r3, r3, #4
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	4619      	mov	r1, r3
 801ab32:	f640 0089 	movw	r0, #2185	; 0x889
 801ab36:	f002 f8eb 	bl	801cd10 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801ab3a:	4b5e      	ldr	r3, [pc, #376]	; (801acb4 <RadioSend+0x1ec>)
 801ab3c:	781b      	ldrb	r3, [r3, #0]
 801ab3e:	2b04      	cmp	r3, #4
 801ab40:	f200 80a8 	bhi.w	801ac94 <RadioSend+0x1cc>
 801ab44:	a201      	add	r2, pc, #4	; (adr r2, 801ab4c <RadioSend+0x84>)
 801ab46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab4a:	bf00      	nop
 801ab4c:	0801ab7b 	.word	0x0801ab7b
 801ab50:	0801ab61 	.word	0x0801ab61
 801ab54:	0801ab7b 	.word	0x0801ab7b
 801ab58:	0801abdd 	.word	0x0801abdd
 801ab5c:	0801abfd 	.word	0x0801abfd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ab60:	4a54      	ldr	r2, [pc, #336]	; (801acb4 <RadioSend+0x1ec>)
 801ab62:	78fb      	ldrb	r3, [r7, #3]
 801ab64:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab66:	4854      	ldr	r0, [pc, #336]	; (801acb8 <RadioSend+0x1f0>)
 801ab68:	f001 ff8a 	bl	801ca80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ab6c:	78fb      	ldrb	r3, [r7, #3]
 801ab6e:	2200      	movs	r2, #0
 801ab70:	4619      	mov	r1, r3
 801ab72:	6878      	ldr	r0, [r7, #4]
 801ab74:	f001 fa3a 	bl	801bfec <SUBGRF_SendPayload>
            break;
 801ab78:	e08d      	b.n	801ac96 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ab7a:	f002 fbb6 	bl	801d2ea <RFW_Is_Init>
 801ab7e:	4603      	mov	r3, r0
 801ab80:	2b01      	cmp	r3, #1
 801ab82:	d11e      	bne.n	801abc2 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ab84:	f107 020d 	add.w	r2, r7, #13
 801ab88:	78fb      	ldrb	r3, [r7, #3]
 801ab8a:	4619      	mov	r1, r3
 801ab8c:	6878      	ldr	r0, [r7, #4]
 801ab8e:	f002 fbc4 	bl	801d31a <RFW_TransmitInit>
 801ab92:	4603      	mov	r3, r0
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	d10c      	bne.n	801abb2 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ab98:	7b7a      	ldrb	r2, [r7, #13]
 801ab9a:	4b46      	ldr	r3, [pc, #280]	; (801acb4 <RadioSend+0x1ec>)
 801ab9c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab9e:	4846      	ldr	r0, [pc, #280]	; (801acb8 <RadioSend+0x1f0>)
 801aba0:	f001 ff6e 	bl	801ca80 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801aba4:	7b7b      	ldrb	r3, [r7, #13]
 801aba6:	2200      	movs	r2, #0
 801aba8:	4619      	mov	r1, r3
 801abaa:	6878      	ldr	r0, [r7, #4]
 801abac:	f001 fa1e 	bl	801bfec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801abb0:	e071      	b.n	801ac96 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801abb2:	4b42      	ldr	r3, [pc, #264]	; (801acbc <RadioSend+0x1f4>)
 801abb4:	2201      	movs	r2, #1
 801abb6:	2100      	movs	r1, #0
 801abb8:	2002      	movs	r0, #2
 801abba:	f003 fccf 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801abbe:	2303      	movs	r3, #3
 801abc0:	e073      	b.n	801acaa <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801abc2:	4a3c      	ldr	r2, [pc, #240]	; (801acb4 <RadioSend+0x1ec>)
 801abc4:	78fb      	ldrb	r3, [r7, #3]
 801abc6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abc8:	483b      	ldr	r0, [pc, #236]	; (801acb8 <RadioSend+0x1f0>)
 801abca:	f001 ff59 	bl	801ca80 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801abce:	78fb      	ldrb	r3, [r7, #3]
 801abd0:	2200      	movs	r2, #0
 801abd2:	4619      	mov	r1, r3
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f001 fa09 	bl	801bfec <SUBGRF_SendPayload>
            break;
 801abda:	e05c      	b.n	801ac96 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801abdc:	4b35      	ldr	r3, [pc, #212]	; (801acb4 <RadioSend+0x1ec>)
 801abde:	2202      	movs	r2, #2
 801abe0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801abe2:	4a34      	ldr	r2, [pc, #208]	; (801acb4 <RadioSend+0x1ec>)
 801abe4:	78fb      	ldrb	r3, [r7, #3]
 801abe6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abe8:	4833      	ldr	r0, [pc, #204]	; (801acb8 <RadioSend+0x1f0>)
 801abea:	f001 ff49 	bl	801ca80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801abee:	78fb      	ldrb	r3, [r7, #3]
 801abf0:	2200      	movs	r2, #0
 801abf2:	4619      	mov	r1, r3
 801abf4:	6878      	ldr	r0, [r7, #4]
 801abf6:	f001 f9f9 	bl	801bfec <SUBGRF_SendPayload>
            break;
 801abfa:	e04c      	b.n	801ac96 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801abfc:	78fb      	ldrb	r3, [r7, #3]
 801abfe:	461a      	mov	r2, r3
 801ac00:	6879      	ldr	r1, [r7, #4]
 801ac02:	482f      	ldr	r0, [pc, #188]	; (801acc0 <RadioSend+0x1f8>)
 801ac04:	f000 fccc 	bl	801b5a0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ac08:	4b2a      	ldr	r3, [pc, #168]	; (801acb4 <RadioSend+0x1ec>)
 801ac0a:	2202      	movs	r2, #2
 801ac0c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801ac0e:	78fb      	ldrb	r3, [r7, #3]
 801ac10:	3301      	adds	r3, #1
 801ac12:	b2da      	uxtb	r2, r3
 801ac14:	4b27      	ldr	r3, [pc, #156]	; (801acb4 <RadioSend+0x1ec>)
 801ac16:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac18:	4827      	ldr	r0, [pc, #156]	; (801acb8 <RadioSend+0x1f0>)
 801ac1a:	f001 ff31 	bl	801ca80 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801ac1e:	2100      	movs	r1, #0
 801ac20:	20f1      	movs	r0, #241	; 0xf1
 801ac22:	f000 f966 	bl	801aef2 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801ac26:	2100      	movs	r1, #0
 801ac28:	20f0      	movs	r0, #240	; 0xf0
 801ac2a:	f000 f962 	bl	801aef2 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801ac2e:	4b21      	ldr	r3, [pc, #132]	; (801acb4 <RadioSend+0x1ec>)
 801ac30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac32:	2b64      	cmp	r3, #100	; 0x64
 801ac34:	d108      	bne.n	801ac48 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801ac36:	2170      	movs	r1, #112	; 0x70
 801ac38:	20f3      	movs	r0, #243	; 0xf3
 801ac3a:	f000 f95a 	bl	801aef2 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801ac3e:	211d      	movs	r1, #29
 801ac40:	20f2      	movs	r0, #242	; 0xf2
 801ac42:	f000 f956 	bl	801aef2 <RadioWrite>
 801ac46:	e007      	b.n	801ac58 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801ac48:	21e1      	movs	r1, #225	; 0xe1
 801ac4a:	20f3      	movs	r0, #243	; 0xf3
 801ac4c:	f000 f951 	bl	801aef2 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801ac50:	2104      	movs	r1, #4
 801ac52:	20f2      	movs	r0, #242	; 0xf2
 801ac54:	f000 f94d 	bl	801aef2 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801ac58:	78fb      	ldrb	r3, [r7, #3]
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	00db      	lsls	r3, r3, #3
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	3302      	adds	r3, #2
 801ac62:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801ac64:	89fb      	ldrh	r3, [r7, #14]
 801ac66:	0a1b      	lsrs	r3, r3, #8
 801ac68:	b29b      	uxth	r3, r3
 801ac6a:	b2db      	uxtb	r3, r3
 801ac6c:	4619      	mov	r1, r3
 801ac6e:	20f4      	movs	r0, #244	; 0xf4
 801ac70:	f000 f93f 	bl	801aef2 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801ac74:	89fb      	ldrh	r3, [r7, #14]
 801ac76:	b2db      	uxtb	r3, r3
 801ac78:	4619      	mov	r1, r3
 801ac7a:	20f5      	movs	r0, #245	; 0xf5
 801ac7c:	f000 f939 	bl	801aef2 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801ac80:	78fb      	ldrb	r3, [r7, #3]
 801ac82:	3301      	adds	r3, #1
 801ac84:	b2db      	uxtb	r3, r3
 801ac86:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801ac8a:	4619      	mov	r1, r3
 801ac8c:	480c      	ldr	r0, [pc, #48]	; (801acc0 <RadioSend+0x1f8>)
 801ac8e:	f001 f9ad 	bl	801bfec <SUBGRF_SendPayload>
            break;
 801ac92:	e000      	b.n	801ac96 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ac94:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801ac96:	4b07      	ldr	r3, [pc, #28]	; (801acb4 <RadioSend+0x1ec>)
 801ac98:	685b      	ldr	r3, [r3, #4]
 801ac9a:	4619      	mov	r1, r3
 801ac9c:	4809      	ldr	r0, [pc, #36]	; (801acc4 <RadioSend+0x1fc>)
 801ac9e:	f003 fac3 	bl	801e228 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801aca2:	4808      	ldr	r0, [pc, #32]	; (801acc4 <RadioSend+0x1fc>)
 801aca4:	f003 f9e2 	bl	801e06c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801aca8:	2300      	movs	r3, #0
}
 801acaa:	4618      	mov	r0, r3
 801acac:	3710      	adds	r7, #16
 801acae:	46bd      	mov	sp, r7
 801acb0:	bd80      	pop	{r7, pc}
 801acb2:	bf00      	nop
 801acb4:	20001830 	.word	0x20001830
 801acb8:	2000183e 	.word	0x2000183e
 801acbc:	0801f430 	.word	0x0801f430
 801acc0:	2000172c 	.word	0x2000172c
 801acc4:	2000188c 	.word	0x2000188c

0801acc8 <RadioSleep>:

static void RadioSleep( void )
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b082      	sub	sp, #8
 801accc:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801acce:	2300      	movs	r3, #0
 801acd0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801acd2:	793b      	ldrb	r3, [r7, #4]
 801acd4:	f043 0304 	orr.w	r3, r3, #4
 801acd8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801acda:	7938      	ldrb	r0, [r7, #4]
 801acdc:	f001 fa62 	bl	801c1a4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801ace0:	2002      	movs	r0, #2
 801ace2:	f7e7 ffb9 	bl	8002c58 <HAL_Delay>
}
 801ace6:	bf00      	nop
 801ace8:	3708      	adds	r7, #8
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}

0801acee <RadioStandby>:

static void RadioStandby( void )
{
 801acee:	b580      	push	{r7, lr}
 801acf0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801acf2:	2000      	movs	r0, #0
 801acf4:	f001 fa88 	bl	801c208 <SUBGRF_SetStandby>
}
 801acf8:	bf00      	nop
 801acfa:	bd80      	pop	{r7, pc}

0801acfc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801acfc:	b580      	push	{r7, lr}
 801acfe:	b082      	sub	sp, #8
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801ad04:	f002 faf1 	bl	801d2ea <RFW_Is_Init>
 801ad08:	4603      	mov	r3, r0
 801ad0a:	2b01      	cmp	r3, #1
 801ad0c:	d102      	bne.n	801ad14 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801ad0e:	f002 fb14 	bl	801d33a <RFW_ReceiveInit>
 801ad12:	e007      	b.n	801ad24 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad14:	2300      	movs	r3, #0
 801ad16:	2200      	movs	r2, #0
 801ad18:	f240 2162 	movw	r1, #610	; 0x262
 801ad1c:	f240 2062 	movw	r0, #610	; 0x262
 801ad20:	f001 fc46 	bl	801c5b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d006      	beq.n	801ad38 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad2a:	6879      	ldr	r1, [r7, #4]
 801ad2c:	4811      	ldr	r0, [pc, #68]	; (801ad74 <RadioRx+0x78>)
 801ad2e:	f003 fa7b 	bl	801e228 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad32:	4810      	ldr	r0, [pc, #64]	; (801ad74 <RadioRx+0x78>)
 801ad34:	f003 f99a 	bl	801e06c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ad38:	4b0f      	ldr	r3, [pc, #60]	; (801ad78 <RadioRx+0x7c>)
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ad3e:	4b0e      	ldr	r3, [pc, #56]	; (801ad78 <RadioRx+0x7c>)
 801ad40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad44:	2100      	movs	r1, #0
 801ad46:	4618      	mov	r0, r3
 801ad48:	f002 f8d6 	bl	801cef8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801ad4c:	4b0a      	ldr	r3, [pc, #40]	; (801ad78 <RadioRx+0x7c>)
 801ad4e:	785b      	ldrb	r3, [r3, #1]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d004      	beq.n	801ad5e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ad54:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad58:	f001 fa92 	bl	801c280 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ad5c:	e005      	b.n	801ad6a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ad5e:	4b06      	ldr	r3, [pc, #24]	; (801ad78 <RadioRx+0x7c>)
 801ad60:	689b      	ldr	r3, [r3, #8]
 801ad62:	019b      	lsls	r3, r3, #6
 801ad64:	4618      	mov	r0, r3
 801ad66:	f001 fa8b 	bl	801c280 <SUBGRF_SetRx>
}
 801ad6a:	bf00      	nop
 801ad6c:	3708      	adds	r7, #8
 801ad6e:	46bd      	mov	sp, r7
 801ad70:	bd80      	pop	{r7, pc}
 801ad72:	bf00      	nop
 801ad74:	200018a4 	.word	0x200018a4
 801ad78:	20001830 	.word	0x20001830

0801ad7c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b082      	sub	sp, #8
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801ad84:	f002 fab1 	bl	801d2ea <RFW_Is_Init>
 801ad88:	4603      	mov	r3, r0
 801ad8a:	2b01      	cmp	r3, #1
 801ad8c:	d102      	bne.n	801ad94 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801ad8e:	f002 fad4 	bl	801d33a <RFW_ReceiveInit>
 801ad92:	e007      	b.n	801ada4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad94:	2300      	movs	r3, #0
 801ad96:	2200      	movs	r2, #0
 801ad98:	f240 2162 	movw	r1, #610	; 0x262
 801ad9c:	f240 2062 	movw	r0, #610	; 0x262
 801ada0:	f001 fc06 	bl	801c5b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d006      	beq.n	801adb8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801adaa:	6879      	ldr	r1, [r7, #4]
 801adac:	4811      	ldr	r0, [pc, #68]	; (801adf4 <RadioRxBoosted+0x78>)
 801adae:	f003 fa3b 	bl	801e228 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801adb2:	4810      	ldr	r0, [pc, #64]	; (801adf4 <RadioRxBoosted+0x78>)
 801adb4:	f003 f95a 	bl	801e06c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801adb8:	4b0f      	ldr	r3, [pc, #60]	; (801adf8 <RadioRxBoosted+0x7c>)
 801adba:	2200      	movs	r2, #0
 801adbc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801adbe:	4b0e      	ldr	r3, [pc, #56]	; (801adf8 <RadioRxBoosted+0x7c>)
 801adc0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801adc4:	2100      	movs	r1, #0
 801adc6:	4618      	mov	r0, r3
 801adc8:	f002 f896 	bl	801cef8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801adcc:	4b0a      	ldr	r3, [pc, #40]	; (801adf8 <RadioRxBoosted+0x7c>)
 801adce:	785b      	ldrb	r3, [r3, #1]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d004      	beq.n	801adde <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801add4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801add8:	f001 fa72 	bl	801c2c0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801addc:	e005      	b.n	801adea <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801adde:	4b06      	ldr	r3, [pc, #24]	; (801adf8 <RadioRxBoosted+0x7c>)
 801ade0:	689b      	ldr	r3, [r3, #8]
 801ade2:	019b      	lsls	r3, r3, #6
 801ade4:	4618      	mov	r0, r3
 801ade6:	f001 fa6b 	bl	801c2c0 <SUBGRF_SetRxBoosted>
}
 801adea:	bf00      	nop
 801adec:	3708      	adds	r7, #8
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}
 801adf2:	bf00      	nop
 801adf4:	200018a4 	.word	0x200018a4
 801adf8:	20001830 	.word	0x20001830

0801adfc <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
 801ae04:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	005a      	lsls	r2, r3, #1
 801ae0a:	683b      	ldr	r3, [r7, #0]
 801ae0c:	4413      	add	r3, r2
 801ae0e:	4a0c      	ldr	r2, [pc, #48]	; (801ae40 <RadioSetRxDutyCycle+0x44>)
 801ae10:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801ae12:	2300      	movs	r3, #0
 801ae14:	2200      	movs	r2, #0
 801ae16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae1e:	f001 fbc7 	bl	801c5b0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae22:	4b07      	ldr	r3, [pc, #28]	; (801ae40 <RadioSetRxDutyCycle+0x44>)
 801ae24:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae28:	2100      	movs	r1, #0
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	f002 f864 	bl	801cef8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801ae30:	6839      	ldr	r1, [r7, #0]
 801ae32:	6878      	ldr	r0, [r7, #4]
 801ae34:	f001 fa68 	bl	801c308 <SUBGRF_SetRxDutyCycle>
}
 801ae38:	bf00      	nop
 801ae3a:	3708      	adds	r7, #8
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	bd80      	pop	{r7, pc}
 801ae40:	20001830 	.word	0x20001830

0801ae44 <RadioStartCad>:

static void RadioStartCad( void )
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae48:	4b09      	ldr	r3, [pc, #36]	; (801ae70 <RadioStartCad+0x2c>)
 801ae4a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae4e:	2100      	movs	r1, #0
 801ae50:	4618      	mov	r0, r3
 801ae52:	f002 f851 	bl	801cef8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801ae56:	2300      	movs	r3, #0
 801ae58:	2200      	movs	r2, #0
 801ae5a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ae5e:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801ae62:	f001 fba5 	bl	801c5b0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801ae66:	f001 fa7b 	bl	801c360 <SUBGRF_SetCad>
}
 801ae6a:	bf00      	nop
 801ae6c:	bd80      	pop	{r7, pc}
 801ae6e:	bf00      	nop
 801ae70:	20001830 	.word	0x20001830

0801ae74 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b084      	sub	sp, #16
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
 801ae7c:	460b      	mov	r3, r1
 801ae7e:	70fb      	strb	r3, [r7, #3]
 801ae80:	4613      	mov	r3, r2
 801ae82:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801ae84:	883b      	ldrh	r3, [r7, #0]
 801ae86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ae8a:	fb02 f303 	mul.w	r3, r2, r3
 801ae8e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f001 fbe9 	bl	801c668 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801ae96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f002 f854 	bl	801cf48 <SUBGRF_SetRfTxPower>
 801aea0:	4603      	mov	r3, r0
 801aea2:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aea4:	210e      	movs	r1, #14
 801aea6:	f640 101f 	movw	r0, #2335	; 0x91f
 801aeaa:	f001 ff31 	bl	801cd10 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801aeae:	7afb      	ldrb	r3, [r7, #11]
 801aeb0:	2101      	movs	r1, #1
 801aeb2:	4618      	mov	r0, r3
 801aeb4:	f002 f820 	bl	801cef8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801aeb8:	f001 fa60 	bl	801c37c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801aebc:	68f9      	ldr	r1, [r7, #12]
 801aebe:	4805      	ldr	r0, [pc, #20]	; (801aed4 <RadioSetTxContinuousWave+0x60>)
 801aec0:	f003 f9b2 	bl	801e228 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801aec4:	4803      	ldr	r0, [pc, #12]	; (801aed4 <RadioSetTxContinuousWave+0x60>)
 801aec6:	f003 f8d1 	bl	801e06c <UTIL_TIMER_Start>
}
 801aeca:	bf00      	nop
 801aecc:	3710      	adds	r7, #16
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	bf00      	nop
 801aed4:	2000188c 	.word	0x2000188c

0801aed8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b082      	sub	sp, #8
 801aedc:	af00      	add	r7, sp, #0
 801aede:	4603      	mov	r3, r0
 801aee0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801aee2:	f001 fe82 	bl	801cbea <SUBGRF_GetRssiInst>
 801aee6:	4603      	mov	r3, r0
 801aee8:	b21b      	sxth	r3, r3
}
 801aeea:	4618      	mov	r0, r3
 801aeec:	3708      	adds	r7, #8
 801aeee:	46bd      	mov	sp, r7
 801aef0:	bd80      	pop	{r7, pc}

0801aef2 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801aef2:	b580      	push	{r7, lr}
 801aef4:	b082      	sub	sp, #8
 801aef6:	af00      	add	r7, sp, #0
 801aef8:	4603      	mov	r3, r0
 801aefa:	460a      	mov	r2, r1
 801aefc:	80fb      	strh	r3, [r7, #6]
 801aefe:	4613      	mov	r3, r2
 801af00:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801af02:	797a      	ldrb	r2, [r7, #5]
 801af04:	88fb      	ldrh	r3, [r7, #6]
 801af06:	4611      	mov	r1, r2
 801af08:	4618      	mov	r0, r3
 801af0a:	f001 ff01 	bl	801cd10 <SUBGRF_WriteRegister>
}
 801af0e:	bf00      	nop
 801af10:	3708      	adds	r7, #8
 801af12:	46bd      	mov	sp, r7
 801af14:	bd80      	pop	{r7, pc}

0801af16 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801af16:	b580      	push	{r7, lr}
 801af18:	b082      	sub	sp, #8
 801af1a:	af00      	add	r7, sp, #0
 801af1c:	4603      	mov	r3, r0
 801af1e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801af20:	88fb      	ldrh	r3, [r7, #6]
 801af22:	4618      	mov	r0, r3
 801af24:	f001 ff08 	bl	801cd38 <SUBGRF_ReadRegister>
 801af28:	4603      	mov	r3, r0
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3708      	adds	r7, #8
 801af2e:	46bd      	mov	sp, r7
 801af30:	bd80      	pop	{r7, pc}

0801af32 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af32:	b580      	push	{r7, lr}
 801af34:	b082      	sub	sp, #8
 801af36:	af00      	add	r7, sp, #0
 801af38:	4603      	mov	r3, r0
 801af3a:	6039      	str	r1, [r7, #0]
 801af3c:	80fb      	strh	r3, [r7, #6]
 801af3e:	4613      	mov	r3, r2
 801af40:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801af42:	797b      	ldrb	r3, [r7, #5]
 801af44:	b29a      	uxth	r2, r3
 801af46:	88fb      	ldrh	r3, [r7, #6]
 801af48:	6839      	ldr	r1, [r7, #0]
 801af4a:	4618      	mov	r0, r3
 801af4c:	f001 ff08 	bl	801cd60 <SUBGRF_WriteRegisters>
}
 801af50:	bf00      	nop
 801af52:	3708      	adds	r7, #8
 801af54:	46bd      	mov	sp, r7
 801af56:	bd80      	pop	{r7, pc}

0801af58 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af58:	b580      	push	{r7, lr}
 801af5a:	b082      	sub	sp, #8
 801af5c:	af00      	add	r7, sp, #0
 801af5e:	4603      	mov	r3, r0
 801af60:	6039      	str	r1, [r7, #0]
 801af62:	80fb      	strh	r3, [r7, #6]
 801af64:	4613      	mov	r3, r2
 801af66:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801af68:	797b      	ldrb	r3, [r7, #5]
 801af6a:	b29a      	uxth	r2, r3
 801af6c:	88fb      	ldrh	r3, [r7, #6]
 801af6e:	6839      	ldr	r1, [r7, #0]
 801af70:	4618      	mov	r0, r3
 801af72:	f001 ff17 	bl	801cda4 <SUBGRF_ReadRegisters>
}
 801af76:	bf00      	nop
 801af78:	3708      	adds	r7, #8
 801af7a:	46bd      	mov	sp, r7
 801af7c:	bd80      	pop	{r7, pc}
	...

0801af80 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b082      	sub	sp, #8
 801af84:	af00      	add	r7, sp, #0
 801af86:	4603      	mov	r3, r0
 801af88:	460a      	mov	r2, r1
 801af8a:	71fb      	strb	r3, [r7, #7]
 801af8c:	4613      	mov	r3, r2
 801af8e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801af90:	79fb      	ldrb	r3, [r7, #7]
 801af92:	2b01      	cmp	r3, #1
 801af94:	d10a      	bne.n	801afac <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801af96:	4a0e      	ldr	r2, [pc, #56]	; (801afd0 <RadioSetMaxPayloadLength+0x50>)
 801af98:	79bb      	ldrb	r3, [r7, #6]
 801af9a:	7013      	strb	r3, [r2, #0]
 801af9c:	4b0c      	ldr	r3, [pc, #48]	; (801afd0 <RadioSetMaxPayloadLength+0x50>)
 801af9e:	781a      	ldrb	r2, [r3, #0]
 801afa0:	4b0c      	ldr	r3, [pc, #48]	; (801afd4 <RadioSetMaxPayloadLength+0x54>)
 801afa2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afa4:	480c      	ldr	r0, [pc, #48]	; (801afd8 <RadioSetMaxPayloadLength+0x58>)
 801afa6:	f001 fd6b 	bl	801ca80 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801afaa:	e00d      	b.n	801afc8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801afac:	4b09      	ldr	r3, [pc, #36]	; (801afd4 <RadioSetMaxPayloadLength+0x54>)
 801afae:	7d5b      	ldrb	r3, [r3, #21]
 801afb0:	2b01      	cmp	r3, #1
 801afb2:	d109      	bne.n	801afc8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801afb4:	4a06      	ldr	r2, [pc, #24]	; (801afd0 <RadioSetMaxPayloadLength+0x50>)
 801afb6:	79bb      	ldrb	r3, [r7, #6]
 801afb8:	7013      	strb	r3, [r2, #0]
 801afba:	4b05      	ldr	r3, [pc, #20]	; (801afd0 <RadioSetMaxPayloadLength+0x50>)
 801afbc:	781a      	ldrb	r2, [r3, #0]
 801afbe:	4b05      	ldr	r3, [pc, #20]	; (801afd4 <RadioSetMaxPayloadLength+0x54>)
 801afc0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afc2:	4805      	ldr	r0, [pc, #20]	; (801afd8 <RadioSetMaxPayloadLength+0x58>)
 801afc4:	f001 fd5c 	bl	801ca80 <SUBGRF_SetPacketParams>
}
 801afc8:	bf00      	nop
 801afca:	3708      	adds	r7, #8
 801afcc:	46bd      	mov	sp, r7
 801afce:	bd80      	pop	{r7, pc}
 801afd0:	20000154 	.word	0x20000154
 801afd4:	20001830 	.word	0x20001830
 801afd8:	2000183e 	.word	0x2000183e

0801afdc <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b082      	sub	sp, #8
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	4603      	mov	r3, r0
 801afe4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801afe6:	4a13      	ldr	r2, [pc, #76]	; (801b034 <RadioSetPublicNetwork+0x58>)
 801afe8:	79fb      	ldrb	r3, [r7, #7]
 801afea:	7313      	strb	r3, [r2, #12]
 801afec:	4b11      	ldr	r3, [pc, #68]	; (801b034 <RadioSetPublicNetwork+0x58>)
 801afee:	7b1a      	ldrb	r2, [r3, #12]
 801aff0:	4b10      	ldr	r3, [pc, #64]	; (801b034 <RadioSetPublicNetwork+0x58>)
 801aff2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801aff4:	2001      	movs	r0, #1
 801aff6:	f7ff f811 	bl	801a01c <RadioSetModem>
    if( enable == true )
 801affa:	79fb      	ldrb	r3, [r7, #7]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d00a      	beq.n	801b016 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b000:	2134      	movs	r1, #52	; 0x34
 801b002:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b006:	f001 fe83 	bl	801cd10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b00a:	2144      	movs	r1, #68	; 0x44
 801b00c:	f240 7041 	movw	r0, #1857	; 0x741
 801b010:	f001 fe7e 	bl	801cd10 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b014:	e009      	b.n	801b02a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b016:	2114      	movs	r1, #20
 801b018:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b01c:	f001 fe78 	bl	801cd10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b020:	2124      	movs	r1, #36	; 0x24
 801b022:	f240 7041 	movw	r0, #1857	; 0x741
 801b026:	f001 fe73 	bl	801cd10 <SUBGRF_WriteRegister>
}
 801b02a:	bf00      	nop
 801b02c:	3708      	adds	r7, #8
 801b02e:	46bd      	mov	sp, r7
 801b030:	bd80      	pop	{r7, pc}
 801b032:	bf00      	nop
 801b034:	20001830 	.word	0x20001830

0801b038 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b038:	b580      	push	{r7, lr}
 801b03a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b03c:	f001 ffb8 	bl	801cfb0 <SUBGRF_GetRadioWakeUpTime>
 801b040:	4603      	mov	r3, r0
 801b042:	3303      	adds	r3, #3
}
 801b044:	4618      	mov	r0, r3
 801b046:	bd80      	pop	{r7, pc}

0801b048 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b082      	sub	sp, #8
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b050:	f000 f80e 	bl	801b070 <RadioOnTxTimeoutProcess>
}
 801b054:	bf00      	nop
 801b056:	3708      	adds	r7, #8
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}

0801b05c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	b082      	sub	sp, #8
 801b060:	af00      	add	r7, sp, #0
 801b062:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b064:	f000 f818 	bl	801b098 <RadioOnRxTimeoutProcess>
}
 801b068:	bf00      	nop
 801b06a:	3708      	adds	r7, #8
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}

0801b070 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b070:	b580      	push	{r7, lr}
 801b072:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b074:	4b07      	ldr	r3, [pc, #28]	; (801b094 <RadioOnTxTimeoutProcess+0x24>)
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d008      	beq.n	801b08e <RadioOnTxTimeoutProcess+0x1e>
 801b07c:	4b05      	ldr	r3, [pc, #20]	; (801b094 <RadioOnTxTimeoutProcess+0x24>)
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	685b      	ldr	r3, [r3, #4]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d003      	beq.n	801b08e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b086:	4b03      	ldr	r3, [pc, #12]	; (801b094 <RadioOnTxTimeoutProcess+0x24>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	685b      	ldr	r3, [r3, #4]
 801b08c:	4798      	blx	r3
    }
}
 801b08e:	bf00      	nop
 801b090:	bd80      	pop	{r7, pc}
 801b092:	bf00      	nop
 801b094:	2000182c 	.word	0x2000182c

0801b098 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b09c:	4b07      	ldr	r3, [pc, #28]	; (801b0bc <RadioOnRxTimeoutProcess+0x24>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d008      	beq.n	801b0b6 <RadioOnRxTimeoutProcess+0x1e>
 801b0a4:	4b05      	ldr	r3, [pc, #20]	; (801b0bc <RadioOnRxTimeoutProcess+0x24>)
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	68db      	ldr	r3, [r3, #12]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d003      	beq.n	801b0b6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b0ae:	4b03      	ldr	r3, [pc, #12]	; (801b0bc <RadioOnRxTimeoutProcess+0x24>)
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	68db      	ldr	r3, [r3, #12]
 801b0b4:	4798      	blx	r3
    }
}
 801b0b6:	bf00      	nop
 801b0b8:	bd80      	pop	{r7, pc}
 801b0ba:	bf00      	nop
 801b0bc:	2000182c 	.word	0x2000182c

0801b0c0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b082      	sub	sp, #8
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b0ca:	4a05      	ldr	r2, [pc, #20]	; (801b0e0 <RadioOnDioIrq+0x20>)
 801b0cc:	88fb      	ldrh	r3, [r7, #6]
 801b0ce:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b0d2:	f000 f807 	bl	801b0e4 <RadioIrqProcess>
}
 801b0d6:	bf00      	nop
 801b0d8:	3708      	adds	r7, #8
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}
 801b0de:	bf00      	nop
 801b0e0:	20001830 	.word	0x20001830

0801b0e4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b0e4:	b5b0      	push	{r4, r5, r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b0f2:	4ba8      	ldr	r3, [pc, #672]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b0f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b0f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0fc:	f000 810d 	beq.w	801b31a <RadioIrqProcess+0x236>
 801b100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b104:	f300 81e8 	bgt.w	801b4d8 <RadioIrqProcess+0x3f4>
 801b108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b10c:	f000 80f1 	beq.w	801b2f2 <RadioIrqProcess+0x20e>
 801b110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b114:	f300 81e0 	bgt.w	801b4d8 <RadioIrqProcess+0x3f4>
 801b118:	2b80      	cmp	r3, #128	; 0x80
 801b11a:	f000 80d6 	beq.w	801b2ca <RadioIrqProcess+0x1e6>
 801b11e:	2b80      	cmp	r3, #128	; 0x80
 801b120:	f300 81da 	bgt.w	801b4d8 <RadioIrqProcess+0x3f4>
 801b124:	2b20      	cmp	r3, #32
 801b126:	dc49      	bgt.n	801b1bc <RadioIrqProcess+0xd8>
 801b128:	2b00      	cmp	r3, #0
 801b12a:	f340 81d5 	ble.w	801b4d8 <RadioIrqProcess+0x3f4>
 801b12e:	3b01      	subs	r3, #1
 801b130:	2b1f      	cmp	r3, #31
 801b132:	f200 81d1 	bhi.w	801b4d8 <RadioIrqProcess+0x3f4>
 801b136:	a201      	add	r2, pc, #4	; (adr r2, 801b13c <RadioIrqProcess+0x58>)
 801b138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b13c:	0801b1c5 	.word	0x0801b1c5
 801b140:	0801b1ff 	.word	0x0801b1ff
 801b144:	0801b4d9 	.word	0x0801b4d9
 801b148:	0801b3b5 	.word	0x0801b3b5
 801b14c:	0801b4d9 	.word	0x0801b4d9
 801b150:	0801b4d9 	.word	0x0801b4d9
 801b154:	0801b4d9 	.word	0x0801b4d9
 801b158:	0801b431 	.word	0x0801b431
 801b15c:	0801b4d9 	.word	0x0801b4d9
 801b160:	0801b4d9 	.word	0x0801b4d9
 801b164:	0801b4d9 	.word	0x0801b4d9
 801b168:	0801b4d9 	.word	0x0801b4d9
 801b16c:	0801b4d9 	.word	0x0801b4d9
 801b170:	0801b4d9 	.word	0x0801b4d9
 801b174:	0801b4d9 	.word	0x0801b4d9
 801b178:	0801b44d 	.word	0x0801b44d
 801b17c:	0801b4d9 	.word	0x0801b4d9
 801b180:	0801b4d9 	.word	0x0801b4d9
 801b184:	0801b4d9 	.word	0x0801b4d9
 801b188:	0801b4d9 	.word	0x0801b4d9
 801b18c:	0801b4d9 	.word	0x0801b4d9
 801b190:	0801b4d9 	.word	0x0801b4d9
 801b194:	0801b4d9 	.word	0x0801b4d9
 801b198:	0801b4d9 	.word	0x0801b4d9
 801b19c:	0801b4d9 	.word	0x0801b4d9
 801b1a0:	0801b4d9 	.word	0x0801b4d9
 801b1a4:	0801b4d9 	.word	0x0801b4d9
 801b1a8:	0801b4d9 	.word	0x0801b4d9
 801b1ac:	0801b4d9 	.word	0x0801b4d9
 801b1b0:	0801b4d9 	.word	0x0801b4d9
 801b1b4:	0801b4d9 	.word	0x0801b4d9
 801b1b8:	0801b45b 	.word	0x0801b45b
 801b1bc:	2b40      	cmp	r3, #64	; 0x40
 801b1be:	f000 816d 	beq.w	801b49c <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b1c2:	e189      	b.n	801b4d8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b1c4:	4874      	ldr	r0, [pc, #464]	; (801b398 <RadioIrqProcess+0x2b4>)
 801b1c6:	f002 ffbf 	bl	801e148 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b1ca:	2000      	movs	r0, #0
 801b1cc:	f001 f81c 	bl	801c208 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b1d0:	f002 f892 	bl	801d2f8 <RFW_Is_LongPacketModeEnabled>
 801b1d4:	4603      	mov	r3, r0
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d101      	bne.n	801b1de <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b1da:	f002 f8b6 	bl	801d34a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b1de:	4b6f      	ldr	r3, [pc, #444]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	f000 817a 	beq.w	801b4dc <RadioIrqProcess+0x3f8>
 801b1e8:	4b6c      	ldr	r3, [pc, #432]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	f000 8174 	beq.w	801b4dc <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b1f4:	4b69      	ldr	r3, [pc, #420]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	4798      	blx	r3
        break;
 801b1fc:	e16e      	b.n	801b4dc <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b1fe:	4868      	ldr	r0, [pc, #416]	; (801b3a0 <RadioIrqProcess+0x2bc>)
 801b200:	f002 ffa2 	bl	801e148 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b204:	4b63      	ldr	r3, [pc, #396]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b206:	785b      	ldrb	r3, [r3, #1]
 801b208:	f083 0301 	eor.w	r3, r3, #1
 801b20c:	b2db      	uxtb	r3, r3
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d014      	beq.n	801b23c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b212:	2000      	movs	r0, #0
 801b214:	f000 fff8 	bl	801c208 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b218:	2100      	movs	r1, #0
 801b21a:	f640 1002 	movw	r0, #2306	; 0x902
 801b21e:	f001 fd77 	bl	801cd10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b222:	f640 1044 	movw	r0, #2372	; 0x944
 801b226:	f001 fd87 	bl	801cd38 <SUBGRF_ReadRegister>
 801b22a:	4603      	mov	r3, r0
 801b22c:	f043 0302 	orr.w	r3, r3, #2
 801b230:	b2db      	uxtb	r3, r3
 801b232:	4619      	mov	r1, r3
 801b234:	f640 1044 	movw	r0, #2372	; 0x944
 801b238:	f001 fd6a 	bl	801cd10 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b23c:	1dfb      	adds	r3, r7, #7
 801b23e:	22ff      	movs	r2, #255	; 0xff
 801b240:	4619      	mov	r1, r3
 801b242:	4858      	ldr	r0, [pc, #352]	; (801b3a4 <RadioIrqProcess+0x2c0>)
 801b244:	f000 feb0 	bl	801bfa8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b248:	4857      	ldr	r0, [pc, #348]	; (801b3a8 <RadioIrqProcess+0x2c4>)
 801b24a:	f001 fd0f 	bl	801cc6c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b24e:	4b53      	ldr	r3, [pc, #332]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	2b00      	cmp	r3, #0
 801b254:	f000 8144 	beq.w	801b4e0 <RadioIrqProcess+0x3fc>
 801b258:	4b50      	ldr	r3, [pc, #320]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	689b      	ldr	r3, [r3, #8]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	f000 813e 	beq.w	801b4e0 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b264:	4b4b      	ldr	r3, [pc, #300]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b266:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b26a:	2b01      	cmp	r3, #1
 801b26c:	d10e      	bne.n	801b28c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b26e:	4b4b      	ldr	r3, [pc, #300]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	689c      	ldr	r4, [r3, #8]
 801b274:	79fb      	ldrb	r3, [r7, #7]
 801b276:	b299      	uxth	r1, r3
 801b278:	4b46      	ldr	r3, [pc, #280]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b27a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b27e:	b21a      	sxth	r2, r3
 801b280:	4b44      	ldr	r3, [pc, #272]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b282:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b286:	4847      	ldr	r0, [pc, #284]	; (801b3a4 <RadioIrqProcess+0x2c0>)
 801b288:	47a0      	blx	r4
                break;
 801b28a:	e01d      	b.n	801b2c8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b28c:	4b41      	ldr	r3, [pc, #260]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b290:	463a      	mov	r2, r7
 801b292:	4611      	mov	r1, r2
 801b294:	4618      	mov	r0, r3
 801b296:	f001 ff7d 	bl	801d194 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b29a:	4b40      	ldr	r3, [pc, #256]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	689c      	ldr	r4, [r3, #8]
 801b2a0:	79fb      	ldrb	r3, [r7, #7]
 801b2a2:	b299      	uxth	r1, r3
 801b2a4:	4b3b      	ldr	r3, [pc, #236]	; (801b394 <RadioIrqProcess+0x2b0>)
 801b2a6:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b2aa:	b218      	sxth	r0, r3
 801b2ac:	683b      	ldr	r3, [r7, #0]
 801b2ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b2b2:	4a3e      	ldr	r2, [pc, #248]	; (801b3ac <RadioIrqProcess+0x2c8>)
 801b2b4:	fb82 5203 	smull	r5, r2, r2, r3
 801b2b8:	1192      	asrs	r2, r2, #6
 801b2ba:	17db      	asrs	r3, r3, #31
 801b2bc:	1ad3      	subs	r3, r2, r3
 801b2be:	b25b      	sxtb	r3, r3
 801b2c0:	4602      	mov	r2, r0
 801b2c2:	4838      	ldr	r0, [pc, #224]	; (801b3a4 <RadioIrqProcess+0x2c0>)
 801b2c4:	47a0      	blx	r4
                break;
 801b2c6:	bf00      	nop
        break;
 801b2c8:	e10a      	b.n	801b4e0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b2ca:	2000      	movs	r0, #0
 801b2cc:	f000 ff9c 	bl	801c208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2d0:	4b32      	ldr	r3, [pc, #200]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	f000 8105 	beq.w	801b4e4 <RadioIrqProcess+0x400>
 801b2da:	4b30      	ldr	r3, [pc, #192]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	699b      	ldr	r3, [r3, #24]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	f000 80ff 	beq.w	801b4e4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b2e6:	4b2d      	ldr	r3, [pc, #180]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	699b      	ldr	r3, [r3, #24]
 801b2ec:	2000      	movs	r0, #0
 801b2ee:	4798      	blx	r3
        break;
 801b2f0:	e0f8      	b.n	801b4e4 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b2f2:	2000      	movs	r0, #0
 801b2f4:	f000 ff88 	bl	801c208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2f8:	4b28      	ldr	r3, [pc, #160]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	f000 80f3 	beq.w	801b4e8 <RadioIrqProcess+0x404>
 801b302:	4b26      	ldr	r3, [pc, #152]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	699b      	ldr	r3, [r3, #24]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	f000 80ed 	beq.w	801b4e8 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b30e:	4b23      	ldr	r3, [pc, #140]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	699b      	ldr	r3, [r3, #24]
 801b314:	2001      	movs	r0, #1
 801b316:	4798      	blx	r3
        break;
 801b318:	e0e6      	b.n	801b4e8 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b31a:	4b25      	ldr	r3, [pc, #148]	; (801b3b0 <RadioIrqProcess+0x2cc>)
 801b31c:	2201      	movs	r2, #1
 801b31e:	2100      	movs	r1, #0
 801b320:	2002      	movs	r0, #2
 801b322:	f003 f91b 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b326:	f000 fe25 	bl	801bf74 <SUBGRF_GetOperatingMode>
 801b32a:	4603      	mov	r3, r0
 801b32c:	2b04      	cmp	r3, #4
 801b32e:	d115      	bne.n	801b35c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b330:	4819      	ldr	r0, [pc, #100]	; (801b398 <RadioIrqProcess+0x2b4>)
 801b332:	f002 ff09 	bl	801e148 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b336:	2000      	movs	r0, #0
 801b338:	f000 ff66 	bl	801c208 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b33c:	4b17      	ldr	r3, [pc, #92]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	2b00      	cmp	r3, #0
 801b342:	f000 80d3 	beq.w	801b4ec <RadioIrqProcess+0x408>
 801b346:	4b15      	ldr	r3, [pc, #84]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	685b      	ldr	r3, [r3, #4]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	f000 80cd 	beq.w	801b4ec <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b352:	4b12      	ldr	r3, [pc, #72]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	685b      	ldr	r3, [r3, #4]
 801b358:	4798      	blx	r3
        break;
 801b35a:	e0c7      	b.n	801b4ec <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b35c:	f000 fe0a 	bl	801bf74 <SUBGRF_GetOperatingMode>
 801b360:	4603      	mov	r3, r0
 801b362:	2b05      	cmp	r3, #5
 801b364:	f040 80c2 	bne.w	801b4ec <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b368:	480d      	ldr	r0, [pc, #52]	; (801b3a0 <RadioIrqProcess+0x2bc>)
 801b36a:	f002 feed 	bl	801e148 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b36e:	2000      	movs	r0, #0
 801b370:	f000 ff4a 	bl	801c208 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b374:	4b09      	ldr	r3, [pc, #36]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	f000 80b7 	beq.w	801b4ec <RadioIrqProcess+0x408>
 801b37e:	4b07      	ldr	r3, [pc, #28]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	68db      	ldr	r3, [r3, #12]
 801b384:	2b00      	cmp	r3, #0
 801b386:	f000 80b1 	beq.w	801b4ec <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b38a:	4b04      	ldr	r3, [pc, #16]	; (801b39c <RadioIrqProcess+0x2b8>)
 801b38c:	681b      	ldr	r3, [r3, #0]
 801b38e:	68db      	ldr	r3, [r3, #12]
 801b390:	4798      	blx	r3
        break;
 801b392:	e0ab      	b.n	801b4ec <RadioIrqProcess+0x408>
 801b394:	20001830 	.word	0x20001830
 801b398:	2000188c 	.word	0x2000188c
 801b39c:	2000182c 	.word	0x2000182c
 801b3a0:	200018a4 	.word	0x200018a4
 801b3a4:	2000172c 	.word	0x2000172c
 801b3a8:	20001854 	.word	0x20001854
 801b3ac:	10624dd3 	.word	0x10624dd3
 801b3b0:	0801f448 	.word	0x0801f448
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b3b4:	4b54      	ldr	r3, [pc, #336]	; (801b508 <RadioIrqProcess+0x424>)
 801b3b6:	2201      	movs	r2, #1
 801b3b8:	2100      	movs	r1, #0
 801b3ba:	2002      	movs	r0, #2
 801b3bc:	f003 f8ce 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b3c0:	4b52      	ldr	r3, [pc, #328]	; (801b50c <RadioIrqProcess+0x428>)
 801b3c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	f000 8093 	beq.w	801b4f0 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b3ca:	4a51      	ldr	r2, [pc, #324]	; (801b510 <RadioIrqProcess+0x42c>)
 801b3cc:	4b4f      	ldr	r3, [pc, #316]	; (801b50c <RadioIrqProcess+0x428>)
 801b3ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3d0:	0c1b      	lsrs	r3, r3, #16
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	4619      	mov	r1, r3
 801b3d6:	f640 1003 	movw	r0, #2307	; 0x903
 801b3da:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b3dc:	4a4c      	ldr	r2, [pc, #304]	; (801b510 <RadioIrqProcess+0x42c>)
 801b3de:	4b4b      	ldr	r3, [pc, #300]	; (801b50c <RadioIrqProcess+0x428>)
 801b3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3e2:	0a1b      	lsrs	r3, r3, #8
 801b3e4:	b2db      	uxtb	r3, r3
 801b3e6:	4619      	mov	r1, r3
 801b3e8:	f640 1004 	movw	r0, #2308	; 0x904
 801b3ec:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b3ee:	4a48      	ldr	r2, [pc, #288]	; (801b510 <RadioIrqProcess+0x42c>)
 801b3f0:	4b46      	ldr	r3, [pc, #280]	; (801b50c <RadioIrqProcess+0x428>)
 801b3f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3f4:	b2db      	uxtb	r3, r3
 801b3f6:	4619      	mov	r1, r3
 801b3f8:	f640 1005 	movw	r0, #2309	; 0x905
 801b3fc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b3fe:	4c44      	ldr	r4, [pc, #272]	; (801b510 <RadioIrqProcess+0x42c>)
 801b400:	4b44      	ldr	r3, [pc, #272]	; (801b514 <RadioIrqProcess+0x430>)
 801b402:	f640 1002 	movw	r0, #2306	; 0x902
 801b406:	4798      	blx	r3
 801b408:	4603      	mov	r3, r0
 801b40a:	f043 0301 	orr.w	r3, r3, #1
 801b40e:	b2db      	uxtb	r3, r3
 801b410:	4619      	mov	r1, r3
 801b412:	f640 1002 	movw	r0, #2306	; 0x902
 801b416:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b418:	4b3c      	ldr	r3, [pc, #240]	; (801b50c <RadioIrqProcess+0x428>)
 801b41a:	2200      	movs	r2, #0
 801b41c:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b41e:	2300      	movs	r3, #0
 801b420:	2200      	movs	r2, #0
 801b422:	f240 2162 	movw	r1, #610	; 0x262
 801b426:	f240 2062 	movw	r0, #610	; 0x262
 801b42a:	f001 f8c1 	bl	801c5b0 <SUBGRF_SetDioIrqParams>
        break;
 801b42e:	e05f      	b.n	801b4f0 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b430:	4b39      	ldr	r3, [pc, #228]	; (801b518 <RadioIrqProcess+0x434>)
 801b432:	2201      	movs	r2, #1
 801b434:	2100      	movs	r1, #0
 801b436:	2002      	movs	r0, #2
 801b438:	f003 f890 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b43c:	f001 ff55 	bl	801d2ea <RFW_Is_Init>
 801b440:	4603      	mov	r3, r0
 801b442:	2b01      	cmp	r3, #1
 801b444:	d156      	bne.n	801b4f4 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b446:	f001 ff86 	bl	801d356 <RFW_ReceivePayload>
        break;
 801b44a:	e053      	b.n	801b4f4 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b44c:	4b33      	ldr	r3, [pc, #204]	; (801b51c <RadioIrqProcess+0x438>)
 801b44e:	2201      	movs	r2, #1
 801b450:	2100      	movs	r1, #0
 801b452:	2002      	movs	r0, #2
 801b454:	f003 f882 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b458:	e051      	b.n	801b4fe <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b45a:	4831      	ldr	r0, [pc, #196]	; (801b520 <RadioIrqProcess+0x43c>)
 801b45c:	f002 fe74 	bl	801e148 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b460:	4b2a      	ldr	r3, [pc, #168]	; (801b50c <RadioIrqProcess+0x428>)
 801b462:	785b      	ldrb	r3, [r3, #1]
 801b464:	f083 0301 	eor.w	r3, r3, #1
 801b468:	b2db      	uxtb	r3, r3
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d002      	beq.n	801b474 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b46e:	2000      	movs	r0, #0
 801b470:	f000 feca 	bl	801c208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b474:	4b2b      	ldr	r3, [pc, #172]	; (801b524 <RadioIrqProcess+0x440>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d03d      	beq.n	801b4f8 <RadioIrqProcess+0x414>
 801b47c:	4b29      	ldr	r3, [pc, #164]	; (801b524 <RadioIrqProcess+0x440>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	68db      	ldr	r3, [r3, #12]
 801b482:	2b00      	cmp	r3, #0
 801b484:	d038      	beq.n	801b4f8 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b486:	4b27      	ldr	r3, [pc, #156]	; (801b524 <RadioIrqProcess+0x440>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	68db      	ldr	r3, [r3, #12]
 801b48c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b48e:	4b26      	ldr	r3, [pc, #152]	; (801b528 <RadioIrqProcess+0x444>)
 801b490:	2201      	movs	r2, #1
 801b492:	2100      	movs	r1, #0
 801b494:	2002      	movs	r0, #2
 801b496:	f003 f861 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b49a:	e02d      	b.n	801b4f8 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b49c:	4b23      	ldr	r3, [pc, #140]	; (801b52c <RadioIrqProcess+0x448>)
 801b49e:	2201      	movs	r2, #1
 801b4a0:	2100      	movs	r1, #0
 801b4a2:	2002      	movs	r0, #2
 801b4a4:	f003 f85a 	bl	801e55c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b4a8:	4b18      	ldr	r3, [pc, #96]	; (801b50c <RadioIrqProcess+0x428>)
 801b4aa:	785b      	ldrb	r3, [r3, #1]
 801b4ac:	f083 0301 	eor.w	r3, r3, #1
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d002      	beq.n	801b4bc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b4b6:	2000      	movs	r0, #0
 801b4b8:	f000 fea6 	bl	801c208 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b4bc:	4b19      	ldr	r3, [pc, #100]	; (801b524 <RadioIrqProcess+0x440>)
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d01b      	beq.n	801b4fc <RadioIrqProcess+0x418>
 801b4c4:	4b17      	ldr	r3, [pc, #92]	; (801b524 <RadioIrqProcess+0x440>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	691b      	ldr	r3, [r3, #16]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d016      	beq.n	801b4fc <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b4ce:	4b15      	ldr	r3, [pc, #84]	; (801b524 <RadioIrqProcess+0x440>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	691b      	ldr	r3, [r3, #16]
 801b4d4:	4798      	blx	r3
        break;
 801b4d6:	e011      	b.n	801b4fc <RadioIrqProcess+0x418>
        break;
 801b4d8:	bf00      	nop
 801b4da:	e010      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4dc:	bf00      	nop
 801b4de:	e00e      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4e0:	bf00      	nop
 801b4e2:	e00c      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4e4:	bf00      	nop
 801b4e6:	e00a      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4e8:	bf00      	nop
 801b4ea:	e008      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4ec:	bf00      	nop
 801b4ee:	e006      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4f0:	bf00      	nop
 801b4f2:	e004      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4f4:	bf00      	nop
 801b4f6:	e002      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4f8:	bf00      	nop
 801b4fa:	e000      	b.n	801b4fe <RadioIrqProcess+0x41a>
        break;
 801b4fc:	bf00      	nop
    }
}
 801b4fe:	bf00      	nop
 801b500:	3708      	adds	r7, #8
 801b502:	46bd      	mov	sp, r7
 801b504:	bdb0      	pop	{r4, r5, r7, pc}
 801b506:	bf00      	nop
 801b508:	0801f45c 	.word	0x0801f45c
 801b50c:	20001830 	.word	0x20001830
 801b510:	0801aef3 	.word	0x0801aef3
 801b514:	0801af17 	.word	0x0801af17
 801b518:	0801f468 	.word	0x0801f468
 801b51c:	0801f474 	.word	0x0801f474
 801b520:	200018a4 	.word	0x200018a4
 801b524:	2000182c 	.word	0x2000182c
 801b528:	0801f480 	.word	0x0801f480
 801b52c:	0801f48c 	.word	0x0801f48c

0801b530 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b530:	b580      	push	{r7, lr}
 801b532:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b534:	4b09      	ldr	r3, [pc, #36]	; (801b55c <RadioTxPrbs+0x2c>)
 801b536:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b53a:	2101      	movs	r1, #1
 801b53c:	4618      	mov	r0, r3
 801b53e:	f001 fcdb 	bl	801cef8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b542:	4b07      	ldr	r3, [pc, #28]	; (801b560 <RadioTxPrbs+0x30>)
 801b544:	212d      	movs	r1, #45	; 0x2d
 801b546:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b54a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b54c:	f000 ff1f 	bl	801c38e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b550:	4804      	ldr	r0, [pc, #16]	; (801b564 <RadioTxPrbs+0x34>)
 801b552:	f000 fe75 	bl	801c240 <SUBGRF_SetTx>
}
 801b556:	bf00      	nop
 801b558:	bd80      	pop	{r7, pc}
 801b55a:	bf00      	nop
 801b55c:	20001830 	.word	0x20001830
 801b560:	0801aef3 	.word	0x0801aef3
 801b564:	000fffff 	.word	0x000fffff

0801b568 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b084      	sub	sp, #16
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	4603      	mov	r3, r0
 801b570:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b576:	4618      	mov	r0, r3
 801b578:	f001 fce6 	bl	801cf48 <SUBGRF_SetRfTxPower>
 801b57c:	4603      	mov	r3, r0
 801b57e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b580:	210e      	movs	r1, #14
 801b582:	f640 101f 	movw	r0, #2335	; 0x91f
 801b586:	f001 fbc3 	bl	801cd10 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b58a:	7bfb      	ldrb	r3, [r7, #15]
 801b58c:	2101      	movs	r1, #1
 801b58e:	4618      	mov	r0, r3
 801b590:	f001 fcb2 	bl	801cef8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b594:	f000 fef2 	bl	801c37c <SUBGRF_SetTxContinuousWave>
}
 801b598:	bf00      	nop
 801b59a:	3710      	adds	r7, #16
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bd80      	pop	{r7, pc}

0801b5a0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b5a0:	b480      	push	{r7}
 801b5a2:	b089      	sub	sp, #36	; 0x24
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	60f8      	str	r0, [r7, #12]
 801b5a8:	60b9      	str	r1, [r7, #8]
 801b5aa:	4613      	mov	r3, r2
 801b5ac:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	61bb      	str	r3, [r7, #24]
 801b5ba:	e011      	b.n	801b5e0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b5bc:	69bb      	ldr	r3, [r7, #24]
 801b5be:	68ba      	ldr	r2, [r7, #8]
 801b5c0:	4413      	add	r3, r2
 801b5c2:	781a      	ldrb	r2, [r3, #0]
 801b5c4:	69bb      	ldr	r3, [r7, #24]
 801b5c6:	68b9      	ldr	r1, [r7, #8]
 801b5c8:	440b      	add	r3, r1
 801b5ca:	43d2      	mvns	r2, r2
 801b5cc:	b2d2      	uxtb	r2, r2
 801b5ce:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b5d0:	69bb      	ldr	r3, [r7, #24]
 801b5d2:	68fa      	ldr	r2, [r7, #12]
 801b5d4:	4413      	add	r3, r2
 801b5d6:	2200      	movs	r2, #0
 801b5d8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b5da:	69bb      	ldr	r3, [r7, #24]
 801b5dc:	3301      	adds	r3, #1
 801b5de:	61bb      	str	r3, [r7, #24]
 801b5e0:	79fb      	ldrb	r3, [r7, #7]
 801b5e2:	69ba      	ldr	r2, [r7, #24]
 801b5e4:	429a      	cmp	r2, r3
 801b5e6:	dbe9      	blt.n	801b5bc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b5e8:	2300      	movs	r3, #0
 801b5ea:	61bb      	str	r3, [r7, #24]
 801b5ec:	e049      	b.n	801b682 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b5ee:	69bb      	ldr	r3, [r7, #24]
 801b5f0:	425a      	negs	r2, r3
 801b5f2:	f003 0307 	and.w	r3, r3, #7
 801b5f6:	f002 0207 	and.w	r2, r2, #7
 801b5fa:	bf58      	it	pl
 801b5fc:	4253      	negpl	r3, r2
 801b5fe:	b2db      	uxtb	r3, r3
 801b600:	f1c3 0307 	rsb	r3, r3, #7
 801b604:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b606:	69bb      	ldr	r3, [r7, #24]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	da00      	bge.n	801b60e <payload_integration+0x6e>
 801b60c:	3307      	adds	r3, #7
 801b60e:	10db      	asrs	r3, r3, #3
 801b610:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b612:	69bb      	ldr	r3, [r7, #24]
 801b614:	3301      	adds	r3, #1
 801b616:	425a      	negs	r2, r3
 801b618:	f003 0307 	and.w	r3, r3, #7
 801b61c:	f002 0207 	and.w	r2, r2, #7
 801b620:	bf58      	it	pl
 801b622:	4253      	negpl	r3, r2
 801b624:	b2db      	uxtb	r3, r3
 801b626:	f1c3 0307 	rsb	r3, r3, #7
 801b62a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b62c:	69bb      	ldr	r3, [r7, #24]
 801b62e:	3301      	adds	r3, #1
 801b630:	2b00      	cmp	r3, #0
 801b632:	da00      	bge.n	801b636 <payload_integration+0x96>
 801b634:	3307      	adds	r3, #7
 801b636:	10db      	asrs	r3, r3, #3
 801b638:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b63a:	7dbb      	ldrb	r3, [r7, #22]
 801b63c:	68ba      	ldr	r2, [r7, #8]
 801b63e:	4413      	add	r3, r2
 801b640:	781b      	ldrb	r3, [r3, #0]
 801b642:	461a      	mov	r2, r3
 801b644:	7dfb      	ldrb	r3, [r7, #23]
 801b646:	fa42 f303 	asr.w	r3, r2, r3
 801b64a:	b2db      	uxtb	r3, r3
 801b64c:	f003 0301 	and.w	r3, r3, #1
 801b650:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b652:	7ffa      	ldrb	r2, [r7, #31]
 801b654:	7cfb      	ldrb	r3, [r7, #19]
 801b656:	4053      	eors	r3, r2
 801b658:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b65a:	7d3b      	ldrb	r3, [r7, #20]
 801b65c:	68fa      	ldr	r2, [r7, #12]
 801b65e:	4413      	add	r3, r2
 801b660:	781b      	ldrb	r3, [r3, #0]
 801b662:	b25a      	sxtb	r2, r3
 801b664:	7ff9      	ldrb	r1, [r7, #31]
 801b666:	7d7b      	ldrb	r3, [r7, #21]
 801b668:	fa01 f303 	lsl.w	r3, r1, r3
 801b66c:	b25b      	sxtb	r3, r3
 801b66e:	4313      	orrs	r3, r2
 801b670:	b259      	sxtb	r1, r3
 801b672:	7d3b      	ldrb	r3, [r7, #20]
 801b674:	68fa      	ldr	r2, [r7, #12]
 801b676:	4413      	add	r3, r2
 801b678:	b2ca      	uxtb	r2, r1
 801b67a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b67c:	69bb      	ldr	r3, [r7, #24]
 801b67e:	3301      	adds	r3, #1
 801b680:	61bb      	str	r3, [r7, #24]
 801b682:	79fb      	ldrb	r3, [r7, #7]
 801b684:	00db      	lsls	r3, r3, #3
 801b686:	69ba      	ldr	r2, [r7, #24]
 801b688:	429a      	cmp	r2, r3
 801b68a:	dbb0      	blt.n	801b5ee <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b68c:	7ffb      	ldrb	r3, [r7, #31]
 801b68e:	01db      	lsls	r3, r3, #7
 801b690:	b25a      	sxtb	r2, r3
 801b692:	7ffb      	ldrb	r3, [r7, #31]
 801b694:	019b      	lsls	r3, r3, #6
 801b696:	b25b      	sxtb	r3, r3
 801b698:	4313      	orrs	r3, r2
 801b69a:	b25b      	sxtb	r3, r3
 801b69c:	7ffa      	ldrb	r2, [r7, #31]
 801b69e:	2a00      	cmp	r2, #0
 801b6a0:	d101      	bne.n	801b6a6 <payload_integration+0x106>
 801b6a2:	2220      	movs	r2, #32
 801b6a4:	e000      	b.n	801b6a8 <payload_integration+0x108>
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	4313      	orrs	r3, r2
 801b6aa:	b259      	sxtb	r1, r3
 801b6ac:	79fb      	ldrb	r3, [r7, #7]
 801b6ae:	68fa      	ldr	r2, [r7, #12]
 801b6b0:	4413      	add	r3, r2
 801b6b2:	b2ca      	uxtb	r2, r1
 801b6b4:	701a      	strb	r2, [r3, #0]
}
 801b6b6:	bf00      	nop
 801b6b8:	3724      	adds	r7, #36	; 0x24
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bc80      	pop	{r7}
 801b6be:	4770      	bx	lr

0801b6c0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b08c      	sub	sp, #48	; 0x30
 801b6c4:	af00      	add	r7, sp, #0
 801b6c6:	60b9      	str	r1, [r7, #8]
 801b6c8:	607a      	str	r2, [r7, #4]
 801b6ca:	603b      	str	r3, [r7, #0]
 801b6cc:	4603      	mov	r3, r0
 801b6ce:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b6d0:	2300      	movs	r3, #0
 801b6d2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	623b      	str	r3, [r7, #32]
 801b6d8:	2300      	movs	r3, #0
 801b6da:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b6dc:	f001 fdff 	bl	801d2de <RFW_DeInit>

    if( rxContinuous != 0 )
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d001      	beq.n	801b6ea <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b6e6:	2300      	movs	r3, #0
 801b6e8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	bf14      	ite	ne
 801b6f0:	2301      	movne	r3, #1
 801b6f2:	2300      	moveq	r3, #0
 801b6f4:	b2da      	uxtb	r2, r3
 801b6f6:	4ba3      	ldr	r3, [pc, #652]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b6f8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b6fa:	7bfb      	ldrb	r3, [r7, #15]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d003      	beq.n	801b708 <RadioSetRxGenericConfig+0x48>
 801b700:	2b01      	cmp	r3, #1
 801b702:	f000 80dc 	beq.w	801b8be <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b706:	e194      	b.n	801ba32 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b708:	68bb      	ldr	r3, [r7, #8]
 801b70a:	689b      	ldr	r3, [r3, #8]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d003      	beq.n	801b718 <RadioSetRxGenericConfig+0x58>
 801b710:	68bb      	ldr	r3, [r7, #8]
 801b712:	68db      	ldr	r3, [r3, #12]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d102      	bne.n	801b71e <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b718:	f04f 33ff 	mov.w	r3, #4294967295
 801b71c:	e18a      	b.n	801ba34 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b71e:	68bb      	ldr	r3, [r7, #8]
 801b720:	7f9b      	ldrb	r3, [r3, #30]
 801b722:	2b08      	cmp	r3, #8
 801b724:	d902      	bls.n	801b72c <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b726:	f04f 33ff 	mov.w	r3, #4294967295
 801b72a:	e183      	b.n	801ba34 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	6919      	ldr	r1, [r3, #16]
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	7f9b      	ldrb	r3, [r3, #30]
 801b734:	b29a      	uxth	r2, r3
 801b736:	f107 0320 	add.w	r3, r7, #32
 801b73a:	4618      	mov	r0, r3
 801b73c:	f001 fec2 	bl	801d4c4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	681b      	ldr	r3, [r3, #0]
 801b744:	2b00      	cmp	r3, #0
 801b746:	bf14      	ite	ne
 801b748:	2301      	movne	r3, #1
 801b74a:	2300      	moveq	r3, #0
 801b74c:	b2db      	uxtb	r3, r3
 801b74e:	4618      	mov	r0, r3
 801b750:	f000 fe26 	bl	801c3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b754:	4b8b      	ldr	r3, [pc, #556]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b756:	2200      	movs	r2, #0
 801b758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b75c:	68bb      	ldr	r3, [r7, #8]
 801b75e:	689b      	ldr	r3, [r3, #8]
 801b760:	4a88      	ldr	r2, [pc, #544]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b762:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b764:	68bb      	ldr	r3, [r7, #8]
 801b766:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b76a:	4b86      	ldr	r3, [pc, #536]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b76c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b770:	68bb      	ldr	r3, [r7, #8]
 801b772:	685b      	ldr	r3, [r3, #4]
 801b774:	4618      	mov	r0, r3
 801b776:	f001 fce5 	bl	801d144 <SUBGRF_GetFskBandwidthRegValue>
 801b77a:	4603      	mov	r3, r0
 801b77c:	461a      	mov	r2, r3
 801b77e:	4b81      	ldr	r3, [pc, #516]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b784:	4b7f      	ldr	r3, [pc, #508]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b786:	2200      	movs	r2, #0
 801b788:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b78a:	68bb      	ldr	r3, [r7, #8]
 801b78c:	68db      	ldr	r3, [r3, #12]
 801b78e:	b29b      	uxth	r3, r3
 801b790:	00db      	lsls	r3, r3, #3
 801b792:	b29a      	uxth	r2, r3
 801b794:	4b7b      	ldr	r3, [pc, #492]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b796:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	7fda      	ldrb	r2, [r3, #31]
 801b79c:	4b79      	ldr	r3, [pc, #484]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b79e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	7f9b      	ldrb	r3, [r3, #30]
 801b7a4:	00db      	lsls	r3, r3, #3
 801b7a6:	b2da      	uxtb	r2, r3
 801b7a8:	4b76      	ldr	r3, [pc, #472]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b7aa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b7ac:	68bb      	ldr	r3, [r7, #8]
 801b7ae:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b7b2:	4b74      	ldr	r3, [pc, #464]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b7b4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b7b6:	68bb      	ldr	r3, [r7, #8]
 801b7b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d105      	bne.n	801b7cc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	695b      	ldr	r3, [r3, #20]
 801b7c4:	b2da      	uxtb	r2, r3
 801b7c6:	4b6f      	ldr	r3, [pc, #444]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b7c8:	759a      	strb	r2, [r3, #22]
 801b7ca:	e00b      	b.n	801b7e4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b7cc:	68bb      	ldr	r3, [r7, #8]
 801b7ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7d2:	2b02      	cmp	r3, #2
 801b7d4:	d103      	bne.n	801b7de <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7d6:	4b6b      	ldr	r3, [pc, #428]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b7d8:	22ff      	movs	r2, #255	; 0xff
 801b7da:	759a      	strb	r2, [r3, #22]
 801b7dc:	e002      	b.n	801b7e4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7de:	4b69      	ldr	r3, [pc, #420]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b7e0:	22ff      	movs	r2, #255	; 0xff
 801b7e2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b7ea:	2b02      	cmp	r3, #2
 801b7ec:	d004      	beq.n	801b7f8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7f4:	2b02      	cmp	r3, #2
 801b7f6:	d12d      	bne.n	801b854 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b7fe:	2bf1      	cmp	r3, #241	; 0xf1
 801b800:	d00c      	beq.n	801b81c <RadioSetRxGenericConfig+0x15c>
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b808:	2bf2      	cmp	r3, #242	; 0xf2
 801b80a:	d007      	beq.n	801b81c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b812:	2b01      	cmp	r3, #1
 801b814:	d002      	beq.n	801b81c <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b816:	f04f 33ff 	mov.w	r3, #4294967295
 801b81a:	e10b      	b.n	801ba34 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b81c:	2300      	movs	r3, #0
 801b81e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b824:	4b58      	ldr	r3, [pc, #352]	; (801b988 <RadioSetRxGenericConfig+0x2c8>)
 801b826:	6819      	ldr	r1, [r3, #0]
 801b828:	f107 0314 	add.w	r3, r7, #20
 801b82c:	4a57      	ldr	r2, [pc, #348]	; (801b98c <RadioSetRxGenericConfig+0x2cc>)
 801b82e:	4618      	mov	r0, r3
 801b830:	f001 fd48 	bl	801d2c4 <RFW_Init>
 801b834:	4603      	mov	r3, r0
 801b836:	2b00      	cmp	r3, #0
 801b838:	d002      	beq.n	801b840 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b83a:	f04f 33ff 	mov.w	r3, #4294967295
 801b83e:	e0f9      	b.n	801ba34 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b840:	4b50      	ldr	r3, [pc, #320]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b842:	2200      	movs	r2, #0
 801b844:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b846:	4b4f      	ldr	r3, [pc, #316]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b848:	2201      	movs	r2, #1
 801b84a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b84c:	4b4d      	ldr	r3, [pc, #308]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b84e:	2200      	movs	r2, #0
 801b850:	755a      	strb	r2, [r3, #21]
        {
 801b852:	e00e      	b.n	801b872 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b854:	68bb      	ldr	r3, [r7, #8]
 801b856:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b85a:	4b4a      	ldr	r3, [pc, #296]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b85c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b85e:	68bb      	ldr	r3, [r7, #8]
 801b860:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b864:	4b47      	ldr	r3, [pc, #284]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b866:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b868:	68bb      	ldr	r3, [r7, #8]
 801b86a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b86e:	4b45      	ldr	r3, [pc, #276]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b870:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b872:	f7ff fa3c 	bl	801acee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b876:	2000      	movs	r0, #0
 801b878:	f7fe fbd0 	bl	801a01c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b87c:	4844      	ldr	r0, [pc, #272]	; (801b990 <RadioSetRxGenericConfig+0x2d0>)
 801b87e:	f001 f82d 	bl	801c8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b882:	4844      	ldr	r0, [pc, #272]	; (801b994 <RadioSetRxGenericConfig+0x2d4>)
 801b884:	f001 f8fc 	bl	801ca80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b888:	f107 0320 	add.w	r3, r7, #32
 801b88c:	4618      	mov	r0, r3
 801b88e:	f000 fbc0 	bl	801c012 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b892:	68bb      	ldr	r3, [r7, #8]
 801b894:	8b9b      	ldrh	r3, [r3, #28]
 801b896:	4618      	mov	r0, r3
 801b898:	f000 fc0a 	bl	801c0b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b89c:	68bb      	ldr	r3, [r7, #8]
 801b89e:	8b1b      	ldrh	r3, [r3, #24]
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f000 fbe5 	bl	801c070 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b8a6:	683b      	ldr	r3, [r7, #0]
 801b8a8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b8ac:	fb03 f202 	mul.w	r2, r3, r2
 801b8b0:	68bb      	ldr	r3, [r7, #8]
 801b8b2:	689b      	ldr	r3, [r3, #8]
 801b8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8b8:	4a32      	ldr	r2, [pc, #200]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b8ba:	6093      	str	r3, [r2, #8]
        break;
 801b8bc:	e0b9      	b.n	801ba32 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b8be:	68bb      	ldr	r3, [r7, #8]
 801b8c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d102      	bne.n	801b8cc <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b8c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ca:	e0b3      	b.n	801ba34 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b8d2:	2b01      	cmp	r3, #1
 801b8d4:	d104      	bne.n	801b8e0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b8d6:	68bb      	ldr	r3, [r7, #8]
 801b8d8:	695b      	ldr	r3, [r3, #20]
 801b8da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b8de:	e002      	b.n	801b8e6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b8e0:	23ff      	movs	r3, #255	; 0xff
 801b8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b8e6:	68bb      	ldr	r3, [r7, #8]
 801b8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8ea:	2b00      	cmp	r3, #0
 801b8ec:	bf14      	ite	ne
 801b8ee:	2301      	movne	r3, #1
 801b8f0:	2300      	moveq	r3, #0
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	4618      	mov	r0, r3
 801b8f6:	f000 fd53 	bl	801c3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b8fa:	683b      	ldr	r3, [r7, #0]
 801b8fc:	b2db      	uxtb	r3, r3
 801b8fe:	4618      	mov	r0, r3
 801b900:	f000 fd5d 	bl	801c3be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b904:	4b1f      	ldr	r3, [pc, #124]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b906:	2201      	movs	r2, #1
 801b908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b90c:	68bb      	ldr	r3, [r7, #8]
 801b90e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b912:	4b1c      	ldr	r3, [pc, #112]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b91e:	4b19      	ldr	r3, [pc, #100]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b924:	68bb      	ldr	r3, [r7, #8]
 801b926:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b92a:	4b16      	ldr	r3, [pc, #88]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b92c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b930:	68bb      	ldr	r3, [r7, #8]
 801b932:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b936:	2b02      	cmp	r3, #2
 801b938:	d010      	beq.n	801b95c <RadioSetRxGenericConfig+0x29c>
 801b93a:	2b02      	cmp	r3, #2
 801b93c:	dc2c      	bgt.n	801b998 <RadioSetRxGenericConfig+0x2d8>
 801b93e:	2b00      	cmp	r3, #0
 801b940:	d002      	beq.n	801b948 <RadioSetRxGenericConfig+0x288>
 801b942:	2b01      	cmp	r3, #1
 801b944:	d005      	beq.n	801b952 <RadioSetRxGenericConfig+0x292>
            break;
 801b946:	e027      	b.n	801b998 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b948:	4b0e      	ldr	r3, [pc, #56]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b94a:	2200      	movs	r2, #0
 801b94c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b950:	e023      	b.n	801b99a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b952:	4b0c      	ldr	r3, [pc, #48]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b954:	2201      	movs	r2, #1
 801b956:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b95a:	e01e      	b.n	801b99a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b95c:	68bb      	ldr	r3, [r7, #8]
 801b95e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b962:	2b0b      	cmp	r3, #11
 801b964:	d004      	beq.n	801b970 <RadioSetRxGenericConfig+0x2b0>
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b96c:	2b0c      	cmp	r3, #12
 801b96e:	d104      	bne.n	801b97a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b970:	4b04      	ldr	r3, [pc, #16]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b972:	2201      	movs	r2, #1
 801b974:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b978:	e00f      	b.n	801b99a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b97a:	4b02      	ldr	r3, [pc, #8]	; (801b984 <RadioSetRxGenericConfig+0x2c4>)
 801b97c:	2200      	movs	r2, #0
 801b97e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b982:	e00a      	b.n	801b99a <RadioSetRxGenericConfig+0x2da>
 801b984:	20001830 	.word	0x20001830
 801b988:	2000182c 	.word	0x2000182c
 801b98c:	200018a4 	.word	0x200018a4
 801b990:	20001868 	.word	0x20001868
 801b994:	2000183e 	.word	0x2000183e
            break;
 801b998:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b99a:	4b28      	ldr	r3, [pc, #160]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b99c:	2201      	movs	r2, #1
 801b99e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b9a0:	68bb      	ldr	r3, [r7, #8]
 801b9a2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b9a4:	4b25      	ldr	r3, [pc, #148]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b9a6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b9a8:	68bb      	ldr	r3, [r7, #8]
 801b9aa:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b9ae:	4b23      	ldr	r3, [pc, #140]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b9b0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b9b2:	4a22      	ldr	r2, [pc, #136]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b9b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9b8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b9c0:	4b1e      	ldr	r3, [pc, #120]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b9c2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b9c6:	68bb      	ldr	r3, [r7, #8]
 801b9c8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b9cc:	4b1b      	ldr	r3, [pc, #108]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b9ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b9d2:	f7ff f98c 	bl	801acee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b9d6:	2001      	movs	r0, #1
 801b9d8:	f7fe fb20 	bl	801a01c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b9dc:	4818      	ldr	r0, [pc, #96]	; (801ba40 <RadioSetRxGenericConfig+0x380>)
 801b9de:	f000 ff7d 	bl	801c8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b9e2:	4818      	ldr	r0, [pc, #96]	; (801ba44 <RadioSetRxGenericConfig+0x384>)
 801b9e4:	f001 f84c 	bl	801ca80 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b9e8:	4b14      	ldr	r3, [pc, #80]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801b9ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b9ee:	2b01      	cmp	r3, #1
 801b9f0:	d10d      	bne.n	801ba0e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b9f2:	f240 7036 	movw	r0, #1846	; 0x736
 801b9f6:	f001 f99f 	bl	801cd38 <SUBGRF_ReadRegister>
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	f023 0304 	bic.w	r3, r3, #4
 801ba00:	b2db      	uxtb	r3, r3
 801ba02:	4619      	mov	r1, r3
 801ba04:	f240 7036 	movw	r0, #1846	; 0x736
 801ba08:	f001 f982 	bl	801cd10 <SUBGRF_WriteRegister>
 801ba0c:	e00c      	b.n	801ba28 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ba0e:	f240 7036 	movw	r0, #1846	; 0x736
 801ba12:	f001 f991 	bl	801cd38 <SUBGRF_ReadRegister>
 801ba16:	4603      	mov	r3, r0
 801ba18:	f043 0304 	orr.w	r3, r3, #4
 801ba1c:	b2db      	uxtb	r3, r3
 801ba1e:	4619      	mov	r1, r3
 801ba20:	f240 7036 	movw	r0, #1846	; 0x736
 801ba24:	f001 f974 	bl	801cd10 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801ba28:	4b04      	ldr	r3, [pc, #16]	; (801ba3c <RadioSetRxGenericConfig+0x37c>)
 801ba2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba2e:	609a      	str	r2, [r3, #8]
        break;
 801ba30:	bf00      	nop
    }
    return status;
 801ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ba34:	4618      	mov	r0, r3
 801ba36:	3730      	adds	r7, #48	; 0x30
 801ba38:	46bd      	mov	sp, r7
 801ba3a:	bd80      	pop	{r7, pc}
 801ba3c:	20001830 	.word	0x20001830
 801ba40:	20001868 	.word	0x20001868
 801ba44:	2000183e 	.word	0x2000183e

0801ba48 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b08e      	sub	sp, #56	; 0x38
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	60b9      	str	r1, [r7, #8]
 801ba50:	607b      	str	r3, [r7, #4]
 801ba52:	4603      	mov	r3, r0
 801ba54:	73fb      	strb	r3, [r7, #15]
 801ba56:	4613      	mov	r3, r2
 801ba58:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba5e:	2300      	movs	r3, #0
 801ba60:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ba62:	f001 fc3c 	bl	801d2de <RFW_DeInit>
    switch( modem )
 801ba66:	7bfb      	ldrb	r3, [r7, #15]
 801ba68:	2b03      	cmp	r3, #3
 801ba6a:	f200 8204 	bhi.w	801be76 <RadioSetTxGenericConfig+0x42e>
 801ba6e:	a201      	add	r2, pc, #4	; (adr r2, 801ba74 <RadioSetTxGenericConfig+0x2c>)
 801ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba74:	0801bbf9 	.word	0x0801bbf9
 801ba78:	0801bd41 	.word	0x0801bd41
 801ba7c:	0801be39 	.word	0x0801be39
 801ba80:	0801ba85 	.word	0x0801ba85
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ba84:	68bb      	ldr	r3, [r7, #8]
 801ba86:	7c9b      	ldrb	r3, [r3, #18]
 801ba88:	2b08      	cmp	r3, #8
 801ba8a:	d902      	bls.n	801ba92 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ba8c:	f04f 33ff 	mov.w	r3, #4294967295
 801ba90:	e206      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ba92:	68bb      	ldr	r3, [r7, #8]
 801ba94:	6899      	ldr	r1, [r3, #8]
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	7c9b      	ldrb	r3, [r3, #18]
 801ba9a:	b29a      	uxth	r2, r3
 801ba9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801baa0:	4618      	mov	r0, r3
 801baa2:	f001 fd0f 	bl	801d4c4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d102      	bne.n	801bab4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801baae:	f04f 33ff 	mov.w	r3, #4294967295
 801bab2:	e1f5      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801bab4:	68bb      	ldr	r3, [r7, #8]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	f242 7210 	movw	r2, #10000	; 0x2710
 801babc:	4293      	cmp	r3, r2
 801babe:	d813      	bhi.n	801bae8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801bac0:	2302      	movs	r3, #2
 801bac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801bac6:	4b99      	ldr	r3, [pc, #612]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bac8:	2203      	movs	r2, #3
 801baca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bacc:	4b97      	ldr	r3, [pc, #604]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bace:	2203      	movs	r2, #3
 801bad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bad4:	68bb      	ldr	r3, [r7, #8]
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	4a94      	ldr	r2, [pc, #592]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bada:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801badc:	68bb      	ldr	r3, [r7, #8]
 801bade:	7cda      	ldrb	r2, [r3, #19]
 801bae0:	4b92      	ldr	r3, [pc, #584]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bae6:	e017      	b.n	801bb18 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801bae8:	2300      	movs	r3, #0
 801baea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801baee:	4b8f      	ldr	r3, [pc, #572]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801baf0:	2200      	movs	r2, #0
 801baf2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801baf4:	4b8d      	ldr	r3, [pc, #564]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801baf6:	2200      	movs	r2, #0
 801baf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bafc:	68bb      	ldr	r3, [r7, #8]
 801bafe:	681b      	ldr	r3, [r3, #0]
 801bb00:	4a8a      	ldr	r2, [pc, #552]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb02:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	7cda      	ldrb	r2, [r3, #19]
 801bb08:	4b88      	ldr	r3, [pc, #544]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bb0e:	68bb      	ldr	r3, [r7, #8]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	089b      	lsrs	r3, r3, #2
 801bb14:	4a85      	ldr	r2, [pc, #532]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb16:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	685b      	ldr	r3, [r3, #4]
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	00db      	lsls	r3, r3, #3
 801bb20:	b29a      	uxth	r2, r3
 801bb22:	4b82      	ldr	r3, [pc, #520]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb24:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bb26:	4b81      	ldr	r3, [pc, #516]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb28:	2204      	movs	r2, #4
 801bb2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bb2c:	68bb      	ldr	r3, [r7, #8]
 801bb2e:	7c9b      	ldrb	r3, [r3, #18]
 801bb30:	00db      	lsls	r3, r3, #3
 801bb32:	b2da      	uxtb	r2, r3
 801bb34:	4b7d      	ldr	r3, [pc, #500]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bb38:	4b7c      	ldr	r3, [pc, #496]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bb3e:	68bb      	ldr	r3, [r7, #8]
 801bb40:	7d9b      	ldrb	r3, [r3, #22]
 801bb42:	2b02      	cmp	r3, #2
 801bb44:	d003      	beq.n	801bb4e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bb46:	68bb      	ldr	r3, [r7, #8]
 801bb48:	7d1b      	ldrb	r3, [r3, #20]
 801bb4a:	2b02      	cmp	r3, #2
 801bb4c:	d12b      	bne.n	801bba6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bb4e:	68bb      	ldr	r3, [r7, #8]
 801bb50:	7d5b      	ldrb	r3, [r3, #21]
 801bb52:	2bf1      	cmp	r3, #241	; 0xf1
 801bb54:	d00a      	beq.n	801bb6c <RadioSetTxGenericConfig+0x124>
 801bb56:	68bb      	ldr	r3, [r7, #8]
 801bb58:	7d5b      	ldrb	r3, [r3, #21]
 801bb5a:	2bf2      	cmp	r3, #242	; 0xf2
 801bb5c:	d006      	beq.n	801bb6c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	7d5b      	ldrb	r3, [r3, #21]
 801bb62:	2b01      	cmp	r3, #1
 801bb64:	d002      	beq.n	801bb6c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801bb66:	f04f 33ff 	mov.w	r3, #4294967295
 801bb6a:	e199      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801bb6c:	68bb      	ldr	r3, [r7, #8]
 801bb6e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801bb70:	2301      	movs	r3, #1
 801bb72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bb76:	4b6e      	ldr	r3, [pc, #440]	; (801bd30 <RadioSetTxGenericConfig+0x2e8>)
 801bb78:	6819      	ldr	r1, [r3, #0]
 801bb7a:	f107 0320 	add.w	r3, r7, #32
 801bb7e:	4a6d      	ldr	r2, [pc, #436]	; (801bd34 <RadioSetTxGenericConfig+0x2ec>)
 801bb80:	4618      	mov	r0, r3
 801bb82:	f001 fb9f 	bl	801d2c4 <RFW_Init>
 801bb86:	4603      	mov	r3, r0
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d002      	beq.n	801bb92 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801bb8c:	f04f 33ff 	mov.w	r3, #4294967295
 801bb90:	e186      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bb92:	4b66      	ldr	r3, [pc, #408]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb94:	2200      	movs	r2, #0
 801bb96:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bb98:	4b64      	ldr	r3, [pc, #400]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bb9a:	2201      	movs	r2, #1
 801bb9c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bb9e:	4b63      	ldr	r3, [pc, #396]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bba0:	2200      	movs	r2, #0
 801bba2:	755a      	strb	r2, [r3, #21]
        {
 801bba4:	e00b      	b.n	801bbbe <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bba6:	68bb      	ldr	r3, [r7, #8]
 801bba8:	7d5a      	ldrb	r2, [r3, #21]
 801bbaa:	4b60      	ldr	r3, [pc, #384]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bbac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bbae:	68bb      	ldr	r3, [r7, #8]
 801bbb0:	7d9a      	ldrb	r2, [r3, #22]
 801bbb2:	4b5e      	ldr	r3, [pc, #376]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bbb4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bbb6:	68bb      	ldr	r3, [r7, #8]
 801bbb8:	7d1a      	ldrb	r2, [r3, #20]
 801bbba:	4b5c      	ldr	r3, [pc, #368]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bbbc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bbbe:	f7ff f896 	bl	801acee <RadioStandby>
        RadioSetModem( radio_modem );
 801bbc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	f7fe fa28 	bl	801a01c <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bbcc:	485a      	ldr	r0, [pc, #360]	; (801bd38 <RadioSetTxGenericConfig+0x2f0>)
 801bbce:	f000 fe85 	bl	801c8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bbd2:	485a      	ldr	r0, [pc, #360]	; (801bd3c <RadioSetTxGenericConfig+0x2f4>)
 801bbd4:	f000 ff54 	bl	801ca80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bbd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bbdc:	4618      	mov	r0, r3
 801bbde:	f000 fa18 	bl	801c012 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bbe2:	68bb      	ldr	r3, [r7, #8]
 801bbe4:	8a1b      	ldrh	r3, [r3, #16]
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	f000 fa62 	bl	801c0b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801bbec:	68bb      	ldr	r3, [r7, #8]
 801bbee:	899b      	ldrh	r3, [r3, #12]
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	f000 fa3d 	bl	801c070 <SUBGRF_SetCrcPolynomial>
        break;
 801bbf6:	e13f      	b.n	801be78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bbf8:	68bb      	ldr	r3, [r7, #8]
 801bbfa:	681b      	ldr	r3, [r3, #0]
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d102      	bne.n	801bc06 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bc00:	f04f 33ff 	mov.w	r3, #4294967295
 801bc04:	e14c      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bc06:	68bb      	ldr	r3, [r7, #8]
 801bc08:	7c9b      	ldrb	r3, [r3, #18]
 801bc0a:	2b08      	cmp	r3, #8
 801bc0c:	d902      	bls.n	801bc14 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bc0e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc12:	e145      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bc14:	68bb      	ldr	r3, [r7, #8]
 801bc16:	6899      	ldr	r1, [r3, #8]
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	7c9b      	ldrb	r3, [r3, #18]
 801bc1c:	b29a      	uxth	r2, r3
 801bc1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc22:	4618      	mov	r0, r3
 801bc24:	f001 fc4e 	bl	801d4c4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc28:	4b40      	ldr	r3, [pc, #256]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc2a:	2200      	movs	r2, #0
 801bc2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	4a3d      	ldr	r2, [pc, #244]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc36:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bc38:	68bb      	ldr	r3, [r7, #8]
 801bc3a:	7cda      	ldrb	r2, [r3, #19]
 801bc3c:	4b3b      	ldr	r3, [pc, #236]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	699b      	ldr	r3, [r3, #24]
 801bc46:	4a39      	ldr	r2, [pc, #228]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc48:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc4a:	4b38      	ldr	r3, [pc, #224]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	685b      	ldr	r3, [r3, #4]
 801bc54:	b29b      	uxth	r3, r3
 801bc56:	00db      	lsls	r3, r3, #3
 801bc58:	b29a      	uxth	r2, r3
 801bc5a:	4b34      	ldr	r3, [pc, #208]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc5c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bc5e:	4b33      	ldr	r3, [pc, #204]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc60:	2204      	movs	r2, #4
 801bc62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bc64:	68bb      	ldr	r3, [r7, #8]
 801bc66:	7c9b      	ldrb	r3, [r3, #18]
 801bc68:	00db      	lsls	r3, r3, #3
 801bc6a:	b2da      	uxtb	r2, r3
 801bc6c:	4b2f      	ldr	r3, [pc, #188]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bc70:	4b2e      	ldr	r3, [pc, #184]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bc72:	2200      	movs	r2, #0
 801bc74:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bc76:	68bb      	ldr	r3, [r7, #8]
 801bc78:	7d9b      	ldrb	r3, [r3, #22]
 801bc7a:	2b02      	cmp	r3, #2
 801bc7c:	d003      	beq.n	801bc86 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bc7e:	68bb      	ldr	r3, [r7, #8]
 801bc80:	7d1b      	ldrb	r3, [r3, #20]
 801bc82:	2b02      	cmp	r3, #2
 801bc84:	d12a      	bne.n	801bcdc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	7d5b      	ldrb	r3, [r3, #21]
 801bc8a:	2bf1      	cmp	r3, #241	; 0xf1
 801bc8c:	d00a      	beq.n	801bca4 <RadioSetTxGenericConfig+0x25c>
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	7d5b      	ldrb	r3, [r3, #21]
 801bc92:	2bf2      	cmp	r3, #242	; 0xf2
 801bc94:	d006      	beq.n	801bca4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bc96:	68bb      	ldr	r3, [r7, #8]
 801bc98:	7d5b      	ldrb	r3, [r3, #21]
 801bc9a:	2b01      	cmp	r3, #1
 801bc9c:	d002      	beq.n	801bca4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bc9e:	f04f 33ff 	mov.w	r3, #4294967295
 801bca2:	e0fd      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bca4:	2301      	movs	r3, #1
 801bca6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bca8:	68bb      	ldr	r3, [r7, #8]
 801bcaa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bcac:	4b20      	ldr	r3, [pc, #128]	; (801bd30 <RadioSetTxGenericConfig+0x2e8>)
 801bcae:	6819      	ldr	r1, [r3, #0]
 801bcb0:	f107 0314 	add.w	r3, r7, #20
 801bcb4:	4a1f      	ldr	r2, [pc, #124]	; (801bd34 <RadioSetTxGenericConfig+0x2ec>)
 801bcb6:	4618      	mov	r0, r3
 801bcb8:	f001 fb04 	bl	801d2c4 <RFW_Init>
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d002      	beq.n	801bcc8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bcc2:	f04f 33ff 	mov.w	r3, #4294967295
 801bcc6:	e0eb      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bcc8:	4b18      	ldr	r3, [pc, #96]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bcca:	2200      	movs	r2, #0
 801bccc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bcce:	4b17      	ldr	r3, [pc, #92]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bcd0:	2201      	movs	r2, #1
 801bcd2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bcd4:	4b15      	ldr	r3, [pc, #84]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	755a      	strb	r2, [r3, #21]
        {
 801bcda:	e00b      	b.n	801bcf4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bcdc:	68bb      	ldr	r3, [r7, #8]
 801bcde:	7d5a      	ldrb	r2, [r3, #21]
 801bce0:	4b12      	ldr	r3, [pc, #72]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bce2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bce4:	68bb      	ldr	r3, [r7, #8]
 801bce6:	7d9a      	ldrb	r2, [r3, #22]
 801bce8:	4b10      	ldr	r3, [pc, #64]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bcea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	7d1a      	ldrb	r2, [r3, #20]
 801bcf0:	4b0e      	ldr	r3, [pc, #56]	; (801bd2c <RadioSetTxGenericConfig+0x2e4>)
 801bcf2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bcf4:	f7fe fffb 	bl	801acee <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bcf8:	2000      	movs	r0, #0
 801bcfa:	f7fe f98f 	bl	801a01c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bcfe:	480e      	ldr	r0, [pc, #56]	; (801bd38 <RadioSetTxGenericConfig+0x2f0>)
 801bd00:	f000 fdec 	bl	801c8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd04:	480d      	ldr	r0, [pc, #52]	; (801bd3c <RadioSetTxGenericConfig+0x2f4>)
 801bd06:	f000 febb 	bl	801ca80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bd0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f000 f97f 	bl	801c012 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bd14:	68bb      	ldr	r3, [r7, #8]
 801bd16:	8a1b      	ldrh	r3, [r3, #16]
 801bd18:	4618      	mov	r0, r3
 801bd1a:	f000 f9c9 	bl	801c0b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bd1e:	68bb      	ldr	r3, [r7, #8]
 801bd20:	899b      	ldrh	r3, [r3, #12]
 801bd22:	4618      	mov	r0, r3
 801bd24:	f000 f9a4 	bl	801c070 <SUBGRF_SetCrcPolynomial>
        break;
 801bd28:	e0a6      	b.n	801be78 <RadioSetTxGenericConfig+0x430>
 801bd2a:	bf00      	nop
 801bd2c:	20001830 	.word	0x20001830
 801bd30:	2000182c 	.word	0x2000182c
 801bd34:	2000188c 	.word	0x2000188c
 801bd38:	20001868 	.word	0x20001868
 801bd3c:	2000183e 	.word	0x2000183e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bd40:	4b59      	ldr	r3, [pc, #356]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bd42:	2201      	movs	r2, #1
 801bd44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	781a      	ldrb	r2, [r3, #0]
 801bd4c:	4b56      	ldr	r3, [pc, #344]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bd4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bd52:	68bb      	ldr	r3, [r7, #8]
 801bd54:	785a      	ldrb	r2, [r3, #1]
 801bd56:	4b54      	ldr	r3, [pc, #336]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bd58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bd5c:	68bb      	ldr	r3, [r7, #8]
 801bd5e:	789a      	ldrb	r2, [r3, #2]
 801bd60:	4b51      	ldr	r3, [pc, #324]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bd62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bd66:	68bb      	ldr	r3, [r7, #8]
 801bd68:	78db      	ldrb	r3, [r3, #3]
 801bd6a:	2b02      	cmp	r3, #2
 801bd6c:	d010      	beq.n	801bd90 <RadioSetTxGenericConfig+0x348>
 801bd6e:	2b02      	cmp	r3, #2
 801bd70:	dc20      	bgt.n	801bdb4 <RadioSetTxGenericConfig+0x36c>
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d002      	beq.n	801bd7c <RadioSetTxGenericConfig+0x334>
 801bd76:	2b01      	cmp	r3, #1
 801bd78:	d005      	beq.n	801bd86 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801bd7a:	e01b      	b.n	801bdb4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd7c:	4b4a      	ldr	r3, [pc, #296]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bd7e:	2200      	movs	r2, #0
 801bd80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd84:	e017      	b.n	801bdb6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd86:	4b48      	ldr	r3, [pc, #288]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bd88:	2201      	movs	r2, #1
 801bd8a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd8e:	e012      	b.n	801bdb6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	781b      	ldrb	r3, [r3, #0]
 801bd94:	2b0b      	cmp	r3, #11
 801bd96:	d003      	beq.n	801bda0 <RadioSetTxGenericConfig+0x358>
 801bd98:	68bb      	ldr	r3, [r7, #8]
 801bd9a:	781b      	ldrb	r3, [r3, #0]
 801bd9c:	2b0c      	cmp	r3, #12
 801bd9e:	d104      	bne.n	801bdaa <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bda0:	4b41      	ldr	r3, [pc, #260]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bda2:	2201      	movs	r2, #1
 801bda4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bda8:	e005      	b.n	801bdb6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bdaa:	4b3f      	ldr	r3, [pc, #252]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bdac:	2200      	movs	r2, #0
 801bdae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdb2:	e000      	b.n	801bdb6 <RadioSetTxGenericConfig+0x36e>
            break;
 801bdb4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bdb6:	4b3c      	ldr	r3, [pc, #240]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bdb8:	2201      	movs	r2, #1
 801bdba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bdbc:	68bb      	ldr	r3, [r7, #8]
 801bdbe:	889a      	ldrh	r2, [r3, #4]
 801bdc0:	4b39      	ldr	r3, [pc, #228]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bdc2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bdc4:	68bb      	ldr	r3, [r7, #8]
 801bdc6:	799a      	ldrb	r2, [r3, #6]
 801bdc8:	4b37      	ldr	r3, [pc, #220]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bdca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	79da      	ldrb	r2, [r3, #7]
 801bdd0:	4b35      	ldr	r3, [pc, #212]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bdd2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bdd6:	68bb      	ldr	r3, [r7, #8]
 801bdd8:	7a1a      	ldrb	r2, [r3, #8]
 801bdda:	4b33      	ldr	r3, [pc, #204]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801bde0:	f7fe ff85 	bl	801acee <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bde4:	2001      	movs	r0, #1
 801bde6:	f7fe f919 	bl	801a01c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdea:	4830      	ldr	r0, [pc, #192]	; (801beac <RadioSetTxGenericConfig+0x464>)
 801bdec:	f000 fd76 	bl	801c8dc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bdf0:	482f      	ldr	r0, [pc, #188]	; (801beb0 <RadioSetTxGenericConfig+0x468>)
 801bdf2:	f000 fe45 	bl	801ca80 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801bdf6:	4b2c      	ldr	r3, [pc, #176]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801bdf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bdfc:	2b06      	cmp	r3, #6
 801bdfe:	d10d      	bne.n	801be1c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801be00:	f640 0089 	movw	r0, #2185	; 0x889
 801be04:	f000 ff98 	bl	801cd38 <SUBGRF_ReadRegister>
 801be08:	4603      	mov	r3, r0
 801be0a:	f023 0304 	bic.w	r3, r3, #4
 801be0e:	b2db      	uxtb	r3, r3
 801be10:	4619      	mov	r1, r3
 801be12:	f640 0089 	movw	r0, #2185	; 0x889
 801be16:	f000 ff7b 	bl	801cd10 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801be1a:	e02d      	b.n	801be78 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801be1c:	f640 0089 	movw	r0, #2185	; 0x889
 801be20:	f000 ff8a 	bl	801cd38 <SUBGRF_ReadRegister>
 801be24:	4603      	mov	r3, r0
 801be26:	f043 0304 	orr.w	r3, r3, #4
 801be2a:	b2db      	uxtb	r3, r3
 801be2c:	4619      	mov	r1, r3
 801be2e:	f640 0089 	movw	r0, #2185	; 0x889
 801be32:	f000 ff6d 	bl	801cd10 <SUBGRF_WriteRegister>
        break;
 801be36:	e01f      	b.n	801be78 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801be38:	68bb      	ldr	r3, [r7, #8]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d004      	beq.n	801be4a <RadioSetTxGenericConfig+0x402>
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801be48:	d902      	bls.n	801be50 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801be4a:	f04f 33ff 	mov.w	r3, #4294967295
 801be4e:	e027      	b.n	801bea0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801be50:	2003      	movs	r0, #3
 801be52:	f7fe f8e3 	bl	801a01c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801be56:	4b14      	ldr	r3, [pc, #80]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801be58:	2202      	movs	r2, #2
 801be5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801be5e:	68bb      	ldr	r3, [r7, #8]
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	4a11      	ldr	r2, [pc, #68]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801be64:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801be66:	4b10      	ldr	r3, [pc, #64]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801be68:	2216      	movs	r2, #22
 801be6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be6e:	480f      	ldr	r0, [pc, #60]	; (801beac <RadioSetTxGenericConfig+0x464>)
 801be70:	f000 fd34 	bl	801c8dc <SUBGRF_SetModulationParams>
        break;
 801be74:	e000      	b.n	801be78 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801be76:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801be78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801be7c:	4618      	mov	r0, r3
 801be7e:	f001 f863 	bl	801cf48 <SUBGRF_SetRfTxPower>
 801be82:	4603      	mov	r3, r0
 801be84:	461a      	mov	r2, r3
 801be86:	4b08      	ldr	r3, [pc, #32]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801be88:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be8c:	4b06      	ldr	r3, [pc, #24]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801be8e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be92:	4618      	mov	r0, r3
 801be94:	f001 fa37 	bl	801d306 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801be98:	4a03      	ldr	r2, [pc, #12]	; (801bea8 <RadioSetTxGenericConfig+0x460>)
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	6053      	str	r3, [r2, #4]
    return 0;
 801be9e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bea0:	4618      	mov	r0, r3
 801bea2:	3738      	adds	r7, #56	; 0x38
 801bea4:	46bd      	mov	sp, r7
 801bea6:	bd80      	pop	{r7, pc}
 801bea8:	20001830 	.word	0x20001830
 801beac:	20001868 	.word	0x20001868
 801beb0:	2000183e 	.word	0x2000183e

0801beb4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801beb4:	b480      	push	{r7}
 801beb6:	b085      	sub	sp, #20
 801beb8:	af00      	add	r7, sp, #0
 801beba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bebc:	2301      	movs	r3, #1
 801bebe:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801bec0:	7bfb      	ldrb	r3, [r7, #15]
}
 801bec2:	4618      	mov	r0, r3
 801bec4:	3714      	adds	r7, #20
 801bec6:	46bd      	mov	sp, r7
 801bec8:	bc80      	pop	{r7}
 801beca:	4770      	bx	lr

0801becc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801becc:	b480      	push	{r7}
 801bece:	b083      	sub	sp, #12
 801bed0:	af00      	add	r7, sp, #0
 801bed2:	6078      	str	r0, [r7, #4]
 801bed4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bed6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801bed8:	4618      	mov	r0, r3
 801beda:	370c      	adds	r7, #12
 801bedc:	46bd      	mov	sp, r7
 801bede:	bc80      	pop	{r7}
 801bee0:	4770      	bx	lr
	...

0801bee4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801bee4:	b580      	push	{r7, lr}
 801bee6:	b084      	sub	sp, #16
 801bee8:	af00      	add	r7, sp, #0
 801beea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d002      	beq.n	801bef8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801bef2:	4a1d      	ldr	r2, [pc, #116]	; (801bf68 <SUBGRF_Init+0x84>)
 801bef4:	687b      	ldr	r3, [r7, #4]
 801bef6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801bef8:	f7e6 fcdc 	bl	80028b4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801befc:	2002      	movs	r0, #2
 801befe:	f001 f8ff 	bl	801d100 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801bf02:	4b1a      	ldr	r3, [pc, #104]	; (801bf6c <SUBGRF_Init+0x88>)
 801bf04:	2200      	movs	r2, #0
 801bf06:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801bf08:	2000      	movs	r0, #0
 801bf0a:	f000 f97d 	bl	801c208 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801bf0e:	f7f1 ff1f 	bl	800dd50 <RBI_IsTCXO>
 801bf12:	4603      	mov	r3, r0
 801bf14:	2b01      	cmp	r3, #1
 801bf16:	d10e      	bne.n	801bf36 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801bf18:	2140      	movs	r1, #64	; 0x40
 801bf1a:	2001      	movs	r0, #1
 801bf1c:	f000 fb82 	bl	801c624 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bf20:	2100      	movs	r1, #0
 801bf22:	f640 1011 	movw	r0, #2321	; 0x911
 801bf26:	f000 fef3 	bl	801cd10 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bf2a:	237f      	movs	r3, #127	; 0x7f
 801bf2c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801bf2e:	7b38      	ldrb	r0, [r7, #12]
 801bf30:	f000 fa8b 	bl	801c44a <SUBGRF_Calibrate>
 801bf34:	e009      	b.n	801bf4a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf36:	2120      	movs	r1, #32
 801bf38:	f640 1011 	movw	r0, #2321	; 0x911
 801bf3c:	f000 fee8 	bl	801cd10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf40:	2120      	movs	r1, #32
 801bf42:	f640 1012 	movw	r0, #2322	; 0x912
 801bf46:	f000 fee3 	bl	801cd10 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bf4a:	210e      	movs	r1, #14
 801bf4c:	f640 101f 	movw	r0, #2335	; 0x91f
 801bf50:	f000 fede 	bl	801cd10 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bf54:	f7f1 fee0 	bl	800dd18 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bf58:	4b05      	ldr	r3, [pc, #20]	; (801bf70 <SUBGRF_Init+0x8c>)
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	701a      	strb	r2, [r3, #0]
}
 801bf5e:	bf00      	nop
 801bf60:	3710      	adds	r7, #16
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}
 801bf66:	bf00      	nop
 801bf68:	200018c8 	.word	0x200018c8
 801bf6c:	200018c4 	.word	0x200018c4
 801bf70:	200018bc 	.word	0x200018bc

0801bf74 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bf74:	b480      	push	{r7}
 801bf76:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bf78:	4b02      	ldr	r3, [pc, #8]	; (801bf84 <SUBGRF_GetOperatingMode+0x10>)
 801bf7a:	781b      	ldrb	r3, [r3, #0]
}
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	46bd      	mov	sp, r7
 801bf80:	bc80      	pop	{r7}
 801bf82:	4770      	bx	lr
 801bf84:	200018bc 	.word	0x200018bc

0801bf88 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bf88:	b580      	push	{r7, lr}
 801bf8a:	b082      	sub	sp, #8
 801bf8c:	af00      	add	r7, sp, #0
 801bf8e:	6078      	str	r0, [r7, #4]
 801bf90:	460b      	mov	r3, r1
 801bf92:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bf94:	78fb      	ldrb	r3, [r7, #3]
 801bf96:	461a      	mov	r2, r3
 801bf98:	6879      	ldr	r1, [r7, #4]
 801bf9a:	2000      	movs	r0, #0
 801bf9c:	f000 ff24 	bl	801cde8 <SUBGRF_WriteBuffer>
}
 801bfa0:	bf00      	nop
 801bfa2:	3708      	adds	r7, #8
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b086      	sub	sp, #24
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	60f8      	str	r0, [r7, #12]
 801bfb0:	60b9      	str	r1, [r7, #8]
 801bfb2:	4613      	mov	r3, r2
 801bfb4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bfba:	f107 0317 	add.w	r3, r7, #23
 801bfbe:	4619      	mov	r1, r3
 801bfc0:	68b8      	ldr	r0, [r7, #8]
 801bfc2:	f000 fe27 	bl	801cc14 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bfc6:	68bb      	ldr	r3, [r7, #8]
 801bfc8:	781b      	ldrb	r3, [r3, #0]
 801bfca:	79fa      	ldrb	r2, [r7, #7]
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	d201      	bcs.n	801bfd4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801bfd0:	2301      	movs	r3, #1
 801bfd2:	e007      	b.n	801bfe4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801bfd4:	7df8      	ldrb	r0, [r7, #23]
 801bfd6:	68bb      	ldr	r3, [r7, #8]
 801bfd8:	781b      	ldrb	r3, [r3, #0]
 801bfda:	461a      	mov	r2, r3
 801bfdc:	68f9      	ldr	r1, [r7, #12]
 801bfde:	f000 ff25 	bl	801ce2c <SUBGRF_ReadBuffer>

    return 0;
 801bfe2:	2300      	movs	r3, #0
}
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	3718      	adds	r7, #24
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}

0801bfec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b084      	sub	sp, #16
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	60f8      	str	r0, [r7, #12]
 801bff4:	460b      	mov	r3, r1
 801bff6:	607a      	str	r2, [r7, #4]
 801bff8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801bffa:	7afb      	ldrb	r3, [r7, #11]
 801bffc:	4619      	mov	r1, r3
 801bffe:	68f8      	ldr	r0, [r7, #12]
 801c000:	f7ff ffc2 	bl	801bf88 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c004:	6878      	ldr	r0, [r7, #4]
 801c006:	f000 f91b 	bl	801c240 <SUBGRF_SetTx>
}
 801c00a:	bf00      	nop
 801c00c:	3710      	adds	r7, #16
 801c00e:	46bd      	mov	sp, r7
 801c010:	bd80      	pop	{r7, pc}

0801c012 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c012:	b580      	push	{r7, lr}
 801c014:	b082      	sub	sp, #8
 801c016:	af00      	add	r7, sp, #0
 801c018:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c01a:	2208      	movs	r2, #8
 801c01c:	6879      	ldr	r1, [r7, #4]
 801c01e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c022:	f000 fe9d 	bl	801cd60 <SUBGRF_WriteRegisters>
    return 0;
 801c026:	2300      	movs	r3, #0
}
 801c028:	4618      	mov	r0, r3
 801c02a:	3708      	adds	r7, #8
 801c02c:	46bd      	mov	sp, r7
 801c02e:	bd80      	pop	{r7, pc}

0801c030 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c030:	b580      	push	{r7, lr}
 801c032:	b084      	sub	sp, #16
 801c034:	af00      	add	r7, sp, #0
 801c036:	4603      	mov	r3, r0
 801c038:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c03a:	88fb      	ldrh	r3, [r7, #6]
 801c03c:	0a1b      	lsrs	r3, r3, #8
 801c03e:	b29b      	uxth	r3, r3
 801c040:	b2db      	uxtb	r3, r3
 801c042:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c044:	88fb      	ldrh	r3, [r7, #6]
 801c046:	b2db      	uxtb	r3, r3
 801c048:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c04a:	f000 fb6f 	bl	801c72c <SUBGRF_GetPacketType>
 801c04e:	4603      	mov	r3, r0
 801c050:	2b00      	cmp	r3, #0
 801c052:	d108      	bne.n	801c066 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c054:	f107 030c 	add.w	r3, r7, #12
 801c058:	2202      	movs	r2, #2
 801c05a:	4619      	mov	r1, r3
 801c05c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c060:	f000 fe7e 	bl	801cd60 <SUBGRF_WriteRegisters>
            break;
 801c064:	e000      	b.n	801c068 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c066:	bf00      	nop
    }
}
 801c068:	bf00      	nop
 801c06a:	3710      	adds	r7, #16
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bd80      	pop	{r7, pc}

0801c070 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c070:	b580      	push	{r7, lr}
 801c072:	b084      	sub	sp, #16
 801c074:	af00      	add	r7, sp, #0
 801c076:	4603      	mov	r3, r0
 801c078:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c07a:	88fb      	ldrh	r3, [r7, #6]
 801c07c:	0a1b      	lsrs	r3, r3, #8
 801c07e:	b29b      	uxth	r3, r3
 801c080:	b2db      	uxtb	r3, r3
 801c082:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c084:	88fb      	ldrh	r3, [r7, #6]
 801c086:	b2db      	uxtb	r3, r3
 801c088:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c08a:	f000 fb4f 	bl	801c72c <SUBGRF_GetPacketType>
 801c08e:	4603      	mov	r3, r0
 801c090:	2b00      	cmp	r3, #0
 801c092:	d108      	bne.n	801c0a6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c094:	f107 030c 	add.w	r3, r7, #12
 801c098:	2202      	movs	r2, #2
 801c09a:	4619      	mov	r1, r3
 801c09c:	f240 60be 	movw	r0, #1726	; 0x6be
 801c0a0:	f000 fe5e 	bl	801cd60 <SUBGRF_WriteRegisters>
            break;
 801c0a4:	e000      	b.n	801c0a8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c0a6:	bf00      	nop
    }
}
 801c0a8:	bf00      	nop
 801c0aa:	3710      	adds	r7, #16
 801c0ac:	46bd      	mov	sp, r7
 801c0ae:	bd80      	pop	{r7, pc}

0801c0b0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c0b0:	b580      	push	{r7, lr}
 801c0b2:	b084      	sub	sp, #16
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c0be:	f000 fb35 	bl	801c72c <SUBGRF_GetPacketType>
 801c0c2:	4603      	mov	r3, r0
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d121      	bne.n	801c10c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c0c8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0cc:	f000 fe34 	bl	801cd38 <SUBGRF_ReadRegister>
 801c0d0:	4603      	mov	r3, r0
 801c0d2:	f023 0301 	bic.w	r3, r3, #1
 801c0d6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c0d8:	88fb      	ldrh	r3, [r7, #6]
 801c0da:	0a1b      	lsrs	r3, r3, #8
 801c0dc:	b29b      	uxth	r3, r3
 801c0de:	b25b      	sxtb	r3, r3
 801c0e0:	f003 0301 	and.w	r3, r3, #1
 801c0e4:	b25a      	sxtb	r2, r3
 801c0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0ea:	4313      	orrs	r3, r2
 801c0ec:	b25b      	sxtb	r3, r3
 801c0ee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c0f0:	7bfb      	ldrb	r3, [r7, #15]
 801c0f2:	4619      	mov	r1, r3
 801c0f4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0f8:	f000 fe0a 	bl	801cd10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c0fc:	88fb      	ldrh	r3, [r7, #6]
 801c0fe:	b2db      	uxtb	r3, r3
 801c100:	4619      	mov	r1, r3
 801c102:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c106:	f000 fe03 	bl	801cd10 <SUBGRF_WriteRegister>
            break;
 801c10a:	e000      	b.n	801c10e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c10c:	bf00      	nop
    }
}
 801c10e:	bf00      	nop
 801c110:	3710      	adds	r7, #16
 801c112:	46bd      	mov	sp, r7
 801c114:	bd80      	pop	{r7, pc}

0801c116 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c116:	b580      	push	{r7, lr}
 801c118:	b082      	sub	sp, #8
 801c11a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c11c:	2300      	movs	r3, #0
 801c11e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c120:	2300      	movs	r3, #0
 801c122:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c124:	2300      	movs	r3, #0
 801c126:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c128:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c12c:	f000 fe04 	bl	801cd38 <SUBGRF_ReadRegister>
 801c130:	4603      	mov	r3, r0
 801c132:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c134:	79fb      	ldrb	r3, [r7, #7]
 801c136:	f023 0301 	bic.w	r3, r3, #1
 801c13a:	b2db      	uxtb	r3, r3
 801c13c:	4619      	mov	r1, r3
 801c13e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c142:	f000 fde5 	bl	801cd10 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c146:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c14a:	f000 fdf5 	bl	801cd38 <SUBGRF_ReadRegister>
 801c14e:	4603      	mov	r3, r0
 801c150:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c152:	79bb      	ldrb	r3, [r7, #6]
 801c154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c158:	b2db      	uxtb	r3, r3
 801c15a:	4619      	mov	r1, r3
 801c15c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c160:	f000 fdd6 	bl	801cd10 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c164:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c168:	f000 f88a 	bl	801c280 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c16c:	463b      	mov	r3, r7
 801c16e:	2204      	movs	r2, #4
 801c170:	4619      	mov	r1, r3
 801c172:	f640 0019 	movw	r0, #2073	; 0x819
 801c176:	f000 fe15 	bl	801cda4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c17a:	2000      	movs	r0, #0
 801c17c:	f000 f844 	bl	801c208 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c180:	79fb      	ldrb	r3, [r7, #7]
 801c182:	4619      	mov	r1, r3
 801c184:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c188:	f000 fdc2 	bl	801cd10 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c18c:	79bb      	ldrb	r3, [r7, #6]
 801c18e:	4619      	mov	r1, r3
 801c190:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c194:	f000 fdbc 	bl	801cd10 <SUBGRF_WriteRegister>

    return number;
 801c198:	683b      	ldr	r3, [r7, #0]
}
 801c19a:	4618      	mov	r0, r3
 801c19c:	3708      	adds	r7, #8
 801c19e:	46bd      	mov	sp, r7
 801c1a0:	bd80      	pop	{r7, pc}
	...

0801c1a4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b084      	sub	sp, #16
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c1ac:	2000      	movs	r0, #0
 801c1ae:	f7f1 fdba 	bl	800dd26 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c1b2:	2002      	movs	r0, #2
 801c1b4:	f000 ffa4 	bl	801d100 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1b8:	793b      	ldrb	r3, [r7, #4]
 801c1ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1be:	b2db      	uxtb	r3, r3
 801c1c0:	009b      	lsls	r3, r3, #2
 801c1c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1c4:	793b      	ldrb	r3, [r7, #4]
 801c1c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c1ca:	b2db      	uxtb	r3, r3
 801c1cc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1ce:	b25b      	sxtb	r3, r3
 801c1d0:	4313      	orrs	r3, r2
 801c1d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c1d4:	793b      	ldrb	r3, [r7, #4]
 801c1d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c1da:	b2db      	uxtb	r3, r3
 801c1dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1de:	4313      	orrs	r3, r2
 801c1e0:	b25b      	sxtb	r3, r3
 801c1e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c1e6:	f107 030f 	add.w	r3, r7, #15
 801c1ea:	2201      	movs	r2, #1
 801c1ec:	4619      	mov	r1, r3
 801c1ee:	2084      	movs	r0, #132	; 0x84
 801c1f0:	f000 fe3e 	bl	801ce70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c1f4:	4b03      	ldr	r3, [pc, #12]	; (801c204 <SUBGRF_SetSleep+0x60>)
 801c1f6:	2200      	movs	r2, #0
 801c1f8:	701a      	strb	r2, [r3, #0]
}
 801c1fa:	bf00      	nop
 801c1fc:	3710      	adds	r7, #16
 801c1fe:	46bd      	mov	sp, r7
 801c200:	bd80      	pop	{r7, pc}
 801c202:	bf00      	nop
 801c204:	200018bc 	.word	0x200018bc

0801c208 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c208:	b580      	push	{r7, lr}
 801c20a:	b082      	sub	sp, #8
 801c20c:	af00      	add	r7, sp, #0
 801c20e:	4603      	mov	r3, r0
 801c210:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c212:	1dfb      	adds	r3, r7, #7
 801c214:	2201      	movs	r2, #1
 801c216:	4619      	mov	r1, r3
 801c218:	2080      	movs	r0, #128	; 0x80
 801c21a:	f000 fe29 	bl	801ce70 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c21e:	79fb      	ldrb	r3, [r7, #7]
 801c220:	2b00      	cmp	r3, #0
 801c222:	d103      	bne.n	801c22c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c224:	4b05      	ldr	r3, [pc, #20]	; (801c23c <SUBGRF_SetStandby+0x34>)
 801c226:	2201      	movs	r2, #1
 801c228:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c22a:	e002      	b.n	801c232 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c22c:	4b03      	ldr	r3, [pc, #12]	; (801c23c <SUBGRF_SetStandby+0x34>)
 801c22e:	2202      	movs	r2, #2
 801c230:	701a      	strb	r2, [r3, #0]
}
 801c232:	bf00      	nop
 801c234:	3708      	adds	r7, #8
 801c236:	46bd      	mov	sp, r7
 801c238:	bd80      	pop	{r7, pc}
 801c23a:	bf00      	nop
 801c23c:	200018bc 	.word	0x200018bc

0801c240 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c240:	b580      	push	{r7, lr}
 801c242:	b084      	sub	sp, #16
 801c244:	af00      	add	r7, sp, #0
 801c246:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c248:	4b0c      	ldr	r3, [pc, #48]	; (801c27c <SUBGRF_SetTx+0x3c>)
 801c24a:	2204      	movs	r2, #4
 801c24c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	0c1b      	lsrs	r3, r3, #16
 801c252:	b2db      	uxtb	r3, r3
 801c254:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	0a1b      	lsrs	r3, r3, #8
 801c25a:	b2db      	uxtb	r3, r3
 801c25c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	b2db      	uxtb	r3, r3
 801c262:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c264:	f107 030c 	add.w	r3, r7, #12
 801c268:	2203      	movs	r2, #3
 801c26a:	4619      	mov	r1, r3
 801c26c:	2083      	movs	r0, #131	; 0x83
 801c26e:	f000 fdff 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c272:	bf00      	nop
 801c274:	3710      	adds	r7, #16
 801c276:	46bd      	mov	sp, r7
 801c278:	bd80      	pop	{r7, pc}
 801c27a:	bf00      	nop
 801c27c:	200018bc 	.word	0x200018bc

0801c280 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b084      	sub	sp, #16
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c288:	4b0c      	ldr	r3, [pc, #48]	; (801c2bc <SUBGRF_SetRx+0x3c>)
 801c28a:	2205      	movs	r2, #5
 801c28c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	0c1b      	lsrs	r3, r3, #16
 801c292:	b2db      	uxtb	r3, r3
 801c294:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	0a1b      	lsrs	r3, r3, #8
 801c29a:	b2db      	uxtb	r3, r3
 801c29c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	b2db      	uxtb	r3, r3
 801c2a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2a4:	f107 030c 	add.w	r3, r7, #12
 801c2a8:	2203      	movs	r2, #3
 801c2aa:	4619      	mov	r1, r3
 801c2ac:	2082      	movs	r0, #130	; 0x82
 801c2ae:	f000 fddf 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c2b2:	bf00      	nop
 801c2b4:	3710      	adds	r7, #16
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	bd80      	pop	{r7, pc}
 801c2ba:	bf00      	nop
 801c2bc:	200018bc 	.word	0x200018bc

0801c2c0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b084      	sub	sp, #16
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2c8:	4b0e      	ldr	r3, [pc, #56]	; (801c304 <SUBGRF_SetRxBoosted+0x44>)
 801c2ca:	2205      	movs	r2, #5
 801c2cc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c2ce:	2197      	movs	r1, #151	; 0x97
 801c2d0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c2d4:	f000 fd1c 	bl	801cd10 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	0c1b      	lsrs	r3, r3, #16
 801c2dc:	b2db      	uxtb	r3, r3
 801c2de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	0a1b      	lsrs	r3, r3, #8
 801c2e4:	b2db      	uxtb	r3, r3
 801c2e6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	b2db      	uxtb	r3, r3
 801c2ec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2ee:	f107 030c 	add.w	r3, r7, #12
 801c2f2:	2203      	movs	r2, #3
 801c2f4:	4619      	mov	r1, r3
 801c2f6:	2082      	movs	r0, #130	; 0x82
 801c2f8:	f000 fdba 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c2fc:	bf00      	nop
 801c2fe:	3710      	adds	r7, #16
 801c300:	46bd      	mov	sp, r7
 801c302:	bd80      	pop	{r7, pc}
 801c304:	200018bc 	.word	0x200018bc

0801c308 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c308:	b580      	push	{r7, lr}
 801c30a:	b084      	sub	sp, #16
 801c30c:	af00      	add	r7, sp, #0
 801c30e:	6078      	str	r0, [r7, #4]
 801c310:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	0c1b      	lsrs	r3, r3, #16
 801c316:	b2db      	uxtb	r3, r3
 801c318:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	0a1b      	lsrs	r3, r3, #8
 801c31e:	b2db      	uxtb	r3, r3
 801c320:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	b2db      	uxtb	r3, r3
 801c326:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c328:	683b      	ldr	r3, [r7, #0]
 801c32a:	0c1b      	lsrs	r3, r3, #16
 801c32c:	b2db      	uxtb	r3, r3
 801c32e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c330:	683b      	ldr	r3, [r7, #0]
 801c332:	0a1b      	lsrs	r3, r3, #8
 801c334:	b2db      	uxtb	r3, r3
 801c336:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c338:	683b      	ldr	r3, [r7, #0]
 801c33a:	b2db      	uxtb	r3, r3
 801c33c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c33e:	f107 0308 	add.w	r3, r7, #8
 801c342:	2206      	movs	r2, #6
 801c344:	4619      	mov	r1, r3
 801c346:	2094      	movs	r0, #148	; 0x94
 801c348:	f000 fd92 	bl	801ce70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c34c:	4b03      	ldr	r3, [pc, #12]	; (801c35c <SUBGRF_SetRxDutyCycle+0x54>)
 801c34e:	2206      	movs	r2, #6
 801c350:	701a      	strb	r2, [r3, #0]
}
 801c352:	bf00      	nop
 801c354:	3710      	adds	r7, #16
 801c356:	46bd      	mov	sp, r7
 801c358:	bd80      	pop	{r7, pc}
 801c35a:	bf00      	nop
 801c35c:	200018bc 	.word	0x200018bc

0801c360 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c360:	b580      	push	{r7, lr}
 801c362:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c364:	2200      	movs	r2, #0
 801c366:	2100      	movs	r1, #0
 801c368:	20c5      	movs	r0, #197	; 0xc5
 801c36a:	f000 fd81 	bl	801ce70 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c36e:	4b02      	ldr	r3, [pc, #8]	; (801c378 <SUBGRF_SetCad+0x18>)
 801c370:	2207      	movs	r2, #7
 801c372:	701a      	strb	r2, [r3, #0]
}
 801c374:	bf00      	nop
 801c376:	bd80      	pop	{r7, pc}
 801c378:	200018bc 	.word	0x200018bc

0801c37c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c380:	2200      	movs	r2, #0
 801c382:	2100      	movs	r1, #0
 801c384:	20d1      	movs	r0, #209	; 0xd1
 801c386:	f000 fd73 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c38a:	bf00      	nop
 801c38c:	bd80      	pop	{r7, pc}

0801c38e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c38e:	b580      	push	{r7, lr}
 801c390:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c392:	2200      	movs	r2, #0
 801c394:	2100      	movs	r1, #0
 801c396:	20d2      	movs	r0, #210	; 0xd2
 801c398:	f000 fd6a 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c39c:	bf00      	nop
 801c39e:	bd80      	pop	{r7, pc}

0801c3a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c3a0:	b580      	push	{r7, lr}
 801c3a2:	b082      	sub	sp, #8
 801c3a4:	af00      	add	r7, sp, #0
 801c3a6:	4603      	mov	r3, r0
 801c3a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c3aa:	1dfb      	adds	r3, r7, #7
 801c3ac:	2201      	movs	r2, #1
 801c3ae:	4619      	mov	r1, r3
 801c3b0:	209f      	movs	r0, #159	; 0x9f
 801c3b2:	f000 fd5d 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c3b6:	bf00      	nop
 801c3b8:	3708      	adds	r7, #8
 801c3ba:	46bd      	mov	sp, r7
 801c3bc:	bd80      	pop	{r7, pc}

0801c3be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c3be:	b580      	push	{r7, lr}
 801c3c0:	b084      	sub	sp, #16
 801c3c2:	af00      	add	r7, sp, #0
 801c3c4:	4603      	mov	r3, r0
 801c3c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c3c8:	1dfb      	adds	r3, r7, #7
 801c3ca:	2201      	movs	r2, #1
 801c3cc:	4619      	mov	r1, r3
 801c3ce:	20a0      	movs	r0, #160	; 0xa0
 801c3d0:	f000 fd4e 	bl	801ce70 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c3d4:	79fb      	ldrb	r3, [r7, #7]
 801c3d6:	2b3f      	cmp	r3, #63	; 0x3f
 801c3d8:	d91c      	bls.n	801c414 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c3da:	79fb      	ldrb	r3, [r7, #7]
 801c3dc:	085b      	lsrs	r3, r3, #1
 801c3de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c3e8:	e005      	b.n	801c3f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c3ea:	7bfb      	ldrb	r3, [r7, #15]
 801c3ec:	089b      	lsrs	r3, r3, #2
 801c3ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c3f0:	7bbb      	ldrb	r3, [r7, #14]
 801c3f2:	3301      	adds	r3, #1
 801c3f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c3f6:	7bfb      	ldrb	r3, [r7, #15]
 801c3f8:	2b1f      	cmp	r3, #31
 801c3fa:	d8f6      	bhi.n	801c3ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c3fc:	7bfb      	ldrb	r3, [r7, #15]
 801c3fe:	00db      	lsls	r3, r3, #3
 801c400:	b2da      	uxtb	r2, r3
 801c402:	7bbb      	ldrb	r3, [r7, #14]
 801c404:	4413      	add	r3, r2
 801c406:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c408:	7b7b      	ldrb	r3, [r7, #13]
 801c40a:	4619      	mov	r1, r3
 801c40c:	f240 7006 	movw	r0, #1798	; 0x706
 801c410:	f000 fc7e 	bl	801cd10 <SUBGRF_WriteRegister>
    }
}
 801c414:	bf00      	nop
 801c416:	3710      	adds	r7, #16
 801c418:	46bd      	mov	sp, r7
 801c41a:	bd80      	pop	{r7, pc}

0801c41c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c41c:	b580      	push	{r7, lr}
 801c41e:	b082      	sub	sp, #8
 801c420:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c422:	f7f1 fc9c 	bl	800dd5e <RBI_IsDCDC>
 801c426:	4603      	mov	r3, r0
 801c428:	2b01      	cmp	r3, #1
 801c42a:	d102      	bne.n	801c432 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c42c:	2301      	movs	r3, #1
 801c42e:	71fb      	strb	r3, [r7, #7]
 801c430:	e001      	b.n	801c436 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c432:	2300      	movs	r3, #0
 801c434:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c436:	1dfb      	adds	r3, r7, #7
 801c438:	2201      	movs	r2, #1
 801c43a:	4619      	mov	r1, r3
 801c43c:	2096      	movs	r0, #150	; 0x96
 801c43e:	f000 fd17 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c442:	bf00      	nop
 801c444:	3708      	adds	r7, #8
 801c446:	46bd      	mov	sp, r7
 801c448:	bd80      	pop	{r7, pc}

0801c44a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c44a:	b580      	push	{r7, lr}
 801c44c:	b084      	sub	sp, #16
 801c44e:	af00      	add	r7, sp, #0
 801c450:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c452:	793b      	ldrb	r3, [r7, #4]
 801c454:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c458:	b2db      	uxtb	r3, r3
 801c45a:	019b      	lsls	r3, r3, #6
 801c45c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c45e:	793b      	ldrb	r3, [r7, #4]
 801c460:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c464:	b2db      	uxtb	r3, r3
 801c466:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c468:	b25b      	sxtb	r3, r3
 801c46a:	4313      	orrs	r3, r2
 801c46c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c46e:	793b      	ldrb	r3, [r7, #4]
 801c470:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c474:	b2db      	uxtb	r3, r3
 801c476:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c478:	b25b      	sxtb	r3, r3
 801c47a:	4313      	orrs	r3, r2
 801c47c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c47e:	793b      	ldrb	r3, [r7, #4]
 801c480:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c484:	b2db      	uxtb	r3, r3
 801c486:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c488:	b25b      	sxtb	r3, r3
 801c48a:	4313      	orrs	r3, r2
 801c48c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c48e:	793b      	ldrb	r3, [r7, #4]
 801c490:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c494:	b2db      	uxtb	r3, r3
 801c496:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c498:	b25b      	sxtb	r3, r3
 801c49a:	4313      	orrs	r3, r2
 801c49c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c49e:	793b      	ldrb	r3, [r7, #4]
 801c4a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c4a4:	b2db      	uxtb	r3, r3
 801c4a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4a8:	b25b      	sxtb	r3, r3
 801c4aa:	4313      	orrs	r3, r2
 801c4ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c4ae:	793b      	ldrb	r3, [r7, #4]
 801c4b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c4b4:	b2db      	uxtb	r3, r3
 801c4b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4b8:	4313      	orrs	r3, r2
 801c4ba:	b25b      	sxtb	r3, r3
 801c4bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c4c0:	f107 030f 	add.w	r3, r7, #15
 801c4c4:	2201      	movs	r2, #1
 801c4c6:	4619      	mov	r1, r3
 801c4c8:	2089      	movs	r0, #137	; 0x89
 801c4ca:	f000 fcd1 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c4ce:	bf00      	nop
 801c4d0:	3710      	adds	r7, #16
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}
	...

0801c4d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c4d8:	b580      	push	{r7, lr}
 801c4da:	b084      	sub	sp, #16
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	4a1d      	ldr	r2, [pc, #116]	; (801c558 <SUBGRF_CalibrateImage+0x80>)
 801c4e4:	4293      	cmp	r3, r2
 801c4e6:	d904      	bls.n	801c4f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c4e8:	23e1      	movs	r3, #225	; 0xe1
 801c4ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c4ec:	23e9      	movs	r3, #233	; 0xe9
 801c4ee:	737b      	strb	r3, [r7, #13]
 801c4f0:	e027      	b.n	801c542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	4a19      	ldr	r2, [pc, #100]	; (801c55c <SUBGRF_CalibrateImage+0x84>)
 801c4f6:	4293      	cmp	r3, r2
 801c4f8:	d904      	bls.n	801c504 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c4fa:	23d7      	movs	r3, #215	; 0xd7
 801c4fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c4fe:	23db      	movs	r3, #219	; 0xdb
 801c500:	737b      	strb	r3, [r7, #13]
 801c502:	e01e      	b.n	801c542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	4a16      	ldr	r2, [pc, #88]	; (801c560 <SUBGRF_CalibrateImage+0x88>)
 801c508:	4293      	cmp	r3, r2
 801c50a:	d904      	bls.n	801c516 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c50c:	23c1      	movs	r3, #193	; 0xc1
 801c50e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c510:	23c5      	movs	r3, #197	; 0xc5
 801c512:	737b      	strb	r3, [r7, #13]
 801c514:	e015      	b.n	801c542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	4a12      	ldr	r2, [pc, #72]	; (801c564 <SUBGRF_CalibrateImage+0x8c>)
 801c51a:	4293      	cmp	r3, r2
 801c51c:	d904      	bls.n	801c528 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c51e:	2375      	movs	r3, #117	; 0x75
 801c520:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c522:	2381      	movs	r3, #129	; 0x81
 801c524:	737b      	strb	r3, [r7, #13]
 801c526:	e00c      	b.n	801c542 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	4a0f      	ldr	r2, [pc, #60]	; (801c568 <SUBGRF_CalibrateImage+0x90>)
 801c52c:	4293      	cmp	r3, r2
 801c52e:	d904      	bls.n	801c53a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c530:	236b      	movs	r3, #107	; 0x6b
 801c532:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c534:	236f      	movs	r3, #111	; 0x6f
 801c536:	737b      	strb	r3, [r7, #13]
 801c538:	e003      	b.n	801c542 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c53a:	2329      	movs	r3, #41	; 0x29
 801c53c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c53e:	232b      	movs	r3, #43	; 0x2b
 801c540:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c542:	f107 030c 	add.w	r3, r7, #12
 801c546:	2202      	movs	r2, #2
 801c548:	4619      	mov	r1, r3
 801c54a:	2098      	movs	r0, #152	; 0x98
 801c54c:	f000 fc90 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c550:	bf00      	nop
 801c552:	3710      	adds	r7, #16
 801c554:	46bd      	mov	sp, r7
 801c556:	bd80      	pop	{r7, pc}
 801c558:	35a4e900 	.word	0x35a4e900
 801c55c:	32a9f880 	.word	0x32a9f880
 801c560:	2de54480 	.word	0x2de54480
 801c564:	1b6b0b00 	.word	0x1b6b0b00
 801c568:	1954fc40 	.word	0x1954fc40

0801c56c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c56c:	b590      	push	{r4, r7, lr}
 801c56e:	b085      	sub	sp, #20
 801c570:	af00      	add	r7, sp, #0
 801c572:	4604      	mov	r4, r0
 801c574:	4608      	mov	r0, r1
 801c576:	4611      	mov	r1, r2
 801c578:	461a      	mov	r2, r3
 801c57a:	4623      	mov	r3, r4
 801c57c:	71fb      	strb	r3, [r7, #7]
 801c57e:	4603      	mov	r3, r0
 801c580:	71bb      	strb	r3, [r7, #6]
 801c582:	460b      	mov	r3, r1
 801c584:	717b      	strb	r3, [r7, #5]
 801c586:	4613      	mov	r3, r2
 801c588:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c58a:	79fb      	ldrb	r3, [r7, #7]
 801c58c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c58e:	79bb      	ldrb	r3, [r7, #6]
 801c590:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c592:	797b      	ldrb	r3, [r7, #5]
 801c594:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c596:	793b      	ldrb	r3, [r7, #4]
 801c598:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c59a:	f107 030c 	add.w	r3, r7, #12
 801c59e:	2204      	movs	r2, #4
 801c5a0:	4619      	mov	r1, r3
 801c5a2:	2095      	movs	r0, #149	; 0x95
 801c5a4:	f000 fc64 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c5a8:	bf00      	nop
 801c5aa:	3714      	adds	r7, #20
 801c5ac:	46bd      	mov	sp, r7
 801c5ae:	bd90      	pop	{r4, r7, pc}

0801c5b0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c5b0:	b590      	push	{r4, r7, lr}
 801c5b2:	b085      	sub	sp, #20
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	4604      	mov	r4, r0
 801c5b8:	4608      	mov	r0, r1
 801c5ba:	4611      	mov	r1, r2
 801c5bc:	461a      	mov	r2, r3
 801c5be:	4623      	mov	r3, r4
 801c5c0:	80fb      	strh	r3, [r7, #6]
 801c5c2:	4603      	mov	r3, r0
 801c5c4:	80bb      	strh	r3, [r7, #4]
 801c5c6:	460b      	mov	r3, r1
 801c5c8:	807b      	strh	r3, [r7, #2]
 801c5ca:	4613      	mov	r3, r2
 801c5cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c5ce:	88fb      	ldrh	r3, [r7, #6]
 801c5d0:	0a1b      	lsrs	r3, r3, #8
 801c5d2:	b29b      	uxth	r3, r3
 801c5d4:	b2db      	uxtb	r3, r3
 801c5d6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c5d8:	88fb      	ldrh	r3, [r7, #6]
 801c5da:	b2db      	uxtb	r3, r3
 801c5dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c5de:	88bb      	ldrh	r3, [r7, #4]
 801c5e0:	0a1b      	lsrs	r3, r3, #8
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	b2db      	uxtb	r3, r3
 801c5e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c5e8:	88bb      	ldrh	r3, [r7, #4]
 801c5ea:	b2db      	uxtb	r3, r3
 801c5ec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c5ee:	887b      	ldrh	r3, [r7, #2]
 801c5f0:	0a1b      	lsrs	r3, r3, #8
 801c5f2:	b29b      	uxth	r3, r3
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c5f8:	887b      	ldrh	r3, [r7, #2]
 801c5fa:	b2db      	uxtb	r3, r3
 801c5fc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c5fe:	883b      	ldrh	r3, [r7, #0]
 801c600:	0a1b      	lsrs	r3, r3, #8
 801c602:	b29b      	uxth	r3, r3
 801c604:	b2db      	uxtb	r3, r3
 801c606:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c608:	883b      	ldrh	r3, [r7, #0]
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c60e:	f107 0308 	add.w	r3, r7, #8
 801c612:	2208      	movs	r2, #8
 801c614:	4619      	mov	r1, r3
 801c616:	2008      	movs	r0, #8
 801c618:	f000 fc2a 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c61c:	bf00      	nop
 801c61e:	3714      	adds	r7, #20
 801c620:	46bd      	mov	sp, r7
 801c622:	bd90      	pop	{r4, r7, pc}

0801c624 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c624:	b580      	push	{r7, lr}
 801c626:	b084      	sub	sp, #16
 801c628:	af00      	add	r7, sp, #0
 801c62a:	4603      	mov	r3, r0
 801c62c:	6039      	str	r1, [r7, #0]
 801c62e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c630:	79fb      	ldrb	r3, [r7, #7]
 801c632:	f003 0307 	and.w	r3, r3, #7
 801c636:	b2db      	uxtb	r3, r3
 801c638:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c63a:	683b      	ldr	r3, [r7, #0]
 801c63c:	0c1b      	lsrs	r3, r3, #16
 801c63e:	b2db      	uxtb	r3, r3
 801c640:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c642:	683b      	ldr	r3, [r7, #0]
 801c644:	0a1b      	lsrs	r3, r3, #8
 801c646:	b2db      	uxtb	r3, r3
 801c648:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c64a:	683b      	ldr	r3, [r7, #0]
 801c64c:	b2db      	uxtb	r3, r3
 801c64e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c650:	f107 030c 	add.w	r3, r7, #12
 801c654:	2204      	movs	r2, #4
 801c656:	4619      	mov	r1, r3
 801c658:	2097      	movs	r0, #151	; 0x97
 801c65a:	f000 fc09 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c65e:	bf00      	nop
 801c660:	3710      	adds	r7, #16
 801c662:	46bd      	mov	sp, r7
 801c664:	bd80      	pop	{r7, pc}
	...

0801c668 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c66c:	b084      	sub	sp, #16
 801c66e:	af00      	add	r7, sp, #0
 801c670:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c672:	2300      	movs	r3, #0
 801c674:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c676:	4b1d      	ldr	r3, [pc, #116]	; (801c6ec <SUBGRF_SetRfFrequency+0x84>)
 801c678:	781b      	ldrb	r3, [r3, #0]
 801c67a:	f083 0301 	eor.w	r3, r3, #1
 801c67e:	b2db      	uxtb	r3, r3
 801c680:	2b00      	cmp	r3, #0
 801c682:	d005      	beq.n	801c690 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	f7ff ff27 	bl	801c4d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c68a:	4b18      	ldr	r3, [pc, #96]	; (801c6ec <SUBGRF_SetRfFrequency+0x84>)
 801c68c:	2201      	movs	r2, #1
 801c68e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	2200      	movs	r2, #0
 801c694:	461c      	mov	r4, r3
 801c696:	4615      	mov	r5, r2
 801c698:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c69c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c6a0:	4a13      	ldr	r2, [pc, #76]	; (801c6f0 <SUBGRF_SetRfFrequency+0x88>)
 801c6a2:	f04f 0300 	mov.w	r3, #0
 801c6a6:	4640      	mov	r0, r8
 801c6a8:	4649      	mov	r1, r9
 801c6aa:	f7e4 fb6f 	bl	8000d8c <__aeabi_uldivmod>
 801c6ae:	4602      	mov	r2, r0
 801c6b0:	460b      	mov	r3, r1
 801c6b2:	4613      	mov	r3, r2
 801c6b4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c6b6:	68fb      	ldr	r3, [r7, #12]
 801c6b8:	0e1b      	lsrs	r3, r3, #24
 801c6ba:	b2db      	uxtb	r3, r3
 801c6bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	0c1b      	lsrs	r3, r3, #16
 801c6c2:	b2db      	uxtb	r3, r3
 801c6c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c6c6:	68fb      	ldr	r3, [r7, #12]
 801c6c8:	0a1b      	lsrs	r3, r3, #8
 801c6ca:	b2db      	uxtb	r3, r3
 801c6cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c6ce:	68fb      	ldr	r3, [r7, #12]
 801c6d0:	b2db      	uxtb	r3, r3
 801c6d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c6d4:	f107 0308 	add.w	r3, r7, #8
 801c6d8:	2204      	movs	r2, #4
 801c6da:	4619      	mov	r1, r3
 801c6dc:	2086      	movs	r0, #134	; 0x86
 801c6de:	f000 fbc7 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c6e2:	bf00      	nop
 801c6e4:	3710      	adds	r7, #16
 801c6e6:	46bd      	mov	sp, r7
 801c6e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c6ec:	200018c4 	.word	0x200018c4
 801c6f0:	01e84800 	.word	0x01e84800

0801c6f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b082      	sub	sp, #8
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	4603      	mov	r3, r0
 801c6fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c6fe:	79fa      	ldrb	r2, [r7, #7]
 801c700:	4b09      	ldr	r3, [pc, #36]	; (801c728 <SUBGRF_SetPacketType+0x34>)
 801c702:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c704:	79fb      	ldrb	r3, [r7, #7]
 801c706:	2b00      	cmp	r3, #0
 801c708:	d104      	bne.n	801c714 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c70a:	2100      	movs	r1, #0
 801c70c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c710:	f000 fafe 	bl	801cd10 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c714:	1dfb      	adds	r3, r7, #7
 801c716:	2201      	movs	r2, #1
 801c718:	4619      	mov	r1, r3
 801c71a:	208a      	movs	r0, #138	; 0x8a
 801c71c:	f000 fba8 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c720:	bf00      	nop
 801c722:	3708      	adds	r7, #8
 801c724:	46bd      	mov	sp, r7
 801c726:	bd80      	pop	{r7, pc}
 801c728:	200018bd 	.word	0x200018bd

0801c72c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c72c:	b480      	push	{r7}
 801c72e:	af00      	add	r7, sp, #0
    return PacketType;
 801c730:	4b02      	ldr	r3, [pc, #8]	; (801c73c <SUBGRF_GetPacketType+0x10>)
 801c732:	781b      	ldrb	r3, [r3, #0]
}
 801c734:	4618      	mov	r0, r3
 801c736:	46bd      	mov	sp, r7
 801c738:	bc80      	pop	{r7}
 801c73a:	4770      	bx	lr
 801c73c:	200018bd 	.word	0x200018bd

0801c740 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b084      	sub	sp, #16
 801c744:	af00      	add	r7, sp, #0
 801c746:	4603      	mov	r3, r0
 801c748:	71fb      	strb	r3, [r7, #7]
 801c74a:	460b      	mov	r3, r1
 801c74c:	71bb      	strb	r3, [r7, #6]
 801c74e:	4613      	mov	r3, r2
 801c750:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c752:	79fb      	ldrb	r3, [r7, #7]
 801c754:	2b01      	cmp	r3, #1
 801c756:	d149      	bne.n	801c7ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c758:	2000      	movs	r0, #0
 801c75a:	f7f1 fb07 	bl	800dd6c <RBI_GetRFOMaxPowerConfig>
 801c75e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c760:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c764:	68fa      	ldr	r2, [r7, #12]
 801c766:	429a      	cmp	r2, r3
 801c768:	da01      	bge.n	801c76e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	2b0e      	cmp	r3, #14
 801c772:	d10e      	bne.n	801c792 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c774:	2301      	movs	r3, #1
 801c776:	2201      	movs	r2, #1
 801c778:	2100      	movs	r1, #0
 801c77a:	2004      	movs	r0, #4
 801c77c:	f7ff fef6 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c780:	79ba      	ldrb	r2, [r7, #6]
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	b2db      	uxtb	r3, r3
 801c786:	1ad3      	subs	r3, r2, r3
 801c788:	b2db      	uxtb	r3, r3
 801c78a:	330e      	adds	r3, #14
 801c78c:	b2db      	uxtb	r3, r3
 801c78e:	71bb      	strb	r3, [r7, #6]
 801c790:	e01f      	b.n	801c7d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	2b0a      	cmp	r3, #10
 801c796:	d10e      	bne.n	801c7b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c798:	2301      	movs	r3, #1
 801c79a:	2201      	movs	r2, #1
 801c79c:	2100      	movs	r1, #0
 801c79e:	2001      	movs	r0, #1
 801c7a0:	f7ff fee4 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c7a4:	79ba      	ldrb	r2, [r7, #6]
 801c7a6:	68fb      	ldr	r3, [r7, #12]
 801c7a8:	b2db      	uxtb	r3, r3
 801c7aa:	1ad3      	subs	r3, r2, r3
 801c7ac:	b2db      	uxtb	r3, r3
 801c7ae:	330d      	adds	r3, #13
 801c7b0:	b2db      	uxtb	r3, r3
 801c7b2:	71bb      	strb	r3, [r7, #6]
 801c7b4:	e00d      	b.n	801c7d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c7b6:	2301      	movs	r3, #1
 801c7b8:	2201      	movs	r2, #1
 801c7ba:	2100      	movs	r1, #0
 801c7bc:	2007      	movs	r0, #7
 801c7be:	f7ff fed5 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7c2:	79ba      	ldrb	r2, [r7, #6]
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	b2db      	uxtb	r3, r3
 801c7c8:	1ad3      	subs	r3, r2, r3
 801c7ca:	b2db      	uxtb	r3, r3
 801c7cc:	330e      	adds	r3, #14
 801c7ce:	b2db      	uxtb	r3, r3
 801c7d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c7d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c7d6:	f113 0f11 	cmn.w	r3, #17
 801c7da:	da01      	bge.n	801c7e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c7dc:	23ef      	movs	r3, #239	; 0xef
 801c7de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c7e0:	2118      	movs	r1, #24
 801c7e2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c7e6:	f000 fa93 	bl	801cd10 <SUBGRF_WriteRegister>
 801c7ea:	e067      	b.n	801c8bc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c7ec:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c7f0:	f000 faa2 	bl	801cd38 <SUBGRF_ReadRegister>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	f043 031e 	orr.w	r3, r3, #30
 801c7fa:	b2db      	uxtb	r3, r3
 801c7fc:	4619      	mov	r1, r3
 801c7fe:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c802:	f000 fa85 	bl	801cd10 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c806:	2001      	movs	r0, #1
 801c808:	f7f1 fab0 	bl	800dd6c <RBI_GetRFOMaxPowerConfig>
 801c80c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c80e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c812:	68fa      	ldr	r2, [r7, #12]
 801c814:	429a      	cmp	r2, r3
 801c816:	da01      	bge.n	801c81c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	2b14      	cmp	r3, #20
 801c820:	d10e      	bne.n	801c840 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c822:	2301      	movs	r3, #1
 801c824:	2200      	movs	r2, #0
 801c826:	2105      	movs	r1, #5
 801c828:	2003      	movs	r0, #3
 801c82a:	f7ff fe9f 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c82e:	79ba      	ldrb	r2, [r7, #6]
 801c830:	68fb      	ldr	r3, [r7, #12]
 801c832:	b2db      	uxtb	r3, r3
 801c834:	1ad3      	subs	r3, r2, r3
 801c836:	b2db      	uxtb	r3, r3
 801c838:	3316      	adds	r3, #22
 801c83a:	b2db      	uxtb	r3, r3
 801c83c:	71bb      	strb	r3, [r7, #6]
 801c83e:	e031      	b.n	801c8a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	2b11      	cmp	r3, #17
 801c844:	d10e      	bne.n	801c864 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c846:	2301      	movs	r3, #1
 801c848:	2200      	movs	r2, #0
 801c84a:	2103      	movs	r1, #3
 801c84c:	2002      	movs	r0, #2
 801c84e:	f7ff fe8d 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c852:	79ba      	ldrb	r2, [r7, #6]
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	b2db      	uxtb	r3, r3
 801c858:	1ad3      	subs	r3, r2, r3
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	3316      	adds	r3, #22
 801c85e:	b2db      	uxtb	r3, r3
 801c860:	71bb      	strb	r3, [r7, #6]
 801c862:	e01f      	b.n	801c8a4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	2b0e      	cmp	r3, #14
 801c868:	d10e      	bne.n	801c888 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c86a:	2301      	movs	r3, #1
 801c86c:	2200      	movs	r2, #0
 801c86e:	2102      	movs	r1, #2
 801c870:	2002      	movs	r0, #2
 801c872:	f7ff fe7b 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c876:	79ba      	ldrb	r2, [r7, #6]
 801c878:	68fb      	ldr	r3, [r7, #12]
 801c87a:	b2db      	uxtb	r3, r3
 801c87c:	1ad3      	subs	r3, r2, r3
 801c87e:	b2db      	uxtb	r3, r3
 801c880:	330e      	adds	r3, #14
 801c882:	b2db      	uxtb	r3, r3
 801c884:	71bb      	strb	r3, [r7, #6]
 801c886:	e00d      	b.n	801c8a4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c888:	2301      	movs	r3, #1
 801c88a:	2200      	movs	r2, #0
 801c88c:	2107      	movs	r1, #7
 801c88e:	2004      	movs	r0, #4
 801c890:	f7ff fe6c 	bl	801c56c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c894:	79ba      	ldrb	r2, [r7, #6]
 801c896:	68fb      	ldr	r3, [r7, #12]
 801c898:	b2db      	uxtb	r3, r3
 801c89a:	1ad3      	subs	r3, r2, r3
 801c89c:	b2db      	uxtb	r3, r3
 801c89e:	3316      	adds	r3, #22
 801c8a0:	b2db      	uxtb	r3, r3
 801c8a2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c8a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c8a8:	f113 0f09 	cmn.w	r3, #9
 801c8ac:	da01      	bge.n	801c8b2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c8ae:	23f7      	movs	r3, #247	; 0xf7
 801c8b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c8b2:	2138      	movs	r1, #56	; 0x38
 801c8b4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c8b8:	f000 fa2a 	bl	801cd10 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c8bc:	79bb      	ldrb	r3, [r7, #6]
 801c8be:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c8c0:	797b      	ldrb	r3, [r7, #5]
 801c8c2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c8c4:	f107 0308 	add.w	r3, r7, #8
 801c8c8:	2202      	movs	r2, #2
 801c8ca:	4619      	mov	r1, r3
 801c8cc:	208e      	movs	r0, #142	; 0x8e
 801c8ce:	f000 facf 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801c8d2:	bf00      	nop
 801c8d4:	3710      	adds	r7, #16
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}
	...

0801c8dc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c8dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c8e0:	b086      	sub	sp, #24
 801c8e2:	af00      	add	r7, sp, #0
 801c8e4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c8ea:	4a61      	ldr	r2, [pc, #388]	; (801ca70 <SUBGRF_SetModulationParams+0x194>)
 801c8ec:	f107 0308 	add.w	r3, r7, #8
 801c8f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c8f4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	781a      	ldrb	r2, [r3, #0]
 801c8fc:	4b5d      	ldr	r3, [pc, #372]	; (801ca74 <SUBGRF_SetModulationParams+0x198>)
 801c8fe:	781b      	ldrb	r3, [r3, #0]
 801c900:	429a      	cmp	r2, r3
 801c902:	d004      	beq.n	801c90e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	781b      	ldrb	r3, [r3, #0]
 801c908:	4618      	mov	r0, r3
 801c90a:	f7ff fef3 	bl	801c6f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	781b      	ldrb	r3, [r3, #0]
 801c912:	2b03      	cmp	r3, #3
 801c914:	f200 80a5 	bhi.w	801ca62 <SUBGRF_SetModulationParams+0x186>
 801c918:	a201      	add	r2, pc, #4	; (adr r2, 801c920 <SUBGRF_SetModulationParams+0x44>)
 801c91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c91e:	bf00      	nop
 801c920:	0801c931 	.word	0x0801c931
 801c924:	0801c9f1 	.word	0x0801c9f1
 801c928:	0801c9b3 	.word	0x0801c9b3
 801c92c:	0801ca1f 	.word	0x0801ca1f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c930:	2308      	movs	r3, #8
 801c932:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	685b      	ldr	r3, [r3, #4]
 801c938:	4a4f      	ldr	r2, [pc, #316]	; (801ca78 <SUBGRF_SetModulationParams+0x19c>)
 801c93a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c93e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c940:	697b      	ldr	r3, [r7, #20]
 801c942:	0c1b      	lsrs	r3, r3, #16
 801c944:	b2db      	uxtb	r3, r3
 801c946:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c948:	697b      	ldr	r3, [r7, #20]
 801c94a:	0a1b      	lsrs	r3, r3, #8
 801c94c:	b2db      	uxtb	r3, r3
 801c94e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c950:	697b      	ldr	r3, [r7, #20]
 801c952:	b2db      	uxtb	r3, r3
 801c954:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	7b1b      	ldrb	r3, [r3, #12]
 801c95a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	7b5b      	ldrb	r3, [r3, #13]
 801c960:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	689b      	ldr	r3, [r3, #8]
 801c966:	2200      	movs	r2, #0
 801c968:	461c      	mov	r4, r3
 801c96a:	4615      	mov	r5, r2
 801c96c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c970:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c974:	4a41      	ldr	r2, [pc, #260]	; (801ca7c <SUBGRF_SetModulationParams+0x1a0>)
 801c976:	f04f 0300 	mov.w	r3, #0
 801c97a:	4640      	mov	r0, r8
 801c97c:	4649      	mov	r1, r9
 801c97e:	f7e4 fa05 	bl	8000d8c <__aeabi_uldivmod>
 801c982:	4602      	mov	r2, r0
 801c984:	460b      	mov	r3, r1
 801c986:	4613      	mov	r3, r2
 801c988:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c98a:	697b      	ldr	r3, [r7, #20]
 801c98c:	0c1b      	lsrs	r3, r3, #16
 801c98e:	b2db      	uxtb	r3, r3
 801c990:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	0a1b      	lsrs	r3, r3, #8
 801c996:	b2db      	uxtb	r3, r3
 801c998:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c99a:	697b      	ldr	r3, [r7, #20]
 801c99c:	b2db      	uxtb	r3, r3
 801c99e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9a0:	7cfb      	ldrb	r3, [r7, #19]
 801c9a2:	b29a      	uxth	r2, r3
 801c9a4:	f107 0308 	add.w	r3, r7, #8
 801c9a8:	4619      	mov	r1, r3
 801c9aa:	208b      	movs	r0, #139	; 0x8b
 801c9ac:	f000 fa60 	bl	801ce70 <SUBGRF_WriteCommand>
        break;
 801c9b0:	e058      	b.n	801ca64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c9b2:	2304      	movs	r3, #4
 801c9b4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c9b6:	687b      	ldr	r3, [r7, #4]
 801c9b8:	691b      	ldr	r3, [r3, #16]
 801c9ba:	4a2f      	ldr	r2, [pc, #188]	; (801ca78 <SUBGRF_SetModulationParams+0x19c>)
 801c9bc:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9c0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c9c2:	697b      	ldr	r3, [r7, #20]
 801c9c4:	0c1b      	lsrs	r3, r3, #16
 801c9c6:	b2db      	uxtb	r3, r3
 801c9c8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	0a1b      	lsrs	r3, r3, #8
 801c9ce:	b2db      	uxtb	r3, r3
 801c9d0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c9d2:	697b      	ldr	r3, [r7, #20]
 801c9d4:	b2db      	uxtb	r3, r3
 801c9d6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	7d1b      	ldrb	r3, [r3, #20]
 801c9dc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9de:	7cfb      	ldrb	r3, [r7, #19]
 801c9e0:	b29a      	uxth	r2, r3
 801c9e2:	f107 0308 	add.w	r3, r7, #8
 801c9e6:	4619      	mov	r1, r3
 801c9e8:	208b      	movs	r0, #139	; 0x8b
 801c9ea:	f000 fa41 	bl	801ce70 <SUBGRF_WriteCommand>
        break;
 801c9ee:	e039      	b.n	801ca64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c9f0:	2304      	movs	r3, #4
 801c9f2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	7e1b      	ldrb	r3, [r3, #24]
 801c9f8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	7e5b      	ldrb	r3, [r3, #25]
 801c9fe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	7e9b      	ldrb	r3, [r3, #26]
 801ca04:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ca06:	687b      	ldr	r3, [r7, #4]
 801ca08:	7edb      	ldrb	r3, [r3, #27]
 801ca0a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca0c:	7cfb      	ldrb	r3, [r7, #19]
 801ca0e:	b29a      	uxth	r2, r3
 801ca10:	f107 0308 	add.w	r3, r7, #8
 801ca14:	4619      	mov	r1, r3
 801ca16:	208b      	movs	r0, #139	; 0x8b
 801ca18:	f000 fa2a 	bl	801ce70 <SUBGRF_WriteCommand>

        break;
 801ca1c:	e022      	b.n	801ca64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ca1e:	2305      	movs	r3, #5
 801ca20:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	685b      	ldr	r3, [r3, #4]
 801ca26:	4a14      	ldr	r2, [pc, #80]	; (801ca78 <SUBGRF_SetModulationParams+0x19c>)
 801ca28:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca2c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca2e:	697b      	ldr	r3, [r7, #20]
 801ca30:	0c1b      	lsrs	r3, r3, #16
 801ca32:	b2db      	uxtb	r3, r3
 801ca34:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca36:	697b      	ldr	r3, [r7, #20]
 801ca38:	0a1b      	lsrs	r3, r3, #8
 801ca3a:	b2db      	uxtb	r3, r3
 801ca3c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	b2db      	uxtb	r3, r3
 801ca42:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	7b1b      	ldrb	r3, [r3, #12]
 801ca48:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	7b5b      	ldrb	r3, [r3, #13]
 801ca4e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca50:	7cfb      	ldrb	r3, [r7, #19]
 801ca52:	b29a      	uxth	r2, r3
 801ca54:	f107 0308 	add.w	r3, r7, #8
 801ca58:	4619      	mov	r1, r3
 801ca5a:	208b      	movs	r0, #139	; 0x8b
 801ca5c:	f000 fa08 	bl	801ce70 <SUBGRF_WriteCommand>
        break;
 801ca60:	e000      	b.n	801ca64 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ca62:	bf00      	nop
    }
}
 801ca64:	bf00      	nop
 801ca66:	3718      	adds	r7, #24
 801ca68:	46bd      	mov	sp, r7
 801ca6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ca6e:	bf00      	nop
 801ca70:	0801f49c 	.word	0x0801f49c
 801ca74:	200018bd 	.word	0x200018bd
 801ca78:	3d090000 	.word	0x3d090000
 801ca7c:	01e84800 	.word	0x01e84800

0801ca80 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ca80:	b580      	push	{r7, lr}
 801ca82:	b086      	sub	sp, #24
 801ca84:	af00      	add	r7, sp, #0
 801ca86:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ca88:	2300      	movs	r3, #0
 801ca8a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ca8c:	4a48      	ldr	r2, [pc, #288]	; (801cbb0 <SUBGRF_SetPacketParams+0x130>)
 801ca8e:	f107 030c 	add.w	r3, r7, #12
 801ca92:	ca07      	ldmia	r2, {r0, r1, r2}
 801ca94:	c303      	stmia	r3!, {r0, r1}
 801ca96:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	781a      	ldrb	r2, [r3, #0]
 801ca9c:	4b45      	ldr	r3, [pc, #276]	; (801cbb4 <SUBGRF_SetPacketParams+0x134>)
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	429a      	cmp	r2, r3
 801caa2:	d004      	beq.n	801caae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	781b      	ldrb	r3, [r3, #0]
 801caa8:	4618      	mov	r0, r3
 801caaa:	f7ff fe23 	bl	801c6f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	781b      	ldrb	r3, [r3, #0]
 801cab2:	2b03      	cmp	r3, #3
 801cab4:	d878      	bhi.n	801cba8 <SUBGRF_SetPacketParams+0x128>
 801cab6:	a201      	add	r2, pc, #4	; (adr r2, 801cabc <SUBGRF_SetPacketParams+0x3c>)
 801cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cabc:	0801cacd 	.word	0x0801cacd
 801cac0:	0801cb5d 	.word	0x0801cb5d
 801cac4:	0801cb51 	.word	0x0801cb51
 801cac8:	0801cacd 	.word	0x0801cacd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	7a5b      	ldrb	r3, [r3, #9]
 801cad0:	2bf1      	cmp	r3, #241	; 0xf1
 801cad2:	d10a      	bne.n	801caea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cad4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cad8:	f7ff faaa 	bl	801c030 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cadc:	f248 0005 	movw	r0, #32773	; 0x8005
 801cae0:	f7ff fac6 	bl	801c070 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cae4:	2302      	movs	r3, #2
 801cae6:	75bb      	strb	r3, [r7, #22]
 801cae8:	e011      	b.n	801cb0e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801caea:	687b      	ldr	r3, [r7, #4]
 801caec:	7a5b      	ldrb	r3, [r3, #9]
 801caee:	2bf2      	cmp	r3, #242	; 0xf2
 801caf0:	d10a      	bne.n	801cb08 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801caf2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801caf6:	f7ff fa9b 	bl	801c030 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cafa:	f241 0021 	movw	r0, #4129	; 0x1021
 801cafe:	f7ff fab7 	bl	801c070 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cb02:	2306      	movs	r3, #6
 801cb04:	75bb      	strb	r3, [r7, #22]
 801cb06:	e002      	b.n	801cb0e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	7a5b      	ldrb	r3, [r3, #9]
 801cb0c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cb0e:	2309      	movs	r3, #9
 801cb10:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	885b      	ldrh	r3, [r3, #2]
 801cb16:	0a1b      	lsrs	r3, r3, #8
 801cb18:	b29b      	uxth	r3, r3
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	885b      	ldrh	r3, [r3, #2]
 801cb22:	b2db      	uxtb	r3, r3
 801cb24:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	791b      	ldrb	r3, [r3, #4]
 801cb2a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	795b      	ldrb	r3, [r3, #5]
 801cb30:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	799b      	ldrb	r3, [r3, #6]
 801cb36:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	79db      	ldrb	r3, [r3, #7]
 801cb3c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	7a1b      	ldrb	r3, [r3, #8]
 801cb42:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cb44:	7dbb      	ldrb	r3, [r7, #22]
 801cb46:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	7a9b      	ldrb	r3, [r3, #10]
 801cb4c:	753b      	strb	r3, [r7, #20]
        break;
 801cb4e:	e022      	b.n	801cb96 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cb50:	2301      	movs	r3, #1
 801cb52:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	7b1b      	ldrb	r3, [r3, #12]
 801cb58:	733b      	strb	r3, [r7, #12]
        break;
 801cb5a:	e01c      	b.n	801cb96 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cb5c:	2306      	movs	r3, #6
 801cb5e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	89db      	ldrh	r3, [r3, #14]
 801cb64:	0a1b      	lsrs	r3, r3, #8
 801cb66:	b29b      	uxth	r3, r3
 801cb68:	b2db      	uxtb	r3, r3
 801cb6a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	89db      	ldrh	r3, [r3, #14]
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	7c1a      	ldrb	r2, [r3, #16]
 801cb78:	4b0f      	ldr	r3, [pc, #60]	; (801cbb8 <SUBGRF_SetPacketParams+0x138>)
 801cb7a:	4611      	mov	r1, r2
 801cb7c:	7019      	strb	r1, [r3, #0]
 801cb7e:	4613      	mov	r3, r2
 801cb80:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	7c5b      	ldrb	r3, [r3, #17]
 801cb86:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	7c9b      	ldrb	r3, [r3, #18]
 801cb8c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	7cdb      	ldrb	r3, [r3, #19]
 801cb92:	747b      	strb	r3, [r7, #17]
        break;
 801cb94:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cb96:	7dfb      	ldrb	r3, [r7, #23]
 801cb98:	b29a      	uxth	r2, r3
 801cb9a:	f107 030c 	add.w	r3, r7, #12
 801cb9e:	4619      	mov	r1, r3
 801cba0:	208c      	movs	r0, #140	; 0x8c
 801cba2:	f000 f965 	bl	801ce70 <SUBGRF_WriteCommand>
 801cba6:	e000      	b.n	801cbaa <SUBGRF_SetPacketParams+0x12a>
        return;
 801cba8:	bf00      	nop
}
 801cbaa:	3718      	adds	r7, #24
 801cbac:	46bd      	mov	sp, r7
 801cbae:	bd80      	pop	{r7, pc}
 801cbb0:	0801f4a4 	.word	0x0801f4a4
 801cbb4:	200018bd 	.word	0x200018bd
 801cbb8:	200018be 	.word	0x200018be

0801cbbc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cbbc:	b580      	push	{r7, lr}
 801cbbe:	b084      	sub	sp, #16
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	460a      	mov	r2, r1
 801cbc6:	71fb      	strb	r3, [r7, #7]
 801cbc8:	4613      	mov	r3, r2
 801cbca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cbcc:	79fb      	ldrb	r3, [r7, #7]
 801cbce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cbd0:	79bb      	ldrb	r3, [r7, #6]
 801cbd2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cbd4:	f107 030c 	add.w	r3, r7, #12
 801cbd8:	2202      	movs	r2, #2
 801cbda:	4619      	mov	r1, r3
 801cbdc:	208f      	movs	r0, #143	; 0x8f
 801cbde:	f000 f947 	bl	801ce70 <SUBGRF_WriteCommand>
}
 801cbe2:	bf00      	nop
 801cbe4:	3710      	adds	r7, #16
 801cbe6:	46bd      	mov	sp, r7
 801cbe8:	bd80      	pop	{r7, pc}

0801cbea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cbea:	b580      	push	{r7, lr}
 801cbec:	b082      	sub	sp, #8
 801cbee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cbf0:	2300      	movs	r3, #0
 801cbf2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cbf4:	1d3b      	adds	r3, r7, #4
 801cbf6:	2201      	movs	r2, #1
 801cbf8:	4619      	mov	r1, r3
 801cbfa:	2015      	movs	r0, #21
 801cbfc:	f000 f95a 	bl	801ceb4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cc00:	793b      	ldrb	r3, [r7, #4]
 801cc02:	425b      	negs	r3, r3
 801cc04:	105b      	asrs	r3, r3, #1
 801cc06:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cc08:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	3708      	adds	r7, #8
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}

0801cc14 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b084      	sub	sp, #16
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6078      	str	r0, [r7, #4]
 801cc1c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cc1e:	f107 030c 	add.w	r3, r7, #12
 801cc22:	2202      	movs	r2, #2
 801cc24:	4619      	mov	r1, r3
 801cc26:	2013      	movs	r0, #19
 801cc28:	f000 f944 	bl	801ceb4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cc2c:	f7ff fd7e 	bl	801c72c <SUBGRF_GetPacketType>
 801cc30:	4603      	mov	r3, r0
 801cc32:	2b01      	cmp	r3, #1
 801cc34:	d10d      	bne.n	801cc52 <SUBGRF_GetRxBufferStatus+0x3e>
 801cc36:	4b0c      	ldr	r3, [pc, #48]	; (801cc68 <SUBGRF_GetRxBufferStatus+0x54>)
 801cc38:	781b      	ldrb	r3, [r3, #0]
 801cc3a:	b2db      	uxtb	r3, r3
 801cc3c:	2b01      	cmp	r3, #1
 801cc3e:	d108      	bne.n	801cc52 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cc40:	f240 7002 	movw	r0, #1794	; 0x702
 801cc44:	f000 f878 	bl	801cd38 <SUBGRF_ReadRegister>
 801cc48:	4603      	mov	r3, r0
 801cc4a:	461a      	mov	r2, r3
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	701a      	strb	r2, [r3, #0]
 801cc50:	e002      	b.n	801cc58 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cc52:	7b3a      	ldrb	r2, [r7, #12]
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cc58:	7b7a      	ldrb	r2, [r7, #13]
 801cc5a:	683b      	ldr	r3, [r7, #0]
 801cc5c:	701a      	strb	r2, [r3, #0]
}
 801cc5e:	bf00      	nop
 801cc60:	3710      	adds	r7, #16
 801cc62:	46bd      	mov	sp, r7
 801cc64:	bd80      	pop	{r7, pc}
 801cc66:	bf00      	nop
 801cc68:	200018be 	.word	0x200018be

0801cc6c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b084      	sub	sp, #16
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cc74:	f107 030c 	add.w	r3, r7, #12
 801cc78:	2203      	movs	r2, #3
 801cc7a:	4619      	mov	r1, r3
 801cc7c:	2014      	movs	r0, #20
 801cc7e:	f000 f919 	bl	801ceb4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cc82:	f7ff fd53 	bl	801c72c <SUBGRF_GetPacketType>
 801cc86:	4603      	mov	r3, r0
 801cc88:	461a      	mov	r2, r3
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	781b      	ldrb	r3, [r3, #0]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d002      	beq.n	801cc9c <SUBGRF_GetPacketStatus+0x30>
 801cc96:	2b01      	cmp	r3, #1
 801cc98:	d013      	beq.n	801ccc2 <SUBGRF_GetPacketStatus+0x56>
 801cc9a:	e02a      	b.n	801ccf2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cc9c:	7b3a      	ldrb	r2, [r7, #12]
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801cca2:	7b7b      	ldrb	r3, [r7, #13]
 801cca4:	425b      	negs	r3, r3
 801cca6:	105b      	asrs	r3, r3, #1
 801cca8:	b25a      	sxtb	r2, r3
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ccae:	7bbb      	ldrb	r3, [r7, #14]
 801ccb0:	425b      	negs	r3, r3
 801ccb2:	105b      	asrs	r3, r3, #1
 801ccb4:	b25a      	sxtb	r2, r3
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	609a      	str	r2, [r3, #8]
            break;
 801ccc0:	e020      	b.n	801cd04 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ccc2:	7b3b      	ldrb	r3, [r7, #12]
 801ccc4:	425b      	negs	r3, r3
 801ccc6:	105b      	asrs	r3, r3, #1
 801ccc8:	b25a      	sxtb	r2, r3
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ccce:	7b7b      	ldrb	r3, [r7, #13]
 801ccd0:	b25b      	sxtb	r3, r3
 801ccd2:	3302      	adds	r3, #2
 801ccd4:	109b      	asrs	r3, r3, #2
 801ccd6:	b25a      	sxtb	r2, r3
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801ccdc:	7bbb      	ldrb	r3, [r7, #14]
 801ccde:	425b      	negs	r3, r3
 801cce0:	105b      	asrs	r3, r3, #1
 801cce2:	b25a      	sxtb	r2, r3
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801cce8:	4b08      	ldr	r3, [pc, #32]	; (801cd0c <SUBGRF_GetPacketStatus+0xa0>)
 801ccea:	681a      	ldr	r2, [r3, #0]
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	611a      	str	r2, [r3, #16]
            break;
 801ccf0:	e008      	b.n	801cd04 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801ccf2:	2214      	movs	r2, #20
 801ccf4:	2100      	movs	r1, #0
 801ccf6:	6878      	ldr	r0, [r7, #4]
 801ccf8:	f000 fc03 	bl	801d502 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	220f      	movs	r2, #15
 801cd00:	701a      	strb	r2, [r3, #0]
            break;
 801cd02:	bf00      	nop
    }
}
 801cd04:	bf00      	nop
 801cd06:	3710      	adds	r7, #16
 801cd08:	46bd      	mov	sp, r7
 801cd0a:	bd80      	pop	{r7, pc}
 801cd0c:	200018c0 	.word	0x200018c0

0801cd10 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cd10:	b580      	push	{r7, lr}
 801cd12:	b082      	sub	sp, #8
 801cd14:	af00      	add	r7, sp, #0
 801cd16:	4603      	mov	r3, r0
 801cd18:	460a      	mov	r2, r1
 801cd1a:	80fb      	strh	r3, [r7, #6]
 801cd1c:	4613      	mov	r3, r2
 801cd1e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cd20:	1d7a      	adds	r2, r7, #5
 801cd22:	88f9      	ldrh	r1, [r7, #6]
 801cd24:	2301      	movs	r3, #1
 801cd26:	4803      	ldr	r0, [pc, #12]	; (801cd34 <SUBGRF_WriteRegister+0x24>)
 801cd28:	f7ed f8be 	bl	8009ea8 <HAL_SUBGHZ_WriteRegisters>
}
 801cd2c:	bf00      	nop
 801cd2e:	3708      	adds	r7, #8
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}
 801cd34:	200003a0 	.word	0x200003a0

0801cd38 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b084      	sub	sp, #16
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	4603      	mov	r3, r0
 801cd40:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cd42:	f107 020f 	add.w	r2, r7, #15
 801cd46:	88f9      	ldrh	r1, [r7, #6]
 801cd48:	2301      	movs	r3, #1
 801cd4a:	4804      	ldr	r0, [pc, #16]	; (801cd5c <SUBGRF_ReadRegister+0x24>)
 801cd4c:	f7ed f90b 	bl	8009f66 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd52:	4618      	mov	r0, r3
 801cd54:	3710      	adds	r7, #16
 801cd56:	46bd      	mov	sp, r7
 801cd58:	bd80      	pop	{r7, pc}
 801cd5a:	bf00      	nop
 801cd5c:	200003a0 	.word	0x200003a0

0801cd60 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b086      	sub	sp, #24
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	4603      	mov	r3, r0
 801cd68:	6039      	str	r1, [r7, #0]
 801cd6a:	80fb      	strh	r3, [r7, #6]
 801cd6c:	4613      	mov	r3, r2
 801cd6e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd70:	f3ef 8310 	mrs	r3, PRIMASK
 801cd74:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd76:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cd78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd7a:	b672      	cpsid	i
}
 801cd7c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cd7e:	88bb      	ldrh	r3, [r7, #4]
 801cd80:	88f9      	ldrh	r1, [r7, #6]
 801cd82:	683a      	ldr	r2, [r7, #0]
 801cd84:	4806      	ldr	r0, [pc, #24]	; (801cda0 <SUBGRF_WriteRegisters+0x40>)
 801cd86:	f7ed f88f 	bl	8009ea8 <HAL_SUBGHZ_WriteRegisters>
 801cd8a:	697b      	ldr	r3, [r7, #20]
 801cd8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd8e:	693b      	ldr	r3, [r7, #16]
 801cd90:	f383 8810 	msr	PRIMASK, r3
}
 801cd94:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cd96:	bf00      	nop
 801cd98:	3718      	adds	r7, #24
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	bd80      	pop	{r7, pc}
 801cd9e:	bf00      	nop
 801cda0:	200003a0 	.word	0x200003a0

0801cda4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cda4:	b580      	push	{r7, lr}
 801cda6:	b086      	sub	sp, #24
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	4603      	mov	r3, r0
 801cdac:	6039      	str	r1, [r7, #0]
 801cdae:	80fb      	strh	r3, [r7, #6]
 801cdb0:	4613      	mov	r3, r2
 801cdb2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdb4:	f3ef 8310 	mrs	r3, PRIMASK
 801cdb8:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdbe:	b672      	cpsid	i
}
 801cdc0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801cdc2:	88bb      	ldrh	r3, [r7, #4]
 801cdc4:	88f9      	ldrh	r1, [r7, #6]
 801cdc6:	683a      	ldr	r2, [r7, #0]
 801cdc8:	4806      	ldr	r0, [pc, #24]	; (801cde4 <SUBGRF_ReadRegisters+0x40>)
 801cdca:	f7ed f8cc 	bl	8009f66 <HAL_SUBGHZ_ReadRegisters>
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdd2:	693b      	ldr	r3, [r7, #16]
 801cdd4:	f383 8810 	msr	PRIMASK, r3
}
 801cdd8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cdda:	bf00      	nop
 801cddc:	3718      	adds	r7, #24
 801cdde:	46bd      	mov	sp, r7
 801cde0:	bd80      	pop	{r7, pc}
 801cde2:	bf00      	nop
 801cde4:	200003a0 	.word	0x200003a0

0801cde8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801cde8:	b580      	push	{r7, lr}
 801cdea:	b086      	sub	sp, #24
 801cdec:	af00      	add	r7, sp, #0
 801cdee:	4603      	mov	r3, r0
 801cdf0:	6039      	str	r1, [r7, #0]
 801cdf2:	71fb      	strb	r3, [r7, #7]
 801cdf4:	4613      	mov	r3, r2
 801cdf6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdf8:	f3ef 8310 	mrs	r3, PRIMASK
 801cdfc:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdfe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce02:	b672      	cpsid	i
}
 801ce04:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ce06:	79bb      	ldrb	r3, [r7, #6]
 801ce08:	b29b      	uxth	r3, r3
 801ce0a:	79f9      	ldrb	r1, [r7, #7]
 801ce0c:	683a      	ldr	r2, [r7, #0]
 801ce0e:	4806      	ldr	r0, [pc, #24]	; (801ce28 <SUBGRF_WriteBuffer+0x40>)
 801ce10:	f7ed f9bd 	bl	800a18e <HAL_SUBGHZ_WriteBuffer>
 801ce14:	697b      	ldr	r3, [r7, #20]
 801ce16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce18:	693b      	ldr	r3, [r7, #16]
 801ce1a:	f383 8810 	msr	PRIMASK, r3
}
 801ce1e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce20:	bf00      	nop
 801ce22:	3718      	adds	r7, #24
 801ce24:	46bd      	mov	sp, r7
 801ce26:	bd80      	pop	{r7, pc}
 801ce28:	200003a0 	.word	0x200003a0

0801ce2c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce2c:	b580      	push	{r7, lr}
 801ce2e:	b086      	sub	sp, #24
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	4603      	mov	r3, r0
 801ce34:	6039      	str	r1, [r7, #0]
 801ce36:	71fb      	strb	r3, [r7, #7]
 801ce38:	4613      	mov	r3, r2
 801ce3a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce3c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce40:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce42:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce46:	b672      	cpsid	i
}
 801ce48:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ce4a:	79bb      	ldrb	r3, [r7, #6]
 801ce4c:	b29b      	uxth	r3, r3
 801ce4e:	79f9      	ldrb	r1, [r7, #7]
 801ce50:	683a      	ldr	r2, [r7, #0]
 801ce52:	4806      	ldr	r0, [pc, #24]	; (801ce6c <SUBGRF_ReadBuffer+0x40>)
 801ce54:	f7ed f9ee 	bl	800a234 <HAL_SUBGHZ_ReadBuffer>
 801ce58:	697b      	ldr	r3, [r7, #20]
 801ce5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce5c:	693b      	ldr	r3, [r7, #16]
 801ce5e:	f383 8810 	msr	PRIMASK, r3
}
 801ce62:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce64:	bf00      	nop
 801ce66:	3718      	adds	r7, #24
 801ce68:	46bd      	mov	sp, r7
 801ce6a:	bd80      	pop	{r7, pc}
 801ce6c:	200003a0 	.word	0x200003a0

0801ce70 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b086      	sub	sp, #24
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	4603      	mov	r3, r0
 801ce78:	6039      	str	r1, [r7, #0]
 801ce7a:	71fb      	strb	r3, [r7, #7]
 801ce7c:	4613      	mov	r3, r2
 801ce7e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce80:	f3ef 8310 	mrs	r3, PRIMASK
 801ce84:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce8a:	b672      	cpsid	i
}
 801ce8c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ce8e:	88bb      	ldrh	r3, [r7, #4]
 801ce90:	79f9      	ldrb	r1, [r7, #7]
 801ce92:	683a      	ldr	r2, [r7, #0]
 801ce94:	4806      	ldr	r0, [pc, #24]	; (801ceb0 <SUBGRF_WriteCommand+0x40>)
 801ce96:	f7ed f8c7 	bl	800a028 <HAL_SUBGHZ_ExecSetCmd>
 801ce9a:	697b      	ldr	r3, [r7, #20]
 801ce9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce9e:	693b      	ldr	r3, [r7, #16]
 801cea0:	f383 8810 	msr	PRIMASK, r3
}
 801cea4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cea6:	bf00      	nop
 801cea8:	3718      	adds	r7, #24
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	bd80      	pop	{r7, pc}
 801ceae:	bf00      	nop
 801ceb0:	200003a0 	.word	0x200003a0

0801ceb4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	b086      	sub	sp, #24
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	4603      	mov	r3, r0
 801cebc:	6039      	str	r1, [r7, #0]
 801cebe:	71fb      	strb	r3, [r7, #7]
 801cec0:	4613      	mov	r3, r2
 801cec2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cec4:	f3ef 8310 	mrs	r3, PRIMASK
 801cec8:	60fb      	str	r3, [r7, #12]
  return(result);
 801ceca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cece:	b672      	cpsid	i
}
 801ced0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ced2:	88bb      	ldrh	r3, [r7, #4]
 801ced4:	79f9      	ldrb	r1, [r7, #7]
 801ced6:	683a      	ldr	r2, [r7, #0]
 801ced8:	4806      	ldr	r0, [pc, #24]	; (801cef4 <SUBGRF_ReadCommand+0x40>)
 801ceda:	f7ed f904 	bl	800a0e6 <HAL_SUBGHZ_ExecGetCmd>
 801cede:	697b      	ldr	r3, [r7, #20]
 801cee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cee2:	693b      	ldr	r3, [r7, #16]
 801cee4:	f383 8810 	msr	PRIMASK, r3
}
 801cee8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ceea:	bf00      	nop
 801ceec:	3718      	adds	r7, #24
 801ceee:	46bd      	mov	sp, r7
 801cef0:	bd80      	pop	{r7, pc}
 801cef2:	bf00      	nop
 801cef4:	200003a0 	.word	0x200003a0

0801cef8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801cef8:	b580      	push	{r7, lr}
 801cefa:	b084      	sub	sp, #16
 801cefc:	af00      	add	r7, sp, #0
 801cefe:	4603      	mov	r3, r0
 801cf00:	460a      	mov	r2, r1
 801cf02:	71fb      	strb	r3, [r7, #7]
 801cf04:	4613      	mov	r3, r2
 801cf06:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801cf08:	2301      	movs	r3, #1
 801cf0a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801cf0c:	79bb      	ldrb	r3, [r7, #6]
 801cf0e:	2b01      	cmp	r3, #1
 801cf10:	d10d      	bne.n	801cf2e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801cf12:	79fb      	ldrb	r3, [r7, #7]
 801cf14:	2b01      	cmp	r3, #1
 801cf16:	d104      	bne.n	801cf22 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801cf18:	2302      	movs	r3, #2
 801cf1a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cf1c:	2004      	movs	r0, #4
 801cf1e:	f000 f8ef 	bl	801d100 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cf22:	79fb      	ldrb	r3, [r7, #7]
 801cf24:	2b02      	cmp	r3, #2
 801cf26:	d107      	bne.n	801cf38 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cf28:	2303      	movs	r3, #3
 801cf2a:	73fb      	strb	r3, [r7, #15]
 801cf2c:	e004      	b.n	801cf38 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801cf2e:	79bb      	ldrb	r3, [r7, #6]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d101      	bne.n	801cf38 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cf34:	2301      	movs	r3, #1
 801cf36:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cf38:	7bfb      	ldrb	r3, [r7, #15]
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f7f0 fef3 	bl	800dd26 <RBI_ConfigRFSwitch>
}
 801cf40:	bf00      	nop
 801cf42:	3710      	adds	r7, #16
 801cf44:	46bd      	mov	sp, r7
 801cf46:	bd80      	pop	{r7, pc}

0801cf48 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cf48:	b580      	push	{r7, lr}
 801cf4a:	b084      	sub	sp, #16
 801cf4c:	af00      	add	r7, sp, #0
 801cf4e:	4603      	mov	r3, r0
 801cf50:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cf52:	2301      	movs	r3, #1
 801cf54:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cf56:	f7f0 fef4 	bl	800dd42 <RBI_GetTxConfig>
 801cf5a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cf5c:	68bb      	ldr	r3, [r7, #8]
 801cf5e:	2b02      	cmp	r3, #2
 801cf60:	d016      	beq.n	801cf90 <SUBGRF_SetRfTxPower+0x48>
 801cf62:	68bb      	ldr	r3, [r7, #8]
 801cf64:	2b02      	cmp	r3, #2
 801cf66:	dc16      	bgt.n	801cf96 <SUBGRF_SetRfTxPower+0x4e>
 801cf68:	68bb      	ldr	r3, [r7, #8]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d003      	beq.n	801cf76 <SUBGRF_SetRfTxPower+0x2e>
 801cf6e:	68bb      	ldr	r3, [r7, #8]
 801cf70:	2b01      	cmp	r3, #1
 801cf72:	d00a      	beq.n	801cf8a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cf74:	e00f      	b.n	801cf96 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cf76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf7a:	2b0f      	cmp	r3, #15
 801cf7c:	dd02      	ble.n	801cf84 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cf7e:	2302      	movs	r3, #2
 801cf80:	73fb      	strb	r3, [r7, #15]
            break;
 801cf82:	e009      	b.n	801cf98 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cf84:	2301      	movs	r3, #1
 801cf86:	73fb      	strb	r3, [r7, #15]
            break;
 801cf88:	e006      	b.n	801cf98 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cf8a:	2301      	movs	r3, #1
 801cf8c:	73fb      	strb	r3, [r7, #15]
            break;
 801cf8e:	e003      	b.n	801cf98 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cf90:	2302      	movs	r3, #2
 801cf92:	73fb      	strb	r3, [r7, #15]
            break;
 801cf94:	e000      	b.n	801cf98 <SUBGRF_SetRfTxPower+0x50>
            break;
 801cf96:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cf98:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cf9c:	7bfb      	ldrb	r3, [r7, #15]
 801cf9e:	2202      	movs	r2, #2
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7ff fbcd 	bl	801c740 <SUBGRF_SetTxParams>

    return paSelect;
 801cfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	3710      	adds	r7, #16
 801cfac:	46bd      	mov	sp, r7
 801cfae:	bd80      	pop	{r7, pc}

0801cfb0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cfb0:	b480      	push	{r7}
 801cfb2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cfb4:	2301      	movs	r3, #1
}
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	46bd      	mov	sp, r7
 801cfba:	bc80      	pop	{r7}
 801cfbc:	4770      	bx	lr
	...

0801cfc0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b082      	sub	sp, #8
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cfc8:	4b03      	ldr	r3, [pc, #12]	; (801cfd8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	2001      	movs	r0, #1
 801cfce:	4798      	blx	r3
}
 801cfd0:	bf00      	nop
 801cfd2:	3708      	adds	r7, #8
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	bd80      	pop	{r7, pc}
 801cfd8:	200018c8 	.word	0x200018c8

0801cfdc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b082      	sub	sp, #8
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801cfe4:	4b03      	ldr	r3, [pc, #12]	; (801cff4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	2002      	movs	r0, #2
 801cfea:	4798      	blx	r3
}
 801cfec:	bf00      	nop
 801cfee:	3708      	adds	r7, #8
 801cff0:	46bd      	mov	sp, r7
 801cff2:	bd80      	pop	{r7, pc}
 801cff4:	200018c8 	.word	0x200018c8

0801cff8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801cff8:	b580      	push	{r7, lr}
 801cffa:	b082      	sub	sp, #8
 801cffc:	af00      	add	r7, sp, #0
 801cffe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d000:	4b03      	ldr	r3, [pc, #12]	; (801d010 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	2040      	movs	r0, #64	; 0x40
 801d006:	4798      	blx	r3
}
 801d008:	bf00      	nop
 801d00a:	3708      	adds	r7, #8
 801d00c:	46bd      	mov	sp, r7
 801d00e:	bd80      	pop	{r7, pc}
 801d010:	200018c8 	.word	0x200018c8

0801d014 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d014:	b580      	push	{r7, lr}
 801d016:	b082      	sub	sp, #8
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
 801d01c:	460b      	mov	r3, r1
 801d01e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d020:	78fb      	ldrb	r3, [r7, #3]
 801d022:	2b00      	cmp	r3, #0
 801d024:	d002      	beq.n	801d02c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d026:	2b01      	cmp	r3, #1
 801d028:	d005      	beq.n	801d036 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d02a:	e00a      	b.n	801d042 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d02c:	4b07      	ldr	r3, [pc, #28]	; (801d04c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	2080      	movs	r0, #128	; 0x80
 801d032:	4798      	blx	r3
            break;
 801d034:	e005      	b.n	801d042 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d036:	4b05      	ldr	r3, [pc, #20]	; (801d04c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d03e:	4798      	blx	r3
            break;
 801d040:	bf00      	nop
    }
}
 801d042:	bf00      	nop
 801d044:	3708      	adds	r7, #8
 801d046:	46bd      	mov	sp, r7
 801d048:	bd80      	pop	{r7, pc}
 801d04a:	bf00      	nop
 801d04c:	200018c8 	.word	0x200018c8

0801d050 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b082      	sub	sp, #8
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d058:	4b04      	ldr	r3, [pc, #16]	; (801d06c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d060:	4798      	blx	r3
}
 801d062:	bf00      	nop
 801d064:	3708      	adds	r7, #8
 801d066:	46bd      	mov	sp, r7
 801d068:	bd80      	pop	{r7, pc}
 801d06a:	bf00      	nop
 801d06c:	200018c8 	.word	0x200018c8

0801d070 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d070:	b580      	push	{r7, lr}
 801d072:	b082      	sub	sp, #8
 801d074:	af00      	add	r7, sp, #0
 801d076:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d078:	4b03      	ldr	r3, [pc, #12]	; (801d088 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d07a:	681b      	ldr	r3, [r3, #0]
 801d07c:	2020      	movs	r0, #32
 801d07e:	4798      	blx	r3
}
 801d080:	bf00      	nop
 801d082:	3708      	adds	r7, #8
 801d084:	46bd      	mov	sp, r7
 801d086:	bd80      	pop	{r7, pc}
 801d088:	200018c8 	.word	0x200018c8

0801d08c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d08c:	b580      	push	{r7, lr}
 801d08e:	b082      	sub	sp, #8
 801d090:	af00      	add	r7, sp, #0
 801d092:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d094:	4b03      	ldr	r3, [pc, #12]	; (801d0a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	2004      	movs	r0, #4
 801d09a:	4798      	blx	r3
}
 801d09c:	bf00      	nop
 801d09e:	3708      	adds	r7, #8
 801d0a0:	46bd      	mov	sp, r7
 801d0a2:	bd80      	pop	{r7, pc}
 801d0a4:	200018c8 	.word	0x200018c8

0801d0a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	b082      	sub	sp, #8
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d0b0:	4b03      	ldr	r3, [pc, #12]	; (801d0c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	2008      	movs	r0, #8
 801d0b6:	4798      	blx	r3
}
 801d0b8:	bf00      	nop
 801d0ba:	3708      	adds	r7, #8
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}
 801d0c0:	200018c8 	.word	0x200018c8

0801d0c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b082      	sub	sp, #8
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d0cc:	4b03      	ldr	r3, [pc, #12]	; (801d0dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	2010      	movs	r0, #16
 801d0d2:	4798      	blx	r3
}
 801d0d4:	bf00      	nop
 801d0d6:	3708      	adds	r7, #8
 801d0d8:	46bd      	mov	sp, r7
 801d0da:	bd80      	pop	{r7, pc}
 801d0dc:	200018c8 	.word	0x200018c8

0801d0e0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0e0:	b580      	push	{r7, lr}
 801d0e2:	b082      	sub	sp, #8
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d0e8:	4b04      	ldr	r3, [pc, #16]	; (801d0fc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d0f0:	4798      	blx	r3
}
 801d0f2:	bf00      	nop
 801d0f4:	3708      	adds	r7, #8
 801d0f6:	46bd      	mov	sp, r7
 801d0f8:	bd80      	pop	{r7, pc}
 801d0fa:	bf00      	nop
 801d0fc:	200018c8 	.word	0x200018c8

0801d100 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b084      	sub	sp, #16
 801d104:	af00      	add	r7, sp, #0
 801d106:	4603      	mov	r3, r0
 801d108:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d10a:	f7f0 fe28 	bl	800dd5e <RBI_IsDCDC>
 801d10e:	4603      	mov	r3, r0
 801d110:	2b01      	cmp	r3, #1
 801d112:	d112      	bne.n	801d13a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d114:	f640 1023 	movw	r0, #2339	; 0x923
 801d118:	f7ff fe0e 	bl	801cd38 <SUBGRF_ReadRegister>
 801d11c:	4603      	mov	r3, r0
 801d11e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d120:	7bfb      	ldrb	r3, [r7, #15]
 801d122:	f023 0306 	bic.w	r3, r3, #6
 801d126:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d128:	7bfa      	ldrb	r2, [r7, #15]
 801d12a:	79fb      	ldrb	r3, [r7, #7]
 801d12c:	4313      	orrs	r3, r2
 801d12e:	b2db      	uxtb	r3, r3
 801d130:	4619      	mov	r1, r3
 801d132:	f640 1023 	movw	r0, #2339	; 0x923
 801d136:	f7ff fdeb 	bl	801cd10 <SUBGRF_WriteRegister>
  }
}
 801d13a:	bf00      	nop
 801d13c:	3710      	adds	r7, #16
 801d13e:	46bd      	mov	sp, r7
 801d140:	bd80      	pop	{r7, pc}
	...

0801d144 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d144:	b480      	push	{r7}
 801d146:	b085      	sub	sp, #20
 801d148:	af00      	add	r7, sp, #0
 801d14a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d101      	bne.n	801d156 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d152:	231f      	movs	r3, #31
 801d154:	e016      	b.n	801d184 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d156:	2300      	movs	r3, #0
 801d158:	73fb      	strb	r3, [r7, #15]
 801d15a:	e00f      	b.n	801d17c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d15c:	7bfb      	ldrb	r3, [r7, #15]
 801d15e:	4a0c      	ldr	r2, [pc, #48]	; (801d190 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d160:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d164:	687a      	ldr	r2, [r7, #4]
 801d166:	429a      	cmp	r2, r3
 801d168:	d205      	bcs.n	801d176 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d16a:	7bfb      	ldrb	r3, [r7, #15]
 801d16c:	4a08      	ldr	r2, [pc, #32]	; (801d190 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d16e:	00db      	lsls	r3, r3, #3
 801d170:	4413      	add	r3, r2
 801d172:	791b      	ldrb	r3, [r3, #4]
 801d174:	e006      	b.n	801d184 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d176:	7bfb      	ldrb	r3, [r7, #15]
 801d178:	3301      	adds	r3, #1
 801d17a:	73fb      	strb	r3, [r7, #15]
 801d17c:	7bfb      	ldrb	r3, [r7, #15]
 801d17e:	2b15      	cmp	r3, #21
 801d180:	d9ec      	bls.n	801d15c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d182:	e7fe      	b.n	801d182 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d184:	4618      	mov	r0, r3
 801d186:	3714      	adds	r7, #20
 801d188:	46bd      	mov	sp, r7
 801d18a:	bc80      	pop	{r7}
 801d18c:	4770      	bx	lr
 801d18e:	bf00      	nop
 801d190:	0801fa94 	.word	0x0801fa94

0801d194 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b08a      	sub	sp, #40	; 0x28
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
 801d19c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d19e:	4b35      	ldr	r3, [pc, #212]	; (801d274 <SUBGRF_GetCFO+0xe0>)
 801d1a0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d1a2:	f640 0007 	movw	r0, #2055	; 0x807
 801d1a6:	f7ff fdc7 	bl	801cd38 <SUBGRF_ReadRegister>
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d1ae:	7ffb      	ldrb	r3, [r7, #31]
 801d1b0:	08db      	lsrs	r3, r3, #3
 801d1b2:	b2db      	uxtb	r3, r3
 801d1b4:	f003 0303 	and.w	r3, r3, #3
 801d1b8:	3328      	adds	r3, #40	; 0x28
 801d1ba:	443b      	add	r3, r7
 801d1bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d1c0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d1c2:	7ffb      	ldrb	r3, [r7, #31]
 801d1c4:	f003 0307 	and.w	r3, r3, #7
 801d1c8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d1ca:	7fba      	ldrb	r2, [r7, #30]
 801d1cc:	7f7b      	ldrb	r3, [r7, #29]
 801d1ce:	3301      	adds	r3, #1
 801d1d0:	fa02 f303 	lsl.w	r3, r2, r3
 801d1d4:	461a      	mov	r2, r3
 801d1d6:	4b28      	ldr	r3, [pc, #160]	; (801d278 <SUBGRF_GetCFO+0xe4>)
 801d1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1dc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d1de:	69ba      	ldr	r2, [r7, #24]
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	fbb2 f3f3 	udiv	r3, r2, r3
 801d1e6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d1e8:	2301      	movs	r3, #1
 801d1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1f2:	697a      	ldr	r2, [r7, #20]
 801d1f4:	fb02 f303 	mul.w	r3, r2, r3
 801d1f8:	2b07      	cmp	r3, #7
 801d1fa:	d802      	bhi.n	801d202 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d1fc:	2302      	movs	r3, #2
 801d1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d206:	697a      	ldr	r2, [r7, #20]
 801d208:	fb02 f303 	mul.w	r3, r2, r3
 801d20c:	2b03      	cmp	r3, #3
 801d20e:	d802      	bhi.n	801d216 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d210:	2304      	movs	r3, #4
 801d212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d216:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d21a:	69bb      	ldr	r3, [r7, #24]
 801d21c:	fb02 f303 	mul.w	r3, r2, r3
 801d220:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d222:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d226:	f7ff fd87 	bl	801cd38 <SUBGRF_ReadRegister>
 801d22a:	4603      	mov	r3, r0
 801d22c:	021b      	lsls	r3, r3, #8
 801d22e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d232:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d234:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d238:	f7ff fd7e 	bl	801cd38 <SUBGRF_ReadRegister>
 801d23c:	4603      	mov	r3, r0
 801d23e:	461a      	mov	r2, r3
 801d240:	6a3b      	ldr	r3, [r7, #32]
 801d242:	4313      	orrs	r3, r2
 801d244:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d246:	6a3b      	ldr	r3, [r7, #32]
 801d248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d005      	beq.n	801d25c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d250:	6a3b      	ldr	r3, [r7, #32]
 801d252:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d256:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d25a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d25c:	693b      	ldr	r3, [r7, #16]
 801d25e:	095b      	lsrs	r3, r3, #5
 801d260:	6a3a      	ldr	r2, [r7, #32]
 801d262:	fb02 f303 	mul.w	r3, r2, r3
 801d266:	11da      	asrs	r2, r3, #7
 801d268:	683b      	ldr	r3, [r7, #0]
 801d26a:	601a      	str	r2, [r3, #0]
}
 801d26c:	bf00      	nop
 801d26e:	3728      	adds	r7, #40	; 0x28
 801d270:	46bd      	mov	sp, r7
 801d272:	bd80      	pop	{r7, pc}
 801d274:	0c0a0804 	.word	0x0c0a0804
 801d278:	01e84800 	.word	0x01e84800

0801d27c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d27c:	b480      	push	{r7}
 801d27e:	b087      	sub	sp, #28
 801d280:	af00      	add	r7, sp, #0
 801d282:	4603      	mov	r3, r0
 801d284:	60b9      	str	r1, [r7, #8]
 801d286:	607a      	str	r2, [r7, #4]
 801d288:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d28a:	2300      	movs	r3, #0
 801d28c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d28e:	f04f 33ff 	mov.w	r3, #4294967295
 801d292:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d294:	697b      	ldr	r3, [r7, #20]
}
 801d296:	4618      	mov	r0, r3
 801d298:	371c      	adds	r7, #28
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bc80      	pop	{r7}
 801d29e:	4770      	bx	lr

0801d2a0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d2a0:	b480      	push	{r7}
 801d2a2:	b087      	sub	sp, #28
 801d2a4:	af00      	add	r7, sp, #0
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	60b9      	str	r1, [r7, #8]
 801d2aa:	607a      	str	r2, [r7, #4]
 801d2ac:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d2b2:	f04f 33ff 	mov.w	r3, #4294967295
 801d2b6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2b8:	697b      	ldr	r3, [r7, #20]
}
 801d2ba:	4618      	mov	r0, r3
 801d2bc:	371c      	adds	r7, #28
 801d2be:	46bd      	mov	sp, r7
 801d2c0:	bc80      	pop	{r7}
 801d2c2:	4770      	bx	lr

0801d2c4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d2c4:	b480      	push	{r7}
 801d2c6:	b085      	sub	sp, #20
 801d2c8:	af00      	add	r7, sp, #0
 801d2ca:	60f8      	str	r0, [r7, #12]
 801d2cc:	60b9      	str	r1, [r7, #8]
 801d2ce:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d2d0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	3714      	adds	r7, #20
 801d2d8:	46bd      	mov	sp, r7
 801d2da:	bc80      	pop	{r7}
 801d2dc:	4770      	bx	lr

0801d2de <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d2de:	b480      	push	{r7}
 801d2e0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d2e2:	bf00      	nop
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	bc80      	pop	{r7}
 801d2e8:	4770      	bx	lr

0801d2ea <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d2ea:	b480      	push	{r7}
 801d2ec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d2ee:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bc80      	pop	{r7}
 801d2f6:	4770      	bx	lr

0801d2f8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d2f8:	b480      	push	{r7}
 801d2fa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d2fc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d2fe:	4618      	mov	r0, r3
 801d300:	46bd      	mov	sp, r7
 801d302:	bc80      	pop	{r7}
 801d304:	4770      	bx	lr

0801d306 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d306:	b480      	push	{r7}
 801d308:	b083      	sub	sp, #12
 801d30a:	af00      	add	r7, sp, #0
 801d30c:	4603      	mov	r3, r0
 801d30e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d310:	bf00      	nop
 801d312:	370c      	adds	r7, #12
 801d314:	46bd      	mov	sp, r7
 801d316:	bc80      	pop	{r7}
 801d318:	4770      	bx	lr

0801d31a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d31a:	b480      	push	{r7}
 801d31c:	b087      	sub	sp, #28
 801d31e:	af00      	add	r7, sp, #0
 801d320:	60f8      	str	r0, [r7, #12]
 801d322:	460b      	mov	r3, r1
 801d324:	607a      	str	r2, [r7, #4]
 801d326:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d328:	f04f 33ff 	mov.w	r3, #4294967295
 801d32c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d32e:	697b      	ldr	r3, [r7, #20]
}
 801d330:	4618      	mov	r0, r3
 801d332:	371c      	adds	r7, #28
 801d334:	46bd      	mov	sp, r7
 801d336:	bc80      	pop	{r7}
 801d338:	4770      	bx	lr

0801d33a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d33a:	b480      	push	{r7}
 801d33c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d33e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d342:	4618      	mov	r0, r3
 801d344:	46bd      	mov	sp, r7
 801d346:	bc80      	pop	{r7}
 801d348:	4770      	bx	lr

0801d34a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d34a:	b480      	push	{r7}
 801d34c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d34e:	bf00      	nop
 801d350:	46bd      	mov	sp, r7
 801d352:	bc80      	pop	{r7}
 801d354:	4770      	bx	lr

0801d356 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d356:	b480      	push	{r7}
 801d358:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d35a:	bf00      	nop
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bc80      	pop	{r7}
 801d360:	4770      	bx	lr

0801d362 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d362:	b480      	push	{r7}
 801d364:	b083      	sub	sp, #12
 801d366:	af00      	add	r7, sp, #0
 801d368:	4603      	mov	r3, r0
 801d36a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d36c:	bf00      	nop
 801d36e:	370c      	adds	r7, #12
 801d370:	46bd      	mov	sp, r7
 801d372:	bc80      	pop	{r7}
 801d374:	4770      	bx	lr
	...

0801d378 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d378:	b480      	push	{r7}
 801d37a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d37c:	4b04      	ldr	r3, [pc, #16]	; (801d390 <UTIL_LPM_Init+0x18>)
 801d37e:	2200      	movs	r2, #0
 801d380:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d382:	4b04      	ldr	r3, [pc, #16]	; (801d394 <UTIL_LPM_Init+0x1c>)
 801d384:	2200      	movs	r2, #0
 801d386:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d388:	bf00      	nop
 801d38a:	46bd      	mov	sp, r7
 801d38c:	bc80      	pop	{r7}
 801d38e:	4770      	bx	lr
 801d390:	200018cc 	.word	0x200018cc
 801d394:	200018d0 	.word	0x200018d0

0801d398 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d398:	b480      	push	{r7}
 801d39a:	b087      	sub	sp, #28
 801d39c:	af00      	add	r7, sp, #0
 801d39e:	6078      	str	r0, [r7, #4]
 801d3a0:	460b      	mov	r3, r1
 801d3a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3a4:	f3ef 8310 	mrs	r3, PRIMASK
 801d3a8:	613b      	str	r3, [r7, #16]
  return(result);
 801d3aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d3ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3ae:	b672      	cpsid	i
}
 801d3b0:	bf00      	nop
  
  switch( state )
 801d3b2:	78fb      	ldrb	r3, [r7, #3]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d008      	beq.n	801d3ca <UTIL_LPM_SetStopMode+0x32>
 801d3b8:	2b01      	cmp	r3, #1
 801d3ba:	d10e      	bne.n	801d3da <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d3bc:	4b0d      	ldr	r3, [pc, #52]	; (801d3f4 <UTIL_LPM_SetStopMode+0x5c>)
 801d3be:	681a      	ldr	r2, [r3, #0]
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	4313      	orrs	r3, r2
 801d3c4:	4a0b      	ldr	r2, [pc, #44]	; (801d3f4 <UTIL_LPM_SetStopMode+0x5c>)
 801d3c6:	6013      	str	r3, [r2, #0]
      break;
 801d3c8:	e008      	b.n	801d3dc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	43da      	mvns	r2, r3
 801d3ce:	4b09      	ldr	r3, [pc, #36]	; (801d3f4 <UTIL_LPM_SetStopMode+0x5c>)
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	4013      	ands	r3, r2
 801d3d4:	4a07      	ldr	r2, [pc, #28]	; (801d3f4 <UTIL_LPM_SetStopMode+0x5c>)
 801d3d6:	6013      	str	r3, [r2, #0]
      break;
 801d3d8:	e000      	b.n	801d3dc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d3da:	bf00      	nop
 801d3dc:	697b      	ldr	r3, [r7, #20]
 801d3de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	f383 8810 	msr	PRIMASK, r3
}
 801d3e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d3e8:	bf00      	nop
 801d3ea:	371c      	adds	r7, #28
 801d3ec:	46bd      	mov	sp, r7
 801d3ee:	bc80      	pop	{r7}
 801d3f0:	4770      	bx	lr
 801d3f2:	bf00      	nop
 801d3f4:	200018cc 	.word	0x200018cc

0801d3f8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d3f8:	b480      	push	{r7}
 801d3fa:	b087      	sub	sp, #28
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	460b      	mov	r3, r1
 801d402:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d404:	f3ef 8310 	mrs	r3, PRIMASK
 801d408:	613b      	str	r3, [r7, #16]
  return(result);
 801d40a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d40c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d40e:	b672      	cpsid	i
}
 801d410:	bf00      	nop
  
  switch(state)
 801d412:	78fb      	ldrb	r3, [r7, #3]
 801d414:	2b00      	cmp	r3, #0
 801d416:	d008      	beq.n	801d42a <UTIL_LPM_SetOffMode+0x32>
 801d418:	2b01      	cmp	r3, #1
 801d41a:	d10e      	bne.n	801d43a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d41c:	4b0d      	ldr	r3, [pc, #52]	; (801d454 <UTIL_LPM_SetOffMode+0x5c>)
 801d41e:	681a      	ldr	r2, [r3, #0]
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	4313      	orrs	r3, r2
 801d424:	4a0b      	ldr	r2, [pc, #44]	; (801d454 <UTIL_LPM_SetOffMode+0x5c>)
 801d426:	6013      	str	r3, [r2, #0]
      break;
 801d428:	e008      	b.n	801d43c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d42a:	687b      	ldr	r3, [r7, #4]
 801d42c:	43da      	mvns	r2, r3
 801d42e:	4b09      	ldr	r3, [pc, #36]	; (801d454 <UTIL_LPM_SetOffMode+0x5c>)
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	4013      	ands	r3, r2
 801d434:	4a07      	ldr	r2, [pc, #28]	; (801d454 <UTIL_LPM_SetOffMode+0x5c>)
 801d436:	6013      	str	r3, [r2, #0]
      break;
 801d438:	e000      	b.n	801d43c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d43a:	bf00      	nop
 801d43c:	697b      	ldr	r3, [r7, #20]
 801d43e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	f383 8810 	msr	PRIMASK, r3
}
 801d446:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d448:	bf00      	nop
 801d44a:	371c      	adds	r7, #28
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bc80      	pop	{r7}
 801d450:	4770      	bx	lr
 801d452:	bf00      	nop
 801d454:	200018d0 	.word	0x200018d0

0801d458 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d458:	b580      	push	{r7, lr}
 801d45a:	b084      	sub	sp, #16
 801d45c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d45e:	f3ef 8310 	mrs	r3, PRIMASK
 801d462:	60bb      	str	r3, [r7, #8]
  return(result);
 801d464:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d468:	b672      	cpsid	i
}
 801d46a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d46c:	4b12      	ldr	r3, [pc, #72]	; (801d4b8 <UTIL_LPM_EnterLowPower+0x60>)
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d006      	beq.n	801d482 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d474:	4b11      	ldr	r3, [pc, #68]	; (801d4bc <UTIL_LPM_EnterLowPower+0x64>)
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d47a:	4b10      	ldr	r3, [pc, #64]	; (801d4bc <UTIL_LPM_EnterLowPower+0x64>)
 801d47c:	685b      	ldr	r3, [r3, #4]
 801d47e:	4798      	blx	r3
 801d480:	e010      	b.n	801d4a4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d482:	4b0f      	ldr	r3, [pc, #60]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x68>)
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d006      	beq.n	801d498 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d48a:	4b0c      	ldr	r3, [pc, #48]	; (801d4bc <UTIL_LPM_EnterLowPower+0x64>)
 801d48c:	689b      	ldr	r3, [r3, #8]
 801d48e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d490:	4b0a      	ldr	r3, [pc, #40]	; (801d4bc <UTIL_LPM_EnterLowPower+0x64>)
 801d492:	68db      	ldr	r3, [r3, #12]
 801d494:	4798      	blx	r3
 801d496:	e005      	b.n	801d4a4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d498:	4b08      	ldr	r3, [pc, #32]	; (801d4bc <UTIL_LPM_EnterLowPower+0x64>)
 801d49a:	691b      	ldr	r3, [r3, #16]
 801d49c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d49e:	4b07      	ldr	r3, [pc, #28]	; (801d4bc <UTIL_LPM_EnterLowPower+0x64>)
 801d4a0:	695b      	ldr	r3, [r3, #20]
 801d4a2:	4798      	blx	r3
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	f383 8810 	msr	PRIMASK, r3
}
 801d4ae:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d4b0:	bf00      	nop
 801d4b2:	3710      	adds	r7, #16
 801d4b4:	46bd      	mov	sp, r7
 801d4b6:	bd80      	pop	{r7, pc}
 801d4b8:	200018cc 	.word	0x200018cc
 801d4bc:	0801f508 	.word	0x0801f508
 801d4c0:	200018d0 	.word	0x200018d0

0801d4c4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d4c4:	b480      	push	{r7}
 801d4c6:	b087      	sub	sp, #28
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	60f8      	str	r0, [r7, #12]
 801d4cc:	60b9      	str	r1, [r7, #8]
 801d4ce:	4613      	mov	r3, r2
 801d4d0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d4d6:	68bb      	ldr	r3, [r7, #8]
 801d4d8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d4da:	e007      	b.n	801d4ec <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d4dc:	693a      	ldr	r2, [r7, #16]
 801d4de:	1c53      	adds	r3, r2, #1
 801d4e0:	613b      	str	r3, [r7, #16]
 801d4e2:	697b      	ldr	r3, [r7, #20]
 801d4e4:	1c59      	adds	r1, r3, #1
 801d4e6:	6179      	str	r1, [r7, #20]
 801d4e8:	7812      	ldrb	r2, [r2, #0]
 801d4ea:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d4ec:	88fb      	ldrh	r3, [r7, #6]
 801d4ee:	1e5a      	subs	r2, r3, #1
 801d4f0:	80fa      	strh	r2, [r7, #6]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d1f2      	bne.n	801d4dc <UTIL_MEM_cpy_8+0x18>
    }
}
 801d4f6:	bf00      	nop
 801d4f8:	bf00      	nop
 801d4fa:	371c      	adds	r7, #28
 801d4fc:	46bd      	mov	sp, r7
 801d4fe:	bc80      	pop	{r7}
 801d500:	4770      	bx	lr

0801d502 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d502:	b480      	push	{r7}
 801d504:	b085      	sub	sp, #20
 801d506:	af00      	add	r7, sp, #0
 801d508:	6078      	str	r0, [r7, #4]
 801d50a:	460b      	mov	r3, r1
 801d50c:	70fb      	strb	r3, [r7, #3]
 801d50e:	4613      	mov	r3, r2
 801d510:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d516:	e004      	b.n	801d522 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	1c5a      	adds	r2, r3, #1
 801d51c:	60fa      	str	r2, [r7, #12]
 801d51e:	78fa      	ldrb	r2, [r7, #3]
 801d520:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d522:	883b      	ldrh	r3, [r7, #0]
 801d524:	1e5a      	subs	r2, r3, #1
 801d526:	803a      	strh	r2, [r7, #0]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d1f5      	bne.n	801d518 <UTIL_MEM_set_8+0x16>
  }
}
 801d52c:	bf00      	nop
 801d52e:	bf00      	nop
 801d530:	3714      	adds	r7, #20
 801d532:	46bd      	mov	sp, r7
 801d534:	bc80      	pop	{r7}
 801d536:	4770      	bx	lr

0801d538 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d538:	b082      	sub	sp, #8
 801d53a:	b480      	push	{r7}
 801d53c:	b087      	sub	sp, #28
 801d53e:	af00      	add	r7, sp, #0
 801d540:	60f8      	str	r0, [r7, #12]
 801d542:	1d38      	adds	r0, r7, #4
 801d544:	e880 0006 	stmia.w	r0, {r1, r2}
 801d548:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d54a:	2300      	movs	r3, #0
 801d54c:	613b      	str	r3, [r7, #16]
 801d54e:	2300      	movs	r3, #0
 801d550:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d552:	687a      	ldr	r2, [r7, #4]
 801d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d556:	4413      	add	r3, r2
 801d558:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d55a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d55e:	b29a      	uxth	r2, r3
 801d560:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d564:	b29b      	uxth	r3, r3
 801d566:	4413      	add	r3, r2
 801d568:	b29b      	uxth	r3, r3
 801d56a:	b21b      	sxth	r3, r3
 801d56c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d56e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d576:	db0a      	blt.n	801d58e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d578:	693b      	ldr	r3, [r7, #16]
 801d57a:	3301      	adds	r3, #1
 801d57c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d57e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d582:	b29b      	uxth	r3, r3
 801d584:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d588:	b29b      	uxth	r3, r3
 801d58a:	b21b      	sxth	r3, r3
 801d58c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	461a      	mov	r2, r3
 801d592:	f107 0310 	add.w	r3, r7, #16
 801d596:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d59a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d59e:	68f8      	ldr	r0, [r7, #12]
 801d5a0:	371c      	adds	r7, #28
 801d5a2:	46bd      	mov	sp, r7
 801d5a4:	bc80      	pop	{r7}
 801d5a6:	b002      	add	sp, #8
 801d5a8:	4770      	bx	lr

0801d5aa <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d5aa:	b082      	sub	sp, #8
 801d5ac:	b480      	push	{r7}
 801d5ae:	b087      	sub	sp, #28
 801d5b0:	af00      	add	r7, sp, #0
 801d5b2:	60f8      	str	r0, [r7, #12]
 801d5b4:	1d38      	adds	r0, r7, #4
 801d5b6:	e880 0006 	stmia.w	r0, {r1, r2}
 801d5ba:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d5bc:	2300      	movs	r3, #0
 801d5be:	613b      	str	r3, [r7, #16]
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d5c4:	687a      	ldr	r2, [r7, #4]
 801d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5c8:	1ad3      	subs	r3, r2, r3
 801d5ca:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d5cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d5d0:	b29a      	uxth	r2, r3
 801d5d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	1ad3      	subs	r3, r2, r3
 801d5da:	b29b      	uxth	r3, r3
 801d5dc:	b21b      	sxth	r3, r3
 801d5de:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d5e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	da0a      	bge.n	801d5fe <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d5e8:	693b      	ldr	r3, [r7, #16]
 801d5ea:	3b01      	subs	r3, #1
 801d5ec:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d5ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5f2:	b29b      	uxth	r3, r3
 801d5f4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	b21b      	sxth	r3, r3
 801d5fc:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	461a      	mov	r2, r3
 801d602:	f107 0310 	add.w	r3, r7, #16
 801d606:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d60a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d60e:	68f8      	ldr	r0, [r7, #12]
 801d610:	371c      	adds	r7, #28
 801d612:	46bd      	mov	sp, r7
 801d614:	bc80      	pop	{r7}
 801d616:	b002      	add	sp, #8
 801d618:	4770      	bx	lr
	...

0801d61c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d61c:	b580      	push	{r7, lr}
 801d61e:	b088      	sub	sp, #32
 801d620:	af02      	add	r7, sp, #8
 801d622:	463b      	mov	r3, r7
 801d624:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d628:	2300      	movs	r3, #0
 801d62a:	60bb      	str	r3, [r7, #8]
 801d62c:	2300      	movs	r3, #0
 801d62e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d630:	4b10      	ldr	r3, [pc, #64]	; (801d674 <SysTimeSet+0x58>)
 801d632:	691b      	ldr	r3, [r3, #16]
 801d634:	f107 0208 	add.w	r2, r7, #8
 801d638:	3204      	adds	r2, #4
 801d63a:	4610      	mov	r0, r2
 801d63c:	4798      	blx	r3
 801d63e:	4603      	mov	r3, r0
 801d640:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d642:	f107 0010 	add.w	r0, r7, #16
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	9300      	str	r3, [sp, #0]
 801d64a:	68bb      	ldr	r3, [r7, #8]
 801d64c:	463a      	mov	r2, r7
 801d64e:	ca06      	ldmia	r2, {r1, r2}
 801d650:	f7ff ffab 	bl	801d5aa <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d654:	4b07      	ldr	r3, [pc, #28]	; (801d674 <SysTimeSet+0x58>)
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	693a      	ldr	r2, [r7, #16]
 801d65a:	4610      	mov	r0, r2
 801d65c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d65e:	4b05      	ldr	r3, [pc, #20]	; (801d674 <SysTimeSet+0x58>)
 801d660:	689b      	ldr	r3, [r3, #8]
 801d662:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d666:	4610      	mov	r0, r2
 801d668:	4798      	blx	r3
}
 801d66a:	bf00      	nop
 801d66c:	3718      	adds	r7, #24
 801d66e:	46bd      	mov	sp, r7
 801d670:	bd80      	pop	{r7, pc}
 801d672:	bf00      	nop
 801d674:	0801f5ec 	.word	0x0801f5ec

0801d678 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d678:	b580      	push	{r7, lr}
 801d67a:	b08a      	sub	sp, #40	; 0x28
 801d67c:	af02      	add	r7, sp, #8
 801d67e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d680:	2300      	movs	r3, #0
 801d682:	61bb      	str	r3, [r7, #24]
 801d684:	2300      	movs	r3, #0
 801d686:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d688:	2300      	movs	r3, #0
 801d68a:	613b      	str	r3, [r7, #16]
 801d68c:	2300      	movs	r3, #0
 801d68e:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d690:	4b14      	ldr	r3, [pc, #80]	; (801d6e4 <SysTimeGet+0x6c>)
 801d692:	691b      	ldr	r3, [r3, #16]
 801d694:	f107 0218 	add.w	r2, r7, #24
 801d698:	3204      	adds	r2, #4
 801d69a:	4610      	mov	r0, r2
 801d69c:	4798      	blx	r3
 801d69e:	4603      	mov	r3, r0
 801d6a0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d6a2:	4b10      	ldr	r3, [pc, #64]	; (801d6e4 <SysTimeGet+0x6c>)
 801d6a4:	68db      	ldr	r3, [r3, #12]
 801d6a6:	4798      	blx	r3
 801d6a8:	4603      	mov	r3, r0
 801d6aa:	b21b      	sxth	r3, r3
 801d6ac:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d6ae:	4b0d      	ldr	r3, [pc, #52]	; (801d6e4 <SysTimeGet+0x6c>)
 801d6b0:	685b      	ldr	r3, [r3, #4]
 801d6b2:	4798      	blx	r3
 801d6b4:	4603      	mov	r3, r0
 801d6b6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d6b8:	f107 0010 	add.w	r0, r7, #16
 801d6bc:	69fb      	ldr	r3, [r7, #28]
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	69bb      	ldr	r3, [r7, #24]
 801d6c2:	f107 0208 	add.w	r2, r7, #8
 801d6c6:	ca06      	ldmia	r2, {r1, r2}
 801d6c8:	f7ff ff36 	bl	801d538 <SysTimeAdd>

  return sysTime;
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	461a      	mov	r2, r3
 801d6d0:	f107 0310 	add.w	r3, r7, #16
 801d6d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d6d8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d6dc:	6878      	ldr	r0, [r7, #4]
 801d6de:	3720      	adds	r7, #32
 801d6e0:	46bd      	mov	sp, r7
 801d6e2:	bd80      	pop	{r7, pc}
 801d6e4:	0801f5ec 	.word	0x0801f5ec

0801d6e8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d6e8:	b580      	push	{r7, lr}
 801d6ea:	b084      	sub	sp, #16
 801d6ec:	af00      	add	r7, sp, #0
 801d6ee:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	60bb      	str	r3, [r7, #8]
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d6f8:	4b0a      	ldr	r3, [pc, #40]	; (801d724 <SysTimeGetMcuTime+0x3c>)
 801d6fa:	691b      	ldr	r3, [r3, #16]
 801d6fc:	f107 0208 	add.w	r2, r7, #8
 801d700:	3204      	adds	r2, #4
 801d702:	4610      	mov	r0, r2
 801d704:	4798      	blx	r3
 801d706:	4603      	mov	r3, r0
 801d708:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	461a      	mov	r2, r3
 801d70e:	f107 0308 	add.w	r3, r7, #8
 801d712:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d716:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d71a:	6878      	ldr	r0, [r7, #4]
 801d71c:	3710      	adds	r7, #16
 801d71e:	46bd      	mov	sp, r7
 801d720:	bd80      	pop	{r7, pc}
 801d722:	bf00      	nop
 801d724:	0801f5ec 	.word	0x0801f5ec

0801d728 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d728:	b580      	push	{r7, lr}
 801d72a:	b088      	sub	sp, #32
 801d72c:	af02      	add	r7, sp, #8
 801d72e:	463b      	mov	r3, r7
 801d730:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d734:	4b0f      	ldr	r3, [pc, #60]	; (801d774 <SysTimeToMs+0x4c>)
 801d736:	68db      	ldr	r3, [r3, #12]
 801d738:	4798      	blx	r3
 801d73a:	4603      	mov	r3, r0
 801d73c:	b21b      	sxth	r3, r3
 801d73e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d740:	4b0c      	ldr	r3, [pc, #48]	; (801d774 <SysTimeToMs+0x4c>)
 801d742:	685b      	ldr	r3, [r3, #4]
 801d744:	4798      	blx	r3
 801d746:	4603      	mov	r3, r0
 801d748:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d74a:	f107 0008 	add.w	r0, r7, #8
 801d74e:	697b      	ldr	r3, [r7, #20]
 801d750:	9300      	str	r3, [sp, #0]
 801d752:	693b      	ldr	r3, [r7, #16]
 801d754:	463a      	mov	r2, r7
 801d756:	ca06      	ldmia	r2, {r1, r2}
 801d758:	f7ff ff27 	bl	801d5aa <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d75c:	68bb      	ldr	r3, [r7, #8]
 801d75e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d762:	fb02 f303 	mul.w	r3, r2, r3
 801d766:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d76a:	4413      	add	r3, r2
}
 801d76c:	4618      	mov	r0, r3
 801d76e:	3718      	adds	r7, #24
 801d770:	46bd      	mov	sp, r7
 801d772:	bd80      	pop	{r7, pc}
 801d774:	0801f5ec 	.word	0x0801f5ec

0801d778 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d778:	b580      	push	{r7, lr}
 801d77a:	b08a      	sub	sp, #40	; 0x28
 801d77c:	af02      	add	r7, sp, #8
 801d77e:	6078      	str	r0, [r7, #4]
 801d780:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d782:	683b      	ldr	r3, [r7, #0]
 801d784:	4a19      	ldr	r2, [pc, #100]	; (801d7ec <SysTimeFromMs+0x74>)
 801d786:	fba2 2303 	umull	r2, r3, r2, r3
 801d78a:	099b      	lsrs	r3, r3, #6
 801d78c:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d78e:	69fb      	ldr	r3, [r7, #28]
 801d790:	617b      	str	r3, [r7, #20]
 801d792:	683b      	ldr	r3, [r7, #0]
 801d794:	b29a      	uxth	r2, r3
 801d796:	69fb      	ldr	r3, [r7, #28]
 801d798:	b29b      	uxth	r3, r3
 801d79a:	4619      	mov	r1, r3
 801d79c:	0149      	lsls	r1, r1, #5
 801d79e:	1ac9      	subs	r1, r1, r3
 801d7a0:	0089      	lsls	r1, r1, #2
 801d7a2:	440b      	add	r3, r1
 801d7a4:	00db      	lsls	r3, r3, #3
 801d7a6:	b29b      	uxth	r3, r3
 801d7a8:	1ad3      	subs	r3, r2, r3
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	b21b      	sxth	r3, r3
 801d7ae:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d7b0:	f107 030c 	add.w	r3, r7, #12
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	601a      	str	r2, [r3, #0]
 801d7b8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d7ba:	4b0d      	ldr	r3, [pc, #52]	; (801d7f0 <SysTimeFromMs+0x78>)
 801d7bc:	68db      	ldr	r3, [r3, #12]
 801d7be:	4798      	blx	r3
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	b21b      	sxth	r3, r3
 801d7c4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d7c6:	4b0a      	ldr	r3, [pc, #40]	; (801d7f0 <SysTimeFromMs+0x78>)
 801d7c8:	685b      	ldr	r3, [r3, #4]
 801d7ca:	4798      	blx	r3
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d7d0:	6878      	ldr	r0, [r7, #4]
 801d7d2:	693b      	ldr	r3, [r7, #16]
 801d7d4:	9300      	str	r3, [sp, #0]
 801d7d6:	68fb      	ldr	r3, [r7, #12]
 801d7d8:	f107 0214 	add.w	r2, r7, #20
 801d7dc:	ca06      	ldmia	r2, {r1, r2}
 801d7de:	f7ff feab 	bl	801d538 <SysTimeAdd>
}
 801d7e2:	6878      	ldr	r0, [r7, #4]
 801d7e4:	3720      	adds	r7, #32
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bd80      	pop	{r7, pc}
 801d7ea:	bf00      	nop
 801d7ec:	10624dd3 	.word	0x10624dd3
 801d7f0:	0801f5ec 	.word	0x0801f5ec

0801d7f4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d7f4:	b480      	push	{r7}
 801d7f6:	b085      	sub	sp, #20
 801d7f8:	af00      	add	r7, sp, #0
 801d7fa:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d800:	e00e      	b.n	801d820 <ee_skip_atoi+0x2c>
 801d802:	68fa      	ldr	r2, [r7, #12]
 801d804:	4613      	mov	r3, r2
 801d806:	009b      	lsls	r3, r3, #2
 801d808:	4413      	add	r3, r2
 801d80a:	005b      	lsls	r3, r3, #1
 801d80c:	4618      	mov	r0, r3
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	681b      	ldr	r3, [r3, #0]
 801d812:	1c59      	adds	r1, r3, #1
 801d814:	687a      	ldr	r2, [r7, #4]
 801d816:	6011      	str	r1, [r2, #0]
 801d818:	781b      	ldrb	r3, [r3, #0]
 801d81a:	4403      	add	r3, r0
 801d81c:	3b30      	subs	r3, #48	; 0x30
 801d81e:	60fb      	str	r3, [r7, #12]
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	781b      	ldrb	r3, [r3, #0]
 801d826:	2b2f      	cmp	r3, #47	; 0x2f
 801d828:	d904      	bls.n	801d834 <ee_skip_atoi+0x40>
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	781b      	ldrb	r3, [r3, #0]
 801d830:	2b39      	cmp	r3, #57	; 0x39
 801d832:	d9e6      	bls.n	801d802 <ee_skip_atoi+0xe>
  return i;
 801d834:	68fb      	ldr	r3, [r7, #12]
}
 801d836:	4618      	mov	r0, r3
 801d838:	3714      	adds	r7, #20
 801d83a:	46bd      	mov	sp, r7
 801d83c:	bc80      	pop	{r7}
 801d83e:	4770      	bx	lr

0801d840 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d840:	b480      	push	{r7}
 801d842:	b099      	sub	sp, #100	; 0x64
 801d844:	af00      	add	r7, sp, #0
 801d846:	60f8      	str	r0, [r7, #12]
 801d848:	60b9      	str	r1, [r7, #8]
 801d84a:	607a      	str	r2, [r7, #4]
 801d84c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d84e:	4b71      	ldr	r3, [pc, #452]	; (801da14 <ee_number+0x1d4>)
 801d850:	681b      	ldr	r3, [r3, #0]
 801d852:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d85a:	2b00      	cmp	r3, #0
 801d85c:	d002      	beq.n	801d864 <ee_number+0x24>
 801d85e:	4b6e      	ldr	r3, [pc, #440]	; (801da18 <ee_number+0x1d8>)
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d864:	683b      	ldr	r3, [r7, #0]
 801d866:	2b01      	cmp	r3, #1
 801d868:	dd02      	ble.n	801d870 <ee_number+0x30>
 801d86a:	683b      	ldr	r3, [r7, #0]
 801d86c:	2b24      	cmp	r3, #36	; 0x24
 801d86e:	dd01      	ble.n	801d874 <ee_number+0x34>
 801d870:	2300      	movs	r3, #0
 801d872:	e0ca      	b.n	801da0a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d876:	f003 0301 	and.w	r3, r3, #1
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d001      	beq.n	801d882 <ee_number+0x42>
 801d87e:	2330      	movs	r3, #48	; 0x30
 801d880:	e000      	b.n	801d884 <ee_number+0x44>
 801d882:	2320      	movs	r3, #32
 801d884:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d888:	2300      	movs	r3, #0
 801d88a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d88e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d890:	f003 0302 	and.w	r3, r3, #2
 801d894:	2b00      	cmp	r3, #0
 801d896:	d00b      	beq.n	801d8b0 <ee_number+0x70>
  {
    if (num < 0)
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	da08      	bge.n	801d8b0 <ee_number+0x70>
    {
      sign = '-';
 801d89e:	232d      	movs	r3, #45	; 0x2d
 801d8a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	425b      	negs	r3, r3
 801d8a8:	607b      	str	r3, [r7, #4]
      size--;
 801d8aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8ac:	3b01      	subs	r3, #1
 801d8ae:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d11e      	bne.n	801d8f8 <ee_number+0xb8>
    tmp[i++] = '0';
 801d8ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8bc:	1c5a      	adds	r2, r3, #1
 801d8be:	657a      	str	r2, [r7, #84]	; 0x54
 801d8c0:	3360      	adds	r3, #96	; 0x60
 801d8c2:	443b      	add	r3, r7
 801d8c4:	2230      	movs	r2, #48	; 0x30
 801d8c6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d8ca:	e018      	b.n	801d8fe <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	683a      	ldr	r2, [r7, #0]
 801d8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8d4:	fb01 f202 	mul.w	r2, r1, r2
 801d8d8:	1a9b      	subs	r3, r3, r2
 801d8da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d8dc:	441a      	add	r2, r3
 801d8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8e0:	1c59      	adds	r1, r3, #1
 801d8e2:	6579      	str	r1, [r7, #84]	; 0x54
 801d8e4:	7812      	ldrb	r2, [r2, #0]
 801d8e6:	3360      	adds	r3, #96	; 0x60
 801d8e8:	443b      	add	r3, r7
 801d8ea:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d8ee:	687a      	ldr	r2, [r7, #4]
 801d8f0:	683b      	ldr	r3, [r7, #0]
 801d8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801d8f6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d1e6      	bne.n	801d8cc <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d8fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d902:	429a      	cmp	r2, r3
 801d904:	dd01      	ble.n	801d90a <ee_number+0xca>
 801d906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d908:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d90a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d90c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d90e:	1ad3      	subs	r3, r2, r3
 801d910:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d914:	f003 0301 	and.w	r3, r3, #1
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d112      	bne.n	801d942 <ee_number+0x102>
 801d91c:	e00c      	b.n	801d938 <ee_number+0xf8>
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	1c5a      	adds	r2, r3, #1
 801d922:	60fa      	str	r2, [r7, #12]
 801d924:	2220      	movs	r2, #32
 801d926:	701a      	strb	r2, [r3, #0]
 801d928:	68bb      	ldr	r3, [r7, #8]
 801d92a:	3b01      	subs	r3, #1
 801d92c:	60bb      	str	r3, [r7, #8]
 801d92e:	68bb      	ldr	r3, [r7, #8]
 801d930:	2b00      	cmp	r3, #0
 801d932:	d101      	bne.n	801d938 <ee_number+0xf8>
 801d934:	68fb      	ldr	r3, [r7, #12]
 801d936:	e068      	b.n	801da0a <ee_number+0x1ca>
 801d938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d93a:	1e5a      	subs	r2, r3, #1
 801d93c:	66ba      	str	r2, [r7, #104]	; 0x68
 801d93e:	2b00      	cmp	r3, #0
 801d940:	dced      	bgt.n	801d91e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d946:	2b00      	cmp	r3, #0
 801d948:	d01b      	beq.n	801d982 <ee_number+0x142>
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	1c5a      	adds	r2, r3, #1
 801d94e:	60fa      	str	r2, [r7, #12]
 801d950:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d954:	701a      	strb	r2, [r3, #0]
 801d956:	68bb      	ldr	r3, [r7, #8]
 801d958:	3b01      	subs	r3, #1
 801d95a:	60bb      	str	r3, [r7, #8]
 801d95c:	68bb      	ldr	r3, [r7, #8]
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d10f      	bne.n	801d982 <ee_number+0x142>
 801d962:	68fb      	ldr	r3, [r7, #12]
 801d964:	e051      	b.n	801da0a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	1c5a      	adds	r2, r3, #1
 801d96a:	60fa      	str	r2, [r7, #12]
 801d96c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d970:	701a      	strb	r2, [r3, #0]
 801d972:	68bb      	ldr	r3, [r7, #8]
 801d974:	3b01      	subs	r3, #1
 801d976:	60bb      	str	r3, [r7, #8]
 801d978:	68bb      	ldr	r3, [r7, #8]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d101      	bne.n	801d982 <ee_number+0x142>
 801d97e:	68fb      	ldr	r3, [r7, #12]
 801d980:	e043      	b.n	801da0a <ee_number+0x1ca>
 801d982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d984:	1e5a      	subs	r2, r3, #1
 801d986:	66ba      	str	r2, [r7, #104]	; 0x68
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dcec      	bgt.n	801d966 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d98c:	e00c      	b.n	801d9a8 <ee_number+0x168>
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	1c5a      	adds	r2, r3, #1
 801d992:	60fa      	str	r2, [r7, #12]
 801d994:	2230      	movs	r2, #48	; 0x30
 801d996:	701a      	strb	r2, [r3, #0]
 801d998:	68bb      	ldr	r3, [r7, #8]
 801d99a:	3b01      	subs	r3, #1
 801d99c:	60bb      	str	r3, [r7, #8]
 801d99e:	68bb      	ldr	r3, [r7, #8]
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d101      	bne.n	801d9a8 <ee_number+0x168>
 801d9a4:	68fb      	ldr	r3, [r7, #12]
 801d9a6:	e030      	b.n	801da0a <ee_number+0x1ca>
 801d9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9aa:	1e5a      	subs	r2, r3, #1
 801d9ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d9ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9b0:	429a      	cmp	r2, r3
 801d9b2:	dbec      	blt.n	801d98e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d9b4:	e010      	b.n	801d9d8 <ee_number+0x198>
 801d9b6:	68fb      	ldr	r3, [r7, #12]
 801d9b8:	1c5a      	adds	r2, r3, #1
 801d9ba:	60fa      	str	r2, [r7, #12]
 801d9bc:	f107 0110 	add.w	r1, r7, #16
 801d9c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9c2:	440a      	add	r2, r1
 801d9c4:	7812      	ldrb	r2, [r2, #0]
 801d9c6:	701a      	strb	r2, [r3, #0]
 801d9c8:	68bb      	ldr	r3, [r7, #8]
 801d9ca:	3b01      	subs	r3, #1
 801d9cc:	60bb      	str	r3, [r7, #8]
 801d9ce:	68bb      	ldr	r3, [r7, #8]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d101      	bne.n	801d9d8 <ee_number+0x198>
 801d9d4:	68fb      	ldr	r3, [r7, #12]
 801d9d6:	e018      	b.n	801da0a <ee_number+0x1ca>
 801d9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9da:	1e5a      	subs	r2, r3, #1
 801d9dc:	657a      	str	r2, [r7, #84]	; 0x54
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	dce9      	bgt.n	801d9b6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d9e2:	e00c      	b.n	801d9fe <ee_number+0x1be>
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	1c5a      	adds	r2, r3, #1
 801d9e8:	60fa      	str	r2, [r7, #12]
 801d9ea:	2220      	movs	r2, #32
 801d9ec:	701a      	strb	r2, [r3, #0]
 801d9ee:	68bb      	ldr	r3, [r7, #8]
 801d9f0:	3b01      	subs	r3, #1
 801d9f2:	60bb      	str	r3, [r7, #8]
 801d9f4:	68bb      	ldr	r3, [r7, #8]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d101      	bne.n	801d9fe <ee_number+0x1be>
 801d9fa:	68fb      	ldr	r3, [r7, #12]
 801d9fc:	e005      	b.n	801da0a <ee_number+0x1ca>
 801d9fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da00:	1e5a      	subs	r2, r3, #1
 801da02:	66ba      	str	r2, [r7, #104]	; 0x68
 801da04:	2b00      	cmp	r3, #0
 801da06:	dced      	bgt.n	801d9e4 <ee_number+0x1a4>

  return str;
 801da08:	68fb      	ldr	r3, [r7, #12]
}
 801da0a:	4618      	mov	r0, r3
 801da0c:	3764      	adds	r7, #100	; 0x64
 801da0e:	46bd      	mov	sp, r7
 801da10:	bc80      	pop	{r7}
 801da12:	4770      	bx	lr
 801da14:	20000158 	.word	0x20000158
 801da18:	2000015c 	.word	0x2000015c

0801da1c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b092      	sub	sp, #72	; 0x48
 801da20:	af04      	add	r7, sp, #16
 801da22:	60f8      	str	r0, [r7, #12]
 801da24:	60b9      	str	r1, [r7, #8]
 801da26:	607a      	str	r2, [r7, #4]
 801da28:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801da2a:	68bb      	ldr	r3, [r7, #8]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	dc01      	bgt.n	801da34 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801da30:	2300      	movs	r3, #0
 801da32:	e13e      	b.n	801dcb2 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da38:	e128      	b.n	801dc8c <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801da3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	1ad2      	subs	r2, r2, r3
 801da40:	68bb      	ldr	r3, [r7, #8]
 801da42:	3b01      	subs	r3, #1
 801da44:	429a      	cmp	r2, r3
 801da46:	f280 812e 	bge.w	801dca6 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801da4a:	687b      	ldr	r3, [r7, #4]
 801da4c:	781b      	ldrb	r3, [r3, #0]
 801da4e:	2b25      	cmp	r3, #37	; 0x25
 801da50:	d006      	beq.n	801da60 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801da52:	687a      	ldr	r2, [r7, #4]
 801da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da56:	1c59      	adds	r1, r3, #1
 801da58:	62f9      	str	r1, [r7, #44]	; 0x2c
 801da5a:	7812      	ldrb	r2, [r2, #0]
 801da5c:	701a      	strb	r2, [r3, #0]
      continue;
 801da5e:	e112      	b.n	801dc86 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801da60:	2300      	movs	r3, #0
 801da62:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	3301      	adds	r3, #1
 801da68:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	781b      	ldrb	r3, [r3, #0]
 801da6e:	2b30      	cmp	r3, #48	; 0x30
 801da70:	d103      	bne.n	801da7a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801da72:	6a3b      	ldr	r3, [r7, #32]
 801da74:	f043 0301 	orr.w	r3, r3, #1
 801da78:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801da7a:	f04f 33ff 	mov.w	r3, #4294967295
 801da7e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	781b      	ldrb	r3, [r3, #0]
 801da84:	2b2f      	cmp	r3, #47	; 0x2f
 801da86:	d908      	bls.n	801da9a <tiny_vsnprintf_like+0x7e>
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	781b      	ldrb	r3, [r3, #0]
 801da8c:	2b39      	cmp	r3, #57	; 0x39
 801da8e:	d804      	bhi.n	801da9a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801da90:	1d3b      	adds	r3, r7, #4
 801da92:	4618      	mov	r0, r3
 801da94:	f7ff feae 	bl	801d7f4 <ee_skip_atoi>
 801da98:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801da9a:	f04f 33ff 	mov.w	r3, #4294967295
 801da9e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801daa0:	f04f 33ff 	mov.w	r3, #4294967295
 801daa4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801daa6:	230a      	movs	r3, #10
 801daa8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	781b      	ldrb	r3, [r3, #0]
 801daae:	3b58      	subs	r3, #88	; 0x58
 801dab0:	2b20      	cmp	r3, #32
 801dab2:	f200 8094 	bhi.w	801dbde <tiny_vsnprintf_like+0x1c2>
 801dab6:	a201      	add	r2, pc, #4	; (adr r2, 801dabc <tiny_vsnprintf_like+0xa0>)
 801dab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dabc:	0801dbc7 	.word	0x0801dbc7
 801dac0:	0801dbdf 	.word	0x0801dbdf
 801dac4:	0801dbdf 	.word	0x0801dbdf
 801dac8:	0801dbdf 	.word	0x0801dbdf
 801dacc:	0801dbdf 	.word	0x0801dbdf
 801dad0:	0801dbdf 	.word	0x0801dbdf
 801dad4:	0801dbdf 	.word	0x0801dbdf
 801dad8:	0801dbdf 	.word	0x0801dbdf
 801dadc:	0801dbdf 	.word	0x0801dbdf
 801dae0:	0801dbdf 	.word	0x0801dbdf
 801dae4:	0801dbdf 	.word	0x0801dbdf
 801dae8:	0801db4b 	.word	0x0801db4b
 801daec:	0801dbd5 	.word	0x0801dbd5
 801daf0:	0801dbdf 	.word	0x0801dbdf
 801daf4:	0801dbdf 	.word	0x0801dbdf
 801daf8:	0801dbdf 	.word	0x0801dbdf
 801dafc:	0801dbdf 	.word	0x0801dbdf
 801db00:	0801dbd5 	.word	0x0801dbd5
 801db04:	0801dbdf 	.word	0x0801dbdf
 801db08:	0801dbdf 	.word	0x0801dbdf
 801db0c:	0801dbdf 	.word	0x0801dbdf
 801db10:	0801dbdf 	.word	0x0801dbdf
 801db14:	0801dbdf 	.word	0x0801dbdf
 801db18:	0801dbdf 	.word	0x0801dbdf
 801db1c:	0801dbdf 	.word	0x0801dbdf
 801db20:	0801dbdf 	.word	0x0801dbdf
 801db24:	0801dbdf 	.word	0x0801dbdf
 801db28:	0801db6b 	.word	0x0801db6b
 801db2c:	0801dbdf 	.word	0x0801dbdf
 801db30:	0801dc2b 	.word	0x0801dc2b
 801db34:	0801dbdf 	.word	0x0801dbdf
 801db38:	0801dbdf 	.word	0x0801dbdf
 801db3c:	0801dbcf 	.word	0x0801dbcf
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db42:	1c5a      	adds	r2, r3, #1
 801db44:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db46:	2220      	movs	r2, #32
 801db48:	701a      	strb	r2, [r3, #0]
 801db4a:	69fb      	ldr	r3, [r7, #28]
 801db4c:	3b01      	subs	r3, #1
 801db4e:	61fb      	str	r3, [r7, #28]
 801db50:	69fb      	ldr	r3, [r7, #28]
 801db52:	2b00      	cmp	r3, #0
 801db54:	dcf4      	bgt.n	801db40 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801db56:	683b      	ldr	r3, [r7, #0]
 801db58:	1d1a      	adds	r2, r3, #4
 801db5a:	603a      	str	r2, [r7, #0]
 801db5c:	6819      	ldr	r1, [r3, #0]
 801db5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db60:	1c5a      	adds	r2, r3, #1
 801db62:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db64:	b2ca      	uxtb	r2, r1
 801db66:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801db68:	e08d      	b.n	801dc86 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801db6a:	683b      	ldr	r3, [r7, #0]
 801db6c:	1d1a      	adds	r2, r3, #4
 801db6e:	603a      	str	r2, [r7, #0]
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db76:	2b00      	cmp	r3, #0
 801db78:	d101      	bne.n	801db7e <tiny_vsnprintf_like+0x162>
 801db7a:	4b50      	ldr	r3, [pc, #320]	; (801dcbc <tiny_vsnprintf_like+0x2a0>)
 801db7c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801db7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db80:	f7e2 fafa 	bl	8000178 <strlen>
 801db84:	4603      	mov	r3, r0
 801db86:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801db88:	e004      	b.n	801db94 <tiny_vsnprintf_like+0x178>
 801db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db8c:	1c5a      	adds	r2, r3, #1
 801db8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db90:	2220      	movs	r2, #32
 801db92:	701a      	strb	r2, [r3, #0]
 801db94:	69fb      	ldr	r3, [r7, #28]
 801db96:	1e5a      	subs	r2, r3, #1
 801db98:	61fa      	str	r2, [r7, #28]
 801db9a:	693a      	ldr	r2, [r7, #16]
 801db9c:	429a      	cmp	r2, r3
 801db9e:	dbf4      	blt.n	801db8a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801dba0:	2300      	movs	r3, #0
 801dba2:	62bb      	str	r3, [r7, #40]	; 0x28
 801dba4:	e00a      	b.n	801dbbc <tiny_vsnprintf_like+0x1a0>
 801dba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dba8:	1c53      	adds	r3, r2, #1
 801dbaa:	627b      	str	r3, [r7, #36]	; 0x24
 801dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbae:	1c59      	adds	r1, r3, #1
 801dbb0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dbb2:	7812      	ldrb	r2, [r2, #0]
 801dbb4:	701a      	strb	r2, [r3, #0]
 801dbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbb8:	3301      	adds	r3, #1
 801dbba:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbbe:	693b      	ldr	r3, [r7, #16]
 801dbc0:	429a      	cmp	r2, r3
 801dbc2:	dbf0      	blt.n	801dba6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801dbc4:	e05f      	b.n	801dc86 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801dbc6:	6a3b      	ldr	r3, [r7, #32]
 801dbc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbcc:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801dbce:	2310      	movs	r3, #16
 801dbd0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801dbd2:	e02b      	b.n	801dc2c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801dbd4:	6a3b      	ldr	r3, [r7, #32]
 801dbd6:	f043 0302 	orr.w	r3, r3, #2
 801dbda:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801dbdc:	e025      	b.n	801dc2a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	2b25      	cmp	r3, #37	; 0x25
 801dbe4:	d004      	beq.n	801dbf0 <tiny_vsnprintf_like+0x1d4>
 801dbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbe8:	1c5a      	adds	r2, r3, #1
 801dbea:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dbec:	2225      	movs	r2, #37	; 0x25
 801dbee:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801dbf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dbf2:	68fb      	ldr	r3, [r7, #12]
 801dbf4:	1ad2      	subs	r2, r2, r3
 801dbf6:	68bb      	ldr	r3, [r7, #8]
 801dbf8:	3b01      	subs	r3, #1
 801dbfa:	429a      	cmp	r2, r3
 801dbfc:	da16      	bge.n	801dc2c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801dbfe:	687b      	ldr	r3, [r7, #4]
 801dc00:	781b      	ldrb	r3, [r3, #0]
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d006      	beq.n	801dc14 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dc06:	687a      	ldr	r2, [r7, #4]
 801dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc0a:	1c59      	adds	r1, r3, #1
 801dc0c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dc0e:	7812      	ldrb	r2, [r2, #0]
 801dc10:	701a      	strb	r2, [r3, #0]
 801dc12:	e002      	b.n	801dc1a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801dc14:	687b      	ldr	r3, [r7, #4]
 801dc16:	3b01      	subs	r3, #1
 801dc18:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801dc1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	1ad2      	subs	r2, r2, r3
 801dc20:	68bb      	ldr	r3, [r7, #8]
 801dc22:	3b01      	subs	r3, #1
 801dc24:	429a      	cmp	r2, r3
 801dc26:	db2d      	blt.n	801dc84 <tiny_vsnprintf_like+0x268>
 801dc28:	e000      	b.n	801dc2c <tiny_vsnprintf_like+0x210>
        break;
 801dc2a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dc2c:	697b      	ldr	r3, [r7, #20]
 801dc2e:	2b6c      	cmp	r3, #108	; 0x6c
 801dc30:	d105      	bne.n	801dc3e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dc32:	683b      	ldr	r3, [r7, #0]
 801dc34:	1d1a      	adds	r2, r3, #4
 801dc36:	603a      	str	r2, [r7, #0]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	637b      	str	r3, [r7, #52]	; 0x34
 801dc3c:	e00f      	b.n	801dc5e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801dc3e:	6a3b      	ldr	r3, [r7, #32]
 801dc40:	f003 0302 	and.w	r3, r3, #2
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	d005      	beq.n	801dc54 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dc48:	683b      	ldr	r3, [r7, #0]
 801dc4a:	1d1a      	adds	r2, r3, #4
 801dc4c:	603a      	str	r2, [r7, #0]
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	637b      	str	r3, [r7, #52]	; 0x34
 801dc52:	e004      	b.n	801dc5e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801dc54:	683b      	ldr	r3, [r7, #0]
 801dc56:	1d1a      	adds	r2, r3, #4
 801dc58:	603a      	str	r2, [r7, #0]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dc5e:	68bb      	ldr	r3, [r7, #8]
 801dc60:	1e5a      	subs	r2, r3, #1
 801dc62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc64:	68fb      	ldr	r3, [r7, #12]
 801dc66:	1acb      	subs	r3, r1, r3
 801dc68:	1ad1      	subs	r1, r2, r3
 801dc6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc6c:	6a3b      	ldr	r3, [r7, #32]
 801dc6e:	9302      	str	r3, [sp, #8]
 801dc70:	69bb      	ldr	r3, [r7, #24]
 801dc72:	9301      	str	r3, [sp, #4]
 801dc74:	69fb      	ldr	r3, [r7, #28]
 801dc76:	9300      	str	r3, [sp, #0]
 801dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dc7c:	f7ff fde0 	bl	801d840 <ee_number>
 801dc80:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dc82:	e000      	b.n	801dc86 <tiny_vsnprintf_like+0x26a>
        continue;
 801dc84:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dc86:	687b      	ldr	r3, [r7, #4]
 801dc88:	3301      	adds	r3, #1
 801dc8a:	607b      	str	r3, [r7, #4]
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	781b      	ldrb	r3, [r3, #0]
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	f47f aed2 	bne.w	801da3a <tiny_vsnprintf_like+0x1e>
 801dc96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	1ad2      	subs	r2, r2, r3
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	3b01      	subs	r3, #1
 801dca0:	429a      	cmp	r2, r3
 801dca2:	f6bf aeca 	bge.w	801da3a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801dca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dca8:	2200      	movs	r2, #0
 801dcaa:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dcac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	1ad3      	subs	r3, r2, r3
}
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	3738      	adds	r7, #56	; 0x38
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	bd80      	pop	{r7, pc}
 801dcba:	bf00      	nop
 801dcbc:	0801f500 	.word	0x0801f500

0801dcc0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dcc0:	b580      	push	{r7, lr}
 801dcc2:	b090      	sub	sp, #64	; 0x40
 801dcc4:	af00      	add	r7, sp, #0
 801dcc6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dcc8:	4b73      	ldr	r3, [pc, #460]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dcce:	4b72      	ldr	r3, [pc, #456]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801dcd0:	681a      	ldr	r2, [r3, #0]
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	4013      	ands	r3, r2
 801dcd6:	4a70      	ldr	r2, [pc, #448]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801dcd8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dcda:	4b70      	ldr	r3, [pc, #448]	; (801de9c <UTIL_SEQ_Run+0x1dc>)
 801dcdc:	681b      	ldr	r3, [r3, #0]
 801dcde:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dce0:	4b6f      	ldr	r3, [pc, #444]	; (801dea0 <UTIL_SEQ_Run+0x1e0>)
 801dce2:	681b      	ldr	r3, [r3, #0]
 801dce4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dce6:	4b6f      	ldr	r3, [pc, #444]	; (801dea4 <UTIL_SEQ_Run+0x1e4>)
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dcec:	4b6e      	ldr	r3, [pc, #440]	; (801dea8 <UTIL_SEQ_Run+0x1e8>)
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dcf2:	e08d      	b.n	801de10 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dcf4:	2300      	movs	r3, #0
 801dcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dcf8:	e002      	b.n	801dd00 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcfc:	3301      	adds	r3, #1
 801dcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd00:	4a6a      	ldr	r2, [pc, #424]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd0a:	401a      	ands	r2, r3
 801dd0c:	4b62      	ldr	r3, [pc, #392]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	4013      	ands	r3, r2
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d0f1      	beq.n	801dcfa <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dd16:	4a65      	ldr	r2, [pc, #404]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd1a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd20:	401a      	ands	r2, r3
 801dd22:	4b5d      	ldr	r3, [pc, #372]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801dd24:	681b      	ldr	r3, [r3, #0]
 801dd26:	4013      	ands	r3, r2
 801dd28:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dd2a:	4a60      	ldr	r2, [pc, #384]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd2e:	00db      	lsls	r3, r3, #3
 801dd30:	4413      	add	r3, r2
 801dd32:	685a      	ldr	r2, [r3, #4]
 801dd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd36:	4013      	ands	r3, r2
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d106      	bne.n	801dd4a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dd3c:	4a5b      	ldr	r2, [pc, #364]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd40:	00db      	lsls	r3, r3, #3
 801dd42:	4413      	add	r3, r2
 801dd44:	f04f 32ff 	mov.w	r2, #4294967295
 801dd48:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dd4a:	4a58      	ldr	r2, [pc, #352]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd4e:	00db      	lsls	r3, r3, #3
 801dd50:	4413      	add	r3, r2
 801dd52:	685a      	ldr	r2, [r3, #4]
 801dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd56:	4013      	ands	r3, r2
 801dd58:	4618      	mov	r0, r3
 801dd5a:	f000 f907 	bl	801df6c <SEQ_BitPosition>
 801dd5e:	4603      	mov	r3, r0
 801dd60:	461a      	mov	r2, r3
 801dd62:	4b53      	ldr	r3, [pc, #332]	; (801deb0 <UTIL_SEQ_Run+0x1f0>)
 801dd64:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dd66:	4a51      	ldr	r2, [pc, #324]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd6a:	00db      	lsls	r3, r3, #3
 801dd6c:	4413      	add	r3, r2
 801dd6e:	685a      	ldr	r2, [r3, #4]
 801dd70:	4b4f      	ldr	r3, [pc, #316]	; (801deb0 <UTIL_SEQ_Run+0x1f0>)
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	2101      	movs	r1, #1
 801dd76:	fa01 f303 	lsl.w	r3, r1, r3
 801dd7a:	43db      	mvns	r3, r3
 801dd7c:	401a      	ands	r2, r3
 801dd7e:	494b      	ldr	r1, [pc, #300]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801dd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd82:	00db      	lsls	r3, r3, #3
 801dd84:	440b      	add	r3, r1
 801dd86:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd88:	f3ef 8310 	mrs	r3, PRIMASK
 801dd8c:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd8e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801dd90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd92:	b672      	cpsid	i
}
 801dd94:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801dd96:	4b46      	ldr	r3, [pc, #280]	; (801deb0 <UTIL_SEQ_Run+0x1f0>)
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	2201      	movs	r2, #1
 801dd9c:	fa02 f303 	lsl.w	r3, r2, r3
 801dda0:	43da      	mvns	r2, r3
 801dda2:	4b3e      	ldr	r3, [pc, #248]	; (801de9c <UTIL_SEQ_Run+0x1dc>)
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	4013      	ands	r3, r2
 801dda8:	4a3c      	ldr	r2, [pc, #240]	; (801de9c <UTIL_SEQ_Run+0x1dc>)
 801ddaa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ddac:	2301      	movs	r3, #1
 801ddae:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddb0:	e013      	b.n	801ddda <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddb4:	3b01      	subs	r3, #1
 801ddb6:	4a3d      	ldr	r2, [pc, #244]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801ddb8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ddbc:	4b3c      	ldr	r3, [pc, #240]	; (801deb0 <UTIL_SEQ_Run+0x1f0>)
 801ddbe:	681b      	ldr	r3, [r3, #0]
 801ddc0:	2201      	movs	r2, #1
 801ddc2:	fa02 f303 	lsl.w	r3, r2, r3
 801ddc6:	43da      	mvns	r2, r3
 801ddc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddca:	3b01      	subs	r3, #1
 801ddcc:	400a      	ands	r2, r1
 801ddce:	4937      	ldr	r1, [pc, #220]	; (801deac <UTIL_SEQ_Run+0x1ec>)
 801ddd0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ddd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddd6:	3b01      	subs	r3, #1
 801ddd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d1e8      	bne.n	801ddb2 <UTIL_SEQ_Run+0xf2>
 801dde0:	6a3b      	ldr	r3, [r7, #32]
 801dde2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dde4:	697b      	ldr	r3, [r7, #20]
 801dde6:	f383 8810 	msr	PRIMASK, r3
}
 801ddea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ddec:	4b30      	ldr	r3, [pc, #192]	; (801deb0 <UTIL_SEQ_Run+0x1f0>)
 801ddee:	681b      	ldr	r3, [r3, #0]
 801ddf0:	4a30      	ldr	r2, [pc, #192]	; (801deb4 <UTIL_SEQ_Run+0x1f4>)
 801ddf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ddf6:	4798      	blx	r3

    local_taskset = TaskSet;
 801ddf8:	4b28      	ldr	r3, [pc, #160]	; (801de9c <UTIL_SEQ_Run+0x1dc>)
 801ddfa:	681b      	ldr	r3, [r3, #0]
 801ddfc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ddfe:	4b28      	ldr	r3, [pc, #160]	; (801dea0 <UTIL_SEQ_Run+0x1e0>)
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801de04:	4b27      	ldr	r3, [pc, #156]	; (801dea4 <UTIL_SEQ_Run+0x1e4>)
 801de06:	681b      	ldr	r3, [r3, #0]
 801de08:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801de0a:	4b27      	ldr	r3, [pc, #156]	; (801dea8 <UTIL_SEQ_Run+0x1e8>)
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801de10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de14:	401a      	ands	r2, r3
 801de16:	4b20      	ldr	r3, [pc, #128]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801de18:	681b      	ldr	r3, [r3, #0]
 801de1a:	4013      	ands	r3, r2
 801de1c:	2b00      	cmp	r3, #0
 801de1e:	d005      	beq.n	801de2c <UTIL_SEQ_Run+0x16c>
 801de20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de24:	4013      	ands	r3, r2
 801de26:	2b00      	cmp	r3, #0
 801de28:	f43f af64 	beq.w	801dcf4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801de2c:	4b20      	ldr	r3, [pc, #128]	; (801deb0 <UTIL_SEQ_Run+0x1f0>)
 801de2e:	f04f 32ff 	mov.w	r2, #4294967295
 801de32:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801de34:	f000 f88e 	bl	801df54 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de38:	f3ef 8310 	mrs	r3, PRIMASK
 801de3c:	613b      	str	r3, [r7, #16]
  return(result);
 801de3e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801de40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de42:	b672      	cpsid	i
}
 801de44:	bf00      	nop
  local_taskset = TaskSet;
 801de46:	4b15      	ldr	r3, [pc, #84]	; (801de9c <UTIL_SEQ_Run+0x1dc>)
 801de48:	681b      	ldr	r3, [r3, #0]
 801de4a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801de4c:	4b14      	ldr	r3, [pc, #80]	; (801dea0 <UTIL_SEQ_Run+0x1e0>)
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801de52:	4b14      	ldr	r3, [pc, #80]	; (801dea4 <UTIL_SEQ_Run+0x1e4>)
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801de58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de5c:	401a      	ands	r2, r3
 801de5e:	4b0e      	ldr	r3, [pc, #56]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801de60:	681b      	ldr	r3, [r3, #0]
 801de62:	4013      	ands	r3, r2
 801de64:	2b00      	cmp	r3, #0
 801de66:	d107      	bne.n	801de78 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801de68:	4b0f      	ldr	r3, [pc, #60]	; (801dea8 <UTIL_SEQ_Run+0x1e8>)
 801de6a:	681a      	ldr	r2, [r3, #0]
 801de6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de6e:	4013      	ands	r3, r2
 801de70:	2b00      	cmp	r3, #0
 801de72:	d101      	bne.n	801de78 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801de74:	f7e4 fda6 	bl	80029c4 <UTIL_SEQ_Idle>
 801de78:	69fb      	ldr	r3, [r7, #28]
 801de7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	f383 8810 	msr	PRIMASK, r3
}
 801de82:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801de84:	f000 f86c 	bl	801df60 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801de88:	4a03      	ldr	r2, [pc, #12]	; (801de98 <UTIL_SEQ_Run+0x1d8>)
 801de8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de8c:	6013      	str	r3, [r2, #0]

  return;
 801de8e:	bf00      	nop
}
 801de90:	3740      	adds	r7, #64	; 0x40
 801de92:	46bd      	mov	sp, r7
 801de94:	bd80      	pop	{r7, pc}
 801de96:	bf00      	nop
 801de98:	20000164 	.word	0x20000164
 801de9c:	200018d4 	.word	0x200018d4
 801dea0:	200018d8 	.word	0x200018d8
 801dea4:	20000160 	.word	0x20000160
 801dea8:	200018dc 	.word	0x200018dc
 801deac:	200018f4 	.word	0x200018f4
 801deb0:	200018e0 	.word	0x200018e0
 801deb4:	200018e4 	.word	0x200018e4

0801deb8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801deb8:	b580      	push	{r7, lr}
 801deba:	b088      	sub	sp, #32
 801debc:	af00      	add	r7, sp, #0
 801debe:	60f8      	str	r0, [r7, #12]
 801dec0:	60b9      	str	r1, [r7, #8]
 801dec2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dec4:	f3ef 8310 	mrs	r3, PRIMASK
 801dec8:	617b      	str	r3, [r7, #20]
  return(result);
 801deca:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801decc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801dece:	b672      	cpsid	i
}
 801ded0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ded2:	68f8      	ldr	r0, [r7, #12]
 801ded4:	f000 f84a 	bl	801df6c <SEQ_BitPosition>
 801ded8:	4603      	mov	r3, r0
 801deda:	4619      	mov	r1, r3
 801dedc:	4a06      	ldr	r2, [pc, #24]	; (801def8 <UTIL_SEQ_RegTask+0x40>)
 801dede:	687b      	ldr	r3, [r7, #4]
 801dee0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801dee4:	69fb      	ldr	r3, [r7, #28]
 801dee6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dee8:	69bb      	ldr	r3, [r7, #24]
 801deea:	f383 8810 	msr	PRIMASK, r3
}
 801deee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801def0:	bf00      	nop
}
 801def2:	3720      	adds	r7, #32
 801def4:	46bd      	mov	sp, r7
 801def6:	bd80      	pop	{r7, pc}
 801def8:	200018e4 	.word	0x200018e4

0801defc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801defc:	b480      	push	{r7}
 801defe:	b087      	sub	sp, #28
 801df00:	af00      	add	r7, sp, #0
 801df02:	6078      	str	r0, [r7, #4]
 801df04:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df06:	f3ef 8310 	mrs	r3, PRIMASK
 801df0a:	60fb      	str	r3, [r7, #12]
  return(result);
 801df0c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801df0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801df10:	b672      	cpsid	i
}
 801df12:	bf00      	nop

  TaskSet |= TaskId_bm;
 801df14:	4b0d      	ldr	r3, [pc, #52]	; (801df4c <UTIL_SEQ_SetTask+0x50>)
 801df16:	681a      	ldr	r2, [r3, #0]
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	4313      	orrs	r3, r2
 801df1c:	4a0b      	ldr	r2, [pc, #44]	; (801df4c <UTIL_SEQ_SetTask+0x50>)
 801df1e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801df20:	4a0b      	ldr	r2, [pc, #44]	; (801df50 <UTIL_SEQ_SetTask+0x54>)
 801df22:	683b      	ldr	r3, [r7, #0]
 801df24:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	431a      	orrs	r2, r3
 801df2c:	4908      	ldr	r1, [pc, #32]	; (801df50 <UTIL_SEQ_SetTask+0x54>)
 801df2e:	683b      	ldr	r3, [r7, #0]
 801df30:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801df34:	697b      	ldr	r3, [r7, #20]
 801df36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df38:	693b      	ldr	r3, [r7, #16]
 801df3a:	f383 8810 	msr	PRIMASK, r3
}
 801df3e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801df40:	bf00      	nop
}
 801df42:	371c      	adds	r7, #28
 801df44:	46bd      	mov	sp, r7
 801df46:	bc80      	pop	{r7}
 801df48:	4770      	bx	lr
 801df4a:	bf00      	nop
 801df4c:	200018d4 	.word	0x200018d4
 801df50:	200018f4 	.word	0x200018f4

0801df54 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801df54:	b480      	push	{r7}
 801df56:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df58:	bf00      	nop
}
 801df5a:	46bd      	mov	sp, r7
 801df5c:	bc80      	pop	{r7}
 801df5e:	4770      	bx	lr

0801df60 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801df60:	b480      	push	{r7}
 801df62:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df64:	bf00      	nop
}
 801df66:	46bd      	mov	sp, r7
 801df68:	bc80      	pop	{r7}
 801df6a:	4770      	bx	lr

0801df6c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801df6c:	b480      	push	{r7}
 801df6e:	b085      	sub	sp, #20
 801df70:	af00      	add	r7, sp, #0
 801df72:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801df74:	2300      	movs	r3, #0
 801df76:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801df7c:	68bb      	ldr	r3, [r7, #8]
 801df7e:	0c1b      	lsrs	r3, r3, #16
 801df80:	041b      	lsls	r3, r3, #16
 801df82:	2b00      	cmp	r3, #0
 801df84:	d104      	bne.n	801df90 <SEQ_BitPosition+0x24>
 801df86:	2310      	movs	r3, #16
 801df88:	73fb      	strb	r3, [r7, #15]
 801df8a:	68bb      	ldr	r3, [r7, #8]
 801df8c:	041b      	lsls	r3, r3, #16
 801df8e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801df90:	68bb      	ldr	r3, [r7, #8]
 801df92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801df96:	2b00      	cmp	r3, #0
 801df98:	d105      	bne.n	801dfa6 <SEQ_BitPosition+0x3a>
 801df9a:	7bfb      	ldrb	r3, [r7, #15]
 801df9c:	3308      	adds	r3, #8
 801df9e:	73fb      	strb	r3, [r7, #15]
 801dfa0:	68bb      	ldr	r3, [r7, #8]
 801dfa2:	021b      	lsls	r3, r3, #8
 801dfa4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801dfa6:	68bb      	ldr	r3, [r7, #8]
 801dfa8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	d105      	bne.n	801dfbc <SEQ_BitPosition+0x50>
 801dfb0:	7bfb      	ldrb	r3, [r7, #15]
 801dfb2:	3304      	adds	r3, #4
 801dfb4:	73fb      	strb	r3, [r7, #15]
 801dfb6:	68bb      	ldr	r3, [r7, #8]
 801dfb8:	011b      	lsls	r3, r3, #4
 801dfba:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801dfbc:	68bb      	ldr	r3, [r7, #8]
 801dfbe:	0f1b      	lsrs	r3, r3, #28
 801dfc0:	4a06      	ldr	r2, [pc, #24]	; (801dfdc <SEQ_BitPosition+0x70>)
 801dfc2:	5cd2      	ldrb	r2, [r2, r3]
 801dfc4:	7bfb      	ldrb	r3, [r7, #15]
 801dfc6:	4413      	add	r3, r2
 801dfc8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801dfca:	7bfb      	ldrb	r3, [r7, #15]
 801dfcc:	f1c3 031f 	rsb	r3, r3, #31
 801dfd0:	b2db      	uxtb	r3, r3
}
 801dfd2:	4618      	mov	r0, r3
 801dfd4:	3714      	adds	r7, #20
 801dfd6:	46bd      	mov	sp, r7
 801dfd8:	bc80      	pop	{r7}
 801dfda:	4770      	bx	lr
 801dfdc:	0801fb44 	.word	0x0801fb44

0801dfe0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801dfe0:	b580      	push	{r7, lr}
 801dfe2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801dfe4:	4b04      	ldr	r3, [pc, #16]	; (801dff8 <UTIL_TIMER_Init+0x18>)
 801dfe6:	2200      	movs	r2, #0
 801dfe8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801dfea:	4b04      	ldr	r3, [pc, #16]	; (801dffc <UTIL_TIMER_Init+0x1c>)
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	4798      	blx	r3
 801dff0:	4603      	mov	r3, r0
}
 801dff2:	4618      	mov	r0, r3
 801dff4:	bd80      	pop	{r7, pc}
 801dff6:	bf00      	nop
 801dff8:	200018fc 	.word	0x200018fc
 801dffc:	0801f5c0 	.word	0x0801f5c0

0801e000 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e000:	b580      	push	{r7, lr}
 801e002:	b084      	sub	sp, #16
 801e004:	af00      	add	r7, sp, #0
 801e006:	60f8      	str	r0, [r7, #12]
 801e008:	60b9      	str	r1, [r7, #8]
 801e00a:	603b      	str	r3, [r7, #0]
 801e00c:	4613      	mov	r3, r2
 801e00e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e010:	68fb      	ldr	r3, [r7, #12]
 801e012:	2b00      	cmp	r3, #0
 801e014:	d023      	beq.n	801e05e <UTIL_TIMER_Create+0x5e>
 801e016:	683b      	ldr	r3, [r7, #0]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d020      	beq.n	801e05e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	2200      	movs	r2, #0
 801e020:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e022:	4b11      	ldr	r3, [pc, #68]	; (801e068 <UTIL_TIMER_Create+0x68>)
 801e024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e026:	68b8      	ldr	r0, [r7, #8]
 801e028:	4798      	blx	r3
 801e02a:	4602      	mov	r2, r0
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	2200      	movs	r2, #0
 801e034:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	2200      	movs	r2, #0
 801e03a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e03c:	68fb      	ldr	r3, [r7, #12]
 801e03e:	2200      	movs	r2, #0
 801e040:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e042:	68fb      	ldr	r3, [r7, #12]
 801e044:	683a      	ldr	r2, [r7, #0]
 801e046:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	69ba      	ldr	r2, [r7, #24]
 801e04c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	79fa      	ldrb	r2, [r7, #7]
 801e052:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	2200      	movs	r2, #0
 801e058:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e05a:	2300      	movs	r3, #0
 801e05c:	e000      	b.n	801e060 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e05e:	2301      	movs	r3, #1
  }
}
 801e060:	4618      	mov	r0, r3
 801e062:	3710      	adds	r7, #16
 801e064:	46bd      	mov	sp, r7
 801e066:	bd80      	pop	{r7, pc}
 801e068:	0801f5c0 	.word	0x0801f5c0

0801e06c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e06c:	b580      	push	{r7, lr}
 801e06e:	b08a      	sub	sp, #40	; 0x28
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e074:	2300      	movs	r3, #0
 801e076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d056      	beq.n	801e12e <UTIL_TIMER_Start+0xc2>
 801e080:	6878      	ldr	r0, [r7, #4]
 801e082:	f000 f9a9 	bl	801e3d8 <TimerExists>
 801e086:	4603      	mov	r3, r0
 801e088:	f083 0301 	eor.w	r3, r3, #1
 801e08c:	b2db      	uxtb	r3, r3
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d04d      	beq.n	801e12e <UTIL_TIMER_Start+0xc2>
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	7a5b      	ldrb	r3, [r3, #9]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d149      	bne.n	801e12e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e09a:	f3ef 8310 	mrs	r3, PRIMASK
 801e09e:	613b      	str	r3, [r7, #16]
  return(result);
 801e0a0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e0a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0a4:	b672      	cpsid	i
}
 801e0a6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	685b      	ldr	r3, [r3, #4]
 801e0ac:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e0ae:	4b24      	ldr	r3, [pc, #144]	; (801e140 <UTIL_TIMER_Start+0xd4>)
 801e0b0:	6a1b      	ldr	r3, [r3, #32]
 801e0b2:	4798      	blx	r3
 801e0b4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e0b6:	6a3a      	ldr	r2, [r7, #32]
 801e0b8:	69bb      	ldr	r3, [r7, #24]
 801e0ba:	429a      	cmp	r2, r3
 801e0bc:	d201      	bcs.n	801e0c2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e0be:	69bb      	ldr	r3, [r7, #24]
 801e0c0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	6a3a      	ldr	r2, [r7, #32]
 801e0c6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	2200      	movs	r2, #0
 801e0cc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	2201      	movs	r2, #1
 801e0d2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	2200      	movs	r2, #0
 801e0d8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e0da:	4b1a      	ldr	r3, [pc, #104]	; (801e144 <UTIL_TIMER_Start+0xd8>)
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d106      	bne.n	801e0f0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e0e2:	4b17      	ldr	r3, [pc, #92]	; (801e140 <UTIL_TIMER_Start+0xd4>)
 801e0e4:	691b      	ldr	r3, [r3, #16]
 801e0e6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e0e8:	6878      	ldr	r0, [r7, #4]
 801e0ea:	f000 f9eb 	bl	801e4c4 <TimerInsertNewHeadTimer>
 801e0ee:	e017      	b.n	801e120 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e0f0:	4b13      	ldr	r3, [pc, #76]	; (801e140 <UTIL_TIMER_Start+0xd4>)
 801e0f2:	699b      	ldr	r3, [r3, #24]
 801e0f4:	4798      	blx	r3
 801e0f6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	681a      	ldr	r2, [r3, #0]
 801e0fc:	697b      	ldr	r3, [r7, #20]
 801e0fe:	441a      	add	r2, r3
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	681a      	ldr	r2, [r3, #0]
 801e108:	4b0e      	ldr	r3, [pc, #56]	; (801e144 <UTIL_TIMER_Start+0xd8>)
 801e10a:	681b      	ldr	r3, [r3, #0]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	429a      	cmp	r2, r3
 801e110:	d203      	bcs.n	801e11a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e112:	6878      	ldr	r0, [r7, #4]
 801e114:	f000 f9d6 	bl	801e4c4 <TimerInsertNewHeadTimer>
 801e118:	e002      	b.n	801e120 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e11a:	6878      	ldr	r0, [r7, #4]
 801e11c:	f000 f9a2 	bl	801e464 <TimerInsertTimer>
 801e120:	69fb      	ldr	r3, [r7, #28]
 801e122:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	f383 8810 	msr	PRIMASK, r3
}
 801e12a:	bf00      	nop
  {
 801e12c:	e002      	b.n	801e134 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e12e:	2301      	movs	r3, #1
 801e130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e138:	4618      	mov	r0, r3
 801e13a:	3728      	adds	r7, #40	; 0x28
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd80      	pop	{r7, pc}
 801e140:	0801f5c0 	.word	0x0801f5c0
 801e144:	200018fc 	.word	0x200018fc

0801e148 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e148:	b580      	push	{r7, lr}
 801e14a:	b088      	sub	sp, #32
 801e14c:	af00      	add	r7, sp, #0
 801e14e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e150:	2300      	movs	r3, #0
 801e152:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	2b00      	cmp	r3, #0
 801e158:	d05b      	beq.n	801e212 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e15a:	f3ef 8310 	mrs	r3, PRIMASK
 801e15e:	60fb      	str	r3, [r7, #12]
  return(result);
 801e160:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e164:	b672      	cpsid	i
}
 801e166:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e168:	4b2d      	ldr	r3, [pc, #180]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e16e:	4b2c      	ldr	r3, [pc, #176]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	2201      	movs	r2, #1
 801e178:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e17a:	4b29      	ldr	r3, [pc, #164]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	2b00      	cmp	r3, #0
 801e180:	d041      	beq.n	801e206 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	2200      	movs	r2, #0
 801e186:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e188:	4b25      	ldr	r3, [pc, #148]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	687a      	ldr	r2, [r7, #4]
 801e18e:	429a      	cmp	r2, r3
 801e190:	d134      	bne.n	801e1fc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e192:	4b23      	ldr	r3, [pc, #140]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e194:	681b      	ldr	r3, [r3, #0]
 801e196:	2200      	movs	r2, #0
 801e198:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e19a:	4b21      	ldr	r3, [pc, #132]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	695b      	ldr	r3, [r3, #20]
 801e1a0:	2b00      	cmp	r3, #0
 801e1a2:	d00a      	beq.n	801e1ba <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e1a4:	4b1e      	ldr	r3, [pc, #120]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	695b      	ldr	r3, [r3, #20]
 801e1aa:	4a1d      	ldr	r2, [pc, #116]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e1ac:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e1ae:	4b1c      	ldr	r3, [pc, #112]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e1b0:	681b      	ldr	r3, [r3, #0]
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	f000 f92c 	bl	801e410 <TimerSetTimeout>
 801e1b8:	e023      	b.n	801e202 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e1ba:	4b1a      	ldr	r3, [pc, #104]	; (801e224 <UTIL_TIMER_Stop+0xdc>)
 801e1bc:	68db      	ldr	r3, [r3, #12]
 801e1be:	4798      	blx	r3
            TimerListHead = NULL;
 801e1c0:	4b17      	ldr	r3, [pc, #92]	; (801e220 <UTIL_TIMER_Stop+0xd8>)
 801e1c2:	2200      	movs	r2, #0
 801e1c4:	601a      	str	r2, [r3, #0]
 801e1c6:	e01c      	b.n	801e202 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e1c8:	697a      	ldr	r2, [r7, #20]
 801e1ca:	687b      	ldr	r3, [r7, #4]
 801e1cc:	429a      	cmp	r2, r3
 801e1ce:	d110      	bne.n	801e1f2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e1d0:	697b      	ldr	r3, [r7, #20]
 801e1d2:	695b      	ldr	r3, [r3, #20]
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d006      	beq.n	801e1e6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e1d8:	697b      	ldr	r3, [r7, #20]
 801e1da:	695b      	ldr	r3, [r3, #20]
 801e1dc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1de:	69bb      	ldr	r3, [r7, #24]
 801e1e0:	697a      	ldr	r2, [r7, #20]
 801e1e2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e1e4:	e00d      	b.n	801e202 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e1e6:	2300      	movs	r3, #0
 801e1e8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1ea:	69bb      	ldr	r3, [r7, #24]
 801e1ec:	697a      	ldr	r2, [r7, #20]
 801e1ee:	615a      	str	r2, [r3, #20]
            break;
 801e1f0:	e007      	b.n	801e202 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e1f2:	697b      	ldr	r3, [r7, #20]
 801e1f4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	695b      	ldr	r3, [r3, #20]
 801e1fa:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e1fc:	697b      	ldr	r3, [r7, #20]
 801e1fe:	2b00      	cmp	r3, #0
 801e200:	d1e2      	bne.n	801e1c8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e202:	2300      	movs	r3, #0
 801e204:	77fb      	strb	r3, [r7, #31]
 801e206:	693b      	ldr	r3, [r7, #16]
 801e208:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e20a:	68bb      	ldr	r3, [r7, #8]
 801e20c:	f383 8810 	msr	PRIMASK, r3
}
 801e210:	e001      	b.n	801e216 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e212:	2301      	movs	r3, #1
 801e214:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e216:	7ffb      	ldrb	r3, [r7, #31]
}
 801e218:	4618      	mov	r0, r3
 801e21a:	3720      	adds	r7, #32
 801e21c:	46bd      	mov	sp, r7
 801e21e:	bd80      	pop	{r7, pc}
 801e220:	200018fc 	.word	0x200018fc
 801e224:	0801f5c0 	.word	0x0801f5c0

0801e228 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e228:	b580      	push	{r7, lr}
 801e22a:	b084      	sub	sp, #16
 801e22c:	af00      	add	r7, sp, #0
 801e22e:	6078      	str	r0, [r7, #4]
 801e230:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e232:	2300      	movs	r3, #0
 801e234:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d102      	bne.n	801e242 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e23c:	2301      	movs	r3, #1
 801e23e:	73fb      	strb	r3, [r7, #15]
 801e240:	e014      	b.n	801e26c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e242:	4b0d      	ldr	r3, [pc, #52]	; (801e278 <UTIL_TIMER_SetPeriod+0x50>)
 801e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e246:	6838      	ldr	r0, [r7, #0]
 801e248:	4798      	blx	r3
 801e24a:	4602      	mov	r2, r0
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e250:	6878      	ldr	r0, [r7, #4]
 801e252:	f000 f8c1 	bl	801e3d8 <TimerExists>
 801e256:	4603      	mov	r3, r0
 801e258:	2b00      	cmp	r3, #0
 801e25a:	d007      	beq.n	801e26c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e25c:	6878      	ldr	r0, [r7, #4]
 801e25e:	f7ff ff73 	bl	801e148 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e262:	6878      	ldr	r0, [r7, #4]
 801e264:	f7ff ff02 	bl	801e06c <UTIL_TIMER_Start>
 801e268:	4603      	mov	r3, r0
 801e26a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e26c:	7bfb      	ldrb	r3, [r7, #15]
}
 801e26e:	4618      	mov	r0, r3
 801e270:	3710      	adds	r7, #16
 801e272:	46bd      	mov	sp, r7
 801e274:	bd80      	pop	{r7, pc}
 801e276:	bf00      	nop
 801e278:	0801f5c0 	.word	0x0801f5c0

0801e27c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e27c:	b590      	push	{r4, r7, lr}
 801e27e:	b089      	sub	sp, #36	; 0x24
 801e280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e282:	f3ef 8310 	mrs	r3, PRIMASK
 801e286:	60bb      	str	r3, [r7, #8]
  return(result);
 801e288:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e28a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e28c:	b672      	cpsid	i
}
 801e28e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e290:	4b38      	ldr	r3, [pc, #224]	; (801e374 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e292:	695b      	ldr	r3, [r3, #20]
 801e294:	4798      	blx	r3
 801e296:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e298:	4b36      	ldr	r3, [pc, #216]	; (801e374 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e29a:	691b      	ldr	r3, [r3, #16]
 801e29c:	4798      	blx	r3
 801e29e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e2a0:	693a      	ldr	r2, [r7, #16]
 801e2a2:	697b      	ldr	r3, [r7, #20]
 801e2a4:	1ad3      	subs	r3, r2, r3
 801e2a6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e2a8:	4b33      	ldr	r3, [pc, #204]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d037      	beq.n	801e320 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e2b0:	4b31      	ldr	r3, [pc, #196]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e2b6:	69fb      	ldr	r3, [r7, #28]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	68fa      	ldr	r2, [r7, #12]
 801e2bc:	429a      	cmp	r2, r3
 801e2be:	d206      	bcs.n	801e2ce <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e2c0:	69fb      	ldr	r3, [r7, #28]
 801e2c2:	681a      	ldr	r2, [r3, #0]
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	1ad2      	subs	r2, r2, r3
 801e2c8:	69fb      	ldr	r3, [r7, #28]
 801e2ca:	601a      	str	r2, [r3, #0]
 801e2cc:	e002      	b.n	801e2d4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e2ce:	69fb      	ldr	r3, [r7, #28]
 801e2d0:	2200      	movs	r2, #0
 801e2d2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e2d4:	69fb      	ldr	r3, [r7, #28]
 801e2d6:	695b      	ldr	r3, [r3, #20]
 801e2d8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e2da:	69fb      	ldr	r3, [r7, #28]
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d1ea      	bne.n	801e2b6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e2e0:	e01e      	b.n	801e320 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e2e2:	4b25      	ldr	r3, [pc, #148]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e2e8:	4b23      	ldr	r3, [pc, #140]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	695b      	ldr	r3, [r3, #20]
 801e2ee:	4a22      	ldr	r2, [pc, #136]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2f0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e2f2:	69fb      	ldr	r3, [r7, #28]
 801e2f4:	2200      	movs	r2, #0
 801e2f6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e2f8:	69fb      	ldr	r3, [r7, #28]
 801e2fa:	2200      	movs	r2, #0
 801e2fc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e2fe:	69fb      	ldr	r3, [r7, #28]
 801e300:	68db      	ldr	r3, [r3, #12]
 801e302:	69fa      	ldr	r2, [r7, #28]
 801e304:	6912      	ldr	r2, [r2, #16]
 801e306:	4610      	mov	r0, r2
 801e308:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e30a:	69fb      	ldr	r3, [r7, #28]
 801e30c:	7adb      	ldrb	r3, [r3, #11]
 801e30e:	2b01      	cmp	r3, #1
 801e310:	d106      	bne.n	801e320 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e312:	69fb      	ldr	r3, [r7, #28]
 801e314:	7a9b      	ldrb	r3, [r3, #10]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d102      	bne.n	801e320 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e31a:	69f8      	ldr	r0, [r7, #28]
 801e31c:	f7ff fea6 	bl	801e06c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e320:	4b15      	ldr	r3, [pc, #84]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	2b00      	cmp	r3, #0
 801e326:	d00d      	beq.n	801e344 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e328:	4b13      	ldr	r3, [pc, #76]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e32a:	681b      	ldr	r3, [r3, #0]
 801e32c:	681b      	ldr	r3, [r3, #0]
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d0d7      	beq.n	801e2e2 <UTIL_TIMER_IRQ_Handler+0x66>
 801e332:	4b11      	ldr	r3, [pc, #68]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	681c      	ldr	r4, [r3, #0]
 801e338:	4b0e      	ldr	r3, [pc, #56]	; (801e374 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e33a:	699b      	ldr	r3, [r3, #24]
 801e33c:	4798      	blx	r3
 801e33e:	4603      	mov	r3, r0
 801e340:	429c      	cmp	r4, r3
 801e342:	d3ce      	bcc.n	801e2e2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e344:	4b0c      	ldr	r3, [pc, #48]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d009      	beq.n	801e360 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e34c:	4b0a      	ldr	r3, [pc, #40]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	7a1b      	ldrb	r3, [r3, #8]
 801e352:	2b00      	cmp	r3, #0
 801e354:	d104      	bne.n	801e360 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e356:	4b08      	ldr	r3, [pc, #32]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	4618      	mov	r0, r3
 801e35c:	f000 f858 	bl	801e410 <TimerSetTimeout>
 801e360:	69bb      	ldr	r3, [r7, #24]
 801e362:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	f383 8810 	msr	PRIMASK, r3
}
 801e36a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e36c:	bf00      	nop
 801e36e:	3724      	adds	r7, #36	; 0x24
 801e370:	46bd      	mov	sp, r7
 801e372:	bd90      	pop	{r4, r7, pc}
 801e374:	0801f5c0 	.word	0x0801f5c0
 801e378:	200018fc 	.word	0x200018fc

0801e37c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e37c:	b580      	push	{r7, lr}
 801e37e:	b082      	sub	sp, #8
 801e380:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e382:	4b06      	ldr	r3, [pc, #24]	; (801e39c <UTIL_TIMER_GetCurrentTime+0x20>)
 801e384:	69db      	ldr	r3, [r3, #28]
 801e386:	4798      	blx	r3
 801e388:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e38a:	4b04      	ldr	r3, [pc, #16]	; (801e39c <UTIL_TIMER_GetCurrentTime+0x20>)
 801e38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e38e:	6878      	ldr	r0, [r7, #4]
 801e390:	4798      	blx	r3
 801e392:	4603      	mov	r3, r0
}
 801e394:	4618      	mov	r0, r3
 801e396:	3708      	adds	r7, #8
 801e398:	46bd      	mov	sp, r7
 801e39a:	bd80      	pop	{r7, pc}
 801e39c:	0801f5c0 	.word	0x0801f5c0

0801e3a0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e3a0:	b580      	push	{r7, lr}
 801e3a2:	b084      	sub	sp, #16
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e3a8:	4b0a      	ldr	r3, [pc, #40]	; (801e3d4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3aa:	69db      	ldr	r3, [r3, #28]
 801e3ac:	4798      	blx	r3
 801e3ae:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e3b0:	4b08      	ldr	r3, [pc, #32]	; (801e3d4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3b4:	6878      	ldr	r0, [r7, #4]
 801e3b6:	4798      	blx	r3
 801e3b8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e3ba:	4b06      	ldr	r3, [pc, #24]	; (801e3d4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3be:	68f9      	ldr	r1, [r7, #12]
 801e3c0:	68ba      	ldr	r2, [r7, #8]
 801e3c2:	1a8a      	subs	r2, r1, r2
 801e3c4:	4610      	mov	r0, r2
 801e3c6:	4798      	blx	r3
 801e3c8:	4603      	mov	r3, r0
}
 801e3ca:	4618      	mov	r0, r3
 801e3cc:	3710      	adds	r7, #16
 801e3ce:	46bd      	mov	sp, r7
 801e3d0:	bd80      	pop	{r7, pc}
 801e3d2:	bf00      	nop
 801e3d4:	0801f5c0 	.word	0x0801f5c0

0801e3d8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e3d8:	b480      	push	{r7}
 801e3da:	b085      	sub	sp, #20
 801e3dc:	af00      	add	r7, sp, #0
 801e3de:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e3e0:	4b0a      	ldr	r3, [pc, #40]	; (801e40c <TimerExists+0x34>)
 801e3e2:	681b      	ldr	r3, [r3, #0]
 801e3e4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e3e6:	e008      	b.n	801e3fa <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e3e8:	68fa      	ldr	r2, [r7, #12]
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	429a      	cmp	r2, r3
 801e3ee:	d101      	bne.n	801e3f4 <TimerExists+0x1c>
    {
      return true;
 801e3f0:	2301      	movs	r3, #1
 801e3f2:	e006      	b.n	801e402 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	695b      	ldr	r3, [r3, #20]
 801e3f8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d1f3      	bne.n	801e3e8 <TimerExists+0x10>
  }
  return false;
 801e400:	2300      	movs	r3, #0
}
 801e402:	4618      	mov	r0, r3
 801e404:	3714      	adds	r7, #20
 801e406:	46bd      	mov	sp, r7
 801e408:	bc80      	pop	{r7}
 801e40a:	4770      	bx	lr
 801e40c:	200018fc 	.word	0x200018fc

0801e410 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e410:	b590      	push	{r4, r7, lr}
 801e412:	b085      	sub	sp, #20
 801e414:	af00      	add	r7, sp, #0
 801e416:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e418:	4b11      	ldr	r3, [pc, #68]	; (801e460 <TimerSetTimeout+0x50>)
 801e41a:	6a1b      	ldr	r3, [r3, #32]
 801e41c:	4798      	blx	r3
 801e41e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	2201      	movs	r2, #1
 801e424:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681c      	ldr	r4, [r3, #0]
 801e42a:	4b0d      	ldr	r3, [pc, #52]	; (801e460 <TimerSetTimeout+0x50>)
 801e42c:	699b      	ldr	r3, [r3, #24]
 801e42e:	4798      	blx	r3
 801e430:	4602      	mov	r2, r0
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	4413      	add	r3, r2
 801e436:	429c      	cmp	r4, r3
 801e438:	d207      	bcs.n	801e44a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e43a:	4b09      	ldr	r3, [pc, #36]	; (801e460 <TimerSetTimeout+0x50>)
 801e43c:	699b      	ldr	r3, [r3, #24]
 801e43e:	4798      	blx	r3
 801e440:	4602      	mov	r2, r0
 801e442:	68fb      	ldr	r3, [r7, #12]
 801e444:	441a      	add	r2, r3
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e44a:	4b05      	ldr	r3, [pc, #20]	; (801e460 <TimerSetTimeout+0x50>)
 801e44c:	689b      	ldr	r3, [r3, #8]
 801e44e:	687a      	ldr	r2, [r7, #4]
 801e450:	6812      	ldr	r2, [r2, #0]
 801e452:	4610      	mov	r0, r2
 801e454:	4798      	blx	r3
}
 801e456:	bf00      	nop
 801e458:	3714      	adds	r7, #20
 801e45a:	46bd      	mov	sp, r7
 801e45c:	bd90      	pop	{r4, r7, pc}
 801e45e:	bf00      	nop
 801e460:	0801f5c0 	.word	0x0801f5c0

0801e464 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e464:	b480      	push	{r7}
 801e466:	b085      	sub	sp, #20
 801e468:	af00      	add	r7, sp, #0
 801e46a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e46c:	4b14      	ldr	r3, [pc, #80]	; (801e4c0 <TimerInsertTimer+0x5c>)
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e472:	4b13      	ldr	r3, [pc, #76]	; (801e4c0 <TimerInsertTimer+0x5c>)
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	695b      	ldr	r3, [r3, #20]
 801e478:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e47a:	e012      	b.n	801e4a2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e47c:	687b      	ldr	r3, [r7, #4]
 801e47e:	681a      	ldr	r2, [r3, #0]
 801e480:	68bb      	ldr	r3, [r7, #8]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	429a      	cmp	r2, r3
 801e486:	d905      	bls.n	801e494 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e488:	68bb      	ldr	r3, [r7, #8]
 801e48a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e48c:	68bb      	ldr	r3, [r7, #8]
 801e48e:	695b      	ldr	r3, [r3, #20]
 801e490:	60bb      	str	r3, [r7, #8]
 801e492:	e006      	b.n	801e4a2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e494:	68fb      	ldr	r3, [r7, #12]
 801e496:	687a      	ldr	r2, [r7, #4]
 801e498:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	68ba      	ldr	r2, [r7, #8]
 801e49e:	615a      	str	r2, [r3, #20]
        return;
 801e4a0:	e009      	b.n	801e4b6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	695b      	ldr	r3, [r3, #20]
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d1e8      	bne.n	801e47c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	687a      	ldr	r2, [r7, #4]
 801e4ae:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	2200      	movs	r2, #0
 801e4b4:	615a      	str	r2, [r3, #20]
}
 801e4b6:	3714      	adds	r7, #20
 801e4b8:	46bd      	mov	sp, r7
 801e4ba:	bc80      	pop	{r7}
 801e4bc:	4770      	bx	lr
 801e4be:	bf00      	nop
 801e4c0:	200018fc 	.word	0x200018fc

0801e4c4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e4c4:	b580      	push	{r7, lr}
 801e4c6:	b084      	sub	sp, #16
 801e4c8:	af00      	add	r7, sp, #0
 801e4ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e4cc:	4b0b      	ldr	r3, [pc, #44]	; (801e4fc <TimerInsertNewHeadTimer+0x38>)
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d002      	beq.n	801e4de <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	2200      	movs	r2, #0
 801e4dc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	68fa      	ldr	r2, [r7, #12]
 801e4e2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e4e4:	4a05      	ldr	r2, [pc, #20]	; (801e4fc <TimerInsertNewHeadTimer+0x38>)
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e4ea:	4b04      	ldr	r3, [pc, #16]	; (801e4fc <TimerInsertNewHeadTimer+0x38>)
 801e4ec:	681b      	ldr	r3, [r3, #0]
 801e4ee:	4618      	mov	r0, r3
 801e4f0:	f7ff ff8e 	bl	801e410 <TimerSetTimeout>
}
 801e4f4:	bf00      	nop
 801e4f6:	3710      	adds	r7, #16
 801e4f8:	46bd      	mov	sp, r7
 801e4fa:	bd80      	pop	{r7, pc}
 801e4fc:	200018fc 	.word	0x200018fc

0801e500 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e500:	b580      	push	{r7, lr}
 801e502:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e504:	2218      	movs	r2, #24
 801e506:	2100      	movs	r1, #0
 801e508:	4807      	ldr	r0, [pc, #28]	; (801e528 <UTIL_ADV_TRACE_Init+0x28>)
 801e50a:	f7fe fffa 	bl	801d502 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e50e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e512:	2100      	movs	r1, #0
 801e514:	4805      	ldr	r0, [pc, #20]	; (801e52c <UTIL_ADV_TRACE_Init+0x2c>)
 801e516:	f7fe fff4 	bl	801d502 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e51a:	4b05      	ldr	r3, [pc, #20]	; (801e530 <UTIL_ADV_TRACE_Init+0x30>)
 801e51c:	681b      	ldr	r3, [r3, #0]
 801e51e:	4805      	ldr	r0, [pc, #20]	; (801e534 <UTIL_ADV_TRACE_Init+0x34>)
 801e520:	4798      	blx	r3
 801e522:	4603      	mov	r3, r0
}
 801e524:	4618      	mov	r0, r3
 801e526:	bd80      	pop	{r7, pc}
 801e528:	20001900 	.word	0x20001900
 801e52c:	20001918 	.word	0x20001918
 801e530:	0801f600 	.word	0x0801f600
 801e534:	0801e7a1 	.word	0x0801e7a1

0801e538 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e538:	b480      	push	{r7}
 801e53a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e53c:	4b06      	ldr	r3, [pc, #24]	; (801e558 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e53e:	8a5a      	ldrh	r2, [r3, #18]
 801e540:	4b05      	ldr	r3, [pc, #20]	; (801e558 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e542:	8a1b      	ldrh	r3, [r3, #16]
 801e544:	429a      	cmp	r2, r3
 801e546:	d101      	bne.n	801e54c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e548:	2301      	movs	r3, #1
 801e54a:	e000      	b.n	801e54e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e54c:	2300      	movs	r3, #0
}
 801e54e:	4618      	mov	r0, r3
 801e550:	46bd      	mov	sp, r7
 801e552:	bc80      	pop	{r7}
 801e554:	4770      	bx	lr
 801e556:	bf00      	nop
 801e558:	20001900 	.word	0x20001900

0801e55c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e55c:	b408      	push	{r3}
 801e55e:	b580      	push	{r7, lr}
 801e560:	b08d      	sub	sp, #52	; 0x34
 801e562:	af00      	add	r7, sp, #0
 801e564:	60f8      	str	r0, [r7, #12]
 801e566:	60b9      	str	r1, [r7, #8]
 801e568:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e56a:	2300      	movs	r3, #0
 801e56c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e56e:	2300      	movs	r3, #0
 801e570:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e572:	4b37      	ldr	r3, [pc, #220]	; (801e650 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e574:	7a1b      	ldrb	r3, [r3, #8]
 801e576:	461a      	mov	r2, r3
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	4293      	cmp	r3, r2
 801e57c:	d902      	bls.n	801e584 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e57e:	f06f 0304 	mvn.w	r3, #4
 801e582:	e05e      	b.n	801e642 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e584:	4b32      	ldr	r3, [pc, #200]	; (801e650 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e586:	68da      	ldr	r2, [r3, #12]
 801e588:	68bb      	ldr	r3, [r7, #8]
 801e58a:	4013      	ands	r3, r2
 801e58c:	68ba      	ldr	r2, [r7, #8]
 801e58e:	429a      	cmp	r2, r3
 801e590:	d002      	beq.n	801e598 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e592:	f06f 0305 	mvn.w	r3, #5
 801e596:	e054      	b.n	801e642 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e598:	4b2d      	ldr	r3, [pc, #180]	; (801e650 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e59a:	685b      	ldr	r3, [r3, #4]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	d00a      	beq.n	801e5b6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d007      	beq.n	801e5b6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e5a6:	4b2a      	ldr	r3, [pc, #168]	; (801e650 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5a8:	685b      	ldr	r3, [r3, #4]
 801e5aa:	f107 0116 	add.w	r1, r7, #22
 801e5ae:	f107 0218 	add.w	r2, r7, #24
 801e5b2:	4610      	mov	r0, r2
 801e5b4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e5b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5c4:	4823      	ldr	r0, [pc, #140]	; (801e654 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e5c6:	f7ff fa29 	bl	801da1c <tiny_vsnprintf_like>
 801e5ca:	4603      	mov	r3, r0
 801e5cc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e5ce:	f000 f9f1 	bl	801e9b4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e5d2:	8afa      	ldrh	r2, [r7, #22]
 801e5d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e5d6:	4413      	add	r3, r2
 801e5d8:	b29b      	uxth	r3, r3
 801e5da:	f107 0214 	add.w	r2, r7, #20
 801e5de:	4611      	mov	r1, r2
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	f000 f969 	bl	801e8b8 <TRACE_AllocateBufer>
 801e5e6:	4603      	mov	r3, r0
 801e5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5ec:	d025      	beq.n	801e63a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e5ee:	2300      	movs	r3, #0
 801e5f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e5f2:	e00e      	b.n	801e612 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e5f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e5f6:	8aba      	ldrh	r2, [r7, #20]
 801e5f8:	3330      	adds	r3, #48	; 0x30
 801e5fa:	443b      	add	r3, r7
 801e5fc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e600:	4b15      	ldr	r3, [pc, #84]	; (801e658 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e602:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e604:	8abb      	ldrh	r3, [r7, #20]
 801e606:	3301      	adds	r3, #1
 801e608:	b29b      	uxth	r3, r3
 801e60a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e60c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e60e:	3301      	adds	r3, #1
 801e610:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e612:	8afb      	ldrh	r3, [r7, #22]
 801e614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e616:	429a      	cmp	r2, r3
 801e618:	d3ec      	bcc.n	801e5f4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e61a:	8abb      	ldrh	r3, [r7, #20]
 801e61c:	461a      	mov	r2, r3
 801e61e:	4b0e      	ldr	r3, [pc, #56]	; (801e658 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e620:	18d0      	adds	r0, r2, r3
 801e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e626:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e62a:	f7ff f9f7 	bl	801da1c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e62e:	f000 f9df 	bl	801e9f0 <TRACE_UnLock>

    return TRACE_Send();
 801e632:	f000 f831 	bl	801e698 <TRACE_Send>
 801e636:	4603      	mov	r3, r0
 801e638:	e003      	b.n	801e642 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e63a:	f000 f9d9 	bl	801e9f0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e63e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e642:	4618      	mov	r0, r3
 801e644:	3734      	adds	r7, #52	; 0x34
 801e646:	46bd      	mov	sp, r7
 801e648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e64c:	b001      	add	sp, #4
 801e64e:	4770      	bx	lr
 801e650:	20001900 	.word	0x20001900
 801e654:	20001d18 	.word	0x20001d18
 801e658:	20001918 	.word	0x20001918

0801e65c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e65c:	b480      	push	{r7}
 801e65e:	b083      	sub	sp, #12
 801e660:	af00      	add	r7, sp, #0
 801e662:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e664:	4a03      	ldr	r2, [pc, #12]	; (801e674 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	6053      	str	r3, [r2, #4]
}
 801e66a:	bf00      	nop
 801e66c:	370c      	adds	r7, #12
 801e66e:	46bd      	mov	sp, r7
 801e670:	bc80      	pop	{r7}
 801e672:	4770      	bx	lr
 801e674:	20001900 	.word	0x20001900

0801e678 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e678:	b480      	push	{r7}
 801e67a:	b083      	sub	sp, #12
 801e67c:	af00      	add	r7, sp, #0
 801e67e:	4603      	mov	r3, r0
 801e680:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e682:	4a04      	ldr	r2, [pc, #16]	; (801e694 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e684:	79fb      	ldrb	r3, [r7, #7]
 801e686:	7213      	strb	r3, [r2, #8]
}
 801e688:	bf00      	nop
 801e68a:	370c      	adds	r7, #12
 801e68c:	46bd      	mov	sp, r7
 801e68e:	bc80      	pop	{r7}
 801e690:	4770      	bx	lr
 801e692:	bf00      	nop
 801e694:	20001900 	.word	0x20001900

0801e698 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e698:	b580      	push	{r7, lr}
 801e69a:	b088      	sub	sp, #32
 801e69c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e69e:	2300      	movs	r3, #0
 801e6a0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6a6:	f3ef 8310 	mrs	r3, PRIMASK
 801e6aa:	613b      	str	r3, [r7, #16]
  return(result);
 801e6ac:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e6ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6b0:	b672      	cpsid	i
}
 801e6b2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e6b4:	f000 f9ba 	bl	801ea2c <TRACE_IsLocked>
 801e6b8:	4603      	mov	r3, r0
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d15d      	bne.n	801e77a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e6be:	f000 f979 	bl	801e9b4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e6c2:	4b34      	ldr	r3, [pc, #208]	; (801e794 <TRACE_Send+0xfc>)
 801e6c4:	8a1a      	ldrh	r2, [r3, #16]
 801e6c6:	4b33      	ldr	r3, [pc, #204]	; (801e794 <TRACE_Send+0xfc>)
 801e6c8:	8a5b      	ldrh	r3, [r3, #18]
 801e6ca:	429a      	cmp	r2, r3
 801e6cc:	d04d      	beq.n	801e76a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e6ce:	4b31      	ldr	r3, [pc, #196]	; (801e794 <TRACE_Send+0xfc>)
 801e6d0:	789b      	ldrb	r3, [r3, #2]
 801e6d2:	2b01      	cmp	r3, #1
 801e6d4:	d117      	bne.n	801e706 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e6d6:	4b2f      	ldr	r3, [pc, #188]	; (801e794 <TRACE_Send+0xfc>)
 801e6d8:	881a      	ldrh	r2, [r3, #0]
 801e6da:	4b2e      	ldr	r3, [pc, #184]	; (801e794 <TRACE_Send+0xfc>)
 801e6dc:	8a1b      	ldrh	r3, [r3, #16]
 801e6de:	1ad3      	subs	r3, r2, r3
 801e6e0:	b29a      	uxth	r2, r3
 801e6e2:	4b2c      	ldr	r3, [pc, #176]	; (801e794 <TRACE_Send+0xfc>)
 801e6e4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e6e6:	4b2b      	ldr	r3, [pc, #172]	; (801e794 <TRACE_Send+0xfc>)
 801e6e8:	2202      	movs	r2, #2
 801e6ea:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e6ec:	4b29      	ldr	r3, [pc, #164]	; (801e794 <TRACE_Send+0xfc>)
 801e6ee:	2200      	movs	r2, #0
 801e6f0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e6f2:	4b28      	ldr	r3, [pc, #160]	; (801e794 <TRACE_Send+0xfc>)
 801e6f4:	8a9b      	ldrh	r3, [r3, #20]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d105      	bne.n	801e706 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e6fa:	4b26      	ldr	r3, [pc, #152]	; (801e794 <TRACE_Send+0xfc>)
 801e6fc:	2200      	movs	r2, #0
 801e6fe:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e700:	4b24      	ldr	r3, [pc, #144]	; (801e794 <TRACE_Send+0xfc>)
 801e702:	2200      	movs	r2, #0
 801e704:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e706:	4b23      	ldr	r3, [pc, #140]	; (801e794 <TRACE_Send+0xfc>)
 801e708:	789b      	ldrb	r3, [r3, #2]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d115      	bne.n	801e73a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e70e:	4b21      	ldr	r3, [pc, #132]	; (801e794 <TRACE_Send+0xfc>)
 801e710:	8a5a      	ldrh	r2, [r3, #18]
 801e712:	4b20      	ldr	r3, [pc, #128]	; (801e794 <TRACE_Send+0xfc>)
 801e714:	8a1b      	ldrh	r3, [r3, #16]
 801e716:	429a      	cmp	r2, r3
 801e718:	d908      	bls.n	801e72c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e71a:	4b1e      	ldr	r3, [pc, #120]	; (801e794 <TRACE_Send+0xfc>)
 801e71c:	8a5a      	ldrh	r2, [r3, #18]
 801e71e:	4b1d      	ldr	r3, [pc, #116]	; (801e794 <TRACE_Send+0xfc>)
 801e720:	8a1b      	ldrh	r3, [r3, #16]
 801e722:	1ad3      	subs	r3, r2, r3
 801e724:	b29a      	uxth	r2, r3
 801e726:	4b1b      	ldr	r3, [pc, #108]	; (801e794 <TRACE_Send+0xfc>)
 801e728:	829a      	strh	r2, [r3, #20]
 801e72a:	e006      	b.n	801e73a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e72c:	4b19      	ldr	r3, [pc, #100]	; (801e794 <TRACE_Send+0xfc>)
 801e72e:	8a1b      	ldrh	r3, [r3, #16]
 801e730:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e734:	b29a      	uxth	r2, r3
 801e736:	4b17      	ldr	r3, [pc, #92]	; (801e794 <TRACE_Send+0xfc>)
 801e738:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e73a:	4b16      	ldr	r3, [pc, #88]	; (801e794 <TRACE_Send+0xfc>)
 801e73c:	8a1b      	ldrh	r3, [r3, #16]
 801e73e:	461a      	mov	r2, r3
 801e740:	4b15      	ldr	r3, [pc, #84]	; (801e798 <TRACE_Send+0x100>)
 801e742:	4413      	add	r3, r2
 801e744:	61bb      	str	r3, [r7, #24]
 801e746:	697b      	ldr	r3, [r7, #20]
 801e748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	f383 8810 	msr	PRIMASK, r3
}
 801e750:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e752:	f7e4 fa3d 	bl	8002bd0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e756:	4b11      	ldr	r3, [pc, #68]	; (801e79c <TRACE_Send+0x104>)
 801e758:	68db      	ldr	r3, [r3, #12]
 801e75a:	4a0e      	ldr	r2, [pc, #56]	; (801e794 <TRACE_Send+0xfc>)
 801e75c:	8a92      	ldrh	r2, [r2, #20]
 801e75e:	4611      	mov	r1, r2
 801e760:	69b8      	ldr	r0, [r7, #24]
 801e762:	4798      	blx	r3
 801e764:	4603      	mov	r3, r0
 801e766:	77fb      	strb	r3, [r7, #31]
 801e768:	e00d      	b.n	801e786 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e76a:	f000 f941 	bl	801e9f0 <TRACE_UnLock>
 801e76e:	697b      	ldr	r3, [r7, #20]
 801e770:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e772:	68bb      	ldr	r3, [r7, #8]
 801e774:	f383 8810 	msr	PRIMASK, r3
}
 801e778:	e005      	b.n	801e786 <TRACE_Send+0xee>
 801e77a:	697b      	ldr	r3, [r7, #20]
 801e77c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	f383 8810 	msr	PRIMASK, r3
}
 801e784:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e786:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e78a:	4618      	mov	r0, r3
 801e78c:	3720      	adds	r7, #32
 801e78e:	46bd      	mov	sp, r7
 801e790:	bd80      	pop	{r7, pc}
 801e792:	bf00      	nop
 801e794:	20001900 	.word	0x20001900
 801e798:	20001918 	.word	0x20001918
 801e79c:	0801f600 	.word	0x0801f600

0801e7a0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e7a0:	b580      	push	{r7, lr}
 801e7a2:	b088      	sub	sp, #32
 801e7a4:	af00      	add	r7, sp, #0
 801e7a6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e7a8:	2300      	movs	r3, #0
 801e7aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7ac:	f3ef 8310 	mrs	r3, PRIMASK
 801e7b0:	617b      	str	r3, [r7, #20]
  return(result);
 801e7b2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e7b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7b6:	b672      	cpsid	i
}
 801e7b8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e7ba:	4b3c      	ldr	r3, [pc, #240]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7bc:	789b      	ldrb	r3, [r3, #2]
 801e7be:	2b02      	cmp	r3, #2
 801e7c0:	d106      	bne.n	801e7d0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7c2:	4b3a      	ldr	r3, [pc, #232]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7c4:	2200      	movs	r2, #0
 801e7c6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7c8:	4b38      	ldr	r3, [pc, #224]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7ca:	2200      	movs	r2, #0
 801e7cc:	821a      	strh	r2, [r3, #16]
 801e7ce:	e00a      	b.n	801e7e6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e7d0:	4b36      	ldr	r3, [pc, #216]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7d2:	8a1a      	ldrh	r2, [r3, #16]
 801e7d4:	4b35      	ldr	r3, [pc, #212]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7d6:	8a9b      	ldrh	r3, [r3, #20]
 801e7d8:	4413      	add	r3, r2
 801e7da:	b29b      	uxth	r3, r3
 801e7dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e7e0:	b29a      	uxth	r2, r3
 801e7e2:	4b32      	ldr	r3, [pc, #200]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7e4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e7e6:	4b31      	ldr	r3, [pc, #196]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7e8:	8a1a      	ldrh	r2, [r3, #16]
 801e7ea:	4b30      	ldr	r3, [pc, #192]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7ec:	8a5b      	ldrh	r3, [r3, #18]
 801e7ee:	429a      	cmp	r2, r3
 801e7f0:	d04d      	beq.n	801e88e <TRACE_TxCpltCallback+0xee>
 801e7f2:	4b2e      	ldr	r3, [pc, #184]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7f4:	8adb      	ldrh	r3, [r3, #22]
 801e7f6:	2b01      	cmp	r3, #1
 801e7f8:	d149      	bne.n	801e88e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e7fa:	4b2c      	ldr	r3, [pc, #176]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e7fc:	789b      	ldrb	r3, [r3, #2]
 801e7fe:	2b01      	cmp	r3, #1
 801e800:	d117      	bne.n	801e832 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e802:	4b2a      	ldr	r3, [pc, #168]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e804:	881a      	ldrh	r2, [r3, #0]
 801e806:	4b29      	ldr	r3, [pc, #164]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e808:	8a1b      	ldrh	r3, [r3, #16]
 801e80a:	1ad3      	subs	r3, r2, r3
 801e80c:	b29a      	uxth	r2, r3
 801e80e:	4b27      	ldr	r3, [pc, #156]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e810:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e812:	4b26      	ldr	r3, [pc, #152]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e814:	2202      	movs	r2, #2
 801e816:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e818:	4b24      	ldr	r3, [pc, #144]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e81a:	2200      	movs	r2, #0
 801e81c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e81e:	4b23      	ldr	r3, [pc, #140]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e820:	8a9b      	ldrh	r3, [r3, #20]
 801e822:	2b00      	cmp	r3, #0
 801e824:	d105      	bne.n	801e832 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e826:	4b21      	ldr	r3, [pc, #132]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e828:	2200      	movs	r2, #0
 801e82a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e82c:	4b1f      	ldr	r3, [pc, #124]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e82e:	2200      	movs	r2, #0
 801e830:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e832:	4b1e      	ldr	r3, [pc, #120]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e834:	789b      	ldrb	r3, [r3, #2]
 801e836:	2b00      	cmp	r3, #0
 801e838:	d115      	bne.n	801e866 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e83a:	4b1c      	ldr	r3, [pc, #112]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e83c:	8a5a      	ldrh	r2, [r3, #18]
 801e83e:	4b1b      	ldr	r3, [pc, #108]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e840:	8a1b      	ldrh	r3, [r3, #16]
 801e842:	429a      	cmp	r2, r3
 801e844:	d908      	bls.n	801e858 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e846:	4b19      	ldr	r3, [pc, #100]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e848:	8a5a      	ldrh	r2, [r3, #18]
 801e84a:	4b18      	ldr	r3, [pc, #96]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e84c:	8a1b      	ldrh	r3, [r3, #16]
 801e84e:	1ad3      	subs	r3, r2, r3
 801e850:	b29a      	uxth	r2, r3
 801e852:	4b16      	ldr	r3, [pc, #88]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e854:	829a      	strh	r2, [r3, #20]
 801e856:	e006      	b.n	801e866 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e858:	4b14      	ldr	r3, [pc, #80]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e85a:	8a1b      	ldrh	r3, [r3, #16]
 801e85c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e860:	b29a      	uxth	r2, r3
 801e862:	4b12      	ldr	r3, [pc, #72]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e864:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e866:	4b11      	ldr	r3, [pc, #68]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e868:	8a1b      	ldrh	r3, [r3, #16]
 801e86a:	461a      	mov	r2, r3
 801e86c:	4b10      	ldr	r3, [pc, #64]	; (801e8b0 <TRACE_TxCpltCallback+0x110>)
 801e86e:	4413      	add	r3, r2
 801e870:	61fb      	str	r3, [r7, #28]
 801e872:	69bb      	ldr	r3, [r7, #24]
 801e874:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e876:	693b      	ldr	r3, [r7, #16]
 801e878:	f383 8810 	msr	PRIMASK, r3
}
 801e87c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e87e:	4b0d      	ldr	r3, [pc, #52]	; (801e8b4 <TRACE_TxCpltCallback+0x114>)
 801e880:	68db      	ldr	r3, [r3, #12]
 801e882:	4a0a      	ldr	r2, [pc, #40]	; (801e8ac <TRACE_TxCpltCallback+0x10c>)
 801e884:	8a92      	ldrh	r2, [r2, #20]
 801e886:	4611      	mov	r1, r2
 801e888:	69f8      	ldr	r0, [r7, #28]
 801e88a:	4798      	blx	r3
 801e88c:	e00a      	b.n	801e8a4 <TRACE_TxCpltCallback+0x104>
 801e88e:	69bb      	ldr	r3, [r7, #24]
 801e890:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e892:	68fb      	ldr	r3, [r7, #12]
 801e894:	f383 8810 	msr	PRIMASK, r3
}
 801e898:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e89a:	f7e4 f9a1 	bl	8002be0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e89e:	f000 f8a7 	bl	801e9f0 <TRACE_UnLock>
  }
}
 801e8a2:	bf00      	nop
 801e8a4:	bf00      	nop
 801e8a6:	3720      	adds	r7, #32
 801e8a8:	46bd      	mov	sp, r7
 801e8aa:	bd80      	pop	{r7, pc}
 801e8ac:	20001900 	.word	0x20001900
 801e8b0:	20001918 	.word	0x20001918
 801e8b4:	0801f600 	.word	0x0801f600

0801e8b8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e8b8:	b480      	push	{r7}
 801e8ba:	b087      	sub	sp, #28
 801e8bc:	af00      	add	r7, sp, #0
 801e8be:	4603      	mov	r3, r0
 801e8c0:	6039      	str	r1, [r7, #0]
 801e8c2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e8c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8c8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8ca:	f3ef 8310 	mrs	r3, PRIMASK
 801e8ce:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8d0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e8d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8d4:	b672      	cpsid	i
}
 801e8d6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e8d8:	4b35      	ldr	r3, [pc, #212]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e8da:	8a5a      	ldrh	r2, [r3, #18]
 801e8dc:	4b34      	ldr	r3, [pc, #208]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e8de:	8a1b      	ldrh	r3, [r3, #16]
 801e8e0:	429a      	cmp	r2, r3
 801e8e2:	d11b      	bne.n	801e91c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e8e4:	4b32      	ldr	r3, [pc, #200]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e8e6:	8a5b      	ldrh	r3, [r3, #18]
 801e8e8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e8ec:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e8ee:	88fa      	ldrh	r2, [r7, #6]
 801e8f0:	8afb      	ldrh	r3, [r7, #22]
 801e8f2:	429a      	cmp	r2, r3
 801e8f4:	d33a      	bcc.n	801e96c <TRACE_AllocateBufer+0xb4>
 801e8f6:	4b2e      	ldr	r3, [pc, #184]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e8f8:	8a1b      	ldrh	r3, [r3, #16]
 801e8fa:	88fa      	ldrh	r2, [r7, #6]
 801e8fc:	429a      	cmp	r2, r3
 801e8fe:	d235      	bcs.n	801e96c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e900:	4b2b      	ldr	r3, [pc, #172]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e902:	2201      	movs	r2, #1
 801e904:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e906:	4b2a      	ldr	r3, [pc, #168]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e908:	8a5a      	ldrh	r2, [r3, #18]
 801e90a:	4b29      	ldr	r3, [pc, #164]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e90c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e90e:	4b28      	ldr	r3, [pc, #160]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e910:	8a1b      	ldrh	r3, [r3, #16]
 801e912:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e914:	4b26      	ldr	r3, [pc, #152]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e916:	2200      	movs	r2, #0
 801e918:	825a      	strh	r2, [r3, #18]
 801e91a:	e027      	b.n	801e96c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e91c:	4b24      	ldr	r3, [pc, #144]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e91e:	8a5a      	ldrh	r2, [r3, #18]
 801e920:	4b23      	ldr	r3, [pc, #140]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e922:	8a1b      	ldrh	r3, [r3, #16]
 801e924:	429a      	cmp	r2, r3
 801e926:	d91b      	bls.n	801e960 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e928:	4b21      	ldr	r3, [pc, #132]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e92a:	8a5b      	ldrh	r3, [r3, #18]
 801e92c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e930:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e932:	88fa      	ldrh	r2, [r7, #6]
 801e934:	8afb      	ldrh	r3, [r7, #22]
 801e936:	429a      	cmp	r2, r3
 801e938:	d318      	bcc.n	801e96c <TRACE_AllocateBufer+0xb4>
 801e93a:	4b1d      	ldr	r3, [pc, #116]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e93c:	8a1b      	ldrh	r3, [r3, #16]
 801e93e:	88fa      	ldrh	r2, [r7, #6]
 801e940:	429a      	cmp	r2, r3
 801e942:	d213      	bcs.n	801e96c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e944:	4b1a      	ldr	r3, [pc, #104]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e946:	2201      	movs	r2, #1
 801e948:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e94a:	4b19      	ldr	r3, [pc, #100]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e94c:	8a5a      	ldrh	r2, [r3, #18]
 801e94e:	4b18      	ldr	r3, [pc, #96]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e950:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e952:	4b17      	ldr	r3, [pc, #92]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e954:	8a1b      	ldrh	r3, [r3, #16]
 801e956:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e958:	4b15      	ldr	r3, [pc, #84]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e95a:	2200      	movs	r2, #0
 801e95c:	825a      	strh	r2, [r3, #18]
 801e95e:	e005      	b.n	801e96c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e960:	4b13      	ldr	r3, [pc, #76]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e962:	8a1a      	ldrh	r2, [r3, #16]
 801e964:	4b12      	ldr	r3, [pc, #72]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e966:	8a5b      	ldrh	r3, [r3, #18]
 801e968:	1ad3      	subs	r3, r2, r3
 801e96a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e96c:	8afa      	ldrh	r2, [r7, #22]
 801e96e:	88fb      	ldrh	r3, [r7, #6]
 801e970:	429a      	cmp	r2, r3
 801e972:	d90f      	bls.n	801e994 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e974:	4b0e      	ldr	r3, [pc, #56]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e976:	8a5a      	ldrh	r2, [r3, #18]
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e97c:	4b0c      	ldr	r3, [pc, #48]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e97e:	8a5a      	ldrh	r2, [r3, #18]
 801e980:	88fb      	ldrh	r3, [r7, #6]
 801e982:	4413      	add	r3, r2
 801e984:	b29b      	uxth	r3, r3
 801e986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e98a:	b29a      	uxth	r2, r3
 801e98c:	4b08      	ldr	r3, [pc, #32]	; (801e9b0 <TRACE_AllocateBufer+0xf8>)
 801e98e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e990:	2300      	movs	r3, #0
 801e992:	82bb      	strh	r3, [r7, #20]
 801e994:	693b      	ldr	r3, [r7, #16]
 801e996:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e998:	68bb      	ldr	r3, [r7, #8]
 801e99a:	f383 8810 	msr	PRIMASK, r3
}
 801e99e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e9a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	371c      	adds	r7, #28
 801e9a8:	46bd      	mov	sp, r7
 801e9aa:	bc80      	pop	{r7}
 801e9ac:	4770      	bx	lr
 801e9ae:	bf00      	nop
 801e9b0:	20001900 	.word	0x20001900

0801e9b4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e9b4:	b480      	push	{r7}
 801e9b6:	b085      	sub	sp, #20
 801e9b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9ba:	f3ef 8310 	mrs	r3, PRIMASK
 801e9be:	607b      	str	r3, [r7, #4]
  return(result);
 801e9c0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9c4:	b672      	cpsid	i
}
 801e9c6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e9c8:	4b08      	ldr	r3, [pc, #32]	; (801e9ec <TRACE_Lock+0x38>)
 801e9ca:	8adb      	ldrh	r3, [r3, #22]
 801e9cc:	3301      	adds	r3, #1
 801e9ce:	b29a      	uxth	r2, r3
 801e9d0:	4b06      	ldr	r3, [pc, #24]	; (801e9ec <TRACE_Lock+0x38>)
 801e9d2:	82da      	strh	r2, [r3, #22]
 801e9d4:	68fb      	ldr	r3, [r7, #12]
 801e9d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9d8:	68bb      	ldr	r3, [r7, #8]
 801e9da:	f383 8810 	msr	PRIMASK, r3
}
 801e9de:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e9e0:	bf00      	nop
 801e9e2:	3714      	adds	r7, #20
 801e9e4:	46bd      	mov	sp, r7
 801e9e6:	bc80      	pop	{r7}
 801e9e8:	4770      	bx	lr
 801e9ea:	bf00      	nop
 801e9ec:	20001900 	.word	0x20001900

0801e9f0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e9f0:	b480      	push	{r7}
 801e9f2:	b085      	sub	sp, #20
 801e9f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9f6:	f3ef 8310 	mrs	r3, PRIMASK
 801e9fa:	607b      	str	r3, [r7, #4]
  return(result);
 801e9fc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea00:	b672      	cpsid	i
}
 801ea02:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ea04:	4b08      	ldr	r3, [pc, #32]	; (801ea28 <TRACE_UnLock+0x38>)
 801ea06:	8adb      	ldrh	r3, [r3, #22]
 801ea08:	3b01      	subs	r3, #1
 801ea0a:	b29a      	uxth	r2, r3
 801ea0c:	4b06      	ldr	r3, [pc, #24]	; (801ea28 <TRACE_UnLock+0x38>)
 801ea0e:	82da      	strh	r2, [r3, #22]
 801ea10:	68fb      	ldr	r3, [r7, #12]
 801ea12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea14:	68bb      	ldr	r3, [r7, #8]
 801ea16:	f383 8810 	msr	PRIMASK, r3
}
 801ea1a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea1c:	bf00      	nop
 801ea1e:	3714      	adds	r7, #20
 801ea20:	46bd      	mov	sp, r7
 801ea22:	bc80      	pop	{r7}
 801ea24:	4770      	bx	lr
 801ea26:	bf00      	nop
 801ea28:	20001900 	.word	0x20001900

0801ea2c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ea2c:	b480      	push	{r7}
 801ea2e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ea30:	4b05      	ldr	r3, [pc, #20]	; (801ea48 <TRACE_IsLocked+0x1c>)
 801ea32:	8adb      	ldrh	r3, [r3, #22]
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	bf14      	ite	ne
 801ea38:	2301      	movne	r3, #1
 801ea3a:	2300      	moveq	r3, #0
 801ea3c:	b2db      	uxtb	r3, r3
}
 801ea3e:	4618      	mov	r0, r3
 801ea40:	46bd      	mov	sp, r7
 801ea42:	bc80      	pop	{r7}
 801ea44:	4770      	bx	lr
 801ea46:	bf00      	nop
 801ea48:	20001900 	.word	0x20001900

0801ea4c <memset>:
 801ea4c:	4402      	add	r2, r0
 801ea4e:	4603      	mov	r3, r0
 801ea50:	4293      	cmp	r3, r2
 801ea52:	d100      	bne.n	801ea56 <memset+0xa>
 801ea54:	4770      	bx	lr
 801ea56:	f803 1b01 	strb.w	r1, [r3], #1
 801ea5a:	e7f9      	b.n	801ea50 <memset+0x4>

0801ea5c <__libc_init_array>:
 801ea5c:	b570      	push	{r4, r5, r6, lr}
 801ea5e:	4d0d      	ldr	r5, [pc, #52]	; (801ea94 <__libc_init_array+0x38>)
 801ea60:	4c0d      	ldr	r4, [pc, #52]	; (801ea98 <__libc_init_array+0x3c>)
 801ea62:	1b64      	subs	r4, r4, r5
 801ea64:	10a4      	asrs	r4, r4, #2
 801ea66:	2600      	movs	r6, #0
 801ea68:	42a6      	cmp	r6, r4
 801ea6a:	d109      	bne.n	801ea80 <__libc_init_array+0x24>
 801ea6c:	4d0b      	ldr	r5, [pc, #44]	; (801ea9c <__libc_init_array+0x40>)
 801ea6e:	4c0c      	ldr	r4, [pc, #48]	; (801eaa0 <__libc_init_array+0x44>)
 801ea70:	f000 f8fe 	bl	801ec70 <_init>
 801ea74:	1b64      	subs	r4, r4, r5
 801ea76:	10a4      	asrs	r4, r4, #2
 801ea78:	2600      	movs	r6, #0
 801ea7a:	42a6      	cmp	r6, r4
 801ea7c:	d105      	bne.n	801ea8a <__libc_init_array+0x2e>
 801ea7e:	bd70      	pop	{r4, r5, r6, pc}
 801ea80:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea84:	4798      	blx	r3
 801ea86:	3601      	adds	r6, #1
 801ea88:	e7ee      	b.n	801ea68 <__libc_init_array+0xc>
 801ea8a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea8e:	4798      	blx	r3
 801ea90:	3601      	adds	r6, #1
 801ea92:	e7f2      	b.n	801ea7a <__libc_init_array+0x1e>
 801ea94:	0801fc34 	.word	0x0801fc34
 801ea98:	0801fc34 	.word	0x0801fc34
 801ea9c:	0801fc34 	.word	0x0801fc34
 801eaa0:	0801fc3c 	.word	0x0801fc3c

0801eaa4 <__retarget_lock_acquire_recursive>:
 801eaa4:	4770      	bx	lr

0801eaa6 <__retarget_lock_release_recursive>:
 801eaa6:	4770      	bx	lr

0801eaa8 <register_fini>:
 801eaa8:	4b02      	ldr	r3, [pc, #8]	; (801eab4 <register_fini+0xc>)
 801eaaa:	b113      	cbz	r3, 801eab2 <register_fini+0xa>
 801eaac:	4802      	ldr	r0, [pc, #8]	; (801eab8 <register_fini+0x10>)
 801eaae:	f000 b805 	b.w	801eabc <atexit>
 801eab2:	4770      	bx	lr
 801eab4:	00000000 	.word	0x00000000
 801eab8:	0801eac9 	.word	0x0801eac9

0801eabc <atexit>:
 801eabc:	2300      	movs	r3, #0
 801eabe:	4601      	mov	r1, r0
 801eac0:	461a      	mov	r2, r3
 801eac2:	4618      	mov	r0, r3
 801eac4:	f000 b814 	b.w	801eaf0 <__register_exitproc>

0801eac8 <__libc_fini_array>:
 801eac8:	b538      	push	{r3, r4, r5, lr}
 801eaca:	4d07      	ldr	r5, [pc, #28]	; (801eae8 <__libc_fini_array+0x20>)
 801eacc:	4c07      	ldr	r4, [pc, #28]	; (801eaec <__libc_fini_array+0x24>)
 801eace:	1b64      	subs	r4, r4, r5
 801ead0:	10a4      	asrs	r4, r4, #2
 801ead2:	b91c      	cbnz	r4, 801eadc <__libc_fini_array+0x14>
 801ead4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ead8:	f000 b8d0 	b.w	801ec7c <_fini>
 801eadc:	3c01      	subs	r4, #1
 801eade:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801eae2:	4798      	blx	r3
 801eae4:	e7f5      	b.n	801ead2 <__libc_fini_array+0xa>
 801eae6:	bf00      	nop
 801eae8:	0801fc3c 	.word	0x0801fc3c
 801eaec:	0801fc40 	.word	0x0801fc40

0801eaf0 <__register_exitproc>:
 801eaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaf4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801eb64 <__register_exitproc+0x74>
 801eaf8:	4606      	mov	r6, r0
 801eafa:	f8da 0000 	ldr.w	r0, [sl]
 801eafe:	4698      	mov	r8, r3
 801eb00:	460f      	mov	r7, r1
 801eb02:	4691      	mov	r9, r2
 801eb04:	f7ff ffce 	bl	801eaa4 <__retarget_lock_acquire_recursive>
 801eb08:	4b17      	ldr	r3, [pc, #92]	; (801eb68 <__register_exitproc+0x78>)
 801eb0a:	681c      	ldr	r4, [r3, #0]
 801eb0c:	b90c      	cbnz	r4, 801eb12 <__register_exitproc+0x22>
 801eb0e:	4c17      	ldr	r4, [pc, #92]	; (801eb6c <__register_exitproc+0x7c>)
 801eb10:	601c      	str	r4, [r3, #0]
 801eb12:	6865      	ldr	r5, [r4, #4]
 801eb14:	f8da 0000 	ldr.w	r0, [sl]
 801eb18:	2d1f      	cmp	r5, #31
 801eb1a:	dd05      	ble.n	801eb28 <__register_exitproc+0x38>
 801eb1c:	f7ff ffc3 	bl	801eaa6 <__retarget_lock_release_recursive>
 801eb20:	f04f 30ff 	mov.w	r0, #4294967295
 801eb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb28:	b19e      	cbz	r6, 801eb52 <__register_exitproc+0x62>
 801eb2a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eb2e:	2201      	movs	r2, #1
 801eb30:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eb34:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eb38:	40aa      	lsls	r2, r5
 801eb3a:	4313      	orrs	r3, r2
 801eb3c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eb40:	2e02      	cmp	r6, #2
 801eb42:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eb46:	bf02      	ittt	eq
 801eb48:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801eb4c:	4313      	orreq	r3, r2
 801eb4e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801eb52:	1c6b      	adds	r3, r5, #1
 801eb54:	3502      	adds	r5, #2
 801eb56:	6063      	str	r3, [r4, #4]
 801eb58:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eb5c:	f7ff ffa3 	bl	801eaa6 <__retarget_lock_release_recursive>
 801eb60:	2000      	movs	r0, #0
 801eb62:	e7df      	b.n	801eb24 <__register_exitproc+0x34>
 801eb64:	20000168 	.word	0x20000168
 801eb68:	20001f1c 	.word	0x20001f1c
 801eb6c:	20001f20 	.word	0x20001f20

0801eb70 <floor>:
 801eb70:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb78:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801eb7c:	2e13      	cmp	r6, #19
 801eb7e:	460b      	mov	r3, r1
 801eb80:	4607      	mov	r7, r0
 801eb82:	460c      	mov	r4, r1
 801eb84:	4605      	mov	r5, r0
 801eb86:	dc32      	bgt.n	801ebee <floor+0x7e>
 801eb88:	2e00      	cmp	r6, #0
 801eb8a:	da14      	bge.n	801ebb6 <floor+0x46>
 801eb8c:	a334      	add	r3, pc, #208	; (adr r3, 801ec60 <floor+0xf0>)
 801eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb92:	f7e1 faff 	bl	8000194 <__adddf3>
 801eb96:	2200      	movs	r2, #0
 801eb98:	2300      	movs	r3, #0
 801eb9a:	f7e1 ff41 	bl	8000a20 <__aeabi_dcmpgt>
 801eb9e:	b138      	cbz	r0, 801ebb0 <floor+0x40>
 801eba0:	2c00      	cmp	r4, #0
 801eba2:	da56      	bge.n	801ec52 <floor+0xe2>
 801eba4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801eba8:	4325      	orrs	r5, r4
 801ebaa:	d055      	beq.n	801ec58 <floor+0xe8>
 801ebac:	4c2e      	ldr	r4, [pc, #184]	; (801ec68 <floor+0xf8>)
 801ebae:	2500      	movs	r5, #0
 801ebb0:	4623      	mov	r3, r4
 801ebb2:	462f      	mov	r7, r5
 801ebb4:	e025      	b.n	801ec02 <floor+0x92>
 801ebb6:	4a2d      	ldr	r2, [pc, #180]	; (801ec6c <floor+0xfc>)
 801ebb8:	fa42 f806 	asr.w	r8, r2, r6
 801ebbc:	ea01 0208 	and.w	r2, r1, r8
 801ebc0:	4302      	orrs	r2, r0
 801ebc2:	d01e      	beq.n	801ec02 <floor+0x92>
 801ebc4:	a326      	add	r3, pc, #152	; (adr r3, 801ec60 <floor+0xf0>)
 801ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebca:	f7e1 fae3 	bl	8000194 <__adddf3>
 801ebce:	2200      	movs	r2, #0
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	f7e1 ff25 	bl	8000a20 <__aeabi_dcmpgt>
 801ebd6:	2800      	cmp	r0, #0
 801ebd8:	d0ea      	beq.n	801ebb0 <floor+0x40>
 801ebda:	2c00      	cmp	r4, #0
 801ebdc:	bfbe      	ittt	lt
 801ebde:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ebe2:	4133      	asrlt	r3, r6
 801ebe4:	18e4      	addlt	r4, r4, r3
 801ebe6:	ea24 0408 	bic.w	r4, r4, r8
 801ebea:	2500      	movs	r5, #0
 801ebec:	e7e0      	b.n	801ebb0 <floor+0x40>
 801ebee:	2e33      	cmp	r6, #51	; 0x33
 801ebf0:	dd0b      	ble.n	801ec0a <floor+0x9a>
 801ebf2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ebf6:	d104      	bne.n	801ec02 <floor+0x92>
 801ebf8:	4602      	mov	r2, r0
 801ebfa:	f7e1 facb 	bl	8000194 <__adddf3>
 801ebfe:	4607      	mov	r7, r0
 801ec00:	460b      	mov	r3, r1
 801ec02:	4638      	mov	r0, r7
 801ec04:	4619      	mov	r1, r3
 801ec06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec0a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ec0e:	f04f 38ff 	mov.w	r8, #4294967295
 801ec12:	fa28 f802 	lsr.w	r8, r8, r2
 801ec16:	ea10 0f08 	tst.w	r0, r8
 801ec1a:	d0f2      	beq.n	801ec02 <floor+0x92>
 801ec1c:	a310      	add	r3, pc, #64	; (adr r3, 801ec60 <floor+0xf0>)
 801ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec22:	f7e1 fab7 	bl	8000194 <__adddf3>
 801ec26:	2200      	movs	r2, #0
 801ec28:	2300      	movs	r3, #0
 801ec2a:	f7e1 fef9 	bl	8000a20 <__aeabi_dcmpgt>
 801ec2e:	2800      	cmp	r0, #0
 801ec30:	d0be      	beq.n	801ebb0 <floor+0x40>
 801ec32:	2c00      	cmp	r4, #0
 801ec34:	da0a      	bge.n	801ec4c <floor+0xdc>
 801ec36:	2e14      	cmp	r6, #20
 801ec38:	d101      	bne.n	801ec3e <floor+0xce>
 801ec3a:	3401      	adds	r4, #1
 801ec3c:	e006      	b.n	801ec4c <floor+0xdc>
 801ec3e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec42:	2301      	movs	r3, #1
 801ec44:	40b3      	lsls	r3, r6
 801ec46:	441d      	add	r5, r3
 801ec48:	42af      	cmp	r7, r5
 801ec4a:	d8f6      	bhi.n	801ec3a <floor+0xca>
 801ec4c:	ea25 0508 	bic.w	r5, r5, r8
 801ec50:	e7ae      	b.n	801ebb0 <floor+0x40>
 801ec52:	2500      	movs	r5, #0
 801ec54:	462c      	mov	r4, r5
 801ec56:	e7ab      	b.n	801ebb0 <floor+0x40>
 801ec58:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ec5c:	e7a8      	b.n	801ebb0 <floor+0x40>
 801ec5e:	bf00      	nop
 801ec60:	8800759c 	.word	0x8800759c
 801ec64:	7e37e43c 	.word	0x7e37e43c
 801ec68:	bff00000 	.word	0xbff00000
 801ec6c:	000fffff 	.word	0x000fffff

0801ec70 <_init>:
 801ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec72:	bf00      	nop
 801ec74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec76:	bc08      	pop	{r3}
 801ec78:	469e      	mov	lr, r3
 801ec7a:	4770      	bx	lr

0801ec7c <_fini>:
 801ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec7e:	bf00      	nop
 801ec80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec82:	bc08      	pop	{r3}
 801ec84:	469e      	mov	lr, r3
 801ec86:	4770      	bx	lr
