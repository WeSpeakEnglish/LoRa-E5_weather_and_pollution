
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e6e0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801e818  0801e818  0002e818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801f6c8  0801f6c8  0002f6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f7a0  0801f7a0  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801f7a0  0801f7a0  0002f7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f7a8  0801f7a8  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801f7a8  0801f7a8  0002f7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f7b0  0801f7b0  0002f7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801f7b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f5c  20000164  0801f918  00030164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020c0  0801f918  000320c0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004ceb2  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b8b0  00000000  00000000  0007d0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003ea8  00000000  00000000  00088978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002fbd  00000000  00000000  0008c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bac7  00000000  00000000  0008f7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004d5de  00000000  00000000  000bb2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000daff1  00000000  00000000  00108882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0001067c  00000000  00000000  001e3874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  001f3ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000164 	.word	0x20000164
 8000154:	00000000 	.word	0x00000000
 8000158:	0801e800 	.word	0x0801e800

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000168 	.word	0x20000168
 8000174:	0801e800 	.word	0x0801e800

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_f2iz>:
 8000d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d48:	d30f      	bcc.n	8000d6a <__aeabi_f2iz+0x2a>
 8000d4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d52:	d90d      	bls.n	8000d70 <__aeabi_f2iz+0x30>
 8000d54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d60:	fa23 f002 	lsr.w	r0, r3, r2
 8000d64:	bf18      	it	ne
 8000d66:	4240      	negne	r0, r0
 8000d68:	4770      	bx	lr
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	4770      	bx	lr
 8000d70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d74:	d101      	bne.n	8000d7a <__aeabi_f2iz+0x3a>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	d105      	bne.n	8000d86 <__aeabi_f2iz+0x46>
 8000d7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	bf08      	it	eq
 8000d80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr

08000d8c <__aeabi_uldivmod>:
 8000d8c:	b953      	cbnz	r3, 8000da4 <__aeabi_uldivmod+0x18>
 8000d8e:	b94a      	cbnz	r2, 8000da4 <__aeabi_uldivmod+0x18>
 8000d90:	2900      	cmp	r1, #0
 8000d92:	bf08      	it	eq
 8000d94:	2800      	cmpeq	r0, #0
 8000d96:	bf1c      	itt	ne
 8000d98:	f04f 31ff 	movne.w	r1, #4294967295
 8000d9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000da0:	f000 b970 	b.w	8001084 <__aeabi_idiv0>
 8000da4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dac:	f000 f806 	bl	8000dbc <__udivmoddi4>
 8000db0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db8:	b004      	add	sp, #16
 8000dba:	4770      	bx	lr

08000dbc <__udivmoddi4>:
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	9e08      	ldr	r6, [sp, #32]
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	460f      	mov	r7, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d14a      	bne.n	8000e62 <__udivmoddi4+0xa6>
 8000dcc:	428a      	cmp	r2, r1
 8000dce:	4694      	mov	ip, r2
 8000dd0:	d965      	bls.n	8000e9e <__udivmoddi4+0xe2>
 8000dd2:	fab2 f382 	clz	r3, r2
 8000dd6:	b143      	cbz	r3, 8000dea <__udivmoddi4+0x2e>
 8000dd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ddc:	f1c3 0220 	rsb	r2, r3, #32
 8000de0:	409f      	lsls	r7, r3
 8000de2:	fa20 f202 	lsr.w	r2, r0, r2
 8000de6:	4317      	orrs	r7, r2
 8000de8:	409c      	lsls	r4, r3
 8000dea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000dee:	fa1f f58c 	uxth.w	r5, ip
 8000df2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000df6:	0c22      	lsrs	r2, r4, #16
 8000df8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e00:	fb01 f005 	mul.w	r0, r1, r5
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x62>
 8000e08:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e10:	f080 811b 	bcs.w	800104a <__udivmoddi4+0x28e>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f240 8118 	bls.w	800104a <__udivmoddi4+0x28e>
 8000e1a:	3902      	subs	r1, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a12      	subs	r2, r2, r0
 8000e20:	b2a4      	uxth	r4, r4
 8000e22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2e:	fb00 f505 	mul.w	r5, r0, r5
 8000e32:	42a5      	cmp	r5, r4
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x90>
 8000e36:	eb1c 0404 	adds.w	r4, ip, r4
 8000e3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3e:	f080 8106 	bcs.w	800104e <__udivmoddi4+0x292>
 8000e42:	42a5      	cmp	r5, r4
 8000e44:	f240 8103 	bls.w	800104e <__udivmoddi4+0x292>
 8000e48:	4464      	add	r4, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11e      	cbz	r6, 8000e5e <__udivmoddi4+0xa2>
 8000e56:	40dc      	lsrs	r4, r3
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0xbc>
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	f000 80ec 	beq.w	8001044 <__udivmoddi4+0x288>
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000e72:	4608      	mov	r0, r1
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	fab3 f183 	clz	r1, r3
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d149      	bne.n	8000f14 <__udivmoddi4+0x158>
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xce>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f7 	bhi.w	8001078 <__udivmoddi4+0x2bc>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	4617      	mov	r7, r2
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d0e2      	beq.n	8000e5e <__udivmoddi4+0xa2>
 8000e98:	e9c6 4700 	strd	r4, r7, [r6]
 8000e9c:	e7df      	b.n	8000e5e <__udivmoddi4+0xa2>
 8000e9e:	b902      	cbnz	r2, 8000ea2 <__udivmoddi4+0xe6>
 8000ea0:	deff      	udf	#255	; 0xff
 8000ea2:	fab2 f382 	clz	r3, r2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 808f 	bne.w	8000fca <__udivmoddi4+0x20e>
 8000eac:	1a8a      	subs	r2, r1, r2
 8000eae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb2:	fa1f fe8c 	uxth.w	lr, ip
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ebc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec0:	0c22      	lsrs	r2, r4, #16
 8000ec2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ec6:	fb0e f005 	mul.w	r0, lr, r5
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x124>
 8000ece:	eb1c 0202 	adds.w	r2, ip, r2
 8000ed2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x122>
 8000ed8:	4290      	cmp	r0, r2
 8000eda:	f200 80ca 	bhi.w	8001072 <__udivmoddi4+0x2b6>
 8000ede:	4645      	mov	r5, r8
 8000ee0:	1a12      	subs	r2, r2, r0
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ee8:	fb07 2210 	mls	r2, r7, r0, r2
 8000eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef4:	45a6      	cmp	lr, r4
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x14e>
 8000ef8:	eb1c 0404 	adds.w	r4, ip, r4
 8000efc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0x14c>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f200 80ba 	bhi.w	800107c <__udivmoddi4+0x2c0>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	eba4 040e 	sub.w	r4, r4, lr
 8000f0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f12:	e79f      	b.n	8000e54 <__udivmoddi4+0x98>
 8000f14:	f1c1 0720 	rsb	r7, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f22:	fa05 f401 	lsl.w	r4, r5, r1
 8000f26:	fa20 f307 	lsr.w	r3, r0, r7
 8000f2a:	40fd      	lsrs	r5, r7
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f901 	lsl.w	r9, r0, r1
 8000f32:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000f36:	fa1f fe8c 	uxth.w	lr, ip
 8000f3a:	fbb5 f8f0 	udiv	r8, r5, r0
 8000f3e:	0c1c      	lsrs	r4, r3, #16
 8000f40:	fb00 5518 	mls	r5, r0, r8, r5
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f48:	fb08 f50e 	mul.w	r5, r8, lr
 8000f4c:	42a5      	cmp	r5, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90b      	bls.n	8000f6c <__udivmoddi4+0x1b0>
 8000f54:	eb1c 0404 	adds.w	r4, ip, r4
 8000f58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f5c:	f080 8087 	bcs.w	800106e <__udivmoddi4+0x2b2>
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	f240 8084 	bls.w	800106e <__udivmoddi4+0x2b2>
 8000f66:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6a:	4464      	add	r4, ip
 8000f6c:	1b64      	subs	r4, r4, r5
 8000f6e:	b29d      	uxth	r5, r3
 8000f70:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f74:	fb00 4413 	mls	r4, r0, r3, r4
 8000f78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f80:	45a6      	cmp	lr, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x1da>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f8c:	d26b      	bcs.n	8001066 <__udivmoddi4+0x2aa>
 8000f8e:	45a6      	cmp	lr, r4
 8000f90:	d969      	bls.n	8001066 <__udivmoddi4+0x2aa>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f9a:	fba0 8302 	umull	r8, r3, r0, r2
 8000f9e:	eba4 040e 	sub.w	r4, r4, lr
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46c6      	mov	lr, r8
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	d355      	bcc.n	8001056 <__udivmoddi4+0x29a>
 8000faa:	d052      	beq.n	8001052 <__udivmoddi4+0x296>
 8000fac:	b156      	cbz	r6, 8000fc4 <__udivmoddi4+0x208>
 8000fae:	ebb9 030e 	subs.w	r3, r9, lr
 8000fb2:	eb64 0405 	sbc.w	r4, r4, r5
 8000fb6:	fa04 f707 	lsl.w	r7, r4, r7
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	431f      	orrs	r7, r3
 8000fc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f1c3 0120 	rsb	r1, r3, #32
 8000fce:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fd2:	fa20 f201 	lsr.w	r2, r0, r1
 8000fd6:	fa25 f101 	lsr.w	r1, r5, r1
 8000fda:	409d      	lsls	r5, r3
 8000fdc:	432a      	orrs	r2, r5
 8000fde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe2:	fa1f fe8c 	uxth.w	lr, ip
 8000fe6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fea:	fb07 1510 	mls	r5, r7, r0, r1
 8000fee:	0c11      	lsrs	r1, r2, #16
 8000ff0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ff4:	fb00 f50e 	mul.w	r5, r0, lr
 8000ff8:	428d      	cmp	r5, r1
 8000ffa:	fa04 f403 	lsl.w	r4, r4, r3
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x256>
 8001000:	eb1c 0101 	adds.w	r1, ip, r1
 8001004:	f100 38ff 	add.w	r8, r0, #4294967295
 8001008:	d22f      	bcs.n	800106a <__udivmoddi4+0x2ae>
 800100a:	428d      	cmp	r5, r1
 800100c:	d92d      	bls.n	800106a <__udivmoddi4+0x2ae>
 800100e:	3802      	subs	r0, #2
 8001010:	4461      	add	r1, ip
 8001012:	1b49      	subs	r1, r1, r5
 8001014:	b292      	uxth	r2, r2
 8001016:	fbb1 f5f7 	udiv	r5, r1, r7
 800101a:	fb07 1115 	mls	r1, r7, r5, r1
 800101e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001022:	fb05 f10e 	mul.w	r1, r5, lr
 8001026:	4291      	cmp	r1, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x280>
 800102a:	eb1c 0202 	adds.w	r2, ip, r2
 800102e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001032:	d216      	bcs.n	8001062 <__udivmoddi4+0x2a6>
 8001034:	4291      	cmp	r1, r2
 8001036:	d914      	bls.n	8001062 <__udivmoddi4+0x2a6>
 8001038:	3d02      	subs	r5, #2
 800103a:	4462      	add	r2, ip
 800103c:	1a52      	subs	r2, r2, r1
 800103e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001042:	e739      	b.n	8000eb8 <__udivmoddi4+0xfc>
 8001044:	4631      	mov	r1, r6
 8001046:	4630      	mov	r0, r6
 8001048:	e709      	b.n	8000e5e <__udivmoddi4+0xa2>
 800104a:	4639      	mov	r1, r7
 800104c:	e6e7      	b.n	8000e1e <__udivmoddi4+0x62>
 800104e:	4610      	mov	r0, r2
 8001050:	e6fc      	b.n	8000e4c <__udivmoddi4+0x90>
 8001052:	45c1      	cmp	r9, r8
 8001054:	d2aa      	bcs.n	8000fac <__udivmoddi4+0x1f0>
 8001056:	ebb8 0e02 	subs.w	lr, r8, r2
 800105a:	eb63 050c 	sbc.w	r5, r3, ip
 800105e:	3801      	subs	r0, #1
 8001060:	e7a4      	b.n	8000fac <__udivmoddi4+0x1f0>
 8001062:	4645      	mov	r5, r8
 8001064:	e7ea      	b.n	800103c <__udivmoddi4+0x280>
 8001066:	4603      	mov	r3, r0
 8001068:	e795      	b.n	8000f96 <__udivmoddi4+0x1da>
 800106a:	4640      	mov	r0, r8
 800106c:	e7d1      	b.n	8001012 <__udivmoddi4+0x256>
 800106e:	46d0      	mov	r8, sl
 8001070:	e77c      	b.n	8000f6c <__udivmoddi4+0x1b0>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	e733      	b.n	8000ee0 <__udivmoddi4+0x124>
 8001078:	4608      	mov	r0, r1
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xd8>
 800107c:	4464      	add	r4, ip
 800107e:	3802      	subs	r0, #2
 8001080:	e743      	b.n	8000f0a <__udivmoddi4+0x14e>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <ZE27_Checksum>:
 */

#include "ZE27_O3.h"


uint8_t ZE27_Checksum(uint8_t *msg, unsigned char ln){
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  //Checksum = (NOT(Byte1+Byte2+Byte3+Byte4+Byte5+Byte6+Byte7)) +1
    for (uint8_t i = 1; i <= ln - 2; i++) {
 8001098:	2301      	movs	r3, #1
 800109a:	73bb      	strb	r3, [r7, #14]
 800109c:	e009      	b.n	80010b2 <ZE27_Checksum+0x2a>
        sum += msg[i];
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4413      	add	r3, r2
 80010aa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 1; i <= ln - 2; i++) {
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	3301      	adds	r3, #1
 80010b0:	73bb      	strb	r3, [r7, #14]
 80010b2:	78fb      	ldrb	r3, [r7, #3]
 80010b4:	1e5a      	subs	r2, r3, #1
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dcf0      	bgt.n	800109e <ZE27_Checksum+0x16>
    }

    uint8_t checksum = (~sum)+1;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	425b      	negs	r3, r3
 80010c0:	737b      	strb	r3, [r7, #13]
    return checksum;
 80010c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <ZE27_parsePPB>:

uint16_t ZE27_parsePPB(uint8_t *msg){
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
	if(msg[ZE27_RX_BUFFER_SIZE -1] == ZE27_Checksum(msg, ZE27_RX_BUFFER_SIZE)){
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3308      	adds	r3, #8
 80010da:	781c      	ldrb	r4, [r3, #0]
 80010dc:	2109      	movs	r1, #9
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffd2 	bl	8001088 <ZE27_Checksum>
 80010e4:	4603      	mov	r3, r0
 80010e6:	429c      	cmp	r4, r3
 80010e8:	d10c      	bne.n	8001104 <ZE27_parsePPB+0x36>
		return msg[4]*256 + msg[5];
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	021b      	lsls	r3, r3, #8
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3305      	adds	r3, #5
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4413      	add	r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	e000      	b.n	8001106 <ZE27_parsePPB+0x38>
	}
 return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800111c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	43db      	mvns	r3, r3
 8001150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001154:	4013      	ands	r3, r2
 8001156:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001168:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC_Init+0x94>)
 800116a:	4a24      	ldr	r2, [pc, #144]	; (80011fc <MX_ADC_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800116e:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <MX_ADC_Init+0x94>)
 8001170:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001174:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC_Init+0x94>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC_Init+0x94>)
 800118a:	2204      	movs	r2, #4
 800118c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_ADC_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_ADC_Init+0x94>)
 800119c:	2200      	movs	r2, #0
 800119e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <MX_ADC_Init+0x94>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_ADC_Init+0x94>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_ADC_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_ADC_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MX_ADC_Init+0x94>)
 80011c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_ADC_Init+0x94>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_ADC_Init+0x94>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_ADC_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_ADC_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_ADC_Init+0x94>)
 80011e6:	f002 fdc5 	bl	8003d74 <HAL_ADC_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80011f0:	f000 feb8 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000180 	.word	0x20000180
 80011fc:	40012400 	.word	0x40012400

08001200 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_ADC_MspInit+0x24>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d103      	bne.n	800121a <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f7ff ff7a 	bl	800110e <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012400 	.word	0x40012400

08001228 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a05      	ldr	r2, [pc, #20]	; (800124c <HAL_ADC_MspDeInit+0x24>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d103      	bne.n	8001242 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800123a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800123e:	f7ff ff7e 	bl	800113e <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40012400 	.word	0x40012400

08001250 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <SYS_InitMeasurement+0x14>)
 8001256:	4a04      	ldr	r2, [pc, #16]	; (8001268 <SYS_InitMeasurement+0x18>)
 8001258:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000180 	.word	0x20000180
 8001268:	40012400 	.word	0x40012400

0800126c <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800127a:	4813      	ldr	r0, [pc, #76]	; (80012c8 <SYS_GetBatteryLevel+0x5c>)
 800127c:	f000 f82a 	bl	80012d4 <ADC_ReadChannels>
 8001280:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	e016      	b.n	80012bc <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <SYS_GetBatteryLevel+0x60>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001296:	4293      	cmp	r3, r2
 8001298:	d00b      	beq.n	80012b2 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <SYS_GetBatteryLevel+0x60>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80012a4:	fb03 f202 	mul.w	r2, r3, r2
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	e004      	b.n	80012bc <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <SYS_GetBatteryLevel+0x64>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	b4002000 	.word	0xb4002000
 80012cc:	1fff75aa 	.word	0x1fff75aa
 80012d0:	004c08d8 	.word	0x004c08d8

080012d4 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012e0:	f107 0308 	add.w	r3, r7, #8
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80012ec:	f7ff ff3a 	bl	8001164 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80012f0:	481a      	ldr	r0, [pc, #104]	; (800135c <ADC_ReadChannels+0x88>)
 80012f2:	f003 fb5e 	bl	80049b2 <HAL_ADCEx_Calibration_Start>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80012fc:	f000 fe32 	bl	8001f64 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800130c:	f107 0308 	add.w	r3, r7, #8
 8001310:	4619      	mov	r1, r3
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <ADC_ReadChannels+0x88>)
 8001314:	f003 f86a 	bl	80043ec <HAL_ADC_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 800131e:	f000 fe21 	bl	8001f64 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001322:	480e      	ldr	r0, [pc, #56]	; (800135c <ADC_ReadChannels+0x88>)
 8001324:	f002 ff46 	bl	80041b4 <HAL_ADC_Start>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 800132e:	f000 fe19 	bl	8001f64 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001332:	f04f 31ff 	mov.w	r1, #4294967295
 8001336:	4809      	ldr	r0, [pc, #36]	; (800135c <ADC_ReadChannels+0x88>)
 8001338:	f002 ffb4 	bl	80042a4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <ADC_ReadChannels+0x88>)
 800133e:	f002 ff7f 	bl	8004240 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <ADC_ReadChannels+0x88>)
 8001344:	f003 f845 	bl	80043d2 <HAL_ADC_GetValue>
 8001348:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800134a:	4804      	ldr	r0, [pc, #16]	; (800135c <ADC_ReadChannels+0x88>)
 800134c:	f002 fea6 	bl	800409c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001350:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000180 	.word	0x20000180

08001360 <LL_AHB1_GRP1_EnableClock>:
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4313      	orrs	r3, r2
 8001376:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001384:	68fb      	ldr	r3, [r7, #12]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001394:	2004      	movs	r0, #4
 8001396:	f7ff ffe3 	bl	8001360 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	2001      	movs	r0, #1
 800139c:	f7ff ffe0 	bl	8001360 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	200b      	movs	r0, #11
 80013a6:	f003 fcaa 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013aa:	200b      	movs	r0, #11
 80013ac:	f003 fcc1 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	200c      	movs	r0, #12
 80013b6:	f003 fca2 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013ba:	200c      	movs	r0, #12
 80013bc:	f003 fcb9 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	203d      	movs	r0, #61	; 0x3d
 80013c6:	f003 fc9a 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 80013ca:	203d      	movs	r0, #61	; 0x3d
 80013cc:	f003 fcb1 	bl	8004d32 <HAL_NVIC_EnableIRQ>

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013ea:	d311      	bcc.n	8001410 <FLASH_IF_Write+0x3c>
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <FLASH_IF_Write+0x48>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	029a      	lsls	r2, r3, #10
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <FLASH_IF_Write+0x4c>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80013fa:	3b01      	subs	r3, #1
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4293      	cmp	r3, r2
 8001400:	d306      	bcc.n	8001410 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f85a 	bl	80014c0 <FLASH_IF_INT_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001410:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	1fff75e0 	.word	0x1fff75e0
 8001420:	03fffc00 	.word	0x03fffc00

08001424 <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001430:	23ff      	movs	r3, #255	; 0xff
 8001432:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800143a:	d311      	bcc.n	8001460 <FLASH_IF_Read+0x3c>
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <FLASH_IF_Read+0x48>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	029a      	lsls	r2, r3, #10
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <FLASH_IF_Read+0x4c>)
 8001444:	4013      	ands	r3, r2
 8001446:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800144a:	3b01      	subs	r3, #1
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4293      	cmp	r3, r2
 8001450:	d306      	bcc.n	8001460 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f93a 	bl	80016d0 <FLASH_IF_INT_Read>
 800145c:	4603      	mov	r3, r0
 800145e:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	1fff75e0 	.word	0x1fff75e0
 8001470:	03fffc00 	.word	0x03fffc00

08001474 <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800147e:	23ff      	movs	r3, #255	; 0xff
 8001480:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001488:	d310      	bcc.n	80014ac <FLASH_IF_Erase+0x38>
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <FLASH_IF_Erase+0x44>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	029a      	lsls	r2, r3, #10
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <FLASH_IF_Erase+0x48>)
 8001492:	4013      	ands	r3, r2
 8001494:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001498:	3b01      	subs	r3, #1
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4293      	cmp	r3, r2
 800149e:	d305      	bcc.n	80014ac <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014a0:	6839      	ldr	r1, [r7, #0]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f932 	bl	800170c <FLASH_IF_INT_Erase>
 80014a8:	4603      	mov	r3, r0
 80014aa:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80014ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	1fff75e0 	.word	0x1fff75e0
 80014bc:	03fffc00 	.word	0x03fffc00

080014c0 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b090      	sub	sp, #64	; 0x40
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00c      	beq.n	80014fe <FLASH_IF_INT_Write+0x3e>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <FLASH_IF_INT_Write+0x3e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d104      	bne.n	80014fe <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80014fe:	f06f 0305 	mvn.w	r3, #5
 8001502:	e0da      	b.n	80016ba <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001504:	f000 f992 	bl	800182c <FLASH_IF_INT_Clear_Error>
 8001508:	4603      	mov	r3, r0
 800150a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 800150e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001512:	2b00      	cmp	r3, #0
 8001514:	f040 80cf 	bne.w	80016b6 <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001518:	f004 f8f4 	bl	8005704 <HAL_FLASH_Unlock>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 80c6 	bne.w	80016b0 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800152a:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <FLASH_IF_INT_Write+0x204>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0299      	lsls	r1, r3, #10
 8001530:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <FLASH_IF_INT_Write+0x208>)
 8001532:	400b      	ands	r3, r1
 8001534:	fbb2 f1f3 	udiv	r1, r2, r3
 8001538:	fb01 f303 	mul.w	r3, r1, r3
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	0adb      	lsrs	r3, r3, #11
 8001540:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800154c:	3b01      	subs	r3, #1
 800154e:	4a5d      	ldr	r2, [pc, #372]	; (80016c4 <FLASH_IF_INT_Write+0x204>)
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	0291      	lsls	r1, r2, #10
 8001554:	4a5c      	ldr	r2, [pc, #368]	; (80016c8 <FLASH_IF_INT_Write+0x208>)
 8001556:	400a      	ands	r2, r1
 8001558:	fbb3 f1f2 	udiv	r1, r3, r2
 800155c:	fb01 f202 	mul.w	r2, r1, r2
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	0ada      	lsrs	r2, r3, #11
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d905      	bls.n	800157e <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001578:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001582:	e089      	b.n	8001698 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001586:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800158a:	02db      	lsls	r3, r3, #11
 800158c:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800158e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f925 	bl	80017e0 <FLASH_IF_INT_IsEmpty>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d031      	beq.n	8001600 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80015a4:	23fa      	movs	r3, #250	; 0xfa
 80015a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80015aa:	e07e      	b.n	80016aa <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6939      	ldr	r1, [r7, #16]
 80015b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f88a 	bl	80016d0 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80015bc:	4b43      	ldr	r3, [pc, #268]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c6:	4413      	add	r3, r2
 80015c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015cc:	b292      	uxth	r2, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f01b fd3e 	bl	801d050 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f896 	bl	800170c <FLASH_IF_INT_Erase>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80015e6:	23fe      	movs	r3, #254	; 0xfe
 80015e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80015ec:	e05d      	b.n	80016aa <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <FLASH_IF_INT_Write+0x20c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80015f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	e005      	b.n	800160c <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 8001604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001606:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001610:	e026      	b.n	8001660 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001612:	6a3a      	ldr	r2, [r7, #32]
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161e:	2001      	movs	r0, #1
 8001620:	f004 f82c 	bl	800567c <HAL_FLASH_Program>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d113      	bne.n	8001652 <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001630:	6a3a      	ldr	r2, [r7, #32]
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	4413      	add	r3, r2
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	4299      	cmp	r1, r3
 800163c:	bf08      	it	eq
 800163e:	4290      	cmpeq	r0, r2
 8001640:	d003      	beq.n	800164a <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 8001642:	23fc      	movs	r3, #252	; 0xfc
 8001644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001648:	e00e      	b.n	8001668 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	3308      	adds	r3, #8
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	e003      	b.n	800165a <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 8001652:	23fc      	movs	r3, #252	; 0xfc
 8001654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001658:	e006      	b.n	8001668 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	3308      	adds	r3, #8
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3d4      	bcc.n	8001612 <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001668:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11b      	bne.n	80016a8 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	4413      	add	r3, r2
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167c:	4413      	add	r3, r2
 800167e:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800168a:	bf28      	it	cs
 800168c:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001694:	3301      	adds	r3, #1
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	4413      	add	r3, r2
 800169e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f4ff af6f 	bcc.w	8001584 <FLASH_IF_INT_Write+0xc4>
 80016a6:	e000      	b.n	80016aa <FLASH_IF_INT_Write+0x1ea>
          break;
 80016a8:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80016aa:	f004 f84d 	bl	8005748 <HAL_FLASH_Lock>
 80016ae:	e002      	b.n	80016b6 <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80016b0:	23fb      	movs	r3, #251	; 0xfb
 80016b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80016b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3740      	adds	r7, #64	; 0x40
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	1fff75e0 	.word	0x1fff75e0
 80016c8:	03fffc00 	.word	0x03fffc00
 80016cc:	200001e4 	.word	0x200001e4

080016d0 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <FLASH_IF_INT_Read+0x1c>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80016ec:	f06f 0305 	mvn.w	r3, #5
 80016f0:	e008      	b.n	8001704 <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f01b fca8 	bl	801d050 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 800172c:	f06f 0305 	mvn.w	r3, #5
 8001730:	e04e      	b.n	80017d0 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001732:	f000 f87b 	bl	800182c <FLASH_IF_INT_Clear_Error>
 8001736:	4603      	mov	r3, r0
 8001738:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 800173a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d144      	bne.n	80017cc <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001742:	f003 ffdf 	bl	8005704 <HAL_FLASH_Unlock>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d13d      	bne.n	80017c8 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800174c:	2302      	movs	r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <FLASH_IF_INT_Erase+0xcc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0299      	lsls	r1, r3, #10
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <FLASH_IF_INT_Erase+0xd0>)
 800175e:	400b      	ands	r3, r1
 8001760:	fbb2 f1f3 	udiv	r1, r2, r3
 8001764:	fb01 f303 	mul.w	r3, r1, r3
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	0adb      	lsrs	r3, r3, #11
 800176c:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4413      	add	r3, r2
 8001774:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001778:	3b01      	subs	r3, #1
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <FLASH_IF_INT_Erase+0xcc>)
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	0291      	lsls	r1, r2, #10
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <FLASH_IF_INT_Erase+0xd0>)
 8001782:	400a      	ands	r2, r1
 8001784:	fbb3 f1f2 	udiv	r1, r3, r2
 8001788:	fb01 f202 	mul.w	r2, r1, r2
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	0ada      	lsrs	r2, r3, #11
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	3301      	adds	r3, #1
 8001796:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001798:	f107 0214 	add.w	r2, r7, #20
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f004 f8b0 	bl	8005908 <HAL_FLASHEx_Erase>
 80017a8:	4603      	mov	r3, r0
 80017aa:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80017ac:	7fbb      	ldrb	r3, [r7, #30]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80017b2:	7fbb      	ldrb	r3, [r7, #30]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d101      	bne.n	80017bc <FLASH_IF_INT_Erase+0xb0>
 80017b8:	2301      	movs	r3, #1
 80017ba:	e001      	b.n	80017c0 <FLASH_IF_INT_Erase+0xb4>
 80017bc:	f06f 0301 	mvn.w	r3, #1
 80017c0:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80017c2:	f003 ffc1 	bl	8005748 <HAL_FLASH_Lock>
 80017c6:	e001      	b.n	80017cc <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80017c8:	23fb      	movs	r3, #251	; 0xfb
 80017ca:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 80017cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	1fff75e0 	.word	0x1fff75e0
 80017dc:	03fffc00 	.word	0x03fffc00

080017e0 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	e011      	b.n	8001818 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fe:	bf08      	it	eq
 8001800:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001804:	d002      	beq.n	800180c <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001806:	2301      	movs	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
      break;
 800180a:	e009      	b.n	8001820 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3308      	adds	r3, #8
 8001810:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3308      	adds	r3, #8
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3e9      	bcc.n	80017f4 <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001820:	68fb      	ldr	r3, [r7, #12]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001832:	23fb      	movs	r3, #251	; 0xfb
 8001834:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001836:	f003 ff65 	bl	8005704 <HAL_FLASH_Unlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d110      	bne.n	8001862 <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <FLASH_IF_INT_Clear_Error+0x44>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <FLASH_IF_INT_Clear_Error+0x44>)
 8001846:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <FLASH_IF_INT_Clear_Error+0x44>)
 800184e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001852:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001854:	f003 ff78 	bl	8005748 <HAL_FLASH_Lock>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	58004000 	.word	0x58004000

08001874 <LL_AHB2_GRP1_EnableClock>:
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001880:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001898:	68fb      	ldr	r3, [r7, #12]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff ffdb 	bl	8001874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	2002      	movs	r0, #2
 80018c0:	f7ff ffd8 	bl	8001874 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	2004      	movs	r0, #4
 80018c6:	f7ff ffd5 	bl	8001874 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80018d0:	4825      	ldr	r0, [pc, #148]	; (8001968 <MX_GPIO_Init+0xc4>)
 80018d2:	f004 fb1b 	bl	8005f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2120      	movs	r1, #32
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <MX_GPIO_Init+0xc4>)
 80018dc:	f004 fb16 	bl	8005f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f240 2131 	movw	r1, #561	; 0x231
 80018e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ea:	f004 fb0f 	bl	8005f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin;
 80018ee:	2338      	movs	r3, #56	; 0x38
 80018f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fa:	2303      	movs	r3, #3
 80018fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4819      	ldr	r0, [pc, #100]	; (8001968 <MX_GPIO_Init+0xc4>)
 8001904:	f004 f8d4 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001908:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800190c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <MX_GPIO_Init+0xc4>)
 8001920:	f004 f8c6 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001924:	2331      	movs	r3, #49	; 0x31
 8001926:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f004 f8b8 	bl	8005ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001946:	2311      	movs	r3, #17
 8001948:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194e:	2303      	movs	r3, #3
 8001950:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f004 f8a9 	bl	8005ab0 <HAL_GPIO_Init>

}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	48000400 	.word	0x48000400

0800196c <LL_AHB2_GRP1_EnableClock>:
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800197a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001990:	68fb      	ldr	r3, [r7, #12]
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <LL_APB1_GRP1_EnableClock>:
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c0:	68fb      	ldr	r3, [r7, #12]
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <MX_I2C2_Init+0x78>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <MX_I2C2_Init+0x7c>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_I2C2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a06:	480e      	ldr	r0, [pc, #56]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a08:	f004 fab0 	bl	8005f6c <HAL_I2C_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a12:	f000 faa7 	bl	8001f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a1a:	f005 fe4c 	bl	80076b6 <HAL_I2CEx_ConfigAnalogFilter>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f000 fa9e 	bl	8001f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_I2C2_Init+0x74>)
 8001a2c:	f005 fe8d 	bl	800774a <HAL_I2CEx_ConfigDigitalFilter>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f000 fa95 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200001e8 	.word	0x200001e8
 8001a44:	40005800 	.word	0x40005800
 8001a48:	00707cbb 	.word	0x00707cbb

08001a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b096      	sub	sp, #88	; 0x58
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2238      	movs	r2, #56	; 0x38
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f01c fdb3 	bl	801e5d8 <memset>
  if(i2cHandle->Instance==I2C2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_I2C_MspInit+0xd0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d14b      	bne.n	8001b14 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a80:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 f918 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a96:	f000 fa65 	bl	8001f64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff ff66 	bl	800196c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f7ff ff63 	bl	800196c <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aaa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac6:	f003 fff3 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001adc:	2304      	movs	r3, #4
 8001ade:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480e      	ldr	r0, [pc, #56]	; (8001b20 <HAL_I2C_MspInit+0xd4>)
 8001ae8:	f003 ffe2 	bl	8005ab0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001aec:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001af0:	f7ff ff54 	bl	800199c <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2020      	movs	r0, #32
 8001afa:	f003 f900 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001afe:	2020      	movs	r0, #32
 8001b00:	f003 f917 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2021      	movs	r0, #33	; 0x21
 8001b0a:	f003 f8f8 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b0e:	2021      	movs	r0, #33	; 0x21
 8001b10:	f003 f90f 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	3758      	adds	r7, #88	; 0x58
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40005800 	.word	0x40005800
 8001b20:	48000400 	.word	0x48000400

08001b24 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	f023 0218 	bic.w	r2, r3, #24
 8001b38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
	...

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b54:	f001 ff20 	bl	8003998 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b58:	f000 f832 	bl	8001bc0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5c:	f7ff fea2 	bl	80018a4 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001b60:	f00b f8b8 	bl	800ccd4 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001b64:	f001 fb72 	bl	800324c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001b68:	f7ff ff30 	bl	80019cc <MX_I2C2_Init>
  MX_TIM16_Init();
 8001b6c:	f000 ffc8 	bl	8002b00 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001b70:	f000 fffa 	bl	8002b68 <MX_TIM17_Init>
  MX_SPI2_Init();
 8001b74:	f000 fbd2 	bl	800231c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  F1_QueueIni(); // init Function queue
 8001b78:	f000 fa00 	bl	8001f7c <F1_QueueIni>
  F2_QueueIni();
 8001b7c:	f000 fa76 	bl	800206c <F2_QueueIni>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f004 f9bf 	bl	8005f0c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim16);
 8001b8e:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <main+0x68>)
 8001b90:	f008 fb22 	bl	800a1d8 <HAL_TIM_Base_Start_IT>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001b94:	f00b f8a6 	bl	800cce4 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
   	MeasureOzone();
 8001b98:	f000 f8d2 	bl	8001d40 <MeasureOzone>
    F1_pull()();
 8001b9c:	f000 fa32 	bl	8002004 <F1_pull>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4798      	blx	r3
    F2_pull()();
 8001ba4:	f000 faa6 	bl	80020f4 <F2_pull>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4798      	blx	r3
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);///DBG
 8001bac:	2120      	movs	r1, #32
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <main+0x6c>)
 8001bb0:	f004 f9c3 	bl	8005f3a <HAL_GPIO_TogglePin>
    MX_LoRaWAN_Process();
 8001bb4:	e7ee      	b.n	8001b94 <main+0x44>
 8001bb6:	bf00      	nop
 8001bb8:	200003c0 	.word	0x200003c0
 8001bbc:	48000400 	.word	0x48000400

08001bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b09a      	sub	sp, #104	; 0x68
 8001bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2248      	movs	r2, #72	; 0x48
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f01c fd02 	bl	801e5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001be6:	f005 fdfb 	bl	80077e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff ff9a 	bl	8001b24 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <SystemClock_Config+0xb8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <SystemClock_Config+0xb8>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <SystemClock_Config+0xb8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c16:	2381      	movs	r3, #129	; 0x81
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f006 f921 	bl	8007e78 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c3c:	f000 f992 	bl	8001f64 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c40:	234f      	movs	r3, #79	; 0x4f
 8001c42:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c44:	2302      	movs	r3, #2
 8001c46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c58:	f107 0308 	add.w	r3, r7, #8
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 fc8c 	bl	800857c <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c6a:	f000 f97b 	bl	8001f64 <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3768      	adds	r7, #104	; 0x68
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	58000400 	.word	0x58000400

08001c7c <MeasurePM_sens>:

void DisablePM_sens(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
}

void MeasurePM_sens(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c2, J5_SSP_addr << 1, 0x00, 1, J5_SSP_dataRX, 12, 1000);
 8001c82:	2333      	movs	r3, #51	; 0x33
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	b299      	uxth	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	230c      	movs	r3, #12
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2301      	movs	r3, #1
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4824      	ldr	r0, [pc, #144]	; (8001d30 <MeasurePM_sens+0xb4>)
 8001c9e:	f004 fbdf 	bl	8006460 <HAL_I2C_Mem_Read>
	PM1 = J5_SSP_dataRX[0] + (J5_SSP_dataRX[1] << 8) + (J5_SSP_dataRX[2] << 16) +  (J5_SSP_dataRX[3] << 24);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cac:	785b      	ldrb	r3, [r3, #1]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	441a      	add	r2, r3
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cb6:	789b      	ldrb	r3, [r3, #2]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	041b      	lsls	r3, r3, #16
 8001cbc:	441a      	add	r2, r3
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cc0:	78db      	ldrb	r3, [r3, #3]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	4413      	add	r3, r2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <MeasurePM_sens+0xb8>)
 8001ccc:	601a      	str	r2, [r3, #0]
	PM2_5 = J5_SSP_dataRX[4] + (J5_SSP_dataRX[5] << 8) + (J5_SSP_dataRX[6] << 16) +  (J5_SSP_dataRX[7] << 24);
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cd0:	791b      	ldrb	r3, [r3, #4]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cd8:	795b      	ldrb	r3, [r3, #5]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	441a      	add	r2, r3
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001ce2:	799b      	ldrb	r3, [r3, #6]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	041b      	lsls	r3, r3, #16
 8001ce8:	441a      	add	r2, r3
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cec:	79db      	ldrb	r3, [r3, #7]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	4413      	add	r3, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MeasurePM_sens+0xbc>)
 8001cf8:	601a      	str	r2, [r3, #0]
	PM10 = J5_SSP_dataRX[8] + (J5_SSP_dataRX[9] << 8) + (J5_SSP_dataRX[10] << 16) +  (J5_SSP_dataRX[11] << 24);
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001cfc:	7a1b      	ldrb	r3, [r3, #8]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001d04:	7a5b      	ldrb	r3, [r3, #9]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	441a      	add	r2, r3
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001d0e:	7a9b      	ldrb	r3, [r3, #10]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	041b      	lsls	r3, r3, #16
 8001d14:	441a      	add	r2, r3
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <MeasurePM_sens+0xb0>)
 8001d18:	7adb      	ldrb	r3, [r3, #11]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	4413      	add	r3, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MeasurePM_sens+0xc0>)
 8001d24:	601a      	str	r2, [r3, #0]
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000270 	.word	0x20000270
 8001d30:	200001e8 	.word	0x200001e8
 8001d34:	2000024c 	.word	0x2000024c
 8001d38:	20000248 	.word	0x20000248
 8001d3c:	20000250 	.word	0x20000250

08001d40 <MeasureOzone>:
void MeasureOzone(void){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af02      	add	r7, sp, #8
	uint16_t RxLen;
	HAL_UART_Receive_IT(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE);
 8001d46:	2209      	movs	r2, #9
 8001d48:	490b      	ldr	r1, [pc, #44]	; (8001d78 <MeasureOzone+0x38>)
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <MeasureOzone+0x3c>)
 8001d4c:	f008 fcc2 	bl	800a6d4 <HAL_UART_Receive_IT>
	HAL_UARTEx_ReceiveToIdle(&huart2, (uint8_t *) aRXBufferUser, ZE27_RX_BUFFER_SIZE, &RxLen, 1000);
 8001d50:	1dbb      	adds	r3, r7, #6
 8001d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d56:	9200      	str	r2, [sp, #0]
 8001d58:	2209      	movs	r2, #9
 8001d5a:	4907      	ldr	r1, [pc, #28]	; (8001d78 <MeasureOzone+0x38>)
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <MeasureOzone+0x3c>)
 8001d5e:	f00a fe48 	bl	800c9f2 <HAL_UARTEx_ReceiveToIdle>
	OzonePPB = ZE27_parsePPB(aRXBufferUser);
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MeasureOzone+0x38>)
 8001d64:	f7ff f9b3 	bl	80010ce <ZE27_parsePPB>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <MeasureOzone+0x40>)
 8001d6e:	801a      	strh	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000023c 	.word	0x2000023c
 8001d7c:	200004f4 	.word	0x200004f4
 8001d80:	20000254 	.word	0x20000254
 8001d84:	00000000 	.word	0x00000000

08001d88 <MeasureTempHum>:

void MeasureTempHum(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af02      	add	r7, sp, #8

    HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(SHT40_addr << 1),SHT40_dataRX, 6, 100);
 8001d8e:	2344      	movs	r3, #68	; 0x44
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	b299      	uxth	r1, r3
 8001d96:	2364      	movs	r3, #100	; 0x64
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	4a44      	ldr	r2, [pc, #272]	; (8001eb0 <MeasureTempHum+0x128>)
 8001d9e:	4845      	ldr	r0, [pc, #276]	; (8001eb4 <MeasureTempHum+0x12c>)
 8001da0:	f004 fa68 	bl	8006274 <HAL_I2C_Master_Receive>
    temp_hword = SHT40_dataRX[0] * 256 + SHT40_dataRX[1];
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <MeasureTempHum+0x128>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b3f      	ldr	r3, [pc, #252]	; (8001eb0 <MeasureTempHum+0x128>)
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b3e      	ldr	r3, [pc, #248]	; (8001eb8 <MeasureTempHum+0x130>)
 8001dbe:	801a      	strh	r2, [r3, #0]
    th_hword = SHT40_dataRX[3] * 256 + SHT40_dataRX[4];
 8001dc0:	4b3b      	ldr	r3, [pc, #236]	; (8001eb0 <MeasureTempHum+0x128>)
 8001dc2:	78db      	ldrb	r3, [r3, #3]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <MeasureTempHum+0x128>)
 8001dce:	791b      	ldrb	r3, [r3, #4]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <MeasureTempHum+0x134>)
 8001dda:	801a      	strh	r2, [r3, #0]
    temp  = -45.0 + 175.0 * (float)temp_hword/(float)65535.0;
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <MeasureTempHum+0x130>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe ff55 	bl	8000c90 <__aeabi_ui2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb31 	bl	8000450 <__aeabi_f2d>
 8001dee:	a32c      	add	r3, pc, #176	; (adr r3, 8001ea0 <MeasureTempHum+0x118>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fb84 	bl	8000500 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	a329      	add	r3, pc, #164	; (adr r3, 8001ea8 <MeasureTempHum+0x120>)
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	f7fe fca5 	bl	8000754 <__aeabi_ddiv>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f04f 0200 	mov.w	r2, #0
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <MeasureTempHum+0x138>)
 8001e18:	f7fe f9ba 	bl	8000190 <__aeabi_dsub>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe fe2e 	bl	8000a84 <__aeabi_d2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <MeasureTempHum+0x13c>)
 8001e2c:	6013      	str	r3, [r2, #0]
    humidity = -6.0 + 125.0 * (float)th_hword/(float)65535.0;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <MeasureTempHum+0x134>)
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ff2c 	bl	8000c90 <__aeabi_ui2f>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb08 	bl	8000450 <__aeabi_f2d>
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <MeasureTempHum+0x140>)
 8001e46:	f7fe fb5b 	bl	8000500 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	a315      	add	r3, pc, #84	; (adr r3, 8001ea8 <MeasureTempHum+0x120>)
 8001e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e58:	f7fe fc7c 	bl	8000754 <__aeabi_ddiv>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <MeasureTempHum+0x144>)
 8001e6a:	f7fe f991 	bl	8000190 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fe05 	bl	8000a84 <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <MeasureTempHum+0x148>)
 8001e7e:	6013      	str	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(SHT40_addr << 1),(uint8_t*)&SHT40_cmd, 1, 100);
 8001e80:	2344      	movs	r3, #68	; 0x44
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	b299      	uxth	r1, r3
 8001e88:	2364      	movs	r3, #100	; 0x64
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <MeasureTempHum+0x14c>)
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <MeasureTempHum+0x12c>)
 8001e92:	f004 f8fb 	bl	800608c <HAL_I2C_Master_Transmit>
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	4065e000 	.word	0x4065e000
 8001ea8:	00000000 	.word	0x00000000
 8001eac:	40efffe0 	.word	0x40efffe0
 8001eb0:	20000264 	.word	0x20000264
 8001eb4:	200001e8 	.word	0x200001e8
 8001eb8:	2000026a 	.word	0x2000026a
 8001ebc:	2000026c 	.word	0x2000026c
 8001ec0:	40468000 	.word	0x40468000
 8001ec4:	20000258 	.word	0x20000258
 8001ec8:	405f4000 	.word	0x405f4000
 8001ecc:	40180000 	.word	0x40180000
 8001ed0:	2000025c 	.word	0x2000025c
 8001ed4:	0801f07b 	.word	0x0801f07b

08001ed8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
   if (htim == &htim16)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d12c      	bne.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x6a>
   {

      switch(counter){
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b09      	cmp	r3, #9
 8001eee:	d011      	beq.n	8001f14 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	dc12      	bgt.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x42>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_TIM_PeriodElapsedCallback+0x26>
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d004      	beq.n	8001f06 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8001efc:	e00d      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x42>
      case 0:
    	  F2_push(MeasureTempHum);
 8001efe:	4815      	ldr	r0, [pc, #84]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f00:	f000 f8c4 	bl	800208c <F2_push>
    	  break;
 8001f04:	e009      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x42>
      case 1:
    	  F1_push(MeasurePM_sens);
 8001f06:	4814      	ldr	r0, [pc, #80]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f08:	f000 f848 	bl	8001f9c <F1_push>
     	  PM_measure_flag = 1;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
    	  break;
 8001f12:	e002      	b.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x42>
      case 9:
    	  PM_measure_flag = 0;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
      }
      counter++;
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f22:	6013      	str	r3, [r2, #0]


      counter %= 10;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f2a:	fb83 2301 	smull	r2, r3, r3, r1
 8001f2e:	109a      	asrs	r2, r3, #2
 8001f30:	17cb      	asrs	r3, r1, #31
 8001f32:	1ad2      	subs	r2, r2, r3
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	1aca      	subs	r2, r1, r3
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f40:	601a      	str	r2, [r3, #0]
   }
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200003c0 	.word	0x200003c0
 8001f50:	20000260 	.word	0x20000260
 8001f54:	08001d89 	.word	0x08001d89
 8001f58:	08001c7d 	.word	0x08001c7d
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	66666667 	.word	0x66666667

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <Error_Handler+0x8>

08001f6e <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
	...

08001f7c <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  F1_last = 0;
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <F1_QueueIni+0x18>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <F1_QueueIni+0x1c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	2000027c 	.word	0x2000027c
 8001f98:	20000280 	.word	0x20000280

08001f9c <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <F1_push+0x5c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	425a      	negs	r2, r3
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	f002 020f 	and.w	r2, r2, #15
 8001fb4:	bf58      	it	pl
 8001fb6:	4253      	negpl	r3, r2
 8001fb8:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <F1_push+0x60>)
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d101      	bne.n	8001fc4 <F1_push+0x28>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e014      	b.n	8001fee <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <F1_push+0x5c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	490b      	ldr	r1, [pc, #44]	; (8001ff8 <F1_push+0x5c>)
 8001fcc:	600a      	str	r2, [r1, #0]
 8001fce:	490c      	ldr	r1, [pc, #48]	; (8002000 <F1_push+0x64>)
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <F1_push+0x5c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	425a      	negs	r2, r3
 8001fdc:	f003 030f 	and.w	r3, r3, #15
 8001fe0:	f002 020f 	and.w	r2, r2, #15
 8001fe4:	bf58      	it	pl
 8001fe6:	4253      	negpl	r3, r2
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <F1_push+0x5c>)
 8001fea:	6013      	str	r3, [r2, #0]
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	2000027c 	.word	0x2000027c
 8001ffc:	20000280 	.word	0x20000280
 8002000:	20000284 	.word	0x20000284

08002004 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <F1_pull+0x4c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <F1_pull+0x50>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d101      	bne.n	800201a <F1_pull+0x16>
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <F1_pull+0x54>)
 8002018:	e014      	b.n	8002044 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <F1_pull+0x50>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	490c      	ldr	r1, [pc, #48]	; (8002054 <F1_pull+0x50>)
 8002022:	600a      	str	r2, [r1, #0]
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <F1_pull+0x58>)
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <F1_pull+0x50>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	425a      	negs	r2, r3
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	f002 020f 	and.w	r2, r2, #15
 800203a:	bf58      	it	pl
 800203c:	4253      	negpl	r3, r2
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <F1_pull+0x50>)
 8002040:	6013      	str	r3, [r2, #0]
  return pullVar;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	2000027c 	.word	0x2000027c
 8002054:	20000280 	.word	0x20000280
 8002058:	08001f6f 	.word	0x08001f6f
 800205c:	20000284 	.word	0x20000284

08002060 <SimpleF2>:
 // ------ 8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----

 volatile int F2_last; // number of last element of fast-speed queue
 int F2_first; // number of first element of fast-speed queue

 void SimpleF2(){;};
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <F2_QueueIni>:

 void (*F2_Queue[Q_SIZE_FAST])();

 void F2_QueueIni(void){ // initialization of Queue
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
   F2_last = 0;
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <F2_QueueIni+0x18>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
   F2_first = 0;
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <F2_QueueIni+0x1c>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 }
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	200002c4 	.word	0x200002c4
 8002088:	200002c8 	.word	0x200002c8

0800208c <F2_push>:

 int F2_push(void (*pointerQ)(void) ){ // push element from the queue
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
   if ((F2_last+1)%Q_SIZE_FAST == F2_first)return 1;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <F2_push+0x5c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	425a      	negs	r2, r3
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	f002 020f 	and.w	r2, r2, #15
 80020a4:	bf58      	it	pl
 80020a6:	4253      	negpl	r3, r2
 80020a8:	4a10      	ldr	r2, [pc, #64]	; (80020ec <F2_push+0x60>)
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d101      	bne.n	80020b4 <F2_push+0x28>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e014      	b.n	80020de <F2_push+0x52>
   F2_Queue[F2_last++] = pointerQ;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <F2_push+0x5c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	490b      	ldr	r1, [pc, #44]	; (80020e8 <F2_push+0x5c>)
 80020bc:	600a      	str	r2, [r1, #0]
 80020be:	490c      	ldr	r1, [pc, #48]	; (80020f0 <F2_push+0x64>)
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   F2_last%=Q_SIZE_FAST;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <F2_push+0x5c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	425a      	negs	r2, r3
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	f002 020f 	and.w	r2, r2, #15
 80020d4:	bf58      	it	pl
 80020d6:	4253      	negpl	r3, r2
 80020d8:	4a03      	ldr	r2, [pc, #12]	; (80020e8 <F2_push+0x5c>)
 80020da:	6013      	str	r3, [r2, #0]
   return 0;
 80020dc:	2300      	movs	r3, #0
 }
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	200002c4 	.word	0x200002c4
 80020ec:	200002c8 	.word	0x200002c8
 80020f0:	200002cc 	.word	0x200002cc

080020f4 <F2_pull>:

 void (*F2_pull(void))(void){ // pull element from the queue
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
   void (*pullVar)(void);
   if (F2_last == F2_first)return SimpleF2;
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <F2_pull+0x4c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <F2_pull+0x50>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d101      	bne.n	800210a <F2_pull+0x16>
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <F2_pull+0x54>)
 8002108:	e014      	b.n	8002134 <F2_pull+0x40>
   pullVar = F2_Queue[F2_first++];
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <F2_pull+0x50>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <F2_pull+0x50>)
 8002112:	600a      	str	r2, [r1, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <F2_pull+0x58>)
 8002116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211a:	607b      	str	r3, [r7, #4]
   F2_first%=Q_SIZE_FAST;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <F2_pull+0x50>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	425a      	negs	r2, r3
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	f002 020f 	and.w	r2, r2, #15
 800212a:	bf58      	it	pl
 800212c:	4253      	negpl	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <F2_pull+0x50>)
 8002130:	6013      	str	r3, [r2, #0]
   return pullVar;
 8002132:	687b      	ldr	r3, [r7, #4]
 }
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200002c4 	.word	0x200002c4
 8002144:	200002c8 	.word	0x200002c8
 8002148:	08002061 	.word	0x08002061
 800214c:	200002cc 	.word	0x200002cc

08002150 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <LL_APB1_GRP1_EnableClock>:
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08c      	sub	sp, #48	; 0x30
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	222c      	movs	r2, #44	; 0x2c
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f01c fa13 	bl	801e5d8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <MX_RTC_Init+0x9c>)
 80021b4:	4a22      	ldr	r2, [pc, #136]	; (8002240 <MX_RTC_Init+0xa0>)
 80021b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <MX_RTC_Init+0x9c>)
 80021ba:	221f      	movs	r2, #31
 80021bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <MX_RTC_Init+0x9c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <MX_RTC_Init+0x9c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	; (800223c <MX_RTC_Init+0x9c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <MX_RTC_Init+0x9c>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <MX_RTC_Init+0x9c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_RTC_Init+0x9c>)
 80021e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021e6:	4815      	ldr	r0, [pc, #84]	; (800223c <MX_RTC_Init+0x9c>)
 80021e8:	f006 fe84 	bl	8008ef4 <HAL_RTC_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80021f2:	f7ff feb7 	bl	8001f64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80021f6:	4811      	ldr	r0, [pc, #68]	; (800223c <MX_RTC_Init+0x9c>)
 80021f8:	f007 f97a 	bl	80094f0 <HAL_RTCEx_SetSSRU_IT>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002202:	f7ff feaf 	bl	8001f64 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002212:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002216:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <MX_RTC_Init+0x9c>)
 8002226:	f006 fee7 	bl	8008ff8 <HAL_RTC_SetAlarm_IT>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8002230:	f7ff fe98 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	3730      	adds	r7, #48	; 0x30
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	2000030c 	.word	0x2000030c
 8002240:	40002800 	.word	0x40002800

08002244 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b090      	sub	sp, #64	; 0x40
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	2238      	movs	r2, #56	; 0x38
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f01c f9bf 	bl	801e5d8 <memset>
  if(rtcHandle->Instance==RTC)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_RTC_MspInit+0x74>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d125      	bne.n	80022b0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002268:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800226a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002270:	f107 0308 	add.w	r3, r7, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f006 fd23 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002280:	f7ff fe70 	bl	8001f64 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002284:	f7ff ff64 	bl	8002150 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002288:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800228c:	f7ff ff70 	bl	8002170 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2002      	movs	r0, #2
 8002296:	f002 fd32 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800229a:	2002      	movs	r0, #2
 800229c:	f002 fd49 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2100      	movs	r1, #0
 80022a4:	202a      	movs	r0, #42	; 0x2a
 80022a6:	f002 fd2a 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80022aa:	202a      	movs	r0, #42	; 0x2a
 80022ac:	f002 fd41 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022b0:	bf00      	nop
 80022b2:	3740      	adds	r7, #64	; 0x40
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40002800 	.word	0x40002800

080022bc <LL_AHB2_GRP1_EnableClock>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <LL_APB1_GRP1_EnableClock>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4313      	orrs	r3, r2
 8002302:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002310:	68fb      	ldr	r3, [r7, #12]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_SPI2_Init+0x74>)
 8002322:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <MX_SPI2_Init+0x78>)
 8002324:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_SPI2_Init+0x74>)
 8002328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800232c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_SPI2_Init+0x74>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_SPI2_Init+0x74>)
 8002336:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800233a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_SPI2_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_SPI2_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_SPI2_Init+0x74>)
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_SPI2_Init+0x74>)
 8002352:	2218      	movs	r2, #24
 8002354:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_SPI2_Init+0x74>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_SPI2_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <MX_SPI2_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_SPI2_Init+0x74>)
 800236a:	2207      	movs	r2, #7
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <MX_SPI2_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_SPI2_Init+0x74>)
 8002376:	2208      	movs	r2, #8
 8002378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_SPI2_Init+0x74>)
 800237c:	f007 f946 	bl	800960c <HAL_SPI_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002386:	f7ff fded 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000344 	.word	0x20000344
 8002394:	40003800 	.word	0x40003800

08002398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b096      	sub	sp, #88	; 0x58
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b0:	f107 030c 	add.w	r3, r7, #12
 80023b4:	2238      	movs	r2, #56	; 0x38
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f01c f90d 	bl	801e5d8 <memset>
  if(spiHandle->Instance==SPI2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <HAL_SPI_MspInit+0xb0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d13b      	bne.n	8002440 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 80023c8:	2310      	movs	r3, #16
 80023ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	4618      	mov	r0, r3
 80023d8:	f006 fc72 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80023e2:	f7ff fdbf 	bl	8001f64 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80023ea:	f7ff ff7f 	bl	80022ec <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2002      	movs	r0, #2
 80023f0:	f7ff ff64 	bl	80022bc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7ff ff61 	bl	80022bc <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80023fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800240c:	2305      	movs	r3, #5
 800240e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002414:	4619      	mov	r1, r3
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <HAL_SPI_MspInit+0xb4>)
 8002418:	f003 fb4a 	bl	8005ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800241c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800242e:	2305      	movs	r3, #5
 8002430:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243c:	f003 fb38 	bl	8005ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002440:	bf00      	nop
 8002442:	3758      	adds	r7, #88	; 0x58
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40003800 	.word	0x40003800
 800244c:	48000400 	.word	0x48000400

08002450 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8002456:	2201      	movs	r2, #1
 8002458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	58000400 	.word	0x58000400

08002468 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002484:	f001 faa8 	bl	80039d8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002488:	f7ff ffe2 	bl	8002450 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800248c:	2001      	movs	r0, #1
 800248e:	f005 fa39 	bl	8007904 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}

08002496 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800249a:	f001 faab 	bl	80039f4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800249e:	f001 f91f 	bl	80036e0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80024aa:	f001 fa95 	bl	80039d8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80024ae:	2101      	movs	r1, #1
 80024b0:	2000      	movs	r0, #0
 80024b2:	f005 f9a3 	bl	80077fc <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}

080024ba <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80024be:	f001 fa99 	bl	80039f4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <NMI_Handler+0x4>

080024d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <HardFault_Handler+0x4>

080024de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <MemManage_Handler+0x4>

080024e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <BusFault_Handler+0x4>

080024ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <UsageFault_Handler+0x4>

080024f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8002526:	f007 f81f 	bl	8009568 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000030c 	.word	0x2000030c

08002534 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA1_Channel1_IRQHandler+0x10>)
 800253a:	f002 fe91 	bl	8005260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000588 	.word	0x20000588

08002548 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA1_Channel2_IRQHandler+0x10>)
 800254e:	f002 fe87 	bl	8005260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200005e8 	.word	0x200005e8

0800255c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */
	static int counter = 0;
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002560:	4804      	ldr	r0, [pc, #16]	; (8002574 <TIM16_IRQHandler+0x18>)
 8002562:	f007 fe85 	bl	800a270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */
  counter++;
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <TIM16_IRQHandler+0x1c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <TIM16_IRQHandler+0x1c>)
 800256e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM16_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200003c0 	.word	0x200003c0
 8002578:	200003a8 	.word	0x200003a8

0800257c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */
static int counter = 0;
  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002580:	4804      	ldr	r0, [pc, #16]	; (8002594 <TIM17_IRQHandler+0x18>)
 8002582:	f007 fe75 	bl	800a270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */
  counter++;
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <TIM17_IRQHandler+0x1c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	4a02      	ldr	r2, [pc, #8]	; (8002598 <TIM17_IRQHandler+0x1c>)
 800258e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM17_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	2000040c 	.word	0x2000040c
 8002598:	200003ac 	.word	0x200003ac

0800259c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <I2C2_EV_IRQHandler+0x10>)
 80025a2:	f004 f877 	bl	8006694 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200001e8 	.word	0x200001e8

080025b0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <I2C2_ER_IRQHandler+0x10>)
 80025b6:	f004 f887 	bl	80066c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200001e8 	.word	0x200001e8

080025c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <USART1_IRQHandler+0x10>)
 80025ca:	f008 f94f 	bl	800a86c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000460 	.word	0x20000460

080025d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <USART2_IRQHandler+0x10>)
 80025de:	f008 f945 	bl	800a86c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200004f4 	.word	0x200004f4

080025ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <RTC_Alarm_IRQHandler+0x10>)
 80025f2:	f006 fe69 	bl	80092c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000030c 	.word	0x2000030c

08002600 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002606:	f007 fbf1 	bl	8009dec <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200003b0 	.word	0x200003b0

08002614 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <DMAMUX1_OVR_IRQHandler+0x10>)
 800261a:	f002 ffdd 	bl	80055d8 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200005e8 	.word	0x200005e8

08002628 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4313      	orrs	r3, r2
 800263e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4013      	ands	r3, r2
 800264a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800264c:	68fb      	ldr	r3, [r7, #12]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_SUBGHZ_Init+0x20>)
 800265e:	2208      	movs	r2, #8
 8002660:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_SUBGHZ_Init+0x20>)
 8002664:	f007 f940 	bl	80098e8 <HAL_SUBGHZ_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800266e:	f7ff fc79 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	200003b0 	.word	0x200003b0

0800267c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff ffcf 	bl	8002628 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800268a:	2200      	movs	r2, #0
 800268c:	2100      	movs	r1, #0
 800268e:	2032      	movs	r0, #50	; 0x32
 8002690:	f002 fb35 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002694:	2032      	movs	r0, #50	; 0x32
 8002696:	f002 fb4c 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800269a:	bf00      	nop
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80026cc:	4b02      	ldr	r3, [pc, #8]	; (80026d8 <LL_FLASH_GetUDN+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	1fff7580 	.word	0x1fff7580

080026dc <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <LL_FLASH_GetDeviceID+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b2db      	uxtb	r3, r3
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	1fff7584 	.word	0x1fff7584

080026f4 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <LL_FLASH_GetSTCompanyID+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0a1b      	lsrs	r3, r3, #8
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	1fff7584 	.word	0x1fff7584

0800270c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002710:	2000      	movs	r0, #0
 8002712:	f7ff ffc6 	bl	80026a2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002716:	f01b fa29 	bl	801db6c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <SystemApp_Init+0x50>)
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002720:	f000 f98c 	bl	8002a3c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002724:	f01b fcb2 	bl	801e08c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <SystemApp_Init+0x54>)
 800272a:	f01b fd5d 	bl	801e1e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800272e:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <SystemApp_Init+0x58>)
 8002730:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002734:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002736:	2002      	movs	r0, #2
 8002738:	f01b fd64 	bl	801e204 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800273c:	f7fe fd88 	bl	8001250 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002740:	f000 f9b4 	bl	8002aac <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002744:	f01a fbde 	bl	801cf04 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002748:	2101      	movs	r1, #1
 800274a:	2001      	movs	r0, #1
 800274c:	f01a fc1a 	bl	801cf84 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002750:	2101      	movs	r1, #1
 8002752:	2001      	movs	r0, #1
 8002754:	f01a fbe6 	bl	801cf24 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200003bc 	.word	0x200003bc
 8002760:	08002935 	.word	0x08002935
 8002764:	58004000 	.word	0x58004000

08002768 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 800276c:	f01a fc3a 	bl	801cfe4 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}

08002774 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800277e:	f7fe fd75 	bl	800126c <SYS_GetBatteryLevel>
 8002782:	4603      	mov	r3, r0
 8002784:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002786:	88bb      	ldrh	r3, [r7, #4]
 8002788:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800278c:	4293      	cmp	r3, r2
 800278e:	d902      	bls.n	8002796 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002790:	23fe      	movs	r3, #254	; 0xfe
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	e014      	b.n	80027c0 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800279c:	d202      	bcs.n	80027a4 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	71fb      	strb	r3, [r7, #7]
 80027a2:	e00d      	b.n	80027c0 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80027a4:	88bb      	ldrh	r3, [r7, #4]
 80027a6:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80027aa:	461a      	mov	r2, r3
 80027ac:	4613      	mov	r3, r2
 80027ae:	01db      	lsls	r3, r3, #7
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <GetBatteryLevel+0x58>)
 80027b8:	fba3 2302 	umull	r2, r3, r3, r2
 80027bc:	09db      	lsrs	r3, r3, #7
 80027be:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80027c0:	79fb      	ldrb	r3, [r7, #7]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	1b4e81b5 	.word	0x1b4e81b5

080027d0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f93b 	bl	8002a58 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe faab 	bl	8000d40 <__aeabi_f2iz>
 80027ea:	4603      	mov	r3, r0
 80027ec:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80027ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80027fa:	b590      	push	{r4, r7, lr}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002806:	f7ff ff5f 	bl	80026c8 <LL_FLASH_GetUDN>
 800280a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d138      	bne.n	8002886 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002814:	f001 f8fc 	bl	8003a10 <HAL_GetUIDw0>
 8002818:	4604      	mov	r4, r0
 800281a:	f001 f90d 	bl	8003a38 <HAL_GetUIDw2>
 800281e:	4603      	mov	r3, r0
 8002820:	4423      	add	r3, r4
 8002822:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002824:	f001 f8fe 	bl	8003a24 <HAL_GetUIDw1>
 8002828:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	0e1a      	lsrs	r2, r3, #24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3307      	adds	r3, #7
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	0c1a      	lsrs	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3306      	adds	r3, #6
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	0a1a      	lsrs	r2, r3, #8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3305      	adds	r3, #5
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	0e1a      	lsrs	r2, r3, #24
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3303      	adds	r3, #3
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0c1a      	lsrs	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3302      	adds	r3, #2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	0a1a      	lsrs	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3301      	adds	r3, #1
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002884:	e031      	b.n	80028ea <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3307      	adds	r3, #7
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	0a1a      	lsrs	r2, r3, #8
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3306      	adds	r3, #6
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	0c1a      	lsrs	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3305      	adds	r3, #5
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	0e1a      	lsrs	r2, r3, #24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80028b4:	f7ff ff12 	bl	80026dc <LL_FLASH_GetDeviceID>
 80028b8:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3303      	adds	r3, #3
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80028c4:	f7ff ff16 	bl	80026f4 <LL_FLASH_GetSTCompanyID>
 80028c8:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3302      	adds	r3, #2
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	0a1a      	lsrs	r2, r3, #8
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3301      	adds	r3, #1
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	701a      	strb	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}

080028f2 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80028f2:	b590      	push	{r4, r7, lr}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80028fa:	f7ff fee5 	bl	80026c8 <LL_FLASH_GetUDN>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d10d      	bne.n	800292a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800290e:	f001 f87f 	bl	8003a10 <HAL_GetUIDw0>
 8002912:	4604      	mov	r4, r0
 8002914:	f001 f886 	bl	8003a24 <HAL_GetUIDw1>
 8002918:	4603      	mov	r3, r0
 800291a:	405c      	eors	r4, r3
 800291c:	f001 f88c 	bl	8003a38 <HAL_GetUIDw2>
 8002920:	4603      	mov	r3, r0
 8002922:	ea84 0203 	eor.w	r2, r4, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
	...

08002934 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800293e:	f107 0308 	add.w	r3, r7, #8
 8002942:	4618      	mov	r0, r3
 8002944:	f01a fc5e 	bl	801d204 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800294e:	9200      	str	r2, [sp, #0]
 8002950:	4a07      	ldr	r2, [pc, #28]	; (8002970 <TimestampNow+0x3c>)
 8002952:	2110      	movs	r1, #16
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f81d 	bl	8002994 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fd fc0c 	bl	8000178 <strlen>
 8002960:	4603      	mov	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	0801e818 	.word	0x0801e818

08002974 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002978:	2101      	movs	r1, #1
 800297a:	2002      	movs	r0, #2
 800297c:	f01a fad2 	bl	801cf24 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002988:	2100      	movs	r1, #0
 800298a:	2002      	movs	r0, #2
 800298c:	f01a faca 	bl	801cf24 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}

08002994 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002994:	b40c      	push	{r2, r3}
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f01a fdfb 	bl	801d5a8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029bc:	b002      	add	sp, #8
 80029be:	4770      	bx	lr

080029c0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_GetTick+0x24>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80029e6:	f000 f9dd 	bl	8002da4 <TIMER_IF_GetTimerValue>
 80029ea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80029ec:	687b      	ldr	r3, [r7, #4]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200003bc 	.word	0x200003bc

080029fc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa53 	bl	8002eb2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <LL_EXTI_EnableIT_32_63+0x24>)
 8002a1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002a22:	4905      	ldr	r1, [pc, #20]	; (8002a38 <LL_EXTI_EnableIT_32_63+0x24>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	58000800 	.word	0x58000800

08002a3c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002a40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a44:	f7ff ffe6 	bl	8002a14 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002a48:	f001 f800 	bl	8003a4c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002a4c:	f001 f804 	bl	8003a58 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002a50:	f001 f808 	bl	8003a64 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <EnvSensors_Read+0x40>)
 8002a62:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <EnvSensors_Read+0x44>)
 8002a66:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002a68:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <EnvSensors_Read+0x48>)
 8002a6a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <EnvSensors_Read+0x4c>)
 8002a82:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <EnvSensors_Read+0x50>)
 8002a88:	611a      	str	r2, [r3, #16]

  return 0;
 8002a8a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	42480000 	.word	0x42480000
 8002a9c:	41900000 	.word	0x41900000
 8002aa0:	447a0000 	.word	0x447a0000
 8002aa4:	003e090d 	.word	0x003e090d
 8002aa8:	000503ab 	.word	0x000503ab

08002aac <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002ab6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <LL_APB2_GRP1_EnableClock>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <MX_TIM16_Init+0x64>)
 8002b08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b10:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b1a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002b1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <MX_TIM16_Init+0x60>)
 8002b34:	f007 faf8 	bl	800a128 <HAL_TIM_Base_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002b3e:	f7ff fa11 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8002b42:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002b46:	f7ff ffc2 	bl	8002ace <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	201c      	movs	r0, #28
 8002b50:	f002 f8d5 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002b54:	201c      	movs	r0, #28
 8002b56:	f002 f8ec 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM16_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200003c0 	.word	0x200003c0
 8002b64:	40014400 	.word	0x40014400

08002b68 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002b6c:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <MX_TIM17_Init+0x60>)
 8002b70:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b84:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b92:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <MX_TIM17_Init+0x5c>)
 8002b9a:	f007 fac5 	bl	800a128 <HAL_TIM_Base_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002ba4:	f7ff f9de 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */
  /* TIM16 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8002ba8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bac:	f7ff ff8f 	bl	8002ace <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	201d      	movs	r0, #29
 8002bb6:	f002 f8a2 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002bba:	201d      	movs	r0, #29
 8002bbc:	f002 f8b9 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM17_Init 2 */

}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000040c 	.word	0x2000040c
 8002bc8:	40014800 	.word	0x40014800

08002bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a12      	ldr	r2, [pc, #72]	; (8002c24 <HAL_TIM_Base_MspInit+0x58>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002bde:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002be2:	f7ff ff74 	bl	8002ace <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	201c      	movs	r0, #28
 8002bec:	f002 f887 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002bf0:	201c      	movs	r0, #28
 8002bf2:	f002 f89e 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002bf6:	e010      	b.n	8002c1a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM17)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <HAL_TIM_Base_MspInit+0x5c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10b      	bne.n	8002c1a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c02:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002c06:	f7ff ff62 	bl	8002ace <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	201d      	movs	r0, #29
 8002c10:	f002 f875 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002c14:	201d      	movs	r0, #29
 8002c16:	f002 f88c 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40014400 	.word	0x40014400
 8002c28:	40014800 	.word	0x40014800

08002c2c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <TIMER_IF_Init+0x5c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f083 0301 	eor.w	r3, r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <TIMER_IF_Init+0x60>)
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002c64:	f7ff fa9c 	bl	80021a0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002c68:	f000 f856 	bl	8002d18 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c70:	480c      	ldr	r0, [pc, #48]	; (8002ca4 <TIMER_IF_Init+0x60>)
 8002c72:	f006 facd 	bl	8009210 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <TIMER_IF_Init+0x60>)
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002c7e:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <TIMER_IF_Init+0x60>)
 8002c80:	f006 fc04 	bl	800948c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002c84:	2000      	movs	r0, #0
 8002c86:	f000 f9d3 	bl	8003030 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002c8a:	f000 f85f 	bl	8002d4c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <TIMER_IF_Init+0x5c>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002c94:	79fb      	ldrb	r3, [r7, #7]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000458 	.word	0x20000458
 8002ca4:	2000030c 	.word	0x2000030c

08002ca8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	222c      	movs	r2, #44	; 0x2c
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f01b fc8a 	bl	801e5d8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002cc4:	f000 f828 	bl	8002d18 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <TIMER_IF_StartTimer+0x68>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002ce0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002ce4:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cec:	f107 0308 	add.w	r3, r7, #8
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4807      	ldr	r0, [pc, #28]	; (8002d14 <TIMER_IF_StartTimer+0x6c>)
 8002cf6:	f006 f97f 	bl	8008ff8 <HAL_RTC_SetAlarm_IT>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002d00:	f7ff f930 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3738      	adds	r7, #56	; 0x38
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	2000045c 	.word	0x2000045c
 8002d14:	2000030c 	.word	0x2000030c

08002d18 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <TIMER_IF_StopTimer+0x2c>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d2c:	4806      	ldr	r0, [pc, #24]	; (8002d48 <TIMER_IF_StopTimer+0x30>)
 8002d2e:	f006 fa6f 	bl	8009210 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <TIMER_IF_StopTimer+0x30>)
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40002800 	.word	0x40002800
 8002d48:	2000030c 	.word	0x2000030c

08002d4c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002d50:	f000 f98e 	bl	8003070 <GetTimerTicks>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <TIMER_IF_SetTimerContext+0x18>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002d5a:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <TIMER_IF_SetTimerContext+0x18>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	2000045c 	.word	0x2000045c

08002d68 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <TIMER_IF_GetTimerContext+0x10>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	2000045c 	.word	0x2000045c

08002d7c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002d86:	f000 f973 	bl	8003070 <GetTimerTicks>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002d94:	687b      	ldr	r3, [r7, #4]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000045c 	.word	0x2000045c

08002da4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <TIMER_IF_GetTimerValue+0x24>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002db6:	f000 f95b 	bl	8003070 <GetTimerTicks>
 8002dba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	20000458 	.word	0x20000458

08002dcc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002dda:	687b      	ldr	r3, [r7, #4]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002de6:	b5b0      	push	{r4, r5, r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002dee:	2100      	movs	r1, #0
 8002df0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	2000      	movs	r0, #0
 8002df6:	460a      	mov	r2, r1
 8002df8:	4603      	mov	r3, r0
 8002dfa:	0d95      	lsrs	r5, r2, #22
 8002dfc:	0294      	lsls	r4, r2, #10
 8002dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	4620      	mov	r0, r4
 8002e08:	4629      	mov	r1, r5
 8002e0a:	f7fd ffbf 	bl	8000d8c <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4613      	mov	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002e16:	68fb      	ldr	r3, [r7, #12]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bdb0      	pop	{r4, r5, r7, pc}

08002e20 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002e20:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	2000      	movs	r0, #0
 8002e32:	460c      	mov	r4, r1
 8002e34:	4605      	mov	r5, r0
 8002e36:	4620      	mov	r0, r4
 8002e38:	4629      	mov	r1, r5
 8002e3a:	f04f 0a00 	mov.w	sl, #0
 8002e3e:	f04f 0b00 	mov.w	fp, #0
 8002e42:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002e46:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002e4a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002e4e:	4650      	mov	r0, sl
 8002e50:	4659      	mov	r1, fp
 8002e52:	1b02      	subs	r2, r0, r4
 8002e54:	eb61 0305 	sbc.w	r3, r1, r5
 8002e58:	f04f 0000 	mov.w	r0, #0
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	0099      	lsls	r1, r3, #2
 8002e62:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002e66:	0090      	lsls	r0, r2, #2
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	eb12 0804 	adds.w	r8, r2, r4
 8002e70:	eb43 0905 	adc.w	r9, r3, r5
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e88:	4690      	mov	r8, r2
 8002e8a:	4699      	mov	r9, r3
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	0a82      	lsrs	r2, r0, #10
 8002e9a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002e9e:	0a8b      	lsrs	r3, r1, #10
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002eb0:	4770      	bx	lr

08002eb2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff93 	bl	8002de6 <TIMER_IF_Convert_ms2Tick>
 8002ec0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ec2:	f000 f8d5 	bl	8003070 <GetTimerTicks>
 8002ec6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ec8:	e000      	b.n	8002ecc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002eca:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ecc:	f000 f8d0 	bl	8003070 <GetTimerTicks>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f6      	bhi.n	8002eca <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002eee:	f01a ff8b 	bl	801de08 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002f02:	f000 f8a5 	bl	8003050 <TIMER_IF_BkUp_Read_MSBticks>
 8002f06:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f88f 	bl	8003030 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002f1a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002f28:	f000 f8a2 	bl	8003070 <GetTimerTicks>
 8002f2c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002f2e:	f000 f88f 	bl	8003050 <TIMER_IF_BkUp_Read_MSBticks>
 8002f32:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	2200      	movs	r2, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	60fa      	str	r2, [r7, #12]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	000b      	movs	r3, r1
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	4605      	mov	r5, r0
 8002f52:	eb12 0804 	adds.w	r8, r2, r4
 8002f56:	eb43 0905 	adc.w	r9, r3, r5
 8002f5a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002f5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	0a82      	lsrs	r2, r0, #10
 8002f6c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002f70:	0a8b      	lsrs	r3, r1, #10
 8002f72:	4613      	mov	r3, r2
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002f84:	f04f 0b00 	mov.w	fp, #0
 8002f88:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff ff46 	bl	8002e20 <TIMER_IF_Convert_Tick2ms>
 8002f94:	4603      	mov	r3, r0
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3730      	adds	r7, #48	; 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fa8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4803      	ldr	r0, [pc, #12]	; (8002fc4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002fb6:	f006 fafb 	bl	80095b0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000030c 	.word	0x2000030c

08002fc8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002fd6:	f006 faeb 	bl	80095b0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000030c 	.word	0x2000030c

08002fe8 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4804      	ldr	r0, [pc, #16]	; (8003008 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002ff6:	f006 faf3 	bl	80095e0 <HAL_RTCEx_BKUPRead>
 8002ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002ffc:	687b      	ldr	r3, [r7, #4]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2000030c 	.word	0x2000030c

0800300c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003016:	2101      	movs	r1, #1
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800301a:	f006 fae1 	bl	80095e0 <HAL_RTCEx_BKUPRead>
 800301e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8003020:	687b      	ldr	r3, [r7, #4]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000030c 	.word	0x2000030c

08003030 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	2102      	movs	r1, #2
 800303c:	4803      	ldr	r0, [pc, #12]	; (800304c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800303e:	f006 fab7 	bl	80095b0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2000030c 	.word	0x2000030c

08003050 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8003056:	2102      	movs	r1, #2
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800305a:	f006 fac1 	bl	80095e0 <HAL_RTCEx_BKUPRead>
 800305e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8003060:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	2000030c 	.word	0x2000030c

08003070 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003076:	480b      	ldr	r0, [pc, #44]	; (80030a4 <GetTimerTicks+0x34>)
 8003078:	f7ff fdd8 	bl	8002c2c <LL_RTC_TIME_GetSubSecond>
 800307c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800307e:	e003      	b.n	8003088 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8003080:	4808      	ldr	r0, [pc, #32]	; (80030a4 <GetTimerTicks+0x34>)
 8003082:	f7ff fdd3 	bl	8002c2c <LL_RTC_TIME_GetSubSecond>
 8003086:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8003088:	4806      	ldr	r0, [pc, #24]	; (80030a4 <GetTimerTicks+0x34>)
 800308a:	f7ff fdcf 	bl	8002c2c <LL_RTC_TIME_GetSubSecond>
 800308e:	4602      	mov	r2, r0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4293      	cmp	r3, r2
 8003094:	d1f4      	bne.n	8003080 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40002800 	.word	0x40002800

080030a8 <LL_AHB2_GRP1_EnableClock>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4313      	orrs	r3, r2
 80030be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030cc:	68fb      	ldr	r3, [r7, #12]
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <LL_APB1_GRP1_EnableClock>:
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <LL_APB1_GRP1_DisableClock>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	43db      	mvns	r3, r3
 800311a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311e:	4013      	ands	r3, r2
 8003120:	658b      	str	r3, [r1, #88]	; 0x58
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <LL_APB2_GRP1_EnableClock>:
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800313a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4013      	ands	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003150:	68fb      	ldr	r3, [r7, #12]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <LL_APB2_GRP1_DisableClock>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	43db      	mvns	r3, r3
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003172:	4013      	ands	r3, r2
 8003174:	660b      	str	r3, [r1, #96]	; 0x60
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <LL_SYSCFG_EnableFastModePlus>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4904      	ldr	r1, [pc, #16]	; (80031a0 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000

080031a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031a8:	4b26      	ldr	r3, [pc, #152]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031aa:	4a27      	ldr	r2, [pc, #156]	; (8003248 <MX_USART1_UART_Init+0xa4>)
 80031ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031b6:	4b23      	ldr	r3, [pc, #140]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031ca:	220c      	movs	r2, #12
 80031cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ce:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031e0:	4b18      	ldr	r3, [pc, #96]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 80031e6:	4b17      	ldr	r3, [pc, #92]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031e8:	2240      	movs	r2, #64	; 0x40
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031fa:	4812      	ldr	r0, [pc, #72]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 80031fc:	f007 fa1a 	bl	800a634 <HAL_UART_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8003206:	f7fe fead 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800320a:	2100      	movs	r1, #0
 800320c:	480d      	ldr	r0, [pc, #52]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 800320e:	f009 fb74 	bl	800c8fa <HAL_UARTEx_SetTxFifoThreshold>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003218:	f7fe fea4 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800321c:	2100      	movs	r1, #0
 800321e:	4809      	ldr	r0, [pc, #36]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 8003220:	f009 fba9 	bl	800c976 <HAL_UARTEx_SetRxFifoThreshold>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800322a:	f7fe fe9b 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <MX_USART1_UART_Init+0xa0>)
 8003230:	f009 faf0 	bl	800c814 <HAL_UARTEx_EnableFifoMode>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800323a:	f7fe fe93 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000460 	.word	0x20000460
 8003248:	40013800 	.word	0x40013800

0800324c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003250:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <MX_USART2_UART_Init+0x98>)
 8003254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003258:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800325c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003264:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003272:	220c      	movs	r2, #12
 8003274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003276:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 800327e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003282:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003284:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003286:	2200      	movs	r2, #0
 8003288:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 800328c:	2200      	movs	r2, #0
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003290:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003292:	2200      	movs	r2, #0
 8003294:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003296:	4812      	ldr	r0, [pc, #72]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 8003298:	f007 f9cc 	bl	800a634 <HAL_UART_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80032a2:	f7fe fe5f 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a6:	2100      	movs	r1, #0
 80032a8:	480d      	ldr	r0, [pc, #52]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 80032aa:	f009 fb26 	bl	800c8fa <HAL_UARTEx_SetTxFifoThreshold>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80032b4:	f7fe fe56 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032b8:	2100      	movs	r1, #0
 80032ba:	4809      	ldr	r0, [pc, #36]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 80032bc:	f009 fb5b 	bl	800c976 <HAL_UARTEx_SetRxFifoThreshold>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80032c6:	f7fe fe4d 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_USART2_UART_Init+0x94>)
 80032cc:	f009 fadd 	bl	800c88a <HAL_UARTEx_DisableFifoMode>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80032d6:	f7fe fe45 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200004f4 	.word	0x200004f4
 80032e4:	40004400 	.word	0x40004400

080032e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b09a      	sub	sp, #104	; 0x68
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	2238      	movs	r2, #56	; 0x38
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f01b f95e 	bl	801e5d8 <memset>
  if(uartHandle->Instance==USART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a6f      	ldr	r2, [pc, #444]	; (80034e0 <HAL_UART_MspInit+0x1f8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f040 80a4 	bne.w	8003470 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003328:	2301      	movs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800332c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003330:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4618      	mov	r0, r3
 8003338:	f005 fcc2 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8003342:	f7fe fe0f 	bl	8001f64 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003346:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800334a:	f7ff feef 	bl	800312c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334e:	2002      	movs	r0, #2
 8003350:	f7ff feaa 	bl	80030a8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003354:	23c0      	movs	r3, #192	; 0xc0
 8003356:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800335c:	2301      	movs	r3, #1
 800335e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003360:	2301      	movs	r3, #1
 8003362:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003364:	2307      	movs	r3, #7
 8003366:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003368:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800336c:	4619      	mov	r1, r3
 800336e:	485d      	ldr	r0, [pc, #372]	; (80034e4 <HAL_UART_MspInit+0x1fc>)
 8003370:	f002 fb9e 	bl	8005ab0 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003374:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003378:	f7ff ff02 	bl	8003180 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 800337c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003380:	f7ff fefe 	bl	8003180 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8003384:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_UART_MspInit+0x200>)
 8003386:	4a59      	ldr	r2, [pc, #356]	; (80034ec <HAL_UART_MspInit+0x204>)
 8003388:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800338a:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <HAL_UART_MspInit+0x200>)
 800338c:	2212      	movs	r2, #18
 800338e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003390:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <HAL_UART_MspInit+0x200>)
 8003392:	2210      	movs	r2, #16
 8003394:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003396:	4b54      	ldr	r3, [pc, #336]	; (80034e8 <HAL_UART_MspInit+0x200>)
 8003398:	2200      	movs	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_UART_MspInit+0x200>)
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033ae:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033ba:	484b      	ldr	r0, [pc, #300]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033bc:	f001 fcd6 	bl	8004d6c <HAL_DMA_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 80033c6:	f7fe fdcd 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a46      	ldr	r2, [pc, #280]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80033d0:	4a45      	ldr	r2, [pc, #276]	; (80034e8 <HAL_UART_MspInit+0x200>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033d8:	4a46      	ldr	r2, [pc, #280]	; (80034f4 <HAL_UART_MspInit+0x20c>)
 80033da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80033dc:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033de:	2211      	movs	r2, #17
 80033e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e8:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033ee:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f4:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_UART_MspInit+0x208>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003400:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_UART_MspInit+0x208>)
 8003402:	2200      	movs	r2, #0
 8003404:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_UART_MspInit+0x208>)
 8003408:	2200      	movs	r2, #0
 800340a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800340c:	4838      	ldr	r0, [pc, #224]	; (80034f0 <HAL_UART_MspInit+0x208>)
 800340e:	f001 fcad 	bl	8004d6c <HAL_DMA_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003418:	f7fe fda4 	bl	8001f64 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 800341c:	2300      	movs	r3, #0
 800341e:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003420:	2300      	movs	r3, #0
 8003422:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003430:	2301      	movs	r3, #1
 8003432:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003434:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003438:	4619      	mov	r1, r3
 800343a:	482d      	ldr	r0, [pc, #180]	; (80034f0 <HAL_UART_MspInit+0x208>)
 800343c:	f002 f88c 	bl	8005558 <HAL_DMAEx_ConfigMuxSync>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003446:	f7fe fd8d 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a28      	ldr	r2, [pc, #160]	; (80034f0 <HAL_UART_MspInit+0x208>)
 800344e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003452:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <HAL_UART_MspInit+0x208>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2102      	movs	r1, #2
 800345c:	2024      	movs	r0, #36	; 0x24
 800345e:	f001 fc4e 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003462:	2024      	movs	r0, #36	; 0x24
 8003464:	f001 fc65 	bl	8004d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003468:	200c      	movs	r0, #12
 800346a:	f001 fc62 	bl	8004d32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800346e:	e033      	b.n	80034d8 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <HAL_UART_MspInit+0x210>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12e      	bne.n	80034d8 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800347a:	2302      	movs	r3, #2
 800347c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800347e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8003482:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	4618      	mov	r0, r3
 800348a:	f005 fc19 	bl	8008cc0 <HAL_RCCEx_PeriphCLKConfig>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8003494:	f7fe fd66 	bl	8001f64 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003498:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800349c:	f7ff fe1c 	bl	80030d8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	2001      	movs	r0, #1
 80034a2:	f7ff fe01 	bl	80030a8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80034a6:	230c      	movs	r3, #12
 80034a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ae:	2301      	movs	r3, #1
 80034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034b2:	2301      	movs	r3, #1
 80034b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034b6:	2307      	movs	r3, #7
 80034b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034be:	4619      	mov	r1, r3
 80034c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c4:	f002 faf4 	bl	8005ab0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	2025      	movs	r0, #37	; 0x25
 80034ce:	f001 fc16 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034d2:	2025      	movs	r0, #37	; 0x25
 80034d4:	f001 fc2d 	bl	8004d32 <HAL_NVIC_EnableIRQ>
}
 80034d8:	bf00      	nop
 80034da:	3768      	adds	r7, #104	; 0x68
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40013800 	.word	0x40013800
 80034e4:	48000400 	.word	0x48000400
 80034e8:	20000588 	.word	0x20000588
 80034ec:	40020008 	.word	0x40020008
 80034f0:	200005e8 	.word	0x200005e8
 80034f4:	4002001c 	.word	0x4002001c
 80034f8:	40004400 	.word	0x40004400

080034fc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a17      	ldr	r2, [pc, #92]	; (8003568 <HAL_UART_MspDeInit+0x6c>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d116      	bne.n	800353c <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800350e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003512:	f7ff fe23 	bl	800315c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003516:	21c0      	movs	r1, #192	; 0xc0
 8003518:	4814      	ldr	r0, [pc, #80]	; (800356c <HAL_UART_MspDeInit+0x70>)
 800351a:	f002 fc29 	bl	8005d70 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fcca 	bl	8004ebc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	4618      	mov	r0, r3
 8003530:	f001 fcc4 	bl	8004ebc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003534:	2024      	movs	r0, #36	; 0x24
 8003536:	f001 fc0a 	bl	8004d4e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800353a:	e010      	b.n	800355e <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0b      	ldr	r2, [pc, #44]	; (8003570 <HAL_UART_MspDeInit+0x74>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10b      	bne.n	800355e <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003546:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800354a:	f7ff fddd 	bl	8003108 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800354e:	210c      	movs	r1, #12
 8003550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003554:	f002 fc0c 	bl	8005d70 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003558:	2025      	movs	r0, #37	; 0x25
 800355a:	f001 fbf8 	bl	8004d4e <HAL_NVIC_DisableIRQ>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40013800 	.word	0x40013800
 800356c:	48000400 	.word	0x48000400
 8003570:	40004400 	.word	0x40004400

08003574 <LL_APB2_GRP1_ForceReset>:
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4313      	orrs	r3, r2
 800358a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <LL_APB2_GRP1_ReleaseReset>:
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ac:	4013      	ands	r3, r2
 80035ae:	640b      	str	r3, [r1, #64]	; 0x40
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
	...

080035bc <LL_EXTI_EnableIT_0_31>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80035c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80035ca:	4905      	ldr	r1, [pc, #20]	; (80035e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	58000800 	.word	0x58000800

080035e4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <vcom_Init+0x28>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80035f2:	f7fd fecd 	bl	8001390 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80035f6:	f7ff fdd5 	bl	80031a4 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80035fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80035fe:	f7ff ffdd 	bl	80035bc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003602:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2000064c 	.word	0x2000064c

08003610 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003614:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003618:	f7ff ffac 	bl	8003574 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 800361c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003620:	f7ff ffb9 	bl	8003596 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003624:	4804      	ldr	r0, [pc, #16]	; (8003638 <vcom_DeInit+0x28>)
 8003626:	f7ff ff69 	bl	80034fc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800362a:	200f      	movs	r0, #15
 800362c:	f001 fb8f 	bl	8004d4e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003630:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000460 	.word	0x20000460

0800363c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	461a      	mov	r2, r3
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4804      	ldr	r0, [pc, #16]	; (8003660 <vcom_Trace_DMA+0x24>)
 8003650:	f007 f88c 	bl	800a76c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003654:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000460 	.word	0x20000460

08003664 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <vcom_ReceiveInit+0x70>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003672:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003676:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003678:	f107 0308 	add.w	r3, r7, #8
 800367c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003680:	4815      	ldr	r0, [pc, #84]	; (80036d8 <vcom_ReceiveInit+0x74>)
 8003682:	f009 f83a 	bl	800c6fa <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003686:	bf00      	nop
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <vcom_ReceiveInit+0x74>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003696:	d0f7      	beq.n	8003688 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003698:	bf00      	nop
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <vcom_ReceiveInit+0x74>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a8:	d1f7      	bne.n	800369a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <vcom_ReceiveInit+0x74>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <vcom_ReceiveInit+0x74>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80036b8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80036ba:	4807      	ldr	r0, [pc, #28]	; (80036d8 <vcom_ReceiveInit+0x74>)
 80036bc:	f009 f878 	bl	800c7b0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 80036c0:	2201      	movs	r2, #1
 80036c2:	4906      	ldr	r1, [pc, #24]	; (80036dc <vcom_ReceiveInit+0x78>)
 80036c4:	4804      	ldr	r0, [pc, #16]	; (80036d8 <vcom_ReceiveInit+0x74>)
 80036c6:	f007 f805 	bl	800a6d4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80036ca:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000650 	.word	0x20000650
 80036d8:	20000460 	.word	0x20000460
 80036dc:	20000648 	.word	0x20000648

080036e0 <vcom_Resume>:

void vcom_Resume(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036e4:	4808      	ldr	r0, [pc, #32]	; (8003708 <vcom_Resume+0x28>)
 80036e6:	f006 ffa5 	bl	800a634 <HAL_UART_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <vcom_Resume+0x14>
  {
    Error_Handler();
 80036f0:	f7fe fc38 	bl	8001f64 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80036f4:	4805      	ldr	r0, [pc, #20]	; (800370c <vcom_Resume+0x2c>)
 80036f6:	f001 fb39 	bl	8004d6c <HAL_DMA_Init>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003700:	f7fe fc30 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003704:	bf00      	nop
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000460 	.word	0x20000460
 800370c:	20000588 	.word	0x20000588

08003710 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_UART_TxCpltCallback+0x24>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d103      	bne.n	800372a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_UART_TxCpltCallback+0x28>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2000      	movs	r0, #0
 8003728:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40013800 	.word	0x40013800
 8003738:	2000064c 	.word	0x2000064c

0800373c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <HAL_UART_RxCpltCallback+0x54>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d113      	bne.n	8003776 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_UART_RxCpltCallback+0x58>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_UART_RxCpltCallback+0x30>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <HAL_UART_RxCpltCallback+0x58>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	2101      	movs	r1, #1
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <HAL_UART_RxCpltCallback+0x5c>)
 800376a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800376c:	2201      	movs	r2, #1
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_UART_RxCpltCallback+0x5c>)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f006 ffaf 	bl	800a6d4 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_UART_RxCpltCallback+0x60>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d102      	bne.n	8003786 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_UART_RxCpltCallback+0x64>)
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40013800 	.word	0x40013800
 8003794:	20000650 	.word	0x20000650
 8003798:	20000648 	.word	0x20000648
 800379c:	40004400 	.word	0x40004400
 80037a0:	20000008 	.word	0x20000008

080037a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037a4:	480d      	ldr	r0, [pc, #52]	; (80037dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037a8:	f7ff f98b 	bl	8002ac2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037ac:	480c      	ldr	r0, [pc, #48]	; (80037e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80037ae:	490d      	ldr	r1, [pc, #52]	; (80037e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037b0:	4a0d      	ldr	r2, [pc, #52]	; (80037e8 <LoopForever+0xe>)
  movs r3, #0
 80037b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b4:	e002      	b.n	80037bc <LoopCopyDataInit>

080037b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037ba:	3304      	adds	r3, #4

080037bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c0:	d3f9      	bcc.n	80037b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80037c4:	4c0a      	ldr	r4, [pc, #40]	; (80037f0 <LoopForever+0x16>)
  movs r3, #0
 80037c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c8:	e001      	b.n	80037ce <LoopFillZerobss>

080037ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037cc:	3204      	adds	r2, #4

080037ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d0:	d3fb      	bcc.n	80037ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037d2:	f01a ff09 	bl	801e5e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037d6:	f7fe f9bb 	bl	8001b50 <main>

080037da <LoopForever>:

LoopForever:
    b LoopForever
 80037da:	e7fe      	b.n	80037da <LoopForever>
  ldr   r0, =_estack
 80037dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80037e8:	0801f7b4 	.word	0x0801f7b4
  ldr r2, =_sbss
 80037ec:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80037f0:	200020c0 	.word	0x200020c0

080037f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037f4:	e7fe      	b.n	80037f4 <ADC_IRQHandler>

080037f6 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	609a      	str	r2, [r3, #8]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800380a:	2310      	movs	r3, #16
 800380c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800380e:	2301      	movs	r3, #1
 8003810:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003816:	2303      	movs	r3, #3
 8003818:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	4619      	mov	r1, r3
 800381e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003822:	f002 f945 	bl	8005ab0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003826:	2320      	movs	r3, #32
 8003828:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	4619      	mov	r1, r3
 800382e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003832:	f002 f93d 	bl	8005ab0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003836:	2200      	movs	r2, #0
 8003838:	2120      	movs	r1, #32
 800383a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800383e:	f002 fb65 	bl	8005f0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003842:	2200      	movs	r2, #0
 8003844:	2110      	movs	r1, #16
 8003846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800384a:	f002 fb5f 	bl	8005f0c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d83f      	bhi.n	80038e8 <BSP_RADIO_ConfigRFSwitch+0x90>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003881 	.word	0x08003881
 8003874:	0800389b 	.word	0x0800389b
 8003878:	080038b5 	.word	0x080038b5
 800387c:	080038cf 	.word	0x080038cf
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003880:	2200      	movs	r2, #0
 8003882:	2110      	movs	r1, #16
 8003884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003888:	f002 fb40 	bl	8005f0c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800388c:	2200      	movs	r2, #0
 800388e:	2120      	movs	r1, #32
 8003890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003894:	f002 fb3a 	bl	8005f0c <HAL_GPIO_WritePin>
      break;      
 8003898:	e027      	b.n	80038ea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800389a:	2201      	movs	r2, #1
 800389c:	2110      	movs	r1, #16
 800389e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038a2:	f002 fb33 	bl	8005f0c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80038a6:	2200      	movs	r2, #0
 80038a8:	2120      	movs	r1, #32
 80038aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ae:	f002 fb2d 	bl	8005f0c <HAL_GPIO_WritePin>
      break;
 80038b2:	e01a      	b.n	80038ea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80038b4:	2201      	movs	r2, #1
 80038b6:	2110      	movs	r1, #16
 80038b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038bc:	f002 fb26 	bl	8005f0c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80038c0:	2201      	movs	r2, #1
 80038c2:	2120      	movs	r1, #32
 80038c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038c8:	f002 fb20 	bl	8005f0c <HAL_GPIO_WritePin>
      break;
 80038cc:	e00d      	b.n	80038ea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80038ce:	2200      	movs	r2, #0
 80038d0:	2110      	movs	r1, #16
 80038d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d6:	f002 fb19 	bl	8005f0c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80038da:	2201      	movs	r2, #1
 80038dc:	2120      	movs	r1, #32
 80038de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e2:	f002 fb13 	bl	8005f0c <HAL_GPIO_WritePin>
      break;
 80038e6:	e000      	b.n	80038ea <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80038e8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80038f8:	2302      	movs	r3, #2
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800392e:	230f      	movs	r3, #15
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	e001      	b.n	8003938 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003934:	2316      	movs	r3, #22
 8003936:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003938:	68fb      	ldr	r3, [r7, #12]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6053      	str	r3, [r2, #4]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	e0042000 	.word	0xe0042000

08003960 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003964:	4b04      	ldr	r3, [pc, #16]	; (8003978 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	4a03      	ldr	r2, [pc, #12]	; (8003978 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800396a:	f043 0302 	orr.w	r3, r3, #2
 800396e:	6053      	str	r3, [r2, #4]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	e0042000 	.word	0xe0042000

0800397c <LL_DBGMCU_EnableDBGStandbyMode>:
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a03      	ldr	r2, [pc, #12]	; (8003994 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6053      	str	r3, [r2, #4]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	e0042000 	.word	0xe0042000

08003998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a2:	2003      	movs	r0, #3
 80039a4:	f001 f9a0 	bl	8004ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039a8:	f004 ffac 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <HAL_Init+0x3c>)
 80039b0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039b2:	200f      	movs	r0, #15
 80039b4:	f7ff f804 	bl	80029c0 <HAL_InitTick>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	71fb      	strb	r3, [r7, #7]
 80039c2:	e001      	b.n	80039c8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039c4:	f7fe fd7f 	bl	80024c6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039c8:	79fb      	ldrb	r3, [r7, #7]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000004 	.word	0x20000004

080039d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80039dc:	4b04      	ldr	r3, [pc, #16]	; (80039f0 <HAL_SuspendTick+0x18>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <HAL_SuspendTick+0x18>)
 80039e2:	f023 0302 	bic.w	r3, r3, #2
 80039e6:	6013      	str	r3, [r2, #0]
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	e000e010 	.word	0xe000e010

080039f4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_ResumeTick+0x18>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a03      	ldr	r2, [pc, #12]	; (8003a0c <HAL_ResumeTick+0x18>)
 80039fe:	f043 0302 	orr.w	r3, r3, #2
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	e000e010 	.word	0xe000e010

08003a10 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <HAL_GetUIDw0+0x10>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	1fff7590 	.word	0x1fff7590

08003a24 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <HAL_GetUIDw1+0x10>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr
 8003a34:	1fff7594 	.word	0x1fff7594

08003a38 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <HAL_GetUIDw2+0x10>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	1fff7598 	.word	0x1fff7598

08003a4c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003a50:	f7ff ff78 	bl	8003944 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003a5c:	f7ff ff80 	bl	8003960 <LL_DBGMCU_EnableDBGStopMode>
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003a68:	f7ff ff88 	bl	800397c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2107      	movs	r1, #7
 8003ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aca:	43db      	mvns	r3, r3
 8003acc:	401a      	ands	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ada:	431a      	orrs	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr

08003aea <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2107      	movs	r1, #7
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b085      	sub	sp, #20
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	210f      	movs	r1, #15
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	f003 010f 	and.w	r1, r3, #15
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	401a      	ands	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	43db      	mvns	r3, r3
 8003be0:	401a      	ands	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	0219      	lsls	r1, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	400b      	ands	r3, r1
 8003bea:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8003bee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c12:	f023 0317 	bic.w	r3, r3, #23
 8003c16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c38:	f023 0317 	bic.w	r3, r3, #23
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6093      	str	r3, [r2, #8]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c5e:	d101      	bne.n	8003c64 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c80:	f023 0317 	bic.w	r3, r3, #23
 8003c84:	f043 0201 	orr.w	r2, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca6:	f023 0317 	bic.w	r3, r3, #23
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <LL_ADC_IsEnabled+0x18>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <LL_ADC_IsEnabled+0x1a>
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d101      	bne.n	8003cf8 <LL_ADC_IsDisableOngoing+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_ADC_IsDisableOngoing+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d14:	f023 0317 	bic.w	r3, r3, #23
 8003d18:	f043 0204 	orr.w	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d3a:	f023 0317 	bic.w	r3, r3, #23
 8003d3e:	f043 0210 	orr.w	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d101      	bne.n	8003d68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003d84:	2300      	movs	r3, #0
 8003d86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e17e      	b.n	8004094 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fd fa2b 	bl	8001200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff44 	bl	8003c4a <LL_ADC_IsInternalRegulatorEnabled>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d115      	bne.n	8003df4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff18 	bl	8003c02 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd2:	4b9e      	ldr	r3, [pc, #632]	; (800404c <HAL_ADC_Init+0x2d8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	099b      	lsrs	r3, r3, #6
 8003dd8:	4a9d      	ldr	r2, [pc, #628]	; (8004050 <HAL_ADC_Init+0x2dc>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	3301      	adds	r3, #1
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003de6:	e002      	b.n	8003dee <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f9      	bne.n	8003de8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff26 	bl	8003c4a <LL_ADC_IsInternalRegulatorEnabled>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e14:	f043 0201 	orr.w	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff93 	bl	8003d50 <LL_ADC_REG_IsConversionOngoing>
 8003e2a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 8124 	bne.w	8004082 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 8120 	bne.w	8004082 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff30 	bl	8003cbc <LL_ADC_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 80a7 	bne.w	8003fb2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7e1b      	ldrb	r3, [r3, #24]
 8003e6c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003e6e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7e5b      	ldrb	r3, [r3, #25]
 8003e74:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003e76:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7e9b      	ldrb	r3, [r3, #26]
 8003e7c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003e7e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_ADC_Init+0x11a>
 8003e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e8c:	e000      	b.n	8003e90 <HAL_ADC_Init+0x11c>
 8003e8e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003e90:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003e96:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da04      	bge.n	8003eaa <HAL_ADC_Init+0x136>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ea8:	e001      	b.n	8003eae <HAL_ADC_Init+0x13a>
 8003eaa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003eae:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eb6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003eb8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d114      	bne.n	8003ef4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	7e9b      	ldrb	r3, [r3, #26]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e00b      	b.n	8003ef4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f043 0201 	orr.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8003f1a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	430b      	orrs	r3, r1
 8003f26:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f34:	4313      	orrs	r3, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d111      	bne.n	8003f6a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003f52:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003f58:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003f5e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_ADC_Init+0x2e0>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	6979      	ldr	r1, [r7, #20]
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003f86:	d014      	beq.n	8003fb2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f90:	d00f      	beq.n	8003fb2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003f9c:	4b2e      	ldr	r3, [pc, #184]	; (8004058 <HAL_ADC_Init+0x2e4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fac:	492a      	ldr	r1, [pc, #168]	; (8004058 <HAL_ADC_Init+0x2e4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	f7ff fd76 	bl	8003aae <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4923      	ldr	r1, [pc, #140]	; (800405c <HAL_ADC_Init+0x2e8>)
 8003fce:	f7ff fd6e 	bl	8003aae <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f062 020f 	orn	r2, r2, #15
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
 8003fea:	e017      	b.n	800401c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff4:	d112      	bne.n	800401c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	3b01      	subs	r3, #1
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	f003 031c 	and.w	r3, r3, #28
 8004008:	f06f 020f 	mvn.w	r2, #15
 800400c:	fa02 f103 	lsl.w	r1, r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fd61 	bl	8003aea <LL_ADC_GetSamplingTimeCommonChannels>
 8004028:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800402e:	429a      	cmp	r2, r3
 8004030:	d116      	bne.n	8004060 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	f023 0303 	bic.w	r3, r3, #3
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004048:	e023      	b.n	8004092 <HAL_ADC_Init+0x31e>
 800404a:	bf00      	nop
 800404c:	20000004 	.word	0x20000004
 8004050:	053e2d63 	.word	0x053e2d63
 8004054:	1ffffc02 	.word	0x1ffffc02
 8004058:	40012708 	.word	0x40012708
 800405c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f023 0312 	bic.w	r3, r3, #18
 8004068:	f043 0210 	orr.w	r2, r3, #16
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004080:	e007      	b.n	8004092 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004092:	7ffb      	ldrb	r3, [r7, #31]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07a      	b.n	80041a4 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 face 	bl	800465c <ADC_ConversionStop>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fb92 	bl	80047f4 <ADC_Disable>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fd9f 	bl	8003c28 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80040f8:	f023 0303 	bic.w	r3, r3, #3
 80040fc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f240 329f 	movw	r2, #927	; 0x39f
 8004106:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68d9      	ldr	r1, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_ADC_DeInit+0x110>)
 8004114:	400b      	ands	r3, r1
 8004116:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004126:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0207 	bic.w	r2, r2, #7
 8004136:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a1a      	ldr	r2, [r3, #32]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004146:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004156:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_ADC_DeInit+0x114>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <HAL_ADC_DeInit+0x114>)
 800417c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004180:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd f850 	bl	8001228 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	833e0200 	.word	0x833e0200
 80041b0:	40012708 	.word	0x40012708

080041b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fdc5 	bl	8003d50 <LL_ADC_REG_IsConversionOngoing>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d132      	bne.n	8004232 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_ADC_Start+0x26>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e02e      	b.n	8004238 <HAL_ADC_Start+0x84>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa80 	bl	80046e8 <ADC_Enable>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d11a      	bne.n	8004228 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	221c      	movs	r2, #28
 8004212:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fd6f 	bl	8003d04 <LL_ADC_REG_StartConversion>
 8004226:	e006      	b.n	8004236 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004230:	e001      	b.n	8004236 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_ADC_Stop+0x16>
 8004252:	2302      	movs	r3, #2
 8004254:	e022      	b.n	800429c <HAL_ADC_Stop+0x5c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9fc 	bl	800465c <ADC_ConversionStop>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d111      	bne.n	8004292 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 fac0 	bl	80047f4 <ADC_Disable>
 8004274:	4603      	mov	r3, r0
 8004276:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d102      	bne.n	80042bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80042b6:	2308      	movs	r3, #8
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e010      	b.n	80042de <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e077      	b.n	80043ca <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80042da:	2304      	movs	r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80042de:	f7fe fb79 	bl	80029d4 <HAL_GetTick>
 80042e2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80042e4:	e021      	b.n	800432a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d01d      	beq.n	800432a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80042ee:	f7fe fb71 	bl	80029d4 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <HAL_ADC_PollForConversion+0x60>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d112      	bne.n	800432a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f043 0204 	orr.w	r2, r3, #4
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e04f      	b.n	80043ca <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4013      	ands	r3, r2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0d6      	beq.n	80042e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fbe6 	bl	8003b1a <LL_ADC_REG_IsTriggerSourceSWStart>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d031      	beq.n	80043b8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	7e9b      	ldrb	r3, [r3, #26]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d12d      	bne.n	80043b8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b08      	cmp	r3, #8
 8004368:	d126      	bne.n	80043b8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fcee 	bl	8003d50 <LL_ADC_REG_IsConversionOngoing>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d112      	bne.n	80043a0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 020c 	bic.w	r2, r2, #12
 8004388:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800438e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	659a      	str	r2, [r3, #88]	; 0x58
 800439e:	e00b      	b.n	80043b8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7e1b      	ldrb	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	220c      	movs	r2, #12
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x28>
 8004410:	2302      	movs	r3, #2
 8004412:	e110      	b.n	8004636 <HAL_ADC_ConfigChannel+0x24a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fc95 	bl	8003d50 <LL_ADC_REG_IsConversionOngoing>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	f040 80f7 	bne.w	800461c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b02      	cmp	r3, #2
 8004434:	f000 80b1 	beq.w	800459a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004440:	d004      	beq.n	800444c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004446:	4a7e      	ldr	r2, [pc, #504]	; (8004640 <HAL_ADC_ConfigChannel+0x254>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d108      	bne.n	800445e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4619      	mov	r1, r3
 8004456:	4610      	mov	r0, r2
 8004458:	f7ff fb92 	bl	8003b80 <LL_ADC_REG_SetSequencerChAdd>
 800445c:	e041      	b.n	80044e2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	210f      	movs	r1, #15
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_ADC_ConfigChannel+0xa0>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	e011      	b.n	80044b0 <HAL_ADC_ConfigChannel+0xc4>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	fa93 f3a3 	rbit	r3, r3
 8004498:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80044a4:	2320      	movs	r3, #32
 80044a6:	e003      	b.n	80044b0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	fab3 f383 	clz	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	6839      	ldr	r1, [r7, #0]
 80044b2:	6849      	ldr	r1, [r1, #4]
 80044b4:	f001 011f 	and.w	r1, r1, #31
 80044b8:	408b      	lsls	r3, r1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d808      	bhi.n	80044e2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6859      	ldr	r1, [r3, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	f7ff fb2e 	bl	8003b3e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6819      	ldr	r1, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f7ff fb6b 	bl	8003bca <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f280 8097 	bge.w	800462c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044fe:	4851      	ldr	r0, [pc, #324]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 8004500:	f7ff fac8 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 8004504:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a4f      	ldr	r2, [pc, #316]	; (8004648 <HAL_ADC_ConfigChannel+0x25c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d120      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11b      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004520:	4619      	mov	r1, r3
 8004522:	4848      	ldr	r0, [pc, #288]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 8004524:	f7ff faa4 	bl	8003a70 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004528:	4b48      	ldr	r3, [pc, #288]	; (800464c <HAL_ADC_ConfigChannel+0x260>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	4a48      	ldr	r2, [pc, #288]	; (8004650 <HAL_ADC_ConfigChannel+0x264>)
 8004530:	fba2 2303 	umull	r2, r3, r2, r3
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004542:	e002      	b.n	800454a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3b01      	subs	r3, #1
 8004548:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f9      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004550:	e06c      	b.n	800462c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a3f      	ldr	r2, [pc, #252]	; (8004654 <HAL_ADC_ConfigChannel+0x268>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d10c      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800456c:	4619      	mov	r1, r3
 800456e:	4835      	ldr	r0, [pc, #212]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 8004570:	f7ff fa7e 	bl	8003a70 <LL_ADC_SetCommonPathInternalCh>
 8004574:	e05a      	b.n	800462c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a37      	ldr	r2, [pc, #220]	; (8004658 <HAL_ADC_ConfigChannel+0x26c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d155      	bne.n	800462c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004586:	2b00      	cmp	r3, #0
 8004588:	d150      	bne.n	800462c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004590:	4619      	mov	r1, r3
 8004592:	482c      	ldr	r0, [pc, #176]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 8004594:	f7ff fa6c 	bl	8003a70 <LL_ADC_SetCommonPathInternalCh>
 8004598:	e048      	b.n	800462c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045a2:	d004      	beq.n	80045ae <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80045a8:	4a25      	ldr	r2, [pc, #148]	; (8004640 <HAL_ADC_ConfigChannel+0x254>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d107      	bne.n	80045be <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7ff faf3 	bl	8003ba4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da32      	bge.n	800462c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045c6:	481f      	ldr	r0, [pc, #124]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 80045c8:	f7ff fa64 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 80045cc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a1d      	ldr	r2, [pc, #116]	; (8004648 <HAL_ADC_ConfigChannel+0x25c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d107      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045de:	4619      	mov	r1, r3
 80045e0:	4818      	ldr	r0, [pc, #96]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 80045e2:	f7ff fa45 	bl	8003a70 <LL_ADC_SetCommonPathInternalCh>
 80045e6:	e021      	b.n	800462c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <HAL_ADC_ConfigChannel+0x268>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d107      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f8:	4619      	mov	r1, r3
 80045fa:	4812      	ldr	r0, [pc, #72]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 80045fc:	f7ff fa38 	bl	8003a70 <LL_ADC_SetCommonPathInternalCh>
 8004600:	e014      	b.n	800462c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_ADC_ConfigChannel+0x26c>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10f      	bne.n	800462c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004612:	4619      	mov	r1, r3
 8004614:	480b      	ldr	r0, [pc, #44]	; (8004644 <HAL_ADC_ConfigChannel+0x258>)
 8004616:	f7ff fa2b 	bl	8003a70 <LL_ADC_SetCommonPathInternalCh>
 800461a:	e007      	b.n	800462c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004634:	7ffb      	ldrb	r3, [r7, #31]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	80000004 	.word	0x80000004
 8004644:	40012708 	.word	0x40012708
 8004648:	b0001000 	.word	0xb0001000
 800464c:	20000004 	.word	0x20000004
 8004650:	053e2d63 	.word	0x053e2d63
 8004654:	b8004000 	.word	0xb8004000
 8004658:	b4002000 	.word	0xb4002000

0800465c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fb71 	bl	8003d50 <LL_ADC_REG_IsConversionOngoing>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d033      	beq.n	80046dc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fb31 	bl	8003ce0 <LL_ADC_IsDisableOngoing>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fb4e 	bl	8003d2a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800468e:	f7fe f9a1 	bl	80029d4 <HAL_GetTick>
 8004692:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004694:	e01b      	b.n	80046ce <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004696:	f7fe f99d 	bl	80029d4 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d914      	bls.n	80046ce <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00d      	beq.n	80046ce <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f043 0210 	orr.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e007      	b.n	80046de <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1dc      	bne.n	8004696 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fadf 	bl	8003cbc <LL_ADC_IsEnabled>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d169      	bne.n	80047d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <ADC_Enable+0xfc>)
 800470c:	4013      	ands	r3, r2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	f043 0210 	orr.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004722:	f043 0201 	orr.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e055      	b.n	80047da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fa9c 	bl	8003c70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004738:	482b      	ldr	r0, [pc, #172]	; (80047e8 <ADC_Enable+0x100>)
 800473a:	f7ff f9ab 	bl	8003a94 <LL_ADC_GetCommonPathInternalCh>
 800473e:	4603      	mov	r3, r0
 8004740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00f      	beq.n	8004768 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <ADC_Enable+0x104>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	099b      	lsrs	r3, r3, #6
 800474e:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <ADC_Enable+0x108>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	099b      	lsrs	r3, r3, #6
 8004756:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004758:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800475a:	e002      	b.n	8004762 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f9      	bne.n	800475c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	7e5b      	ldrb	r3, [r3, #25]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d033      	beq.n	80047d8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004770:	f7fe f930 	bl	80029d4 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004776:	e028      	b.n	80047ca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fa9d 	bl	8003cbc <LL_ADC_IsEnabled>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fa6f 	bl	8003c70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004792:	f7fe f91f 	bl	80029d4 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d914      	bls.n	80047ca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d00d      	beq.n	80047ca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f043 0210 	orr.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e007      	b.n	80047da <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d1cf      	bne.n	8004778 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	80000017 	.word	0x80000017
 80047e8:	40012708 	.word	0x40012708
 80047ec:	20000004 	.word	0x20000004
 80047f0:	053e2d63 	.word	0x053e2d63

080047f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fa6d 	bl	8003ce0 <LL_ADC_IsDisableOngoing>
 8004806:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fa55 	bl	8003cbc <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d047      	beq.n	80048a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d144      	bne.n	80048a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f003 0305 	and.w	r3, r3, #5
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10c      	bne.n	8004846 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fa30 	bl	8003c96 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2203      	movs	r2, #3
 800483c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800483e:	f7fe f8c9 	bl	80029d4 <HAL_GetTick>
 8004842:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004844:	e029      	b.n	800489a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	f043 0210 	orr.w	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e023      	b.n	80048aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004862:	f7fe f8b7 	bl	80029d4 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d914      	bls.n	800489a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	f043 0210 	orr.w	r2, r3, #16
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	f043 0201 	orr.w	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e007      	b.n	80048aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1dc      	bne.n	8004862 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <LL_ADC_SetCalibrationFactor>:
{
 80048b2:	b480      	push	{r7}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048c2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <LL_ADC_GetCalibrationFactor>:
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80048e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <LL_ADC_Enable>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004906:	f023 0317 	bic.w	r3, r3, #23
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	609a      	str	r2, [r3, #8]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr

0800491c <LL_ADC_Disable>:
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800492c:	f023 0317 	bic.w	r3, r3, #23
 8004930:	f043 0202 	orr.w	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <LL_ADC_IsEnabled>:
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <LL_ADC_IsEnabled+0x18>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <LL_ADC_IsEnabled+0x1a>
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	4770      	bx	lr

08004966 <LL_ADC_StartCalibration>:
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004976:	f023 0317 	bic.w	r3, r3, #23
 800497a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <LL_ADC_IsCalibrationOnGoing>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800499c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049a0:	d101      	bne.n	80049a6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b088      	sub	sp, #32
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_ADCEx_Calibration_Start+0x1e>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e0b9      	b.n	8004b44 <HAL_ADCEx_Calibration_Start+0x192>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff0b 	bl	80047f4 <ADC_Disable>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff ffab 	bl	8004942 <LL_ADC_IsEnabled>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 809d 	bne.w	8004b2e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049fc:	f043 0202 	orr.w	r2, r3, #2
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	f248 0303 	movw	r3, #32771	; 0x8003
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a20:	f023 0303 	bic.w	r3, r3, #3
 8004a24:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	e02e      	b.n	8004a8a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff ff98 	bl	8004966 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a36:	e014      	b.n	8004a62 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004a44:	d30d      	bcc.n	8004a62 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	f023 0312 	bic.w	r3, r3, #18
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e070      	b.n	8004b44 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff90 	bl	800498c <LL_ADC_IsCalibrationOnGoing>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e2      	bne.n	8004a38 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ff2f 	bl	80048da <LL_ADC_GetCalibrationFactor>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	4413      	add	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	3301      	adds	r3, #1
 8004a88:	61fb      	str	r3, [r7, #28]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	d9cd      	bls.n	8004a2c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff ff29 	bl	80048f6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69b9      	ldr	r1, [r7, #24]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff ff01 	bl	80048b2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff31 	bl	800491c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004aba:	f7fd ff8b 	bl	80029d4 <HAL_GetTick>
 8004abe:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ac0:	e01c      	b.n	8004afc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ac2:	f7fd ff87 	bl	80029d4 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d915      	bls.n	8004afc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff34 	bl	8004942 <LL_ADC_IsEnabled>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae4:	f043 0210 	orr.w	r2, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f043 0201 	orr.w	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e023      	b.n	8004b44 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff ff1e 	bl	8004942 <LL_ADC_IsEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1da      	bne.n	8004ac2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68d9      	ldr	r1, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b20:	f023 0303 	bic.w	r3, r3, #3
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8004b2c:	e005      	b.n	8004b3a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	f043 0210 	orr.w	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <__NVIC_SetPriorityGrouping+0x44>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <__NVIC_SetPriorityGrouping+0x44>)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	60d3      	str	r3, [r2, #12]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	e000ed00 	.word	0xe000ed00

08004b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <__NVIC_GetPriorityGrouping+0x18>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	f003 0307 	and.w	r3, r3, #7
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db0b      	blt.n	8004bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	f003 021f 	and.w	r2, r3, #31
 8004bc8:	4906      	ldr	r1, [pc, #24]	; (8004be4 <__NVIC_EnableIRQ+0x34>)
 8004bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	e000e100 	.word	0xe000e100

08004be8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	db12      	blt.n	8004c20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	490a      	ldr	r1, [pc, #40]	; (8004c2c <__NVIC_DisableIRQ+0x44>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2001      	movs	r0, #1
 8004c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c0e:	3320      	adds	r3, #32
 8004c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c14:	f3bf 8f4f 	dsb	sy
}
 8004c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004c1a:	f3bf 8f6f 	isb	sy
}
 8004c1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e100 	.word	0xe000e100

08004c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db0a      	blt.n	8004c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	490c      	ldr	r1, [pc, #48]	; (8004c7c <__NVIC_SetPriority+0x4c>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	440b      	add	r3, r1
 8004c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c58:	e00a      	b.n	8004c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4908      	ldr	r1, [pc, #32]	; (8004c80 <__NVIC_SetPriority+0x50>)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3b04      	subs	r3, #4
 8004c68:	0112      	lsls	r2, r2, #4
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	761a      	strb	r2, [r3, #24]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	e000e100 	.word	0xe000e100
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f1c3 0307 	rsb	r3, r3, #7
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	bf28      	it	cs
 8004ca2:	2304      	movcs	r3, #4
 8004ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d902      	bls.n	8004cb4 <NVIC_EncodePriority+0x30>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3b03      	subs	r3, #3
 8004cb2:	e000      	b.n	8004cb6 <NVIC_EncodePriority+0x32>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	43d9      	mvns	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	4313      	orrs	r3, r2
         );
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff2b 	bl	8004b4c <__NVIC_SetPriorityGrouping>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d0c:	f7ff ff42 	bl	8004b94 <__NVIC_GetPriorityGrouping>
 8004d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f7ff ffb4 	bl	8004c84 <NVIC_EncodePriority>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff83 	bl	8004c30 <__NVIC_SetPriority>
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff35 	bl	8004bb0 <__NVIC_EnableIRQ>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b082      	sub	sp, #8
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	4603      	mov	r3, r0
 8004d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff43 	bl	8004be8 <__NVIC_DisableIRQ>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e08e      	b.n	8004e9c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b47      	ldr	r3, [pc, #284]	; (8004ea4 <HAL_DMA_Init+0x138>)
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d80f      	bhi.n	8004daa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b45      	ldr	r3, [pc, #276]	; (8004ea8 <HAL_DMA_Init+0x13c>)
 8004d92:	4413      	add	r3, r2
 8004d94:	4a45      	ldr	r2, [pc, #276]	; (8004eac <HAL_DMA_Init+0x140>)
 8004d96:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	009a      	lsls	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a42      	ldr	r2, [pc, #264]	; (8004eb0 <HAL_DMA_Init+0x144>)
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
 8004da8:	e00e      	b.n	8004dc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b40      	ldr	r3, [pc, #256]	; (8004eb4 <HAL_DMA_Init+0x148>)
 8004db2:	4413      	add	r3, r2
 8004db4:	4a3d      	ldr	r2, [pc, #244]	; (8004eac <HAL_DMA_Init+0x140>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	009a      	lsls	r2, r3, #2
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a3c      	ldr	r2, [pc, #240]	; (8004eb8 <HAL_DMA_Init+0x14c>)
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb30 	bl	8005480 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e28:	d102      	bne.n	8004e30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_DMA_Init+0x106>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d80c      	bhi.n	8004e72 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fb59 	bl	8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e6e:	605a      	str	r2, [r3, #4]
 8004e70:	e008      	b.n	8004e84 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40020407 	.word	0x40020407
 8004ea8:	bffdfff8 	.word	0xbffdfff8
 8004eac:	cccccccd 	.word	0xcccccccd
 8004eb0:	40020000 	.word	0x40020000
 8004eb4:	bffdfbf8 	.word	0xbffdfbf8
 8004eb8:	40020400 	.word	0x40020400

08004ebc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e07b      	b.n	8004fc6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <HAL_DMA_DeInit+0x114>)
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d80f      	bhi.n	8004f0a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <HAL_DMA_DeInit+0x118>)
 8004ef2:	4413      	add	r3, r2
 8004ef4:	4a38      	ldr	r2, [pc, #224]	; (8004fd8 <HAL_DMA_DeInit+0x11c>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	009a      	lsls	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a35      	ldr	r2, [pc, #212]	; (8004fdc <HAL_DMA_DeInit+0x120>)
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
 8004f08:	e00e      	b.n	8004f28 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <HAL_DMA_DeInit+0x124>)
 8004f12:	4413      	add	r3, r2
 8004f14:	4a30      	ldr	r2, [pc, #192]	; (8004fd8 <HAL_DMA_DeInit+0x11c>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	009a      	lsls	r2, r3, #2
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2f      	ldr	r2, [pc, #188]	; (8004fe4 <HAL_DMA_DeInit+0x128>)
 8004f26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f003 021c 	and.w	r2, r3, #28
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f42:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fa9b 	bl	8005480 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00f      	beq.n	8004f84 <HAL_DMA_DeInit+0xc8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d80b      	bhi.n	8004f84 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 facf 	bl	8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f82:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40020407 	.word	0x40020407
 8004fd4:	bffdfff8 	.word	0xbffdfff8
 8004fd8:	cccccccd 	.word	0xcccccccd
 8004fdc:	40020000 	.word	0x40020000
 8004fe0:	bffdfbf8 	.word	0xbffdfbf8
 8004fe4:	40020400 	.word	0x40020400

08004fe8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_DMA_Start_IT+0x20>
 8005004:	2302      	movs	r3, #2
 8005006:	e069      	b.n	80050dc <HAL_DMA_Start_IT+0xf4>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d155      	bne.n	80050c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f9e0 	bl	8005406 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 020e 	orr.w	r2, r2, #14
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e00f      	b.n	8005080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 020a 	orr.w	r2, r2, #10
 800507e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d007      	beq.n	800509e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0201 	orr.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e008      	b.n	80050da <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e04f      	b.n	8005196 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d008      	beq.n	8005114 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2204      	movs	r2, #4
 8005106:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e040      	b.n	8005196 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 020e 	bic.w	r2, r2, #14
 8005122:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800512e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005132:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	f003 021c 	and.w	r2, r3, #28
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2101      	movs	r1, #1
 8005152:	fa01 f202 	lsl.w	r2, r1, r2
 8005156:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005160:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005178:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005182:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d005      	beq.n	80051c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2204      	movs	r2, #4
 80051bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	e047      	b.n	8005254 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 020e 	bic.w	r2, r2, #14
 80051d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0201 	bic.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	f003 021c 	and.w	r2, r3, #28
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2101      	movs	r1, #1
 8005202:	fa01 f202 	lsl.w	r2, r1, r2
 8005206:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005210:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00c      	beq.n	8005234 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005228:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005232:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
    }
  }
  return status;
 8005254:	7bfb      	ldrb	r3, [r7, #15]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f003 031c 	and.w	r3, r3, #28
 8005280:	2204      	movs	r2, #4
 8005282:	409a      	lsls	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d027      	beq.n	80052dc <HAL_DMA_IRQHandler+0x7c>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d022      	beq.n	80052dc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d107      	bne.n	80052b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0204 	bic.w	r2, r2, #4
 80052b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	f003 021c 	and.w	r2, r3, #28
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2104      	movs	r1, #4
 80052c2:	fa01 f202 	lsl.w	r2, r1, r2
 80052c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8081 	beq.w	80053d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80052da:	e07b      	b.n	80053d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	f003 031c 	and.w	r3, r3, #28
 80052e4:	2202      	movs	r2, #2
 80052e6:	409a      	lsls	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d03d      	beq.n	800536c <HAL_DMA_IRQHandler+0x10c>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d038      	beq.n	800536c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0320 	and.w	r3, r3, #32
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 020a 	bic.w	r2, r2, #10
 8005316:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <HAL_DMA_IRQHandler+0x180>)
 8005328:	429a      	cmp	r2, r3
 800532a:	d909      	bls.n	8005340 <HAL_DMA_IRQHandler+0xe0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	f003 031c 	and.w	r3, r3, #28
 8005334:	4a2b      	ldr	r2, [pc, #172]	; (80053e4 <HAL_DMA_IRQHandler+0x184>)
 8005336:	2102      	movs	r1, #2
 8005338:	fa01 f303 	lsl.w	r3, r1, r3
 800533c:	6053      	str	r3, [r2, #4]
 800533e:	e008      	b.n	8005352 <HAL_DMA_IRQHandler+0xf2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	f003 031c 	and.w	r3, r3, #28
 8005348:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <HAL_DMA_IRQHandler+0x188>)
 800534a:	2102      	movs	r1, #2
 800534c:	fa01 f303 	lsl.w	r3, r1, r3
 8005350:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d038      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800536a:	e033      	b.n	80053d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f003 031c 	and.w	r3, r3, #28
 8005374:	2208      	movs	r2, #8
 8005376:	409a      	lsls	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02a      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x176>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d025      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 020e 	bic.w	r2, r2, #14
 8005398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f003 021c 	and.w	r2, r3, #28
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2101      	movs	r1, #1
 80053a8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
}
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40020080 	.word	0x40020080
 80053e4:	40020400 	.word	0x40020400
 80053e8:	40020000 	.word	0x40020000

080053ec <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053fa:	b2db      	uxtb	r3, r3
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr

08005406 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800541c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005434:	f003 021c 	and.w	r2, r3, #28
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f202 	lsl.w	r2, r1, r2
 8005442:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b10      	cmp	r3, #16
 8005452:	d108      	bne.n	8005466 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005464:	e007      	b.n	8005476 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	60da      	str	r2, [r3, #12]
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	bc80      	pop	{r7}
 800547e:	4770      	bx	lr

08005480 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b1c      	ldr	r3, [pc, #112]	; (8005500 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005490:	429a      	cmp	r2, r3
 8005492:	d813      	bhi.n	80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005498:	089b      	lsrs	r3, r3, #2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054a0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	3b08      	subs	r3, #8
 80054b0:	4a14      	ldr	r2, [pc, #80]	; (8005504 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e011      	b.n	80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	009a      	lsls	r2, r3, #2
 80054c4:	4b10      	ldr	r3, [pc, #64]	; (8005508 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80054c6:	4413      	add	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b08      	subs	r3, #8
 80054d4:	4a0b      	ldr	r2, [pc, #44]	; (8005504 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	091b      	lsrs	r3, r3, #4
 80054dc:	3307      	adds	r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0a      	ldr	r2, [pc, #40]	; (800550c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80054e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2201      	movs	r2, #1
 80054ee:	409a      	lsls	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40020407 	.word	0x40020407
 8005504:	cccccccd 	.word	0xcccccccd
 8005508:	4002081c 	.word	0x4002081c
 800550c:	40020880 	.word	0x40020880

08005510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005520:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a08      	ldr	r2, [pc, #32]	; (8005554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005534:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3b01      	subs	r3, #1
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	2201      	movs	r2, #1
 8005540:	409a      	lsls	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	1000823f 	.word	0x1000823f
 8005554:	40020940 	.word	0x40020940

08005558 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d12b      	bne.n	80055c6 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	d101      	bne.n	800557c <HAL_DMAEx_ConfigMuxSync+0x24>
 8005578:	2302      	movs	r3, #2
 800557a:	e028      	b.n	80055ce <HAL_DMAEx_ConfigMuxSync+0x76>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	3b01      	subs	r3, #1
 8005598:	04db      	lsls	r3, r3, #19
 800559a:	431a      	orrs	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	7a1b      	ldrb	r3, [r3, #8]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	7a5b      	ldrb	r3, [r3, #9]
 80055ae:	025b      	lsls	r3, r3, #9
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b6:	430a      	orrs	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e003      	b.n	80055ce <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2280      	movs	r2, #128	; 0x80
 80055ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01a      	beq.n	8005626 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005608:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d022      	beq.n	8005674 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01a      	beq.n	8005674 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005656:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
      }
    }
  }
}
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800568a:	4b1c      	ldr	r3, [pc, #112]	; (80056fc <HAL_FLASH_Program+0x80>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_FLASH_Program+0x1a>
 8005692:	2302      	movs	r3, #2
 8005694:	e02d      	b.n	80056f2 <HAL_FLASH_Program+0x76>
 8005696:	4b19      	ldr	r3, [pc, #100]	; (80056fc <HAL_FLASH_Program+0x80>)
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <HAL_FLASH_Program+0x80>)
 800569e:	2200      	movs	r2, #0
 80056a0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056a6:	f000 f869 	bl	800577c <FLASH_WaitForLastOperation>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d11a      	bne.n	80056ea <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d105      	bne.n	80056c6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80056ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056be:	68b8      	ldr	r0, [r7, #8]
 80056c0:	f000 f8be 	bl	8005840 <FLASH_Program_DoubleWord>
 80056c4:	e004      	b.n	80056d0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	68b8      	ldr	r0, [r7, #8]
 80056cc:	f000 f8de 	bl	800588c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056d4:	f000 f852 	bl	800577c <FLASH_WaitForLastOperation>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80056dc:	4b08      	ldr	r3, [pc, #32]	; (8005700 <HAL_FLASH_Program+0x84>)
 80056de:	695a      	ldr	r2, [r3, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	4906      	ldr	r1, [pc, #24]	; (8005700 <HAL_FLASH_Program+0x84>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80056ea:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_FLASH_Program+0x80>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000654 	.word	0x20000654
 8005700:	58004000 	.word	0x58004000

08005704 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <HAL_FLASH_Unlock+0x38>)
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da0b      	bge.n	800572e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <HAL_FLASH_Unlock+0x38>)
 8005718:	4a09      	ldr	r2, [pc, #36]	; (8005740 <HAL_FLASH_Unlock+0x3c>)
 800571a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <HAL_FLASH_Unlock+0x38>)
 800571e:	4a09      	ldr	r2, [pc, #36]	; (8005744 <HAL_FLASH_Unlock+0x40>)
 8005720:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_FLASH_Unlock+0x38>)
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	da01      	bge.n	800572e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800572e:	79fb      	ldrb	r3, [r7, #7]
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	58004000 	.word	0x58004000
 8005740:	45670123 	.word	0x45670123
 8005744:	cdef89ab 	.word	0xcdef89ab

08005748 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <HAL_FLASH_Lock+0x30>)
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	4a08      	ldr	r2, [pc, #32]	; (8005778 <HAL_FLASH_Lock+0x30>)
 8005758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800575c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800575e:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_FLASH_Lock+0x30>)
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	db01      	blt.n	800576a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800576a:	79fb      	ldrb	r3, [r7, #7]
}
 800576c:	4618      	mov	r0, r3
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	58004000 	.word	0x58004000

0800577c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005784:	f7fd f926 	bl	80029d4 <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800578a:	e009      	b.n	80057a0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800578c:	f7fd f922 	bl	80029d4 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	d801      	bhi.n	80057a0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e047      	b.n	8005830 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80057a0:	4b25      	ldr	r3, [pc, #148]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d0ee      	beq.n	800578c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80057ae:	4b22      	ldr	r3, [pc, #136]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80057be:	4b1e      	ldr	r3, [pc, #120]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80057ca:	4013      	ands	r3, r2
 80057cc:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <FLASH_WaitForLastOperation+0x6c>
 80057d8:	4b17      	ldr	r3, [pc, #92]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80057e2:	4915      	ldr	r1, [pc, #84]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	618b      	str	r3, [r1, #24]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <FLASH_WaitForLastOperation+0x80>
 80057f2:	4a11      	ldr	r2, [pc, #68]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80057fa:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00e      	beq.n	8005820 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <FLASH_WaitForLastOperation+0xc0>)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e011      	b.n	8005830 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800580c:	f7fd f8e2 	bl	80029d4 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	429a      	cmp	r2, r3
 800581a:	d801      	bhi.n	8005820 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e007      	b.n	8005830 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <FLASH_WaitForLastOperation+0xbc>)
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800582c:	d0ee      	beq.n	800580c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58004000 	.word	0x58004000
 800583c:	20000654 	.word	0x20000654

08005840 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800584c:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <FLASH_Program_DoubleWord+0x48>)
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	4a0d      	ldr	r2, [pc, #52]	; (8005888 <FLASH_Program_DoubleWord+0x48>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800585e:	f3bf 8f6f 	isb	sy
}
 8005862:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	f04f 0300 	mov.w	r3, #0
 8005870:	000a      	movs	r2, r1
 8005872:	2300      	movs	r3, #0
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	3104      	adds	r1, #4
 8005878:	4613      	mov	r3, r2
 800587a:	600b      	str	r3, [r1, #0]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	58004000 	.word	0x58004000

0800588c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80058a2:	4b18      	ldr	r3, [pc, #96]	; (8005904 <FLASH_Program_Fast+0x78>)
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	4a17      	ldr	r2, [pc, #92]	; (8005904 <FLASH_Program_Fast+0x78>)
 80058a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ae:	f3ef 8310 	mrs	r3, PRIMASK
 80058b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058b4:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80058b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80058b8:	b672      	cpsid	i
}
 80058ba:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	3304      	adds	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	3304      	adds	r3, #4
 80058ce:	617b      	str	r3, [r7, #20]
    row_index--;
 80058d0:	7ffb      	ldrb	r3, [r7, #31]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80058d6:	7ffb      	ldrb	r3, [r7, #31]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1ef      	bne.n	80058bc <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80058dc:	bf00      	nop
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <FLASH_Program_Fast+0x78>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ea:	d0f8      	beq.n	80058de <FLASH_Program_Fast+0x52>
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80058f8:	bf00      	nop
 80058fa:	3724      	adds	r7, #36	; 0x24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	58004000 	.word	0x58004000

08005908 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005912:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <HAL_FLASHEx_Erase+0xac>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_FLASHEx_Erase+0x16>
 800591a:	2302      	movs	r3, #2
 800591c:	e046      	b.n	80059ac <HAL_FLASHEx_Erase+0xa4>
 800591e:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_FLASHEx_Erase+0xac>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005924:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <HAL_FLASHEx_Erase+0xac>)
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800592a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800592e:	f7ff ff25 	bl	800577c <FLASH_WaitForLastOperation>
 8005932:	4603      	mov	r3, r0
 8005934:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d133      	bne.n	80059a4 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d108      	bne.n	8005956 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005944:	f000 f838 	bl	80059b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800594c:	f7ff ff16 	bl	800577c <FLASH_WaitForLastOperation>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	e024      	b.n	80059a0 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60bb      	str	r3, [r7, #8]
 8005964:	e012      	b.n	800598c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005966:	68b8      	ldr	r0, [r7, #8]
 8005968:	f000 f836 	bl	80059d8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800596c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005970:	f7ff ff04 	bl	800577c <FLASH_WaitForLastOperation>
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	601a      	str	r2, [r3, #0]
          break;
 8005984:	e00a      	b.n	800599c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3301      	adds	r3, #1
 800598a:	60bb      	str	r3, [r7, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	4413      	add	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d3e4      	bcc.n	8005966 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800599c:	f000 f878 	bl	8005a90 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80059a0:	f000 f832 	bl	8005a08 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <HAL_FLASHEx_Erase+0xac>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]

  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000654 	.word	0x20000654

080059b8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80059bc:	4b05      	ldr	r3, [pc, #20]	; (80059d4 <FLASH_MassErase+0x1c>)
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <FLASH_MassErase+0x1c>)
 80059c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c6:	f043 0304 	orr.w	r3, r3, #4
 80059ca:	6153      	str	r3, [r2, #20]
#endif
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	58004000 	.word	0x58004000

080059d8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80059e0:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <FLASH_PageErase+0x2c>)
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	4a05      	ldr	r2, [pc, #20]	; (8005a04 <FLASH_PageErase+0x2c>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	6153      	str	r3, [r2, #20]
#endif
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	58004000 	.word	0x58004000

08005a08 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005a0c:	4b1f      	ldr	r3, [pc, #124]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d117      	bne.n	8005a48 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a1e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a22:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005a24:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	4b16      	ldr	r3, [pc, #88]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a3a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a3c:	4b13      	ldr	r3, [pc, #76]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a46:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005a48:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d117      	bne.n	8005a84 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005a54:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a5e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a06      	ldr	r2, [pc, #24]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a76:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <FLASH_FlushCaches+0x84>)
 8005a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a82:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	58004000 	.word	0x58004000

08005a90 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <FLASH_AcknowledgePageErase+0x1c>)
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	4a04      	ldr	r2, [pc, #16]	; (8005aac <FLASH_AcknowledgePageErase+0x1c>)
 8005a9a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005a9e:	f023 0302 	bic.w	r3, r3, #2
 8005aa2:	6153      	str	r3, [r2, #20]
#endif
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	58004000 	.word	0x58004000

08005ab0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005abe:	e140      	b.n	8005d42 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8132 	beq.w	8005d3c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d005      	beq.n	8005af0 <HAL_GPIO_Init+0x40>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d130      	bne.n	8005b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	2203      	movs	r2, #3
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4013      	ands	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b26:	2201      	movs	r2, #1
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4013      	ands	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	091b      	lsrs	r3, r3, #4
 8005b3c:	f003 0201 	and.w	r2, r3, #1
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d017      	beq.n	8005b8e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	2203      	movs	r2, #3
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43db      	mvns	r3, r3
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4013      	ands	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689a      	ldr	r2, [r3, #8]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d123      	bne.n	8005be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	08da      	lsrs	r2, r3, #3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3208      	adds	r2, #8
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	220f      	movs	r2, #15
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43db      	mvns	r3, r3
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	08da      	lsrs	r2, r3, #3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3208      	adds	r2, #8
 8005bdc:	6939      	ldr	r1, [r7, #16]
 8005bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	2203      	movs	r2, #3
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0203 	and.w	r2, r3, #3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 808c 	beq.w	8005d3c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005c24:	4a4e      	ldr	r2, [pc, #312]	; (8005d60 <HAL_GPIO_Init+0x2b0>)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	2207      	movs	r2, #7
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	4013      	ands	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005c4e:	d00d      	beq.n	8005c6c <HAL_GPIO_Init+0x1bc>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a44      	ldr	r2, [pc, #272]	; (8005d64 <HAL_GPIO_Init+0x2b4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d007      	beq.n	8005c68 <HAL_GPIO_Init+0x1b8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a43      	ldr	r2, [pc, #268]	; (8005d68 <HAL_GPIO_Init+0x2b8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d101      	bne.n	8005c64 <HAL_GPIO_Init+0x1b4>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e004      	b.n	8005c6e <HAL_GPIO_Init+0x1be>
 8005c64:	2307      	movs	r3, #7
 8005c66:	e002      	b.n	8005c6e <HAL_GPIO_Init+0x1be>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_GPIO_Init+0x1be>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	f002 0203 	and.w	r2, r2, #3
 8005c74:	0092      	lsls	r2, r2, #2
 8005c76:	4093      	lsls	r3, r2
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005c7e:	4938      	ldr	r1, [pc, #224]	; (8005d60 <HAL_GPIO_Init+0x2b0>)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	3302      	adds	r3, #2
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c8c:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	43db      	mvns	r3, r3
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005cb0:	4a2e      	ldr	r2, [pc, #184]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	43db      	mvns	r3, r3
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005cda:	4a24      	ldr	r2, [pc, #144]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005ce0:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	43db      	mvns	r3, r3
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005d06:	4a19      	ldr	r2, [pc, #100]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005d0e:	4b17      	ldr	r3, [pc, #92]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d14:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005d34:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <HAL_GPIO_Init+0x2bc>)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f47f aeb7 	bne.w	8005ac0 <HAL_GPIO_Init+0x10>
  }
}
 8005d52:	bf00      	nop
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	48000400 	.word	0x48000400
 8005d68:	48000800 	.word	0x48000800
 8005d6c:	58000800 	.word	0x58000800

08005d70 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005d7e:	e0af      	b.n	8005ee0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005d80:	2201      	movs	r2, #1
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a2 	beq.w	8005eda <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005d96:	4a59      	ldr	r2, [pc, #356]	; (8005efc <HAL_GPIO_DeInit+0x18c>)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	089b      	lsrs	r3, r3, #2
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	2207      	movs	r2, #7
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4013      	ands	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005dbe:	d00d      	beq.n	8005ddc <HAL_GPIO_DeInit+0x6c>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a4f      	ldr	r2, [pc, #316]	; (8005f00 <HAL_GPIO_DeInit+0x190>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <HAL_GPIO_DeInit+0x68>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a4e      	ldr	r2, [pc, #312]	; (8005f04 <HAL_GPIO_DeInit+0x194>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_GPIO_DeInit+0x64>
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e004      	b.n	8005dde <HAL_GPIO_DeInit+0x6e>
 8005dd4:	2307      	movs	r3, #7
 8005dd6:	e002      	b.n	8005dde <HAL_GPIO_DeInit+0x6e>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <HAL_GPIO_DeInit+0x6e>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	f002 0203 	and.w	r2, r2, #3
 8005de4:	0092      	lsls	r2, r2, #2
 8005de6:	4093      	lsls	r3, r2
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d136      	bne.n	8005e5c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005dee:	4b46      	ldr	r3, [pc, #280]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005df0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	43db      	mvns	r3, r3
 8005df8:	4943      	ldr	r1, [pc, #268]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005e00:	4b41      	ldr	r3, [pc, #260]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005e02:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	493f      	ldr	r1, [pc, #252]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005e12:	4b3d      	ldr	r3, [pc, #244]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	493b      	ldr	r1, [pc, #236]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005e20:	4b39      	ldr	r3, [pc, #228]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	43db      	mvns	r3, r3
 8005e28:	4937      	ldr	r1, [pc, #220]	; (8005f08 <HAL_GPIO_DeInit+0x198>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	2207      	movs	r2, #7
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005e3e:	4a2f      	ldr	r2, [pc, #188]	; (8005efc <HAL_GPIO_DeInit+0x18c>)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	43da      	mvns	r2, r3
 8005e4e:	482b      	ldr	r0, [pc, #172]	; (8005efc <HAL_GPIO_DeInit+0x18c>)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	089b      	lsrs	r3, r3, #2
 8005e54:	400a      	ands	r2, r1
 8005e56:	3302      	adds	r3, #2
 8005e58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	2103      	movs	r1, #3
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	08da      	lsrs	r2, r3, #3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3208      	adds	r2, #8
 8005e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	220f      	movs	r2, #15
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	08d2      	lsrs	r2, r2, #3
 8005e90:	4019      	ands	r1, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3208      	adds	r2, #8
 8005e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	2103      	movs	r1, #3
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	401a      	ands	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	2103      	movs	r1, #3
 8005ece:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	401a      	ands	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	3301      	adds	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f47f af49 	bne.w	8005d80 <HAL_GPIO_DeInit+0x10>
  }
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	48000400 	.word	0x48000400
 8005f04:	48000800 	.word	0x48000800
 8005f08:	58000800 	.word	0x58000800

08005f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	807b      	strh	r3, [r7, #2]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f1c:	787b      	ldrb	r3, [r7, #1]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f22:	887a      	ldrh	r2, [r7, #2]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f28:	e002      	b.n	8005f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f2a:	887a      	ldrh	r2, [r7, #2]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr

08005f3a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f4c:	887a      	ldrh	r2, [r7, #2]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4013      	ands	r3, r2
 8005f52:	041a      	lsls	r2, r3, #16
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	43d9      	mvns	r1, r3
 8005f58:	887b      	ldrh	r3, [r7, #2]
 8005f5a:	400b      	ands	r3, r1
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	619a      	str	r2, [r3, #24]
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e081      	b.n	8006082 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb fd5a 	bl	8001a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0201 	bic.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d107      	bne.n	8005fe6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fe2:	609a      	str	r2, [r3, #8]
 8005fe4:	e006      	b.n	8005ff4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005ff2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d104      	bne.n	8006006 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6812      	ldr	r2, [r2, #0]
 8006010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
	...

0800608c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	607a      	str	r2, [r7, #4]
 8006096:	461a      	mov	r2, r3
 8006098:	460b      	mov	r3, r1
 800609a:	817b      	strh	r3, [r7, #10]
 800609c:	4613      	mov	r3, r2
 800609e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	f040 80da 	bne.w	8006262 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_I2C_Master_Transmit+0x30>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e0d3      	b.n	8006264 <HAL_I2C_Master_Transmit+0x1d8>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060c4:	f7fc fc86 	bl	80029d4 <HAL_GetTick>
 80060c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	2319      	movs	r3, #25
 80060d0:	2201      	movs	r2, #1
 80060d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f001 f84a 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e0be      	b.n	8006264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2221      	movs	r2, #33	; 0x21
 80060ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2210      	movs	r2, #16
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	893a      	ldrh	r2, [r7, #8]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	2bff      	cmp	r3, #255	; 0xff
 8006116:	d90e      	bls.n	8006136 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	22ff      	movs	r2, #255	; 0xff
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	b2da      	uxtb	r2, r3
 8006124:	8979      	ldrh	r1, [r7, #10]
 8006126:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_I2C_Master_Transmit+0x1e0>)
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f001 fa34 	bl	800759c <I2C_TransferConfig>
 8006134:	e06c      	b.n	8006210 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	b2da      	uxtb	r2, r3
 8006146:	8979      	ldrh	r1, [r7, #10]
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <HAL_I2C_Master_Transmit+0x1e0>)
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f001 fa23 	bl	800759c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006156:	e05b      	b.n	8006210 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	6a39      	ldr	r1, [r7, #32]
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f001 f847 	bl	80071f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e07b      	b.n	8006264 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	781a      	ldrb	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d034      	beq.n	8006210 <HAL_I2C_Master_Transmit+0x184>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d130      	bne.n	8006210 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 ffd9 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04d      	b.n	8006264 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2bff      	cmp	r3, #255	; 0xff
 80061d0:	d90e      	bls.n	80061f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	8979      	ldrh	r1, [r7, #10]
 80061e0:	2300      	movs	r3, #0
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 f9d7 	bl	800759c <I2C_TransferConfig>
 80061ee:	e00f      	b.n	8006210 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	8979      	ldrh	r1, [r7, #10]
 8006202:	2300      	movs	r3, #0
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f001 f9c6 	bl	800759c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d19e      	bne.n	8006158 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	6a39      	ldr	r1, [r7, #32]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f001 f826 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e01a      	b.n	8006264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2220      	movs	r2, #32
 8006234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6859      	ldr	r1, [r3, #4]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_I2C_Master_Transmit+0x1e4>)
 8006242:	400b      	ands	r3, r1
 8006244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	80002000 	.word	0x80002000
 8006270:	fe00e800 	.word	0xfe00e800

08006274 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	461a      	mov	r2, r3
 8006280:	460b      	mov	r3, r1
 8006282:	817b      	strh	r3, [r7, #10]
 8006284:	4613      	mov	r3, r2
 8006286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b20      	cmp	r3, #32
 8006292:	f040 80db 	bne.w	800644c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_I2C_Master_Receive+0x30>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e0d4      	b.n	800644e <HAL_I2C_Master_Receive+0x1da>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062ac:	f7fc fb92 	bl	80029d4 <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	2319      	movs	r3, #25
 80062b8:	2201      	movs	r2, #1
 80062ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 ff56 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e0bf      	b.n	800644e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2222      	movs	r2, #34	; 0x22
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2210      	movs	r2, #16
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	893a      	ldrh	r2, [r7, #8]
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2bff      	cmp	r3, #255	; 0xff
 80062fe:	d90e      	bls.n	800631e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	22ff      	movs	r2, #255	; 0xff
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	b2da      	uxtb	r2, r3
 800630c:	8979      	ldrh	r1, [r7, #10]
 800630e:	4b52      	ldr	r3, [pc, #328]	; (8006458 <HAL_I2C_Master_Receive+0x1e4>)
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f001 f940 	bl	800759c <I2C_TransferConfig>
 800631c:	e06d      	b.n	80063fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632c:	b2da      	uxtb	r2, r3
 800632e:	8979      	ldrh	r1, [r7, #10]
 8006330:	4b49      	ldr	r3, [pc, #292]	; (8006458 <HAL_I2C_Master_Receive+0x1e4>)
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f001 f92f 	bl	800759c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800633e:	e05c      	b.n	80063fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	6a39      	ldr	r1, [r7, #32]
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 ffcf 	bl	80072e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e07c      	b.n	800644e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d034      	beq.n	80063fa <HAL_I2C_Master_Receive+0x186>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	d130      	bne.n	80063fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	2200      	movs	r2, #0
 80063a0:	2180      	movs	r1, #128	; 0x80
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fee4 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e04d      	b.n	800644e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2bff      	cmp	r3, #255	; 0xff
 80063ba:	d90e      	bls.n	80063da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	22ff      	movs	r2, #255	; 0xff
 80063c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	8979      	ldrh	r1, [r7, #10]
 80063ca:	2300      	movs	r3, #0
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 f8e2 	bl	800759c <I2C_TransferConfig>
 80063d8:	e00f      	b.n	80063fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	8979      	ldrh	r1, [r7, #10]
 80063ec:	2300      	movs	r3, #0
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063f4:	68f8      	ldr	r0, [r7, #12]
 80063f6:	f001 f8d1 	bl	800759c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d19d      	bne.n	8006340 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	6a39      	ldr	r1, [r7, #32]
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 ff31 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e01a      	b.n	800644e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2220      	movs	r2, #32
 800641e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <HAL_I2C_Master_Receive+0x1e8>)
 800642c:	400b      	ands	r3, r1
 800642e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	e000      	b.n	800644e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800644c:	2302      	movs	r3, #2
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	80002400 	.word	0x80002400
 800645c:	fe00e800 	.word	0xfe00e800

08006460 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4603      	mov	r3, r0
 8006470:	817b      	strh	r3, [r7, #10]
 8006472:	460b      	mov	r3, r1
 8006474:	813b      	strh	r3, [r7, #8]
 8006476:	4613      	mov	r3, r2
 8006478:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b20      	cmp	r3, #32
 8006484:	f040 80fd 	bne.w	8006682 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006488:	6a3b      	ldr	r3, [r7, #32]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_I2C_Mem_Read+0x34>
 800648e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0f1      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_I2C_Mem_Read+0x4e>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e0ea      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064b6:	f7fc fa8d 	bl	80029d4 <HAL_GetTick>
 80064ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2319      	movs	r3, #25
 80064c2:	2201      	movs	r2, #1
 80064c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 fe51 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d001      	beq.n	80064d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e0d5      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2222      	movs	r2, #34	; 0x22
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006500:	88f8      	ldrh	r0, [r7, #6]
 8006502:	893a      	ldrh	r2, [r7, #8]
 8006504:	8979      	ldrh	r1, [r7, #10]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4603      	mov	r3, r0
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fa67 	bl	80069e4 <I2C_RequestMemoryRead>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0ad      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	2bff      	cmp	r3, #255	; 0xff
 8006530:	d90e      	bls.n	8006550 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	b2da      	uxtb	r2, r3
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	4b52      	ldr	r3, [pc, #328]	; (800668c <HAL_I2C_Mem_Read+0x22c>)
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f827 	bl	800759c <I2C_TransferConfig>
 800654e:	e00f      	b.n	8006570 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	b2da      	uxtb	r2, r3
 8006560:	8979      	ldrh	r1, [r7, #10]
 8006562:	4b4a      	ldr	r3, [pc, #296]	; (800668c <HAL_I2C_Mem_Read+0x22c>)
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 f816 	bl	800759c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2200      	movs	r2, #0
 8006578:	2104      	movs	r1, #4
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fdf8 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e07c      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d034      	beq.n	8006630 <HAL_I2C_Mem_Read+0x1d0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d130      	bne.n	8006630 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	2200      	movs	r2, #0
 80065d6:	2180      	movs	r1, #128	; 0x80
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fdc9 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e04d      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2bff      	cmp	r3, #255	; 0xff
 80065f0:	d90e      	bls.n	8006610 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	22ff      	movs	r2, #255	; 0xff
 80065f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	8979      	ldrh	r1, [r7, #10]
 8006600:	2300      	movs	r3, #0
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 ffc7 	bl	800759c <I2C_TransferConfig>
 800660e:	e00f      	b.n	8006630 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29a      	uxth	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	b2da      	uxtb	r2, r3
 8006620:	8979      	ldrh	r1, [r7, #10]
 8006622:	2300      	movs	r3, #0
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 ffb6 	bl	800759c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d19a      	bne.n	8006570 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fe16 	bl	8007270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e01a      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2220      	movs	r2, #32
 8006654:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6859      	ldr	r1, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_I2C_Mem_Read+0x230>)
 8006662:	400b      	ands	r3, r1
 8006664:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	80002400 	.word	0x80002400
 8006690:	fe00e800 	.word	0xfe00e800

08006694 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4798      	blx	r3
  }
}
 80066c0:	bf00      	nop
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00f      	beq.n	800670a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	f043 0201 	orr.w	r2, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006708:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00f      	beq.n	8006734 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	f043 0208 	orr.w	r2, r3, #8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006732:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00f      	beq.n	800675e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674c:	f043 0202 	orr.w	r2, r3, #2
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006762:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 030b 	and.w	r3, r3, #11
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800676e:	68f9      	ldr	r1, [r7, #12]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fbc5 	bl	8006f00 <I2C_ITError>
  }
}
 8006776:	bf00      	nop
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
 80067ae:	4613      	mov	r3, r2
 80067b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	bc80      	pop	{r7}
 80067de:	4770      	bx	lr

080067e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b086      	sub	sp, #24
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	60f8      	str	r0, [r7, #12]
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <I2C_Slave_ISR_IT+0x24>
 8006812:	2302      	movs	r3, #2
 8006814:	e0e1      	b.n	80069da <I2C_Slave_ISR_IT+0x1e8>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f003 0320 	and.w	r3, r3, #32
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006832:	6939      	ldr	r1, [r7, #16]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fa09 	bl	8006c4c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	d04b      	beq.n	80068dc <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800684a:	2b00      	cmp	r3, #0
 800684c:	d046      	beq.n	80068dc <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006852:	b29b      	uxth	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d128      	bne.n	80068aa <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b28      	cmp	r3, #40	; 0x28
 8006862:	d108      	bne.n	8006876 <I2C_Slave_ISR_IT+0x84>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800686a:	d104      	bne.n	8006876 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800686c:	6939      	ldr	r1, [r7, #16]
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f000 faf2 	bl	8006e58 <I2C_ITListenCplt>
 8006874:	e031      	b.n	80068da <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b29      	cmp	r3, #41	; 0x29
 8006880:	d10e      	bne.n	80068a0 <I2C_Slave_ISR_IT+0xae>
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006888:	d00a      	beq.n	80068a0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2210      	movs	r2, #16
 8006890:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fc2b 	bl	80070ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f97b 	bl	8006b94 <I2C_ITSlaveSeqCplt>
 800689e:	e01c      	b.n	80068da <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2210      	movs	r2, #16
 80068a6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80068a8:	e08f      	b.n	80069ca <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2210      	movs	r2, #16
 80068b0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	f043 0204 	orr.w	r2, r3, #4
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <I2C_Slave_ISR_IT+0xda>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068ca:	d17e      	bne.n	80069ca <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d0:	4619      	mov	r1, r3
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fb14 	bl	8006f00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80068d8:	e077      	b.n	80069ca <I2C_Slave_ISR_IT+0x1d8>
 80068da:	e076      	b.n	80069ca <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02f      	beq.n	8006946 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d02a      	beq.n	8006946 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d018      	beq.n	800692c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	3b01      	subs	r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	3b01      	subs	r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d14b      	bne.n	80069ce <I2C_Slave_ISR_IT+0x1dc>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800693c:	d047      	beq.n	80069ce <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f928 	bl	8006b94 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006944:	e043      	b.n	80069ce <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800695a:	6939      	ldr	r1, [r7, #16]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 f895 	bl	8006a8c <I2C_ITAddrCplt>
 8006962:	e035      	b.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d030      	beq.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006974:	2b00      	cmp	r3, #0
 8006976:	d02b      	beq.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d018      	beq.n	80069b4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80069b2:	e00d      	b.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069ba:	d002      	beq.n	80069c2 <I2C_Slave_ISR_IT+0x1d0>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f8e6 	bl	8006b94 <I2C_ITSlaveSeqCplt>
 80069c8:	e002      	b.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80069ca:	bf00      	nop
 80069cc:	e000      	b.n	80069d0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80069ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	4608      	mov	r0, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	461a      	mov	r2, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	817b      	strh	r3, [r7, #10]
 80069f6:	460b      	mov	r3, r1
 80069f8:	813b      	strh	r3, [r7, #8]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	8979      	ldrh	r1, [r7, #10]
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <I2C_RequestMemoryRead+0xa4>)
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fdc6 	bl	800759c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	69b9      	ldr	r1, [r7, #24]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fbeb 	bl	80071f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e02c      	b.n	8006a7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d105      	bne.n	8006a36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a2a:	893b      	ldrh	r3, [r7, #8]
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
 8006a34:	e015      	b.n	8006a62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a36:	893b      	ldrh	r3, [r7, #8]
 8006a38:	0a1b      	lsrs	r3, r3, #8
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a44:	69fa      	ldr	r2, [r7, #28]
 8006a46:	69b9      	ldr	r1, [r7, #24]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fbd1 	bl	80071f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e012      	b.n	8006a7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a58:	893b      	ldrh	r3, [r7, #8]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2140      	movs	r1, #64	; 0x40
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fb7f 	bl	8007170 <I2C_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	80002000 	.word	0x80002000

08006a8c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006aa2:	2b28      	cmp	r3, #40	; 0x28
 8006aa4:	d16a      	bne.n	8006b7c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f003 0301 	and.w	r3, r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	0c1b      	lsrs	r3, r3, #16
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ac4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ad2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ae0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d138      	bne.n	8006b5c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006aea:	897b      	ldrh	r3, [r7, #10]
 8006aec:	09db      	lsrs	r3, r3, #7
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	89bb      	ldrh	r3, [r7, #12]
 8006af2:	4053      	eors	r3, r2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f003 0306 	and.w	r3, r3, #6
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d11c      	bne.n	8006b38 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006afe:	897b      	ldrh	r3, [r7, #10]
 8006b00:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d13b      	bne.n	8006b8c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2208      	movs	r2, #8
 8006b20:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b2a:	89ba      	ldrh	r2, [r7, #12]
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff fe36 	bl	80067a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b36:	e029      	b.n	8006b8c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006b38:	893b      	ldrh	r3, [r7, #8]
 8006b3a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fd5b 	bl	80075fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b4e:	89ba      	ldrh	r2, [r7, #12]
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7ff fe24 	bl	80067a2 <HAL_I2C_AddrCallback>
}
 8006b5a:	e017      	b.n	8006b8c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fd4b 	bl	80075fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b6e:	89ba      	ldrh	r2, [r7, #12]
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fe14 	bl	80067a2 <HAL_I2C_AddrCallback>
}
 8006b7a:	e007      	b.n	8006b8c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006b8c:	bf00      	nop
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d008      	beq.n	8006bc8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e00c      	b.n	8006be2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006be0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b29      	cmp	r3, #41	; 0x29
 8006bec:	d112      	bne.n	8006c14 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2228      	movs	r2, #40	; 0x28
 8006bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2221      	movs	r2, #33	; 0x21
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fcfc 	bl	80075fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fdb6 	bl	800677e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c12:	e017      	b.n	8006c44 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1e:	d111      	bne.n	8006c44 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2228      	movs	r2, #40	; 0x28
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2222      	movs	r2, #34	; 0x22
 8006c2c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c2e:	2102      	movs	r1, #2
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fce3 	bl	80075fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fda6 	bl	8006790 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c68:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b21      	cmp	r3, #33	; 0x21
 8006c76:	d002      	beq.n	8006c7e <I2C_ITSlaveCplt+0x32>
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b29      	cmp	r3, #41	; 0x29
 8006c7c:	d108      	bne.n	8006c90 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006c7e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fcba 	bl	80075fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2221      	movs	r2, #33	; 0x21
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c8e:	e00d      	b.n	8006cac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	2b22      	cmp	r3, #34	; 0x22
 8006c94:	d002      	beq.n	8006c9c <I2C_ITSlaveCplt+0x50>
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9a:	d107      	bne.n	8006cac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006c9c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fcab 	bl	80075fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2222      	movs	r2, #34	; 0x22
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6859      	ldr	r1, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b62      	ldr	r3, [pc, #392]	; (8006e50 <I2C_ITSlaveCplt+0x204>)
 8006cc8:	400b      	ands	r3, r1
 8006cca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fa0e 	bl	80070ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d013      	beq.n	8006d04 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01f      	beq.n	8006d34 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d02:	e017      	b.n	8006d34 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d012      	beq.n	8006d34 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d020      	beq.n	8006d80 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d005      	beq.n	8006d96 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f043 0204 	orr.w	r2, r3, #4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d010      	beq.n	8006dce <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f8a4 	bl	8006f00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b28      	cmp	r3, #40	; 0x28
 8006dc2:	d141      	bne.n	8006e48 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006dc4:	6979      	ldr	r1, [r7, #20]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f846 	bl	8006e58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006dcc:	e03c      	b.n	8006e48 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dd6:	d014      	beq.n	8006e02 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fedb 	bl	8006b94 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <I2C_ITSlaveCplt+0x208>)
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff fcde 	bl	80067bc <HAL_I2C_ListenCpltCallback>
}
 8006e00:	e022      	b.n	8006e48 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b22      	cmp	r3, #34	; 0x22
 8006e0c:	d10e      	bne.n	8006e2c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff fcb3 	bl	8006790 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e2a:	e00d      	b.n	8006e48 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fc9b 	bl	800677e <HAL_I2C_SlaveTxCpltCallback>
}
 8006e48:	bf00      	nop
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	fe00e800 	.word	0xfe00e800
 8006e54:	ffff0000 	.word	0xffff0000

08006e58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a25      	ldr	r2, [pc, #148]	; (8006efc <I2C_ITListenCplt+0xa4>)
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d022      	beq.n	8006ed4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	b2d2      	uxtb	r2, r2
 8006e9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ecc:	f043 0204 	orr.w	r2, r3, #4
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ed4:	f248 0103 	movw	r1, #32771	; 0x8003
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fb8f 	bl	80075fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fc64 	bl	80067bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ef4:	bf00      	nop
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	ffff0000 	.word	0xffff0000

08006f00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a5d      	ldr	r2, [pc, #372]	; (8007094 <I2C_ITError+0x194>)
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b28      	cmp	r3, #40	; 0x28
 8006f36:	d005      	beq.n	8006f44 <I2C_ITError+0x44>
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b29      	cmp	r3, #41	; 0x29
 8006f3c:	d002      	beq.n	8006f44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b2a      	cmp	r3, #42	; 0x2a
 8006f42:	d10b      	bne.n	8006f5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f44:	2103      	movs	r1, #3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb58 	bl	80075fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2228      	movs	r2, #40	; 0x28
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a50      	ldr	r2, [pc, #320]	; (8007098 <I2C_ITError+0x198>)
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34
 8006f5a:	e011      	b.n	8006f80 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f5c:	f248 0103 	movw	r1, #32771	; 0x8003
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb4b 	bl	80075fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b60      	cmp	r3, #96	; 0x60
 8006f70:	d003      	beq.n	8006f7a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d039      	beq.n	8007002 <I2C_ITError+0x102>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b11      	cmp	r3, #17
 8006f92:	d002      	beq.n	8006f9a <I2C_ITError+0x9a>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2b21      	cmp	r3, #33	; 0x21
 8006f98:	d133      	bne.n	8007002 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fa8:	d107      	bne.n	8006fba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fb8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fa14 	bl	80053ec <HAL_DMA_GetState>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d017      	beq.n	8006ffa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	4a33      	ldr	r2, [pc, #204]	; (800709c <I2C_ITError+0x19c>)
 8006fd0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe f8de 	bl	80051a0 <HAL_DMA_Abort_IT>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d04d      	beq.n	8007086 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ff8:	e045      	b.n	8007086 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f850 	bl	80070a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007000:	e041      	b.n	8007086 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d039      	beq.n	800707e <I2C_ITError+0x17e>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b12      	cmp	r3, #18
 800700e:	d002      	beq.n	8007016 <I2C_ITError+0x116>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b22      	cmp	r3, #34	; 0x22
 8007014:	d133      	bne.n	800707e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007024:	d107      	bne.n	8007036 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007034:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe f9d6 	bl	80053ec <HAL_DMA_GetState>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d017      	beq.n	8007076 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704a:	4a14      	ldr	r2, [pc, #80]	; (800709c <I2C_ITError+0x19c>)
 800704c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe f8a0 	bl	80051a0 <HAL_DMA_Abort_IT>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d011      	beq.n	800708a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007074:	e009      	b.n	800708a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f812 	bl	80070a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800707c:	e005      	b.n	800708a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f80e 	bl	80070a0 <I2C_TreatErrorCallback>
  }
}
 8007084:	e002      	b.n	800708c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007086:	bf00      	nop
 8007088:	e000      	b.n	800708c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800708a:	bf00      	nop
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	ffff0000 	.word	0xffff0000
 8007098:	080067f3 	.word	0x080067f3
 800709c:	08007135 	.word	0x08007135

080070a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b60      	cmp	r3, #96	; 0x60
 80070b2:	d10e      	bne.n	80070d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fb88 	bl	80067e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070d0:	e009      	b.n	80070e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fb74 	bl	80067ce <HAL_I2C_ErrorCallback>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b083      	sub	sp, #12
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b02      	cmp	r3, #2
 8007102:	d103      	bne.n	800710c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d007      	beq.n	800712a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0201 	orr.w	r2, r2, #1
 8007128:	619a      	str	r2, [r3, #24]
  }
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	2200      	movs	r2, #0
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715e:	2200      	movs	r2, #0
 8007160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff ff9c 	bl	80070a0 <I2C_TreatErrorCallback>
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007180:	e022      	b.n	80071c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007188:	d01e      	beq.n	80071c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718a:	f7fb fc23 	bl	80029d4 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	429a      	cmp	r2, r3
 8007198:	d302      	bcc.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d113      	bne.n	80071c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a4:	f043 0220 	orr.w	r2, r3, #32
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e00f      	b.n	80071e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699a      	ldr	r2, [r3, #24]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4013      	ands	r3, r2
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d0cd      	beq.n	8007182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071fc:	e02c      	b.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f8ea 	bl	80073dc <I2C_IsErrorOccurred>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e02a      	b.n	8007268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d01e      	beq.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721a:	f7fb fbdb 	bl	80029d4 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	429a      	cmp	r2, r3
 8007228:	d302      	bcc.n	8007230 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d113      	bne.n	8007258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e007      	b.n	8007268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b02      	cmp	r3, #2
 8007264:	d1cb      	bne.n	80071fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727c:	e028      	b.n	80072d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f8aa 	bl	80073dc <I2C_IsErrorOccurred>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e026      	b.n	80072e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fb fb9f 	bl	80029d4 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d113      	bne.n	80072d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ac:	f043 0220 	orr.w	r2, r3, #32
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e007      	b.n	80072e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d1cf      	bne.n	800727e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072f4:	e064      	b.n	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 f86e 	bl	80073dc <I2C_IsErrorOccurred>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e062      	b.n	80073d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b20      	cmp	r3, #32
 8007316:	d138      	bne.n	800738a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b04      	cmp	r3, #4
 8007324:	d105      	bne.n	8007332 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	e04e      	b.n	80073d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b10      	cmp	r3, #16
 800733e:	d107      	bne.n	8007350 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2210      	movs	r2, #16
 8007346:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2204      	movs	r2, #4
 800734c:	645a      	str	r2, [r3, #68]	; 0x44
 800734e:	e002      	b.n	8007356 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2220      	movs	r2, #32
 800735c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6859      	ldr	r1, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800736a:	400b      	ands	r3, r1
 800736c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e022      	b.n	80073d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738a:	f7fb fb23 	bl	80029d4 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10f      	bne.n	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a4:	f043 0220 	orr.w	r2, r3, #32
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e007      	b.n	80073d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	f003 0304 	and.w	r3, r3, #4
 80073ca:	2b04      	cmp	r3, #4
 80073cc:	d193      	bne.n	80072f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	fe00e800 	.word	0xfe00e800

080073dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	; 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	d068      	beq.n	80074da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2210      	movs	r2, #16
 800740e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007410:	e049      	b.n	80074a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d045      	beq.n	80074a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fb fadb 	bl	80029d4 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <I2C_IsErrorOccurred+0x54>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d13a      	bne.n	80074a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800743a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007442:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007452:	d121      	bne.n	8007498 <I2C_IsErrorOccurred+0xbc>
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800745a:	d01d      	beq.n	8007498 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800745c:	7cfb      	ldrb	r3, [r7, #19]
 800745e:	2b20      	cmp	r3, #32
 8007460:	d01a      	beq.n	8007498 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007470:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007472:	f7fb faaf 	bl	80029d4 <HAL_GetTick>
 8007476:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007478:	e00e      	b.n	8007498 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800747a:	f7fb faab 	bl	80029d4 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b19      	cmp	r3, #25
 8007486:	d907      	bls.n	8007498 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	f043 0320 	orr.w	r3, r3, #32
 800748e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007496:	e006      	b.n	80074a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	d1e9      	bne.n	800747a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f003 0320 	and.w	r3, r3, #32
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d003      	beq.n	80074bc <I2C_IsErrorOccurred+0xe0>
 80074b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d0aa      	beq.n	8007412 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d103      	bne.n	80074cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2220      	movs	r2, #32
 80074ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	f043 0304 	orr.w	r3, r3, #4
 80074d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800751e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	f043 0302 	orr.w	r3, r3, #2
 8007536:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007540:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01c      	beq.n	800758a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fdcc 	bl	80070ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <I2C_IsErrorOccurred+0x1bc>)
 8007562:	400b      	ands	r3, r1
 8007564:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	431a      	orrs	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800758a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800758e:	4618      	mov	r0, r3
 8007590:	3728      	adds	r7, #40	; 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	fe00e800 	.word	0xfe00e800

0800759c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	460b      	mov	r3, r1
 80075a8:	817b      	strh	r3, [r7, #10]
 80075aa:	4613      	mov	r3, r2
 80075ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ae:	897b      	ldrh	r3, [r7, #10]
 80075b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075b4:	7a7b      	ldrb	r3, [r7, #9]
 80075b6:	041b      	lsls	r3, r3, #16
 80075b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	0d5b      	lsrs	r3, r3, #21
 80075d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80075da:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <I2C_TransferConfig+0x5c>)
 80075dc:	430b      	orrs	r3, r1
 80075de:	43db      	mvns	r3, r3
 80075e0:	ea02 0103 	and.w	r1, r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075ee:	bf00      	nop
 80075f0:	371c      	adds	r7, #28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr
 80075f8:	03ff63ff 	.word	0x03ff63ff

080075fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00f      	beq.n	8007636 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800761c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800762a:	2b28      	cmp	r3, #40	; 0x28
 800762c:	d003      	beq.n	8007636 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007634:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007636:	887b      	ldrh	r3, [r7, #2]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00f      	beq.n	8007660 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007646:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007654:	2b28      	cmp	r3, #40	; 0x28
 8007656:	d003      	beq.n	8007660 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800765e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007664:	2b00      	cmp	r3, #0
 8007666:	da03      	bge.n	8007670 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800766e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007670:	887b      	ldrh	r3, [r7, #2]
 8007672:	2b10      	cmp	r3, #16
 8007674:	d103      	bne.n	800767e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800767c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	2b20      	cmp	r3, #32
 8007682:	d103      	bne.n	800768c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f043 0320 	orr.w	r3, r3, #32
 800768a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800768c:	887b      	ldrh	r3, [r7, #2]
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d103      	bne.n	800769a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007698:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	43da      	mvns	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	400a      	ands	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]
}
 80076ac:	bf00      	nop
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d138      	bne.n	800773e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e032      	b.n	8007740 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2224      	movs	r2, #36	; 0x24
 80076e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007708:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	430a      	orrs	r2, r1
 8007718:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f042 0201 	orr.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	e000      	b.n	8007740 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800773e:	2302      	movs	r3, #2
  }
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b20      	cmp	r3, #32
 800775e:	d139      	bne.n	80077d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800776a:	2302      	movs	r3, #2
 800776c:	e033      	b.n	80077d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2224      	movs	r2, #36	; 0x24
 800777a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0201 	bic.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800779c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077d4:	2302      	movs	r3, #2
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a03      	ldr	r2, [pc, #12]	; (80077f8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80077ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr
 80077f8:	58000400 	.word	0x58000400

080077fc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	460b      	mov	r3, r1
 8007806:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10c      	bne.n	8007828 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <HAL_PWR_EnterSLEEPMode+0x60>)
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781a:	d10d      	bne.n	8007838 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800781c:	f000 f83c 	bl	8007898 <HAL_PWREx_DisableLowPowerRunMode>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8007826:	e015      	b.n	8007854 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <HAL_PWR_EnterSLEEPMode+0x60>)
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8007834:	f000 f822 	bl	800787c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007838:	4b09      	ldr	r3, [pc, #36]	; (8007860 <HAL_PWR_EnterSLEEPMode+0x64>)
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	4a08      	ldr	r2, [pc, #32]	; (8007860 <HAL_PWR_EnterSLEEPMode+0x64>)
 800783e:	f023 0304 	bic.w	r3, r3, #4
 8007842:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800784a:	bf30      	wfi
 800784c:	e002      	b.n	8007854 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800784e:	bf40      	sev
    __WFE();
 8007850:	bf20      	wfe
    __WFE();
 8007852:	bf20      	wfe
  }
}
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	58000400 	.word	0x58000400
 8007860:	e000ed00 	.word	0xe000ed00

08007864 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <HAL_PWREx_GetVoltageRange+0x14>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007870:	4618      	mov	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	58000400 	.word	0x58000400

0800787c <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a03      	ldr	r2, [pc, #12]	; (8007894 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8007886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800788a:	6013      	str	r3, [r2, #0]
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr
 8007894:	58000400 	.word	0x58000400

08007898 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80078a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80078aa:	4b14      	ldr	r3, [pc, #80]	; (80078fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2232      	movs	r2, #50	; 0x32
 80078b0:	fb02 f303 	mul.w	r3, r2, r3
 80078b4:	4a12      	ldr	r2, [pc, #72]	; (8007900 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	0c9b      	lsrs	r3, r3, #18
 80078bc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80078be:	e002      	b.n	80078c6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80078c6:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d2:	d102      	bne.n	80078da <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f2      	bne.n	80078c0 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80078da:	4b07      	ldr	r3, [pc, #28]	; (80078f8 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e6:	d101      	bne.n	80078ec <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e000      	b.n	80078ee <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr
 80078f8:	58000400 	.word	0x58000400
 80078fc:	20000004 	.word	0x20000004
 8007900:	431bde83 	.word	0x431bde83

08007904 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800790e:	4b10      	ldr	r3, [pc, #64]	; (8007950 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 0307 	bic.w	r3, r3, #7
 8007916:	4a0e      	ldr	r2, [pc, #56]	; (8007950 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007918:	f043 0302 	orr.w	r3, r3, #2
 800791c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800791e:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	4a0c      	ldr	r2, [pc, #48]	; (8007954 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007924:	f043 0304 	orr.w	r3, r3, #4
 8007928:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007930:	bf30      	wfi
 8007932:	e002      	b.n	800793a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007934:	bf40      	sev
    __WFE();
 8007936:	bf20      	wfe
    __WFE();
 8007938:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800793a:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	4a05      	ldr	r2, [pc, #20]	; (8007954 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007940:	f023 0304 	bic.w	r3, r3, #4
 8007944:	6113      	str	r3, [r2, #16]
}
 8007946:	bf00      	nop
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bc80      	pop	{r7}
 800794e:	4770      	bx	lr
 8007950:	58000400 	.word	0x58000400
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <LL_PWR_IsEnabledBkUpAccess>:
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007968:	d101      	bne.n	800796e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	46bd      	mov	sp, r7
 8007974:	bc80      	pop	{r7}
 8007976:	4770      	bx	lr
 8007978:	58000400 	.word	0x58000400

0800797c <LL_RCC_HSE_EnableTcxo>:
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800798a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800798e:	6013      	str	r3, [r2, #0]
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <LL_RCC_HSE_DisableTcxo>:
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800799c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079aa:	6013      	str	r3, [r2, #0]
}
 80079ac:	bf00      	nop
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr

080079b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80079b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c6:	d101      	bne.n	80079cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e000      	b.n	80079ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bc80      	pop	{r7}
 80079d4:	4770      	bx	lr

080079d6 <LL_RCC_HSE_Enable>:
{
 80079d6:	b480      	push	{r7}
 80079d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80079da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e8:	6013      	str	r3, [r2, #0]
}
 80079ea:	bf00      	nop
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr

080079f2 <LL_RCC_HSE_Disable>:
{
 80079f2:	b480      	push	{r7}
 80079f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80079f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a04:	6013      	str	r3, [r2, #0]
}
 8007a06:	bf00      	nop
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr

08007a0e <LL_RCC_HSE_IsReady>:
{
 8007a0e:	b480      	push	{r7}
 8007a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a20:	d101      	bne.n	8007a26 <LL_RCC_HSE_IsReady+0x18>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <LL_RCC_HSE_IsReady+0x1a>
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <LL_RCC_HSI_Enable>:
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a42:	6013      	str	r3, [r2, #0]
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bc80      	pop	{r7}
 8007a4a:	4770      	bx	lr

08007a4c <LL_RCC_HSI_Disable>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5e:	6013      	str	r3, [r2, #0]
}
 8007a60:	bf00      	nop
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <LL_RCC_HSI_IsReady>:
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7a:	d101      	bne.n	8007a80 <LL_RCC_HSI_IsReady+0x18>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <LL_RCC_HSI_IsReady+0x1a>
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <LL_RCC_HSI_SetCalibTrimming>:
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	061b      	lsls	r3, r3, #24
 8007aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	604b      	str	r3, [r1, #4]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bc80      	pop	{r7}
 8007ab0:	4770      	bx	lr

08007ab2 <LL_RCC_LSE_IsReady>:
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d101      	bne.n	8007aca <LL_RCC_LSE_IsReady+0x18>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <LL_RCC_LSE_IsReady+0x1a>
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr

08007ad4 <LL_RCC_LSI_Enable>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007aec:	bf00      	nop
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bc80      	pop	{r7}
 8007af2:	4770      	bx	lr

08007af4 <LL_RCC_LSI_Disable>:
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b0c:	bf00      	nop
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <LL_RCC_LSI_IsReady>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d101      	bne.n	8007b2c <LL_RCC_LSI_IsReady+0x18>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <LL_RCC_LSI_IsReady+0x1a>
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bc80      	pop	{r7}
 8007b34:	4770      	bx	lr

08007b36 <LL_RCC_MSI_Enable>:
{
 8007b36:	b480      	push	{r7}
 8007b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6013      	str	r3, [r2, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr

08007b52 <LL_RCC_MSI_Disable>:
{
 8007b52:	b480      	push	{r7}
 8007b54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	6013      	str	r3, [r2, #0]
}
 8007b66:	bf00      	nop
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bc80      	pop	{r7}
 8007b6c:	4770      	bx	lr

08007b6e <LL_RCC_MSI_IsReady>:
{
 8007b6e:	b480      	push	{r7}
 8007b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d101      	bne.n	8007b84 <LL_RCC_MSI_IsReady+0x16>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e000      	b.n	8007b86 <LL_RCC_MSI_IsReady+0x18>
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007b8e:	b480      	push	{r7}
 8007b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d101      	bne.n	8007ba4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e000      	b.n	8007ba6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <LL_RCC_MSI_GetRange>:
{
 8007bae:	b480      	push	{r7}
 8007bb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr

08007bdc <LL_RCC_MSI_SetCalibTrimming>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	604b      	str	r3, [r1, #4]
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bc80      	pop	{r7}
 8007c02:	4770      	bx	lr

08007c04 <LL_RCC_SetSysClkSource>:
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	608b      	str	r3, [r1, #8]
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr

08007c2a <LL_RCC_GetSysClkSource>:
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 030c 	and.w	r3, r3, #12
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bc80      	pop	{r7}
 8007c3e:	4770      	bx	lr

08007c40 <LL_RCC_SetAHBPrescaler>:
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	608b      	str	r3, [r1, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr

08007c66 <LL_RCC_SetAHB3Prescaler>:
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007c76:	f023 020f 	bic.w	r2, r3, #15
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	091b      	lsrs	r3, r3, #4
 8007c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <LL_RCC_SetAPB1Prescaler>:
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	608b      	str	r3, [r1, #8]
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bc80      	pop	{r7}
 8007cb6:	4770      	bx	lr

08007cb8 <LL_RCC_SetAPB2Prescaler>:
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	608b      	str	r3, [r1, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <LL_RCC_GetAHBPrescaler>:
{
 8007cde:	b480      	push	{r7}
 8007ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <LL_RCC_GetAHB3Prescaler>:
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bc80      	pop	{r7}
 8007d0c:	4770      	bx	lr

08007d0e <LL_RCC_GetAPB1Prescaler>:
{
 8007d0e:	b480      	push	{r7}
 8007d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <LL_RCC_GetAPB2Prescaler>:
{
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr

08007d3a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d4c:	6013      	str	r3, [r2, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007d56:	b480      	push	{r7}
 8007d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d68:	6013      	str	r3, [r2, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bc80      	pop	{r7}
 8007d70:	4770      	bx	lr

08007d72 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007d72:	b480      	push	{r7}
 8007d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d84:	d101      	bne.n	8007d8a <LL_RCC_PLL_IsReady+0x18>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <LL_RCC_PLL_IsReady+0x1a>
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bc80      	pop	{r7}
 8007daa:	4770      	bx	lr

08007dac <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr

08007dc2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f003 0303 	and.w	r3, r3, #3
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr

08007dee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007dee:	b480      	push	{r7}
 8007df0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e00:	d101      	bne.n	8007e06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007e02:	2301      	movs	r3, #1
 8007e04:	e000      	b.n	8007e08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bc80      	pop	{r7}
 8007e0e:	4770      	bx	lr

08007e10 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e24:	d101      	bne.n	8007e2a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr

08007e34 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e46:	d101      	bne.n	8007e4c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr

08007e56 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007e56:	b480      	push	{r7}
 8007e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e68:	d101      	bne.n	8007e6e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr

08007e78 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e36f      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e8a:	f7ff fece 	bl	8007c2a <LL_RCC_GetSysClkSource>
 8007e8e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e90:	f7ff ffa2 	bl	8007dd8 <LL_RCC_PLL_GetMainSource>
 8007e94:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80c4 	beq.w	800802c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x3e>
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2b0c      	cmp	r3, #12
 8007eae:	d176      	bne.n	8007f9e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d173      	bne.n	8007f9e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e353      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d005      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x68>
 8007ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ede:	e006      	b.n	8007eee <HAL_RCC_OscConfig+0x76>
 8007ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ee8:	091b      	lsrs	r3, r3, #4
 8007eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d222      	bcs.n	8007f38 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 fd3c 	bl	8008974 <RCC_SetFlashLatencyFromMSIRange>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e331      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f10:	f043 0308 	orr.w	r3, r3, #8
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff fe53 	bl	8007bdc <LL_RCC_MSI_SetCalibTrimming>
 8007f36:	e021      	b.n	8007f7c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f42:	f043 0308 	orr.w	r3, r3, #8
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fe3a 	bl	8007bdc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 fd01 	bl	8008974 <RCC_SetFlashLatencyFromMSIRange>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e2f6      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007f7c:	f000 fcc2 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8007f80:	4603      	mov	r3, r0
 8007f82:	4aa7      	ldr	r2, [pc, #668]	; (8008220 <HAL_RCC_OscConfig+0x3a8>)
 8007f84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8007f86:	4ba7      	ldr	r3, [pc, #668]	; (8008224 <HAL_RCC_OscConfig+0x3ac>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fa fd18 	bl	80029c0 <HAL_InitTick>
 8007f90:	4603      	mov	r3, r0
 8007f92:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007f94:	7cfb      	ldrb	r3, [r7, #19]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d047      	beq.n	800802a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8007f9a:	7cfb      	ldrb	r3, [r7, #19]
 8007f9c:	e2e5      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d02c      	beq.n	8008000 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007fa6:	f7ff fdc6 	bl	8007b36 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007faa:	f7fa fd13 	bl	80029d4 <HAL_GetTick>
 8007fae:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007fb2:	f7fa fd0f 	bl	80029d4 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d901      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e2d2      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007fc4:	f7ff fdd3 	bl	8007b6e <LL_RCC_MSI_IsReady>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f1      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fd8:	f043 0308 	orr.w	r3, r3, #8
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff fdef 	bl	8007bdc <LL_RCC_MSI_SetCalibTrimming>
 8007ffe:	e015      	b.n	800802c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008000:	f7ff fda7 	bl	8007b52 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008004:	f7fa fce6 	bl	80029d4 <HAL_GetTick>
 8008008:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800800a:	e008      	b.n	800801e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800800c:	f7fa fce2 	bl	80029d4 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	2b02      	cmp	r3, #2
 8008018:	d901      	bls.n	800801e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e2a5      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800801e:	f7ff fda6 	bl	8007b6e <LL_RCC_MSI_IsReady>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1f1      	bne.n	800800c <HAL_RCC_OscConfig+0x194>
 8008028:	e000      	b.n	800802c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800802a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d058      	beq.n	80080ea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b08      	cmp	r3, #8
 800803c:	d005      	beq.n	800804a <HAL_RCC_OscConfig+0x1d2>
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	2b0c      	cmp	r3, #12
 8008042:	d108      	bne.n	8008056 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b03      	cmp	r3, #3
 8008048:	d105      	bne.n	8008056 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d14b      	bne.n	80080ea <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e289      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8008056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008068:	4313      	orrs	r3, r2
 800806a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008074:	d102      	bne.n	800807c <HAL_RCC_OscConfig+0x204>
 8008076:	f7ff fcae 	bl	80079d6 <LL_RCC_HSE_Enable>
 800807a:	e00d      	b.n	8008098 <HAL_RCC_OscConfig+0x220>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008084:	d104      	bne.n	8008090 <HAL_RCC_OscConfig+0x218>
 8008086:	f7ff fc79 	bl	800797c <LL_RCC_HSE_EnableTcxo>
 800808a:	f7ff fca4 	bl	80079d6 <LL_RCC_HSE_Enable>
 800808e:	e003      	b.n	8008098 <HAL_RCC_OscConfig+0x220>
 8008090:	f7ff fcaf 	bl	80079f2 <LL_RCC_HSE_Disable>
 8008094:	f7ff fc80 	bl	8007998 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d012      	beq.n	80080c6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a0:	f7fa fc98 	bl	80029d4 <HAL_GetTick>
 80080a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080a8:	f7fa fc94 	bl	80029d4 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b64      	cmp	r3, #100	; 0x64
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e257      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80080ba:	f7ff fca8 	bl	8007a0e <LL_RCC_HSE_IsReady>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0f1      	beq.n	80080a8 <HAL_RCC_OscConfig+0x230>
 80080c4:	e011      	b.n	80080ea <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c6:	f7fa fc85 	bl	80029d4 <HAL_GetTick>
 80080ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80080cc:	e008      	b.n	80080e0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080ce:	f7fa fc81 	bl	80029d4 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b64      	cmp	r3, #100	; 0x64
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e244      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80080e0:	f7ff fc95 	bl	8007a0e <LL_RCC_HSE_IsReady>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1f1      	bne.n	80080ce <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d046      	beq.n	8008184 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d005      	beq.n	8008108 <HAL_RCC_OscConfig+0x290>
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	d10e      	bne.n	8008120 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d10b      	bne.n	8008120 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e22a      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fcb6 	bl	8007a8a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800811e:	e031      	b.n	8008184 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d019      	beq.n	800815c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008128:	f7ff fc82 	bl	8007a30 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800812c:	f7fa fc52 	bl	80029d4 <HAL_GetTick>
 8008130:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008132:	e008      	b.n	8008146 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008134:	f7fa fc4e 	bl	80029d4 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	2b02      	cmp	r3, #2
 8008140:	d901      	bls.n	8008146 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e211      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008146:	f7ff fc8f 	bl	8007a68 <LL_RCC_HSI_IsReady>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f1      	beq.n	8008134 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	4618      	mov	r0, r3
 8008156:	f7ff fc98 	bl	8007a8a <LL_RCC_HSI_SetCalibTrimming>
 800815a:	e013      	b.n	8008184 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800815c:	f7ff fc76 	bl	8007a4c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7fa fc38 	bl	80029d4 <HAL_GetTick>
 8008164:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008168:	f7fa fc34 	bl	80029d4 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e1f7      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800817a:	f7ff fc75 	bl	8007a68 <LL_RCC_HSI_IsReady>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1f1      	bne.n	8008168 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d06e      	beq.n	800826e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d056      	beq.n	8008246 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800819c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081a0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69da      	ldr	r2, [r3, #28]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d031      	beq.n	8008214 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f003 0302 	and.w	r3, r3, #2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d006      	beq.n	80081c8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e1d0      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d013      	beq.n	80081fa <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80081d2:	f7ff fc8f 	bl	8007af4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081d6:	f7fa fbfd 	bl	80029d4 <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80081dc:	e008      	b.n	80081f0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081de:	f7fa fbf9 	bl	80029d4 <HAL_GetTick>
 80081e2:	4602      	mov	r2, r0
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	2b11      	cmp	r3, #17
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e1bc      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80081f0:	f7ff fc90 	bl	8007b14 <LL_RCC_LSI_IsReady>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f1      	bne.n	80081de <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80081fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008202:	f023 0210 	bic.w	r2, r3, #16
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800820e:	4313      	orrs	r3, r2
 8008210:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008214:	f7ff fc5e 	bl	8007ad4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008218:	f7fa fbdc 	bl	80029d4 <HAL_GetTick>
 800821c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800821e:	e00c      	b.n	800823a <HAL_RCC_OscConfig+0x3c2>
 8008220:	20000004 	.word	0x20000004
 8008224:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008228:	f7fa fbd4 	bl	80029d4 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b11      	cmp	r3, #17
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e197      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800823a:	f7ff fc6b 	bl	8007b14 <LL_RCC_LSI_IsReady>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0f1      	beq.n	8008228 <HAL_RCC_OscConfig+0x3b0>
 8008244:	e013      	b.n	800826e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008246:	f7ff fc55 	bl	8007af4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800824a:	f7fa fbc3 	bl	80029d4 <HAL_GetTick>
 800824e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008250:	e008      	b.n	8008264 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008252:	f7fa fbbf 	bl	80029d4 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b11      	cmp	r3, #17
 800825e:	d901      	bls.n	8008264 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e182      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008264:	f7ff fc56 	bl	8007b14 <LL_RCC_LSI_IsReady>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f1      	bne.n	8008252 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0304 	and.w	r3, r3, #4
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 80d8 	beq.w	800842c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800827c:	f7ff fb6c 	bl	8007958 <LL_PWR_IsEnabledBkUpAccess>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d113      	bne.n	80082ae <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008286:	f7ff faab 	bl	80077e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800828a:	f7fa fba3 	bl	80029d4 <HAL_GetTick>
 800828e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008290:	e008      	b.n	80082a4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008292:	f7fa fb9f 	bl	80029d4 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	2b02      	cmp	r3, #2
 800829e:	d901      	bls.n	80082a4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e162      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80082a4:	f7ff fb58 	bl	8007958 <LL_PWR_IsEnabledBkUpAccess>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f1      	beq.n	8008292 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d07b      	beq.n	80083ae <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	2b85      	cmp	r3, #133	; 0x85
 80082bc:	d003      	beq.n	80082c6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	d109      	bne.n	80082da <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80082c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082d2:	f043 0304 	orr.w	r3, r3, #4
 80082d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082da:	f7fa fb7b 	bl	80029d4 <HAL_GetTick>
 80082de:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80082e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80082ec:	f043 0301 	orr.w	r3, r3, #1
 80082f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80082f4:	e00a      	b.n	800830c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f6:	f7fa fb6d 	bl	80029d4 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f241 3288 	movw	r2, #5000	; 0x1388
 8008304:	4293      	cmp	r3, r2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e12e      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800830c:	f7ff fbd1 	bl	8007ab2 <LL_RCC_LSE_IsReady>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d0ef      	beq.n	80082f6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	2b81      	cmp	r3, #129	; 0x81
 800831c:	d003      	beq.n	8008326 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2b85      	cmp	r3, #133	; 0x85
 8008324:	d121      	bne.n	800836a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008326:	f7fa fb55 	bl	80029d4 <HAL_GetTick>
 800832a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800832c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008340:	e00a      	b.n	8008358 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008342:	f7fa fb47 	bl	80029d4 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008350:	4293      	cmp	r3, r2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e108      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800835c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0ec      	beq.n	8008342 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008368:	e060      	b.n	800842c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800836a:	f7fa fb33 	bl	80029d4 <HAL_GetTick>
 800836e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800837c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008384:	e00a      	b.n	800839c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008386:	f7fa fb25 	bl	80029d4 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	f241 3288 	movw	r2, #5000	; 0x1388
 8008394:	4293      	cmp	r3, r2
 8008396:	d901      	bls.n	800839c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e0e6      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800839c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1ec      	bne.n	8008386 <HAL_RCC_OscConfig+0x50e>
 80083ac:	e03e      	b.n	800842c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ae:	f7fa fb11 	bl	80029d4 <HAL_GetTick>
 80083b2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80083b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80083c8:	e00a      	b.n	80083e0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ca:	f7fa fb03 	bl	80029d4 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d8:	4293      	cmp	r3, r2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e0c4      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80083e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1ec      	bne.n	80083ca <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083f0:	f7fa faf0 	bl	80029d4 <HAL_GetTick>
 80083f4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008402:	f023 0301 	bic.w	r3, r3, #1
 8008406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800840a:	e00a      	b.n	8008422 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800840c:	f7fa fae2 	bl	80029d4 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	f241 3288 	movw	r2, #5000	; 0x1388
 800841a:	4293      	cmp	r3, r2
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e0a3      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008422:	f7ff fb46 	bl	8007ab2 <LL_RCC_LSE_IsReady>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1ef      	bne.n	800840c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 8099 	beq.w	8008568 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	2b0c      	cmp	r3, #12
 800843a:	d06c      	beq.n	8008516 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008440:	2b02      	cmp	r3, #2
 8008442:	d14b      	bne.n	80084dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008444:	f7ff fc87 	bl	8007d56 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008448:	f7fa fac4 	bl	80029d4 <HAL_GetTick>
 800844c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fa fac0 	bl	80029d4 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b0a      	cmp	r3, #10
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e083      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008462:	f7ff fc86 	bl	8007d72 <LL_RCC_PLL_IsReady>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1f1      	bne.n	8008450 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800846c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	4b40      	ldr	r3, [pc, #256]	; (8008574 <HAL_RCC_OscConfig+0x6fc>)
 8008474:	4013      	ands	r3, r2
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800847e:	4311      	orrs	r1, r2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008484:	0212      	lsls	r2, r2, #8
 8008486:	4311      	orrs	r1, r2
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800848c:	4311      	orrs	r1, r2
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008492:	4311      	orrs	r1, r2
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008498:	430a      	orrs	r2, r1
 800849a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800849e:	4313      	orrs	r3, r2
 80084a0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a2:	f7ff fc4a 	bl	8007d3a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b6:	f7fa fa8d 	bl	80029d4 <HAL_GetTick>
 80084ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084be:	f7fa fa89 	bl	80029d4 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b0a      	cmp	r3, #10
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e04c      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80084d0:	f7ff fc4f 	bl	8007d72 <LL_RCC_PLL_IsReady>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0f1      	beq.n	80084be <HAL_RCC_OscConfig+0x646>
 80084da:	e045      	b.n	8008568 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084dc:	f7ff fc3b 	bl	8007d56 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084e0:	f7fa fa78 	bl	80029d4 <HAL_GetTick>
 80084e4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084e8:	f7fa fa74 	bl	80029d4 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b0a      	cmp	r3, #10
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e037      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80084fa:	f7ff fc3a 	bl	8007d72 <LL_RCC_PLL_IsReady>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1f1      	bne.n	80084e8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800850e:	4b1a      	ldr	r3, [pc, #104]	; (8008578 <HAL_RCC_OscConfig+0x700>)
 8008510:	4013      	ands	r3, r2
 8008512:	60cb      	str	r3, [r1, #12]
 8008514:	e028      	b.n	8008568 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e023      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f003 0203 	and.w	r2, r3, #3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	429a      	cmp	r2, r3
 8008536:	d115      	bne.n	8008564 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	429a      	cmp	r2, r3
 8008544:	d10e      	bne.n	8008564 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	429a      	cmp	r2, r3
 8008554:	d106      	bne.n	8008564 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	11c1808c 	.word	0x11c1808c
 8008578:	eefefffc 	.word	0xeefefffc

0800857c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e10f      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008590:	4b89      	ldr	r3, [pc, #548]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0307 	and.w	r3, r3, #7
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d91b      	bls.n	80085d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859e:	4b86      	ldr	r3, [pc, #536]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f023 0207 	bic.w	r2, r3, #7
 80085a6:	4984      	ldr	r1, [pc, #528]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085ae:	f7fa fa11 	bl	80029d4 <HAL_GetTick>
 80085b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80085b6:	f7fa fa0d 	bl	80029d4 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e0f3      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085c8:	4b7b      	ldr	r3, [pc, #492]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d1ef      	bne.n	80085b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d016      	beq.n	8008610 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff fb2a 	bl	8007c40 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80085ec:	f7fa f9f2 	bl	80029d4 <HAL_GetTick>
 80085f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80085f4:	f7fa f9ee 	bl	80029d4 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d901      	bls.n	8008606 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e0d4      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008606:	f7ff fbf2 	bl	8007dee <LL_RCC_IsActiveFlag_HPRE>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0f1      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d016      	beq.n	800864a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff fb20 	bl	8007c66 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008626:	f7fa f9d5 	bl	80029d4 <HAL_GetTick>
 800862a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800862c:	e008      	b.n	8008640 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800862e:	f7fa f9d1 	bl	80029d4 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	1ad3      	subs	r3, r2, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e0b7      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008640:	f7ff fbe6 	bl	8007e10 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d0f1      	beq.n	800862e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d016      	beq.n	8008684 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fb19 	bl	8007c92 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008660:	f7fa f9b8 	bl	80029d4 <HAL_GetTick>
 8008664:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008666:	e008      	b.n	800867a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008668:	f7fa f9b4 	bl	80029d4 <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e09a      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800867a:	f7ff fbdb 	bl	8007e34 <LL_RCC_IsActiveFlag_PPRE1>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0f1      	beq.n	8008668 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d017      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff fb0e 	bl	8007cb8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800869c:	f7fa f99a 	bl	80029d4 <HAL_GetTick>
 80086a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80086a4:	f7fa f996 	bl	80029d4 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e07c      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80086b6:	f7ff fbce 	bl	8007e56 <LL_RCC_IsActiveFlag_PPRE2>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0f1      	beq.n	80086a4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d043      	beq.n	8008754 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d106      	bne.n	80086e2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80086d4:	f7ff f99b 	bl	8007a0e <LL_RCC_HSE_IsReady>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d11e      	bne.n	800871c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e066      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d106      	bne.n	80086f8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80086ea:	f7ff fb42 	bl	8007d72 <LL_RCC_PLL_IsReady>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d113      	bne.n	800871c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e05b      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008700:	f7ff fa35 	bl	8007b6e <LL_RCC_MSI_IsReady>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d108      	bne.n	800871c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e050      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800870e:	f7ff f9ab 	bl	8007a68 <LL_RCC_HSI_IsReady>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e049      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	4618      	mov	r0, r3
 8008722:	f7ff fa6f 	bl	8007c04 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008726:	f7fa f955 	bl	80029d4 <HAL_GetTick>
 800872a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800872c:	e00a      	b.n	8008744 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800872e:	f7fa f951 	bl	80029d4 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	f241 3288 	movw	r2, #5000	; 0x1388
 800873c:	4293      	cmp	r3, r2
 800873e:	d901      	bls.n	8008744 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e035      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008744:	f7ff fa71 	bl	8007c2a <LL_RCC_GetSysClkSource>
 8008748:	4602      	mov	r2, r0
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	429a      	cmp	r2, r3
 8008752:	d1ec      	bne.n	800872e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008754:	4b18      	ldr	r3, [pc, #96]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d21b      	bcs.n	800879a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008762:	4b15      	ldr	r3, [pc, #84]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f023 0207 	bic.w	r2, r3, #7
 800876a:	4913      	ldr	r1, [pc, #76]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	4313      	orrs	r3, r2
 8008770:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008772:	f7fa f92f 	bl	80029d4 <HAL_GetTick>
 8008776:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008778:	e008      	b.n	800878c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800877a:	f7fa f92b 	bl	80029d4 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e011      	b.n	80087b0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800878c:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <HAL_RCC_ClockConfig+0x23c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	429a      	cmp	r2, r3
 8008798:	d1ef      	bne.n	800877a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800879a:	f000 f8b3 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 800879e:	4603      	mov	r3, r0
 80087a0:	4a06      	ldr	r2, [pc, #24]	; (80087bc <HAL_RCC_ClockConfig+0x240>)
 80087a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80087a4:	4b06      	ldr	r3, [pc, #24]	; (80087c0 <HAL_RCC_ClockConfig+0x244>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fa f909 	bl	80029c0 <HAL_InitTick>
 80087ae:	4603      	mov	r3, r0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	58004000 	.word	0x58004000
 80087bc:	20000004 	.word	0x20000004
 80087c0:	2000000c 	.word	0x2000000c

080087c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80087c4:	b590      	push	{r4, r7, lr}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087d2:	f7ff fa2a 	bl	8007c2a <LL_RCC_GetSysClkSource>
 80087d6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087d8:	f7ff fafe 	bl	8007dd8 <LL_RCC_PLL_GetMainSource>
 80087dc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_RCC_GetSysClockFreq+0x2c>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b0c      	cmp	r3, #12
 80087e8:	d139      	bne.n	800885e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d136      	bne.n	800885e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80087f0:	f7ff f9cd 	bl	8007b8e <LL_RCC_MSI_IsEnabledRangeSelect>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d115      	bne.n	8008826 <HAL_RCC_GetSysClockFreq+0x62>
 80087fa:	f7ff f9c8 	bl	8007b8e <LL_RCC_MSI_IsEnabledRangeSelect>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b01      	cmp	r3, #1
 8008802:	d106      	bne.n	8008812 <HAL_RCC_GetSysClockFreq+0x4e>
 8008804:	f7ff f9d3 	bl	8007bae <LL_RCC_MSI_GetRange>
 8008808:	4603      	mov	r3, r0
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	f003 030f 	and.w	r3, r3, #15
 8008810:	e005      	b.n	800881e <HAL_RCC_GetSysClockFreq+0x5a>
 8008812:	f7ff f9d7 	bl	8007bc4 <LL_RCC_MSI_GetRangeAfterStandby>
 8008816:	4603      	mov	r3, r0
 8008818:	0a1b      	lsrs	r3, r3, #8
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	4a36      	ldr	r2, [pc, #216]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x134>)
 8008820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008824:	e014      	b.n	8008850 <HAL_RCC_GetSysClockFreq+0x8c>
 8008826:	f7ff f9b2 	bl	8007b8e <LL_RCC_MSI_IsEnabledRangeSelect>
 800882a:	4603      	mov	r3, r0
 800882c:	2b01      	cmp	r3, #1
 800882e:	d106      	bne.n	800883e <HAL_RCC_GetSysClockFreq+0x7a>
 8008830:	f7ff f9bd 	bl	8007bae <LL_RCC_MSI_GetRange>
 8008834:	4603      	mov	r3, r0
 8008836:	091b      	lsrs	r3, r3, #4
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	e005      	b.n	800884a <HAL_RCC_GetSysClockFreq+0x86>
 800883e:	f7ff f9c1 	bl	8007bc4 <LL_RCC_MSI_GetRangeAfterStandby>
 8008842:	4603      	mov	r3, r0
 8008844:	091b      	lsrs	r3, r3, #4
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	4a2b      	ldr	r2, [pc, #172]	; (80088f8 <HAL_RCC_GetSysClockFreq+0x134>)
 800884c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008850:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800885c:	e012      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b04      	cmp	r3, #4
 8008862:	d102      	bne.n	800886a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008864:	4b25      	ldr	r3, [pc, #148]	; (80088fc <HAL_RCC_GetSysClockFreq+0x138>)
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e00c      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b08      	cmp	r3, #8
 800886e:	d109      	bne.n	8008884 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008870:	f7ff f8a0 	bl	80079b4 <LL_RCC_HSE_IsEnabledDiv2>
 8008874:	4603      	mov	r3, r0
 8008876:	2b01      	cmp	r3, #1
 8008878:	d102      	bne.n	8008880 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800887a:	4b20      	ldr	r3, [pc, #128]	; (80088fc <HAL_RCC_GetSysClockFreq+0x138>)
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e001      	b.n	8008884 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008880:	4b1f      	ldr	r3, [pc, #124]	; (8008900 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008882:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008884:	f7ff f9d1 	bl	8007c2a <LL_RCC_GetSysClkSource>
 8008888:	4603      	mov	r3, r0
 800888a:	2b0c      	cmp	r3, #12
 800888c:	d12f      	bne.n	80088ee <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800888e:	f7ff faa3 	bl	8007dd8 <LL_RCC_PLL_GetMainSource>
 8008892:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d003      	beq.n	80088a2 <HAL_RCC_GetSysClockFreq+0xde>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d003      	beq.n	80088a8 <HAL_RCC_GetSysClockFreq+0xe4>
 80088a0:	e00d      	b.n	80088be <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80088a2:	4b16      	ldr	r3, [pc, #88]	; (80088fc <HAL_RCC_GetSysClockFreq+0x138>)
 80088a4:	60fb      	str	r3, [r7, #12]
        break;
 80088a6:	e00d      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80088a8:	f7ff f884 	bl	80079b4 <LL_RCC_HSE_IsEnabledDiv2>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d102      	bne.n	80088b8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <HAL_RCC_GetSysClockFreq+0x138>)
 80088b4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80088b6:	e005      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80088b8:	4b11      	ldr	r3, [pc, #68]	; (8008900 <HAL_RCC_GetSysClockFreq+0x13c>)
 80088ba:	60fb      	str	r3, [r7, #12]
        break;
 80088bc:	e002      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	60fb      	str	r3, [r7, #12]
        break;
 80088c2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80088c4:	f7ff fa66 	bl	8007d94 <LL_RCC_PLL_GetN>
 80088c8:	4602      	mov	r2, r0
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	fb03 f402 	mul.w	r4, r3, r2
 80088d0:	f7ff fa77 	bl	8007dc2 <LL_RCC_PLL_GetDivider>
 80088d4:	4603      	mov	r3, r0
 80088d6:	091b      	lsrs	r3, r3, #4
 80088d8:	3301      	adds	r3, #1
 80088da:	fbb4 f4f3 	udiv	r4, r4, r3
 80088de:	f7ff fa65 	bl	8007dac <LL_RCC_PLL_GetR>
 80088e2:	4603      	mov	r3, r0
 80088e4:	0f5b      	lsrs	r3, r3, #29
 80088e6:	3301      	adds	r3, #1
 80088e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80088ec:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80088ee:	697b      	ldr	r3, [r7, #20]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	371c      	adds	r7, #28
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd90      	pop	{r4, r7, pc}
 80088f8:	0801f0f4 	.word	0x0801f0f4
 80088fc:	00f42400 	.word	0x00f42400
 8008900:	01e84800 	.word	0x01e84800

08008904 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008904:	b598      	push	{r3, r4, r7, lr}
 8008906:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008908:	f7ff ff5c 	bl	80087c4 <HAL_RCC_GetSysClockFreq>
 800890c:	4604      	mov	r4, r0
 800890e:	f7ff f9e6 	bl	8007cde <LL_RCC_GetAHBPrescaler>
 8008912:	4603      	mov	r3, r0
 8008914:	091b      	lsrs	r3, r3, #4
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	4a03      	ldr	r2, [pc, #12]	; (8008928 <HAL_RCC_GetHCLKFreq+0x24>)
 800891c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008920:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008924:	4618      	mov	r0, r3
 8008926:	bd98      	pop	{r3, r4, r7, pc}
 8008928:	0801f094 	.word	0x0801f094

0800892c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800892c:	b598      	push	{r3, r4, r7, lr}
 800892e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008930:	f7ff ffe8 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8008934:	4604      	mov	r4, r0
 8008936:	f7ff f9ea 	bl	8007d0e <LL_RCC_GetAPB1Prescaler>
 800893a:	4603      	mov	r3, r0
 800893c:	0a1b      	lsrs	r3, r3, #8
 800893e:	4a03      	ldr	r2, [pc, #12]	; (800894c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008944:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008948:	4618      	mov	r0, r3
 800894a:	bd98      	pop	{r3, r4, r7, pc}
 800894c:	0801f0d4 	.word	0x0801f0d4

08008950 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008950:	b598      	push	{r3, r4, r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008954:	f7ff ffd6 	bl	8008904 <HAL_RCC_GetHCLKFreq>
 8008958:	4604      	mov	r4, r0
 800895a:	f7ff f9e3 	bl	8007d24 <LL_RCC_GetAPB2Prescaler>
 800895e:	4603      	mov	r3, r0
 8008960:	0adb      	lsrs	r3, r3, #11
 8008962:	4a03      	ldr	r2, [pc, #12]	; (8008970 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008968:	fa24 f303 	lsr.w	r3, r4, r3
}
 800896c:	4618      	mov	r0, r3
 800896e:	bd98      	pop	{r3, r4, r7, pc}
 8008970:	0801f0d4 	.word	0x0801f0d4

08008974 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	091b      	lsrs	r3, r3, #4
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	4a10      	ldr	r2, [pc, #64]	; (80089c8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8008986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800898c:	f7ff f9b2 	bl	8007cf4 <LL_RCC_GetAHB3Prescaler>
 8008990:	4603      	mov	r3, r0
 8008992:	091b      	lsrs	r3, r3, #4
 8008994:	f003 030f 	and.w	r3, r3, #15
 8008998:	4a0c      	ldr	r2, [pc, #48]	; (80089cc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800899a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80089aa:	fba2 2303 	umull	r2, r3, r2, r3
 80089ae:	0c9c      	lsrs	r4, r3, #18
 80089b0:	f7fe ff58 	bl	8007864 <HAL_PWREx_GetVoltageRange>
 80089b4:	4603      	mov	r3, r0
 80089b6:	4619      	mov	r1, r3
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f80b 	bl	80089d4 <RCC_SetFlashLatency>
 80089be:	4603      	mov	r3, r0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}
 80089c8:	0801f0f4 	.word	0x0801f0f4
 80089cc:	0801f094 	.word	0x0801f094
 80089d0:	431bde83 	.word	0x431bde83

080089d4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08e      	sub	sp, #56	; 0x38
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80089de:	4a3a      	ldr	r2, [pc, #232]	; (8008ac8 <RCC_SetFlashLatency+0xf4>)
 80089e0:	f107 0320 	add.w	r3, r7, #32
 80089e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089e8:	6018      	str	r0, [r3, #0]
 80089ea:	3304      	adds	r3, #4
 80089ec:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80089ee:	4a37      	ldr	r2, [pc, #220]	; (8008acc <RCC_SetFlashLatency+0xf8>)
 80089f0:	f107 0318 	add.w	r3, r7, #24
 80089f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089f8:	6018      	str	r0, [r3, #0]
 80089fa:	3304      	adds	r3, #4
 80089fc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80089fe:	4a34      	ldr	r2, [pc, #208]	; (8008ad0 <RCC_SetFlashLatency+0xfc>)
 8008a00:	f107 030c 	add.w	r3, r7, #12
 8008a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a14:	d11b      	bne.n	8008a4e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008a16:	2300      	movs	r3, #0
 8008a18:	633b      	str	r3, [r7, #48]	; 0x30
 8008a1a:	e014      	b.n	8008a46 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	3338      	adds	r3, #56	; 0x38
 8008a22:	443b      	add	r3, r7
 8008a24:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d807      	bhi.n	8008a40 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	3338      	adds	r3, #56	; 0x38
 8008a36:	443b      	add	r3, r7
 8008a38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a3e:	e021      	b.n	8008a84 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a42:	3301      	adds	r3, #1
 8008a44:	633b      	str	r3, [r7, #48]	; 0x30
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d9e7      	bls.n	8008a1c <RCC_SetFlashLatency+0x48>
 8008a4c:	e01a      	b.n	8008a84 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008a4e:	2300      	movs	r3, #0
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a52:	e014      	b.n	8008a7e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	005b      	lsls	r3, r3, #1
 8008a58:	3338      	adds	r3, #56	; 0x38
 8008a5a:	443b      	add	r3, r7
 8008a5c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008a60:	461a      	mov	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d807      	bhi.n	8008a78 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	3338      	adds	r3, #56	; 0x38
 8008a6e:	443b      	add	r3, r7
 8008a70:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a76:	e005      	b.n	8008a84 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d9e7      	bls.n	8008a54 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <RCC_SetFlashLatency+0x100>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f023 0207 	bic.w	r2, r3, #7
 8008a8c:	4911      	ldr	r1, [pc, #68]	; (8008ad4 <RCC_SetFlashLatency+0x100>)
 8008a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a90:	4313      	orrs	r3, r2
 8008a92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a94:	f7f9 ff9e 	bl	80029d4 <HAL_GetTick>
 8008a98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008a9a:	e008      	b.n	8008aae <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008a9c:	f7f9 ff9a 	bl	80029d4 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e007      	b.n	8008abe <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <RCC_SetFlashLatency+0x100>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d1ef      	bne.n	8008a9c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3738      	adds	r7, #56	; 0x38
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	0801e824 	.word	0x0801e824
 8008acc:	0801e82c 	.word	0x0801e82c
 8008ad0:	0801e834 	.word	0x0801e834
 8008ad4:	58004000 	.word	0x58004000

08008ad8 <LL_RCC_LSE_IsReady>:
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d101      	bne.n	8008af0 <LL_RCC_LSE_IsReady+0x18>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <LL_RCC_LSE_IsReady+0x1a>
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bc80      	pop	{r7}
 8008af8:	4770      	bx	lr

08008afa <LL_RCC_SetUSARTClockSource>:
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	0c1b      	lsrs	r3, r3, #16
 8008b0e:	43db      	mvns	r3, r3
 8008b10:	401a      	ands	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bc80      	pop	{r7}
 8008b28:	4770      	bx	lr

08008b2a <LL_RCC_SetI2SClockSource>:
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <LL_RCC_SetLPUARTClockSource>:
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <LL_RCC_SetI2CClockSource>:
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008b96:	43db      	mvns	r3, r3
 8008b98:	401a      	ands	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	011b      	lsls	r3, r3, #4
 8008b9e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <LL_RCC_SetLPTIMClockSource>:
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	0c1b      	lsrs	r3, r3, #16
 8008bca:	041b      	lsls	r3, r3, #16
 8008bcc:	43db      	mvns	r3, r3
 8008bce:	401a      	ands	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	041b      	lsls	r3, r3, #16
 8008bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008bde:	bf00      	nop
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr

08008be8 <LL_RCC_SetRNGClockSource>:
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bc80      	pop	{r7}
 8008c10:	4770      	bx	lr

08008c12 <LL_RCC_SetADCClockSource>:
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <LL_RCC_SetRTCClockSource>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr

08008c66 <LL_RCC_GetRTCClockSource>:
{
 8008c66:	b480      	push	{r7}
 8008c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bc80      	pop	{r7}
 8008c7c:	4770      	bx	lr

08008c7e <LL_RCC_ForceBackupDomainReset>:
{
 8008c7e:	b480      	push	{r7}
 8008c80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bc80      	pop	{r7}
 8008c9c:	4770      	bx	lr

08008c9e <LL_RCC_ReleaseBackupDomainReset>:
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008cb6:	bf00      	nop
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr
	...

08008cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008ccc:	2300      	movs	r3, #0
 8008cce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d058      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008ce0:	f7fe fd7e 	bl	80077e0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ce4:	f7f9 fe76 	bl	80029d4 <HAL_GetTick>
 8008ce8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008cea:	e009      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cec:	f7f9 fe72 	bl	80029d4 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d902      	bls.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	74fb      	strb	r3, [r7, #19]
        break;
 8008cfe:	e006      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008d00:	4b7b      	ldr	r3, [pc, #492]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0c:	d1ee      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008d0e:	7cfb      	ldrb	r3, [r7, #19]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d13c      	bne.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008d14:	f7ff ffa7 	bl	8008c66 <LL_RCC_GetRTCClockSource>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d00f      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d30:	f7ff ffa5 	bl	8008c7e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d34:	f7ff ffb3 	bl	8008c9e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d014      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7f9 fe42 	bl	80029d4 <HAL_GetTick>
 8008d50:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008d52:	e00b      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d54:	f7f9 fe3e 	bl	80029d4 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d902      	bls.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	74fb      	strb	r3, [r7, #19]
            break;
 8008d6a:	e004      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008d6c:	f7ff feb4 	bl	8008ad8 <LL_RCC_LSE_IsReady>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d1ee      	bne.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8008d76:	7cfb      	ldrb	r3, [r7, #19]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d105      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff ff5b 	bl	8008c3c <LL_RCC_SetRTCClockSource>
 8008d86:	e004      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d88:	7cfb      	ldrb	r3, [r7, #19]
 8008d8a:	74bb      	strb	r3, [r7, #18]
 8008d8c:	e001      	b.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d8e:	7cfb      	ldrb	r3, [r7, #19]
 8008d90:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff fea9 	bl	8008afa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff fe9e 	bl	8008afa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d004      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fec0 	bl	8008b54 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d004      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fee6 	bl	8008bb6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fedb 	bl	8008bb6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d004      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff fed0 	bl	8008bb6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d004      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff fea9 	bl	8008b7e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fe9e 	bl	8008b7e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff fe93 	bl	8008b7e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d011      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff fe5e 	bl	8008b2a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e76:	d107      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d010      	beq.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff fea5 	bl	8008be8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d107      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008eb4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d011      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7ff fea3 	bl	8008c12 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed4:	d107      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008ee6:	7cbb      	ldrb	r3, [r7, #18]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	58000400 	.word	0x58000400

08008ef4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d071      	beq.n	8008fea <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7f9 f992 	bl	8002244 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008f28:	4b32      	ldr	r3, [pc, #200]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f003 0310 	and.w	r3, r3, #16
 8008f30:	2b10      	cmp	r3, #16
 8008f32:	d051      	beq.n	8008fd8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f34:	4b2f      	ldr	r3, [pc, #188]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f36:	22ca      	movs	r2, #202	; 0xca
 8008f38:	625a      	str	r2, [r3, #36]	; 0x24
 8008f3a:	4b2e      	ldr	r3, [pc, #184]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f3c:	2253      	movs	r2, #83	; 0x53
 8008f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa11 	bl	8009368 <RTC_EnterInitMode>
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d13f      	bne.n	8008fd0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008f50:	4b28      	ldr	r3, [pc, #160]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	4a27      	ldr	r2, [pc, #156]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f56:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f5e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008f60:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6859      	ldr	r1, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	4319      	orrs	r1, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	430b      	orrs	r3, r1
 8008f74:	491f      	ldr	r1, [pc, #124]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	041b      	lsls	r3, r3, #16
 8008f84:	491b      	ldr	r1, [pc, #108]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8008f8a:	4b1a      	ldr	r3, [pc, #104]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9a:	430b      	orrs	r3, r1
 8008f9c:	4915      	ldr	r1, [pc, #84]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fa14 	bl	80093d0 <RTC_ExitInitMode>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10e      	bne.n	8008fd0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008fb2:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a19      	ldr	r1, [r3, #32]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	4319      	orrs	r1, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	490a      	ldr	r1, [pc, #40]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fd0:	4b08      	ldr	r3, [pc, #32]	; (8008ff4 <HAL_RTC_Init+0x100>)
 8008fd2:	22ff      	movs	r2, #255	; 0xff
 8008fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8008fd6:	e001      	b.n	8008fdc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d103      	bne.n	8008fea <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3710      	adds	r7, #16
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	40002800 	.word	0x40002800

08008ff8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ff8:	b590      	push	{r4, r7, lr}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_RTC_SetAlarm_IT+0x1e>
 8009012:	2302      	movs	r3, #2
 8009014:	e0f3      	b.n	80091fe <HAL_RTC_SetAlarm_IT+0x206>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2202      	movs	r2, #2
 8009022:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8009026:	4b78      	ldr	r3, [pc, #480]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800902e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009036:	d06a      	beq.n	800910e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d13a      	bne.n	80090b4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800903e:	4b72      	ldr	r3, [pc, #456]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2200      	movs	r2, #0
 800904e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f9f5 	bl	800944c <RTC_ByteToBcd2>
 8009062:	4603      	mov	r3, r0
 8009064:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	785b      	ldrb	r3, [r3, #1]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f9ee 	bl	800944c <RTC_ByteToBcd2>
 8009070:	4603      	mov	r3, r0
 8009072:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009074:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	789b      	ldrb	r3, [r3, #2]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 f9e6 	bl	800944c <RTC_ByteToBcd2>
 8009080:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009082:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	78db      	ldrb	r3, [r3, #3]
 800908a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800908c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f9d8 	bl	800944c <RTC_ByteToBcd2>
 800909c:	4603      	mov	r3, r0
 800909e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80090a0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80090a8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80090ae:	4313      	orrs	r3, r2
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e02c      	b.n	800910e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80090bc:	d00d      	beq.n	80090da <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090c6:	d008      	beq.n	80090da <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80090c8:	4b4f      	ldr	r3, [pc, #316]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2200      	movs	r2, #0
 80090d8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	785b      	ldrb	r3, [r3, #1]
 80090e4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80090e6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090ec:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	78db      	ldrb	r3, [r3, #3]
 80090f2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80090f4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090fc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80090fe:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009104:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800910e:	4b3e      	ldr	r3, [pc, #248]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009110:	22ca      	movs	r2, #202	; 0xca
 8009112:	625a      	str	r2, [r3, #36]	; 0x24
 8009114:	4b3c      	ldr	r3, [pc, #240]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009116:	2253      	movs	r2, #83	; 0x53
 8009118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009122:	d12c      	bne.n	800917e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009124:	4b38      	ldr	r3, [pc, #224]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	4a37      	ldr	r2, [pc, #220]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 800912a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800912e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009130:	4b35      	ldr	r3, [pc, #212]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009132:	2201      	movs	r2, #1
 8009134:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800913c:	d107      	bne.n	800914e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	4930      	ldr	r1, [pc, #192]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009148:	4313      	orrs	r3, r2
 800914a:	644b      	str	r3, [r1, #68]	; 0x44
 800914c:	e006      	b.n	800915c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800914e:	4a2e      	ldr	r2, [pc, #184]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009154:	4a2c      	ldr	r2, [pc, #176]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800915c:	4a2a      	ldr	r2, [pc, #168]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	f043 0201 	orr.w	r2, r3, #1
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009170:	4b25      	ldr	r3, [pc, #148]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	4a24      	ldr	r2, [pc, #144]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009176:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800917a:	6193      	str	r3, [r2, #24]
 800917c:	e02b      	b.n	80091d6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	4a21      	ldr	r2, [pc, #132]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 8009184:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009188:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800918a:	4b1f      	ldr	r3, [pc, #124]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 800918c:	2202      	movs	r2, #2
 800918e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009196:	d107      	bne.n	80091a8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	699a      	ldr	r2, [r3, #24]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	4919      	ldr	r1, [pc, #100]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80091a6:	e006      	b.n	80091b6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80091a8:	4a17      	ldr	r2, [pc, #92]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80091ae:	4a16      	ldr	r2, [pc, #88]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80091b6:	4a14      	ldr	r2, [pc, #80]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	f043 0202 	orr.w	r2, r3, #2
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80091ca:	4b0f      	ldr	r3, [pc, #60]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	4a0e      	ldr	r2, [pc, #56]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091d0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80091d4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80091d6:	4b0d      	ldr	r3, [pc, #52]	; (800920c <HAL_RTC_SetAlarm_IT+0x214>)
 80091d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091dc:	4a0b      	ldr	r2, [pc, #44]	; (800920c <HAL_RTC_SetAlarm_IT+0x214>)
 80091de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091e6:	4b08      	ldr	r3, [pc, #32]	; (8009208 <HAL_RTC_SetAlarm_IT+0x210>)
 80091e8:	22ff      	movs	r2, #255	; 0xff
 80091ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	bd90      	pop	{r4, r7, pc}
 8009206:	bf00      	nop
 8009208:	40002800 	.word	0x40002800
 800920c:	58000800 	.word	0x58000800

08009210 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_RTC_DeactivateAlarm+0x18>
 8009224:	2302      	movs	r3, #2
 8009226:	e048      	b.n	80092ba <HAL_RTC_DeactivateAlarm+0xaa>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2202      	movs	r2, #2
 8009234:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009238:	4b22      	ldr	r3, [pc, #136]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800923a:	22ca      	movs	r2, #202	; 0xca
 800923c:	625a      	str	r2, [r3, #36]	; 0x24
 800923e:	4b21      	ldr	r3, [pc, #132]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009240:	2253      	movs	r2, #83	; 0x53
 8009242:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924a:	d115      	bne.n	8009278 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800924c:	4b1d      	ldr	r3, [pc, #116]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	4a1c      	ldr	r2, [pc, #112]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009252:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009256:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009258:	4b1a      	ldr	r3, [pc, #104]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800925a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925c:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800925e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009262:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	f023 0201 	bic.w	r2, r3, #1
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009270:	4b14      	ldr	r3, [pc, #80]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009272:	2201      	movs	r2, #1
 8009274:	65da      	str	r2, [r3, #92]	; 0x5c
 8009276:	e014      	b.n	80092a2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009278:	4b12      	ldr	r3, [pc, #72]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	4a11      	ldr	r2, [pc, #68]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800927e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009282:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009284:	4b0f      	ldr	r3, [pc, #60]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009288:	4a0e      	ldr	r2, [pc, #56]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800928a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800928e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009294:	f023 0202 	bic.w	r2, r3, #2
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800929c:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800929e:	2202      	movs	r2, #2
 80092a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092a4:	22ff      	movs	r2, #255	; 0xff
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	bc80      	pop	{r7}
 80092c2:	4770      	bx	lr
 80092c4:	40002800 	.word	0x40002800

080092c8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80092d0:	4b11      	ldr	r3, [pc, #68]	; (8009318 <HAL_RTC_AlarmIRQHandler+0x50>)
 80092d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	4013      	ands	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d005      	beq.n	80092f2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80092e6:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <HAL_RTC_AlarmIRQHandler+0x50>)
 80092e8:	2201      	movs	r2, #1
 80092ea:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7f9 fdfa 	bl	8002ee6 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80092fc:	4b06      	ldr	r3, [pc, #24]	; (8009318 <HAL_RTC_AlarmIRQHandler+0x50>)
 80092fe:	2202      	movs	r2, #2
 8009300:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f94a 	bl	800959c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	40002800 	.word	0x40002800

0800931c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <HAL_RTC_WaitForSynchro+0x48>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	4a0e      	ldr	r2, [pc, #56]	; (8009364 <HAL_RTC_WaitForSynchro+0x48>)
 800932a:	f023 0320 	bic.w	r3, r3, #32
 800932e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009330:	f7f9 fb50 	bl	80029d4 <HAL_GetTick>
 8009334:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009336:	e009      	b.n	800934c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009338:	f7f9 fb4c 	bl	80029d4 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009346:	d901      	bls.n	800934c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e006      	b.n	800935a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <HAL_RTC_WaitForSynchro+0x48>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d0ef      	beq.n	8009338 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40002800 	.word	0x40002800

08009368 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009374:	4b15      	ldr	r3, [pc, #84]	; (80093cc <RTC_EnterInitMode+0x64>)
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	d120      	bne.n	80093c2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <RTC_EnterInitMode+0x64>)
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	4a11      	ldr	r2, [pc, #68]	; (80093cc <RTC_EnterInitMode+0x64>)
 8009386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800938c:	f7f9 fb22 	bl	80029d4 <HAL_GetTick>
 8009390:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009392:	e00d      	b.n	80093b0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009394:	f7f9 fb1e 	bl	80029d4 <HAL_GetTick>
 8009398:	4602      	mov	r2, r0
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093a2:	d905      	bls.n	80093b0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2203      	movs	r2, #3
 80093ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80093b0:	4b06      	ldr	r3, [pc, #24]	; (80093cc <RTC_EnterInitMode+0x64>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d102      	bne.n	80093c2 <RTC_EnterInitMode+0x5a>
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d1e8      	bne.n	8009394 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40002800 	.word	0x40002800

080093d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80093dc:	4b1a      	ldr	r3, [pc, #104]	; (8009448 <RTC_ExitInitMode+0x78>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	4a19      	ldr	r2, [pc, #100]	; (8009448 <RTC_ExitInitMode+0x78>)
 80093e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093e6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80093e8:	4b17      	ldr	r3, [pc, #92]	; (8009448 <RTC_ExitInitMode+0x78>)
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10c      	bne.n	800940e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff ff91 	bl	800931c <HAL_RTC_WaitForSynchro>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01e      	beq.n	800943e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2203      	movs	r2, #3
 8009404:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	e017      	b.n	800943e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800940e:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <RTC_ExitInitMode+0x78>)
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	4a0d      	ldr	r2, [pc, #52]	; (8009448 <RTC_ExitInitMode+0x78>)
 8009414:	f023 0320 	bic.w	r3, r3, #32
 8009418:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7ff ff7e 	bl	800931c <HAL_RTC_WaitForSynchro>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2203      	movs	r2, #3
 800942a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <RTC_ExitInitMode+0x78>)
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	4a04      	ldr	r2, [pc, #16]	; (8009448 <RTC_ExitInitMode+0x78>)
 8009438:	f043 0320 	orr.w	r3, r3, #32
 800943c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800943e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	40002800 	.word	0x40002800

0800944c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800945e:	e005      	b.n	800946c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3301      	adds	r3, #1
 8009464:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	3b0a      	subs	r3, #10
 800946a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	2b09      	cmp	r3, #9
 8009470:	d8f6      	bhi.n	8009460 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	b2db      	uxtb	r3, r3
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	b2da      	uxtb	r2, r3
 800947a:	7afb      	ldrb	r3, [r7, #11]
 800947c:	4313      	orrs	r3, r2
 800947e:	b2db      	uxtb	r3, r3
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr
	...

0800948c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_RTCEx_EnableBypassShadow+0x16>
 800949e:	2302      	movs	r3, #2
 80094a0:	e01f      	b.n	80094e2 <HAL_RTCEx_EnableBypassShadow+0x56>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2202      	movs	r2, #2
 80094ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094b2:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <HAL_RTCEx_EnableBypassShadow+0x60>)
 80094b4:	22ca      	movs	r2, #202	; 0xca
 80094b6:	625a      	str	r2, [r3, #36]	; 0x24
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <HAL_RTCEx_EnableBypassShadow+0x60>)
 80094ba:	2253      	movs	r2, #83	; 0x53
 80094bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094be:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <HAL_RTCEx_EnableBypassShadow+0x60>)
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	4a0a      	ldr	r2, [pc, #40]	; (80094ec <HAL_RTCEx_EnableBypassShadow+0x60>)
 80094c4:	f043 0320 	orr.w	r3, r3, #32
 80094c8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ca:	4b08      	ldr	r3, [pc, #32]	; (80094ec <HAL_RTCEx_EnableBypassShadow+0x60>)
 80094cc:	22ff      	movs	r2, #255	; 0xff
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr
 80094ec:	40002800 	.word	0x40002800

080094f0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_RTCEx_SetSSRU_IT+0x16>
 8009502:	2302      	movs	r3, #2
 8009504:	e027      	b.n	8009556 <HAL_RTCEx_SetSSRU_IT+0x66>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009516:	4b12      	ldr	r3, [pc, #72]	; (8009560 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009518:	22ca      	movs	r2, #202	; 0xca
 800951a:	625a      	str	r2, [r3, #36]	; 0x24
 800951c:	4b10      	ldr	r3, [pc, #64]	; (8009560 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800951e:	2253      	movs	r2, #83	; 0x53
 8009520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009522:	4b0f      	ldr	r3, [pc, #60]	; (8009560 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	4a0e      	ldr	r2, [pc, #56]	; (8009560 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800952e:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009534:	4a0b      	ldr	r2, [pc, #44]	; (8009564 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800953a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800953e:	4b08      	ldr	r3, [pc, #32]	; (8009560 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009540:	22ff      	movs	r2, #255	; 0xff
 8009542:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr
 8009560:	40002800 	.word	0x40002800
 8009564:	58000800 	.word	0x58000800

08009568 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009570:	4b09      	ldr	r3, [pc, #36]	; (8009598 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800957e:	2240      	movs	r2, #64	; 0x40
 8009580:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7f9 fcb9 	bl	8002efa <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	40002800 	.word	0x40002800

0800959c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr
	...

080095b0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80095bc:	4b07      	ldr	r3, [pc, #28]	; (80095dc <HAL_RTCEx_BKUPWrite+0x2c>)
 80095be:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4413      	add	r3, r2
 80095c8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	601a      	str	r2, [r3, #0]
}
 80095d0:	bf00      	nop
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	4000b100 	.word	0x4000b100

080095e0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <HAL_RTCEx_BKUPRead+0x28>)
 80095ec:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4413      	add	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	4000b100 	.word	0x4000b100

0800960c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e0c6      	b.n	80097ac <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	2b00      	cmp	r3, #0
 8009624:	d108      	bne.n	8009638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800962e:	d009      	beq.n	8009644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	61da      	str	r2, [r3, #28]
 8009636:	e005      	b.n	8009644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d106      	bne.n	800965e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7f8 fe9d 	bl	8002398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009674:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800967e:	d902      	bls.n	8009686 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e002      	b.n	800968c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800968a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009694:	d007      	beq.n	80096a6 <HAL_SPI_Init+0x9a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800969e:	d002      	beq.n	80096a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e8:	ea42 0103 	orr.w	r1, r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009704:	d11b      	bne.n	800973e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10b      	bne.n	8009726 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009716:	d903      	bls.n	8009720 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2202      	movs	r2, #2
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
 800971e:	e002      	b.n	8009726 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972a:	2b02      	cmp	r3, #2
 800972c:	d107      	bne.n	800973e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	0c1b      	lsrs	r3, r3, #16
 8009744:	f003 0204 	and.w	r2, r3, #4
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	f003 0310 	and.w	r3, r3, #16
 8009750:	431a      	orrs	r2, r3
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009756:	f003 0308 	and.w	r3, r3, #8
 800975a:	431a      	orrs	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009764:	ea42 0103 	orr.w	r1, r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800977e:	d105      	bne.n	800978c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	b292      	uxth	r2, r2
 800978a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	69da      	ldr	r2, [r3, #28]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800979a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <LL_PWR_SetRadioBusyTrigger>:
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80097bc:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80097c4:	4904      	ldr	r1, [pc, #16]	; (80097d8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	608b      	str	r3, [r1, #8]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bc80      	pop	{r7}
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	58000400 	.word	0x58000400

080097dc <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80097e0:	4b05      	ldr	r3, [pc, #20]	; (80097f8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80097e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097e6:	4a04      	ldr	r2, [pc, #16]	; (80097f8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80097e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80097f0:	bf00      	nop
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bc80      	pop	{r7}
 80097f6:	4770      	bx	lr
 80097f8:	58000400 	.word	0x58000400

080097fc <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009800:	4b05      	ldr	r3, [pc, #20]	; (8009818 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009806:	4a04      	ldr	r2, [pc, #16]	; (8009818 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009808:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800980c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009810:	bf00      	nop
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr
 8009818:	58000400 	.word	0x58000400

0800981c <LL_PWR_ClearFlag_RFBUSY>:
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009820:	4b03      	ldr	r3, [pc, #12]	; (8009830 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009826:	619a      	str	r2, [r3, #24]
}
 8009828:	bf00      	nop
 800982a:	46bd      	mov	sp, r7
 800982c:	bc80      	pop	{r7}
 800982e:	4770      	bx	lr
 8009830:	58000400 	.word	0x58000400

08009834 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b02      	cmp	r3, #2
 8009842:	d101      	bne.n	8009848 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	58000400 	.word	0x58000400

08009858 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009858:	b480      	push	{r7}
 800985a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800985c:	4b06      	ldr	r3, [pc, #24]	; (8009878 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b04      	cmp	r3, #4
 8009866:	d101      	bne.n	800986c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009868:	2301      	movs	r3, #1
 800986a:	e000      	b.n	800986e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	58000400 	.word	0x58000400

0800987c <LL_RCC_RF_DisableReset>:
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800988c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009894:	bf00      	nop
 8009896:	46bd      	mov	sp, r7
 8009898:	bc80      	pop	{r7}
 800989a:	4770      	bx	lr

0800989c <LL_RCC_IsRFUnderReset>:
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80098a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b0:	d101      	bne.n	80098b6 <LL_RCC_IsRFUnderReset+0x1a>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <LL_RCC_IsRFUnderReset+0x1c>
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bc80      	pop	{r7}
 80098be:	4770      	bx	lr

080098c0 <LL_EXTI_EnableIT_32_63>:
{
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80098c8:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80098ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80098ce:	4905      	ldr	r1, [pc, #20]	; (80098e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4313      	orrs	r3, r2
 80098d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	58000800 	.word	0x58000800

080098e8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	73fb      	strb	r3, [r7, #15]
    return status;
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	e052      	b.n	80099a4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	799b      	ldrb	r3, [r3, #6]
 8009906:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <HAL_SUBGHZ_Init+0x2c>
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d109      	bne.n	8009928 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7f8 feae 	bl	800267c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009920:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009924:	f7ff ffcc 	bl	80098c0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d126      	bne.n	800997c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2202      	movs	r2, #2
 8009932:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009934:	f7ff ffa2 	bl	800987c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009938:	4b1c      	ldr	r3, [pc, #112]	; (80099ac <HAL_SUBGHZ_Init+0xc4>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	4613      	mov	r3, r2
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	0cdb      	lsrs	r3, r3, #19
 8009946:	2264      	movs	r2, #100	; 0x64
 8009948:	fb02 f303 	mul.w	r3, r2, r3
 800994c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	609a      	str	r2, [r3, #8]
        break;
 800995e:	e007      	b.n	8009970 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	3b01      	subs	r3, #1
 8009964:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009966:	f7ff ff99 	bl	800989c <LL_RCC_IsRFUnderReset>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1ee      	bne.n	800994e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009970:	f7ff ff34 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009974:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009978:	f7ff ff1c 	bl	80097b4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800997c:	f7ff ff4e 	bl	800981c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10a      	bne.n	800999c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 faac 	bl	8009ee8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	719a      	strb	r2, [r3, #6]

  return status;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000004 	.word	0x20000004

080099b0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	461a      	mov	r2, r3
 80099bc:	460b      	mov	r3, r1
 80099be:	817b      	strh	r3, [r7, #10]
 80099c0:	4613      	mov	r3, r2
 80099c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	799b      	ldrb	r3, [r3, #6]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d14a      	bne.n	8009a64 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	795b      	ldrb	r3, [r3, #5]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_SUBGHZ_WriteRegisters+0x2a>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e045      	b.n	8009a66 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2202      	movs	r2, #2
 80099e4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 fb4c 	bl	800a084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80099ec:	f7ff ff06 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80099f0:	210d      	movs	r1, #13
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 fa98 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80099f8:	897b      	ldrh	r3, [r7, #10]
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	4619      	mov	r1, r3
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f000 fa90 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009a08:	897b      	ldrh	r3, [r7, #10]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fa8a 	bl	8009f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009a14:	2300      	movs	r3, #0
 8009a16:	82bb      	strh	r3, [r7, #20]
 8009a18:	e00a      	b.n	8009a30 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009a1a:	8abb      	ldrh	r3, [r7, #20]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4413      	add	r3, r2
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4619      	mov	r1, r3
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f000 fa7f 	bl	8009f28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009a2a:	8abb      	ldrh	r3, [r7, #20]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	82bb      	strh	r3, [r7, #20]
 8009a30:	8aba      	ldrh	r2, [r7, #20]
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d3f0      	bcc.n	8009a1a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009a38:	f7ff fed0 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 fb45 	bl	800a0cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
 8009a4e:	e001      	b.n	8009a54 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2201      	movs	r2, #1
 8009a58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	715a      	strb	r2, [r3, #5]

    return status;
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	e000      	b.n	8009a66 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009a64:	2302      	movs	r3, #2
  }
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b088      	sub	sp, #32
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	461a      	mov	r2, r3
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	817b      	strh	r3, [r7, #10]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	799b      	ldrb	r3, [r3, #6]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d14a      	bne.n	8009b26 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	795b      	ldrb	r3, [r3, #5]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e045      	b.n	8009b28 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	f000 faee 	bl	800a084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009aa8:	f7ff fea8 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009aac:	211d      	movs	r1, #29
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fa3a 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009ab4:	897b      	ldrh	r3, [r7, #10]
 8009ab6:	0a1b      	lsrs	r3, r3, #8
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	4619      	mov	r1, r3
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fa32 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009ac4:	897b      	ldrh	r3, [r7, #10]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fa2c 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f000 fa28 	bl	8009f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	82fb      	strh	r3, [r7, #22]
 8009adc:	e009      	b.n	8009af2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009ade:	69b9      	ldr	r1, [r7, #24]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 fa77 	bl	8009fd4 <SUBGHZSPI_Receive>
      pData++;
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	3301      	adds	r3, #1
 8009af0:	82fb      	strh	r3, [r7, #22]
 8009af2:	8afa      	ldrh	r2, [r7, #22]
 8009af4:	893b      	ldrh	r3, [r7, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d3f1      	bcc.n	8009ade <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009afa:	f7ff fe6f 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 fae4 	bl	800a0cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	77fb      	strb	r3, [r7, #31]
 8009b10:	e001      	b.n	8009b16 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	715a      	strb	r2, [r3, #5]

    return status;
 8009b22:	7ffb      	ldrb	r3, [r7, #31]
 8009b24:	e000      	b.n	8009b28 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009b26:	2302      	movs	r3, #2
  }
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	72fb      	strb	r3, [r7, #11]
 8009b40:	4613      	mov	r3, r2
 8009b42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	799b      	ldrb	r3, [r3, #6]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d14a      	bne.n	8009be4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	795b      	ldrb	r3, [r3, #5]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d101      	bne.n	8009b5a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009b56:	2302      	movs	r3, #2
 8009b58:	e045      	b.n	8009be6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f000 fa8f 	bl	800a084 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	2b84      	cmp	r3, #132	; 0x84
 8009b6a:	d002      	beq.n	8009b72 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	2b94      	cmp	r3, #148	; 0x94
 8009b70:	d103      	bne.n	8009b7a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	711a      	strb	r2, [r3, #4]
 8009b78:	e002      	b.n	8009b80 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009b80:	f7ff fe3c 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009b84:	7afb      	ldrb	r3, [r7, #11]
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f9cd 	bl	8009f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009b8e:	2300      	movs	r3, #0
 8009b90:	82bb      	strh	r3, [r7, #20]
 8009b92:	e00a      	b.n	8009baa <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009b94:	8abb      	ldrh	r3, [r7, #20]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	4413      	add	r3, r2
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 f9c2 	bl	8009f28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009ba4:	8abb      	ldrh	r3, [r7, #20]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	82bb      	strh	r3, [r7, #20]
 8009baa:	8aba      	ldrh	r2, [r7, #20]
 8009bac:	893b      	ldrh	r3, [r7, #8]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3f0      	bcc.n	8009b94 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009bb2:	f7ff fe13 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009bb6:	7afb      	ldrb	r3, [r7, #11]
 8009bb8:	2b84      	cmp	r3, #132	; 0x84
 8009bba:	d002      	beq.n	8009bc2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 fa85 	bl	800a0cc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]
 8009bce:	e001      	b.n	8009bd4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	715a      	strb	r2, [r3, #5]

    return status;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	e000      	b.n	8009be6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009be4:	2302      	movs	r3, #2
  }
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b088      	sub	sp, #32
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	607a      	str	r2, [r7, #4]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	72fb      	strb	r3, [r7, #11]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	799b      	ldrb	r3, [r3, #6]
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d13d      	bne.n	8009c8c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	795b      	ldrb	r3, [r3, #5]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e038      	b.n	8009c8e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fa2e 	bl	800a084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009c28:	f7ff fde8 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009c2c:	7afb      	ldrb	r3, [r7, #11]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f979 	bl	8009f28 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009c36:	2100      	movs	r1, #0
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f975 	bl	8009f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009c3e:	2300      	movs	r3, #0
 8009c40:	82fb      	strh	r3, [r7, #22]
 8009c42:	e009      	b.n	8009c58 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009c44:	69b9      	ldr	r1, [r7, #24]
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 f9c4 	bl	8009fd4 <SUBGHZSPI_Receive>
      pData++;
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009c52:	8afb      	ldrh	r3, [r7, #22]
 8009c54:	3301      	adds	r3, #1
 8009c56:	82fb      	strh	r3, [r7, #22]
 8009c58:	8afa      	ldrh	r2, [r7, #22]
 8009c5a:	893b      	ldrh	r3, [r7, #8]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d3f1      	bcc.n	8009c44 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009c60:	f7ff fdbc 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fa31 	bl	800a0cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	e001      	b.n	8009c7c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	715a      	strb	r2, [r3, #5]

    return status;
 8009c88:	7ffb      	ldrb	r3, [r7, #31]
 8009c8a:	e000      	b.n	8009c8e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009c8c:	2302      	movs	r3, #2
  }
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3720      	adds	r7, #32
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b086      	sub	sp, #24
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	60f8      	str	r0, [r7, #12]
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	72fb      	strb	r3, [r7, #11]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	799b      	ldrb	r3, [r3, #6]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d13e      	bne.n	8009d32 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	795b      	ldrb	r3, [r3, #5]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d101      	bne.n	8009cc0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	e039      	b.n	8009d34 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 f9dc 	bl	800a084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ccc:	f7ff fd96 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009cd0:	210e      	movs	r1, #14
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f000 f928 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 f923 	bl	8009f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	82bb      	strh	r3, [r7, #20]
 8009ce6:	e00a      	b.n	8009cfe <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009ce8:	8abb      	ldrh	r3, [r7, #20]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 f918 	bl	8009f28 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009cf8:	8abb      	ldrh	r3, [r7, #20]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	82bb      	strh	r3, [r7, #20]
 8009cfe:	8aba      	ldrh	r2, [r7, #20]
 8009d00:	893b      	ldrh	r3, [r7, #8]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d3f0      	bcc.n	8009ce8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009d06:	f7ff fd69 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 f9de 	bl	800a0cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	75fb      	strb	r3, [r7, #23]
 8009d1c:	e001      	b.n	8009d22 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	715a      	strb	r2, [r3, #5]

    return status;
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	e000      	b.n	8009d34 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009d32:	2302      	movs	r3, #2
  }
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b088      	sub	sp, #32
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	607a      	str	r2, [r7, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	460b      	mov	r3, r1
 8009d4a:	72fb      	strb	r3, [r7, #11]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	799b      	ldrb	r3, [r3, #6]
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d141      	bne.n	8009de2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	795b      	ldrb	r3, [r3, #5]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e03c      	b.n	8009de4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f987 	bl	800a084 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009d76:	f7ff fd41 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009d7a:	211e      	movs	r1, #30
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f8d3 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009d82:	7afb      	ldrb	r3, [r7, #11]
 8009d84:	4619      	mov	r1, r3
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 f8ce 	bl	8009f28 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f8ca 	bl	8009f28 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009d94:	2300      	movs	r3, #0
 8009d96:	82fb      	strh	r3, [r7, #22]
 8009d98:	e009      	b.n	8009dae <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009d9a:	69b9      	ldr	r1, [r7, #24]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 f919 	bl	8009fd4 <SUBGHZSPI_Receive>
      pData++;
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	3301      	adds	r3, #1
 8009da6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009da8:	8afb      	ldrh	r3, [r7, #22]
 8009daa:	3301      	adds	r3, #1
 8009dac:	82fb      	strh	r3, [r7, #22]
 8009dae:	8afa      	ldrh	r2, [r7, #22]
 8009db0:	893b      	ldrh	r3, [r7, #8]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d3f1      	bcc.n	8009d9a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009db6:	f7ff fd11 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 f986 	bl	800a0cc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	77fb      	strb	r3, [r7, #31]
 8009dcc:	e001      	b.n	8009dd2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	715a      	strb	r2, [r3, #5]

    return status;
 8009dde:	7ffb      	ldrb	r3, [r7, #31]
 8009de0:	e000      	b.n	8009de4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009de2:	2302      	movs	r3, #2
  }
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009df4:	2300      	movs	r3, #0
 8009df6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009df8:	f107 020c 	add.w	r2, r7, #12
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	2112      	movs	r1, #18
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff fef4 	bl	8009bee <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009e06:	7b3b      	ldrb	r3, [r7, #12]
 8009e08:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009e0a:	89fb      	ldrh	r3, [r7, #14]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	b21a      	sxth	r2, r3
 8009e10:	7b7b      	ldrb	r3, [r7, #13]
 8009e12:	b21b      	sxth	r3, r3
 8009e14:	4313      	orrs	r3, r2
 8009e16:	b21b      	sxth	r3, r3
 8009e18:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8009e1a:	f107 020c 	add.w	r2, r7, #12
 8009e1e:	2302      	movs	r3, #2
 8009e20:	2102      	movs	r1, #2
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff fe84 	bl	8009b30 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009e28:	89fb      	ldrh	r3, [r7, #14]
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f012 fe8a 	bl	801cb4c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8009e38:	89fb      	ldrh	r3, [r7, #14]
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f012 fe90 	bl	801cb68 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009e48:	89fb      	ldrh	r3, [r7, #14]
 8009e4a:	f003 0304 	and.w	r3, r3, #4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f012 fee0 	bl	801cc18 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8009e58:	89fb      	ldrh	r3, [r7, #14]
 8009e5a:	f003 0308 	and.w	r3, r3, #8
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f012 fee6 	bl	801cc34 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009e68:	89fb      	ldrh	r3, [r7, #14]
 8009e6a:	f003 0310 	and.w	r3, r3, #16
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f012 feec 	bl	801cc50 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8009e78:	89fb      	ldrh	r3, [r7, #14]
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f012 feba 	bl	801cbfc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f012 fe76 	bl	801cb84 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8009e98:	89fb      	ldrh	r3, [r7, #14]
 8009e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009ea2:	89fb      	ldrh	r3, [r7, #14]
 8009ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d004      	beq.n	8009eb6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8009eac:	2101      	movs	r1, #1
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f012 fe76 	bl	801cba0 <HAL_SUBGHZ_CADStatusCallback>
 8009eb4:	e003      	b.n	8009ebe <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f012 fe71 	bl	801cba0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8009ebe:	89fb      	ldrh	r3, [r7, #14]
 8009ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f012 fe87 	bl	801cbdc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8009ece:	89fb      	ldrh	r3, [r7, #14]
 8009ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f012 fec7 	bl	801cc6c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009ef0:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <SUBGHZSPI_Init+0x3c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a0b      	ldr	r2, [pc, #44]	; (8009f24 <SUBGHZSPI_Init+0x3c>)
 8009ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009efa:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009efc:	4a09      	ldr	r2, [pc, #36]	; (8009f24 <SUBGHZSPI_Init+0x3c>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009f04:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009f06:	4b07      	ldr	r3, [pc, #28]	; (8009f24 <SUBGHZSPI_Init+0x3c>)
 8009f08:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009f0c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009f0e:	4b05      	ldr	r3, [pc, #20]	; (8009f24 <SUBGHZSPI_Init+0x3c>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a04      	ldr	r2, [pc, #16]	; (8009f24 <SUBGHZSPI_Init+0x3c>)
 8009f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f18:	6013      	str	r3, [r2, #0]
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr
 8009f24:	58010000 	.word	0x58010000

08009f28 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009f38:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <SUBGHZSPI_Transmit+0xa0>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	0cdb      	lsrs	r3, r3, #19
 8009f46:	2264      	movs	r2, #100	; 0x64
 8009f48:	fb02 f303 	mul.w	r3, r2, r3
 8009f4c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d105      	bne.n	8009f60 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	609a      	str	r2, [r3, #8]
      break;
 8009f5e:	e008      	b.n	8009f72 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009f66:	4b19      	ldr	r3, [pc, #100]	; (8009fcc <SUBGHZSPI_Transmit+0xa4>)
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d1ed      	bne.n	8009f4e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009f72:	4b17      	ldr	r3, [pc, #92]	; (8009fd0 <SUBGHZSPI_Transmit+0xa8>)
 8009f74:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	78fa      	ldrb	r2, [r7, #3]
 8009f7a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009f7c:	4b12      	ldr	r3, [pc, #72]	; (8009fc8 <SUBGHZSPI_Transmit+0xa0>)
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	4613      	mov	r3, r2
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	1a9b      	subs	r3, r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	0cdb      	lsrs	r3, r3, #19
 8009f8a:	2264      	movs	r2, #100	; 0x64
 8009f8c:	fb02 f303 	mul.w	r3, r2, r3
 8009f90:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d105      	bne.n	8009fa4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	609a      	str	r2, [r3, #8]
      break;
 8009fa2:	e008      	b.n	8009fb6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009faa:	4b08      	ldr	r3, [pc, #32]	; (8009fcc <SUBGHZSPI_Transmit+0xa4>)
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d1ed      	bne.n	8009f92 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8009fb6:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <SUBGHZSPI_Transmit+0xa4>)
 8009fb8:	68db      	ldr	r3, [r3, #12]

  return status;
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bc80      	pop	{r7}
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	20000004 	.word	0x20000004
 8009fcc:	58010000 	.word	0x58010000
 8009fd0:	5801000c 	.word	0x5801000c

08009fd4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009fe2:	4b25      	ldr	r3, [pc, #148]	; (800a078 <SUBGHZSPI_Receive+0xa4>)
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	0cdb      	lsrs	r3, r3, #19
 8009ff0:	2264      	movs	r2, #100	; 0x64
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d105      	bne.n	800a00a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009ffe:	2301      	movs	r3, #1
 800a000:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	609a      	str	r2, [r3, #8]
      break;
 800a008:	e008      	b.n	800a01c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a010:	4b1a      	ldr	r3, [pc, #104]	; (800a07c <SUBGHZSPI_Receive+0xa8>)
 800a012:	689b      	ldr	r3, [r3, #8]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d1ed      	bne.n	8009ff8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a01c:	4b18      	ldr	r3, [pc, #96]	; (800a080 <SUBGHZSPI_Receive+0xac>)
 800a01e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	22ff      	movs	r2, #255	; 0xff
 800a024:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a026:	4b14      	ldr	r3, [pc, #80]	; (800a078 <SUBGHZSPI_Receive+0xa4>)
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	4613      	mov	r3, r2
 800a02c:	00db      	lsls	r3, r3, #3
 800a02e:	1a9b      	subs	r3, r3, r2
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	0cdb      	lsrs	r3, r3, #19
 800a034:	2264      	movs	r2, #100	; 0x64
 800a036:	fb02 f303 	mul.w	r3, r2, r3
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d105      	bne.n	800a04e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	609a      	str	r2, [r3, #8]
      break;
 800a04c:	e008      	b.n	800a060 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3b01      	subs	r3, #1
 800a052:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a054:	4b09      	ldr	r3, [pc, #36]	; (800a07c <SUBGHZSPI_Receive+0xa8>)
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d1ed      	bne.n	800a03c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a060:	4b06      	ldr	r3, [pc, #24]	; (800a07c <SUBGHZSPI_Receive+0xa8>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	b2da      	uxtb	r2, r3
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	701a      	strb	r2, [r3, #0]

  return status;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20000004 	.word	0x20000004
 800a07c:	58010000 	.word	0x58010000
 800a080:	5801000c 	.word	0x5801000c

0800a084 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	791b      	ldrb	r3, [r3, #4]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d111      	bne.n	800a0b8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a094:	4b0c      	ldr	r3, [pc, #48]	; (800a0c8 <SUBGHZ_CheckDeviceReady+0x44>)
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	4613      	mov	r3, r2
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	4413      	add	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	0c1b      	lsrs	r3, r3, #16
 800a0a2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0a4:	f7ff fbaa 	bl	80097fc <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1f9      	bne.n	800a0a8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a0b4:	f7ff fb92 	bl	80097dc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f807 	bl	800a0cc <SUBGHZ_WaitOnBusy>
 800a0be:	4603      	mov	r3, r0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000004 	.word	0x20000004

0800a0cc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a0d8:	4b12      	ldr	r3, [pc, #72]	; (800a124 <SUBGHZ_WaitOnBusy+0x58>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	4413      	add	r3, r2
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	0d1b      	lsrs	r3, r3, #20
 800a0e6:	2264      	movs	r2, #100	; 0x64
 800a0e8:	fb02 f303 	mul.w	r3, r2, r3
 800a0ec:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a0ee:	f7ff fbb3 	bl	8009858 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a0f2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2202      	movs	r2, #2
 800a102:	609a      	str	r2, [r3, #8]
      break;
 800a104:	e009      	b.n	800a11a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3b01      	subs	r3, #1
 800a10a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a10c:	f7ff fb92 	bl	8009834 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a110:	4602      	mov	r2, r0
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	4013      	ands	r3, r2
 800a116:	2b01      	cmp	r3, #1
 800a118:	d0e9      	beq.n	800a0ee <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a11a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3718      	adds	r7, #24
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	20000004 	.word	0x20000004

0800a128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e049      	b.n	800a1ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7f8 fd3c 	bl	8002bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3304      	adds	r3, #4
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	f000 f9c6 	bl	800a4f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d001      	beq.n	800a1f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e036      	b.n	800a25e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0201 	orr.w	r2, r2, #1
 800a206:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a16      	ldr	r2, [pc, #88]	; (800a268 <HAL_TIM_Base_Start_IT+0x90>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d004      	beq.n	800a21c <HAL_TIM_Base_Start_IT+0x44>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21a:	d115      	bne.n	800a248 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689a      	ldr	r2, [r3, #8]
 800a222:	4b12      	ldr	r3, [pc, #72]	; (800a26c <HAL_TIM_Base_Start_IT+0x94>)
 800a224:	4013      	ands	r3, r2
 800a226:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b06      	cmp	r3, #6
 800a22c:	d015      	beq.n	800a25a <HAL_TIM_Base_Start_IT+0x82>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a234:	d011      	beq.n	800a25a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f042 0201 	orr.w	r2, r2, #1
 800a244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a246:	e008      	b.n	800a25a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	e000      	b.n	800a25c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a25a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	40012c00 	.word	0x40012c00
 800a26c:	00010007 	.word	0x00010007

0800a270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b02      	cmp	r3, #2
 800a284:	d122      	bne.n	800a2cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b02      	cmp	r3, #2
 800a292:	d11b      	bne.n	800a2cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f06f 0202 	mvn.w	r2, #2
 800a29c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	699b      	ldr	r3, [r3, #24]
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f904 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a2b8:	e005      	b.n	800a2c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f8f7 	bl	800a4ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f906 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d122      	bne.n	800a320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f003 0304 	and.w	r3, r3, #4
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d11b      	bne.n	800a320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f06f 0204 	mvn.w	r2, #4
 800a2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	699b      	ldr	r3, [r3, #24]
 800a2fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f8da 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a30c:	e005      	b.n	800a31a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f8cd 	bl	800a4ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f8dc 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	2b08      	cmp	r3, #8
 800a32c:	d122      	bne.n	800a374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f003 0308 	and.w	r3, r3, #8
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d11b      	bne.n	800a374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f06f 0208 	mvn.w	r2, #8
 800a344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2204      	movs	r2, #4
 800a34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f003 0303 	and.w	r3, r3, #3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f8b0 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a360:	e005      	b.n	800a36e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f8a3 	bl	800a4ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 f8b2 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f003 0310 	and.w	r3, r3, #16
 800a37e:	2b10      	cmp	r3, #16
 800a380:	d122      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 0310 	and.w	r3, r3, #16
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d11b      	bne.n	800a3c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f06f 0210 	mvn.w	r2, #16
 800a398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2208      	movs	r2, #8
 800a39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	69db      	ldr	r3, [r3, #28]
 800a3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f886 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a3b4:	e005      	b.n	800a3c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f879 	bl	800a4ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f888 	bl	800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d10e      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	f003 0301 	and.w	r3, r3, #1
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d107      	bne.n	800a3f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f06f 0201 	mvn.w	r2, #1
 800a3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7f7 fd72 	bl	8001ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fe:	2b80      	cmp	r3, #128	; 0x80
 800a400:	d10e      	bne.n	800a420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40c:	2b80      	cmp	r3, #128	; 0x80
 800a40e:	d107      	bne.n	800a420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f8d7 	bl	800a5ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42e:	d10e      	bne.n	800a44e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	2b80      	cmp	r3, #128	; 0x80
 800a43c:	d107      	bne.n	800a44e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f8c9 	bl	800a5e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b40      	cmp	r3, #64	; 0x40
 800a45a:	d10e      	bne.n	800a47a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a466:	2b40      	cmp	r3, #64	; 0x40
 800a468:	d107      	bne.n	800a47a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f835 	bl	800a4e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	f003 0320 	and.w	r3, r3, #32
 800a484:	2b20      	cmp	r3, #32
 800a486:	d10e      	bne.n	800a4a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	f003 0320 	and.w	r3, r3, #32
 800a492:	2b20      	cmp	r3, #32
 800a494:	d107      	bne.n	800a4a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f06f 0220 	mvn.w	r2, #32
 800a49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f88b 	bl	800a5bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4a6:	bf00      	nop
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b083      	sub	sp, #12
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bc80      	pop	{r7}
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bc80      	pop	{r7}
 800a4e2:	4770      	bx	lr

0800a4e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bc80      	pop	{r7}
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a29      	ldr	r2, [pc, #164]	; (800a5b0 <TIM_Base_SetConfig+0xb8>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d003      	beq.n	800a518 <TIM_Base_SetConfig+0x20>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a516:	d108      	bne.n	800a52a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a20      	ldr	r2, [pc, #128]	; (800a5b0 <TIM_Base_SetConfig+0xb8>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00b      	beq.n	800a54a <TIM_Base_SetConfig+0x52>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a538:	d007      	beq.n	800a54a <TIM_Base_SetConfig+0x52>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a1d      	ldr	r2, [pc, #116]	; (800a5b4 <TIM_Base_SetConfig+0xbc>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d003      	beq.n	800a54a <TIM_Base_SetConfig+0x52>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <TIM_Base_SetConfig+0xc0>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d108      	bne.n	800a55c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a0b      	ldr	r2, [pc, #44]	; (800a5b0 <TIM_Base_SetConfig+0xb8>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d007      	beq.n	800a598 <TIM_Base_SetConfig+0xa0>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a0a      	ldr	r2, [pc, #40]	; (800a5b4 <TIM_Base_SetConfig+0xbc>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d003      	beq.n	800a598 <TIM_Base_SetConfig+0xa0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <TIM_Base_SetConfig+0xc0>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d103      	bne.n	800a5a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	691a      	ldr	r2, [r3, #16]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	615a      	str	r2, [r3, #20]
}
 800a5a6:	bf00      	nop
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bc80      	pop	{r7}
 800a5ae:	4770      	bx	lr
 800a5b0:	40012c00 	.word	0x40012c00
 800a5b4:	40014400 	.word	0x40014400
 800a5b8:	40014800 	.word	0x40014800

0800a5bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5c4:	bf00      	nop
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bc80      	pop	{r7}
 800a5cc:	4770      	bx	lr

0800a5ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr

0800a5f2 <LL_RCC_GetUSARTClockSource>:
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a5fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	401a      	ands	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	041b      	lsls	r3, r3, #16
 800a60a:	4313      	orrs	r3, r2
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr

0800a616 <LL_RCC_GetLPUARTClockSource>:
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a61e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a622:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4013      	ands	r3, r2
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr

0800a634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e042      	b.n	800a6cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d106      	bne.n	800a65e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7f8 fe45 	bl	80032e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2224      	movs	r2, #36	; 0x24
 800a662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0201 	bic.w	r2, r2, #1
 800a674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fc3a 	bl	800aef0 <UART_SetConfig>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d101      	bne.n	800a686 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e022      	b.n	800a6cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fea2 	bl	800b3d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685a      	ldr	r2, [r3, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f042 0201 	orr.w	r2, r2, #1
 800a6c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 ff28 	bl	800b51a <UART_CheckIdleState>
 800a6ca:	4603      	mov	r3, r0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08a      	sub	sp, #40	; 0x28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e8:	2b20      	cmp	r3, #32
 800a6ea:	d137      	bne.n	800a75c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <HAL_UART_Receive_IT+0x24>
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e030      	b.n	800a75e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <HAL_UART_Receive_IT+0x94>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d01f      	beq.n	800a74c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d018      	beq.n	800a74c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	613b      	str	r3, [r7, #16]
   return(result);
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a72e:	627b      	str	r3, [r7, #36]	; 0x24
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	623b      	str	r3, [r7, #32]
 800a73a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	69f9      	ldr	r1, [r7, #28]
 800a73e:	6a3a      	ldr	r2, [r7, #32]
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	61bb      	str	r3, [r7, #24]
   return(result);
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e6      	bne.n	800a71a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	461a      	mov	r2, r3
 800a750:	68b9      	ldr	r1, [r7, #8]
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fff8 	bl	800b748 <UART_Start_Receive_IT>
 800a758:	4603      	mov	r3, r0
 800a75a:	e000      	b.n	800a75e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a75c:	2302      	movs	r3, #2
  }
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3728      	adds	r7, #40	; 0x28
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	40008000 	.word	0x40008000

0800a76c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08a      	sub	sp, #40	; 0x28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	4613      	mov	r3, r2
 800a778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a780:	2b20      	cmp	r3, #32
 800a782:	d167      	bne.n	800a854 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <HAL_UART_Transmit_DMA+0x24>
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e060      	b.n	800a856 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	88fa      	ldrh	r2, [r7, #6]
 800a79e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	88fa      	ldrh	r2, [r7, #6]
 800a7a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2221      	movs	r2, #33	; 0x21
 800a7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d028      	beq.n	800a814 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c6:	4a26      	ldr	r2, [pc, #152]	; (800a860 <HAL_UART_Transmit_DMA+0xf4>)
 800a7c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ce:	4a25      	ldr	r2, [pc, #148]	; (800a864 <HAL_UART_Transmit_DMA+0xf8>)
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7d6:	4a24      	ldr	r2, [pc, #144]	; (800a868 <HAL_UART_Transmit_DMA+0xfc>)
 800a7d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7de:	2200      	movs	r2, #0
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3328      	adds	r3, #40	; 0x28
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	88fb      	ldrh	r3, [r7, #6]
 800a7f6:	f7fa fbf7 	bl	8004fe8 <HAL_DMA_Start_IT>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d009      	beq.n	800a814 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2210      	movs	r2, #16
 800a804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e020      	b.n	800a856 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2240      	movs	r2, #64	; 0x40
 800a81a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	e853 3f00 	ldrex	r3, [r3]
 800a82a:	613b      	str	r3, [r7, #16]
   return(result);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	3308      	adds	r3, #8
 800a83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a83c:	623a      	str	r2, [r7, #32]
 800a83e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	69f9      	ldr	r1, [r7, #28]
 800a842:	6a3a      	ldr	r2, [r7, #32]
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	61bb      	str	r3, [r7, #24]
   return(result);
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e5      	bne.n	800a81c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	e000      	b.n	800a856 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a854:	2302      	movs	r3, #2
  }
}
 800a856:	4618      	mov	r0, r3
 800a858:	3728      	adds	r7, #40	; 0x28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	0800bad3 	.word	0x0800bad3
 800a864:	0800bb6d 	.word	0x0800bb6d
 800a868:	0800bb89 	.word	0x0800bb89

0800a86c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b0ba      	sub	sp, #232	; 0xe8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	69db      	ldr	r3, [r3, #28]
 800a87a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a896:	f640 030f 	movw	r3, #2063	; 0x80f
 800a89a:	4013      	ands	r3, r2
 800a89c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a8a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d11b      	bne.n	800a8e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ac:	f003 0320 	and.w	r3, r3, #32
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d015      	beq.n	800a8e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8b8:	f003 0320 	and.w	r3, r3, #32
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d105      	bne.n	800a8cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d009      	beq.n	800a8e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 82e3 	beq.w	800ae9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
      }
      return;
 800a8de:	e2dd      	b.n	800ae9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 8123 	beq.w	800ab30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a8ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a8ee:	4b8d      	ldr	r3, [pc, #564]	; (800ab24 <HAL_UART_IRQHandler+0x2b8>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a8f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a8fa:	4b8b      	ldr	r3, [pc, #556]	; (800ab28 <HAL_UART_IRQHandler+0x2bc>)
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 8116 	beq.w	800ab30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d011      	beq.n	800a934 <HAL_UART_IRQHandler+0xc8>
 800a910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d00b      	beq.n	800a934 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2201      	movs	r2, #1
 800a922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92a:	f043 0201 	orr.w	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d011      	beq.n	800a964 <HAL_UART_IRQHandler+0xf8>
 800a940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2202      	movs	r2, #2
 800a952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a95a:	f043 0204 	orr.w	r2, r3, #4
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a968:	f003 0304 	and.w	r3, r3, #4
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d011      	beq.n	800a994 <HAL_UART_IRQHandler+0x128>
 800a970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2204      	movs	r2, #4
 800a982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a98a:	f043 0202 	orr.w	r2, r3, #2
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a998:	f003 0308 	and.w	r3, r3, #8
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d017      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d105      	bne.n	800a9b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a9ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a9b0:	4b5c      	ldr	r3, [pc, #368]	; (800ab24 <HAL_UART_IRQHandler+0x2b8>)
 800a9b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00b      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2208      	movs	r2, #8
 800a9be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c6:	f043 0208 	orr.w	r2, r3, #8
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d012      	beq.n	800aa02 <HAL_UART_IRQHandler+0x196>
 800a9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00c      	beq.n	800aa02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f8:	f043 0220 	orr.w	r2, r3, #32
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 8249 	beq.w	800aea0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d013      	beq.n	800aa42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d105      	bne.n	800aa32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d007      	beq.n	800aa42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d003      	beq.n	800aa42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa56:	2b40      	cmp	r3, #64	; 0x40
 800aa58:	d005      	beq.n	800aa66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d054      	beq.n	800ab10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 ffce 	bl	800ba08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa76:	2b40      	cmp	r3, #64	; 0x40
 800aa78:	d146      	bne.n	800ab08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3308      	adds	r3, #8
 800aa80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa88:	e853 3f00 	ldrex	r3, [r3]
 800aa8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aaa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aaaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aabe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1d9      	bne.n	800aa7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d017      	beq.n	800ab00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aad6:	4a15      	ldr	r2, [pc, #84]	; (800ab2c <HAL_UART_IRQHandler+0x2c0>)
 800aad8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fa fb5d 	bl	80051a0 <HAL_DMA_Abort_IT>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d019      	beq.n	800ab20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800aafa:	4610      	mov	r0, r2
 800aafc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafe:	e00f      	b.n	800ab20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f9e0 	bl	800aec6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab06:	e00b      	b.n	800ab20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f9dc 	bl	800aec6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab0e:	e007      	b.n	800ab20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f9d8 	bl	800aec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ab1e:	e1bf      	b.n	800aea0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab20:	bf00      	nop
    return;
 800ab22:	e1bd      	b.n	800aea0 <HAL_UART_IRQHandler+0x634>
 800ab24:	10000001 	.word	0x10000001
 800ab28:	04000120 	.word	0x04000120
 800ab2c:	0800bc09 	.word	0x0800bc09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	f040 8153 	bne.w	800ade0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ab3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3e:	f003 0310 	and.w	r3, r3, #16
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 814c 	beq.w	800ade0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ab48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab4c:	f003 0310 	and.w	r3, r3, #16
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f000 8145 	beq.w	800ade0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2210      	movs	r2, #16
 800ab5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab68:	2b40      	cmp	r3, #64	; 0x40
 800ab6a:	f040 80bb 	bne.w	800ace4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 818f 	beq.w	800aea4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab90:	429a      	cmp	r2, r3
 800ab92:	f080 8187 	bcs.w	800aea4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f040 8087 	bne.w	800acc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800abc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	461a      	mov	r2, r3
 800abda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800abde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800abe2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800abea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800abf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1da      	bne.n	800abb4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3308      	adds	r3, #8
 800ac04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e1      	bne.n	800abfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3308      	adds	r3, #8
 800ac5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac66:	e841 2300 	strex	r3, r2, [r1]
 800ac6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1e3      	bne.n	800ac3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac88:	e853 3f00 	ldrex	r3, [r3]
 800ac8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac90:	f023 0310 	bic.w	r3, r3, #16
 800ac94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aca2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aca4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800acb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e4      	bne.n	800ac80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fa fa11 	bl	80050e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2202      	movs	r2, #2
 800acc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	b29b      	uxth	r3, r3
 800acda:	4619      	mov	r1, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f8fb 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ace2:	e0df      	b.n	800aea4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 80d1 	beq.w	800aea8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ad06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f000 80cc 	beq.w	800aea8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad32:	647b      	str	r3, [r7, #68]	; 0x44
 800ad34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad3a:	e841 2300 	strex	r3, r2, [r1]
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e4      	bne.n	800ad10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	e853 3f00 	ldrex	r3, [r3]
 800ad54:	623b      	str	r3, [r7, #32]
   return(result);
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad5c:	f023 0301 	bic.w	r3, r3, #1
 800ad60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad6e:	633a      	str	r2, [r7, #48]	; 0x30
 800ad70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e1      	bne.n	800ad46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	e853 3f00 	ldrex	r3, [r3]
 800ada2:	60fb      	str	r3, [r7, #12]
   return(result);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0310 	bic.w	r3, r3, #16
 800adaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbc:	69b9      	ldr	r1, [r7, #24]
 800adbe:	69fa      	ldr	r2, [r7, #28]
 800adc0:	e841 2300 	strex	r3, r2, [r1]
 800adc4:	617b      	str	r3, [r7, #20]
   return(result);
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e4      	bne.n	800ad96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800add2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f87d 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800adde:	e063      	b.n	800aea8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ade0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00e      	beq.n	800ae0a <HAL_UART_IRQHandler+0x59e>
 800adec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d008      	beq.n	800ae0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ae00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 fc5e 	bl	800c6c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae08:	e051      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ae0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d014      	beq.n	800ae40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ae16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d105      	bne.n	800ae2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ae22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d008      	beq.n	800ae40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d03a      	beq.n	800aeac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	4798      	blx	r3
    }
    return;
 800ae3e:	e035      	b.n	800aeac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ae40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d009      	beq.n	800ae60 <HAL_UART_IRQHandler+0x5f4>
 800ae4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 feeb 	bl	800bc34 <UART_EndTransmit_IT>
    return;
 800ae5e:	e026      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ae60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <HAL_UART_IRQHandler+0x614>
 800ae6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 fc35 	bl	800c6e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae7e:	e016      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ae80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d010      	beq.n	800aeae <HAL_UART_IRQHandler+0x642>
 800ae8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	da0c      	bge.n	800aeae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f001 fc1e 	bl	800c6d6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ae9a:	e008      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
      return;
 800ae9c:	bf00      	nop
 800ae9e:	e006      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
    return;
 800aea0:	bf00      	nop
 800aea2:	e004      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
      return;
 800aea4:	bf00      	nop
 800aea6:	e002      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
      return;
 800aea8:	bf00      	nop
 800aeaa:	e000      	b.n	800aeae <HAL_UART_IRQHandler+0x642>
    return;
 800aeac:	bf00      	nop
  }
}
 800aeae:	37e8      	adds	r7, #232	; 0xe8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr

0800aec6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aece:	bf00      	nop
 800aed0:	370c      	adds	r7, #12
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bc80      	pop	{r7}
 800aed6:	4770      	bx	lr

0800aed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr
	...

0800aef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aef4:	b08c      	sub	sp, #48	; 0x30
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	431a      	orrs	r2, r3
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	431a      	orrs	r2, r3
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	4313      	orrs	r3, r2
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	4b94      	ldr	r3, [pc, #592]	; (800b170 <UART_SetConfig+0x280>)
 800af20:	4013      	ands	r3, r2
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	6812      	ldr	r2, [r2, #0]
 800af26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af28:	430b      	orrs	r3, r1
 800af2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	68da      	ldr	r2, [r3, #12]
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	430a      	orrs	r2, r1
 800af40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	699b      	ldr	r3, [r3, #24]
 800af46:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a89      	ldr	r2, [pc, #548]	; (800b174 <UART_SetConfig+0x284>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d004      	beq.n	800af5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af58:	4313      	orrs	r3, r2
 800af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800af66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	6812      	ldr	r2, [r2, #0]
 800af6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af70:	430b      	orrs	r3, r1
 800af72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	f023 010f 	bic.w	r1, r3, #15
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a7a      	ldr	r2, [pc, #488]	; (800b178 <UART_SetConfig+0x288>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d127      	bne.n	800afe4 <UART_SetConfig+0xf4>
 800af94:	2003      	movs	r0, #3
 800af96:	f7ff fb2c 	bl	800a5f2 <LL_RCC_GetUSARTClockSource>
 800af9a:	4603      	mov	r3, r0
 800af9c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d81b      	bhi.n	800afdc <UART_SetConfig+0xec>
 800afa4:	a201      	add	r2, pc, #4	; (adr r2, 800afac <UART_SetConfig+0xbc>)
 800afa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afaa:	bf00      	nop
 800afac:	0800afbd 	.word	0x0800afbd
 800afb0:	0800afcd 	.word	0x0800afcd
 800afb4:	0800afc5 	.word	0x0800afc5
 800afb8:	0800afd5 	.word	0x0800afd5
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afc2:	e080      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800afc4:	2302      	movs	r3, #2
 800afc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afca:	e07c      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800afcc:	2304      	movs	r3, #4
 800afce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afd2:	e078      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800afd4:	2308      	movs	r3, #8
 800afd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afda:	e074      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800afdc:	2310      	movs	r3, #16
 800afde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afe2:	e070      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a64      	ldr	r2, [pc, #400]	; (800b17c <UART_SetConfig+0x28c>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d138      	bne.n	800b060 <UART_SetConfig+0x170>
 800afee:	200c      	movs	r0, #12
 800aff0:	f7ff faff 	bl	800a5f2 <LL_RCC_GetUSARTClockSource>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800affa:	2b0c      	cmp	r3, #12
 800affc:	d82c      	bhi.n	800b058 <UART_SetConfig+0x168>
 800affe:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <UART_SetConfig+0x114>)
 800b000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b004:	0800b039 	.word	0x0800b039
 800b008:	0800b059 	.word	0x0800b059
 800b00c:	0800b059 	.word	0x0800b059
 800b010:	0800b059 	.word	0x0800b059
 800b014:	0800b049 	.word	0x0800b049
 800b018:	0800b059 	.word	0x0800b059
 800b01c:	0800b059 	.word	0x0800b059
 800b020:	0800b059 	.word	0x0800b059
 800b024:	0800b041 	.word	0x0800b041
 800b028:	0800b059 	.word	0x0800b059
 800b02c:	0800b059 	.word	0x0800b059
 800b030:	0800b059 	.word	0x0800b059
 800b034:	0800b051 	.word	0x0800b051
 800b038:	2300      	movs	r3, #0
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b03e:	e042      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b040:	2302      	movs	r3, #2
 800b042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b046:	e03e      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b048:	2304      	movs	r3, #4
 800b04a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b04e:	e03a      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b056:	e036      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b058:	2310      	movs	r3, #16
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b05e:	e032      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a43      	ldr	r2, [pc, #268]	; (800b174 <UART_SetConfig+0x284>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d12a      	bne.n	800b0c0 <UART_SetConfig+0x1d0>
 800b06a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b06e:	f7ff fad2 	bl	800a616 <LL_RCC_GetLPUARTClockSource>
 800b072:	4603      	mov	r3, r0
 800b074:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b078:	d01a      	beq.n	800b0b0 <UART_SetConfig+0x1c0>
 800b07a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b07e:	d81b      	bhi.n	800b0b8 <UART_SetConfig+0x1c8>
 800b080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b084:	d00c      	beq.n	800b0a0 <UART_SetConfig+0x1b0>
 800b086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b08a:	d815      	bhi.n	800b0b8 <UART_SetConfig+0x1c8>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <UART_SetConfig+0x1a8>
 800b090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b094:	d008      	beq.n	800b0a8 <UART_SetConfig+0x1b8>
 800b096:	e00f      	b.n	800b0b8 <UART_SetConfig+0x1c8>
 800b098:	2300      	movs	r3, #0
 800b09a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b09e:	e012      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0a6:	e00e      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0ae:	e00a      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0b6:	e006      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0be:	e002      	b.n	800b0c6 <UART_SetConfig+0x1d6>
 800b0c0:	2310      	movs	r3, #16
 800b0c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a2a      	ldr	r2, [pc, #168]	; (800b174 <UART_SetConfig+0x284>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	f040 80a4 	bne.w	800b21a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0d6:	2b08      	cmp	r3, #8
 800b0d8:	d823      	bhi.n	800b122 <UART_SetConfig+0x232>
 800b0da:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <UART_SetConfig+0x1f0>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b105 	.word	0x0800b105
 800b0e4:	0800b123 	.word	0x0800b123
 800b0e8:	0800b10d 	.word	0x0800b10d
 800b0ec:	0800b123 	.word	0x0800b123
 800b0f0:	0800b113 	.word	0x0800b113
 800b0f4:	0800b123 	.word	0x0800b123
 800b0f8:	0800b123 	.word	0x0800b123
 800b0fc:	0800b123 	.word	0x0800b123
 800b100:	0800b11b 	.word	0x0800b11b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b104:	f7fd fc12 	bl	800892c <HAL_RCC_GetPCLK1Freq>
 800b108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b10a:	e010      	b.n	800b12e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b10c:	4b1c      	ldr	r3, [pc, #112]	; (800b180 <UART_SetConfig+0x290>)
 800b10e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b110:	e00d      	b.n	800b12e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b112:	f7fd fb57 	bl	80087c4 <HAL_RCC_GetSysClockFreq>
 800b116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b118:	e009      	b.n	800b12e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b11a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b120:	e005      	b.n	800b12e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b122:	2300      	movs	r3, #0
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b126:	2301      	movs	r3, #1
 800b128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b12c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 8137 	beq.w	800b3a4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	4a12      	ldr	r2, [pc, #72]	; (800b184 <UART_SetConfig+0x294>)
 800b13c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b140:	461a      	mov	r2, r3
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	fbb3 f3f2 	udiv	r3, r3, r2
 800b148:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	4613      	mov	r3, r2
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	4413      	add	r3, r2
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	429a      	cmp	r2, r3
 800b158:	d305      	bcc.n	800b166 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	429a      	cmp	r2, r3
 800b164:	d910      	bls.n	800b188 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b16c:	e11a      	b.n	800b3a4 <UART_SetConfig+0x4b4>
 800b16e:	bf00      	nop
 800b170:	cfff69f3 	.word	0xcfff69f3
 800b174:	40008000 	.word	0x40008000
 800b178:	40013800 	.word	0x40013800
 800b17c:	40004400 	.word	0x40004400
 800b180:	00f42400 	.word	0x00f42400
 800b184:	0801f184 	.word	0x0801f184
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18a:	2200      	movs	r2, #0
 800b18c:	60bb      	str	r3, [r7, #8]
 800b18e:	60fa      	str	r2, [r7, #12]
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	4a8e      	ldr	r2, [pc, #568]	; (800b3d0 <UART_SetConfig+0x4e0>)
 800b196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	2200      	movs	r2, #0
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b1aa:	f7f5 fdef 	bl	8000d8c <__aeabi_uldivmod>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	f04f 0200 	mov.w	r2, #0
 800b1ba:	f04f 0300 	mov.w	r3, #0
 800b1be:	020b      	lsls	r3, r1, #8
 800b1c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1c4:	0202      	lsls	r2, r0, #8
 800b1c6:	6979      	ldr	r1, [r7, #20]
 800b1c8:	6849      	ldr	r1, [r1, #4]
 800b1ca:	0849      	lsrs	r1, r1, #1
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	eb12 0804 	adds.w	r8, r2, r4
 800b1d6:	eb43 0905 	adc.w	r9, r3, r5
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	469a      	mov	sl, r3
 800b1e2:	4693      	mov	fp, r2
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	f7f5 fdce 	bl	8000d8c <__aeabi_uldivmod>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1fe:	d308      	bcc.n	800b212 <UART_SetConfig+0x322>
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b206:	d204      	bcs.n	800b212 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6a3a      	ldr	r2, [r7, #32]
 800b20e:	60da      	str	r2, [r3, #12]
 800b210:	e0c8      	b.n	800b3a4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b218:	e0c4      	b.n	800b3a4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b222:	d167      	bne.n	800b2f4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b224:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d828      	bhi.n	800b27e <UART_SetConfig+0x38e>
 800b22c:	a201      	add	r2, pc, #4	; (adr r2, 800b234 <UART_SetConfig+0x344>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b259 	.word	0x0800b259
 800b238:	0800b261 	.word	0x0800b261
 800b23c:	0800b269 	.word	0x0800b269
 800b240:	0800b27f 	.word	0x0800b27f
 800b244:	0800b26f 	.word	0x0800b26f
 800b248:	0800b27f 	.word	0x0800b27f
 800b24c:	0800b27f 	.word	0x0800b27f
 800b250:	0800b27f 	.word	0x0800b27f
 800b254:	0800b277 	.word	0x0800b277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b258:	f7fd fb68 	bl	800892c <HAL_RCC_GetPCLK1Freq>
 800b25c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b25e:	e014      	b.n	800b28a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b260:	f7fd fb76 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800b264:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b266:	e010      	b.n	800b28a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b268:	4b5a      	ldr	r3, [pc, #360]	; (800b3d4 <UART_SetConfig+0x4e4>)
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b26c:	e00d      	b.n	800b28a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b26e:	f7fd faa9 	bl	80087c4 <HAL_RCC_GetSysClockFreq>
 800b272:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b274:	e009      	b.n	800b28a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b27a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b27c:	e005      	b.n	800b28a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b27e:	2300      	movs	r3, #0
 800b280:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	f000 8089 	beq.w	800b3a4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	4a4e      	ldr	r2, [pc, #312]	; (800b3d0 <UART_SetConfig+0x4e0>)
 800b298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b29c:	461a      	mov	r2, r3
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2a4:	005a      	lsls	r2, r3, #1
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	441a      	add	r2, r3
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	2b0f      	cmp	r3, #15
 800b2bc:	d916      	bls.n	800b2ec <UART_SetConfig+0x3fc>
 800b2be:	6a3b      	ldr	r3, [r7, #32]
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c4:	d212      	bcs.n	800b2ec <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f023 030f 	bic.w	r3, r3, #15
 800b2ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	8bfb      	ldrh	r3, [r7, #30]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	8bfa      	ldrh	r2, [r7, #30]
 800b2e8:	60da      	str	r2, [r3, #12]
 800b2ea:	e05b      	b.n	800b3a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2f2:	e057      	b.n	800b3a4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d828      	bhi.n	800b34e <UART_SetConfig+0x45e>
 800b2fc:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <UART_SetConfig+0x414>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	0800b34f 	.word	0x0800b34f
 800b314:	0800b33f 	.word	0x0800b33f
 800b318:	0800b34f 	.word	0x0800b34f
 800b31c:	0800b34f 	.word	0x0800b34f
 800b320:	0800b34f 	.word	0x0800b34f
 800b324:	0800b347 	.word	0x0800b347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b328:	f7fd fb00 	bl	800892c <HAL_RCC_GetPCLK1Freq>
 800b32c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b32e:	e014      	b.n	800b35a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b330:	f7fd fb0e 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800b334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b336:	e010      	b.n	800b35a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b338:	4b26      	ldr	r3, [pc, #152]	; (800b3d4 <UART_SetConfig+0x4e4>)
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b33c:	e00d      	b.n	800b35a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b33e:	f7fd fa41 	bl	80087c4 <HAL_RCC_GetSysClockFreq>
 800b342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b344:	e009      	b.n	800b35a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b34a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b34c:	e005      	b.n	800b35a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b358:	bf00      	nop
    }

    if (pclk != 0U)
 800b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d021      	beq.n	800b3a4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b364:	4a1a      	ldr	r2, [pc, #104]	; (800b3d0 <UART_SetConfig+0x4e0>)
 800b366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b36a:	461a      	mov	r2, r3
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	085b      	lsrs	r3, r3, #1
 800b378:	441a      	add	r2, r3
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b382:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	2b0f      	cmp	r3, #15
 800b388:	d909      	bls.n	800b39e <UART_SetConfig+0x4ae>
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b390:	d205      	bcs.n	800b39e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	b29a      	uxth	r2, r3
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60da      	str	r2, [r3, #12]
 800b39c:	e002      	b.n	800b3a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b3c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3730      	adds	r7, #48	; 0x30
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0801f184 	.word	0x0801f184
 800b3d4:	00f42400 	.word	0x00f42400

0800b3d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00a      	beq.n	800b402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	430a      	orrs	r2, r1
 800b400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00a      	beq.n	800b424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	430a      	orrs	r2, r1
 800b422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00a      	beq.n	800b446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	430a      	orrs	r2, r1
 800b444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	f003 0308 	and.w	r3, r3, #8
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00a      	beq.n	800b468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	430a      	orrs	r2, r1
 800b466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46c:	f003 0310 	and.w	r3, r3, #16
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00a      	beq.n	800b48a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	430a      	orrs	r2, r1
 800b488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d01a      	beq.n	800b4ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4d6:	d10a      	bne.n	800b4ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	430a      	orrs	r2, r1
 800b4ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00a      	beq.n	800b510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	430a      	orrs	r2, r1
 800b50e:	605a      	str	r2, [r3, #4]
  }
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	bc80      	pop	{r7}
 800b518:	4770      	bx	lr

0800b51a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b086      	sub	sp, #24
 800b51e:	af02      	add	r7, sp, #8
 800b520:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b52a:	f7f7 fa53 	bl	80029d4 <HAL_GetTick>
 800b52e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 0308 	and.w	r3, r3, #8
 800b53a:	2b08      	cmp	r3, #8
 800b53c:	d10e      	bne.n	800b55c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b53e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2200      	movs	r2, #0
 800b548:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f832 	bl	800b5b6 <UART_WaitOnFlagUntilTimeout>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e028      	b.n	800b5ae <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b04      	cmp	r3, #4
 800b568:	d10e      	bne.n	800b588 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b56a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f81c 	bl	800b5b6 <UART_WaitOnFlagUntilTimeout>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b584:	2303      	movs	r3, #3
 800b586:	e012      	b.n	800b5ae <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2220      	movs	r2, #32
 800b58c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b09c      	sub	sp, #112	; 0x70
 800b5ba:	af00      	add	r7, sp, #0
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	603b      	str	r3, [r7, #0]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5c6:	e0a9      	b.n	800b71c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ce:	f000 80a5 	beq.w	800b71c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5d2:	f7f7 f9ff 	bl	80029d4 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d302      	bcc.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b5e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d140      	bne.n	800b66a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f0:	e853 3f00 	ldrex	r3, [r3]
 800b5f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b606:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b608:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b60c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b60e:	e841 2300 	strex	r3, r2, [r1]
 800b612:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1e6      	bne.n	800b5e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3308      	adds	r3, #8
 800b620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b624:	e853 3f00 	ldrex	r3, [r3]
 800b628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62c:	f023 0301 	bic.w	r3, r3, #1
 800b630:	663b      	str	r3, [r7, #96]	; 0x60
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3308      	adds	r3, #8
 800b638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b63a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b63c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b642:	e841 2300 	strex	r3, r2, [r1]
 800b646:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1e5      	bne.n	800b61a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2220      	movs	r2, #32
 800b652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2220      	movs	r2, #32
 800b65a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b666:	2303      	movs	r3, #3
 800b668:	e069      	b.n	800b73e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 0304 	and.w	r3, r3, #4
 800b674:	2b00      	cmp	r3, #0
 800b676:	d051      	beq.n	800b71c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69db      	ldr	r3, [r3, #28]
 800b67e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b686:	d149      	bne.n	800b71c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b690:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b6b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6b8:	e841 2300 	strex	r3, r2, [r1]
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1e6      	bne.n	800b692 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	3308      	adds	r3, #8
 800b6ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	e853 3f00 	ldrex	r3, [r3]
 800b6d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f023 0301 	bic.w	r3, r3, #1
 800b6da:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3308      	adds	r3, #8
 800b6e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6e4:	623a      	str	r2, [r7, #32]
 800b6e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e8:	69f9      	ldr	r1, [r7, #28]
 800b6ea:	6a3a      	ldr	r2, [r7, #32]
 800b6ec:	e841 2300 	strex	r3, r2, [r1]
 800b6f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e5      	bne.n	800b6c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2220      	movs	r2, #32
 800b704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2220      	movs	r2, #32
 800b70c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e010      	b.n	800b73e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	69da      	ldr	r2, [r3, #28]
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	4013      	ands	r3, r2
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	429a      	cmp	r2, r3
 800b72a:	bf0c      	ite	eq
 800b72c:	2301      	moveq	r3, #1
 800b72e:	2300      	movne	r3, #0
 800b730:	b2db      	uxtb	r3, r3
 800b732:	461a      	mov	r2, r3
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	429a      	cmp	r2, r3
 800b738:	f43f af46 	beq.w	800b5c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3770      	adds	r7, #112	; 0x70
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
	...

0800b748 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b748:	b480      	push	{r7}
 800b74a:	b0a3      	sub	sp, #140	; 0x8c
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4613      	mov	r3, r2
 800b754:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	88fa      	ldrh	r2, [r7, #6]
 800b760:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	88fa      	ldrh	r2, [r7, #6]
 800b768:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b77a:	d10e      	bne.n	800b79a <UART_Start_Receive_IT+0x52>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d105      	bne.n	800b790 <UART_Start_Receive_IT+0x48>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b78a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b78e:	e02d      	b.n	800b7ec <UART_Start_Receive_IT+0xa4>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	22ff      	movs	r2, #255	; 0xff
 800b794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b798:	e028      	b.n	800b7ec <UART_Start_Receive_IT+0xa4>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10d      	bne.n	800b7be <UART_Start_Receive_IT+0x76>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d104      	bne.n	800b7b4 <UART_Start_Receive_IT+0x6c>
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	22ff      	movs	r2, #255	; 0xff
 800b7ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b7b2:	e01b      	b.n	800b7ec <UART_Start_Receive_IT+0xa4>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	227f      	movs	r2, #127	; 0x7f
 800b7b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b7bc:	e016      	b.n	800b7ec <UART_Start_Receive_IT+0xa4>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7c6:	d10d      	bne.n	800b7e4 <UART_Start_Receive_IT+0x9c>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <UART_Start_Receive_IT+0x92>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	227f      	movs	r2, #127	; 0x7f
 800b7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b7d8:	e008      	b.n	800b7ec <UART_Start_Receive_IT+0xa4>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	223f      	movs	r2, #63	; 0x3f
 800b7de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b7e2:	e003      	b.n	800b7ec <UART_Start_Receive_IT+0xa4>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2222      	movs	r2, #34	; 0x22
 800b7f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	3308      	adds	r3, #8
 800b802:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b806:	e853 3f00 	ldrex	r3, [r3]
 800b80a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b80c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	3308      	adds	r3, #8
 800b81c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b820:	673a      	str	r2, [r7, #112]	; 0x70
 800b822:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b824:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b828:	e841 2300 	strex	r3, r2, [r1]
 800b82c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e3      	bne.n	800b7fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83c:	d14f      	bne.n	800b8de <UART_Start_Receive_IT+0x196>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b844:	88fa      	ldrh	r2, [r7, #6]
 800b846:	429a      	cmp	r2, r3
 800b848:	d349      	bcc.n	800b8de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	689b      	ldr	r3, [r3, #8]
 800b84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b852:	d107      	bne.n	800b864 <UART_Start_Receive_IT+0x11c>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d103      	bne.n	800b864 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4a46      	ldr	r2, [pc, #280]	; (800b978 <UART_Start_Receive_IT+0x230>)
 800b860:	675a      	str	r2, [r3, #116]	; 0x74
 800b862:	e002      	b.n	800b86a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4a45      	ldr	r2, [pc, #276]	; (800b97c <UART_Start_Receive_IT+0x234>)
 800b868:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d01a      	beq.n	800b8a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87a:	e853 3f00 	ldrex	r3, [r3]
 800b87e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b886:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	461a      	mov	r2, r3
 800b890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b894:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b896:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b898:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b89a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b89c:	e841 2300 	strex	r3, r2, [r1]
 800b8a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b8a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1e4      	bne.n	800b872 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b2:	e853 3f00 	ldrex	r3, [r3]
 800b8b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b8c8:	64ba      	str	r2, [r7, #72]	; 0x48
 800b8ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b8ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8d0:	e841 2300 	strex	r3, r2, [r1]
 800b8d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b8d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e5      	bne.n	800b8a8 <UART_Start_Receive_IT+0x160>
 800b8dc:	e046      	b.n	800b96c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e6:	d107      	bne.n	800b8f8 <UART_Start_Receive_IT+0x1b0>
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d103      	bne.n	800b8f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	4a23      	ldr	r2, [pc, #140]	; (800b980 <UART_Start_Receive_IT+0x238>)
 800b8f4:	675a      	str	r2, [r3, #116]	; 0x74
 800b8f6:	e002      	b.n	800b8fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4a22      	ldr	r2, [pc, #136]	; (800b984 <UART_Start_Receive_IT+0x23c>)
 800b8fc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d019      	beq.n	800b93a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	e853 3f00 	ldrex	r3, [r3]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b91a:	677b      	str	r3, [r7, #116]	; 0x74
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	461a      	mov	r2, r3
 800b922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b924:	637b      	str	r3, [r7, #52]	; 0x34
 800b926:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b92a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b92c:	e841 2300 	strex	r3, r2, [r1]
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1e6      	bne.n	800b906 <UART_Start_Receive_IT+0x1be>
 800b938:	e018      	b.n	800b96c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	e853 3f00 	ldrex	r3, [r3]
 800b946:	613b      	str	r3, [r7, #16]
   return(result);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f043 0320 	orr.w	r3, r3, #32
 800b94e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	461a      	mov	r2, r3
 800b956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b958:	623b      	str	r3, [r7, #32]
 800b95a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95c:	69f9      	ldr	r1, [r7, #28]
 800b95e:	6a3a      	ldr	r2, [r7, #32]
 800b960:	e841 2300 	strex	r3, r2, [r1]
 800b964:	61bb      	str	r3, [r7, #24]
   return(result);
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1e6      	bne.n	800b93a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	378c      	adds	r7, #140	; 0x8c
 800b972:	46bd      	mov	sp, r7
 800b974:	bc80      	pop	{r7}
 800b976:	4770      	bx	lr
 800b978:	0800c35d 	.word	0x0800c35d
 800b97c:	0800bffd 	.word	0x0800bffd
 800b980:	0800be45 	.word	0x0800be45
 800b984:	0800bc8d 	.word	0x0800bc8d

0800b988 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b988:	b480      	push	{r7}
 800b98a:	b08f      	sub	sp, #60	; 0x3c
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	e853 3f00 	ldrex	r3, [r3]
 800b99c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b6:	e841 2300 	strex	r3, r2, [r1]
 800b9ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e6      	bne.n	800b990 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b9d8:	633b      	str	r3, [r7, #48]	; 0x30
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9e2:	61ba      	str	r2, [r7, #24]
 800b9e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6979      	ldr	r1, [r7, #20]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e5      	bne.n	800b9c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b9fe:	bf00      	nop
 800ba00:	373c      	adds	r7, #60	; 0x3c
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bc80      	pop	{r7}
 800ba06:	4770      	bx	lr

0800ba08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b095      	sub	sp, #84	; 0x54
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e6      	bne.n	800ba10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	e853 3f00 	ldrex	r3, [r3]
 800ba50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba58:	f023 0301 	bic.w	r3, r3, #1
 800ba5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba66:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e3      	bne.n	800ba42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d118      	bne.n	800bab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f023 0310 	bic.w	r3, r3, #16
 800ba96:	647b      	str	r3, [r7, #68]	; 0x44
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa0:	61bb      	str	r3, [r7, #24]
 800baa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	6979      	ldr	r1, [r7, #20]
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	613b      	str	r3, [r7, #16]
   return(result);
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e6      	bne.n	800ba82 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2220      	movs	r2, #32
 800bab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bac8:	bf00      	nop
 800baca:	3754      	adds	r7, #84	; 0x54
 800bacc:	46bd      	mov	sp, r7
 800bace:	bc80      	pop	{r7}
 800bad0:	4770      	bx	lr

0800bad2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b090      	sub	sp, #64	; 0x40
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b00      	cmp	r3, #0
 800baec:	d137      	bne.n	800bb5e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800baee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf0:	2200      	movs	r2, #0
 800baf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800baf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3308      	adds	r3, #8
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	e853 3f00 	ldrex	r3, [r3]
 800bb04:	623b      	str	r3, [r7, #32]
   return(result);
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	3308      	adds	r3, #8
 800bb14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb16:	633a      	str	r2, [r7, #48]	; 0x30
 800bb18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb1e:	e841 2300 	strex	r3, r2, [r1]
 800bb22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1e5      	bne.n	800baf6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb48:	61fb      	str	r3, [r7, #28]
 800bb4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	69b9      	ldr	r1, [r7, #24]
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	617b      	str	r3, [r7, #20]
   return(result);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e6      	bne.n	800bb2a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb5c:	e002      	b.n	800bb64 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bb5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb60:	f7f7 fdd6 	bl	8003710 <HAL_UART_TxCpltCallback>
}
 800bb64:	bf00      	nop
 800bb66:	3740      	adds	r7, #64	; 0x40
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	f7ff f99a 	bl	800aeb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb80:	bf00      	nop
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb0:	2b80      	cmp	r3, #128	; 0x80
 800bbb2:	d109      	bne.n	800bbc8 <UART_DMAError+0x40>
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	2b21      	cmp	r3, #33	; 0x21
 800bbb8:	d106      	bne.n	800bbc8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bbc2:	6978      	ldr	r0, [r7, #20]
 800bbc4:	f7ff fee0 	bl	800b988 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd2:	2b40      	cmp	r3, #64	; 0x40
 800bbd4:	d109      	bne.n	800bbea <UART_DMAError+0x62>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b22      	cmp	r3, #34	; 0x22
 800bbda:	d106      	bne.n	800bbea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bbe4:	6978      	ldr	r0, [r7, #20]
 800bbe6:	f7ff ff0f 	bl	800ba08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf0:	f043 0210 	orr.w	r2, r3, #16
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbfa:	6978      	ldr	r0, [r7, #20]
 800bbfc:	f7ff f963 	bl	800aec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc00:	bf00      	nop
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff f94d 	bl	800aec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc50:	61fb      	str	r3, [r7, #28]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	61bb      	str	r3, [r7, #24]
 800bc5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6979      	ldr	r1, [r7, #20]
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	613b      	str	r3, [r7, #16]
   return(result);
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e6      	bne.n	800bc3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2220      	movs	r2, #32
 800bc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7f7 fd47 	bl	8003710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc82:	bf00      	nop
 800bc84:	3720      	adds	r7, #32
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b09c      	sub	sp, #112	; 0x70
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca4:	2b22      	cmp	r3, #34	; 0x22
 800bca6:	f040 80be 	bne.w	800be26 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bcb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bcb8:	b2d9      	uxtb	r1, r3
 800bcba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bcbe:	b2da      	uxtb	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcc4:	400a      	ands	r2, r1
 800bcc6:	b2d2      	uxtb	r2, r2
 800bcc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcce:	1c5a      	adds	r2, r3, #1
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f040 80a1 	bne.w	800be36 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfc:	e853 3f00 	ldrex	r3, [r3]
 800bd00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd08:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	461a      	mov	r2, r3
 800bd10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd12:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd1a:	e841 2300 	strex	r3, r2, [r1]
 800bd1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1e6      	bne.n	800bcf4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	3308      	adds	r3, #8
 800bd2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	e853 3f00 	ldrex	r3, [r3]
 800bd34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd38:	f023 0301 	bic.w	r3, r3, #1
 800bd3c:	667b      	str	r3, [r7, #100]	; 0x64
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	3308      	adds	r3, #8
 800bd44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd46:	647a      	str	r2, [r7, #68]	; 0x44
 800bd48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd4e:	e841 2300 	strex	r3, r2, [r1]
 800bd52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1e5      	bne.n	800bd26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2220      	movs	r2, #32
 800bd5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a33      	ldr	r2, [pc, #204]	; (800be40 <UART_RxISR_8BIT+0x1b4>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d01f      	beq.n	800bdb8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d018      	beq.n	800bdb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	e853 3f00 	ldrex	r3, [r3]
 800bd92:	623b      	str	r3, [r7, #32]
   return(result);
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bd9a:	663b      	str	r3, [r7, #96]	; 0x60
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	461a      	mov	r2, r3
 800bda2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bda4:	633b      	str	r3, [r7, #48]	; 0x30
 800bda6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e6      	bne.n	800bd86 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d12e      	bne.n	800be1e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0310 	bic.w	r3, r3, #16
 800bdda:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bde4:	61fb      	str	r3, [r7, #28]
 800bde6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	69b9      	ldr	r1, [r7, #24]
 800bdea:	69fa      	ldr	r2, [r7, #28]
 800bdec:	e841 2300 	strex	r3, r2, [r1]
 800bdf0:	617b      	str	r3, [r7, #20]
   return(result);
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e6      	bne.n	800bdc6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	f003 0310 	and.w	r3, r3, #16
 800be02:	2b10      	cmp	r3, #16
 800be04:	d103      	bne.n	800be0e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2210      	movs	r2, #16
 800be0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be14:	4619      	mov	r1, r3
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f7ff f85e 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be1c:	e00b      	b.n	800be36 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f7f7 fc8c 	bl	800373c <HAL_UART_RxCpltCallback>
}
 800be24:	e007      	b.n	800be36 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	699a      	ldr	r2, [r3, #24]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f042 0208 	orr.w	r2, r2, #8
 800be34:	619a      	str	r2, [r3, #24]
}
 800be36:	bf00      	nop
 800be38:	3770      	adds	r7, #112	; 0x70
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	40008000 	.word	0x40008000

0800be44 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b09c      	sub	sp, #112	; 0x70
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be5c:	2b22      	cmp	r3, #34	; 0x22
 800be5e:	f040 80be 	bne.w	800bfde <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be70:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800be72:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800be76:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800be7a:	4013      	ands	r3, r2
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be86:	1c9a      	adds	r2, r3, #2
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be92:	b29b      	uxth	r3, r3
 800be94:	3b01      	subs	r3, #1
 800be96:	b29a      	uxth	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f040 80a1 	bne.w	800bfee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beb4:	e853 3f00 	ldrex	r3, [r3]
 800beb8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800beba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bec0:	667b      	str	r3, [r7, #100]	; 0x64
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beca:	657b      	str	r3, [r7, #84]	; 0x54
 800becc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bece:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bed0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bed2:	e841 2300 	strex	r3, r2, [r1]
 800bed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d1e6      	bne.n	800beac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3308      	adds	r3, #8
 800bee4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee8:	e853 3f00 	ldrex	r3, [r3]
 800beec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	f023 0301 	bic.w	r3, r3, #1
 800bef4:	663b      	str	r3, [r7, #96]	; 0x60
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3308      	adds	r3, #8
 800befc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800befe:	643a      	str	r2, [r7, #64]	; 0x40
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bf04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf06:	e841 2300 	strex	r3, r2, [r1]
 800bf0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1e5      	bne.n	800bede <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2220      	movs	r2, #32
 800bf16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	4a33      	ldr	r2, [pc, #204]	; (800bff8 <UART_RxISR_16BIT+0x1b4>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d01f      	beq.n	800bf70 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d018      	beq.n	800bf70 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	e853 3f00 	ldrex	r3, [r3]
 800bf4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf5e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf64:	e841 2300 	strex	r3, r2, [r1]
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1e6      	bne.n	800bf3e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d12e      	bne.n	800bfd6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	e853 3f00 	ldrex	r3, [r3]
 800bf8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	f023 0310 	bic.w	r3, r3, #16
 800bf92:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf9c:	61bb      	str	r3, [r7, #24]
 800bf9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa0:	6979      	ldr	r1, [r7, #20]
 800bfa2:	69ba      	ldr	r2, [r7, #24]
 800bfa4:	e841 2300 	strex	r3, r2, [r1]
 800bfa8:	613b      	str	r3, [r7, #16]
   return(result);
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e6      	bne.n	800bf7e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	f003 0310 	and.w	r3, r3, #16
 800bfba:	2b10      	cmp	r3, #16
 800bfbc:	d103      	bne.n	800bfc6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2210      	movs	r2, #16
 800bfc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfcc:	4619      	mov	r1, r3
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7fe ff82 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfd4:	e00b      	b.n	800bfee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7f7 fbb0 	bl	800373c <HAL_UART_RxCpltCallback>
}
 800bfdc:	e007      	b.n	800bfee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	699a      	ldr	r2, [r3, #24]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0208 	orr.w	r2, r2, #8
 800bfec:	619a      	str	r2, [r3, #24]
}
 800bfee:	bf00      	nop
 800bff0:	3770      	adds	r7, #112	; 0x70
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	40008000 	.word	0x40008000

0800bffc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b0ac      	sub	sp, #176	; 0xb0
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c00a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c032:	2b22      	cmp	r3, #34	; 0x22
 800c034:	f040 8182 	bne.w	800c33c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c03e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c042:	e125      	b.n	800c290 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c04e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c052:	b2d9      	uxtb	r1, r3
 800c054:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c05e:	400a      	ands	r2, r1
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c074:	b29b      	uxth	r3, r3
 800c076:	3b01      	subs	r3, #1
 800c078:	b29a      	uxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c08a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c08e:	f003 0307 	and.w	r3, r3, #7
 800c092:	2b00      	cmp	r3, #0
 800c094:	d053      	beq.n	800c13e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c09a:	f003 0301 	and.w	r3, r3, #1
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d011      	beq.n	800c0c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c0a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0bc:	f043 0201 	orr.w	r2, r3, #1
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0ca:	f003 0302 	and.w	r3, r3, #2
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d011      	beq.n	800c0f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c0d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0d6:	f003 0301 	and.w	r3, r3, #1
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00b      	beq.n	800c0f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0ec:	f043 0204 	orr.w	r2, r3, #4
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0fa:	f003 0304 	and.w	r3, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d011      	beq.n	800c126 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00b      	beq.n	800c126 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2204      	movs	r2, #4
 800c114:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c11c:	f043 0202 	orr.w	r2, r3, #2
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7fe fec8 	bl	800aec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c144:	b29b      	uxth	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 80a2 	bne.w	800c290 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c152:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c154:	e853 3f00 	ldrex	r3, [r3]
 800c158:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c15c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c160:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c16e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c170:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c172:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c174:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c176:	e841 2300 	strex	r3, r2, [r1]
 800c17a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c17c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1e4      	bne.n	800c14c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3308      	adds	r3, #8
 800c188:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c18a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c18c:	e853 3f00 	ldrex	r3, [r3]
 800c190:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c198:	f023 0301 	bic.w	r3, r3, #1
 800c19c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3308      	adds	r3, #8
 800c1a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c1aa:	66ba      	str	r2, [r7, #104]	; 0x68
 800c1ac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c1b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1b2:	e841 2300 	strex	r3, r2, [r1]
 800c1b6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c1b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1e1      	bne.n	800c182 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2220      	movs	r2, #32
 800c1c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a5f      	ldr	r2, [pc, #380]	; (800c354 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d021      	beq.n	800c220 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d01a      	beq.n	800c220 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1f2:	e853 3f00 	ldrex	r3, [r3]
 800c1f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c20c:	657b      	str	r3, [r7, #84]	; 0x54
 800c20e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c210:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c212:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c214:	e841 2300 	strex	r3, r2, [r1]
 800c218:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c21a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d1e4      	bne.n	800c1ea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c224:	2b01      	cmp	r3, #1
 800c226:	d130      	bne.n	800c28a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	f023 0310 	bic.w	r3, r3, #16
 800c242:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c250:	643b      	str	r3, [r7, #64]	; 0x40
 800c252:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c254:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c258:	e841 2300 	strex	r3, r2, [r1]
 800c25c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1e4      	bne.n	800c22e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	69db      	ldr	r3, [r3, #28]
 800c26a:	f003 0310 	and.w	r3, r3, #16
 800c26e:	2b10      	cmp	r3, #16
 800c270:	d103      	bne.n	800c27a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2210      	movs	r2, #16
 800c278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7fe fe28 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
 800c288:	e002      	b.n	800c290 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7f7 fa56 	bl	800373c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c290:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c294:	2b00      	cmp	r3, #0
 800c296:	d006      	beq.n	800c2a6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c29c:	f003 0320 	and.w	r3, r3, #32
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f47f aecf 	bne.w	800c044 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c2b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d049      	beq.n	800c34c <UART_RxISR_8BIT_FIFOEN+0x350>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2be:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d242      	bcs.n	800c34c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c2ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e3      	bne.n	800c2c6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a15      	ldr	r2, [pc, #84]	; (800c358 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c302:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	e853 3f00 	ldrex	r3, [r3]
 800c310:	60bb      	str	r3, [r7, #8]
   return(result);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f043 0320 	orr.w	r3, r3, #32
 800c318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	461a      	mov	r2, r3
 800c322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c326:	61bb      	str	r3, [r7, #24]
 800c328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	6979      	ldr	r1, [r7, #20]
 800c32c:	69ba      	ldr	r2, [r7, #24]
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	613b      	str	r3, [r7, #16]
   return(result);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e4      	bne.n	800c304 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c33a:	e007      	b.n	800c34c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	699a      	ldr	r2, [r3, #24]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f042 0208 	orr.w	r2, r2, #8
 800c34a:	619a      	str	r2, [r3, #24]
}
 800c34c:	bf00      	nop
 800c34e:	37b0      	adds	r7, #176	; 0xb0
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	40008000 	.word	0x40008000
 800c358:	0800bc8d 	.word	0x0800bc8d

0800c35c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b0ae      	sub	sp, #184	; 0xb8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c36a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	69db      	ldr	r3, [r3, #28]
 800c374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c392:	2b22      	cmp	r3, #34	; 0x22
 800c394:	f040 8186 	bne.w	800c6a4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c39e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3a2:	e129      	b.n	800c5f8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c3b6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c3ba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c3be:	4013      	ands	r3, r2
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3cc:	1c9a      	adds	r2, r3, #2
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	69db      	ldr	r3, [r3, #28]
 800c3ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c3ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d053      	beq.n	800c4a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	2b00      	cmp	r3, #0
 800c404:	d011      	beq.n	800c42a <UART_RxISR_16BIT_FIFOEN+0xce>
 800c406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00b      	beq.n	800c42a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2201      	movs	r2, #1
 800c418:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c420:	f043 0201 	orr.w	r2, r3, #1
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c42a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c42e:	f003 0302 	and.w	r3, r3, #2
 800c432:	2b00      	cmp	r3, #0
 800c434:	d011      	beq.n	800c45a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00b      	beq.n	800c45a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2202      	movs	r2, #2
 800c448:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c450:	f043 0204 	orr.w	r2, r3, #4
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c45a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c45e:	f003 0304 	and.w	r3, r3, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	d011      	beq.n	800c48a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00b      	beq.n	800c48a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2204      	movs	r2, #4
 800c478:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c480:	f043 0202 	orr.w	r2, r3, #2
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c490:	2b00      	cmp	r3, #0
 800c492:	d006      	beq.n	800c4a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f7fe fd16 	bl	800aec6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f040 80a4 	bne.w	800c5f8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4b8:	e853 3f00 	ldrex	r3, [r3]
 800c4bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c4d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4d6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4de:	e841 2300 	strex	r3, r2, [r1]
 800c4e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1e2      	bne.n	800c4b0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4f4:	e853 3f00 	ldrex	r3, [r3]
 800c4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c500:	f023 0301 	bic.w	r3, r3, #1
 800c504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	3308      	adds	r3, #8
 800c50e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c512:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1e1      	bne.n	800c4ea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2220      	movs	r2, #32
 800c52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a5f      	ldr	r2, [pc, #380]	; (800c6bc <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d021      	beq.n	800c588 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d01a      	beq.n	800c588 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55a:	e853 3f00 	ldrex	r3, [r3]
 800c55e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c562:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	461a      	mov	r2, r3
 800c570:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c574:	65bb      	str	r3, [r7, #88]	; 0x58
 800c576:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c57a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c57c:	e841 2300 	strex	r3, r2, [r1]
 800c580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1e4      	bne.n	800c552 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d130      	bne.n	800c5f2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59e:	e853 3f00 	ldrex	r3, [r3]
 800c5a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5a6:	f023 0310 	bic.w	r3, r3, #16
 800c5aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c5b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c5ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e4      	bne.n	800c596 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	f003 0310 	and.w	r3, r3, #16
 800c5d6:	2b10      	cmp	r3, #16
 800c5d8:	d103      	bne.n	800c5e2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2210      	movs	r2, #16
 800c5e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f7fe fc74 	bl	800aed8 <HAL_UARTEx_RxEventCallback>
 800c5f0:	e002      	b.n	800c5f8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7f7 f8a2 	bl	800373c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c5f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c600:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c604:	f003 0320 	and.w	r3, r3, #32
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f47f aecb 	bne.w	800c3a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c614:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c618:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d049      	beq.n	800c6b4 <UART_RxISR_16BIT_FIFOEN+0x358>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c626:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d242      	bcs.n	800c6b4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	e853 3f00 	ldrex	r3, [r3]
 800c63c:	623b      	str	r3, [r7, #32]
   return(result);
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	3308      	adds	r3, #8
 800c64e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c652:	633a      	str	r2, [r7, #48]	; 0x30
 800c654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c65a:	e841 2300 	strex	r3, r2, [r1]
 800c65e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1e3      	bne.n	800c62e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a15      	ldr	r2, [pc, #84]	; (800c6c0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c66a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	e853 3f00 	ldrex	r3, [r3]
 800c678:	60fb      	str	r3, [r7, #12]
   return(result);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f043 0320 	orr.w	r3, r3, #32
 800c680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c68e:	61fb      	str	r3, [r7, #28]
 800c690:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c692:	69b9      	ldr	r1, [r7, #24]
 800c694:	69fa      	ldr	r2, [r7, #28]
 800c696:	e841 2300 	strex	r3, r2, [r1]
 800c69a:	617b      	str	r3, [r7, #20]
   return(result);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1e4      	bne.n	800c66c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6a2:	e007      	b.n	800c6b4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	699a      	ldr	r2, [r3, #24]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f042 0208 	orr.w	r2, r2, #8
 800c6b2:	619a      	str	r2, [r3, #24]
}
 800c6b4:	bf00      	nop
 800c6b6:	37b8      	adds	r7, #184	; 0xb8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	40008000 	.word	0x40008000
 800c6c0:	0800be45 	.word	0x0800be45

0800c6c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bc80      	pop	{r7}
 800c6d4:	4770      	bx	lr

0800c6d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b083      	sub	sp, #12
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bc80      	pop	{r7}
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bc80      	pop	{r7}
 800c6f8:	4770      	bx	lr

0800c6fa <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b088      	sub	sp, #32
 800c6fe:	af02      	add	r7, sp, #8
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	1d3b      	adds	r3, r7, #4
 800c704:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c712:	2b01      	cmp	r3, #1
 800c714:	d101      	bne.n	800c71a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c716:	2302      	movs	r3, #2
 800c718:	e046      	b.n	800c7a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2224      	movs	r2, #36	; 0x24
 800c726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f022 0201 	bic.w	r2, r2, #1
 800c738:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	430a      	orrs	r2, r1
 800c74c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d105      	bne.n	800c760 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c754:	1d3b      	adds	r3, r7, #4
 800c756:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f000 fa4b 	bl	800cbf6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f042 0201 	orr.w	r2, r2, #1
 800c76e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c770:	f7f6 f930 	bl	80029d4 <HAL_GetTick>
 800c774:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	2200      	movs	r2, #0
 800c780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f7fe ff16 	bl	800b5b6 <UART_WaitOnFlagUntilTimeout>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c790:	2303      	movs	r3, #3
 800c792:	75fb      	strb	r3, [r7, #23]
 800c794:	e003      	b.n	800c79e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2220      	movs	r2, #32
 800c79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b089      	sub	sp, #36	; 0x24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d101      	bne.n	800c7c6 <HAL_UARTEx_EnableStopMode+0x16>
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	e021      	b.n	800c80a <HAL_UARTEx_EnableStopMode+0x5a>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f043 0302 	orr.w	r3, r3, #2
 800c7e2:	61fb      	str	r3, [r7, #28]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6979      	ldr	r1, [r7, #20]
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e6      	bne.n	800c7ce <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3724      	adds	r7, #36	; 0x24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bc80      	pop	{r7}
 800c812:	4770      	bx	lr

0800c814 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c822:	2b01      	cmp	r3, #1
 800c824:	d101      	bne.n	800c82a <HAL_UARTEx_EnableFifoMode+0x16>
 800c826:	2302      	movs	r3, #2
 800c828:	e02b      	b.n	800c882 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2224      	movs	r2, #36	; 0x24
 800c836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 0201 	bic.w	r2, r2, #1
 800c850:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c858:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c860:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f9e6 	bl	800cc3c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d101      	bne.n	800c8a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800c89c:	2302      	movs	r3, #2
 800c89e:	e027      	b.n	800c8f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2224      	movs	r2, #36	; 0x24
 800c8ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f022 0201 	bic.w	r2, r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c8ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3714      	adds	r7, #20
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bc80      	pop	{r7}
 800c8f8:	4770      	bx	lr

0800c8fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b084      	sub	sp, #16
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d101      	bne.n	800c912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c90e:	2302      	movs	r3, #2
 800c910:	e02d      	b.n	800c96e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2224      	movs	r2, #36	; 0x24
 800c91e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f022 0201 	bic.w	r2, r2, #1
 800c938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f974 	bl	800cc3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2220      	movs	r2, #32
 800c960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c986:	2b01      	cmp	r3, #1
 800c988:	d101      	bne.n	800c98e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c98a:	2302      	movs	r3, #2
 800c98c:	e02d      	b.n	800c9ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2224      	movs	r2, #36	; 0x24
 800c99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f022 0201 	bic.w	r2, r2, #1
 800c9b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	683a      	ldr	r2, [r7, #0]
 800c9c6:	430a      	orrs	r2, r1
 800c9c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f936 	bl	800cc3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2220      	movs	r2, #32
 800c9dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <HAL_UARTEx_ReceiveToIdle>:
  * @param RxLen   Number of data elements finally received (could be lower than Size, in case reception ends on IDLE event)
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen, uint32_t Timeout)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b088      	sub	sp, #32
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	60f8      	str	r0, [r7, #12]
 800c9fa:	60b9      	str	r1, [r7, #8]
 800c9fc:	603b      	str	r3, [r7, #0]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca08:	2b20      	cmp	r3, #32
 800ca0a:	f040 80ef 	bne.w	800cbec <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <HAL_UARTEx_ReceiveToIdle+0x28>
 800ca14:	88fb      	ldrh	r3, [r7, #6]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e0e7      	b.n	800cbee <HAL_UARTEx_ReceiveToIdle+0x1fc>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2222      	movs	r2, #34	; 0x22
 800ca2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2201      	movs	r2, #1
 800ca32:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2200      	movs	r2, #0
 800ca38:	671a      	str	r2, [r3, #112]	; 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca3a:	f7f5 ffcb 	bl	80029d4 <HAL_GetTick>
 800ca3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	88fa      	ldrh	r2, [r7, #6]
 800ca44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	88fa      	ldrh	r2, [r7, #6]
 800ca4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca58:	d10e      	bne.n	800ca78 <HAL_UARTEx_ReceiveToIdle+0x86>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d105      	bne.n	800ca6e <HAL_UARTEx_ReceiveToIdle+0x7c>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ca68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca6c:	e02d      	b.n	800caca <HAL_UARTEx_ReceiveToIdle+0xd8>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	22ff      	movs	r2, #255	; 0xff
 800ca72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca76:	e028      	b.n	800caca <HAL_UARTEx_ReceiveToIdle+0xd8>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10d      	bne.n	800ca9c <HAL_UARTEx_ReceiveToIdle+0xaa>
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d104      	bne.n	800ca92 <HAL_UARTEx_ReceiveToIdle+0xa0>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	22ff      	movs	r2, #255	; 0xff
 800ca8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca90:	e01b      	b.n	800caca <HAL_UARTEx_ReceiveToIdle+0xd8>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	227f      	movs	r2, #127	; 0x7f
 800ca96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ca9a:	e016      	b.n	800caca <HAL_UARTEx_ReceiveToIdle+0xd8>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caa4:	d10d      	bne.n	800cac2 <HAL_UARTEx_ReceiveToIdle+0xd0>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <HAL_UARTEx_ReceiveToIdle+0xc6>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	227f      	movs	r2, #127	; 0x7f
 800cab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cab6:	e008      	b.n	800caca <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	223f      	movs	r2, #63	; 0x3f
 800cabc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cac0:	e003      	b.n	800caca <HAL_UARTEx_ReceiveToIdle+0xd8>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cad0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cada:	d108      	bne.n	800caee <HAL_UARTEx_ReceiveToIdle+0xfc>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d104      	bne.n	800caee <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 800cae4:	2300      	movs	r3, #0
 800cae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	61bb      	str	r3, [r7, #24]
 800caec:	e003      	b.n	800caf6 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2200      	movs	r2, #0
 800cafa:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cafc:	e05f      	b.n	800cbbe <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	f003 0310 	and.w	r3, r3, #16
 800cb08:	2b10      	cmp	r3, #16
 800cb0a:	d110      	bne.n	800cb2e <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2210      	movs	r2, #16
 800cb12:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d008      	beq.n	800cb2e <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2202      	movs	r2, #2
 800cb20:	671a      	str	r2, [r3, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2220      	movs	r2, #32
 800cb26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	e05f      	b.n	800cbee <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	69db      	ldr	r3, [r3, #28]
 800cb34:	f003 0320 	and.w	r3, r3, #32
 800cb38:	2b20      	cmp	r3, #32
 800cb3a:	d12b      	bne.n	800cb94 <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10c      	bne.n	800cb5c <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	8a7b      	ldrh	r3, [r7, #18]
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	b29a      	uxth	r2, r3
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	3302      	adds	r3, #2
 800cb58:	61bb      	str	r3, [r7, #24]
 800cb5a:	e00c      	b.n	800cb76 <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb62:	b2da      	uxtb	r2, r3
 800cb64:	8a7b      	ldrh	r3, [r7, #18]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	4013      	ands	r3, r2
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	3301      	adds	r3, #1
 800cb74:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800cb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9a:	d010      	beq.n	800cbbe <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cb9c:	f7f5 ff1a 	bl	80029d4 <HAL_GetTick>
 800cba0:	4602      	mov	r2, r0
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d302      	bcc.n	800cbb2 <HAL_UARTEx_ReceiveToIdle+0x1c0>
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d105      	bne.n	800cbbe <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e017      	b.n	800cbee <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d199      	bne.n	800cafe <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	e000      	b.n	800cbee <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 800cbec:	2302      	movs	r3, #2
  }
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3720      	adds	r7, #32
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}

0800cbf6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cbf6:	b480      	push	{r7}
 800cbf8:	b085      	sub	sp, #20
 800cbfa:	af00      	add	r7, sp, #0
 800cbfc:	60f8      	str	r0, [r7, #12]
 800cbfe:	1d3b      	adds	r3, r7, #4
 800cc00:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	f023 0210 	bic.w	r2, r3, #16
 800cc0e:	893b      	ldrh	r3, [r7, #8]
 800cc10:	4619      	mov	r1, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	430a      	orrs	r2, r1
 800cc18:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800cc24:	7abb      	ldrb	r3, [r7, #10]
 800cc26:	061a      	lsls	r2, r3, #24
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	605a      	str	r2, [r3, #4]
}
 800cc30:	bf00      	nop
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bc80      	pop	{r7}
 800cc38:	4770      	bx	lr
	...

0800cc3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d108      	bne.n	800cc5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc5c:	e031      	b.n	800ccc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc5e:	2308      	movs	r3, #8
 800cc60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc62:	2308      	movs	r3, #8
 800cc64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	0e5b      	lsrs	r3, r3, #25
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 0307 	and.w	r3, r3, #7
 800cc74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	0f5b      	lsrs	r3, r3, #29
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	f003 0307 	and.w	r3, r3, #7
 800cc84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	7b3a      	ldrb	r2, [r7, #12]
 800cc8a:	4910      	ldr	r1, [pc, #64]	; (800cccc <UARTEx_SetNbDataToProcess+0x90>)
 800cc8c:	5c8a      	ldrb	r2, [r1, r2]
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc92:	7b3a      	ldrb	r2, [r7, #12]
 800cc94:	490e      	ldr	r1, [pc, #56]	; (800ccd0 <UARTEx_SetNbDataToProcess+0x94>)
 800cc96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc98:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	7b7a      	ldrb	r2, [r7, #13]
 800cca8:	4908      	ldr	r1, [pc, #32]	; (800cccc <UARTEx_SetNbDataToProcess+0x90>)
 800ccaa:	5c8a      	ldrb	r2, [r1, r2]
 800ccac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ccb0:	7b7a      	ldrb	r2, [r7, #13]
 800ccb2:	4907      	ldr	r1, [pc, #28]	; (800ccd0 <UARTEx_SetNbDataToProcess+0x94>)
 800ccb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ccb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ccc2:	bf00      	nop
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bc80      	pop	{r7}
 800ccca:	4770      	bx	lr
 800cccc:	0801f19c 	.word	0x0801f19c
 800ccd0:	0801f1a4 	.word	0x0801f1a4

0800ccd4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800ccd8:	f7f5 fd18 	bl	800270c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800ccdc:	f000 f820 	bl	800cd20 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800cce0:	bf00      	nop
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800cce8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccec:	f010 fdae 	bl	801d84c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800ccf0:	bf00      	nop
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800ccf8:	f3bf 8f4f 	dsb	sy
}
 800ccfc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800ccfe:	4b06      	ldr	r3, [pc, #24]	; (800cd18 <__NVIC_SystemReset+0x24>)
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cd06:	4904      	ldr	r1, [pc, #16]	; (800cd18 <__NVIC_SystemReset+0x24>)
 800cd08:	4b04      	ldr	r3, [pc, #16]	; (800cd1c <__NVIC_SystemReset+0x28>)
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cd0e:	f3bf 8f4f 	dsb	sy
}
 800cd12:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cd14:	bf00      	nop
 800cd16:	e7fd      	b.n	800cd14 <__NVIC_SystemReset+0x20>
 800cd18:	e000ed00 	.word	0xe000ed00
 800cd1c:	05fa0004 	.word	0x05fa0004

0800cd20 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	9302      	str	r3, [sp, #8]
 800cd2e:	2303      	movs	r3, #3
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	2301      	movs	r3, #1
 800cd34:	9300      	str	r3, [sp, #0]
 800cd36:	4b59      	ldr	r3, [pc, #356]	; (800ce9c <LoRaWAN_Init+0x17c>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	2002      	movs	r0, #2
 800cd3e:	f011 f9d3 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800cd42:	2300      	movs	r3, #0
 800cd44:	9302      	str	r3, [sp, #8]
 800cd46:	2305      	movs	r3, #5
 800cd48:	9301      	str	r3, [sp, #4]
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4b54      	ldr	r3, [pc, #336]	; (800cea0 <LoRaWAN_Init+0x180>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	2100      	movs	r1, #0
 800cd54:	2002      	movs	r0, #2
 800cd56:	f011 f9c7 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	9302      	str	r3, [sp, #8]
 800cd5e:	2303      	movs	r3, #3
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	2301      	movs	r3, #1
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	4b4f      	ldr	r3, [pc, #316]	; (800cea4 <LoRaWAN_Init+0x184>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	2002      	movs	r0, #2
 800cd6e:	f011 f9bb 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800cd72:	1d3b      	adds	r3, r7, #4
 800cd74:	4619      	mov	r1, r3
 800cd76:	2000      	movs	r0, #0
 800cd78:	f003 f96c 	bl	8010054 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	0e1b      	lsrs	r3, r3, #24
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	461a      	mov	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	0c1b      	lsrs	r3, r3, #16
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	0a1b      	lsrs	r3, r3, #8
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	9302      	str	r3, [sp, #8]
 800cd94:	9101      	str	r1, [sp, #4]
 800cd96:	9200      	str	r2, [sp, #0]
 800cd98:	4b43      	ldr	r3, [pc, #268]	; (800cea8 <LoRaWAN_Init+0x188>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	2002      	movs	r0, #2
 800cda0:	f011 f9a2 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800cda4:	1d3b      	adds	r3, r7, #4
 800cda6:	4619      	mov	r1, r3
 800cda8:	2001      	movs	r0, #1
 800cdaa:	f003 f953 	bl	8010054 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	0e1b      	lsrs	r3, r3, #24
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	0c1b      	lsrs	r3, r3, #16
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	0a1b      	lsrs	r3, r3, #8
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	b2c0      	uxtb	r0, r0
 800cdc8:	9003      	str	r0, [sp, #12]
 800cdca:	9302      	str	r3, [sp, #8]
 800cdcc:	9101      	str	r1, [sp, #4]
 800cdce:	9200      	str	r2, [sp, #0]
 800cdd0:	4b36      	ldr	r3, [pc, #216]	; (800ceac <LoRaWAN_Init+0x18c>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	2002      	movs	r0, #2
 800cdd8:	f011 f986 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800cddc:	2300      	movs	r3, #0
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	4b33      	ldr	r3, [pc, #204]	; (800ceb0 <LoRaWAN_Init+0x190>)
 800cde2:	2200      	movs	r2, #0
 800cde4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cde8:	4832      	ldr	r0, [pc, #200]	; (800ceb4 <LoRaWAN_Init+0x194>)
 800cdea:	f010 fecf 	bl	801db8c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800cdee:	2300      	movs	r3, #0
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	4b31      	ldr	r3, [pc, #196]	; (800ceb8 <LoRaWAN_Init+0x198>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cdfa:	4830      	ldr	r0, [pc, #192]	; (800cebc <LoRaWAN_Init+0x19c>)
 800cdfc:	f010 fec6 	bl	801db8c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800ce00:	2300      	movs	r3, #0
 800ce02:	9300      	str	r3, [sp, #0]
 800ce04:	4b2e      	ldr	r3, [pc, #184]	; (800cec0 <LoRaWAN_Init+0x1a0>)
 800ce06:	2201      	movs	r2, #1
 800ce08:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ce0c:	482d      	ldr	r0, [pc, #180]	; (800cec4 <LoRaWAN_Init+0x1a4>)
 800ce0e:	f010 febd 	bl	801db8c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800ce12:	2300      	movs	r3, #0
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4b2c      	ldr	r3, [pc, #176]	; (800cec8 <LoRaWAN_Init+0x1a8>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ce1e:	482b      	ldr	r0, [pc, #172]	; (800cecc <LoRaWAN_Init+0x1ac>)
 800ce20:	f010 feb4 	bl	801db8c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800ce24:	4a2a      	ldr	r2, [pc, #168]	; (800ced0 <LoRaWAN_Init+0x1b0>)
 800ce26:	2100      	movs	r1, #0
 800ce28:	2001      	movs	r0, #1
 800ce2a:	f010 fe0b 	bl	801da44 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800ce2e:	4a29      	ldr	r2, [pc, #164]	; (800ced4 <LoRaWAN_Init+0x1b4>)
 800ce30:	2100      	movs	r1, #0
 800ce32:	2002      	movs	r0, #2
 800ce34:	f010 fe06 	bl	801da44 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800ce38:	4a27      	ldr	r2, [pc, #156]	; (800ced8 <LoRaWAN_Init+0x1b8>)
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	2004      	movs	r0, #4
 800ce3e:	f010 fe01 	bl	801da44 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800ce42:	4a26      	ldr	r2, [pc, #152]	; (800cedc <LoRaWAN_Init+0x1bc>)
 800ce44:	2100      	movs	r1, #0
 800ce46:	2008      	movs	r0, #8
 800ce48:	f010 fdfc 	bl	801da44 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800ce4c:	f000 fcee 	bl	800d82c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800ce50:	4923      	ldr	r1, [pc, #140]	; (800cee0 <LoRaWAN_Init+0x1c0>)
 800ce52:	4824      	ldr	r0, [pc, #144]	; (800cee4 <LoRaWAN_Init+0x1c4>)
 800ce54:	f002 fa14 	bl	800f280 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800ce58:	4823      	ldr	r0, [pc, #140]	; (800cee8 <LoRaWAN_Init+0x1c8>)
 800ce5a:	f002 fa6d 	bl	800f338 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800ce5e:	4819      	ldr	r0, [pc, #100]	; (800cec4 <LoRaWAN_Init+0x1a4>)
 800ce60:	f010 feca 	bl	801dbf8 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800ce64:	4b21      	ldr	r3, [pc, #132]	; (800ceec <LoRaWAN_Init+0x1cc>)
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	4a21      	ldr	r2, [pc, #132]	; (800cef0 <LoRaWAN_Init+0x1d0>)
 800ce6a:	7812      	ldrb	r2, [r2, #0]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f002 fb30 	bl	800f4d4 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800ce74:	4b1f      	ldr	r3, [pc, #124]	; (800cef4 <LoRaWAN_Init+0x1d4>)
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10b      	bne.n	800ce94 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800ce7c:	4b1e      	ldr	r3, [pc, #120]	; (800cef8 <LoRaWAN_Init+0x1d8>)
 800ce7e:	6819      	ldr	r1, [r3, #0]
 800ce80:	2300      	movs	r3, #0
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	4b1d      	ldr	r3, [pc, #116]	; (800cefc <LoRaWAN_Init+0x1dc>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	481d      	ldr	r0, [pc, #116]	; (800cf00 <LoRaWAN_Init+0x1e0>)
 800ce8a:	f010 fe7f 	bl	801db8c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800ce8e:	481c      	ldr	r0, [pc, #112]	; (800cf00 <LoRaWAN_Init+0x1e0>)
 800ce90:	f010 feb2 	bl	801dbf8 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	0801e860 	.word	0x0801e860
 800cea0:	0801e884 	.word	0x0801e884
 800cea4:	0801e8a4 	.word	0x0801e8a4
 800cea8:	0801e8c4 	.word	0x0801e8c4
 800ceac:	0801e8e8 	.word	0x0801e8e8
 800ceb0:	0800d355 	.word	0x0800d355
 800ceb4:	20000794 	.word	0x20000794
 800ceb8:	0800d367 	.word	0x0800d367
 800cebc:	200007ac 	.word	0x200007ac
 800cec0:	0800d379 	.word	0x0800d379
 800cec4:	200007c4 	.word	0x200007c4
 800cec8:	0800d72d 	.word	0x0800d72d
 800cecc:	20000688 	.word	0x20000688
 800ced0:	0800f4a9 	.word	0x0800f4a9
 800ced4:	0800d04d 	.word	0x0800d04d
 800ced8:	0800d751 	.word	0x0800d751
 800cedc:	0800d6ad 	.word	0x0800d6ad
 800cee0:	01030000 	.word	0x01030000
 800cee4:	2000002c 	.word	0x2000002c
 800cee8:	20000078 	.word	0x20000078
 800ceec:	20000028 	.word	0x20000028
 800cef0:	20000029 	.word	0x20000029
 800cef4:	2000066c 	.word	0x2000066c
 800cef8:	20000090 	.word	0x20000090
 800cefc:	0800d331 	.word	0x0800d331
 800cf00:	20000670 	.word	0x20000670

0800cf04 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800cf04:	b5b0      	push	{r4, r5, r7, lr}
 800cf06:	b08a      	sub	sp, #40	; 0x28
 800cf08:	af06      	add	r7, sp, #24
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f000 8086 	beq.w	800d026 <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800cf1a:	4845      	ldr	r0, [pc, #276]	; (800d030 <OnRxData+0x12c>)
 800cf1c:	f010 fe6c 	bl	801dbf8 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d05a      	beq.n	800cfde <OnRxData+0xda>
    {
      if (appData != NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d057      	beq.n	800cfde <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	685b      	ldr	r3, [r3, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d050      	beq.n	800cfde <OnRxData+0xda>
        {
    switch (appData->Port)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d01f      	beq.n	800cf84 <OnRxData+0x80>
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d145      	bne.n	800cfd4 <OnRxData+0xd0>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	785b      	ldrb	r3, [r3, #1]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d143      	bne.n	800cfd8 <OnRxData+0xd4>
        {
          switch (appData->Buffer[0])
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	685b      	ldr	r3, [r3, #4]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d00e      	beq.n	800cf78 <OnRxData+0x74>
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	dc10      	bgt.n	800cf80 <OnRxData+0x7c>
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <OnRxData+0x64>
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d004      	beq.n	800cf70 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800cf66:	e00b      	b.n	800cf80 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800cf68:	2000      	movs	r0, #0
 800cf6a:	f002 fc7b 	bl	800f864 <LmHandlerRequestClass>
              break;
 800cf6e:	e008      	b.n	800cf82 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800cf70:	2001      	movs	r0, #1
 800cf72:	f002 fc77 	bl	800f864 <LmHandlerRequestClass>
              break;
 800cf76:	e004      	b.n	800cf82 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800cf78:	2002      	movs	r0, #2
 800cf7a:	f002 fc73 	bl	800f864 <LmHandlerRequestClass>
              break;
 800cf7e:	e000      	b.n	800cf82 <OnRxData+0x7e>
              break;
 800cf80:	bf00      	nop
          }
        }
        break;
 800cf82:	e029      	b.n	800cfd8 <OnRxData+0xd4>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	785b      	ldrb	r3, [r3, #1]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d127      	bne.n	800cfdc <OnRxData+0xd8>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	685b      	ldr	r3, [r3, #4]
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	4b26      	ldr	r3, [pc, #152]	; (800d034 <OnRxData+0x130>)
 800cf9a:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800cf9c:	4b25      	ldr	r3, [pc, #148]	; (800d034 <OnRxData+0x130>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10b      	bne.n	800cfbc <OnRxData+0xb8>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800cfa4:	4b24      	ldr	r3, [pc, #144]	; (800d038 <OnRxData+0x134>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	2003      	movs	r0, #3
 800cfac:	f011 f89c 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	2120      	movs	r1, #32
 800cfb4:	4821      	ldr	r0, [pc, #132]	; (800d03c <OnRxData+0x138>)
 800cfb6:	f7f8 ffa9 	bl	8005f0c <HAL_GPIO_WritePin>
          {
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800cfba:	e00f      	b.n	800cfdc <OnRxData+0xd8>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800cfbc:	4b20      	ldr	r3, [pc, #128]	; (800d040 <OnRxData+0x13c>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	2003      	movs	r0, #3
 800cfc4:	f011 f890 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800cfc8:	2200      	movs	r2, #0
 800cfca:	2120      	movs	r1, #32
 800cfcc:	481b      	ldr	r0, [pc, #108]	; (800d03c <OnRxData+0x138>)
 800cfce:	f7f8 ff9d 	bl	8005f0c <HAL_GPIO_WritePin>
        break;
 800cfd2:	e003      	b.n	800cfdc <OnRxData+0xd8>

      default:

        break;
 800cfd4:	bf00      	nop
 800cfd6:	e002      	b.n	800cfde <OnRxData+0xda>
        break;
 800cfd8:	bf00      	nop
 800cfda:	e000      	b.n	800cfde <OnRxData+0xda>
        break;
 800cfdc:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	7c1b      	ldrb	r3, [r3, #16]
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d81f      	bhi.n	800d026 <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	7bfa      	ldrb	r2, [r7, #15]
 800cfec:	6839      	ldr	r1, [r7, #0]
 800cfee:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800cff2:	460c      	mov	r4, r1
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	7c09      	ldrb	r1, [r1, #16]
 800cff8:	4608      	mov	r0, r1
 800cffa:	4912      	ldr	r1, [pc, #72]	; (800d044 <OnRxData+0x140>)
 800cffc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d000:	6838      	ldr	r0, [r7, #0]
 800d002:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d006:	4605      	mov	r5, r0
 800d008:	6838      	ldr	r0, [r7, #0]
 800d00a:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d00e:	9005      	str	r0, [sp, #20]
 800d010:	9504      	str	r5, [sp, #16]
 800d012:	9103      	str	r1, [sp, #12]
 800d014:	9402      	str	r4, [sp, #8]
 800d016:	9201      	str	r2, [sp, #4]
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <OnRxData+0x144>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	2100      	movs	r1, #0
 800d020:	2003      	movs	r0, #3
 800d022:	f011 f861 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d026:	bf00      	nop
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bdb0      	pop	{r4, r5, r7, pc}
 800d02e:	bf00      	nop
 800d030:	200007ac 	.word	0x200007ac
 800d034:	20000792 	.word	0x20000792
 800d038:	0801e90c 	.word	0x0801e90c
 800d03c:	48000400 	.word	0x48000400
 800d040:	0801e918 	.word	0x0801e918
 800d044:	20000010 	.word	0x20000010
 800d048:	0801e924 	.word	0x0801e924

0800d04c <SendTxData>:

static void SendTxData(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08c      	sub	sp, #48	; 0x30
 800d050:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d052:	23ff      	movs	r3, #255	; 0xff
 800d054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t batteryLevel = GetBatteryLevel();
 800d058:	f7f5 fb8c 	bl	8002774 <GetBatteryLevel>
 800d05c:	4603      	mov	r3, r0
 800d05e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	627b      	str	r3, [r7, #36]	; 0x24


  uint16_t pressure = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	843b      	strh	r3, [r7, #32]

  uint32_t i = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	61fb      	str	r3, [r7, #28]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800d06e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	4b9c      	ldr	r3, [pc, #624]	; (800d2e8 <SendTxData+0x29c>)
 800d076:	2201      	movs	r2, #1
 800d078:	2100      	movs	r1, #0
 800d07a:	2002      	movs	r0, #2
 800d07c:	f011 f834 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d080:	4b9a      	ldr	r3, [pc, #616]	; (800d2ec <SendTxData+0x2a0>)
 800d082:	2202      	movs	r2, #2
 800d084:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100) >> 8;
 800d086:	4b9a      	ldr	r3, [pc, #616]	; (800d2f0 <SendTxData+0x2a4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a9a      	ldr	r2, [pc, #616]	; (800d2f4 <SendTxData+0x2a8>)
 800d08c:	fba2 2303 	umull	r2, r3, r2, r3
 800d090:	095b      	lsrs	r3, r3, #5
 800d092:	0a18      	lsrs	r0, r3, #8
 800d094:	4b95      	ldr	r3, [pc, #596]	; (800d2ec <SendTxData+0x2a0>)
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	1c59      	adds	r1, r3, #1
 800d09c:	61f9      	str	r1, [r7, #28]
 800d09e:	4413      	add	r3, r2
 800d0a0:	b2c2      	uxtb	r2, r0
 800d0a2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1/100)%256;
 800d0a4:	4b92      	ldr	r3, [pc, #584]	; (800d2f0 <SendTxData+0x2a4>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a92      	ldr	r2, [pc, #584]	; (800d2f4 <SendTxData+0x2a8>)
 800d0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ae:	0958      	lsrs	r0, r3, #5
 800d0b0:	4b8e      	ldr	r3, [pc, #568]	; (800d2ec <SendTxData+0x2a0>)
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	1c59      	adds	r1, r3, #1
 800d0b8:	61f9      	str	r1, [r7, #28]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	b2c2      	uxtb	r2, r0
 800d0be:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)>>8;
 800d0c0:	4b8d      	ldr	r3, [pc, #564]	; (800d2f8 <SendTxData+0x2ac>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a8b      	ldr	r2, [pc, #556]	; (800d2f4 <SendTxData+0x2a8>)
 800d0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ca:	095b      	lsrs	r3, r3, #5
 800d0cc:	0a18      	lsrs	r0, r3, #8
 800d0ce:	4b87      	ldr	r3, [pc, #540]	; (800d2ec <SendTxData+0x2a0>)
 800d0d0:	685a      	ldr	r2, [r3, #4]
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	1c59      	adds	r1, r3, #1
 800d0d6:	61f9      	str	r1, [r7, #28]
 800d0d8:	4413      	add	r3, r2
 800d0da:	b2c2      	uxtb	r2, r0
 800d0dc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5/100)%256;
 800d0de:	4b86      	ldr	r3, [pc, #536]	; (800d2f8 <SendTxData+0x2ac>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a84      	ldr	r2, [pc, #528]	; (800d2f4 <SendTxData+0x2a8>)
 800d0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e8:	0958      	lsrs	r0, r3, #5
 800d0ea:	4b80      	ldr	r3, [pc, #512]	; (800d2ec <SendTxData+0x2a0>)
 800d0ec:	685a      	ldr	r2, [r3, #4]
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	1c59      	adds	r1, r3, #1
 800d0f2:	61f9      	str	r1, [r7, #28]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	b2c2      	uxtb	r2, r0
 800d0f8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)>>8;
 800d0fa:	4b80      	ldr	r3, [pc, #512]	; (800d2fc <SendTxData+0x2b0>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a7d      	ldr	r2, [pc, #500]	; (800d2f4 <SendTxData+0x2a8>)
 800d100:	fba2 2303 	umull	r2, r3, r2, r3
 800d104:	095b      	lsrs	r3, r3, #5
 800d106:	0a18      	lsrs	r0, r3, #8
 800d108:	4b78      	ldr	r3, [pc, #480]	; (800d2ec <SendTxData+0x2a0>)
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	1c59      	adds	r1, r3, #1
 800d110:	61f9      	str	r1, [r7, #28]
 800d112:	4413      	add	r3, r2
 800d114:	b2c2      	uxtb	r2, r0
 800d116:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10/100)%256;
 800d118:	4b78      	ldr	r3, [pc, #480]	; (800d2fc <SendTxData+0x2b0>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a75      	ldr	r2, [pc, #468]	; (800d2f4 <SendTxData+0x2a8>)
 800d11e:	fba2 2303 	umull	r2, r3, r2, r3
 800d122:	0958      	lsrs	r0, r3, #5
 800d124:	4b71      	ldr	r3, [pc, #452]	; (800d2ec <SendTxData+0x2a0>)
 800d126:	685a      	ldr	r2, [r3, #4]
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	1c59      	adds	r1, r3, #1
 800d12c:	61f9      	str	r1, [r7, #28]
 800d12e:	4413      	add	r3, r2
 800d130:	b2c2      	uxtb	r2, r0
 800d132:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temp*100.0));
 800d134:	4b72      	ldr	r3, [pc, #456]	; (800d300 <SendTxData+0x2b4>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4618      	mov	r0, r3
 800d13a:	f7f3 f989 	bl	8000450 <__aeabi_f2d>
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	4b70      	ldr	r3, [pc, #448]	; (800d304 <SendTxData+0x2b8>)
 800d144:	f7f3 f9dc 	bl	8000500 <__aeabi_dmul>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4610      	mov	r0, r2
 800d14e:	4619      	mov	r1, r3
 800d150:	f7f3 fc70 	bl	8000a34 <__aeabi_d2iz>
 800d154:	4603      	mov	r3, r0
 800d156:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d158:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d15c:	4a65      	ldr	r2, [pc, #404]	; (800d2f4 <SendTxData+0x2a8>)
 800d15e:	fb82 1203 	smull	r1, r2, r2, r3
 800d162:	1152      	asrs	r2, r2, #5
 800d164:	17db      	asrs	r3, r3, #31
 800d166:	1ad3      	subs	r3, r2, r3
 800d168:	b218      	sxth	r0, r3
 800d16a:	4b60      	ldr	r3, [pc, #384]	; (800d2ec <SendTxData+0x2a0>)
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	1c59      	adds	r1, r3, #1
 800d172:	61f9      	str	r1, [r7, #28]
 800d174:	4413      	add	r3, r2
 800d176:	b2c2      	uxtb	r2, r0
 800d178:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d17a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d17e:	4a5d      	ldr	r2, [pc, #372]	; (800d2f4 <SendTxData+0x2a8>)
 800d180:	fb82 1203 	smull	r1, r2, r2, r3
 800d184:	1151      	asrs	r1, r2, #5
 800d186:	17da      	asrs	r2, r3, #31
 800d188:	1a8a      	subs	r2, r1, r2
 800d18a:	2164      	movs	r1, #100	; 0x64
 800d18c:	fb01 f202 	mul.w	r2, r1, r2
 800d190:	1a9b      	subs	r3, r3, r2
 800d192:	b218      	sxth	r0, r3
 800d194:	4b55      	ldr	r3, [pc, #340]	; (800d2ec <SendTxData+0x2a0>)
 800d196:	685a      	ldr	r2, [r3, #4]
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	1c59      	adds	r1, r3, #1
 800d19c:	61f9      	str	r1, [r7, #28]
 800d19e:	4413      	add	r3, r2
 800d1a0:	b2c2      	uxtb	r2, r0
 800d1a2:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d1a4:	4b58      	ldr	r3, [pc, #352]	; (800d308 <SendTxData+0x2bc>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7f3 f951 	bl	8000450 <__aeabi_f2d>
 800d1ae:	f04f 0200 	mov.w	r2, #0
 800d1b2:	4b54      	ldr	r3, [pc, #336]	; (800d304 <SendTxData+0x2b8>)
 800d1b4:	f7f3 f9a4 	bl	8000500 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4610      	mov	r0, r2
 800d1be:	4619      	mov	r1, r3
 800d1c0:	f7f3 fc38 	bl	8000a34 <__aeabi_d2iz>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	837b      	strh	r3, [r7, #26]
  AppData.Buffer[i++] = tempVar/100;
 800d1c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d1cc:	4a49      	ldr	r2, [pc, #292]	; (800d2f4 <SendTxData+0x2a8>)
 800d1ce:	fb82 1203 	smull	r1, r2, r2, r3
 800d1d2:	1152      	asrs	r2, r2, #5
 800d1d4:	17db      	asrs	r3, r3, #31
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	b218      	sxth	r0, r3
 800d1da:	4b44      	ldr	r3, [pc, #272]	; (800d2ec <SendTxData+0x2a0>)
 800d1dc:	685a      	ldr	r2, [r3, #4]
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	1c59      	adds	r1, r3, #1
 800d1e2:	61f9      	str	r1, [r7, #28]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	b2c2      	uxtb	r2, r0
 800d1e8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d1ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d1ee:	4a41      	ldr	r2, [pc, #260]	; (800d2f4 <SendTxData+0x2a8>)
 800d1f0:	fb82 1203 	smull	r1, r2, r2, r3
 800d1f4:	1151      	asrs	r1, r2, #5
 800d1f6:	17da      	asrs	r2, r3, #31
 800d1f8:	1a8a      	subs	r2, r1, r2
 800d1fa:	2164      	movs	r1, #100	; 0x64
 800d1fc:	fb01 f202 	mul.w	r2, r1, r2
 800d200:	1a9b      	subs	r3, r3, r2
 800d202:	b218      	sxth	r0, r3
 800d204:	4b39      	ldr	r3, [pc, #228]	; (800d2ec <SendTxData+0x2a0>)
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	1c59      	adds	r1, r3, #1
 800d20c:	61f9      	str	r1, [r7, #28]
 800d20e:	4413      	add	r3, r2
 800d210:	b2c2      	uxtb	r2, r0
 800d212:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = OzonePPB/256;
 800d214:	4b3d      	ldr	r3, [pc, #244]	; (800d30c <SendTxData+0x2c0>)
 800d216:	881b      	ldrh	r3, [r3, #0]
 800d218:	0a1b      	lsrs	r3, r3, #8
 800d21a:	b298      	uxth	r0, r3
 800d21c:	4b33      	ldr	r3, [pc, #204]	; (800d2ec <SendTxData+0x2a0>)
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	1c59      	adds	r1, r3, #1
 800d224:	61f9      	str	r1, [r7, #28]
 800d226:	4413      	add	r3, r2
 800d228:	b2c2      	uxtb	r2, r0
 800d22a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = OzonePPB%256;
 800d22c:	4b37      	ldr	r3, [pc, #220]	; (800d30c <SendTxData+0x2c0>)
 800d22e:	8818      	ldrh	r0, [r3, #0]
 800d230:	4b2e      	ldr	r3, [pc, #184]	; (800d2ec <SendTxData+0x2a0>)
 800d232:	685a      	ldr	r2, [r3, #4]
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	1c59      	adds	r1, r3, #1
 800d238:	61f9      	str	r1, [r7, #28]
 800d23a:	4413      	add	r3, r2
 800d23c:	b2c2      	uxtb	r2, r0
 800d23e:	701a      	strb	r2, [r3, #0]


  AppData.BufferSize = i;
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	4b29      	ldr	r3, [pc, #164]	; (800d2ec <SendTxData+0x2a0>)
 800d246:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d248:	4b31      	ldr	r3, [pc, #196]	; (800d310 <SendTxData+0x2c4>)
 800d24a:	7a5b      	ldrb	r3, [r3, #9]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d007      	beq.n	800d260 <SendTxData+0x214>
 800d250:	f002 f9e4 	bl	800f61c <LmHandlerJoinStatus>
 800d254:	4603      	mov	r3, r0
 800d256:	2b01      	cmp	r3, #1
 800d258:	d102      	bne.n	800d260 <SendTxData+0x214>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d25a:	482d      	ldr	r0, [pc, #180]	; (800d310 <SendTxData+0x2c4>)
 800d25c:	f010 fd3a 	bl	801dcd4 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d260:	4b2c      	ldr	r3, [pc, #176]	; (800d314 <SendTxData+0x2c8>)
 800d262:	78db      	ldrb	r3, [r3, #3]
 800d264:	2200      	movs	r2, #0
 800d266:	4619      	mov	r1, r3
 800d268:	4820      	ldr	r0, [pc, #128]	; (800d2ec <SendTxData+0x2a0>)
 800d26a:	f002 f9f3 	bl	800f654 <LmHandlerSend>
 800d26e:	4603      	mov	r3, r0
 800d270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d274:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <SendTxData+0x23e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d27c:	4b26      	ldr	r3, [pc, #152]	; (800d318 <SendTxData+0x2cc>)
 800d27e:	2201      	movs	r2, #1
 800d280:	2100      	movs	r1, #0
 800d282:	2001      	movs	r0, #1
 800d284:	f010 ff30 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
 800d288:	e016      	b.n	800d2b8 <SendTxData+0x26c>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d28a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800d28e:	f113 0f06 	cmn.w	r3, #6
 800d292:	d111      	bne.n	800d2b8 <SendTxData+0x26c>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d294:	f002 f914 	bl	800f4c0 <LmHandlerGetDutyCycleWaitTime>
 800d298:	6278      	str	r0, [r7, #36]	; 0x24
    if (nextTxIn > 0)
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00b      	beq.n	800d2b8 <SendTxData+0x26c>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	4a1e      	ldr	r2, [pc, #120]	; (800d31c <SendTxData+0x2d0>)
 800d2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2a8:	099b      	lsrs	r3, r3, #6
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	4b1c      	ldr	r3, [pc, #112]	; (800d320 <SendTxData+0x2d4>)
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	2001      	movs	r0, #1
 800d2b4:	f010 ff18 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d2b8:	4b1a      	ldr	r3, [pc, #104]	; (800d324 <SendTxData+0x2d8>)
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10f      	bne.n	800d2e0 <SendTxData+0x294>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d2c0:	4819      	ldr	r0, [pc, #100]	; (800d328 <SendTxData+0x2dc>)
 800d2c2:	f010 fd07 	bl	801dcd4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d2c6:	4b19      	ldr	r3, [pc, #100]	; (800d32c <SendTxData+0x2e0>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	bf38      	it	cc
 800d2d0:	4613      	movcc	r3, r2
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	4814      	ldr	r0, [pc, #80]	; (800d328 <SendTxData+0x2dc>)
 800d2d6:	f010 fd6d 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d2da:	4813      	ldr	r0, [pc, #76]	; (800d328 <SendTxData+0x2dc>)
 800d2dc:	f010 fc8c 	bl	801dbf8 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d2e0:	bf00      	nop
 800d2e2:	3728      	adds	r7, #40	; 0x28
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	0801e96c 	.word	0x0801e96c
 800d2ec:	20000094 	.word	0x20000094
 800d2f0:	2000024c 	.word	0x2000024c
 800d2f4:	51eb851f 	.word	0x51eb851f
 800d2f8:	20000248 	.word	0x20000248
 800d2fc:	20000250 	.word	0x20000250
 800d300:	20000258 	.word	0x20000258
 800d304:	40590000 	.word	0x40590000
 800d308:	2000025c 	.word	0x2000025c
 800d30c:	20000254 	.word	0x20000254
 800d310:	200007c4 	.word	0x200007c4
 800d314:	20000078 	.word	0x20000078
 800d318:	0801e978 	.word	0x0801e978
 800d31c:	10624dd3 	.word	0x10624dd3
 800d320:	0801e988 	.word	0x0801e988
 800d324:	2000066c 	.word	0x2000066c
 800d328:	20000670 	.word	0x20000670
 800d32c:	20000090 	.word	0x20000090

0800d330 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d338:	2100      	movs	r1, #0
 800d33a:	2002      	movs	r0, #2
 800d33c:	f010 fba4 	bl	801da88 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d340:	4803      	ldr	r0, [pc, #12]	; (800d350 <OnTxTimerEvent+0x20>)
 800d342:	f010 fc59 	bl	801dbf8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d346:	bf00      	nop
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	20000670 	.word	0x20000670

0800d354 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	bc80      	pop	{r7}
 800d364:	4770      	bx	lr

0800d366 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d366:	b480      	push	{r7}
 800d368:	b083      	sub	sp, #12
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d36e:	bf00      	nop
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	bc80      	pop	{r7}
 800d376:	4770      	bx	lr

0800d378 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d380:	bf00      	nop
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	bc80      	pop	{r7}
 800d388:	4770      	bx	lr
	...

0800d38c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af04      	add	r7, sp, #16
 800d392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d041      	beq.n	800d41e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d03d      	beq.n	800d41e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d3a2:	4821      	ldr	r0, [pc, #132]	; (800d428 <OnTxData+0x9c>)
 800d3a4:	f010 fc28 	bl	801dbf8 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d3a8:	4b20      	ldr	r3, [pc, #128]	; (800d42c <OnTxData+0xa0>)
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	2002      	movs	r0, #2
 800d3b0:	f010 fe9a 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	7c12      	ldrb	r2, [r2, #16]
 800d3bc:	4611      	mov	r1, r2
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d3cc:	9203      	str	r2, [sp, #12]
 800d3ce:	9002      	str	r0, [sp, #8]
 800d3d0:	9101      	str	r1, [sp, #4]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	4b16      	ldr	r3, [pc, #88]	; (800d430 <OnTxData+0xa4>)
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2100      	movs	r1, #0
 800d3da:	2003      	movs	r0, #3
 800d3dc:	f010 fe84 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d3e0:	4b14      	ldr	r3, [pc, #80]	; (800d434 <OnTxData+0xa8>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	2003      	movs	r0, #3
 800d3e8:	f010 fe7e 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7a1b      	ldrb	r3, [r3, #8]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d10e      	bne.n	800d412 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7a5b      	ldrb	r3, [r3, #9]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <OnTxData+0x74>
 800d3fc:	4b0e      	ldr	r3, [pc, #56]	; (800d438 <OnTxData+0xac>)
 800d3fe:	e000      	b.n	800d402 <OnTxData+0x76>
 800d400:	4b0e      	ldr	r3, [pc, #56]	; (800d43c <OnTxData+0xb0>)
 800d402:	9300      	str	r3, [sp, #0]
 800d404:	4b0e      	ldr	r3, [pc, #56]	; (800d440 <OnTxData+0xb4>)
 800d406:	2200      	movs	r2, #0
 800d408:	2100      	movs	r1, #0
 800d40a:	2003      	movs	r0, #3
 800d40c:	f010 fe6c 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d410:	e005      	b.n	800d41e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d412:	4b0c      	ldr	r3, [pc, #48]	; (800d444 <OnTxData+0xb8>)
 800d414:	2200      	movs	r2, #0
 800d416:	2100      	movs	r1, #0
 800d418:	2003      	movs	r0, #3
 800d41a:	f010 fe65 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d41e:	bf00      	nop
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	20000794 	.word	0x20000794
 800d42c:	0801e9a8 	.word	0x0801e9a8
 800d430:	0801e9dc 	.word	0x0801e9dc
 800d434:	0801ea10 	.word	0x0801ea10
 800d438:	0801ea20 	.word	0x0801ea20
 800d43c:	0801ea24 	.word	0x0801ea24
 800d440:	0801ea2c 	.word	0x0801ea2c
 800d444:	0801ea40 	.word	0x0801ea40

0800d448 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d035      	beq.n	800d4c2 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d11a      	bne.n	800d496 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d460:	481a      	ldr	r0, [pc, #104]	; (800d4cc <OnJoinRequest+0x84>)
 800d462:	f010 fc37 	bl	801dcd4 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d466:	4b1a      	ldr	r3, [pc, #104]	; (800d4d0 <OnJoinRequest+0x88>)
 800d468:	2200      	movs	r2, #0
 800d46a:	2100      	movs	r1, #0
 800d46c:	2002      	movs	r0, #2
 800d46e:	f010 fe3b 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	79db      	ldrb	r3, [r3, #7]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d106      	bne.n	800d488 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d47a:	4b16      	ldr	r3, [pc, #88]	; (800d4d4 <OnJoinRequest+0x8c>)
 800d47c:	2200      	movs	r2, #0
 800d47e:	2100      	movs	r1, #0
 800d480:	2002      	movs	r0, #2
 800d482:	f010 fe31 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d486:	e01c      	b.n	800d4c2 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d488:	4b13      	ldr	r3, [pc, #76]	; (800d4d8 <OnJoinRequest+0x90>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	2100      	movs	r1, #0
 800d48e:	2002      	movs	r0, #2
 800d490:	f010 fe2a 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d494:	e015      	b.n	800d4c2 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d496:	4b11      	ldr	r3, [pc, #68]	; (800d4dc <OnJoinRequest+0x94>)
 800d498:	2200      	movs	r2, #0
 800d49a:	2100      	movs	r1, #0
 800d49c:	2002      	movs	r0, #2
 800d49e:	f010 fe23 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	79db      	ldrb	r3, [r3, #7]
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d10b      	bne.n	800d4c2 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <OnJoinRequest+0x98>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	2002      	movs	r0, #2
 800d4b2:	f010 fe19 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d4b6:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <OnJoinRequest+0x9c>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f002 f809 	bl	800f4d4 <LmHandlerJoin>
}
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	200007c4 	.word	0x200007c4
 800d4d0:	0801ea50 	.word	0x0801ea50
 800d4d4:	0801ea68 	.word	0x0801ea68
 800d4d8:	0801ea88 	.word	0x0801ea88
 800d4dc:	0801eaa8 	.word	0x0801eaa8
 800d4e0:	0801eac4 	.word	0x0801eac4
 800d4e4:	20000028 	.word	0x20000028

0800d4e8 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ea:	b093      	sub	sp, #76	; 0x4c
 800d4ec:	af0c      	add	r7, sp, #48	; 0x30
 800d4ee:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d056      	beq.n	800d5a4 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	785b      	ldrb	r3, [r3, #1]
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d008      	beq.n	800d510 <OnBeaconStatusChange+0x28>
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d049      	beq.n	800d596 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <OnBeaconStatusChange+0xc4>)
 800d504:	2200      	movs	r2, #0
 800d506:	2100      	movs	r1, #0
 800d508:	2002      	movs	r0, #2
 800d50a:	f010 fded 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d50e:	e049      	b.n	800d5a4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	7c1b      	ldrb	r3, [r3, #16]
 800d514:	4618      	mov	r0, r3
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d51c:	461c      	mov	r4, r3
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d524:	461d      	mov	r5, r3
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	697a      	ldr	r2, [r7, #20]
 800d52c:	6852      	ldr	r2, [r2, #4]
 800d52e:	6979      	ldr	r1, [r7, #20]
 800d530:	7d49      	ldrb	r1, [r1, #21]
 800d532:	460e      	mov	r6, r1
 800d534:	6979      	ldr	r1, [r7, #20]
 800d536:	7d89      	ldrb	r1, [r1, #22]
 800d538:	6139      	str	r1, [r7, #16]
 800d53a:	6979      	ldr	r1, [r7, #20]
 800d53c:	7dc9      	ldrb	r1, [r1, #23]
 800d53e:	60f9      	str	r1, [r7, #12]
 800d540:	6979      	ldr	r1, [r7, #20]
 800d542:	7e09      	ldrb	r1, [r1, #24]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	6979      	ldr	r1, [r7, #20]
 800d548:	7e49      	ldrb	r1, [r1, #25]
 800d54a:	6079      	str	r1, [r7, #4]
 800d54c:	6979      	ldr	r1, [r7, #20]
 800d54e:	7e89      	ldrb	r1, [r1, #26]
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	6979      	ldr	r1, [r7, #20]
 800d554:	7ec9      	ldrb	r1, [r1, #27]
 800d556:	910b      	str	r1, [sp, #44]	; 0x2c
 800d558:	f8d7 c000 	ldr.w	ip, [r7]
 800d55c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d560:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d564:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d568:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d56c:	f8cd c020 	str.w	ip, [sp, #32]
 800d570:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d574:	f8cd c01c 	str.w	ip, [sp, #28]
 800d578:	6939      	ldr	r1, [r7, #16]
 800d57a:	9106      	str	r1, [sp, #24]
 800d57c:	9605      	str	r6, [sp, #20]
 800d57e:	9204      	str	r2, [sp, #16]
 800d580:	9303      	str	r3, [sp, #12]
 800d582:	9502      	str	r5, [sp, #8]
 800d584:	9401      	str	r4, [sp, #4]
 800d586:	9000      	str	r0, [sp, #0]
 800d588:	4b09      	ldr	r3, [pc, #36]	; (800d5b0 <OnBeaconStatusChange+0xc8>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	2100      	movs	r1, #0
 800d58e:	2002      	movs	r0, #2
 800d590:	f010 fdaa 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d594:	e006      	b.n	800d5a4 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d596:	4b07      	ldr	r3, [pc, #28]	; (800d5b4 <OnBeaconStatusChange+0xcc>)
 800d598:	2200      	movs	r2, #0
 800d59a:	2100      	movs	r1, #0
 800d59c:	2002      	movs	r0, #2
 800d59e:	f010 fda3 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d5a2:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d5a4:	bf00      	nop
 800d5a6:	371c      	adds	r7, #28
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5ac:	0801eae8 	.word	0x0801eae8
 800d5b0:	0801eb00 	.word	0x0801eb00
 800d5b4:	0801eb74 	.word	0x0801eb74

0800d5b8 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d5bc:	bf00      	nop
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bc80      	pop	{r7}
 800d5c2:	4770      	bx	lr

0800d5c4 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af02      	add	r7, sp, #8
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	4a06      	ldr	r2, [pc, #24]	; (800d5ec <OnClassChange+0x28>)
 800d5d2:	5cd3      	ldrb	r3, [r2, r3]
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <OnClassChange+0x2c>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2100      	movs	r1, #0
 800d5dc:	2002      	movs	r0, #2
 800d5de:	f010 fd83 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d5e2:	bf00      	nop
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	0801ebb0 	.word	0x0801ebb0
 800d5f0:	0801eb94 	.word	0x0801eb94

0800d5f4 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	f010 fa44 	bl	801da88 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d600:	bf00      	nop
 800d602:	bd80      	pop	{r7, pc}

0800d604 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d60c:	4a0d      	ldr	r2, [pc, #52]	; (800d644 <OnTxPeriodicityChanged+0x40>)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d612:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <OnTxPeriodicityChanged+0x40>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d103      	bne.n	800d622 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d61a:	4b0a      	ldr	r3, [pc, #40]	; (800d644 <OnTxPeriodicityChanged+0x40>)
 800d61c:	f242 7210 	movw	r2, #10000	; 0x2710
 800d620:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d622:	4809      	ldr	r0, [pc, #36]	; (800d648 <OnTxPeriodicityChanged+0x44>)
 800d624:	f010 fb56 	bl	801dcd4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d628:	4b06      	ldr	r3, [pc, #24]	; (800d644 <OnTxPeriodicityChanged+0x40>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4619      	mov	r1, r3
 800d62e:	4806      	ldr	r0, [pc, #24]	; (800d648 <OnTxPeriodicityChanged+0x44>)
 800d630:	f010 fbc0 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d634:	4804      	ldr	r0, [pc, #16]	; (800d648 <OnTxPeriodicityChanged+0x44>)
 800d636:	f010 fadf 	bl	801dbf8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d63a:	bf00      	nop
 800d63c:	3708      	adds	r7, #8
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	20000090 	.word	0x20000090
 800d648:	20000670 	.word	0x20000670

0800d64c <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	4603      	mov	r3, r0
 800d654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d656:	4a04      	ldr	r2, [pc, #16]	; (800d668 <OnTxFrameCtrlChanged+0x1c>)
 800d658:	79fb      	ldrb	r3, [r7, #7]
 800d65a:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	bc80      	pop	{r7}
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	20000078 	.word	0x20000078

0800d66c <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	4603      	mov	r3, r0
 800d674:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d676:	4a04      	ldr	r2, [pc, #16]	; (800d688 <OnPingSlotPeriodicityChanged+0x1c>)
 800d678:	79fb      	ldrb	r3, [r7, #7]
 800d67a:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	bc80      	pop	{r7}
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop
 800d688:	20000078 	.word	0x20000078

0800d68c <OnSystemReset>:

static void OnSystemReset(void)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d690:	f002 fd11 	bl	80100b6 <LmHandlerHalt>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d106      	bne.n	800d6a8 <OnSystemReset+0x1c>
 800d69a:	f001 ffbf 	bl	800f61c <LmHandlerJoinStatus>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d101      	bne.n	800d6a8 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d6a4:	f7ff fb26 	bl	800ccf4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d6a8:	bf00      	nop
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <StopJoin>:

static void StopJoin(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d6b0:	4817      	ldr	r0, [pc, #92]	; (800d710 <StopJoin+0x64>)
 800d6b2:	f010 fb0f 	bl	801dcd4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d6b6:	f002 fcf1 	bl	801009c <LmHandlerStop>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d006      	beq.n	800d6ce <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d6c0:	4b14      	ldr	r3, [pc, #80]	; (800d714 <StopJoin+0x68>)
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	2002      	movs	r0, #2
 800d6c8:	f010 fd0e 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
 800d6cc:	e01a      	b.n	800d704 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d6ce:	4b12      	ldr	r3, [pc, #72]	; (800d718 <StopJoin+0x6c>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	2002      	movs	r0, #2
 800d6d6:	f010 fd07 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d6da:	4b10      	ldr	r3, [pc, #64]	; (800d71c <StopJoin+0x70>)
 800d6dc:	2201      	movs	r2, #1
 800d6de:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d6e0:	4b0f      	ldr	r3, [pc, #60]	; (800d720 <StopJoin+0x74>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	2002      	movs	r0, #2
 800d6e8:	f010 fcfe 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d6ec:	480d      	ldr	r0, [pc, #52]	; (800d724 <StopJoin+0x78>)
 800d6ee:	f001 fe23 	bl	800f338 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d6f2:	4b0a      	ldr	r3, [pc, #40]	; (800d71c <StopJoin+0x70>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	2101      	movs	r1, #1
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f001 feeb 	bl	800f4d4 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d6fe:	4804      	ldr	r0, [pc, #16]	; (800d710 <StopJoin+0x64>)
 800d700:	f010 fa7a 	bl	801dbf8 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d704:	4808      	ldr	r0, [pc, #32]	; (800d728 <StopJoin+0x7c>)
 800d706:	f010 fa77 	bl	801dbf8 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d70a:	bf00      	nop
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	20000670 	.word	0x20000670
 800d714:	0801ebb4 	.word	0x0801ebb4
 800d718:	0801ebd4 	.word	0x0801ebd4
 800d71c:	20000028 	.word	0x20000028
 800d720:	0801ebe8 	.word	0x0801ebe8
 800d724:	20000078 	.word	0x20000078
 800d728:	20000688 	.word	0x20000688

0800d72c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d734:	4b05      	ldr	r3, [pc, #20]	; (800d74c <OnStopJoinTimerEvent+0x20>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d103      	bne.n	800d744 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d73c:	2100      	movs	r1, #0
 800d73e:	2008      	movs	r0, #8
 800d740:	f010 f9a2 	bl	801da88 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20000028 	.word	0x20000028

0800d750 <StoreContext>:

static void StoreContext(void)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d756:	23ff      	movs	r3, #255	; 0xff
 800d758:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d75a:	f002 fce1 	bl	8010120 <LmHandlerNvmDataStore>
 800d75e:	4603      	mov	r3, r0
 800d760:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d766:	f113 0f08 	cmn.w	r3, #8
 800d76a:	d106      	bne.n	800d77a <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d76c:	4b0a      	ldr	r3, [pc, #40]	; (800d798 <StoreContext+0x48>)
 800d76e:	2200      	movs	r2, #0
 800d770:	2100      	movs	r1, #0
 800d772:	2002      	movs	r0, #2
 800d774:	f010 fcb8 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d778:	e00a      	b.n	800d790 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d77e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d782:	d105      	bne.n	800d790 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d784:	4b05      	ldr	r3, [pc, #20]	; (800d79c <StoreContext+0x4c>)
 800d786:	2200      	movs	r2, #0
 800d788:	2100      	movs	r1, #0
 800d78a:	2002      	movs	r0, #2
 800d78c:	f010 fcac 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	0801ec08 	.word	0x0801ec08
 800d79c:	0801ec20 	.word	0x0801ec20

0800d7a0 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d106      	bne.n	800d7be <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d7b0:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <OnNvmDataChange+0x34>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	2002      	movs	r0, #2
 800d7b8:	f010 fc96 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d7bc:	e005      	b.n	800d7ca <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d7be:	4b06      	ldr	r3, [pc, #24]	; (800d7d8 <OnNvmDataChange+0x38>)
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	2100      	movs	r1, #0
 800d7c4:	2002      	movs	r0, #2
 800d7c6:	f010 fc8f 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d7ca:	bf00      	nop
 800d7cc:	3708      	adds	r7, #8
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	0801ec38 	.word	0x0801ec38
 800d7d8:	0801ec4c 	.word	0x0801ec4c

0800d7dc <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800d7e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d7ea:	4807      	ldr	r0, [pc, #28]	; (800d808 <OnStoreContextRequest+0x2c>)
 800d7ec:	f7f3 fe42 	bl	8001474 <FLASH_IF_Erase>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d104      	bne.n	800d800 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	6879      	ldr	r1, [r7, #4]
 800d7fa:	4803      	ldr	r0, [pc, #12]	; (800d808 <OnStoreContextRequest+0x2c>)
 800d7fc:	f7f3 fdea 	bl	80013d4 <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	0803f000 	.word	0x0803f000

0800d80c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	4903      	ldr	r1, [pc, #12]	; (800d828 <OnRestoreContextRequest+0x1c>)
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7f3 fe02 	bl	8001424 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	0803f000 	.word	0x0803f000

0800d82c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800d830:	4b15      	ldr	r3, [pc, #84]	; (800d888 <LoraInfo_Init+0x5c>)
 800d832:	2200      	movs	r2, #0
 800d834:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d836:	4b14      	ldr	r3, [pc, #80]	; (800d888 <LoraInfo_Init+0x5c>)
 800d838:	2200      	movs	r2, #0
 800d83a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d83c:	4b12      	ldr	r3, [pc, #72]	; (800d888 <LoraInfo_Init+0x5c>)
 800d83e:	2200      	movs	r2, #0
 800d840:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d842:	4b11      	ldr	r3, [pc, #68]	; (800d888 <LoraInfo_Init+0x5c>)
 800d844:	2200      	movs	r2, #0
 800d846:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d848:	4b0f      	ldr	r3, [pc, #60]	; (800d888 <LoraInfo_Init+0x5c>)
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	f043 0320 	orr.w	r3, r3, #32
 800d850:	4a0d      	ldr	r2, [pc, #52]	; (800d888 <LoraInfo_Init+0x5c>)
 800d852:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d854:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <LoraInfo_Init+0x5c>)
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10c      	bne.n	800d876 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d85c:	4b0b      	ldr	r3, [pc, #44]	; (800d88c <LoraInfo_Init+0x60>)
 800d85e:	2200      	movs	r2, #0
 800d860:	2100      	movs	r1, #0
 800d862:	2000      	movs	r0, #0
 800d864:	f010 fc40 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d868:	bf00      	nop
 800d86a:	f010 fc2b 	bl	801e0c4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d86e:	4603      	mov	r3, r0
 800d870:	2b01      	cmp	r3, #1
 800d872:	d1fa      	bne.n	800d86a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d874:	e7fe      	b.n	800d874 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d876:	4b04      	ldr	r3, [pc, #16]	; (800d888 <LoraInfo_Init+0x5c>)
 800d878:	2200      	movs	r2, #0
 800d87a:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800d87c:	4b02      	ldr	r3, [pc, #8]	; (800d888 <LoraInfo_Init+0x5c>)
 800d87e:	2200      	movs	r2, #0
 800d880:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d882:	bf00      	nop
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	200007dc 	.word	0x200007dc
 800d88c:	0801ec60 	.word	0x0801ec60

0800d890 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d890:	b480      	push	{r7}
 800d892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d894:	4b02      	ldr	r3, [pc, #8]	; (800d8a0 <LoraInfo_GetPtr+0x10>)
}
 800d896:	4618      	mov	r0, r3
 800d898:	46bd      	mov	sp, r7
 800d89a:	bc80      	pop	{r7}
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	200007dc 	.word	0x200007dc

0800d8a4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d8a8:	f7f5 ffa5 	bl	80037f6 <BSP_RADIO_Init>
 800d8ac:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b082      	sub	sp, #8
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7f5 ffca 	bl	8003858 <BSP_RADIO_ConfigRFSwitch>
 800d8c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d8d2:	f7f6 f80f 	bl	80038f4 <BSP_RADIO_GetTxConfig>
 800d8d6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d8e0:	f7f6 f80f 	bl	8003902 <BSP_RADIO_IsTCXO>
 800d8e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d8ee:	f7f6 f80f 	bl	8003910 <BSP_RADIO_IsDCDC>
 800d8f2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	4603      	mov	r3, r0
 800d900:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d902:	79fb      	ldrb	r3, [r7, #7]
 800d904:	4618      	mov	r0, r3
 800d906:	f7f6 f80a 	bl	800391e <BSP_RADIO_GetRFOMaxPowerConfig>
 800d90a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	33f1      	adds	r3, #241	; 0xf1
 800d920:	2210      	movs	r2, #16
 800d922:	2100      	movs	r1, #0
 800d924:	4618      	mov	r0, r3
 800d926:	f00c f875 	bl	8019a14 <memset1>
    ctx->M_n = 0;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	22f0      	movs	r2, #240	; 0xf0
 800d936:	2100      	movs	r1, #0
 800d938:	4618      	mov	r0, r3
 800d93a:	f00c f86b 	bl	8019a14 <memset1>
}
 800d93e:	bf00      	nop
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	461a      	mov	r2, r3
 800d954:	2110      	movs	r1, #16
 800d956:	6838      	ldr	r0, [r7, #0]
 800d958:	f000 fe5c 	bl	800e614 <lorawan_aes_set_key>
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08c      	sub	sp, #48	; 0x30
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d976:	2b00      	cmp	r3, #0
 800d978:	f000 80a1 	beq.w	800dabe <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d982:	f1c3 0310 	rsb	r3, r3, #16
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	4293      	cmp	r3, r2
 800d98a:	bf28      	it	cs
 800d98c:	4613      	movcs	r3, r2
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f203 1201 	addw	r2, r3, #257	; 0x101
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d99c:	4413      	add	r3, r2
 800d99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9a0:	b292      	uxth	r2, r2
 800d9a2:	68b9      	ldr	r1, [r7, #8]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f00b fffa 	bl	801999e <memcpy1>
        ctx->M_n += mlen;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b2:	441a      	add	r2, r3
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d9c0:	2b0f      	cmp	r3, #15
 800d9c2:	f240 808d 	bls.w	800dae0 <AES_CMAC_Update+0x17c>
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	f000 8088 	beq.w	800dae0 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9d4:	e015      	b.n	800da02 <AES_CMAC_Update+0x9e>
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9da:	4413      	add	r3, r2
 800d9dc:	33f1      	adds	r3, #241	; 0xf1
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	68f9      	ldr	r1, [r7, #12]
 800d9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e4:	440b      	add	r3, r1
 800d9e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	4053      	eors	r3, r2
 800d9ee:	b2d9      	uxtb	r1, r3
 800d9f0:	68fa      	ldr	r2, [r7, #12]
 800d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f4:	4413      	add	r3, r2
 800d9f6:	33f1      	adds	r3, #241	; 0xf1
 800d9f8:	460a      	mov	r2, r1
 800d9fa:	701a      	strb	r2, [r3, #0]
 800d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9fe:	3301      	adds	r3, #1
 800da00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da04:	2b0f      	cmp	r3, #15
 800da06:	dde6      	ble.n	800d9d6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800da0e:	f107 0314 	add.w	r3, r7, #20
 800da12:	2210      	movs	r2, #16
 800da14:	4618      	mov	r0, r3
 800da16:	f00b ffc2 	bl	801999e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	f107 0114 	add.w	r1, r7, #20
 800da20:	f107 0314 	add.w	r3, r7, #20
 800da24:	4618      	mov	r0, r3
 800da26:	f000 fed3 	bl	800e7d0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	33f1      	adds	r3, #241	; 0xf1
 800da2e:	f107 0114 	add.w	r1, r7, #20
 800da32:	2210      	movs	r2, #16
 800da34:	4618      	mov	r0, r3
 800da36:	f00b ffb2 	bl	801999e <memcpy1>

        data += mlen;
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	4413      	add	r3, r2
 800da40:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800da4a:	e038      	b.n	800dabe <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800da4c:	2300      	movs	r3, #0
 800da4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800da50:	e013      	b.n	800da7a <AES_CMAC_Update+0x116>
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	4413      	add	r3, r2
 800da58:	33f1      	adds	r3, #241	; 0xf1
 800da5a:	781a      	ldrb	r2, [r3, #0]
 800da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	440b      	add	r3, r1
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	4053      	eors	r3, r2
 800da66:	b2d9      	uxtb	r1, r3
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	4413      	add	r3, r2
 800da6e:	33f1      	adds	r3, #241	; 0xf1
 800da70:	460a      	mov	r2, r1
 800da72:	701a      	strb	r2, [r3, #0]
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	3301      	adds	r3, #1
 800da78:	62bb      	str	r3, [r7, #40]	; 0x28
 800da7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7c:	2b0f      	cmp	r3, #15
 800da7e:	dde8      	ble.n	800da52 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800da86:	f107 0314 	add.w	r3, r7, #20
 800da8a:	2210      	movs	r2, #16
 800da8c:	4618      	mov	r0, r3
 800da8e:	f00b ff86 	bl	801999e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	f107 0114 	add.w	r1, r7, #20
 800da98:	f107 0314 	add.w	r3, r7, #20
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 fe97 	bl	800e7d0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	33f1      	adds	r3, #241	; 0xf1
 800daa6:	f107 0114 	add.w	r1, r7, #20
 800daaa:	2210      	movs	r2, #16
 800daac:	4618      	mov	r0, r3
 800daae:	f00b ff76 	bl	801999e <memcpy1>

        data += 16;
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	3310      	adds	r3, #16
 800dab6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3b10      	subs	r3, #16
 800dabc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2b10      	cmp	r3, #16
 800dac2:	d8c3      	bhi.n	800da4c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	b292      	uxth	r2, r2
 800dace:	68b9      	ldr	r1, [r7, #8]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f00b ff64 	bl	801999e <memcpy1>
    ctx->M_n = len;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dade:	e000      	b.n	800dae2 <AES_CMAC_Update+0x17e>
            return;
 800dae0:	bf00      	nop
}
 800dae2:	3730      	adds	r7, #48	; 0x30
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b092      	sub	sp, #72	; 0x48
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800daf2:	f107 031c 	add.w	r3, r7, #28
 800daf6:	2210      	movs	r2, #16
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f00b ff8a 	bl	8019a14 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	f107 011c 	add.w	r1, r7, #28
 800db06:	f107 031c 	add.w	r3, r7, #28
 800db0a:	4618      	mov	r0, r3
 800db0c:	f000 fe60 	bl	800e7d0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800db10:	7f3b      	ldrb	r3, [r7, #28]
 800db12:	b25b      	sxtb	r3, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	da30      	bge.n	800db7a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800db18:	2300      	movs	r3, #0
 800db1a:	647b      	str	r3, [r7, #68]	; 0x44
 800db1c:	e01b      	b.n	800db56 <AES_CMAC_Final+0x6e>
 800db1e:	f107 021c 	add.w	r2, r7, #28
 800db22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db24:	4413      	add	r3, r2
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	b25a      	sxtb	r2, r3
 800db2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db2e:	3301      	adds	r3, #1
 800db30:	3348      	adds	r3, #72	; 0x48
 800db32:	443b      	add	r3, r7
 800db34:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800db38:	09db      	lsrs	r3, r3, #7
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	b25b      	sxtb	r3, r3
 800db3e:	4313      	orrs	r3, r2
 800db40:	b25b      	sxtb	r3, r3
 800db42:	b2d9      	uxtb	r1, r3
 800db44:	f107 021c 	add.w	r2, r7, #28
 800db48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db4a:	4413      	add	r3, r2
 800db4c:	460a      	mov	r2, r1
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db52:	3301      	adds	r3, #1
 800db54:	647b      	str	r3, [r7, #68]	; 0x44
 800db56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db58:	2b0e      	cmp	r3, #14
 800db5a:	dde0      	ble.n	800db1e <AES_CMAC_Final+0x36>
 800db5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db60:	005b      	lsls	r3, r3, #1
 800db62:	b2db      	uxtb	r3, r3
 800db64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800db68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db6c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800db70:	43db      	mvns	r3, r3
 800db72:	b2db      	uxtb	r3, r3
 800db74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db78:	e027      	b.n	800dbca <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800db7a:	2300      	movs	r3, #0
 800db7c:	643b      	str	r3, [r7, #64]	; 0x40
 800db7e:	e01b      	b.n	800dbb8 <AES_CMAC_Final+0xd0>
 800db80:	f107 021c 	add.w	r2, r7, #28
 800db84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db86:	4413      	add	r3, r2
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	005b      	lsls	r3, r3, #1
 800db8c:	b25a      	sxtb	r2, r3
 800db8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db90:	3301      	adds	r3, #1
 800db92:	3348      	adds	r3, #72	; 0x48
 800db94:	443b      	add	r3, r7
 800db96:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800db9a:	09db      	lsrs	r3, r3, #7
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	b25b      	sxtb	r3, r3
 800dba0:	4313      	orrs	r3, r2
 800dba2:	b25b      	sxtb	r3, r3
 800dba4:	b2d9      	uxtb	r1, r3
 800dba6:	f107 021c 	add.w	r2, r7, #28
 800dbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbac:	4413      	add	r3, r2
 800dbae:	460a      	mov	r2, r1
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	643b      	str	r3, [r7, #64]	; 0x40
 800dbb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbba:	2b0e      	cmp	r3, #14
 800dbbc:	dde0      	ble.n	800db80 <AES_CMAC_Final+0x98>
 800dbbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbd0:	2b10      	cmp	r3, #16
 800dbd2:	d11d      	bne.n	800dc10 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbd8:	e016      	b.n	800dc08 <AES_CMAC_Final+0x120>
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbde:	4413      	add	r3, r2
 800dbe0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbe4:	781a      	ldrb	r2, [r3, #0]
 800dbe6:	f107 011c 	add.w	r1, r7, #28
 800dbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbec:	440b      	add	r3, r1
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	4053      	eors	r3, r2
 800dbf2:	b2d9      	uxtb	r1, r3
 800dbf4:	683a      	ldr	r2, [r7, #0]
 800dbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbf8:	4413      	add	r3, r2
 800dbfa:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbfe:	460a      	mov	r2, r1
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc04:	3301      	adds	r3, #1
 800dc06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc0a:	2b0f      	cmp	r3, #15
 800dc0c:	dde5      	ble.n	800dbda <AES_CMAC_Final+0xf2>
 800dc0e:	e096      	b.n	800dd3e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800dc10:	7f3b      	ldrb	r3, [r7, #28]
 800dc12:	b25b      	sxtb	r3, r3
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	da30      	bge.n	800dc7a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800dc18:	2300      	movs	r3, #0
 800dc1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc1c:	e01b      	b.n	800dc56 <AES_CMAC_Final+0x16e>
 800dc1e:	f107 021c 	add.w	r2, r7, #28
 800dc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc24:	4413      	add	r3, r2
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	005b      	lsls	r3, r3, #1
 800dc2a:	b25a      	sxtb	r2, r3
 800dc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2e:	3301      	adds	r3, #1
 800dc30:	3348      	adds	r3, #72	; 0x48
 800dc32:	443b      	add	r3, r7
 800dc34:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dc38:	09db      	lsrs	r3, r3, #7
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	b25b      	sxtb	r3, r3
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	b25b      	sxtb	r3, r3
 800dc42:	b2d9      	uxtb	r1, r3
 800dc44:	f107 021c 	add.w	r2, r7, #28
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	4413      	add	r3, r2
 800dc4c:	460a      	mov	r2, r1
 800dc4e:	701a      	strb	r2, [r3, #0]
 800dc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc52:	3301      	adds	r3, #1
 800dc54:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	2b0e      	cmp	r3, #14
 800dc5a:	dde0      	ble.n	800dc1e <AES_CMAC_Final+0x136>
 800dc5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800dc68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc6c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dc70:	43db      	mvns	r3, r3
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dc78:	e027      	b.n	800dcca <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc7e:	e01b      	b.n	800dcb8 <AES_CMAC_Final+0x1d0>
 800dc80:	f107 021c 	add.w	r2, r7, #28
 800dc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc86:	4413      	add	r3, r2
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	005b      	lsls	r3, r3, #1
 800dc8c:	b25a      	sxtb	r2, r3
 800dc8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc90:	3301      	adds	r3, #1
 800dc92:	3348      	adds	r3, #72	; 0x48
 800dc94:	443b      	add	r3, r7
 800dc96:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dc9a:	09db      	lsrs	r3, r3, #7
 800dc9c:	b2db      	uxtb	r3, r3
 800dc9e:	b25b      	sxtb	r3, r3
 800dca0:	4313      	orrs	r3, r2
 800dca2:	b25b      	sxtb	r3, r3
 800dca4:	b2d9      	uxtb	r1, r3
 800dca6:	f107 021c 	add.w	r2, r7, #28
 800dcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcac:	4413      	add	r3, r2
 800dcae:	460a      	mov	r2, r1
 800dcb0:	701a      	strb	r2, [r3, #0]
 800dcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	637b      	str	r3, [r7, #52]	; 0x34
 800dcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcba:	2b0e      	cmp	r3, #14
 800dcbc:	dde0      	ble.n	800dc80 <AES_CMAC_Final+0x198>
 800dcbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dcc2:	005b      	lsls	r3, r3, #1
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dcd0:	683a      	ldr	r2, [r7, #0]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	2280      	movs	r2, #128	; 0x80
 800dcd6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dcda:	e007      	b.n	800dcec <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	4413      	add	r3, r2
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd00:	2b0f      	cmp	r3, #15
 800dd02:	d9eb      	bls.n	800dcdc <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800dd04:	2300      	movs	r3, #0
 800dd06:	633b      	str	r3, [r7, #48]	; 0x30
 800dd08:	e016      	b.n	800dd38 <AES_CMAC_Final+0x250>
 800dd0a:	683a      	ldr	r2, [r7, #0]
 800dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0e:	4413      	add	r3, r2
 800dd10:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd14:	781a      	ldrb	r2, [r3, #0]
 800dd16:	f107 011c 	add.w	r1, r7, #28
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1c:	440b      	add	r3, r1
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	4053      	eors	r3, r2
 800dd22:	b2d9      	uxtb	r1, r3
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	4413      	add	r3, r2
 800dd2a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd2e:	460a      	mov	r2, r1
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd34:	3301      	adds	r3, #1
 800dd36:	633b      	str	r3, [r7, #48]	; 0x30
 800dd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3a:	2b0f      	cmp	r3, #15
 800dd3c:	dde5      	ble.n	800dd0a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800dd3e:	2300      	movs	r3, #0
 800dd40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd42:	e015      	b.n	800dd70 <AES_CMAC_Final+0x288>
 800dd44:	683a      	ldr	r2, [r7, #0]
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	4413      	add	r3, r2
 800dd4a:	33f1      	adds	r3, #241	; 0xf1
 800dd4c:	781a      	ldrb	r2, [r3, #0]
 800dd4e:	6839      	ldr	r1, [r7, #0]
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	440b      	add	r3, r1
 800dd54:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	4053      	eors	r3, r2
 800dd5c:	b2d9      	uxtb	r1, r3
 800dd5e:	683a      	ldr	r2, [r7, #0]
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd62:	4413      	add	r3, r2
 800dd64:	33f1      	adds	r3, #241	; 0xf1
 800dd66:	460a      	mov	r2, r1
 800dd68:	701a      	strb	r2, [r3, #0]
 800dd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	2b0f      	cmp	r3, #15
 800dd74:	dde6      	ble.n	800dd44 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dd7c:	f107 030c 	add.w	r3, r7, #12
 800dd80:	2210      	movs	r2, #16
 800dd82:	4618      	mov	r0, r3
 800dd84:	f00b fe0b 	bl	801999e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	f107 030c 	add.w	r3, r7, #12
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f000 fd1d 	bl	800e7d0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800dd96:	f107 031c 	add.w	r3, r7, #28
 800dd9a:	2210      	movs	r2, #16
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f00b fe38 	bl	8019a14 <memset1>
}
 800dda4:	bf00      	nop
 800dda6:	3748      	adds	r7, #72	; 0x48
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	781a      	ldrb	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	683a      	ldr	r2, [r7, #0]
 800ddc4:	7852      	ldrb	r2, [r2, #1]
 800ddc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3302      	adds	r3, #2
 800ddcc:	683a      	ldr	r2, [r7, #0]
 800ddce:	7892      	ldrb	r2, [r2, #2]
 800ddd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	3303      	adds	r3, #3
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	78d2      	ldrb	r2, [r2, #3]
 800ddda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3304      	adds	r3, #4
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	7912      	ldrb	r2, [r2, #4]
 800dde4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	3305      	adds	r3, #5
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	7952      	ldrb	r2, [r2, #5]
 800ddee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3306      	adds	r3, #6
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	7992      	ldrb	r2, [r2, #6]
 800ddf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3307      	adds	r3, #7
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	79d2      	ldrb	r2, [r2, #7]
 800de02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3308      	adds	r3, #8
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	7a12      	ldrb	r2, [r2, #8]
 800de0c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	3309      	adds	r3, #9
 800de12:	683a      	ldr	r2, [r7, #0]
 800de14:	7a52      	ldrb	r2, [r2, #9]
 800de16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	330a      	adds	r3, #10
 800de1c:	683a      	ldr	r2, [r7, #0]
 800de1e:	7a92      	ldrb	r2, [r2, #10]
 800de20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	330b      	adds	r3, #11
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	7ad2      	ldrb	r2, [r2, #11]
 800de2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	330c      	adds	r3, #12
 800de30:	683a      	ldr	r2, [r7, #0]
 800de32:	7b12      	ldrb	r2, [r2, #12]
 800de34:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	330d      	adds	r3, #13
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	7b52      	ldrb	r2, [r2, #13]
 800de3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	330e      	adds	r3, #14
 800de44:	683a      	ldr	r2, [r7, #0]
 800de46:	7b92      	ldrb	r2, [r2, #14]
 800de48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	330f      	adds	r3, #15
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	7bd2      	ldrb	r2, [r2, #15]
 800de52:	701a      	strb	r2, [r3, #0]
#endif
}
 800de54:	bf00      	nop
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	bc80      	pop	{r7}
 800de5c:	4770      	bx	lr

0800de5e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800de5e:	b480      	push	{r7}
 800de60:	b085      	sub	sp, #20
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	4613      	mov	r3, r2
 800de6a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800de6c:	e007      	b.n	800de7e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800de6e:	68ba      	ldr	r2, [r7, #8]
 800de70:	1c53      	adds	r3, r2, #1
 800de72:	60bb      	str	r3, [r7, #8]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	1c59      	adds	r1, r3, #1
 800de78:	60f9      	str	r1, [r7, #12]
 800de7a:	7812      	ldrb	r2, [r2, #0]
 800de7c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800de7e:	79fb      	ldrb	r3, [r7, #7]
 800de80:	1e5a      	subs	r2, r3, #1
 800de82:	71fa      	strb	r2, [r7, #7]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1f2      	bne.n	800de6e <copy_block_nn+0x10>
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	bc80      	pop	{r7}
 800de92:	4770      	bx	lr

0800de94 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	4053      	eors	r3, r2
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3301      	adds	r3, #1
 800deb2:	7819      	ldrb	r1, [r3, #0]
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	3301      	adds	r3, #1
 800deb8:	781a      	ldrb	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	3301      	adds	r3, #1
 800debe:	404a      	eors	r2, r1
 800dec0:	b2d2      	uxtb	r2, r2
 800dec2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3302      	adds	r3, #2
 800dec8:	7819      	ldrb	r1, [r3, #0]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	3302      	adds	r3, #2
 800dece:	781a      	ldrb	r2, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	3302      	adds	r3, #2
 800ded4:	404a      	eors	r2, r1
 800ded6:	b2d2      	uxtb	r2, r2
 800ded8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3303      	adds	r3, #3
 800dede:	7819      	ldrb	r1, [r3, #0]
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	3303      	adds	r3, #3
 800dee4:	781a      	ldrb	r2, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	3303      	adds	r3, #3
 800deea:	404a      	eors	r2, r1
 800deec:	b2d2      	uxtb	r2, r2
 800deee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3304      	adds	r3, #4
 800def4:	7819      	ldrb	r1, [r3, #0]
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	3304      	adds	r3, #4
 800defa:	781a      	ldrb	r2, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	3304      	adds	r3, #4
 800df00:	404a      	eors	r2, r1
 800df02:	b2d2      	uxtb	r2, r2
 800df04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3305      	adds	r3, #5
 800df0a:	7819      	ldrb	r1, [r3, #0]
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	3305      	adds	r3, #5
 800df10:	781a      	ldrb	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	3305      	adds	r3, #5
 800df16:	404a      	eors	r2, r1
 800df18:	b2d2      	uxtb	r2, r2
 800df1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	3306      	adds	r3, #6
 800df20:	7819      	ldrb	r1, [r3, #0]
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	3306      	adds	r3, #6
 800df26:	781a      	ldrb	r2, [r3, #0]
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	3306      	adds	r3, #6
 800df2c:	404a      	eors	r2, r1
 800df2e:	b2d2      	uxtb	r2, r2
 800df30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3307      	adds	r3, #7
 800df36:	7819      	ldrb	r1, [r3, #0]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	3307      	adds	r3, #7
 800df3c:	781a      	ldrb	r2, [r3, #0]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3307      	adds	r3, #7
 800df42:	404a      	eors	r2, r1
 800df44:	b2d2      	uxtb	r2, r2
 800df46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	3308      	adds	r3, #8
 800df4c:	7819      	ldrb	r1, [r3, #0]
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	3308      	adds	r3, #8
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	3308      	adds	r3, #8
 800df58:	404a      	eors	r2, r1
 800df5a:	b2d2      	uxtb	r2, r2
 800df5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3309      	adds	r3, #9
 800df62:	7819      	ldrb	r1, [r3, #0]
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	3309      	adds	r3, #9
 800df68:	781a      	ldrb	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3309      	adds	r3, #9
 800df6e:	404a      	eors	r2, r1
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	330a      	adds	r3, #10
 800df78:	7819      	ldrb	r1, [r3, #0]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	330a      	adds	r3, #10
 800df7e:	781a      	ldrb	r2, [r3, #0]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	330a      	adds	r3, #10
 800df84:	404a      	eors	r2, r1
 800df86:	b2d2      	uxtb	r2, r2
 800df88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	330b      	adds	r3, #11
 800df8e:	7819      	ldrb	r1, [r3, #0]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	330b      	adds	r3, #11
 800df94:	781a      	ldrb	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	330b      	adds	r3, #11
 800df9a:	404a      	eors	r2, r1
 800df9c:	b2d2      	uxtb	r2, r2
 800df9e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	330c      	adds	r3, #12
 800dfa4:	7819      	ldrb	r1, [r3, #0]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	330c      	adds	r3, #12
 800dfaa:	781a      	ldrb	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	330c      	adds	r3, #12
 800dfb0:	404a      	eors	r2, r1
 800dfb2:	b2d2      	uxtb	r2, r2
 800dfb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	330d      	adds	r3, #13
 800dfba:	7819      	ldrb	r1, [r3, #0]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	330d      	adds	r3, #13
 800dfc0:	781a      	ldrb	r2, [r3, #0]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	330d      	adds	r3, #13
 800dfc6:	404a      	eors	r2, r1
 800dfc8:	b2d2      	uxtb	r2, r2
 800dfca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	330e      	adds	r3, #14
 800dfd0:	7819      	ldrb	r1, [r3, #0]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	330e      	adds	r3, #14
 800dfd6:	781a      	ldrb	r2, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	330e      	adds	r3, #14
 800dfdc:	404a      	eors	r2, r1
 800dfde:	b2d2      	uxtb	r2, r2
 800dfe0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	330f      	adds	r3, #15
 800dfe6:	7819      	ldrb	r1, [r3, #0]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	330f      	adds	r3, #15
 800dfec:	781a      	ldrb	r2, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	330f      	adds	r3, #15
 800dff2:	404a      	eors	r2, r1
 800dff4:	b2d2      	uxtb	r2, r2
 800dff6:	701a      	strb	r2, [r3, #0]
#endif
}
 800dff8:	bf00      	nop
 800dffa:	370c      	adds	r7, #12
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bc80      	pop	{r7}
 800e000:	4770      	bx	lr

0800e002 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e002:	b480      	push	{r7}
 800e004:	b085      	sub	sp, #20
 800e006:	af00      	add	r7, sp, #0
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	781a      	ldrb	r2, [r3, #0]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	4053      	eors	r3, r2
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	3301      	adds	r3, #1
 800e022:	7819      	ldrb	r1, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	3301      	adds	r3, #1
 800e028:	781a      	ldrb	r2, [r3, #0]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3301      	adds	r3, #1
 800e02e:	404a      	eors	r2, r1
 800e030:	b2d2      	uxtb	r2, r2
 800e032:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	3302      	adds	r3, #2
 800e038:	7819      	ldrb	r1, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	3302      	adds	r3, #2
 800e03e:	781a      	ldrb	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3302      	adds	r3, #2
 800e044:	404a      	eors	r2, r1
 800e046:	b2d2      	uxtb	r2, r2
 800e048:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	3303      	adds	r3, #3
 800e04e:	7819      	ldrb	r1, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3303      	adds	r3, #3
 800e054:	781a      	ldrb	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3303      	adds	r3, #3
 800e05a:	404a      	eors	r2, r1
 800e05c:	b2d2      	uxtb	r2, r2
 800e05e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	3304      	adds	r3, #4
 800e064:	7819      	ldrb	r1, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	3304      	adds	r3, #4
 800e06a:	781a      	ldrb	r2, [r3, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	3304      	adds	r3, #4
 800e070:	404a      	eors	r2, r1
 800e072:	b2d2      	uxtb	r2, r2
 800e074:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	3305      	adds	r3, #5
 800e07a:	7819      	ldrb	r1, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3305      	adds	r3, #5
 800e080:	781a      	ldrb	r2, [r3, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	3305      	adds	r3, #5
 800e086:	404a      	eors	r2, r1
 800e088:	b2d2      	uxtb	r2, r2
 800e08a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	3306      	adds	r3, #6
 800e090:	7819      	ldrb	r1, [r3, #0]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	3306      	adds	r3, #6
 800e096:	781a      	ldrb	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3306      	adds	r3, #6
 800e09c:	404a      	eors	r2, r1
 800e09e:	b2d2      	uxtb	r2, r2
 800e0a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	3307      	adds	r3, #7
 800e0a6:	7819      	ldrb	r1, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	3307      	adds	r3, #7
 800e0ac:	781a      	ldrb	r2, [r3, #0]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	404a      	eors	r2, r1
 800e0b4:	b2d2      	uxtb	r2, r2
 800e0b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	7819      	ldrb	r1, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3308      	adds	r3, #8
 800e0c2:	781a      	ldrb	r2, [r3, #0]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	3308      	adds	r3, #8
 800e0c8:	404a      	eors	r2, r1
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	3309      	adds	r3, #9
 800e0d2:	7819      	ldrb	r1, [r3, #0]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	3309      	adds	r3, #9
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3309      	adds	r3, #9
 800e0de:	404a      	eors	r2, r1
 800e0e0:	b2d2      	uxtb	r2, r2
 800e0e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	330a      	adds	r3, #10
 800e0e8:	7819      	ldrb	r1, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	330a      	adds	r3, #10
 800e0ee:	781a      	ldrb	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	330a      	adds	r3, #10
 800e0f4:	404a      	eors	r2, r1
 800e0f6:	b2d2      	uxtb	r2, r2
 800e0f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	330b      	adds	r3, #11
 800e0fe:	7819      	ldrb	r1, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	330b      	adds	r3, #11
 800e104:	781a      	ldrb	r2, [r3, #0]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	330b      	adds	r3, #11
 800e10a:	404a      	eors	r2, r1
 800e10c:	b2d2      	uxtb	r2, r2
 800e10e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	330c      	adds	r3, #12
 800e114:	7819      	ldrb	r1, [r3, #0]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	330c      	adds	r3, #12
 800e11a:	781a      	ldrb	r2, [r3, #0]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	330c      	adds	r3, #12
 800e120:	404a      	eors	r2, r1
 800e122:	b2d2      	uxtb	r2, r2
 800e124:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	330d      	adds	r3, #13
 800e12a:	7819      	ldrb	r1, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	330d      	adds	r3, #13
 800e130:	781a      	ldrb	r2, [r3, #0]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	330d      	adds	r3, #13
 800e136:	404a      	eors	r2, r1
 800e138:	b2d2      	uxtb	r2, r2
 800e13a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	330e      	adds	r3, #14
 800e140:	7819      	ldrb	r1, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	330e      	adds	r3, #14
 800e146:	781a      	ldrb	r2, [r3, #0]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	330e      	adds	r3, #14
 800e14c:	404a      	eors	r2, r1
 800e14e:	b2d2      	uxtb	r2, r2
 800e150:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	330f      	adds	r3, #15
 800e156:	7819      	ldrb	r1, [r3, #0]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	330f      	adds	r3, #15
 800e15c:	781a      	ldrb	r2, [r3, #0]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	330f      	adds	r3, #15
 800e162:	404a      	eors	r2, r1
 800e164:	b2d2      	uxtb	r2, r2
 800e166:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e168:	bf00      	nop
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bc80      	pop	{r7}
 800e170:	4770      	bx	lr

0800e172 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b082      	sub	sp, #8
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e17c:	6839      	ldr	r1, [r7, #0]
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f7ff fe88 	bl	800de94 <xor_block>
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	461a      	mov	r2, r3
 800e19a:	4b48      	ldr	r3, [pc, #288]	; (800e2bc <shift_sub_rows+0x130>)
 800e19c:	5c9a      	ldrb	r2, [r3, r2]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4a43      	ldr	r2, [pc, #268]	; (800e2bc <shift_sub_rows+0x130>)
 800e1b0:	5c52      	ldrb	r2, [r2, r1]
 800e1b2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3308      	adds	r3, #8
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3308      	adds	r3, #8
 800e1c0:	4a3e      	ldr	r2, [pc, #248]	; (800e2bc <shift_sub_rows+0x130>)
 800e1c2:	5c52      	ldrb	r2, [r2, r1]
 800e1c4:	701a      	strb	r2, [r3, #0]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	330c      	adds	r3, #12
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	330c      	adds	r3, #12
 800e1d2:	4a3a      	ldr	r2, [pc, #232]	; (800e2bc <shift_sub_rows+0x130>)
 800e1d4:	5c52      	ldrb	r2, [r2, r1]
 800e1d6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	785b      	ldrb	r3, [r3, #1]
 800e1dc:	73fb      	strb	r3, [r7, #15]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	3305      	adds	r3, #5
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	4a34      	ldr	r2, [pc, #208]	; (800e2bc <shift_sub_rows+0x130>)
 800e1ec:	5c52      	ldrb	r2, [r2, r1]
 800e1ee:	701a      	strb	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	3309      	adds	r3, #9
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3305      	adds	r3, #5
 800e1fc:	4a2f      	ldr	r2, [pc, #188]	; (800e2bc <shift_sub_rows+0x130>)
 800e1fe:	5c52      	ldrb	r2, [r2, r1]
 800e200:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	330d      	adds	r3, #13
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	4619      	mov	r1, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3309      	adds	r3, #9
 800e20e:	4a2b      	ldr	r2, [pc, #172]	; (800e2bc <shift_sub_rows+0x130>)
 800e210:	5c52      	ldrb	r2, [r2, r1]
 800e212:	701a      	strb	r2, [r3, #0]
 800e214:	7bfa      	ldrb	r2, [r7, #15]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	330d      	adds	r3, #13
 800e21a:	4928      	ldr	r1, [pc, #160]	; (800e2bc <shift_sub_rows+0x130>)
 800e21c:	5c8a      	ldrb	r2, [r1, r2]
 800e21e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	789b      	ldrb	r3, [r3, #2]
 800e224:	73fb      	strb	r3, [r7, #15]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	330a      	adds	r3, #10
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	4619      	mov	r1, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	3302      	adds	r3, #2
 800e232:	4a22      	ldr	r2, [pc, #136]	; (800e2bc <shift_sub_rows+0x130>)
 800e234:	5c52      	ldrb	r2, [r2, r1]
 800e236:	701a      	strb	r2, [r3, #0]
 800e238:	7bfa      	ldrb	r2, [r7, #15]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	330a      	adds	r3, #10
 800e23e:	491f      	ldr	r1, [pc, #124]	; (800e2bc <shift_sub_rows+0x130>)
 800e240:	5c8a      	ldrb	r2, [r1, r2]
 800e242:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	799b      	ldrb	r3, [r3, #6]
 800e248:	73fb      	strb	r3, [r7, #15]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	330e      	adds	r3, #14
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	4619      	mov	r1, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	3306      	adds	r3, #6
 800e256:	4a19      	ldr	r2, [pc, #100]	; (800e2bc <shift_sub_rows+0x130>)
 800e258:	5c52      	ldrb	r2, [r2, r1]
 800e25a:	701a      	strb	r2, [r3, #0]
 800e25c:	7bfa      	ldrb	r2, [r7, #15]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	330e      	adds	r3, #14
 800e262:	4916      	ldr	r1, [pc, #88]	; (800e2bc <shift_sub_rows+0x130>)
 800e264:	5c8a      	ldrb	r2, [r1, r2]
 800e266:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	7bdb      	ldrb	r3, [r3, #15]
 800e26c:	73fb      	strb	r3, [r7, #15]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	330b      	adds	r3, #11
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	4619      	mov	r1, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	330f      	adds	r3, #15
 800e27a:	4a10      	ldr	r2, [pc, #64]	; (800e2bc <shift_sub_rows+0x130>)
 800e27c:	5c52      	ldrb	r2, [r2, r1]
 800e27e:	701a      	strb	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3307      	adds	r3, #7
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	4619      	mov	r1, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	330b      	adds	r3, #11
 800e28c:	4a0b      	ldr	r2, [pc, #44]	; (800e2bc <shift_sub_rows+0x130>)
 800e28e:	5c52      	ldrb	r2, [r2, r1]
 800e290:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3303      	adds	r3, #3
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	4619      	mov	r1, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	3307      	adds	r3, #7
 800e29e:	4a07      	ldr	r2, [pc, #28]	; (800e2bc <shift_sub_rows+0x130>)
 800e2a0:	5c52      	ldrb	r2, [r2, r1]
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	7bfa      	ldrb	r2, [r7, #15]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3303      	adds	r3, #3
 800e2aa:	4904      	ldr	r1, [pc, #16]	; (800e2bc <shift_sub_rows+0x130>)
 800e2ac:	5c8a      	ldrb	r2, [r1, r2]
 800e2ae:	701a      	strb	r2, [r3, #0]
}
 800e2b0:	bf00      	nop
 800e2b2:	3714      	adds	r7, #20
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bc80      	pop	{r7}
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	0801f1ac 	.word	0x0801f1ac

0800e2c0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e2c8:	f107 0308 	add.w	r3, r7, #8
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7ff fd6c 	bl	800ddac <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e2d4:	7a3b      	ldrb	r3, [r7, #8]
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	4b9a      	ldr	r3, [pc, #616]	; (800e544 <mix_sub_columns+0x284>)
 800e2da:	5c9a      	ldrb	r2, [r3, r2]
 800e2dc:	7b7b      	ldrb	r3, [r7, #13]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	4b99      	ldr	r3, [pc, #612]	; (800e548 <mix_sub_columns+0x288>)
 800e2e2:	5c5b      	ldrb	r3, [r3, r1]
 800e2e4:	4053      	eors	r3, r2
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	7cbb      	ldrb	r3, [r7, #18]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4b97      	ldr	r3, [pc, #604]	; (800e54c <mix_sub_columns+0x28c>)
 800e2ee:	5c5b      	ldrb	r3, [r3, r1]
 800e2f0:	4053      	eors	r3, r2
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	4b94      	ldr	r3, [pc, #592]	; (800e54c <mix_sub_columns+0x28c>)
 800e2fa:	5c5b      	ldrb	r3, [r3, r1]
 800e2fc:	4053      	eors	r3, r2
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e304:	7a3b      	ldrb	r3, [r7, #8]
 800e306:	461a      	mov	r2, r3
 800e308:	4b90      	ldr	r3, [pc, #576]	; (800e54c <mix_sub_columns+0x28c>)
 800e30a:	5c9a      	ldrb	r2, [r3, r2]
 800e30c:	7b7b      	ldrb	r3, [r7, #13]
 800e30e:	4619      	mov	r1, r3
 800e310:	4b8c      	ldr	r3, [pc, #560]	; (800e544 <mix_sub_columns+0x284>)
 800e312:	5c5b      	ldrb	r3, [r3, r1]
 800e314:	4053      	eors	r3, r2
 800e316:	b2da      	uxtb	r2, r3
 800e318:	7cbb      	ldrb	r3, [r7, #18]
 800e31a:	4619      	mov	r1, r3
 800e31c:	4b8a      	ldr	r3, [pc, #552]	; (800e548 <mix_sub_columns+0x288>)
 800e31e:	5c5b      	ldrb	r3, [r3, r1]
 800e320:	4053      	eors	r3, r2
 800e322:	b2d9      	uxtb	r1, r3
 800e324:	7dfb      	ldrb	r3, [r7, #23]
 800e326:	461a      	mov	r2, r3
 800e328:	4b88      	ldr	r3, [pc, #544]	; (800e54c <mix_sub_columns+0x28c>)
 800e32a:	5c9a      	ldrb	r2, [r3, r2]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3301      	adds	r3, #1
 800e330:	404a      	eors	r2, r1
 800e332:	b2d2      	uxtb	r2, r2
 800e334:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e336:	7a3b      	ldrb	r3, [r7, #8]
 800e338:	461a      	mov	r2, r3
 800e33a:	4b84      	ldr	r3, [pc, #528]	; (800e54c <mix_sub_columns+0x28c>)
 800e33c:	5c9a      	ldrb	r2, [r3, r2]
 800e33e:	7b7b      	ldrb	r3, [r7, #13]
 800e340:	4619      	mov	r1, r3
 800e342:	4b82      	ldr	r3, [pc, #520]	; (800e54c <mix_sub_columns+0x28c>)
 800e344:	5c5b      	ldrb	r3, [r3, r1]
 800e346:	4053      	eors	r3, r2
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	7cbb      	ldrb	r3, [r7, #18]
 800e34c:	4619      	mov	r1, r3
 800e34e:	4b7d      	ldr	r3, [pc, #500]	; (800e544 <mix_sub_columns+0x284>)
 800e350:	5c5b      	ldrb	r3, [r3, r1]
 800e352:	4053      	eors	r3, r2
 800e354:	b2d9      	uxtb	r1, r3
 800e356:	7dfb      	ldrb	r3, [r7, #23]
 800e358:	461a      	mov	r2, r3
 800e35a:	4b7b      	ldr	r3, [pc, #492]	; (800e548 <mix_sub_columns+0x288>)
 800e35c:	5c9a      	ldrb	r2, [r3, r2]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3302      	adds	r3, #2
 800e362:	404a      	eors	r2, r1
 800e364:	b2d2      	uxtb	r2, r2
 800e366:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e368:	7a3b      	ldrb	r3, [r7, #8]
 800e36a:	461a      	mov	r2, r3
 800e36c:	4b76      	ldr	r3, [pc, #472]	; (800e548 <mix_sub_columns+0x288>)
 800e36e:	5c9a      	ldrb	r2, [r3, r2]
 800e370:	7b7b      	ldrb	r3, [r7, #13]
 800e372:	4619      	mov	r1, r3
 800e374:	4b75      	ldr	r3, [pc, #468]	; (800e54c <mix_sub_columns+0x28c>)
 800e376:	5c5b      	ldrb	r3, [r3, r1]
 800e378:	4053      	eors	r3, r2
 800e37a:	b2da      	uxtb	r2, r3
 800e37c:	7cbb      	ldrb	r3, [r7, #18]
 800e37e:	4619      	mov	r1, r3
 800e380:	4b72      	ldr	r3, [pc, #456]	; (800e54c <mix_sub_columns+0x28c>)
 800e382:	5c5b      	ldrb	r3, [r3, r1]
 800e384:	4053      	eors	r3, r2
 800e386:	b2d9      	uxtb	r1, r3
 800e388:	7dfb      	ldrb	r3, [r7, #23]
 800e38a:	461a      	mov	r2, r3
 800e38c:	4b6d      	ldr	r3, [pc, #436]	; (800e544 <mix_sub_columns+0x284>)
 800e38e:	5c9a      	ldrb	r2, [r3, r2]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3303      	adds	r3, #3
 800e394:	404a      	eors	r2, r1
 800e396:	b2d2      	uxtb	r2, r2
 800e398:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e39a:	7b3b      	ldrb	r3, [r7, #12]
 800e39c:	461a      	mov	r2, r3
 800e39e:	4b69      	ldr	r3, [pc, #420]	; (800e544 <mix_sub_columns+0x284>)
 800e3a0:	5c9a      	ldrb	r2, [r3, r2]
 800e3a2:	7c7b      	ldrb	r3, [r7, #17]
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4b68      	ldr	r3, [pc, #416]	; (800e548 <mix_sub_columns+0x288>)
 800e3a8:	5c5b      	ldrb	r3, [r3, r1]
 800e3aa:	4053      	eors	r3, r2
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	7dbb      	ldrb	r3, [r7, #22]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4b66      	ldr	r3, [pc, #408]	; (800e54c <mix_sub_columns+0x28c>)
 800e3b4:	5c5b      	ldrb	r3, [r3, r1]
 800e3b6:	4053      	eors	r3, r2
 800e3b8:	b2d9      	uxtb	r1, r3
 800e3ba:	7afb      	ldrb	r3, [r7, #11]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4b63      	ldr	r3, [pc, #396]	; (800e54c <mix_sub_columns+0x28c>)
 800e3c0:	5c9a      	ldrb	r2, [r3, r2]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	404a      	eors	r2, r1
 800e3c8:	b2d2      	uxtb	r2, r2
 800e3ca:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e3cc:	7b3b      	ldrb	r3, [r7, #12]
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	4b5e      	ldr	r3, [pc, #376]	; (800e54c <mix_sub_columns+0x28c>)
 800e3d2:	5c9a      	ldrb	r2, [r3, r2]
 800e3d4:	7c7b      	ldrb	r3, [r7, #17]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	4b5a      	ldr	r3, [pc, #360]	; (800e544 <mix_sub_columns+0x284>)
 800e3da:	5c5b      	ldrb	r3, [r3, r1]
 800e3dc:	4053      	eors	r3, r2
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	7dbb      	ldrb	r3, [r7, #22]
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	4b58      	ldr	r3, [pc, #352]	; (800e548 <mix_sub_columns+0x288>)
 800e3e6:	5c5b      	ldrb	r3, [r3, r1]
 800e3e8:	4053      	eors	r3, r2
 800e3ea:	b2d9      	uxtb	r1, r3
 800e3ec:	7afb      	ldrb	r3, [r7, #11]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	4b56      	ldr	r3, [pc, #344]	; (800e54c <mix_sub_columns+0x28c>)
 800e3f2:	5c9a      	ldrb	r2, [r3, r2]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3305      	adds	r3, #5
 800e3f8:	404a      	eors	r2, r1
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e3fe:	7b3b      	ldrb	r3, [r7, #12]
 800e400:	461a      	mov	r2, r3
 800e402:	4b52      	ldr	r3, [pc, #328]	; (800e54c <mix_sub_columns+0x28c>)
 800e404:	5c9a      	ldrb	r2, [r3, r2]
 800e406:	7c7b      	ldrb	r3, [r7, #17]
 800e408:	4619      	mov	r1, r3
 800e40a:	4b50      	ldr	r3, [pc, #320]	; (800e54c <mix_sub_columns+0x28c>)
 800e40c:	5c5b      	ldrb	r3, [r3, r1]
 800e40e:	4053      	eors	r3, r2
 800e410:	b2da      	uxtb	r2, r3
 800e412:	7dbb      	ldrb	r3, [r7, #22]
 800e414:	4619      	mov	r1, r3
 800e416:	4b4b      	ldr	r3, [pc, #300]	; (800e544 <mix_sub_columns+0x284>)
 800e418:	5c5b      	ldrb	r3, [r3, r1]
 800e41a:	4053      	eors	r3, r2
 800e41c:	b2d9      	uxtb	r1, r3
 800e41e:	7afb      	ldrb	r3, [r7, #11]
 800e420:	461a      	mov	r2, r3
 800e422:	4b49      	ldr	r3, [pc, #292]	; (800e548 <mix_sub_columns+0x288>)
 800e424:	5c9a      	ldrb	r2, [r3, r2]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	3306      	adds	r3, #6
 800e42a:	404a      	eors	r2, r1
 800e42c:	b2d2      	uxtb	r2, r2
 800e42e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e430:	7b3b      	ldrb	r3, [r7, #12]
 800e432:	461a      	mov	r2, r3
 800e434:	4b44      	ldr	r3, [pc, #272]	; (800e548 <mix_sub_columns+0x288>)
 800e436:	5c9a      	ldrb	r2, [r3, r2]
 800e438:	7c7b      	ldrb	r3, [r7, #17]
 800e43a:	4619      	mov	r1, r3
 800e43c:	4b43      	ldr	r3, [pc, #268]	; (800e54c <mix_sub_columns+0x28c>)
 800e43e:	5c5b      	ldrb	r3, [r3, r1]
 800e440:	4053      	eors	r3, r2
 800e442:	b2da      	uxtb	r2, r3
 800e444:	7dbb      	ldrb	r3, [r7, #22]
 800e446:	4619      	mov	r1, r3
 800e448:	4b40      	ldr	r3, [pc, #256]	; (800e54c <mix_sub_columns+0x28c>)
 800e44a:	5c5b      	ldrb	r3, [r3, r1]
 800e44c:	4053      	eors	r3, r2
 800e44e:	b2d9      	uxtb	r1, r3
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	461a      	mov	r2, r3
 800e454:	4b3b      	ldr	r3, [pc, #236]	; (800e544 <mix_sub_columns+0x284>)
 800e456:	5c9a      	ldrb	r2, [r3, r2]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3307      	adds	r3, #7
 800e45c:	404a      	eors	r2, r1
 800e45e:	b2d2      	uxtb	r2, r2
 800e460:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e462:	7c3b      	ldrb	r3, [r7, #16]
 800e464:	461a      	mov	r2, r3
 800e466:	4b37      	ldr	r3, [pc, #220]	; (800e544 <mix_sub_columns+0x284>)
 800e468:	5c9a      	ldrb	r2, [r3, r2]
 800e46a:	7d7b      	ldrb	r3, [r7, #21]
 800e46c:	4619      	mov	r1, r3
 800e46e:	4b36      	ldr	r3, [pc, #216]	; (800e548 <mix_sub_columns+0x288>)
 800e470:	5c5b      	ldrb	r3, [r3, r1]
 800e472:	4053      	eors	r3, r2
 800e474:	b2da      	uxtb	r2, r3
 800e476:	7abb      	ldrb	r3, [r7, #10]
 800e478:	4619      	mov	r1, r3
 800e47a:	4b34      	ldr	r3, [pc, #208]	; (800e54c <mix_sub_columns+0x28c>)
 800e47c:	5c5b      	ldrb	r3, [r3, r1]
 800e47e:	4053      	eors	r3, r2
 800e480:	b2d9      	uxtb	r1, r3
 800e482:	7bfb      	ldrb	r3, [r7, #15]
 800e484:	461a      	mov	r2, r3
 800e486:	4b31      	ldr	r3, [pc, #196]	; (800e54c <mix_sub_columns+0x28c>)
 800e488:	5c9a      	ldrb	r2, [r3, r2]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3308      	adds	r3, #8
 800e48e:	404a      	eors	r2, r1
 800e490:	b2d2      	uxtb	r2, r2
 800e492:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e494:	7c3b      	ldrb	r3, [r7, #16]
 800e496:	461a      	mov	r2, r3
 800e498:	4b2c      	ldr	r3, [pc, #176]	; (800e54c <mix_sub_columns+0x28c>)
 800e49a:	5c9a      	ldrb	r2, [r3, r2]
 800e49c:	7d7b      	ldrb	r3, [r7, #21]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4b28      	ldr	r3, [pc, #160]	; (800e544 <mix_sub_columns+0x284>)
 800e4a2:	5c5b      	ldrb	r3, [r3, r1]
 800e4a4:	4053      	eors	r3, r2
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	7abb      	ldrb	r3, [r7, #10]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4b26      	ldr	r3, [pc, #152]	; (800e548 <mix_sub_columns+0x288>)
 800e4ae:	5c5b      	ldrb	r3, [r3, r1]
 800e4b0:	4053      	eors	r3, r2
 800e4b2:	b2d9      	uxtb	r1, r3
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	4b24      	ldr	r3, [pc, #144]	; (800e54c <mix_sub_columns+0x28c>)
 800e4ba:	5c9a      	ldrb	r2, [r3, r2]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	3309      	adds	r3, #9
 800e4c0:	404a      	eors	r2, r1
 800e4c2:	b2d2      	uxtb	r2, r2
 800e4c4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e4c6:	7c3b      	ldrb	r3, [r7, #16]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	4b20      	ldr	r3, [pc, #128]	; (800e54c <mix_sub_columns+0x28c>)
 800e4cc:	5c9a      	ldrb	r2, [r3, r2]
 800e4ce:	7d7b      	ldrb	r3, [r7, #21]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4b1e      	ldr	r3, [pc, #120]	; (800e54c <mix_sub_columns+0x28c>)
 800e4d4:	5c5b      	ldrb	r3, [r3, r1]
 800e4d6:	4053      	eors	r3, r2
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	7abb      	ldrb	r3, [r7, #10]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	4b19      	ldr	r3, [pc, #100]	; (800e544 <mix_sub_columns+0x284>)
 800e4e0:	5c5b      	ldrb	r3, [r3, r1]
 800e4e2:	4053      	eors	r3, r2
 800e4e4:	b2d9      	uxtb	r1, r3
 800e4e6:	7bfb      	ldrb	r3, [r7, #15]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	4b17      	ldr	r3, [pc, #92]	; (800e548 <mix_sub_columns+0x288>)
 800e4ec:	5c9a      	ldrb	r2, [r3, r2]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	330a      	adds	r3, #10
 800e4f2:	404a      	eors	r2, r1
 800e4f4:	b2d2      	uxtb	r2, r2
 800e4f6:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e4f8:	7c3b      	ldrb	r3, [r7, #16]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	4b12      	ldr	r3, [pc, #72]	; (800e548 <mix_sub_columns+0x288>)
 800e4fe:	5c9a      	ldrb	r2, [r3, r2]
 800e500:	7d7b      	ldrb	r3, [r7, #21]
 800e502:	4619      	mov	r1, r3
 800e504:	4b11      	ldr	r3, [pc, #68]	; (800e54c <mix_sub_columns+0x28c>)
 800e506:	5c5b      	ldrb	r3, [r3, r1]
 800e508:	4053      	eors	r3, r2
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	7abb      	ldrb	r3, [r7, #10]
 800e50e:	4619      	mov	r1, r3
 800e510:	4b0e      	ldr	r3, [pc, #56]	; (800e54c <mix_sub_columns+0x28c>)
 800e512:	5c5b      	ldrb	r3, [r3, r1]
 800e514:	4053      	eors	r3, r2
 800e516:	b2d9      	uxtb	r1, r3
 800e518:	7bfb      	ldrb	r3, [r7, #15]
 800e51a:	461a      	mov	r2, r3
 800e51c:	4b09      	ldr	r3, [pc, #36]	; (800e544 <mix_sub_columns+0x284>)
 800e51e:	5c9a      	ldrb	r2, [r3, r2]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	330b      	adds	r3, #11
 800e524:	404a      	eors	r2, r1
 800e526:	b2d2      	uxtb	r2, r2
 800e528:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e52a:	7d3b      	ldrb	r3, [r7, #20]
 800e52c:	461a      	mov	r2, r3
 800e52e:	4b05      	ldr	r3, [pc, #20]	; (800e544 <mix_sub_columns+0x284>)
 800e530:	5c9a      	ldrb	r2, [r3, r2]
 800e532:	7a7b      	ldrb	r3, [r7, #9]
 800e534:	4619      	mov	r1, r3
 800e536:	4b04      	ldr	r3, [pc, #16]	; (800e548 <mix_sub_columns+0x288>)
 800e538:	5c5b      	ldrb	r3, [r3, r1]
 800e53a:	4053      	eors	r3, r2
 800e53c:	b2da      	uxtb	r2, r3
 800e53e:	7bbb      	ldrb	r3, [r7, #14]
 800e540:	4619      	mov	r1, r3
 800e542:	e005      	b.n	800e550 <mix_sub_columns+0x290>
 800e544:	0801f2ac 	.word	0x0801f2ac
 800e548:	0801f3ac 	.word	0x0801f3ac
 800e54c:	0801f1ac 	.word	0x0801f1ac
 800e550:	4b2d      	ldr	r3, [pc, #180]	; (800e608 <mix_sub_columns+0x348>)
 800e552:	5c5b      	ldrb	r3, [r3, r1]
 800e554:	4053      	eors	r3, r2
 800e556:	b2d9      	uxtb	r1, r3
 800e558:	7cfb      	ldrb	r3, [r7, #19]
 800e55a:	461a      	mov	r2, r3
 800e55c:	4b2a      	ldr	r3, [pc, #168]	; (800e608 <mix_sub_columns+0x348>)
 800e55e:	5c9a      	ldrb	r2, [r3, r2]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	330c      	adds	r3, #12
 800e564:	404a      	eors	r2, r1
 800e566:	b2d2      	uxtb	r2, r2
 800e568:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e56a:	7d3b      	ldrb	r3, [r7, #20]
 800e56c:	461a      	mov	r2, r3
 800e56e:	4b26      	ldr	r3, [pc, #152]	; (800e608 <mix_sub_columns+0x348>)
 800e570:	5c9a      	ldrb	r2, [r3, r2]
 800e572:	7a7b      	ldrb	r3, [r7, #9]
 800e574:	4619      	mov	r1, r3
 800e576:	4b25      	ldr	r3, [pc, #148]	; (800e60c <mix_sub_columns+0x34c>)
 800e578:	5c5b      	ldrb	r3, [r3, r1]
 800e57a:	4053      	eors	r3, r2
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
 800e580:	4619      	mov	r1, r3
 800e582:	4b23      	ldr	r3, [pc, #140]	; (800e610 <mix_sub_columns+0x350>)
 800e584:	5c5b      	ldrb	r3, [r3, r1]
 800e586:	4053      	eors	r3, r2
 800e588:	b2d9      	uxtb	r1, r3
 800e58a:	7cfb      	ldrb	r3, [r7, #19]
 800e58c:	461a      	mov	r2, r3
 800e58e:	4b1e      	ldr	r3, [pc, #120]	; (800e608 <mix_sub_columns+0x348>)
 800e590:	5c9a      	ldrb	r2, [r3, r2]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	330d      	adds	r3, #13
 800e596:	404a      	eors	r2, r1
 800e598:	b2d2      	uxtb	r2, r2
 800e59a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e59c:	7d3b      	ldrb	r3, [r7, #20]
 800e59e:	461a      	mov	r2, r3
 800e5a0:	4b19      	ldr	r3, [pc, #100]	; (800e608 <mix_sub_columns+0x348>)
 800e5a2:	5c9a      	ldrb	r2, [r3, r2]
 800e5a4:	7a7b      	ldrb	r3, [r7, #9]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4b17      	ldr	r3, [pc, #92]	; (800e608 <mix_sub_columns+0x348>)
 800e5aa:	5c5b      	ldrb	r3, [r3, r1]
 800e5ac:	4053      	eors	r3, r2
 800e5ae:	b2da      	uxtb	r2, r3
 800e5b0:	7bbb      	ldrb	r3, [r7, #14]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	4b15      	ldr	r3, [pc, #84]	; (800e60c <mix_sub_columns+0x34c>)
 800e5b6:	5c5b      	ldrb	r3, [r3, r1]
 800e5b8:	4053      	eors	r3, r2
 800e5ba:	b2d9      	uxtb	r1, r3
 800e5bc:	7cfb      	ldrb	r3, [r7, #19]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	4b13      	ldr	r3, [pc, #76]	; (800e610 <mix_sub_columns+0x350>)
 800e5c2:	5c9a      	ldrb	r2, [r3, r2]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	330e      	adds	r3, #14
 800e5c8:	404a      	eors	r2, r1
 800e5ca:	b2d2      	uxtb	r2, r2
 800e5cc:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e5ce:	7d3b      	ldrb	r3, [r7, #20]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4b0f      	ldr	r3, [pc, #60]	; (800e610 <mix_sub_columns+0x350>)
 800e5d4:	5c9a      	ldrb	r2, [r3, r2]
 800e5d6:	7a7b      	ldrb	r3, [r7, #9]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4b0b      	ldr	r3, [pc, #44]	; (800e608 <mix_sub_columns+0x348>)
 800e5dc:	5c5b      	ldrb	r3, [r3, r1]
 800e5de:	4053      	eors	r3, r2
 800e5e0:	b2da      	uxtb	r2, r3
 800e5e2:	7bbb      	ldrb	r3, [r7, #14]
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4b08      	ldr	r3, [pc, #32]	; (800e608 <mix_sub_columns+0x348>)
 800e5e8:	5c5b      	ldrb	r3, [r3, r1]
 800e5ea:	4053      	eors	r3, r2
 800e5ec:	b2d9      	uxtb	r1, r3
 800e5ee:	7cfb      	ldrb	r3, [r7, #19]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b06      	ldr	r3, [pc, #24]	; (800e60c <mix_sub_columns+0x34c>)
 800e5f4:	5c9a      	ldrb	r2, [r3, r2]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	330f      	adds	r3, #15
 800e5fa:	404a      	eors	r2, r1
 800e5fc:	b2d2      	uxtb	r2, r2
 800e5fe:	701a      	strb	r2, [r3, #0]
  }
 800e600:	bf00      	nop
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	0801f1ac 	.word	0x0801f1ac
 800e60c:	0801f2ac 	.word	0x0801f2ac
 800e610:	0801f3ac 	.word	0x0801f3ac

0800e614 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	460b      	mov	r3, r1
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e622:	7afb      	ldrb	r3, [r7, #11]
 800e624:	3b10      	subs	r3, #16
 800e626:	2b10      	cmp	r3, #16
 800e628:	bf8c      	ite	hi
 800e62a:	2201      	movhi	r2, #1
 800e62c:	2200      	movls	r2, #0
 800e62e:	b2d2      	uxtb	r2, r2
 800e630:	2a00      	cmp	r2, #0
 800e632:	d10b      	bne.n	800e64c <lorawan_aes_set_key+0x38>
 800e634:	4a64      	ldr	r2, [pc, #400]	; (800e7c8 <lorawan_aes_set_key+0x1b4>)
 800e636:	fa22 f303 	lsr.w	r3, r2, r3
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	bf14      	ite	ne
 800e642:	2301      	movne	r3, #1
 800e644:	2300      	moveq	r3, #0
 800e646:	b2db      	uxtb	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d105      	bne.n	800e658 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e654:	23ff      	movs	r3, #255	; 0xff
 800e656:	e0b2      	b.n	800e7be <lorawan_aes_set_key+0x1aa>
        break;
 800e658:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	7afa      	ldrb	r2, [r7, #11]
 800e65e:	68f9      	ldr	r1, [r7, #12]
 800e660:	4618      	mov	r0, r3
 800e662:	f7ff fbfc 	bl	800de5e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e666:	7afb      	ldrb	r3, [r7, #11]
 800e668:	331c      	adds	r3, #28
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e670:	7c7b      	ldrb	r3, [r7, #17]
 800e672:	091b      	lsrs	r3, r3, #4
 800e674:	b2db      	uxtb	r3, r3
 800e676:	3b01      	subs	r3, #1
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e680:	7afb      	ldrb	r3, [r7, #11]
 800e682:	75fb      	strb	r3, [r7, #23]
 800e684:	2301      	movs	r3, #1
 800e686:	75bb      	strb	r3, [r7, #22]
 800e688:	e093      	b.n	800e7b2 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e68a:	7dfb      	ldrb	r3, [r7, #23]
 800e68c:	3b04      	subs	r3, #4
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	5cd3      	ldrb	r3, [r2, r3]
 800e692:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e694:	7dfb      	ldrb	r3, [r7, #23]
 800e696:	3b03      	subs	r3, #3
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	5cd3      	ldrb	r3, [r2, r3]
 800e69c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e69e:	7dfb      	ldrb	r3, [r7, #23]
 800e6a0:	3b02      	subs	r3, #2
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	5cd3      	ldrb	r3, [r2, r3]
 800e6a6:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	5cd3      	ldrb	r3, [r2, r3]
 800e6b0:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
 800e6b4:	7afa      	ldrb	r2, [r7, #11]
 800e6b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6ba:	fb01 f202 	mul.w	r2, r1, r2
 800e6be:	1a9b      	subs	r3, r3, r2
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d127      	bne.n	800e716 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e6c6:	7d7b      	ldrb	r3, [r7, #21]
 800e6c8:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e6ca:	7d3b      	ldrb	r3, [r7, #20]
 800e6cc:	4a3f      	ldr	r2, [pc, #252]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e6ce:	5cd2      	ldrb	r2, [r2, r3]
 800e6d0:	7dbb      	ldrb	r3, [r7, #22]
 800e6d2:	4053      	eors	r3, r2
 800e6d4:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e6d6:	7cfb      	ldrb	r3, [r7, #19]
 800e6d8:	4a3c      	ldr	r2, [pc, #240]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e6da:	5cd3      	ldrb	r3, [r2, r3]
 800e6dc:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e6de:	7cbb      	ldrb	r3, [r7, #18]
 800e6e0:	4a3a      	ldr	r2, [pc, #232]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e6e2:	5cd3      	ldrb	r3, [r2, r3]
 800e6e4:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e6e6:	7c3b      	ldrb	r3, [r7, #16]
 800e6e8:	4a38      	ldr	r2, [pc, #224]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e6ea:	5cd3      	ldrb	r3, [r2, r3]
 800e6ec:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e6ee:	7dbb      	ldrb	r3, [r7, #22]
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	b25a      	sxtb	r2, r3
 800e6f4:	7dbb      	ldrb	r3, [r7, #22]
 800e6f6:	09db      	lsrs	r3, r3, #7
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	0049      	lsls	r1, r1, #1
 800e6fe:	440b      	add	r3, r1
 800e700:	4619      	mov	r1, r3
 800e702:	00c8      	lsls	r0, r1, #3
 800e704:	4619      	mov	r1, r3
 800e706:	4603      	mov	r3, r0
 800e708:	440b      	add	r3, r1
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	4053      	eors	r3, r2
 800e710:	b25b      	sxtb	r3, r3
 800e712:	75bb      	strb	r3, [r7, #22]
 800e714:	e01c      	b.n	800e750 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e716:	7afb      	ldrb	r3, [r7, #11]
 800e718:	2b18      	cmp	r3, #24
 800e71a:	d919      	bls.n	800e750 <lorawan_aes_set_key+0x13c>
 800e71c:	7dfb      	ldrb	r3, [r7, #23]
 800e71e:	7afa      	ldrb	r2, [r7, #11]
 800e720:	fbb3 f1f2 	udiv	r1, r3, r2
 800e724:	fb01 f202 	mul.w	r2, r1, r2
 800e728:	1a9b      	subs	r3, r3, r2
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b10      	cmp	r3, #16
 800e72e:	d10f      	bne.n	800e750 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e730:	7d7b      	ldrb	r3, [r7, #21]
 800e732:	4a26      	ldr	r2, [pc, #152]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e734:	5cd3      	ldrb	r3, [r2, r3]
 800e736:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e738:	7d3b      	ldrb	r3, [r7, #20]
 800e73a:	4a24      	ldr	r2, [pc, #144]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e73c:	5cd3      	ldrb	r3, [r2, r3]
 800e73e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e740:	7cfb      	ldrb	r3, [r7, #19]
 800e742:	4a22      	ldr	r2, [pc, #136]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e744:	5cd3      	ldrb	r3, [r2, r3]
 800e746:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e748:	7cbb      	ldrb	r3, [r7, #18]
 800e74a:	4a20      	ldr	r2, [pc, #128]	; (800e7cc <lorawan_aes_set_key+0x1b8>)
 800e74c:	5cd3      	ldrb	r3, [r2, r3]
 800e74e:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e750:	7dfa      	ldrb	r2, [r7, #23]
 800e752:	7afb      	ldrb	r3, [r7, #11]
 800e754:	1ad3      	subs	r3, r2, r3
 800e756:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e758:	7c3b      	ldrb	r3, [r7, #16]
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	5cd1      	ldrb	r1, [r2, r3]
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	7d7a      	ldrb	r2, [r7, #21]
 800e762:	404a      	eors	r2, r1
 800e764:	b2d1      	uxtb	r1, r2
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e76a:	7c3b      	ldrb	r3, [r7, #16]
 800e76c:	3301      	adds	r3, #1
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	5cd1      	ldrb	r1, [r2, r3]
 800e772:	7dfb      	ldrb	r3, [r7, #23]
 800e774:	3301      	adds	r3, #1
 800e776:	7d3a      	ldrb	r2, [r7, #20]
 800e778:	404a      	eors	r2, r1
 800e77a:	b2d1      	uxtb	r1, r2
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e780:	7c3b      	ldrb	r3, [r7, #16]
 800e782:	3302      	adds	r3, #2
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	5cd1      	ldrb	r1, [r2, r3]
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	3302      	adds	r3, #2
 800e78c:	7cfa      	ldrb	r2, [r7, #19]
 800e78e:	404a      	eors	r2, r1
 800e790:	b2d1      	uxtb	r1, r2
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e796:	7c3b      	ldrb	r3, [r7, #16]
 800e798:	3303      	adds	r3, #3
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	5cd1      	ldrb	r1, [r2, r3]
 800e79e:	7dfb      	ldrb	r3, [r7, #23]
 800e7a0:	3303      	adds	r3, #3
 800e7a2:	7cba      	ldrb	r2, [r7, #18]
 800e7a4:	404a      	eors	r2, r1
 800e7a6:	b2d1      	uxtb	r1, r2
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	75fb      	strb	r3, [r7, #23]
 800e7b2:	7dfa      	ldrb	r2, [r7, #23]
 800e7b4:	7c7b      	ldrb	r3, [r7, #17]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	f4ff af67 	bcc.w	800e68a <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	00010101 	.word	0x00010101
 800e7cc:	0801f1ac 	.word	0x0801f1ac

0800e7d0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08a      	sub	sp, #40	; 0x28
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d038      	beq.n	800e858 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	f107 0314 	add.w	r3, r7, #20
 800e7ec:	68f9      	ldr	r1, [r7, #12]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fc07 	bl	800e002 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7fa:	e014      	b.n	800e826 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e7fc:	f107 0314 	add.w	r3, r7, #20
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fd5d 	bl	800e2c0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e80c:	0112      	lsls	r2, r2, #4
 800e80e:	441a      	add	r2, r3
 800e810:	f107 0314 	add.w	r3, r7, #20
 800e814:	4611      	mov	r1, r2
 800e816:	4618      	mov	r0, r3
 800e818:	f7ff fcab 	bl	800e172 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e820:	3301      	adds	r3, #1
 800e822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e82c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e830:	429a      	cmp	r2, r3
 800e832:	d3e3      	bcc.n	800e7fc <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e834:	f107 0314 	add.w	r3, r7, #20
 800e838:	4618      	mov	r0, r3
 800e83a:	f7ff fca7 	bl	800e18c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e844:	0112      	lsls	r2, r2, #4
 800e846:	441a      	add	r2, r3
 800e848:	f107 0314 	add.w	r3, r7, #20
 800e84c:	4619      	mov	r1, r3
 800e84e:	68b8      	ldr	r0, [r7, #8]
 800e850:	f7ff fbd7 	bl	800e002 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e854:	2300      	movs	r3, #0
 800e856:	e000      	b.n	800e85a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e858:	23ff      	movs	r3, #255	; 0xff
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3728      	adds	r7, #40	; 0x28
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
	...

0800e864 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e866:	b0a1      	sub	sp, #132	; 0x84
 800e868:	af12      	add	r7, sp, #72	; 0x48
 800e86a:	4603      	mov	r3, r0
 800e86c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e870:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e878:	4611      	mov	r1, r2
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fa12 	bl	800eca4 <SecureElementGetKeyByID>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d174      	bne.n	800e970 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e886:	2300      	movs	r3, #0
 800e888:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e88c:	e06c      	b.n	800e968 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800e88e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e892:	4939      	ldr	r1, [pc, #228]	; (800e978 <PrintKey+0x114>)
 800e894:	4613      	mov	r3, r2
 800e896:	005b      	lsls	r3, r3, #1
 800e898:	4413      	add	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	440b      	add	r3, r1
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d15a      	bne.n	800e95e <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800e8a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e8ac:	4932      	ldr	r1, [pc, #200]	; (800e978 <PrintKey+0x114>)
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	4413      	add	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	440b      	add	r3, r1
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	6819      	ldr	r1, [r3, #0]
 800e8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8be:	785b      	ldrb	r3, [r3, #1]
 800e8c0:	461d      	mov	r5, r3
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c4:	789b      	ldrb	r3, [r3, #2]
 800e8c6:	461e      	mov	r6, r3
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ca:	78db      	ldrb	r3, [r3, #3]
 800e8cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	791b      	ldrb	r3, [r3, #4]
 800e8d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	795b      	ldrb	r3, [r3, #5]
 800e8d8:	623b      	str	r3, [r7, #32]
 800e8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8dc:	799b      	ldrb	r3, [r3, #6]
 800e8de:	61fb      	str	r3, [r7, #28]
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	79db      	ldrb	r3, [r3, #7]
 800e8e4:	61bb      	str	r3, [r7, #24]
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e8:	7a1b      	ldrb	r3, [r3, #8]
 800e8ea:	617b      	str	r3, [r7, #20]
 800e8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ee:	7a5b      	ldrb	r3, [r3, #9]
 800e8f0:	613b      	str	r3, [r7, #16]
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	7a9b      	ldrb	r3, [r3, #10]
 800e8f6:	60fb      	str	r3, [r7, #12]
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fa:	7adb      	ldrb	r3, [r3, #11]
 800e8fc:	60bb      	str	r3, [r7, #8]
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	7b1b      	ldrb	r3, [r3, #12]
 800e902:	607b      	str	r3, [r7, #4]
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	7b5b      	ldrb	r3, [r3, #13]
 800e908:	461c      	mov	r4, r3
 800e90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90c:	7b9b      	ldrb	r3, [r3, #14]
 800e90e:	4618      	mov	r0, r3
 800e910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e912:	7bdb      	ldrb	r3, [r3, #15]
 800e914:	461a      	mov	r2, r3
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	7c1b      	ldrb	r3, [r3, #16]
 800e91a:	9310      	str	r3, [sp, #64]	; 0x40
 800e91c:	920f      	str	r2, [sp, #60]	; 0x3c
 800e91e:	900e      	str	r0, [sp, #56]	; 0x38
 800e920:	940d      	str	r4, [sp, #52]	; 0x34
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	920c      	str	r2, [sp, #48]	; 0x30
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	920b      	str	r2, [sp, #44]	; 0x2c
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	920a      	str	r2, [sp, #40]	; 0x28
 800e92e:	693a      	ldr	r2, [r7, #16]
 800e930:	9209      	str	r2, [sp, #36]	; 0x24
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	9208      	str	r2, [sp, #32]
 800e936:	69ba      	ldr	r2, [r7, #24]
 800e938:	9207      	str	r2, [sp, #28]
 800e93a:	69fa      	ldr	r2, [r7, #28]
 800e93c:	9206      	str	r2, [sp, #24]
 800e93e:	6a3a      	ldr	r2, [r7, #32]
 800e940:	9205      	str	r2, [sp, #20]
 800e942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e944:	9204      	str	r2, [sp, #16]
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	9303      	str	r3, [sp, #12]
 800e94a:	9602      	str	r6, [sp, #8]
 800e94c:	9501      	str	r5, [sp, #4]
 800e94e:	9100      	str	r1, [sp, #0]
 800e950:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <PrintKey+0x118>)
 800e952:	2200      	movs	r2, #0
 800e954:	2100      	movs	r1, #0
 800e956:	2002      	movs	r0, #2
 800e958:	f00f fbc6 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
 800e95c:	e008      	b.n	800e970 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e95e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e962:	3301      	adds	r3, #1
 800e964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e96c:	2b0a      	cmp	r3, #10
 800e96e:	d98e      	bls.n	800e88e <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e970:	373c      	adds	r7, #60	; 0x3c
 800e972:	46bd      	mov	sp, r7
 800e974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e976:	bf00      	nop
 800e978:	0801f4ac 	.word	0x0801f4ac
 800e97c:	0801ed44 	.word	0x0801ed44

0800e980 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e982:	b091      	sub	sp, #68	; 0x44
 800e984:	af08      	add	r7, sp, #32
 800e986:	4603      	mov	r3, r0
 800e988:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e98e:	f107 0310 	add.w	r3, r7, #16
 800e992:	4618      	mov	r0, r3
 800e994:	f000 fbf0 	bl	800f178 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800e998:	7c3b      	ldrb	r3, [r7, #16]
 800e99a:	7c7a      	ldrb	r2, [r7, #17]
 800e99c:	7cb9      	ldrb	r1, [r7, #18]
 800e99e:	7cf8      	ldrb	r0, [r7, #19]
 800e9a0:	7d3c      	ldrb	r4, [r7, #20]
 800e9a2:	7d7d      	ldrb	r5, [r7, #21]
 800e9a4:	7dbe      	ldrb	r6, [r7, #22]
 800e9a6:	f897 c017 	ldrb.w	ip, [r7, #23]
 800e9aa:	f8cd c01c 	str.w	ip, [sp, #28]
 800e9ae:	9606      	str	r6, [sp, #24]
 800e9b0:	9505      	str	r5, [sp, #20]
 800e9b2:	9404      	str	r4, [sp, #16]
 800e9b4:	9003      	str	r0, [sp, #12]
 800e9b6:	9102      	str	r1, [sp, #8]
 800e9b8:	9201      	str	r2, [sp, #4]
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	4b24      	ldr	r3, [pc, #144]	; (800ea50 <PrintIds+0xd0>)
 800e9be:	2200      	movs	r2, #0
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	2002      	movs	r0, #2
 800e9c4:	f00f fb90 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800e9c8:	f107 0318 	add.w	r3, r7, #24
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f000 fc03 	bl	800f1d8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800e9d2:	7e3b      	ldrb	r3, [r7, #24]
 800e9d4:	7e7a      	ldrb	r2, [r7, #25]
 800e9d6:	7eb9      	ldrb	r1, [r7, #26]
 800e9d8:	7ef8      	ldrb	r0, [r7, #27]
 800e9da:	7f3c      	ldrb	r4, [r7, #28]
 800e9dc:	7f7d      	ldrb	r5, [r7, #29]
 800e9de:	7fbe      	ldrb	r6, [r7, #30]
 800e9e0:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800e9e4:	f8cd c01c 	str.w	ip, [sp, #28]
 800e9e8:	9606      	str	r6, [sp, #24]
 800e9ea:	9505      	str	r5, [sp, #20]
 800e9ec:	9404      	str	r4, [sp, #16]
 800e9ee:	9003      	str	r0, [sp, #12]
 800e9f0:	9102      	str	r1, [sp, #8]
 800e9f2:	9201      	str	r2, [sp, #4]
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	4b17      	ldr	r3, [pc, #92]	; (800ea54 <PrintIds+0xd4>)
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	2002      	movs	r0, #2
 800e9fe:	f00f fb73 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ea02:	f107 020c 	add.w	r2, r7, #12
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	4611      	mov	r1, r2
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f000 fc16 	bl	800f23c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ea10:	f107 030c 	add.w	r3, r7, #12
 800ea14:	3303      	adds	r3, #3
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	f107 030c 	add.w	r3, r7, #12
 800ea1e:	3302      	adds	r3, #2
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	4619      	mov	r1, r3
 800ea24:	f107 030c 	add.w	r3, r7, #12
 800ea28:	3301      	adds	r3, #1
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f107 030c 	add.w	r3, r7, #12
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	9303      	str	r3, [sp, #12]
 800ea36:	9002      	str	r0, [sp, #8]
 800ea38:	9101      	str	r1, [sp, #4]
 800ea3a:	9200      	str	r2, [sp, #0]
 800ea3c:	4b06      	ldr	r3, [pc, #24]	; (800ea58 <PrintIds+0xd8>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	2100      	movs	r1, #0
 800ea42:	2002      	movs	r0, #2
 800ea44:	f00f fb50 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800ea48:	bf00      	nop
 800ea4a:	3724      	adds	r7, #36	; 0x24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea50:	0801eda0 	.word	0x0801eda0
 800ea54:	0801ede0 	.word	0x0801ede0
 800ea58:	0801ee20 	.word	0x0801ee20

0800ea5c <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	4603      	mov	r3, r0
 800ea64:	6039      	str	r1, [r7, #0]
 800ea66:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
 800ea6c:	e01a      	b.n	800eaa4 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ea6e:	4b12      	ldr	r3, [pc, #72]	; (800eab8 <GetKeyByID+0x5c>)
 800ea70:	6819      	ldr	r1, [r3, #0]
 800ea72:	7bfa      	ldrb	r2, [r7, #15]
 800ea74:	4613      	mov	r3, r2
 800ea76:	011b      	lsls	r3, r3, #4
 800ea78:	4413      	add	r3, r2
 800ea7a:	440b      	add	r3, r1
 800ea7c:	3318      	adds	r3, #24
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	79fa      	ldrb	r2, [r7, #7]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d10b      	bne.n	800ea9e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ea86:	4b0c      	ldr	r3, [pc, #48]	; (800eab8 <GetKeyByID+0x5c>)
 800ea88:	6819      	ldr	r1, [r3, #0]
 800ea8a:	7bfa      	ldrb	r2, [r7, #15]
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	011b      	lsls	r3, r3, #4
 800ea90:	4413      	add	r3, r2
 800ea92:	3318      	adds	r3, #24
 800ea94:	18ca      	adds	r2, r1, r3
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e006      	b.n	800eaac <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	73fb      	strb	r3, [r7, #15]
 800eaa4:	7bfb      	ldrb	r3, [r7, #15]
 800eaa6:	2b0a      	cmp	r3, #10
 800eaa8:	d9e1      	bls.n	800ea6e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eaaa:	2303      	movs	r3, #3
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bc80      	pop	{r7}
 800eab4:	4770      	bx	lr
 800eab6:	bf00      	nop
 800eab8:	200007ec 	.word	0x200007ec

0800eabc <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800eabc:	b590      	push	{r4, r7, lr}
 800eabe:	b0d1      	sub	sp, #324	; 0x144
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800eac6:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800eaca:	6020      	str	r0, [r4, #0]
 800eacc:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ead0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ead4:	6001      	str	r1, [r0, #0]
 800ead6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800eada:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800eade:	600a      	str	r2, [r1, #0]
 800eae0:	461a      	mov	r2, r3
 800eae2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eae6:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800eaea:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800eaec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eaf0:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <ComputeCmac+0x46>
 800eafa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eb02:	2302      	movs	r3, #2
 800eb04:	e05d      	b.n	800ebc2 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800eb06:	f107 0314 	add.w	r3, r7, #20
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe ff02 	bl	800d914 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800eb10:	f107 0210 	add.w	r2, r7, #16
 800eb14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb18:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	4611      	mov	r1, r2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7ff ff9b 	bl	800ea5c <GetKeyByID>
 800eb26:	4603      	mov	r3, r0
 800eb28:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eb2c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d144      	bne.n	800ebbe <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800eb34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	1c5a      	adds	r2, r3, #1
 800eb40:	f107 0314 	add.w	r3, r7, #20
 800eb44:	4611      	mov	r1, r2
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fe fefd 	bl	800d946 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800eb4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d009      	beq.n	800eb6e <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800eb5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800eb62:	f107 0014 	add.w	r0, r7, #20
 800eb66:	2210      	movs	r2, #16
 800eb68:	6819      	ldr	r1, [r3, #0]
 800eb6a:	f7fe fefb 	bl	800d964 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800eb6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb72:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800eb76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eb7a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eb7e:	f107 0014 	add.w	r0, r7, #20
 800eb82:	6812      	ldr	r2, [r2, #0]
 800eb84:	6819      	ldr	r1, [r3, #0]
 800eb86:	f7fe feed 	bl	800d964 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800eb8a:	f107 0214 	add.w	r2, r7, #20
 800eb8e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe ffa7 	bl	800dae8 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800eb9a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800eb9e:	461a      	mov	r2, r3
 800eba0:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	431a      	orrs	r2, r3
 800eba8:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ebac:	041b      	lsls	r3, r3, #16
 800ebae:	431a      	orrs	r2, r3
 800ebb0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ebb4:	061b      	lsls	r3, r3, #24
 800ebb6:	431a      	orrs	r2, r3
 800ebb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ebbc:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ebbe:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd90      	pop	{r4, r7, pc}

0800ebcc <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e00a      	b.n	800ebf4 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ebde:	4a07      	ldr	r2, [pc, #28]	; (800ebfc <SecureElementInit+0x30>)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800ebe4:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <SecureElementInit+0x30>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	22d8      	movs	r2, #216	; 0xd8
 800ebea:	4905      	ldr	r1, [pc, #20]	; (800ec00 <SecureElementInit+0x34>)
 800ebec:	4618      	mov	r0, r3
 800ebee:	f00a fed6 	bl	801999e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	200007ec 	.word	0x200007ec
 800ec00:	0801f6c8 	.word	0x0801f6c8

0800ec04 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800ec12:	f107 030c 	add.w	r3, r7, #12
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 faae 	bl	800f178 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ec1c:	f107 0308 	add.w	r3, r7, #8
 800ec20:	4619      	mov	r1, r3
 800ec22:	2001      	movs	r0, #1
 800ec24:	f000 fb0a 	bl	800f23c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d024      	beq.n	800ec78 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ec32:	2300      	movs	r3, #0
 800ec34:	75bb      	strb	r3, [r7, #22]
 800ec36:	e00c      	b.n	800ec52 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800ec38:	7dbb      	ldrb	r3, [r7, #22]
 800ec3a:	3318      	adds	r3, #24
 800ec3c:	443b      	add	r3, r7
 800ec3e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800ec46:	2301      	movs	r3, #1
 800ec48:	75fb      	strb	r3, [r7, #23]
                break;
 800ec4a:	e005      	b.n	800ec58 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800ec4c:	7dbb      	ldrb	r3, [r7, #22]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	75bb      	strb	r3, [r7, #22]
 800ec52:	7dbb      	ldrb	r3, [r7, #22]
 800ec54:	2b07      	cmp	r3, #7
 800ec56:	d9ef      	bls.n	800ec38 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	f083 0301 	eor.w	r3, r3, #1
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d009      	beq.n	800ec78 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800ec64:	f107 020c 	add.w	r2, r7, #12
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800ec6e:	f107 030c 	add.w	r3, r7, #12
 800ec72:	4618      	mov	r0, r3
 800ec74:	f000 fa68 	bl	800f148 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00c      	beq.n	800ec98 <SecureElementInitMcuID+0x94>
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d109      	bne.n	800ec98 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800ec84:	f107 0208 	add.w	r2, r7, #8
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	4619      	mov	r1, r3
 800ec92:	2001      	movs	r0, #1
 800ec94:	f000 fab8 	bl	800f208 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ec98:	2300      	movs	r3, #0
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
	...

0800eca4 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	4603      	mov	r3, r0
 800ecac:	6039      	str	r1, [r7, #0]
 800ecae:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	73fb      	strb	r3, [r7, #15]
 800ecb4:	e01a      	b.n	800ecec <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ecb6:	4b12      	ldr	r3, [pc, #72]	; (800ed00 <SecureElementGetKeyByID+0x5c>)
 800ecb8:	6819      	ldr	r1, [r3, #0]
 800ecba:	7bfa      	ldrb	r2, [r7, #15]
 800ecbc:	4613      	mov	r3, r2
 800ecbe:	011b      	lsls	r3, r3, #4
 800ecc0:	4413      	add	r3, r2
 800ecc2:	440b      	add	r3, r1
 800ecc4:	3318      	adds	r3, #24
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	79fa      	ldrb	r2, [r7, #7]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d10b      	bne.n	800ece6 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ecce:	4b0c      	ldr	r3, [pc, #48]	; (800ed00 <SecureElementGetKeyByID+0x5c>)
 800ecd0:	6819      	ldr	r1, [r3, #0]
 800ecd2:	7bfa      	ldrb	r2, [r7, #15]
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	011b      	lsls	r3, r3, #4
 800ecd8:	4413      	add	r3, r2
 800ecda:	3318      	adds	r3, #24
 800ecdc:	18ca      	adds	r2, r1, r3
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ece2:	2300      	movs	r3, #0
 800ece4:	e006      	b.n	800ecf4 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	3301      	adds	r3, #1
 800ecea:	73fb      	strb	r3, [r7, #15]
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	2b0a      	cmp	r3, #10
 800ecf0:	d9e1      	bls.n	800ecb6 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecf2:	2303      	movs	r3, #3
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bc80      	pop	{r7}
 800ecfc:	4770      	bx	lr
 800ecfe:	bf00      	nop
 800ed00:	200007ec 	.word	0x200007ec

0800ed04 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800ed08:	2000      	movs	r0, #0
 800ed0a:	f7ff fdab 	bl	800e864 <PrintKey>
    PrintKey( NWK_KEY );
 800ed0e:	2001      	movs	r0, #1
 800ed10:	f7ff fda8 	bl	800e864 <PrintKey>
    PrintKey( APP_S_KEY );
 800ed14:	2009      	movs	r0, #9
 800ed16:	f7ff fda5 	bl	800e864 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ed1a:	2008      	movs	r0, #8
 800ed1c:	f7ff fda2 	bl	800e864 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800ed20:	2000      	movs	r0, #0
 800ed22:	f7ff fe2d 	bl	800e980 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	4603      	mov	r3, r0
 800ed34:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800ed36:	200b      	movs	r0, #11
 800ed38:	f7ff fd94 	bl	800e864 <PrintKey>
    PrintKey( MC_KE_KEY );
 800ed3c:	200c      	movs	r0, #12
 800ed3e:	f7ff fd91 	bl	800e864 <PrintKey>
    PrintKey( APP_S_KEY );
 800ed42:	2009      	movs	r0, #9
 800ed44:	f7ff fd8e 	bl	800e864 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ed48:	2008      	movs	r0, #8
 800ed4a:	f7ff fd8b 	bl	800e864 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800ed4e:	200a      	movs	r0, #10
 800ed50:	f7ff fd88 	bl	800e864 <PrintKey>
    PrintIds( mode );
 800ed54:	79fb      	ldrb	r3, [r7, #7]
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff fe12 	bl	800e980 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ed5c:	2300      	movs	r3, #0
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b088      	sub	sp, #32
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	6039      	str	r1, [r7, #0]
 800ed72:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d101      	bne.n	800ed7e <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed7a:	2302      	movs	r3, #2
 800ed7c:	e04c      	b.n	800ee18 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ed7e:	2300      	movs	r3, #0
 800ed80:	77fb      	strb	r3, [r7, #31]
 800ed82:	e045      	b.n	800ee10 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ed84:	4b26      	ldr	r3, [pc, #152]	; (800ee20 <SecureElementSetKey+0xb8>)
 800ed86:	6819      	ldr	r1, [r3, #0]
 800ed88:	7ffa      	ldrb	r2, [r7, #31]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	011b      	lsls	r3, r3, #4
 800ed8e:	4413      	add	r3, r2
 800ed90:	440b      	add	r3, r1
 800ed92:	3318      	adds	r3, #24
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	79fa      	ldrb	r2, [r7, #7]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d136      	bne.n	800ee0a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	2b0d      	cmp	r3, #13
 800eda0:	d123      	bne.n	800edea <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800eda2:	2306      	movs	r3, #6
 800eda4:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800eda6:	2300      	movs	r3, #0
 800eda8:	60fb      	str	r3, [r7, #12]
 800edaa:	f107 0310 	add.w	r3, r7, #16
 800edae:	2200      	movs	r2, #0
 800edb0:	601a      	str	r2, [r3, #0]
 800edb2:	605a      	str	r2, [r3, #4]
 800edb4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800edb6:	f107 030c 	add.w	r3, r7, #12
 800edba:	220c      	movs	r2, #12
 800edbc:	2110      	movs	r1, #16
 800edbe:	6838      	ldr	r0, [r7, #0]
 800edc0:	f000 f876 	bl	800eeb0 <SecureElementAesEncrypt>
 800edc4:	4603      	mov	r3, r0
 800edc6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800edc8:	4b15      	ldr	r3, [pc, #84]	; (800ee20 <SecureElementSetKey+0xb8>)
 800edca:	6819      	ldr	r1, [r3, #0]
 800edcc:	7ffa      	ldrb	r2, [r7, #31]
 800edce:	4613      	mov	r3, r2
 800edd0:	011b      	lsls	r3, r3, #4
 800edd2:	4413      	add	r3, r2
 800edd4:	3318      	adds	r3, #24
 800edd6:	440b      	add	r3, r1
 800edd8:	3301      	adds	r3, #1
 800edda:	f107 010c 	add.w	r1, r7, #12
 800edde:	2210      	movs	r2, #16
 800ede0:	4618      	mov	r0, r3
 800ede2:	f00a fddc 	bl	801999e <memcpy1>
                return retval;
 800ede6:	7fbb      	ldrb	r3, [r7, #30]
 800ede8:	e016      	b.n	800ee18 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800edea:	4b0d      	ldr	r3, [pc, #52]	; (800ee20 <SecureElementSetKey+0xb8>)
 800edec:	6819      	ldr	r1, [r3, #0]
 800edee:	7ffa      	ldrb	r2, [r7, #31]
 800edf0:	4613      	mov	r3, r2
 800edf2:	011b      	lsls	r3, r3, #4
 800edf4:	4413      	add	r3, r2
 800edf6:	3318      	adds	r3, #24
 800edf8:	440b      	add	r3, r1
 800edfa:	3301      	adds	r3, #1
 800edfc:	2210      	movs	r2, #16
 800edfe:	6839      	ldr	r1, [r7, #0]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f00a fdcc 	bl	801999e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ee06:	2300      	movs	r3, #0
 800ee08:	e006      	b.n	800ee18 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ee0a:	7ffb      	ldrb	r3, [r7, #31]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	77fb      	strb	r3, [r7, #31]
 800ee10:	7ffb      	ldrb	r3, [r7, #31]
 800ee12:	2b0a      	cmp	r3, #10
 800ee14:	d9b6      	bls.n	800ed84 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee16:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3720      	adds	r7, #32
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	200007ec 	.word	0x200007ec

0800ee24 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b086      	sub	sp, #24
 800ee28:	af02      	add	r7, sp, #8
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	607a      	str	r2, [r7, #4]
 800ee30:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800ee32:	78fb      	ldrb	r3, [r7, #3]
 800ee34:	2b0b      	cmp	r3, #11
 800ee36:	d901      	bls.n	800ee3c <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee38:	2303      	movs	r3, #3
 800ee3a:	e009      	b.n	800ee50 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ee3c:	78fa      	ldrb	r2, [r7, #3]
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	9300      	str	r3, [sp, #0]
 800ee42:	4613      	mov	r3, r2
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	68b9      	ldr	r1, [r7, #8]
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7ff fe37 	bl	800eabc <ComputeCmac>
 800ee4e:	4603      	mov	r3, r0
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af02      	add	r7, sp, #8
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d101      	bne.n	800ee70 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	e01b      	b.n	800eea8 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ee70:	2306      	movs	r3, #6
 800ee72:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ee78:	78fa      	ldrb	r2, [r7, #3]
 800ee7a:	f107 0310 	add.w	r3, r7, #16
 800ee7e:	9300      	str	r3, [sp, #0]
 800ee80:	4613      	mov	r3, r2
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	68f9      	ldr	r1, [r7, #12]
 800ee86:	2000      	movs	r0, #0
 800ee88:	f7ff fe18 	bl	800eabc <ComputeCmac>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d001      	beq.n	800ee9a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800ee96:	7dfb      	ldrb	r3, [r7, #23]
 800ee98:	e006      	b.n	800eea8 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d001      	beq.n	800eea6 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800eea2:	2301      	movs	r3, #1
 800eea4:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800eea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3718      	adds	r7, #24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b0c2      	sub	sp, #264	; 0x108
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800eebc:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800eec0:	6001      	str	r1, [r0, #0]
 800eec2:	4611      	mov	r1, r2
 800eec4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800eec8:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800eecc:	6013      	str	r3, [r2, #0]
 800eece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800eed6:	460a      	mov	r2, r1
 800eed8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d006      	beq.n	800eeee <SecureElementAesEncrypt+0x3e>
 800eee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eeee:	2302      	movs	r3, #2
 800eef0:	e059      	b.n	800efa6 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800eef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eef6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f003 030f 	and.w	r3, r3, #15
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ef04:	2305      	movs	r3, #5
 800ef06:	e04e      	b.n	800efa6 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ef08:	f107 0314 	add.w	r3, r7, #20
 800ef0c:	22f0      	movs	r2, #240	; 0xf0
 800ef0e:	2100      	movs	r1, #0
 800ef10:	4618      	mov	r0, r3
 800ef12:	f00a fd7f 	bl	8019a14 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ef16:	f107 0210 	add.w	r2, r7, #16
 800ef1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef1e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	4611      	mov	r1, r2
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fd98 	bl	800ea5c <GetKeyByID>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ef32:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d133      	bne.n	800efa2 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	f107 0214 	add.w	r2, r7, #20
 800ef42:	2110      	movs	r1, #16
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7ff fb65 	bl	800e614 <lorawan_aes_set_key>

        uint8_t block = 0;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800ef50:	e020      	b.n	800ef94 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800ef52:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	18d0      	adds	r0, r2, r3
 800ef5a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ef5e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ef62:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ef66:	6812      	ldr	r2, [r2, #0]
 800ef68:	4413      	add	r3, r2
 800ef6a:	f107 0214 	add.w	r2, r7, #20
 800ef6e:	4619      	mov	r1, r3
 800ef70:	f7ff fc2e 	bl	800e7d0 <lorawan_aes_encrypt>
            block = block + 16;
 800ef74:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ef78:	3310      	adds	r3, #16
 800ef7a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800ef7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ef86:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ef8a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800ef8e:	6812      	ldr	r2, [r2, #0]
 800ef90:	3a10      	subs	r2, #16
 800ef92:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800ef94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1d7      	bne.n	800ef52 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800efa2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	460b      	mov	r3, r1
 800efba:	70fb      	strb	r3, [r7, #3]
 800efbc:	4613      	mov	r3, r2
 800efbe:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d101      	bne.n	800efca <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efc6:	2302      	movs	r3, #2
 800efc8:	e02e      	b.n	800f028 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800efca:	2306      	movs	r3, #6
 800efcc:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800efce:	78bb      	ldrb	r3, [r7, #2]
 800efd0:	2b0c      	cmp	r3, #12
 800efd2:	d104      	bne.n	800efde <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	2b0b      	cmp	r3, #11
 800efd8:	d001      	beq.n	800efde <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800efda:	2303      	movs	r3, #3
 800efdc:	e024      	b.n	800f028 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800efde:	2300      	movs	r3, #0
 800efe0:	60fb      	str	r3, [r7, #12]
 800efe2:	f107 0310 	add.w	r3, r7, #16
 800efe6:	2200      	movs	r2, #0
 800efe8:	601a      	str	r2, [r3, #0]
 800efea:	605a      	str	r2, [r3, #4]
 800efec:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800efee:	f107 030c 	add.w	r3, r7, #12
 800eff2:	78fa      	ldrb	r2, [r7, #3]
 800eff4:	2110      	movs	r1, #16
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff ff5a 	bl	800eeb0 <SecureElementAesEncrypt>
 800effc:	4603      	mov	r3, r0
 800effe:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f000:	7ffb      	ldrb	r3, [r7, #31]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d001      	beq.n	800f00a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f006:	7ffb      	ldrb	r3, [r7, #31]
 800f008:	e00e      	b.n	800f028 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f00a:	f107 020c 	add.w	r2, r7, #12
 800f00e:	78bb      	ldrb	r3, [r7, #2]
 800f010:	4611      	mov	r1, r2
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff fea8 	bl	800ed68 <SecureElementSetKey>
 800f018:	4603      	mov	r3, r0
 800f01a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f01c:	7ffb      	ldrb	r3, [r7, #31]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d001      	beq.n	800f026 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f022:	7ffb      	ldrb	r3, [r7, #31]
 800f024:	e000      	b.n	800f028 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f026:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3720      	adds	r7, #32
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b086      	sub	sp, #24
 800f034:	af00      	add	r7, sp, #0
 800f036:	60b9      	str	r1, [r7, #8]
 800f038:	607b      	str	r3, [r7, #4]
 800f03a:	4603      	mov	r3, r0
 800f03c:	73fb      	strb	r3, [r7, #15]
 800f03e:	4613      	mov	r3, r2
 800f040:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d005      	beq.n	800f054 <SecureElementProcessJoinAccept+0x24>
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d002      	beq.n	800f054 <SecureElementProcessJoinAccept+0x24>
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f054:	2302      	movs	r3, #2
 800f056:	e05c      	b.n	800f112 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f058:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f05c:	2b21      	cmp	r3, #33	; 0x21
 800f05e:	d901      	bls.n	800f064 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f060:	2305      	movs	r3, #5
 800f062:	e056      	b.n	800f112 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f064:	2301      	movs	r3, #1
 800f066:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f068:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	6879      	ldr	r1, [r7, #4]
 800f072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f074:	f00a fc93 	bl	801999e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	1c58      	adds	r0, r3, #1
 800f07c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f080:	3b01      	subs	r3, #1
 800f082:	4619      	mov	r1, r3
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	3301      	adds	r3, #1
 800f088:	7dfa      	ldrb	r2, [r7, #23]
 800f08a:	f7ff ff11 	bl	800eeb0 <SecureElementAesEncrypt>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f094:	2307      	movs	r3, #7
 800f096:	e03c      	b.n	800f112 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	330b      	adds	r3, #11
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	09db      	lsrs	r3, r3, #7
 800f0a0:	b2da      	uxtb	r2, r3
 800f0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a4:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f0a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0aa:	3b04      	subs	r3, #4
 800f0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ae:	4413      	add	r3, r2
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0b8:	3b03      	subs	r3, #3
 800f0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0bc:	4413      	add	r3, r2
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	021b      	lsls	r3, r3, #8
 800f0c2:	ea41 0203 	orr.w	r2, r1, r3
 800f0c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0ca:	3b02      	subs	r3, #2
 800f0cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0ce:	440b      	add	r3, r1
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	041b      	lsls	r3, r3, #16
 800f0d4:	431a      	orrs	r2, r3
 800f0d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f0de:	440b      	add	r3, r1
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	061b      	lsls	r3, r3, #24
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10d      	bne.n	800f10c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f0f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f0f4:	3b04      	subs	r3, #4
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	693a      	ldr	r2, [r7, #16]
 800f0fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0fe:	f7ff feab 	bl	800ee58 <SecureElementVerifyAesCmac>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d003      	beq.n	800f110 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f108:	2301      	movs	r3, #1
 800f10a:	e002      	b.n	800f112 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f10c:	2304      	movs	r3, #4
 800f10e:	e000      	b.n	800f112 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3718      	adds	r7, #24
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d101      	bne.n	800f12e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f12a:	2302      	movs	r3, #2
 800f12c:	e006      	b.n	800f13c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f12e:	4b05      	ldr	r3, [pc, #20]	; (800f144 <SecureElementRandomNumber+0x28>)
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	4798      	blx	r3
 800f134:	4602      	mov	r2, r0
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	0801f578 	.word	0x0801f578

0800f148 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b082      	sub	sp, #8
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d101      	bne.n	800f15a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f156:	2302      	movs	r3, #2
 800f158:	e007      	b.n	800f16a <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f15a:	4b06      	ldr	r3, [pc, #24]	; (800f174 <SecureElementSetDevEui+0x2c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	2208      	movs	r2, #8
 800f160:	6879      	ldr	r1, [r7, #4]
 800f162:	4618      	mov	r0, r3
 800f164:	f00a fc1b 	bl	801999e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f168:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	200007ec 	.word	0x200007ec

0800f178 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b082      	sub	sp, #8
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d101      	bne.n	800f18a <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f186:	2302      	movs	r3, #2
 800f188:	e007      	b.n	800f19a <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f18a:	4b06      	ldr	r3, [pc, #24]	; (800f1a4 <SecureElementGetDevEui+0x2c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2208      	movs	r2, #8
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f00a fc03 	bl	801999e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f198:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3708      	adds	r7, #8
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}
 800f1a2:	bf00      	nop
 800f1a4:	200007ec 	.word	0x200007ec

0800f1a8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1b6:	2302      	movs	r3, #2
 800f1b8:	e008      	b.n	800f1cc <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f1ba:	4b06      	ldr	r3, [pc, #24]	; (800f1d4 <SecureElementSetJoinEui+0x2c>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3308      	adds	r3, #8
 800f1c0:	2208      	movs	r2, #8
 800f1c2:	6879      	ldr	r1, [r7, #4]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f00a fbea 	bl	801999e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f1ca:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	200007ec 	.word	0x200007ec

0800f1d8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d101      	bne.n	800f1ea <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1e6:	2302      	movs	r3, #2
 800f1e8:	e008      	b.n	800f1fc <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f1ea:	4b06      	ldr	r3, [pc, #24]	; (800f204 <SecureElementGetJoinEui+0x2c>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3308      	adds	r3, #8
 800f1f0:	2208      	movs	r2, #8
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f00a fbd2 	bl	801999e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f1fa:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3708      	adds	r7, #8
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	200007ec 	.word	0x200007ec

0800f208 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	4603      	mov	r3, r0
 800f210:	6039      	str	r1, [r7, #0]
 800f212:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f214:	79fb      	ldrb	r3, [r7, #7]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d104      	bne.n	800f224 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f21a:	4b07      	ldr	r3, [pc, #28]	; (800f238 <SecureElementSetDevAddr+0x30>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	611a      	str	r2, [r3, #16]
 800f222:	e003      	b.n	800f22c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f224:	4b04      	ldr	r3, [pc, #16]	; (800f238 <SecureElementSetDevAddr+0x30>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f22c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f22e:	4618      	mov	r0, r3
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	bc80      	pop	{r7}
 800f236:	4770      	bx	lr
 800f238:	200007ec 	.word	0x200007ec

0800f23c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	4603      	mov	r3, r0
 800f244:	6039      	str	r1, [r7, #0]
 800f246:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d101      	bne.n	800f252 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f24e:	2302      	movs	r3, #2
 800f250:	e00e      	b.n	800f270 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f252:	79fb      	ldrb	r3, [r7, #7]
 800f254:	2b02      	cmp	r3, #2
 800f256:	d105      	bne.n	800f264 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f258:	4b08      	ldr	r3, [pc, #32]	; (800f27c <SecureElementGetDevAddr+0x40>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	691a      	ldr	r2, [r3, #16]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	601a      	str	r2, [r3, #0]
 800f262:	e004      	b.n	800f26e <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f264:	4b05      	ldr	r3, [pc, #20]	; (800f27c <SecureElementGetDevAddr+0x40>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	695a      	ldr	r2, [r3, #20]
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f26e:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f270:	4618      	mov	r0, r3
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	bc80      	pop	{r7}
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	200007ec 	.word	0x200007ec

0800f280 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f28a:	4a22      	ldr	r2, [pc, #136]	; (800f314 <LmHandlerInit+0x94>)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f290:	4b21      	ldr	r3, [pc, #132]	; (800f318 <LmHandlerInit+0x98>)
 800f292:	4a22      	ldr	r2, [pc, #136]	; (800f31c <LmHandlerInit+0x9c>)
 800f294:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f296:	4b20      	ldr	r3, [pc, #128]	; (800f318 <LmHandlerInit+0x98>)
 800f298:	4a21      	ldr	r2, [pc, #132]	; (800f320 <LmHandlerInit+0xa0>)
 800f29a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f29c:	4b1e      	ldr	r3, [pc, #120]	; (800f318 <LmHandlerInit+0x98>)
 800f29e:	4a21      	ldr	r2, [pc, #132]	; (800f324 <LmHandlerInit+0xa4>)
 800f2a0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f2a2:	4b1d      	ldr	r3, [pc, #116]	; (800f318 <LmHandlerInit+0x98>)
 800f2a4:	4a20      	ldr	r2, [pc, #128]	; (800f328 <LmHandlerInit+0xa8>)
 800f2a6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f2a8:	4b1a      	ldr	r3, [pc, #104]	; (800f314 <LmHandlerInit+0x94>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a1f      	ldr	r2, [pc, #124]	; (800f32c <LmHandlerInit+0xac>)
 800f2b0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f2b2:	4b18      	ldr	r3, [pc, #96]	; (800f314 <LmHandlerInit+0x94>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	685b      	ldr	r3, [r3, #4]
 800f2b8:	4a1c      	ldr	r2, [pc, #112]	; (800f32c <LmHandlerInit+0xac>)
 800f2ba:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f2bc:	4b15      	ldr	r3, [pc, #84]	; (800f314 <LmHandlerInit+0x94>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	689b      	ldr	r3, [r3, #8]
 800f2c2:	4a1a      	ldr	r2, [pc, #104]	; (800f32c <LmHandlerInit+0xac>)
 800f2c4:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f2c6:	4b13      	ldr	r3, [pc, #76]	; (800f314 <LmHandlerInit+0x94>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	4a17      	ldr	r2, [pc, #92]	; (800f32c <LmHandlerInit+0xac>)
 800f2ce:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f2d0:	4b16      	ldr	r3, [pc, #88]	; (800f32c <LmHandlerInit+0xac>)
 800f2d2:	4a17      	ldr	r2, [pc, #92]	; (800f330 <LmHandlerInit+0xb0>)
 800f2d4:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f2d6:	4b0f      	ldr	r3, [pc, #60]	; (800f314 <LmHandlerInit+0x94>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	699b      	ldr	r3, [r3, #24]
 800f2dc:	4a13      	ldr	r2, [pc, #76]	; (800f32c <LmHandlerInit+0xac>)
 800f2de:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f2e0:	4914      	ldr	r1, [pc, #80]	; (800f334 <LmHandlerInit+0xb4>)
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	f000 fd44 	bl	800fd70 <LmHandlerPackageRegister>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d002      	beq.n	800f2f4 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f2ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f2:	e00a      	b.n	800f30a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f2f4:	463b      	mov	r3, r7
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f001 fa30 	bl	801075c <LmhpPackagesRegistrationInit>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d002      	beq.n	800f308 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
 800f306:	e000      	b.n	800f30a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	20000834 	.word	0x20000834
 800f318:	20000838 	.word	0x20000838
 800f31c:	0800fa35 	.word	0x0800fa35
 800f320:	0800faa9 	.word	0x0800faa9
 800f324:	0800fb89 	.word	0x0800fb89
 800f328:	0800fcdd 	.word	0x0800fcdd
 800f32c:	20000848 	.word	0x20000848
 800f330:	08010131 	.word	0x08010131
 800f334:	2000009c 	.word	0x2000009c

0800f338 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b090      	sub	sp, #64	; 0x40
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f340:	2218      	movs	r2, #24
 800f342:	6879      	ldr	r1, [r7, #4]
 800f344:	4852      	ldr	r0, [pc, #328]	; (800f490 <LmHandlerConfigure+0x158>)
 800f346:	f00a fb2a 	bl	801999e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f34a:	f7fe faa1 	bl	800d890 <LoraInfo_GetPtr>
 800f34e:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f350:	4b4f      	ldr	r3, [pc, #316]	; (800f490 <LmHandlerConfigure+0x158>)
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	461a      	mov	r2, r3
 800f356:	2301      	movs	r3, #1
 800f358:	4093      	lsls	r3, r2
 800f35a:	461a      	mov	r2, r3
 800f35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	4013      	ands	r3, r2
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f366:	4b4b      	ldr	r3, [pc, #300]	; (800f494 <LmHandlerConfigure+0x15c>)
 800f368:	2201      	movs	r2, #1
 800f36a:	2100      	movs	r1, #0
 800f36c:	2000      	movs	r0, #0
 800f36e:	f00e febb 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f372:	e7fe      	b.n	800f372 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f374:	4b46      	ldr	r3, [pc, #280]	; (800f490 <LmHandlerConfigure+0x158>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	461a      	mov	r2, r3
 800f37a:	4947      	ldr	r1, [pc, #284]	; (800f498 <LmHandlerConfigure+0x160>)
 800f37c:	4847      	ldr	r0, [pc, #284]	; (800f49c <LmHandlerConfigure+0x164>)
 800f37e:	f004 fbc3 	bl	8013b08 <LoRaMacInitialization>
 800f382:	4603      	mov	r3, r0
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f388:	f04f 33ff 	mov.w	r3, #4294967295
 800f38c:	e07c      	b.n	800f488 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f38e:	2305      	movs	r3, #5
 800f390:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f392:	2300      	movs	r3, #0
 800f394:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f396:	f107 0314 	add.w	r3, r7, #20
 800f39a:	4618      	mov	r0, r3
 800f39c:	f005 f902 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f3a0:	4b3d      	ldr	r3, [pc, #244]	; (800f498 <LmHandlerConfigure+0x160>)
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	4a3c      	ldr	r2, [pc, #240]	; (800f498 <LmHandlerConfigure+0x160>)
 800f3a6:	68d2      	ldr	r2, [r2, #12]
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff fc2a 	bl	800ec04 <SecureElementInitMcuID>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ba:	e065      	b.n	800f488 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f3bc:	2306      	movs	r3, #6
 800f3be:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f3c0:	f107 0314 	add.w	r3, r7, #20
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f004 ff37 	bl	8014238 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	4a34      	ldr	r2, [pc, #208]	; (800f4a0 <LmHandlerConfigure+0x168>)
 800f3ce:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f3d0:	f107 0314 	add.w	r3, r7, #20
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f005 f8e5 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f3da:	2302      	movs	r3, #2
 800f3dc:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f3de:	4b30      	ldr	r3, [pc, #192]	; (800f4a0 <LmHandlerConfigure+0x168>)
 800f3e0:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f3e2:	f107 0314 	add.w	r3, r7, #20
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f004 ff26 	bl	8014238 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f3ec:	2303      	movs	r3, #3
 800f3ee:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f3f0:	4b2c      	ldr	r3, [pc, #176]	; (800f4a4 <LmHandlerConfigure+0x16c>)
 800f3f2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f3f4:	f107 0314 	add.w	r3, r7, #20
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f004 ff1d 	bl	8014238 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f3fe:	f7ff fc81 	bl	800ed04 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f402:	230f      	movs	r3, #15
 800f404:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f406:	2301      	movs	r3, #1
 800f408:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f40a:	f107 0314 	add.w	r3, r7, #20
 800f40e:	4618      	mov	r0, r3
 800f410:	f005 f8c8 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f414:	2310      	movs	r3, #16
 800f416:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f418:	2300      	movs	r3, #0
 800f41a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f41c:	f107 0314 	add.w	r3, r7, #20
 800f420:	4618      	mov	r0, r3
 800f422:	f005 f8bf 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f426:	2304      	movs	r3, #4
 800f428:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f42a:	4b19      	ldr	r3, [pc, #100]	; (800f490 <LmHandlerConfigure+0x158>)
 800f42c:	789b      	ldrb	r3, [r3, #2]
 800f42e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f430:	f107 0314 	add.w	r3, r7, #20
 800f434:	4618      	mov	r0, r3
 800f436:	f005 f8b5 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f43a:	2339      	movs	r3, #57	; 0x39
 800f43c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f43e:	4b14      	ldr	r3, [pc, #80]	; (800f490 <LmHandlerConfigure+0x158>)
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f444:	f107 0314 	add.w	r3, r7, #20
 800f448:	4618      	mov	r0, r3
 800f44a:	f005 f8ab 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f44e:	230f      	movs	r3, #15
 800f450:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f452:	4b0f      	ldr	r3, [pc, #60]	; (800f490 <LmHandlerConfigure+0x158>)
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	f107 020c 	add.w	r2, r7, #12
 800f45a:	4611      	mov	r1, r2
 800f45c:	4618      	mov	r0, r3
 800f45e:	f007 ff84 	bl	801736a <RegionGetPhyParam>
 800f462:	4603      	mov	r3, r0
 800f464:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	bf14      	ite	ne
 800f46c:	2301      	movne	r3, #1
 800f46e:	2300      	moveq	r3, #0
 800f470:	b2da      	uxtb	r2, r3
 800f472:	4b07      	ldr	r3, [pc, #28]	; (800f490 <LmHandlerConfigure+0x158>)
 800f474:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f476:	2014      	movs	r0, #20
 800f478:	f000 fac4 	bl	800fa04 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f47c:	4b04      	ldr	r3, [pc, #16]	; (800f490 <LmHandlerConfigure+0x158>)
 800f47e:	79db      	ldrb	r3, [r3, #7]
 800f480:	4618      	mov	r0, r3
 800f482:	f005 fe6b 	bl	801515c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f486:	2300      	movs	r3, #0
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3740      	adds	r7, #64	; 0x40
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	2000081c 	.word	0x2000081c
 800f494:	0801ee4c 	.word	0x0801ee4c
 800f498:	20000848 	.word	0x20000848
 800f49c:	20000838 	.word	0x20000838
 800f4a0:	200007f0 	.word	0x200007f0
 800f4a4:	200007f8 	.word	0x200007f8

0800f4a8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f4ac:	f002 fb36 	bl	8011b1c <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f4b0:	f000 fd9c 	bl	800ffec <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f4b4:	f000 fd6c 	bl	800ff90 <LmHandlerPackageIsTxPending>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f4bc:	bd80      	pop	{r7, pc}
	...

0800f4c0 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f4c4:	4b02      	ldr	r3, [pc, #8]	; (800f4d0 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bc80      	pop	{r7}
 800f4ce:	4770      	bx	lr
 800f4d0:	20000860 	.word	0x20000860

0800f4d4 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b092      	sub	sp, #72	; 0x48
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	460a      	mov	r2, r1
 800f4de:	71fb      	strb	r3, [r7, #7]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f4ea:	4b47      	ldr	r3, [pc, #284]	; (800f608 <LmHandlerJoin+0x134>)
 800f4ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f4f6:	4b44      	ldr	r3, [pc, #272]	; (800f608 <LmHandlerJoin+0x134>)
 800f4f8:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f4fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	2b02      	cmp	r3, #2
 800f504:	d110      	bne.n	800f528 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f506:	2302      	movs	r3, #2
 800f508:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f50c:	4b3f      	ldr	r3, [pc, #252]	; (800f60c <LmHandlerJoin+0x138>)
 800f50e:	2202      	movs	r2, #2
 800f510:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f512:	4a3e      	ldr	r2, [pc, #248]	; (800f60c <LmHandlerJoin+0x138>)
 800f514:	79bb      	ldrb	r3, [r7, #6]
 800f516:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f518:	f004 fda8 	bl	801406c <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f51c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f520:	4618      	mov	r0, r3
 800f522:	f005 fbd3 	bl	8014ccc <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f526:	e06b      	b.n	800f600 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f528:	2301      	movs	r3, #1
 800f52a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f52e:	4b37      	ldr	r3, [pc, #220]	; (800f60c <LmHandlerJoin+0x138>)
 800f530:	2201      	movs	r2, #1
 800f532:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f534:	4b34      	ldr	r3, [pc, #208]	; (800f608 <LmHandlerJoin+0x134>)
 800f536:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f53a:	4b34      	ldr	r3, [pc, #208]	; (800f60c <LmHandlerJoin+0x138>)
 800f53c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f53e:	4b32      	ldr	r3, [pc, #200]	; (800f608 <LmHandlerJoin+0x134>)
 800f540:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f544:	4b31      	ldr	r3, [pc, #196]	; (800f60c <LmHandlerJoin+0x138>)
 800f546:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f548:	4b30      	ldr	r3, [pc, #192]	; (800f60c <LmHandlerJoin+0x138>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f54e:	4a2f      	ldr	r2, [pc, #188]	; (800f60c <LmHandlerJoin+0x138>)
 800f550:	79bb      	ldrb	r3, [r7, #6]
 800f552:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f554:	4b2e      	ldr	r3, [pc, #184]	; (800f610 <LmHandlerJoin+0x13c>)
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	f083 0301 	eor.w	r3, r3, #1
 800f55c:	b2db      	uxtb	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d034      	beq.n	800f5cc <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f562:	231e      	movs	r3, #30
 800f564:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f566:	4b28      	ldr	r3, [pc, #160]	; (800f608 <LmHandlerJoin+0x134>)
 800f568:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f56c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f56e:	f107 030c 	add.w	r3, r7, #12
 800f572:	4618      	mov	r0, r3
 800f574:	f005 f816 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f578:	231f      	movs	r3, #31
 800f57a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f57c:	4b22      	ldr	r3, [pc, #136]	; (800f608 <LmHandlerJoin+0x134>)
 800f57e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f582:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f584:	f107 030c 	add.w	r3, r7, #12
 800f588:	4618      	mov	r0, r3
 800f58a:	f005 f80b 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f58e:	2321      	movs	r3, #33	; 0x21
 800f590:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f592:	4b1d      	ldr	r3, [pc, #116]	; (800f608 <LmHandlerJoin+0x134>)
 800f594:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f598:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f59a:	f107 030c 	add.w	r3, r7, #12
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f005 f800 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f5a4:	2320      	movs	r3, #32
 800f5a6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f5a8:	4b17      	ldr	r3, [pc, #92]	; (800f608 <LmHandlerJoin+0x134>)
 800f5aa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f5ae:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f5b0:	f107 030c 	add.w	r3, r7, #12
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f004 fff5 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f5ba:	2328      	movs	r3, #40	; 0x28
 800f5bc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f5be:	4b15      	ldr	r3, [pc, #84]	; (800f614 <LmHandlerJoin+0x140>)
 800f5c0:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f5c2:	f107 030c 	add.w	r3, r7, #12
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f004 ffec 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f5cc:	f004 fd4e 	bl	801406c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f5d8:	f107 030c 	add.w	r3, r7, #12
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f004 ffe1 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800f5e2:	4b0d      	ldr	r3, [pc, #52]	; (800f618 <LmHandlerJoin+0x144>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d004      	beq.n	800f5f6 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f5ec:	4b0a      	ldr	r3, [pc, #40]	; (800f618 <LmHandlerJoin+0x144>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f2:	4806      	ldr	r0, [pc, #24]	; (800f60c <LmHandlerJoin+0x138>)
 800f5f4:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800f5f6:	4b04      	ldr	r3, [pc, #16]	; (800f608 <LmHandlerJoin+0x134>)
 800f5f8:	785b      	ldrb	r3, [r3, #1]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 f932 	bl	800f864 <LmHandlerRequestClass>
}
 800f600:	bf00      	nop
 800f602:	3748      	adds	r7, #72	; 0x48
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	2000081c 	.word	0x2000081c
 800f60c:	200000a8 	.word	0x200000a8
 800f610:	20000956 	.word	0x20000956
 800f614:	01000300 	.word	0x01000300
 800f618:	20000834 	.word	0x20000834

0800f61c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b08c      	sub	sp, #48	; 0x30
 800f620:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f622:	2301      	movs	r3, #1
 800f624:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f626:	1d3b      	adds	r3, r7, #4
 800f628:	4618      	mov	r0, r3
 800f62a:	f004 fe05 	bl	8014238 <LoRaMacMibGetRequestConfirm>
 800f62e:	4603      	mov	r3, r0
 800f630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800f634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d106      	bne.n	800f64a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f63c:	7a3b      	ldrb	r3, [r7, #8]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d101      	bne.n	800f646 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f642:	2300      	movs	r3, #0
 800f644:	e002      	b.n	800f64c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f646:	2301      	movs	r3, #1
 800f648:	e000      	b.n	800f64c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f64a:	2300      	movs	r3, #0
    }
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3730      	adds	r7, #48	; 0x30
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08a      	sub	sp, #40	; 0x28
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
 800f660:	4613      	mov	r3, r2
 800f662:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f664:	23ff      	movs	r3, #255	; 0xff
 800f666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800f66a:	f001 ffe3 	bl	8011634 <LoRaMacIsBusy>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d002      	beq.n	800f67a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f674:	f06f 0301 	mvn.w	r3, #1
 800f678:	e0be      	b.n	800f7f8 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800f67a:	f001 fff7 	bl	801166c <LoRaMacIsStopped>
 800f67e:	4603      	mov	r3, r0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d002      	beq.n	800f68a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f684:	f06f 0302 	mvn.w	r3, #2
 800f688:	e0b6      	b.n	800f7f8 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f68a:	f7ff ffc7 	bl	800f61c <LmHandlerJoinStatus>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b01      	cmp	r3, #1
 800f692:	d00a      	beq.n	800f6aa <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f694:	4b5a      	ldr	r3, [pc, #360]	; (800f800 <LmHandlerSend+0x1ac>)
 800f696:	79db      	ldrb	r3, [r3, #7]
 800f698:	4a59      	ldr	r2, [pc, #356]	; (800f800 <LmHandlerSend+0x1ac>)
 800f69a:	7a12      	ldrb	r2, [r2, #8]
 800f69c:	4611      	mov	r1, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff ff18 	bl	800f4d4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f6a4:	f06f 0302 	mvn.w	r3, #2
 800f6a8:	e0a6      	b.n	800f7f8 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800f6aa:	4b56      	ldr	r3, [pc, #344]	; (800f804 <LmHandlerSend+0x1b0>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	4798      	blx	r3
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00d      	beq.n	800f6d4 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	781a      	ldrb	r2, [r3, #0]
 800f6bc:	4b51      	ldr	r3, [pc, #324]	; (800f804 <LmHandlerSend+0x1b0>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d006      	beq.n	800f6d4 <LmHandlerSend+0x80>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	781b      	ldrb	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d002      	beq.n	800f6d4 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800f6ce:	f06f 0303 	mvn.w	r3, #3
 800f6d2:	e091      	b.n	800f7f8 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f6d4:	4a4c      	ldr	r2, [pc, #304]	; (800f808 <LmHandlerSend+0x1b4>)
 800f6d6:	78fb      	ldrb	r3, [r7, #3]
 800f6d8:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f6da:	78fb      	ldrb	r3, [r7, #3]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bf14      	ite	ne
 800f6e0:	2301      	movne	r3, #1
 800f6e2:	2300      	moveq	r3, #0
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f6e8:	4b48      	ldr	r3, [pc, #288]	; (800f80c <LmHandlerSend+0x1b8>)
 800f6ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f6ee:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	785b      	ldrb	r3, [r3, #1]
 800f6f4:	f107 020c 	add.w	r2, r7, #12
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f004 fd16 	bl	801412c <LoRaMacQueryTxPossible>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d009      	beq.n	800f71a <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f706:	2300      	movs	r3, #0
 800f708:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f70a:	2300      	movs	r3, #0
 800f70c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f70e:	2300      	movs	r3, #0
 800f710:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f712:	23f9      	movs	r3, #249	; 0xf9
 800f714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f718:	e009      	b.n	800f72e <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	785b      	ldrb	r3, [r3, #1]
 800f724:	b29b      	uxth	r3, r3
 800f726:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	685b      	ldr	r3, [r3, #4]
 800f72c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f72e:	4b36      	ldr	r3, [pc, #216]	; (800f808 <LmHandlerSend+0x1b4>)
 800f730:	687a      	ldr	r2, [r7, #4]
 800f732:	3310      	adds	r3, #16
 800f734:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f738:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f73c:	4b33      	ldr	r3, [pc, #204]	; (800f80c <LmHandlerSend+0x1b8>)
 800f73e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f742:	4b31      	ldr	r3, [pc, #196]	; (800f808 <LmHandlerSend+0x1b4>)
 800f744:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800f746:	78ba      	ldrb	r2, [r7, #2]
 800f748:	f107 0310 	add.w	r3, r7, #16
 800f74c:	4611      	mov	r1, r2
 800f74e:	4618      	mov	r0, r3
 800f750:	f005 fc0e 	bl	8014f70 <LoRaMacMcpsRequest>
 800f754:	4603      	mov	r3, r0
 800f756:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f75a:	6a3b      	ldr	r3, [r7, #32]
 800f75c:	4a2c      	ldr	r2, [pc, #176]	; (800f810 <LmHandlerSend+0x1bc>)
 800f75e:	6013      	str	r3, [r2, #0]

    switch( status )
 800f760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f764:	2b11      	cmp	r3, #17
 800f766:	d840      	bhi.n	800f7ea <LmHandlerSend+0x196>
 800f768:	a201      	add	r2, pc, #4	; (adr r2, 800f770 <LmHandlerSend+0x11c>)
 800f76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76e:	bf00      	nop
 800f770:	0800f7b9 	.word	0x0800f7b9
 800f774:	0800f7cb 	.word	0x0800f7cb
 800f778:	0800f7eb 	.word	0x0800f7eb
 800f77c:	0800f7eb 	.word	0x0800f7eb
 800f780:	0800f7eb 	.word	0x0800f7eb
 800f784:	0800f7eb 	.word	0x0800f7eb
 800f788:	0800f7eb 	.word	0x0800f7eb
 800f78c:	0800f7d3 	.word	0x0800f7d3
 800f790:	0800f7eb 	.word	0x0800f7eb
 800f794:	0800f7eb 	.word	0x0800f7eb
 800f798:	0800f7eb 	.word	0x0800f7eb
 800f79c:	0800f7e3 	.word	0x0800f7e3
 800f7a0:	0800f7eb 	.word	0x0800f7eb
 800f7a4:	0800f7eb 	.word	0x0800f7eb
 800f7a8:	0800f7cb 	.word	0x0800f7cb
 800f7ac:	0800f7cb 	.word	0x0800f7cb
 800f7b0:	0800f7cb 	.word	0x0800f7cb
 800f7b4:	0800f7db 	.word	0x0800f7db
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800f7b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7bc:	f113 0f07 	cmn.w	r3, #7
 800f7c0:	d017      	beq.n	800f7f2 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f7c8:	e013      	b.n	800f7f2 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f7ca:	23fe      	movs	r3, #254	; 0xfe
 800f7cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f7d0:	e010      	b.n	800f7f4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f7d2:	23fd      	movs	r3, #253	; 0xfd
 800f7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f7d8:	e00c      	b.n	800f7f4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f7da:	23fb      	movs	r3, #251	; 0xfb
 800f7dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f7e0:	e008      	b.n	800f7f4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f7e2:	23fa      	movs	r3, #250	; 0xfa
 800f7e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f7e8:	e004      	b.n	800f7f4 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f7ea:	23ff      	movs	r3, #255	; 0xff
 800f7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f7f0:	e000      	b.n	800f7f4 <LmHandlerSend+0x1a0>
            break;
 800f7f2:	bf00      	nop
    }

    return lmhStatus;
 800f7f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3728      	adds	r7, #40	; 0x28
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	200000a8 	.word	0x200000a8
 800f804:	20000808 	.word	0x20000808
 800f808:	200000b4 	.word	0x200000b4
 800f80c:	2000081c 	.word	0x2000081c
 800f810:	20000860 	.word	0x20000860

0800f814 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b086      	sub	sp, #24
 800f818:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f81a:	230a      	movs	r3, #10
 800f81c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f81e:	463b      	mov	r3, r7
 800f820:	4618      	mov	r0, r3
 800f822:	f005 fa53 	bl	8014ccc <LoRaMacMlmeRequest>
 800f826:	4603      	mov	r3, r0
 800f828:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	4a06      	ldr	r2, [pc, #24]	; (800f848 <LmHandlerDeviceTimeReq+0x34>)
 800f82e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f830:	7dfb      	ldrb	r3, [r7, #23]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d101      	bne.n	800f83a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f836:	2300      	movs	r3, #0
 800f838:	e001      	b.n	800f83e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f83a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3718      	adds	r7, #24
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}
 800f846:	bf00      	nop
 800f848:	20000860 	.word	0x20000860

0800f84c <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	4603      	mov	r3, r0
 800f854:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f856:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	370c      	adds	r7, #12
 800f85e:	46bd      	mov	sp, r7
 800f860:	bc80      	pop	{r7}
 800f862:	4770      	bx	lr

0800f864 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08e      	sub	sp, #56	; 0x38
 800f868:	af00      	add	r7, sp, #0
 800f86a:	4603      	mov	r3, r0
 800f86c:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f86e:	2300      	movs	r3, #0
 800f870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800f874:	f001 fede 	bl	8011634 <LoRaMacIsBusy>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f87e:	f06f 0301 	mvn.w	r3, #1
 800f882:	e071      	b.n	800f968 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800f884:	f7ff feca 	bl	800f61c <LmHandlerJoinStatus>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b01      	cmp	r3, #1
 800f88c:	d002      	beq.n	800f894 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f88e:	f06f 0302 	mvn.w	r3, #2
 800f892:	e069      	b.n	800f968 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f894:	2300      	movs	r3, #0
 800f896:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f898:	f107 030c 	add.w	r3, r7, #12
 800f89c:	4618      	mov	r0, r3
 800f89e:	f004 fccb 	bl	8014238 <LoRaMacMibGetRequestConfirm>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f8a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ac:	e05c      	b.n	800f968 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800f8ae:	7c3b      	ldrb	r3, [r7, #16]
 800f8b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800f8b4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f8b8:	79fb      	ldrb	r3, [r7, #7]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d052      	beq.n	800f964 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800f8be:	79fb      	ldrb	r3, [r7, #7]
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	d028      	beq.n	800f916 <LmHandlerRequestClass+0xb2>
 800f8c4:	2b02      	cmp	r3, #2
 800f8c6:	dc48      	bgt.n	800f95a <LmHandlerRequestClass+0xf6>
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <LmHandlerRequestClass+0x6e>
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d01e      	beq.n	800f90e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800f8d0:	e043      	b.n	800f95a <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800f8d2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d041      	beq.n	800f95e <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f8de:	f107 030c 	add.w	r3, r7, #12
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f004 fe5e 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d10b      	bne.n	800f906 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f8ee:	4b20      	ldr	r3, [pc, #128]	; (800f970 <LmHandlerRequestClass+0x10c>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d032      	beq.n	800f95e <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	; (800f970 <LmHandlerRequestClass+0x10c>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fe:	79fa      	ldrb	r2, [r7, #7]
 800f900:	4610      	mov	r0, r2
 800f902:	4798      	blx	r3
                break;
 800f904:	e02b      	b.n	800f95e <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f906:	23ff      	movs	r3, #255	; 0xff
 800f908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f90c:	e027      	b.n	800f95e <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f90e:	23ff      	movs	r3, #255	; 0xff
 800f910:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f914:	e026      	b.n	800f964 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800f916:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d003      	beq.n	800f926 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f91e:	23ff      	movs	r3, #255	; 0xff
 800f920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f924:	e01d      	b.n	800f962 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800f926:	79fb      	ldrb	r3, [r7, #7]
 800f928:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f92a:	f107 030c 	add.w	r3, r7, #12
 800f92e:	4618      	mov	r0, r3
 800f930:	f004 fe38 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10b      	bne.n	800f952 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f93a:	4b0d      	ldr	r3, [pc, #52]	; (800f970 <LmHandlerRequestClass+0x10c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f940:	2b00      	cmp	r3, #0
 800f942:	d00e      	beq.n	800f962 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f944:	4b0a      	ldr	r3, [pc, #40]	; (800f970 <LmHandlerRequestClass+0x10c>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f94a:	79fa      	ldrb	r2, [r7, #7]
 800f94c:	4610      	mov	r0, r2
 800f94e:	4798      	blx	r3
                break;
 800f950:	e007      	b.n	800f962 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f952:	23ff      	movs	r3, #255	; 0xff
 800f954:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f958:	e003      	b.n	800f962 <LmHandlerRequestClass+0xfe>
                break;
 800f95a:	bf00      	nop
 800f95c:	e002      	b.n	800f964 <LmHandlerRequestClass+0x100>
                break;
 800f95e:	bf00      	nop
 800f960:	e000      	b.n	800f964 <LmHandlerRequestClass+0x100>
                break;
 800f962:	bf00      	nop
        }
    }
    return errorStatus;
 800f964:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3738      	adds	r7, #56	; 0x38
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}
 800f970:	20000834 	.word	0x20000834

0800f974 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08c      	sub	sp, #48	; 0x30
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d102      	bne.n	800f988 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f982:	f04f 33ff 	mov.w	r3, #4294967295
 800f986:	e010      	b.n	800f9aa <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f988:	2300      	movs	r3, #0
 800f98a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f98c:	f107 0308 	add.w	r3, r7, #8
 800f990:	4618      	mov	r0, r3
 800f992:	f004 fc51 	bl	8014238 <LoRaMacMibGetRequestConfirm>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f99c:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a0:	e003      	b.n	800f9aa <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f9a2:	7b3a      	ldrb	r2, [r7, #12]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f9a8:	2300      	movs	r3, #0
}
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	3730      	adds	r7, #48	; 0x30
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
	...

0800f9b4 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b08c      	sub	sp, #48	; 0x30
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d102      	bne.n	800f9c8 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f9c6:	e016      	b.n	800f9f6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800f9c8:	231f      	movs	r3, #31
 800f9ca:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800f9cc:	f107 0308 	add.w	r3, r7, #8
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f004 fc31 	bl	8014238 <LoRaMacMibGetRequestConfirm>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e0:	e009      	b.n	800f9f6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800f9e2:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f993 2000 	ldrsb.w	r2, [r3]
 800f9f0:	4b03      	ldr	r3, [pc, #12]	; (800fa00 <LmHandlerGetTxDatarate+0x4c>)
 800f9f2:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3730      	adds	r7, #48	; 0x30
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	2000081c 	.word	0x2000081c

0800fa04 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08c      	sub	sp, #48	; 0x30
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fa0c:	2322      	movs	r3, #34	; 0x22
 800fa0e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fa14:	f107 0308 	add.w	r3, r7, #8
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f004 fdc3 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa24:	f04f 33ff 	mov.w	r3, #4294967295
 800fa28:	e000      	b.n	800fa2c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fa2a:	2300      	movs	r3, #0
}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3730      	adds	r7, #48	; 0x30
 800fa30:	46bd      	mov	sp, r7
 800fa32:	bd80      	pop	{r7, pc}

0800fa34 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fa3c:	4b18      	ldr	r3, [pc, #96]	; (800faa0 <McpsConfirm+0x6c>)
 800fa3e:	2201      	movs	r2, #1
 800fa40:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	785a      	ldrb	r2, [r3, #1]
 800fa46:	4b16      	ldr	r3, [pc, #88]	; (800faa0 <McpsConfirm+0x6c>)
 800fa48:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	789b      	ldrb	r3, [r3, #2]
 800fa4e:	b25a      	sxtb	r2, r3
 800fa50:	4b13      	ldr	r3, [pc, #76]	; (800faa0 <McpsConfirm+0x6c>)
 800fa52:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	68db      	ldr	r3, [r3, #12]
 800fa58:	4a11      	ldr	r2, [pc, #68]	; (800faa0 <McpsConfirm+0x6c>)
 800fa5a:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fa62:	4b0f      	ldr	r3, [pc, #60]	; (800faa0 <McpsConfirm+0x6c>)
 800fa64:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	b2da      	uxtb	r2, r3
 800fa6c:	4b0c      	ldr	r3, [pc, #48]	; (800faa0 <McpsConfirm+0x6c>)
 800fa6e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	791b      	ldrb	r3, [r3, #4]
 800fa74:	461a      	mov	r2, r3
 800fa76:	4b0a      	ldr	r3, [pc, #40]	; (800faa0 <McpsConfirm+0x6c>)
 800fa78:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800fa7a:	4b0a      	ldr	r3, [pc, #40]	; (800faa4 <McpsConfirm+0x70>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d004      	beq.n	800fa8e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fa84:	4b07      	ldr	r3, [pc, #28]	; (800faa4 <McpsConfirm+0x70>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8a:	4805      	ldr	r0, [pc, #20]	; (800faa0 <McpsConfirm+0x6c>)
 800fa8c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fa8e:	6879      	ldr	r1, [r7, #4]
 800fa90:	2000      	movs	r0, #0
 800fa92:	f000 f9eb 	bl	800fe6c <LmHandlerPackagesNotify>
}
 800fa96:	bf00      	nop
 800fa98:	3708      	adds	r7, #8
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	200000b4 	.word	0x200000b4
 800faa4:	20000834 	.word	0x20000834

0800faa8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b088      	sub	sp, #32
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fab2:	2300      	movs	r3, #0
 800fab4:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800fab6:	4b32      	ldr	r3, [pc, #200]	; (800fb80 <McpsIndication+0xd8>)
 800fab8:	2201      	movs	r2, #1
 800faba:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	785a      	ldrb	r2, [r3, #1]
 800fac0:	4b2f      	ldr	r3, [pc, #188]	; (800fb80 <McpsIndication+0xd8>)
 800fac2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fac4:	4b2e      	ldr	r3, [pc, #184]	; (800fb80 <McpsIndication+0xd8>)
 800fac6:	785b      	ldrb	r3, [r3, #1]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d155      	bne.n	800fb78 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	791b      	ldrb	r3, [r3, #4]
 800fad0:	b25a      	sxtb	r2, r3
 800fad2:	4b2b      	ldr	r3, [pc, #172]	; (800fb80 <McpsIndication+0xd8>)
 800fad4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fadc:	b25a      	sxtb	r2, r3
 800fade:	4b28      	ldr	r3, [pc, #160]	; (800fb80 <McpsIndication+0xd8>)
 800fae0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fae8:	4b25      	ldr	r3, [pc, #148]	; (800fb80 <McpsIndication+0xd8>)
 800faea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	78da      	ldrb	r2, [r3, #3]
 800faf0:	4b23      	ldr	r3, [pc, #140]	; (800fb80 <McpsIndication+0xd8>)
 800faf2:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	691b      	ldr	r3, [r3, #16]
 800faf8:	4a21      	ldr	r2, [pc, #132]	; (800fb80 <McpsIndication+0xd8>)
 800fafa:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	78db      	ldrb	r3, [r3, #3]
 800fb00:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	7b1b      	ldrb	r3, [r3, #12]
 800fb06:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800fb0e:	4b1d      	ldr	r3, [pc, #116]	; (800fb84 <McpsIndication+0xdc>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d007      	beq.n	800fb28 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800fb18:	4b1a      	ldr	r3, [pc, #104]	; (800fb84 <McpsIndication+0xdc>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb1e:	f107 0218 	add.w	r2, r7, #24
 800fb22:	4917      	ldr	r1, [pc, #92]	; (800fb80 <McpsIndication+0xd8>)
 800fb24:	4610      	mov	r0, r2
 800fb26:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800fb28:	4b16      	ldr	r3, [pc, #88]	; (800fb84 <McpsIndication+0xdc>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d007      	beq.n	800fb42 <McpsIndication+0x9a>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	7e1b      	ldrb	r3, [r3, #24]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d003      	beq.n	800fb42 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fb3a:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <McpsIndication+0xdc>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb40:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fb42:	6879      	ldr	r1, [r7, #4]
 800fb44:	2001      	movs	r0, #1
 800fb46:	f000 f991 	bl	800fe6c <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800fb4a:	f107 0317 	add.w	r3, r7, #23
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7ff ff10 	bl	800f974 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	795b      	ldrb	r3, [r3, #5]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00e      	beq.n	800fb7a <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	733b      	strb	r3, [r7, #12]
 800fb60:	2300      	movs	r3, #0
 800fb62:	737b      	strb	r3, [r7, #13]
 800fb64:	2300      	movs	r3, #0
 800fb66:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800fb68:	f107 030c 	add.w	r3, r7, #12
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	2100      	movs	r1, #0
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7ff fd6f 	bl	800f654 <LmHandlerSend>
 800fb76:	e000      	b.n	800fb7a <McpsIndication+0xd2>
        return;
 800fb78:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800fb7a:	3720      	adds	r7, #32
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	200000d0 	.word	0x200000d0
 800fb84:	20000834 	.word	0x20000834

0800fb88 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b08c      	sub	sp, #48	; 0x30
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fb90:	4b4a      	ldr	r3, [pc, #296]	; (800fcbc <MlmeConfirm+0x134>)
 800fb92:	2200      	movs	r2, #0
 800fb94:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	785a      	ldrb	r2, [r3, #1]
 800fb9a:	4b48      	ldr	r3, [pc, #288]	; (800fcbc <MlmeConfirm+0x134>)
 800fb9c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800fb9e:	4b48      	ldr	r3, [pc, #288]	; (800fcc0 <MlmeConfirm+0x138>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d004      	beq.n	800fbb2 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fba8:	4b45      	ldr	r3, [pc, #276]	; (800fcc0 <MlmeConfirm+0x138>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbae:	4843      	ldr	r0, [pc, #268]	; (800fcbc <MlmeConfirm+0x134>)
 800fbb0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fbb2:	6879      	ldr	r1, [r7, #4]
 800fbb4:	2002      	movs	r0, #2
 800fbb6:	f000 f959 	bl	800fe6c <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	2b0c      	cmp	r3, #12
 800fbc2:	d874      	bhi.n	800fcae <MlmeConfirm+0x126>
 800fbc4:	a201      	add	r2, pc, #4	; (adr r2, 800fbcc <MlmeConfirm+0x44>)
 800fbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbca:	bf00      	nop
 800fbcc:	0800fc01 	.word	0x0800fc01
 800fbd0:	0800fcaf 	.word	0x0800fcaf
 800fbd4:	0800fcaf 	.word	0x0800fcaf
 800fbd8:	0800fcaf 	.word	0x0800fcaf
 800fbdc:	0800fc7d 	.word	0x0800fc7d
 800fbe0:	0800fcaf 	.word	0x0800fcaf
 800fbe4:	0800fcaf 	.word	0x0800fcaf
 800fbe8:	0800fcaf 	.word	0x0800fcaf
 800fbec:	0800fcaf 	.word	0x0800fcaf
 800fbf0:	0800fcaf 	.word	0x0800fcaf
 800fbf4:	0800fcaf 	.word	0x0800fcaf
 800fbf8:	0800fc95 	.word	0x0800fc95
 800fbfc:	0800fcaf 	.word	0x0800fcaf
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800fc00:	2306      	movs	r3, #6
 800fc02:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800fc04:	f107 0308 	add.w	r3, r7, #8
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f004 fb15 	bl	8014238 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800fc0e:	4b2d      	ldr	r3, [pc, #180]	; (800fcc4 <MlmeConfirm+0x13c>)
 800fc10:	79db      	ldrb	r3, [r3, #7]
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	4611      	mov	r1, r2
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff faf6 	bl	800f208 <SecureElementSetDevAddr>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d102      	bne.n	800fc28 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	4a28      	ldr	r2, [pc, #160]	; (800fcc8 <MlmeConfirm+0x140>)
 800fc26:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fc28:	4828      	ldr	r0, [pc, #160]	; (800fccc <MlmeConfirm+0x144>)
 800fc2a:	f7ff fec3 	bl	800f9b4 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800fc2e:	4828      	ldr	r0, [pc, #160]	; (800fcd0 <MlmeConfirm+0x148>)
 800fc30:	f000 fa4e 	bl	80100d0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc34:	4b21      	ldr	r3, [pc, #132]	; (800fcbc <MlmeConfirm+0x134>)
 800fc36:	785b      	ldrb	r3, [r3, #1]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d108      	bne.n	800fc4e <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fc3c:	4b21      	ldr	r3, [pc, #132]	; (800fcc4 <MlmeConfirm+0x13c>)
 800fc3e:	2200      	movs	r2, #0
 800fc40:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fc42:	4b24      	ldr	r3, [pc, #144]	; (800fcd4 <MlmeConfirm+0x14c>)
 800fc44:	785b      	ldrb	r3, [r3, #1]
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff fe0c 	bl	800f864 <LmHandlerRequestClass>
 800fc4c:	e002      	b.n	800fc54 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fc4e:	4b1d      	ldr	r3, [pc, #116]	; (800fcc4 <MlmeConfirm+0x13c>)
 800fc50:	22ff      	movs	r2, #255	; 0xff
 800fc52:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fc54:	4b1a      	ldr	r3, [pc, #104]	; (800fcc0 <MlmeConfirm+0x138>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d004      	beq.n	800fc68 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fc5e:	4b18      	ldr	r3, [pc, #96]	; (800fcc0 <MlmeConfirm+0x138>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc64:	4817      	ldr	r0, [pc, #92]	; (800fcc4 <MlmeConfirm+0x13c>)
 800fc66:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc68:	4b14      	ldr	r3, [pc, #80]	; (800fcbc <MlmeConfirm+0x134>)
 800fc6a:	785b      	ldrb	r3, [r3, #1]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d120      	bne.n	800fcb2 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800fc70:	4b14      	ldr	r3, [pc, #80]	; (800fcc4 <MlmeConfirm+0x13c>)
 800fc72:	79db      	ldrb	r3, [r3, #7]
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff f859 	bl	800ed2c <SecureElementPrintSessionKeys>
                }
            }
            break;
 800fc7a:	e01a      	b.n	800fcb2 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800fc7c:	4b16      	ldr	r3, [pc, #88]	; (800fcd8 <MlmeConfirm+0x150>)
 800fc7e:	2201      	movs	r2, #1
 800fc80:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	7a1a      	ldrb	r2, [r3, #8]
 800fc86:	4b14      	ldr	r3, [pc, #80]	; (800fcd8 <MlmeConfirm+0x150>)
 800fc88:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	7a5a      	ldrb	r2, [r3, #9]
 800fc8e:	4b12      	ldr	r3, [pc, #72]	; (800fcd8 <MlmeConfirm+0x150>)
 800fc90:	74da      	strb	r2, [r3, #19]
            }
            break;
 800fc92:	e00f      	b.n	800fcb4 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	785b      	ldrb	r3, [r3, #1]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d105      	bne.n	800fca8 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800fc9c:	4b0d      	ldr	r3, [pc, #52]	; (800fcd4 <MlmeConfirm+0x14c>)
 800fc9e:	7c1b      	ldrb	r3, [r3, #16]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff fdd3 	bl	800f84c <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800fca6:	e005      	b.n	800fcb4 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800fca8:	f7ff fdb4 	bl	800f814 <LmHandlerDeviceTimeReq>
            break;
 800fcac:	e002      	b.n	800fcb4 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fcae:	bf00      	nop
 800fcb0:	e000      	b.n	800fcb4 <MlmeConfirm+0x12c>
            break;
 800fcb2:	bf00      	nop
    }
}
 800fcb4:	bf00      	nop
 800fcb6:	3730      	adds	r7, #48	; 0x30
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	200000b4 	.word	0x200000b4
 800fcc0:	20000834 	.word	0x20000834
 800fcc4:	200000a8 	.word	0x200000a8
 800fcc8:	200007f0 	.word	0x200007f0
 800fccc:	200000ac 	.word	0x200000ac
 800fcd0:	200000ad 	.word	0x200000ad
 800fcd4:	2000081c 	.word	0x2000081c
 800fcd8:	200000d0 	.word	0x200000d0

0800fcdc <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fce6:	4b20      	ldr	r3, [pc, #128]	; (800fd68 <MlmeIndication+0x8c>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	785a      	ldrb	r2, [r3, #1]
 800fcf0:	4b1d      	ldr	r3, [pc, #116]	; (800fd68 <MlmeIndication+0x8c>)
 800fcf2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	789b      	ldrb	r3, [r3, #2]
 800fcf8:	b25a      	sxtb	r2, r3
 800fcfa:	4b1b      	ldr	r3, [pc, #108]	; (800fd68 <MlmeIndication+0x8c>)
 800fcfc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd04:	b25a      	sxtb	r2, r3
 800fd06:	4b18      	ldr	r3, [pc, #96]	; (800fd68 <MlmeIndication+0x8c>)
 800fd08:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fd10:	4b15      	ldr	r3, [pc, #84]	; (800fd68 <MlmeIndication+0x8c>)
 800fd12:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	78da      	ldrb	r2, [r3, #3]
 800fd18:	4b13      	ldr	r3, [pc, #76]	; (800fd68 <MlmeIndication+0x8c>)
 800fd1a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	4a11      	ldr	r2, [pc, #68]	; (800fd68 <MlmeIndication+0x8c>)
 800fd22:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800fd24:	4b11      	ldr	r3, [pc, #68]	; (800fd6c <MlmeIndication+0x90>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00d      	beq.n	800fd4a <MlmeIndication+0x6e>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b0b      	cmp	r3, #11
 800fd34:	d009      	beq.n	800fd4a <MlmeIndication+0x6e>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b0f      	cmp	r3, #15
 800fd3c:	d005      	beq.n	800fd4a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fd3e:	4b0b      	ldr	r3, [pc, #44]	; (800fd6c <MlmeIndication+0x90>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd44:	4908      	ldr	r1, [pc, #32]	; (800fd68 <MlmeIndication+0x8c>)
 800fd46:	2000      	movs	r0, #0
 800fd48:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800fd4a:	6879      	ldr	r1, [r7, #4]
 800fd4c:	2003      	movs	r0, #3
 800fd4e:	f000 f88d 	bl	800fe6c <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	2b0b      	cmp	r3, #11
 800fd58:	d001      	beq.n	800fd5e <MlmeIndication+0x82>
 800fd5a:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fd5c:	e000      	b.n	800fd60 <MlmeIndication+0x84>
            break;
 800fd5e:	bf00      	nop
    }
}
 800fd60:	bf00      	nop
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	200000d0 	.word	0x200000d0
 800fd6c:	20000834 	.word	0x20000834

0800fd70 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	4603      	mov	r3, r0
 800fd78:	6039      	str	r1, [r7, #0]
 800fd7a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fd80:	79fb      	ldrb	r3, [r7, #7]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d104      	bne.n	800fd90 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800fd86:	f000 f9dd 	bl	8010144 <LmhpCompliancePackageFactory>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	60fb      	str	r3, [r7, #12]
                break;
 800fd8e:	e00d      	b.n	800fdac <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800fd90:	f107 020c 	add.w	r2, r7, #12
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	4611      	mov	r1, r2
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f000 fce9 	bl	8010770 <LmhpPackagesRegister>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d002      	beq.n	800fdaa <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800fda4:	f04f 33ff 	mov.w	r3, #4294967295
 800fda8:	e031      	b.n	800fe0e <LmHandlerPackageRegister+0x9e>
                }
                break;
 800fdaa:	bf00      	nop
            }
    }
    if( package != NULL )
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d02b      	beq.n	800fe0a <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800fdb2:	79fb      	ldrb	r3, [r7, #7]
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	4918      	ldr	r1, [pc, #96]	; (800fe18 <LmHandlerPackageRegister+0xa8>)
 800fdb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	4a16      	ldr	r2, [pc, #88]	; (800fe18 <LmHandlerPackageRegister+0xa8>)
 800fdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc4:	4a15      	ldr	r2, [pc, #84]	; (800fe1c <LmHandlerPackageRegister+0xac>)
 800fdc6:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800fdc8:	79fb      	ldrb	r3, [r7, #7]
 800fdca:	4a13      	ldr	r2, [pc, #76]	; (800fe18 <LmHandlerPackageRegister+0xa8>)
 800fdcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdd0:	4a13      	ldr	r2, [pc, #76]	; (800fe20 <LmHandlerPackageRegister+0xb0>)
 800fdd2:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	4a10      	ldr	r2, [pc, #64]	; (800fe18 <LmHandlerPackageRegister+0xa8>)
 800fdd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fddc:	4a11      	ldr	r2, [pc, #68]	; (800fe24 <LmHandlerPackageRegister+0xb4>)
 800fdde:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fde0:	4b11      	ldr	r3, [pc, #68]	; (800fe28 <LmHandlerPackageRegister+0xb8>)
 800fde2:	681a      	ldr	r2, [r3, #0]
 800fde4:	79fb      	ldrb	r3, [r7, #7]
 800fde6:	490c      	ldr	r1, [pc, #48]	; (800fe18 <LmHandlerPackageRegister+0xa8>)
 800fde8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fdec:	6992      	ldr	r2, [r2, #24]
 800fdee:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	4a09      	ldr	r2, [pc, #36]	; (800fe18 <LmHandlerPackageRegister+0xa8>)
 800fdf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	4a0c      	ldr	r2, [pc, #48]	; (800fe2c <LmHandlerPackageRegister+0xbc>)
 800fdfc:	6851      	ldr	r1, [r2, #4]
 800fdfe:	4a0b      	ldr	r2, [pc, #44]	; (800fe2c <LmHandlerPackageRegister+0xbc>)
 800fe00:	7852      	ldrb	r2, [r2, #1]
 800fe02:	6838      	ldr	r0, [r7, #0]
 800fe04:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fe06:	2300      	movs	r3, #0
 800fe08:	e001      	b.n	800fe0e <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fe0a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	20000808 	.word	0x20000808
 800fe1c:	0800f4d5 	.word	0x0800f4d5
 800fe20:	0800f655 	.word	0x0800f655
 800fe24:	0800f815 	.word	0x0800f815
 800fe28:	20000834 	.word	0x20000834
 800fe2c:	200000e4 	.word	0x200000e4

0800fe30 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	4603      	mov	r3, r0
 800fe38:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	2b04      	cmp	r3, #4
 800fe3e:	d80e      	bhi.n	800fe5e <LmHandlerPackageIsInitialized+0x2e>
 800fe40:	79fb      	ldrb	r3, [r7, #7]
 800fe42:	4a09      	ldr	r2, [pc, #36]	; (800fe68 <LmHandlerPackageIsInitialized+0x38>)
 800fe44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d007      	beq.n	800fe5e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fe4e:	79fb      	ldrb	r3, [r7, #7]
 800fe50:	4a05      	ldr	r2, [pc, #20]	; (800fe68 <LmHandlerPackageIsInitialized+0x38>)
 800fe52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	4798      	blx	r3
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	e000      	b.n	800fe60 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fe5e:	2300      	movs	r3, #0
    }
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	20000808 	.word	0x20000808

0800fe6c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	4603      	mov	r3, r0
 800fe74:	6039      	str	r1, [r7, #0]
 800fe76:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fe78:	2300      	movs	r3, #0
 800fe7a:	73fb      	strb	r3, [r7, #15]
 800fe7c:	e07c      	b.n	800ff78 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800fe7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe82:	4a42      	ldr	r2, [pc, #264]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d06f      	beq.n	800ff6c <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800fe8c:	79fb      	ldrb	r3, [r7, #7]
 800fe8e:	2b03      	cmp	r3, #3
 800fe90:	d863      	bhi.n	800ff5a <LmHandlerPackagesNotify+0xee>
 800fe92:	a201      	add	r2, pc, #4	; (adr r2, 800fe98 <LmHandlerPackagesNotify+0x2c>)
 800fe94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe98:	0800fea9 	.word	0x0800fea9
 800fe9c:	0800fecb 	.word	0x0800fecb
 800fea0:	0800ff17 	.word	0x0800ff17
 800fea4:	0800ff39 	.word	0x0800ff39
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feac:	4a37      	ldr	r2, [pc, #220]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800feae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb2:	69db      	ldr	r3, [r3, #28]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d052      	beq.n	800ff5e <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800feb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febc:	4a33      	ldr	r2, [pc, #204]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800febe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fec2:	69db      	ldr	r3, [r3, #28]
 800fec4:	6838      	ldr	r0, [r7, #0]
 800fec6:	4798      	blx	r3
                        }
                        break;
 800fec8:	e049      	b.n	800ff5e <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800feca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fece:	4a2f      	ldr	r2, [pc, #188]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800fed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fed4:	6a1b      	ldr	r3, [r3, #32]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d043      	beq.n	800ff62 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800feda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fede:	4a2b      	ldr	r2, [pc, #172]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800fee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fee4:	781a      	ldrb	r2, [r3, #0]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800feea:	429a      	cmp	r2, r3
 800feec:	d00a      	beq.n	800ff04 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800feee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d135      	bne.n	800ff62 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800fef6:	4b25      	ldr	r3, [pc, #148]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	4798      	blx	r3
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d02e      	beq.n	800ff62 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800ff04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff08:	4a20      	ldr	r2, [pc, #128]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800ff0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff0e:	6a1b      	ldr	r3, [r3, #32]
 800ff10:	6838      	ldr	r0, [r7, #0]
 800ff12:	4798      	blx	r3
                        }
                        break;
 800ff14:	e025      	b.n	800ff62 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ff16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff1a:	4a1c      	ldr	r2, [pc, #112]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800ff1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d01f      	beq.n	800ff66 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800ff26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2a:	4a18      	ldr	r2, [pc, #96]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800ff2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff32:	6838      	ldr	r0, [r7, #0]
 800ff34:	4798      	blx	r3
                        }
                        break;
 800ff36:	e016      	b.n	800ff66 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ff38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff3c:	4a13      	ldr	r2, [pc, #76]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800ff3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d010      	beq.n	800ff6a <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800ff48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff4c:	4a0f      	ldr	r2, [pc, #60]	; (800ff8c <LmHandlerPackagesNotify+0x120>)
 800ff4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff54:	6838      	ldr	r0, [r7, #0]
 800ff56:	4798      	blx	r3
                        }
                        break;
 800ff58:	e007      	b.n	800ff6a <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800ff5a:	bf00      	nop
 800ff5c:	e006      	b.n	800ff6c <LmHandlerPackagesNotify+0x100>
                        break;
 800ff5e:	bf00      	nop
 800ff60:	e004      	b.n	800ff6c <LmHandlerPackagesNotify+0x100>
                        break;
 800ff62:	bf00      	nop
 800ff64:	e002      	b.n	800ff6c <LmHandlerPackagesNotify+0x100>
                        break;
 800ff66:	bf00      	nop
 800ff68:	e000      	b.n	800ff6c <LmHandlerPackagesNotify+0x100>
                        break;
 800ff6a:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	3301      	adds	r3, #1
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	73fb      	strb	r3, [r7, #15]
 800ff78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff7c:	2b04      	cmp	r3, #4
 800ff7e:	f77f af7e 	ble.w	800fe7e <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	20000808 	.word	0x20000808

0800ff90 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff96:	2300      	movs	r3, #0
 800ff98:	71fb      	strb	r3, [r7, #7]
 800ff9a:	e01c      	b.n	800ffd6 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800ff9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffa0:	4a11      	ldr	r2, [pc, #68]	; (800ffe8 <LmHandlerPackageIsTxPending+0x58>)
 800ffa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00f      	beq.n	800ffca <LmHandlerPackageIsTxPending+0x3a>
 800ffaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d00b      	beq.n	800ffca <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800ffb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffb6:	4a0c      	ldr	r2, [pc, #48]	; (800ffe8 <LmHandlerPackageIsTxPending+0x58>)
 800ffb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffbc:	691b      	ldr	r3, [r3, #16]
 800ffbe:	4798      	blx	r3
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d001      	beq.n	800ffca <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e00a      	b.n	800ffe0 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	71fb      	strb	r3, [r7, #7]
 800ffd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffda:	2b04      	cmp	r3, #4
 800ffdc:	ddde      	ble.n	800ff9c <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800ffde:	2300      	movs	r3, #0
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	20000808 	.word	0x20000808

0800ffec <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fff2:	2300      	movs	r3, #0
 800fff4:	71fb      	strb	r3, [r7, #7]
 800fff6:	e022      	b.n	801003e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fffc:	4a14      	ldr	r2, [pc, #80]	; (8010050 <LmHandlerPackagesProcess+0x64>)
 800fffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d015      	beq.n	8010032 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801000a:	4a11      	ldr	r2, [pc, #68]	; (8010050 <LmHandlerPackagesProcess+0x64>)
 801000c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010010:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00d      	beq.n	8010032 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8010016:	79fb      	ldrb	r3, [r7, #7]
 8010018:	4618      	mov	r0, r3
 801001a:	f7ff ff09 	bl	800fe30 <LmHandlerPackageIsInitialized>
 801001e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010020:	2b00      	cmp	r3, #0
 8010022:	d006      	beq.n	8010032 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8010024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010028:	4a09      	ldr	r2, [pc, #36]	; (8010050 <LmHandlerPackagesProcess+0x64>)
 801002a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002e:	695b      	ldr	r3, [r3, #20]
 8010030:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010036:	b2db      	uxtb	r3, r3
 8010038:	3301      	adds	r3, #1
 801003a:	b2db      	uxtb	r3, r3
 801003c:	71fb      	strb	r3, [r7, #7]
 801003e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010042:	2b04      	cmp	r3, #4
 8010044:	ddd8      	ble.n	800fff8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 8010046:	bf00      	nop
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	20000808 	.word	0x20000808

08010054 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	4603      	mov	r3, r0
 801005c:	6039      	str	r1, [r7, #0]
 801005e:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d102      	bne.n	801006c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8010066:	f04f 33ff 	mov.w	r3, #4294967295
 801006a:	e00e      	b.n	801008a <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d002      	beq.n	8010078 <LmHandlerGetVersion+0x24>
 8010072:	2b01      	cmp	r3, #1
 8010074:	d004      	beq.n	8010080 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 8010076:	e007      	b.n	8010088 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	4a06      	ldr	r2, [pc, #24]	; (8010094 <LmHandlerGetVersion+0x40>)
 801007c:	601a      	str	r2, [r3, #0]
            break;
 801007e:	e003      	b.n	8010088 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	4a05      	ldr	r2, [pc, #20]	; (8010098 <LmHandlerGetVersion+0x44>)
 8010084:	601a      	str	r2, [r3, #0]
            break;
 8010086:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	bc80      	pop	{r7}
 8010092:	4770      	bx	lr
 8010094:	01000300 	.word	0x01000300
 8010098:	01010003 	.word	0x01010003

0801009c <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 80100a0:	f005 f882 	bl	80151a8 <LoRaMacDeInitialization>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80100aa:	2300      	movs	r3, #0
 80100ac:	e001      	b.n	80100b2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80100ae:	f06f 0301 	mvn.w	r3, #1
    }
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 80100b6:	b580      	push	{r7, lr}
 80100b8:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 80100ba:	f004 f80d 	bl	80140d8 <LoRaMacHalt>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d101      	bne.n	80100c8 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80100c4:	2300      	movs	r3, #0
 80100c6:	e001      	b.n	80100cc <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80100c8:	f06f 0301 	mvn.w	r3, #1
    }
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b08c      	sub	sp, #48	; 0x30
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d102      	bne.n	80100e4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80100de:	f04f 33ff 	mov.w	r3, #4294967295
 80100e2:	e016      	b.n	8010112 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80100e4:	2320      	movs	r3, #32
 80100e6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80100e8:	f107 0308 	add.w	r3, r7, #8
 80100ec:	4618      	mov	r0, r3
 80100ee:	f004 f8a3 	bl	8014238 <LoRaMacMibGetRequestConfirm>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80100f8:	f04f 33ff 	mov.w	r3, #4294967295
 80100fc:	e009      	b.n	8010112 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80100fe:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f993 2000 	ldrsb.w	r2, [r3]
 801010c:	4b03      	ldr	r3, [pc, #12]	; (801011c <LmHandlerGetTxPower+0x4c>)
 801010e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3730      	adds	r7, #48	; 0x30
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	2000081c 	.word	0x2000081c

08010120 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010120:	b480      	push	{r7}
 8010122:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 8010124:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010128:	4618      	mov	r0, r3
 801012a:	46bd      	mov	sp, r7
 801012c:	bc80      	pop	{r7}
 801012e:	4770      	bx	lr

08010130 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	4603      	mov	r3, r0
 8010138:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801013a:	bf00      	nop
 801013c:	370c      	adds	r7, #12
 801013e:	46bd      	mov	sp, r7
 8010140:	bc80      	pop	{r7}
 8010142:	4770      	bx	lr

08010144 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010144:	b480      	push	{r7}
 8010146:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010148:	4b02      	ldr	r3, [pc, #8]	; (8010154 <LmhpCompliancePackageFactory+0x10>)
}
 801014a:	4618      	mov	r0, r3
 801014c:	46bd      	mov	sp, r7
 801014e:	bc80      	pop	{r7}
 8010150:	4770      	bx	lr
 8010152:	bf00      	nop
 8010154:	200000ec 	.word	0x200000ec

08010158 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	60b9      	str	r1, [r7, #8]
 8010162:	4613      	mov	r3, r2
 8010164:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00f      	beq.n	801018c <LmhpComplianceInit+0x34>
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00c      	beq.n	801018c <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 8010172:	4a0c      	ldr	r2, [pc, #48]	; (80101a4 <LmhpComplianceInit+0x4c>)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8010178:	4a0b      	ldr	r2, [pc, #44]	; (80101a8 <LmhpComplianceInit+0x50>)
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 801017e:	4a0a      	ldr	r2, [pc, #40]	; (80101a8 <LmhpComplianceInit+0x50>)
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 8010184:	4b08      	ldr	r3, [pc, #32]	; (80101a8 <LmhpComplianceInit+0x50>)
 8010186:	2201      	movs	r2, #1
 8010188:	701a      	strb	r2, [r3, #0]
 801018a:	e006      	b.n	801019a <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 801018c:	4b05      	ldr	r3, [pc, #20]	; (80101a4 <LmhpComplianceInit+0x4c>)
 801018e:	2200      	movs	r2, #0
 8010190:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010192:	4b05      	ldr	r3, [pc, #20]	; (80101a8 <LmhpComplianceInit+0x50>)
 8010194:	2200      	movs	r2, #0
 8010196:	701a      	strb	r2, [r3, #0]
    }
}
 8010198:	bf00      	nop
 801019a:	bf00      	nop
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	bc80      	pop	{r7}
 80101a2:	4770      	bx	lr
 80101a4:	20000984 	.word	0x20000984
 80101a8:	20000970 	.word	0x20000970

080101ac <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80101ac:	b480      	push	{r7}
 80101ae:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80101b0:	4b02      	ldr	r3, [pc, #8]	; (80101bc <LmhpComplianceIsInitialized+0x10>)
 80101b2:	781b      	ldrb	r3, [r3, #0]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bc80      	pop	{r7}
 80101ba:	4770      	bx	lr
 80101bc:	20000970 	.word	0x20000970

080101c0 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80101c0:	b480      	push	{r7}
 80101c2:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80101c4:	4b07      	ldr	r3, [pc, #28]	; (80101e4 <LmhpComplianceIsRunning+0x24>)
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	f083 0301 	eor.w	r3, r3, #1
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d001      	beq.n	80101d6 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 80101d2:	2300      	movs	r3, #0
 80101d4:	e001      	b.n	80101da <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 80101d6:	4b03      	ldr	r3, [pc, #12]	; (80101e4 <LmhpComplianceIsRunning+0x24>)
 80101d8:	785b      	ldrb	r3, [r3, #1]
}
 80101da:	4618      	mov	r0, r3
 80101dc:	46bd      	mov	sp, r7
 80101de:	bc80      	pop	{r7}
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	20000970 	.word	0x20000970

080101e8 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80101f0:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <LmhpComplianceOnMcpsConfirm+0x48>)
 80101f2:	781b      	ldrb	r3, [r3, #0]
 80101f4:	f083 0301 	eor.w	r3, r3, #1
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d112      	bne.n	8010224 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 80101fe:	4b0c      	ldr	r3, [pc, #48]	; (8010230 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010200:	785b      	ldrb	r3, [r3, #1]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00f      	beq.n	8010226 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 801020a:	2b01      	cmp	r3, #1
 801020c:	d10b      	bne.n	8010226 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8010212:	2b00      	cmp	r3, #0
 8010214:	d007      	beq.n	8010226 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010216:	4b06      	ldr	r3, [pc, #24]	; (8010230 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010218:	899b      	ldrh	r3, [r3, #12]
 801021a:	3301      	adds	r3, #1
 801021c:	b29a      	uxth	r2, r3
 801021e:	4b04      	ldr	r3, [pc, #16]	; (8010230 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010220:	819a      	strh	r2, [r3, #12]
 8010222:	e000      	b.n	8010226 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010224:	bf00      	nop
    }
}
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	bc80      	pop	{r7}
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	20000970 	.word	0x20000970

08010234 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 801023c:	4b12      	ldr	r3, [pc, #72]	; (8010288 <LmhpComplianceOnMlmeConfirm+0x54>)
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	f083 0301 	eor.w	r3, r3, #1
 8010244:	b2db      	uxtb	r3, r3
 8010246:	2b00      	cmp	r3, #0
 8010248:	d116      	bne.n	8010278 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 801024a:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <LmhpComplianceOnMlmeConfirm+0x54>)
 801024c:	785b      	ldrb	r3, [r3, #1]
 801024e:	f083 0301 	eor.w	r3, r3, #1
 8010252:	b2db      	uxtb	r3, r3
 8010254:	2b00      	cmp	r3, #0
 8010256:	d111      	bne.n	801027c <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	2b05      	cmp	r3, #5
 801025e:	d10e      	bne.n	801027e <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 8010260:	4b09      	ldr	r3, [pc, #36]	; (8010288 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010262:	2201      	movs	r2, #1
 8010264:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	7a1a      	ldrb	r2, [r3, #8]
 801026a:	4b07      	ldr	r3, [pc, #28]	; (8010288 <LmhpComplianceOnMlmeConfirm+0x54>)
 801026c:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	7a5a      	ldrb	r2, [r3, #9]
 8010272:	4b05      	ldr	r3, [pc, #20]	; (8010288 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010274:	741a      	strb	r2, [r3, #16]
 8010276:	e002      	b.n	801027e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 8010278:	bf00      	nop
 801027a:	e000      	b.n	801027e <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 801027c:	bf00      	nop
    }
}
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	bc80      	pop	{r7}
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop
 8010288:	20000970 	.word	0x20000970

0801028c <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010292:	4b36      	ldr	r3, [pc, #216]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	f083 0301 	eor.w	r3, r3, #1
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b00      	cmp	r3, #0
 801029e:	d002      	beq.n	80102a6 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 80102a0:	f04f 33ff 	mov.w	r3, #4294967295
 80102a4:	e05e      	b.n	8010364 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 80102a6:	4b31      	ldr	r3, [pc, #196]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102a8:	785b      	ldrb	r3, [r3, #1]
 80102aa:	f083 0301 	eor.w	r3, r3, #1
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d001      	beq.n	80102b8 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80102b4:	2300      	movs	r3, #0
 80102b6:	e055      	b.n	8010364 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 80102b8:	4b2c      	ldr	r3, [pc, #176]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102ba:	7b9b      	ldrb	r3, [r3, #14]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d019      	beq.n	80102f4 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80102c0:	4b2a      	ldr	r3, [pc, #168]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 80102c6:	4b29      	ldr	r3, [pc, #164]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102c8:	2203      	movs	r2, #3
 80102ca:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 80102cc:	4b27      	ldr	r3, [pc, #156]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	2205      	movs	r2, #5
 80102d2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 80102d4:	4b25      	ldr	r3, [pc, #148]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	3301      	adds	r3, #1
 80102da:	4a24      	ldr	r2, [pc, #144]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102dc:	7bd2      	ldrb	r2, [r2, #15]
 80102de:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 80102e0:	4b22      	ldr	r3, [pc, #136]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	3302      	adds	r3, #2
 80102e6:	4a21      	ldr	r2, [pc, #132]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102e8:	7c12      	ldrb	r2, [r2, #16]
 80102ea:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 80102ec:	4b1f      	ldr	r3, [pc, #124]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	709a      	strb	r2, [r3, #2]
 80102f2:	e01c      	b.n	801032e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 80102f4:	4b1d      	ldr	r3, [pc, #116]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 80102f6:	789b      	ldrb	r3, [r3, #2]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d005      	beq.n	8010308 <LmhpComplianceTxProcess+0x7c>
 80102fc:	2b04      	cmp	r3, #4
 80102fe:	d116      	bne.n	801032e <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8010300:	4b1a      	ldr	r3, [pc, #104]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010302:	2201      	movs	r2, #1
 8010304:	709a      	strb	r2, [r3, #2]
                break;
 8010306:	e012      	b.n	801032e <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 8010308:	4b18      	ldr	r3, [pc, #96]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 801030a:	2202      	movs	r2, #2
 801030c:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 801030e:	4b17      	ldr	r3, [pc, #92]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010310:	899b      	ldrh	r3, [r3, #12]
 8010312:	0a1b      	lsrs	r3, r3, #8
 8010314:	b29a      	uxth	r2, r3
 8010316:	4b15      	ldr	r3, [pc, #84]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	b2d2      	uxtb	r2, r2
 801031c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 801031e:	4b13      	ldr	r3, [pc, #76]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010320:	899a      	ldrh	r2, [r3, #12]
 8010322:	4b12      	ldr	r3, [pc, #72]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	3301      	adds	r3, #1
 8010328:	b2d2      	uxtb	r2, r2
 801032a:	701a      	strb	r2, [r3, #0]
                break;
 801032c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 801032e:	23e0      	movs	r3, #224	; 0xe0
 8010330:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8010332:	4b0e      	ldr	r3, [pc, #56]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010334:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8010336:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010338:	4b0c      	ldr	r3, [pc, #48]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 801033a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 801033c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 801033e:	480c      	ldr	r0, [pc, #48]	; (8010370 <LmhpComplianceTxProcess+0xe4>)
 8010340:	f00d fc5a 	bl	801dbf8 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 8010344:	4b0b      	ldr	r3, [pc, #44]	; (8010374 <LmhpComplianceTxProcess+0xe8>)
 8010346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010348:	2b00      	cmp	r3, #0
 801034a:	d102      	bne.n	8010352 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 801034c:	f04f 33ff 	mov.w	r3, #4294967295
 8010350:	e008      	b.n	8010364 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 8010352:	4b08      	ldr	r3, [pc, #32]	; (8010374 <LmhpComplianceTxProcess+0xe8>)
 8010354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010356:	4a05      	ldr	r2, [pc, #20]	; (801036c <LmhpComplianceTxProcess+0xe0>)
 8010358:	78d2      	ldrb	r2, [r2, #3]
 801035a:	4611      	mov	r1, r2
 801035c:	4638      	mov	r0, r7
 801035e:	2201      	movs	r2, #1
 8010360:	4798      	blx	r3
 8010362:	4603      	mov	r3, r0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	20000970 	.word	0x20000970
 8010370:	20000958 	.word	0x20000958
 8010374:	200000ec 	.word	0x200000ec

08010378 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b0a4      	sub	sp, #144	; 0x90
 801037c:	af02      	add	r7, sp, #8
 801037e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010380:	4ba5      	ldr	r3, [pc, #660]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	f083 0301 	eor.w	r3, r3, #1
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b00      	cmp	r3, #0
 801038c:	f040 81c6 	bne.w	801071c <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	7b5b      	ldrb	r3, [r3, #13]
 8010394:	f083 0301 	eor.w	r3, r3, #1
 8010398:	b2db      	uxtb	r3, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	f040 81c0 	bne.w	8010720 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 80103a0:	4b9d      	ldr	r3, [pc, #628]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80103a2:	785b      	ldrb	r3, [r3, #1]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d00c      	beq.n	80103c2 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	7b9b      	ldrb	r3, [r3, #14]
 80103ac:	f083 0301 	eor.w	r3, r3, #1
 80103b0:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d005      	beq.n	80103c2 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 80103b6:	4b98      	ldr	r3, [pc, #608]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80103b8:	899b      	ldrh	r3, [r3, #12]
 80103ba:	3301      	adds	r3, #1
 80103bc:	b29a      	uxth	r2, r3
 80103be:	4b96      	ldr	r3, [pc, #600]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80103c0:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	78db      	ldrb	r3, [r3, #3]
 80103c6:	2be0      	cmp	r3, #224	; 0xe0
 80103c8:	f040 81ac 	bne.w	8010724 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80103cc:	4b92      	ldr	r3, [pc, #584]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80103ce:	785b      	ldrb	r3, [r3, #1]
 80103d0:	f083 0301 	eor.w	r3, r3, #1
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d060      	beq.n	801049c <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	7b1b      	ldrb	r3, [r3, #12]
 80103de:	2b04      	cmp	r3, #4
 80103e0:	f040 81a7 	bne.w	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	689b      	ldr	r3, [r3, #8]
 80103e8:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	f040 81a1 	bne.w	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	689b      	ldr	r3, [r3, #8]
 80103f4:	3301      	adds	r3, #1
 80103f6:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	f040 819a 	bne.w	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	3302      	adds	r3, #2
 8010404:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010406:	2b01      	cmp	r3, #1
 8010408:	f040 8193 	bne.w	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	689b      	ldr	r3, [r3, #8]
 8010410:	3303      	adds	r3, #3
 8010412:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010414:	2b01      	cmp	r3, #1
 8010416:	f040 818c 	bne.w	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 801041a:	4b7f      	ldr	r3, [pc, #508]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801041c:	2200      	movs	r2, #0
 801041e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010420:	4b7d      	ldr	r3, [pc, #500]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010422:	22e0      	movs	r2, #224	; 0xe0
 8010424:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010426:	4b7c      	ldr	r3, [pc, #496]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010428:	2202      	movs	r2, #2
 801042a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 801042c:	4b7a      	ldr	r3, [pc, #488]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801042e:	2200      	movs	r2, #0
 8010430:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8010432:	4b79      	ldr	r3, [pc, #484]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010434:	2200      	movs	r2, #0
 8010436:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010438:	4b77      	ldr	r3, [pc, #476]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801043a:	2200      	movs	r2, #0
 801043c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 801043e:	4b76      	ldr	r3, [pc, #472]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010440:	2200      	movs	r2, #0
 8010442:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8010444:	4b74      	ldr	r3, [pc, #464]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010446:	2201      	movs	r2, #1
 8010448:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 801044a:	4b73      	ldr	r3, [pc, #460]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801044c:	2201      	movs	r2, #1
 801044e:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 8010450:	2304      	movs	r3, #4
 8010452:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 8010454:	2301      	movs	r3, #1
 8010456:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010458:	f107 030c 	add.w	r3, r7, #12
 801045c:	4618      	mov	r0, r3
 801045e:	f004 f8a1 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 8010462:	2000      	movs	r0, #0
 8010464:	f004 fe7a 	bl	801515c <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010468:	4b6c      	ldr	r3, [pc, #432]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d003      	beq.n	801047a <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8010472:	4b6a      	ldr	r3, [pc, #424]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 801047a:	2300      	movs	r3, #0
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	4b68      	ldr	r3, [pc, #416]	; (8010620 <LmhpComplianceOnMcpsIndication+0x2a8>)
 8010480:	2200      	movs	r2, #0
 8010482:	f04f 31ff 	mov.w	r1, #4294967295
 8010486:	4867      	ldr	r0, [pc, #412]	; (8010624 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010488:	f00d fb80 	bl	801db8c <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 801048c:	f241 3188 	movw	r1, #5000	; 0x1388
 8010490:	4864      	ldr	r0, [pc, #400]	; (8010624 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010492:	f00d fc8f 	bl	801ddb4 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 8010496:	f7ff fef9 	bl	801028c <LmhpComplianceTxProcess>
 801049a:	e14a      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	781a      	ldrb	r2, [r3, #0]
 80104a2:	4b5d      	ldr	r3, [pc, #372]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104a4:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 80104a6:	4b5c      	ldr	r3, [pc, #368]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104a8:	789b      	ldrb	r3, [r3, #2]
 80104aa:	2b0a      	cmp	r3, #10
 80104ac:	f200 813c 	bhi.w	8010728 <LmhpComplianceOnMcpsIndication+0x3b0>
 80104b0:	a201      	add	r2, pc, #4	; (adr r2, 80104b8 <LmhpComplianceOnMcpsIndication+0x140>)
 80104b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b6:	bf00      	nop
 80104b8:	080104e5 	.word	0x080104e5
 80104bc:	0801052f 	.word	0x0801052f
 80104c0:	08010537 	.word	0x08010537
 80104c4:	08010545 	.word	0x08010545
 80104c8:	08010553 	.word	0x08010553
 80104cc:	080105ab 	.word	0x080105ab
 80104d0:	080105bd 	.word	0x080105bd
 80104d4:	0801062d 	.word	0x0801062d
 80104d8:	080106d5 	.word	0x080106d5
 80104dc:	080106e7 	.word	0x080106e7
 80104e0:	08010701 	.word	0x08010701
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80104e4:	484f      	ldr	r0, [pc, #316]	; (8010624 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80104e6:	f00d fbf5 	bl	801dcd4 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80104ea:	4b4b      	ldr	r3, [pc, #300]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104ec:	2200      	movs	r2, #0
 80104ee:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80104f0:	4b49      	ldr	r3, [pc, #292]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80104f6:	2304      	movs	r3, #4
 80104f8:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80104fa:	4b48      	ldr	r3, [pc, #288]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010502:	f107 030c 	add.w	r3, r7, #12
 8010506:	4618      	mov	r0, r3
 8010508:	f004 f84c 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 801050c:	4b43      	ldr	r3, [pc, #268]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	785b      	ldrb	r3, [r3, #1]
 8010512:	4618      	mov	r0, r3
 8010514:	f004 fe22 	bl	801515c <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010518:	4b40      	ldr	r3, [pc, #256]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	2b00      	cmp	r3, #0
 8010520:	f000 8104 	beq.w	801072c <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010524:	4b3d      	ldr	r3, [pc, #244]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	689b      	ldr	r3, [r3, #8]
 801052a:	4798      	blx	r3
                    }
                }
                break;
 801052c:	e0fe      	b.n	801072c <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 801052e:	4b3a      	ldr	r3, [pc, #232]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010530:	2202      	movs	r2, #2
 8010532:	719a      	strb	r2, [r3, #6]
                break;
 8010534:	e0fd      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 8010536:	4b38      	ldr	r3, [pc, #224]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010538:	2201      	movs	r2, #1
 801053a:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 801053c:	4b36      	ldr	r3, [pc, #216]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801053e:	2201      	movs	r2, #1
 8010540:	709a      	strb	r2, [r3, #2]
                break;
 8010542:	e0f6      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 8010544:	4b34      	ldr	r3, [pc, #208]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010546:	2200      	movs	r2, #0
 8010548:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 801054a:	4b33      	ldr	r3, [pc, #204]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801054c:	2201      	movs	r2, #1
 801054e:	709a      	strb	r2, [r3, #2]
                break;
 8010550:	e0ef      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	7b1a      	ldrb	r2, [r3, #12]
 8010556:	4b30      	ldr	r3, [pc, #192]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010558:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 801055a:	4b2f      	ldr	r3, [pc, #188]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	2204      	movs	r2, #4
 8010560:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010562:	2301      	movs	r3, #1
 8010564:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010568:	e012      	b.n	8010590 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	689a      	ldr	r2, [r3, #8]
 801056e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010572:	4413      	add	r3, r2
 8010574:	781a      	ldrb	r2, [r3, #0]
 8010576:	4b28      	ldr	r3, [pc, #160]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010578:	6899      	ldr	r1, [r3, #8]
 801057a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801057e:	440b      	add	r3, r1
 8010580:	3201      	adds	r2, #1
 8010582:	b2d2      	uxtb	r2, r2
 8010584:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010586:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801058a:	3301      	adds	r3, #1
 801058c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010590:	4b21      	ldr	r3, [pc, #132]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010592:	795a      	ldrb	r2, [r3, #5]
 8010594:	4b20      	ldr	r3, [pc, #128]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010596:	799b      	ldrb	r3, [r3, #6]
 8010598:	4293      	cmp	r3, r2
 801059a:	bf28      	it	cs
 801059c:	4613      	movcs	r3, r2
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d3e0      	bcc.n	801056a <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 80105a8:	e0c3      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 80105aa:	2305      	movs	r3, #5
 80105ac:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 80105b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80105b4:	4618      	mov	r0, r3
 80105b6:	f004 fb89 	bl	8014ccc <LoRaMacMlmeRequest>
                }
                break;
 80105ba:	e0ba      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 80105bc:	4819      	ldr	r0, [pc, #100]	; (8010624 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80105be:	f00d fb89 	bl	801dcd4 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 80105c2:	4b15      	ldr	r3, [pc, #84]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80105c4:	2200      	movs	r2, #0
 80105c6:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 80105c8:	4b13      	ldr	r3, [pc, #76]	; (8010618 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80105ca:	2200      	movs	r2, #0
 80105cc:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 80105ce:	2304      	movs	r3, #4
 80105d0:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80105d2:	4b12      	ldr	r3, [pc, #72]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80105da:	f107 030c 	add.w	r3, r7, #12
 80105de:	4618      	mov	r0, r3
 80105e0:	f003 ffe0 	bl	80145a4 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80105e4:	4b0d      	ldr	r3, [pc, #52]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	785b      	ldrb	r3, [r3, #1]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f004 fdb6 	bl	801515c <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 80105f0:	4b0a      	ldr	r3, [pc, #40]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	689b      	ldr	r3, [r3, #8]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d003      	beq.n	8010602 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 80105fa:	4b08      	ldr	r3, [pc, #32]	; (801061c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8010602:	4b09      	ldr	r3, [pc, #36]	; (8010628 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010606:	2b00      	cmp	r3, #0
 8010608:	f000 8092 	beq.w	8010730 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 801060c:	4b06      	ldr	r3, [pc, #24]	; (8010628 <LmhpComplianceOnMcpsIndication+0x2b0>)
 801060e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010610:	2101      	movs	r1, #1
 8010612:	2002      	movs	r0, #2
 8010614:	4798      	blx	r3
                    }
                }
                break;
 8010616:	e08b      	b.n	8010730 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010618:	20000970 	.word	0x20000970
 801061c:	20000984 	.word	0x20000984
 8010620:	08010749 	.word	0x08010749
 8010624:	20000958 	.word	0x20000958
 8010628:	200000ec 	.word	0x200000ec
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7b1b      	ldrb	r3, [r3, #12]
 8010630:	2b03      	cmp	r3, #3
 8010632:	d113      	bne.n	801065c <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010634:	2306      	movs	r3, #6
 8010636:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	689b      	ldr	r3, [r3, #8]
 801063e:	3301      	adds	r3, #1
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	021b      	lsls	r3, r3, #8
 8010644:	b21a      	sxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	3302      	adds	r3, #2
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	b21b      	sxth	r3, r3
 8010650:	4313      	orrs	r3, r2
 8010652:	b21b      	sxth	r3, r3
 8010654:	b29b      	uxth	r3, r3
 8010656:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 801065a:	e032      	b.n	80106c2 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	7b1b      	ldrb	r3, [r3, #12]
 8010660:	2b07      	cmp	r3, #7
 8010662:	d12e      	bne.n	80106c2 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010664:	2307      	movs	r3, #7
 8010666:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	689b      	ldr	r3, [r3, #8]
 801066e:	3301      	adds	r3, #1
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	021b      	lsls	r3, r3, #8
 8010674:	b21a      	sxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	3302      	adds	r3, #2
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	b21b      	sxth	r3, r3
 8010680:	4313      	orrs	r3, r2
 8010682:	b21b      	sxth	r3, r3
 8010684:	b29b      	uxth	r3, r3
 8010686:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	3303      	adds	r3, #3
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	041a      	lsls	r2, r3, #16
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	3304      	adds	r3, #4
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	021b      	lsls	r3, r3, #8
 801069e:	4313      	orrs	r3, r2
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	6892      	ldr	r2, [r2, #8]
 80106a4:	3205      	adds	r2, #5
 80106a6:	7812      	ldrb	r2, [r2, #0]
 80106a8:	4313      	orrs	r3, r2
 80106aa:	461a      	mov	r2, r3
 80106ac:	2364      	movs	r3, #100	; 0x64
 80106ae:	fb02 f303 	mul.w	r3, r2, r3
 80106b2:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	3306      	adds	r3, #6
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	b25b      	sxtb	r3, r3
 80106be:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 80106c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80106c6:	4618      	mov	r0, r3
 80106c8:	f004 fb00 	bl	8014ccc <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 80106cc:	4b1a      	ldr	r3, [pc, #104]	; (8010738 <LmhpComplianceOnMcpsIndication+0x3c0>)
 80106ce:	2201      	movs	r2, #1
 80106d0:	709a      	strb	r2, [r3, #2]
                }
                break;
 80106d2:	e02e      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 80106d4:	230a      	movs	r3, #10
 80106d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 80106da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80106de:	4618      	mov	r0, r3
 80106e0:	f004 faf4 	bl	8014ccc <LoRaMacMlmeRequest>
                }
                break;
 80106e4:	e025      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 80106e6:	2300      	movs	r3, #0
 80106e8:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	689b      	ldr	r3, [r3, #8]
 80106ee:	3301      	adds	r3, #1
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 80106f4:	f107 030c 	add.w	r3, r7, #12
 80106f8:	4618      	mov	r0, r3
 80106fa:	f003 ff53 	bl	80145a4 <LoRaMacMibSetRequestConfirm>
                }
                break;
 80106fe:	e018      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010700:	230d      	movs	r3, #13
 8010702:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	785b      	ldrb	r3, [r3, #1]
 801070c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010714:	4618      	mov	r0, r3
 8010716:	f004 fad9 	bl	8014ccc <LoRaMacMlmeRequest>
                }
                break;
 801071a:	e00a      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 801071c:	bf00      	nop
 801071e:	e008      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010720:	bf00      	nop
 8010722:	e006      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010724:	bf00      	nop
 8010726:	e004      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010728:	bf00      	nop
 801072a:	e002      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 801072c:	bf00      	nop
 801072e:	e000      	b.n	8010732 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010730:	bf00      	nop
        }
    }
}
 8010732:	3788      	adds	r7, #136	; 0x88
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	20000970 	.word	0x20000970

0801073c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 801073c:	b480      	push	{r7}
 801073e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010740:	bf00      	nop
 8010742:	46bd      	mov	sp, r7
 8010744:	bc80      	pop	{r7}
 8010746:	4770      	bx	lr

08010748 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010750:	f7ff fd9c 	bl	801028c <LmhpComplianceTxProcess>
}
 8010754:	bf00      	nop
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	370c      	adds	r7, #12
 801076a:	46bd      	mov	sp, r7
 801076c:	bc80      	pop	{r7}
 801076e:	4770      	bx	lr

08010770 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	4603      	mov	r3, r0
 8010778:	6039      	str	r1, [r7, #0]
 801077a:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 801077c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010780:	4618      	mov	r0, r3
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	bc80      	pop	{r7}
 8010788:	4770      	bx	lr
	...

0801078c <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010792:	f00d fbb9 	bl	801df08 <UTIL_TIMER_GetCurrentTime>
 8010796:	4603      	mov	r3, r0
 8010798:	4a0f      	ldr	r2, [pc, #60]	; (80107d8 <OnRadioTxDone+0x4c>)
 801079a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 801079c:	4c0f      	ldr	r4, [pc, #60]	; (80107dc <OnRadioTxDone+0x50>)
 801079e:	463b      	mov	r3, r7
 80107a0:	4618      	mov	r0, r3
 80107a2:	f00c fd2f 	bl	801d204 <SysTimeGet>
 80107a6:	f504 734e 	add.w	r3, r4, #824	; 0x338
 80107aa:	463a      	mov	r2, r7
 80107ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107b0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 80107b4:	4a0a      	ldr	r2, [pc, #40]	; (80107e0 <OnRadioTxDone+0x54>)
 80107b6:	7813      	ldrb	r3, [r2, #0]
 80107b8:	f043 0310 	orr.w	r3, r3, #16
 80107bc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80107be:	f003 f8e1 	bl	8013984 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80107c2:	4b08      	ldr	r3, [pc, #32]	; (80107e4 <OnRadioTxDone+0x58>)
 80107c4:	2201      	movs	r2, #1
 80107c6:	2100      	movs	r1, #0
 80107c8:	2002      	movs	r0, #2
 80107ca:	f00d fc8d 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 80107ce:	bf00      	nop
 80107d0:	370c      	adds	r7, #12
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd90      	pop	{r4, r7, pc}
 80107d6:	bf00      	nop
 80107d8:	200015fc 	.word	0x200015fc
 80107dc:	20000988 	.word	0x20000988
 80107e0:	200015f8 	.word	0x200015f8
 80107e4:	0801ee98 	.word	0x0801ee98

080107e8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b084      	sub	sp, #16
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	60f8      	str	r0, [r7, #12]
 80107f0:	4608      	mov	r0, r1
 80107f2:	4611      	mov	r1, r2
 80107f4:	461a      	mov	r2, r3
 80107f6:	4603      	mov	r3, r0
 80107f8:	817b      	strh	r3, [r7, #10]
 80107fa:	460b      	mov	r3, r1
 80107fc:	813b      	strh	r3, [r7, #8]
 80107fe:	4613      	mov	r3, r2
 8010800:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010802:	f00d fb81 	bl	801df08 <UTIL_TIMER_GetCurrentTime>
 8010806:	4603      	mov	r3, r0
 8010808:	4a0f      	ldr	r2, [pc, #60]	; (8010848 <OnRadioRxDone+0x60>)
 801080a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 801080c:	4a0e      	ldr	r2, [pc, #56]	; (8010848 <OnRadioRxDone+0x60>)
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010812:	4a0d      	ldr	r2, [pc, #52]	; (8010848 <OnRadioRxDone+0x60>)
 8010814:	897b      	ldrh	r3, [r7, #10]
 8010816:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010818:	4a0b      	ldr	r2, [pc, #44]	; (8010848 <OnRadioRxDone+0x60>)
 801081a:	893b      	ldrh	r3, [r7, #8]
 801081c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 801081e:	4a0a      	ldr	r2, [pc, #40]	; (8010848 <OnRadioRxDone+0x60>)
 8010820:	79fb      	ldrb	r3, [r7, #7]
 8010822:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010824:	4a09      	ldr	r2, [pc, #36]	; (801084c <OnRadioRxDone+0x64>)
 8010826:	7813      	ldrb	r3, [r2, #0]
 8010828:	f043 0308 	orr.w	r3, r3, #8
 801082c:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 801082e:	f003 f8a9 	bl	8013984 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010832:	4b07      	ldr	r3, [pc, #28]	; (8010850 <OnRadioRxDone+0x68>)
 8010834:	2201      	movs	r2, #1
 8010836:	2100      	movs	r1, #0
 8010838:	2002      	movs	r0, #2
 801083a:	f00d fc55 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 801083e:	bf00      	nop
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	20001600 	.word	0x20001600
 801084c:	200015f8 	.word	0x200015f8
 8010850:	0801eea8 	.word	0x0801eea8

08010854 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010854:	b580      	push	{r7, lr}
 8010856:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010858:	4a07      	ldr	r2, [pc, #28]	; (8010878 <OnRadioTxTimeout+0x24>)
 801085a:	7813      	ldrb	r3, [r2, #0]
 801085c:	f043 0304 	orr.w	r3, r3, #4
 8010860:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010862:	f003 f88f 	bl	8013984 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010866:	4b05      	ldr	r3, [pc, #20]	; (801087c <OnRadioTxTimeout+0x28>)
 8010868:	2201      	movs	r2, #1
 801086a:	2100      	movs	r1, #0
 801086c:	2002      	movs	r0, #2
 801086e:	f00d fc3b 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 8010872:	bf00      	nop
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	200015f8 	.word	0x200015f8
 801087c:	0801eeb8 	.word	0x0801eeb8

08010880 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010884:	4a04      	ldr	r2, [pc, #16]	; (8010898 <OnRadioRxError+0x18>)
 8010886:	7813      	ldrb	r3, [r2, #0]
 8010888:	f043 0302 	orr.w	r3, r3, #2
 801088c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 801088e:	f003 f879 	bl	8013984 <OnMacProcessNotify>
}
 8010892:	bf00      	nop
 8010894:	bd80      	pop	{r7, pc}
 8010896:	bf00      	nop
 8010898:	200015f8 	.word	0x200015f8

0801089c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80108a0:	4a07      	ldr	r2, [pc, #28]	; (80108c0 <OnRadioRxTimeout+0x24>)
 80108a2:	7813      	ldrb	r3, [r2, #0]
 80108a4:	f043 0301 	orr.w	r3, r3, #1
 80108a8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80108aa:	f003 f86b 	bl	8013984 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80108ae:	4b05      	ldr	r3, [pc, #20]	; (80108c4 <OnRadioRxTimeout+0x28>)
 80108b0:	2201      	movs	r2, #1
 80108b2:	2100      	movs	r1, #0
 80108b4:	2002      	movs	r0, #2
 80108b6:	f00d fc17 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 80108ba:	bf00      	nop
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	200015f8 	.word	0x200015f8
 80108c4:	0801eec8 	.word	0x0801eec8

080108c8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 80108c8:	b480      	push	{r7}
 80108ca:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80108cc:	4b08      	ldr	r3, [pc, #32]	; (80108f0 <UpdateRxSlotIdleState+0x28>)
 80108ce:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d004      	beq.n	80108e0 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80108d6:	4b07      	ldr	r3, [pc, #28]	; (80108f4 <UpdateRxSlotIdleState+0x2c>)
 80108d8:	2206      	movs	r2, #6
 80108da:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80108de:	e003      	b.n	80108e8 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80108e0:	4b04      	ldr	r3, [pc, #16]	; (80108f4 <UpdateRxSlotIdleState+0x2c>)
 80108e2:	2202      	movs	r2, #2
 80108e4:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 80108e8:	bf00      	nop
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bc80      	pop	{r7}
 80108ee:	4770      	bx	lr
 80108f0:	20000e90 	.word	0x20000e90
 80108f4:	20000988 	.word	0x20000988

080108f8 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b092      	sub	sp, #72	; 0x48
 80108fc:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80108fe:	4b50      	ldr	r3, [pc, #320]	; (8010a40 <ProcessRadioTxDone+0x148>)
 8010900:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010904:	2b02      	cmp	r3, #2
 8010906:	d002      	beq.n	801090e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010908:	4b4e      	ldr	r3, [pc, #312]	; (8010a44 <ProcessRadioTxDone+0x14c>)
 801090a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801090e:	f3ef 8310 	mrs	r3, PRIMASK
 8010912:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010918:	b672      	cpsid	i
}
 801091a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 801091c:	f00d faf4 	bl	801df08 <UTIL_TIMER_GetCurrentTime>
 8010920:	4602      	mov	r2, r0
 8010922:	4b49      	ldr	r3, [pc, #292]	; (8010a48 <ProcessRadioTxDone+0x150>)
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 801092a:	4b48      	ldr	r3, [pc, #288]	; (8010a4c <ProcessRadioTxDone+0x154>)
 801092c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	4619      	mov	r1, r3
 8010936:	4846      	ldr	r0, [pc, #280]	; (8010a50 <ProcessRadioTxDone+0x158>)
 8010938:	f00d fa3c 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 801093c:	4844      	ldr	r0, [pc, #272]	; (8010a50 <ProcessRadioTxDone+0x158>)
 801093e:	f00d f95b 	bl	801dbf8 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010942:	4b42      	ldr	r3, [pc, #264]	; (8010a4c <ProcessRadioTxDone+0x154>)
 8010944:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	4619      	mov	r1, r3
 801094e:	4841      	ldr	r0, [pc, #260]	; (8010a54 <ProcessRadioTxDone+0x15c>)
 8010950:	f00d fa30 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010954:	483f      	ldr	r0, [pc, #252]	; (8010a54 <ProcessRadioTxDone+0x15c>)
 8010956:	f00d f94f 	bl	801dbf8 <UTIL_TIMER_Start>
 801095a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801095c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801095e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010960:	f383 8810 	msr	PRIMASK, r3
}
 8010964:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010966:	4b36      	ldr	r3, [pc, #216]	; (8010a40 <ProcessRadioTxDone+0x148>)
 8010968:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801096c:	2b02      	cmp	r3, #2
 801096e:	d004      	beq.n	801097a <ProcessRadioTxDone+0x82>
 8010970:	4b36      	ldr	r3, [pc, #216]	; (8010a4c <ProcessRadioTxDone+0x154>)
 8010972:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010976:	2b00      	cmp	r3, #0
 8010978:	d019      	beq.n	80109ae <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 801097a:	2316      	movs	r3, #22
 801097c:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010980:	4b2f      	ldr	r3, [pc, #188]	; (8010a40 <ProcessRadioTxDone+0x148>)
 8010982:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010986:	f107 0220 	add.w	r2, r7, #32
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f006 fcec 	bl	801736a <RegionGetPhyParam>
 8010992:	4603      	mov	r3, r0
 8010994:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010996:	4b2d      	ldr	r3, [pc, #180]	; (8010a4c <ProcessRadioTxDone+0x154>)
 8010998:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	4413      	add	r3, r2
 80109a0:	4619      	mov	r1, r3
 80109a2:	482d      	ldr	r0, [pc, #180]	; (8010a58 <ProcessRadioTxDone+0x160>)
 80109a4:	f00d fa06 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 80109a8:	482b      	ldr	r0, [pc, #172]	; (8010a58 <ProcessRadioTxDone+0x160>)
 80109aa:	f00d f925 	bl	801dbf8 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80109ae:	4b26      	ldr	r3, [pc, #152]	; (8010a48 <ProcessRadioTxDone+0x150>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	4a23      	ldr	r2, [pc, #140]	; (8010a40 <ProcessRadioTxDone+0x148>)
 80109b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 80109b6:	4b25      	ldr	r3, [pc, #148]	; (8010a4c <ProcessRadioTxDone+0x154>)
 80109b8:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 80109bc:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80109be:	4b22      	ldr	r3, [pc, #136]	; (8010a48 <ProcessRadioTxDone+0x150>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80109c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80109c8:	4618      	mov	r0, r3
 80109ca:	f00c fc53 	bl	801d274 <SysTimeGetMcuTime>
 80109ce:	4638      	mov	r0, r7
 80109d0:	4b1b      	ldr	r3, [pc, #108]	; (8010a40 <ProcessRadioTxDone+0x148>)
 80109d2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80109d6:	9200      	str	r2, [sp, #0]
 80109d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80109dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80109e0:	ca06      	ldmia	r2, {r1, r2}
 80109e2:	f00c fba8 	bl	801d136 <SysTimeSub>
 80109e6:	f107 0314 	add.w	r3, r7, #20
 80109ea:	463a      	mov	r2, r7
 80109ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109f0:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80109f4:	4b15      	ldr	r3, [pc, #84]	; (8010a4c <ProcessRadioTxDone+0x154>)
 80109f6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80109fa:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 80109fc:	2301      	movs	r3, #1
 80109fe:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010a00:	4b0f      	ldr	r3, [pc, #60]	; (8010a40 <ProcessRadioTxDone+0x148>)
 8010a02:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010a0e:	4b0c      	ldr	r3, [pc, #48]	; (8010a40 <ProcessRadioTxDone+0x148>)
 8010a10:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010a14:	f107 0208 	add.w	r2, r7, #8
 8010a18:	4611      	mov	r1, r2
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f006 fcbd 	bl	801739a <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010a20:	4b0a      	ldr	r3, [pc, #40]	; (8010a4c <ProcessRadioTxDone+0x154>)
 8010a22:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010a26:	f083 0301 	eor.w	r3, r3, #1
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d003      	beq.n	8010a38 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010a30:	4b06      	ldr	r3, [pc, #24]	; (8010a4c <ProcessRadioTxDone+0x154>)
 8010a32:	2200      	movs	r2, #0
 8010a34:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010a38:	bf00      	nop
 8010a3a:	3740      	adds	r7, #64	; 0x40
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	20000e90 	.word	0x20000e90
 8010a44:	0801f578 	.word	0x0801f578
 8010a48:	200015fc 	.word	0x200015fc
 8010a4c:	20000988 	.word	0x20000988
 8010a50:	20000d08 	.word	0x20000d08
 8010a54:	20000d20 	.word	0x20000d20
 8010a58:	20000d7c 	.word	0x20000d7c

08010a5c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010a60:	4b10      	ldr	r3, [pc, #64]	; (8010aa4 <PrepareRxDoneAbort+0x48>)
 8010a62:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a6a:	4a0e      	ldr	r2, [pc, #56]	; (8010aa4 <PrepareRxDoneAbort+0x48>)
 8010a6c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010a70:	4b0c      	ldr	r3, [pc, #48]	; (8010aa4 <PrepareRxDoneAbort+0x48>)
 8010a72:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d002      	beq.n	8010a80 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	f001 f950 	bl	8011d20 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010a80:	4a08      	ldr	r2, [pc, #32]	; (8010aa4 <PrepareRxDoneAbort+0x48>)
 8010a82:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a86:	f043 0302 	orr.w	r3, r3, #2
 8010a8a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010a8e:	4a05      	ldr	r2, [pc, #20]	; (8010aa4 <PrepareRxDoneAbort+0x48>)
 8010a90:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010a94:	f043 0310 	orr.w	r3, r3, #16
 8010a98:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010a9c:	f7ff ff14 	bl	80108c8 <UpdateRxSlotIdleState>
}
 8010aa0:	bf00      	nop
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	20000988 	.word	0x20000988

08010aa8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010aa8:	b5b0      	push	{r4, r5, r7, lr}
 8010aaa:	b0aa      	sub	sp, #168	; 0xa8
 8010aac:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010aae:	2313      	movs	r3, #19
 8010ab0:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010ab4:	4b78      	ldr	r3, [pc, #480]	; (8010c98 <ProcessRadioRxDone+0x1f0>)
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010abc:	4b76      	ldr	r3, [pc, #472]	; (8010c98 <ProcessRadioRxDone+0x1f0>)
 8010abe:	891b      	ldrh	r3, [r3, #8]
 8010ac0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010ac4:	4b74      	ldr	r3, [pc, #464]	; (8010c98 <ProcessRadioRxDone+0x1f0>)
 8010ac6:	895b      	ldrh	r3, [r3, #10]
 8010ac8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010acc:	4b72      	ldr	r3, [pc, #456]	; (8010c98 <ProcessRadioRxDone+0x1f0>)
 8010ace:	7b1b      	ldrb	r3, [r3, #12]
 8010ad0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010ada:	2300      	movs	r3, #0
 8010adc:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010ade:	4b6f      	ldr	r3, [pc, #444]	; (8010c9c <ProcessRadioRxDone+0x1f4>)
 8010ae0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010ae4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010aee:	2301      	movs	r3, #1
 8010af0:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010af4:	2301      	movs	r3, #1
 8010af6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010afa:	4b69      	ldr	r3, [pc, #420]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010afc:	2200      	movs	r2, #0
 8010afe:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010b02:	4a67      	ldr	r2, [pc, #412]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010b08:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010b0c:	4a64      	ldr	r2, [pc, #400]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b0e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010b12:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010b16:	4b62      	ldr	r3, [pc, #392]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b18:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010b1c:	4b60      	ldr	r3, [pc, #384]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b1e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010b22:	4b5f      	ldr	r3, [pc, #380]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b24:	2200      	movs	r2, #0
 8010b26:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010b2a:	4b5d      	ldr	r3, [pc, #372]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010b32:	4b5b      	ldr	r3, [pc, #364]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010b3a:	4b59      	ldr	r3, [pc, #356]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010b42:	4b57      	ldr	r3, [pc, #348]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b44:	2200      	movs	r2, #0
 8010b46:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010b4a:	4b55      	ldr	r3, [pc, #340]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010b52:	4b53      	ldr	r3, [pc, #332]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010b5a:	4b51      	ldr	r3, [pc, #324]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010b62:	4b4f      	ldr	r3, [pc, #316]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010b6a:	4b4d      	ldr	r3, [pc, #308]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010b72:	4b4b      	ldr	r3, [pc, #300]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b74:	2200      	movs	r2, #0
 8010b76:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010b7a:	4b4a      	ldr	r3, [pc, #296]	; (8010ca4 <ProcessRadioRxDone+0x1fc>)
 8010b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b7e:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010b80:	4849      	ldr	r0, [pc, #292]	; (8010ca8 <ProcessRadioRxDone+0x200>)
 8010b82:	f00d f8a7 	bl	801dcd4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010b86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010b90:	f004 fc4b 	bl	801542a <LoRaMacClassBRxBeacon>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00b      	beq.n	8010bb2 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010b9a:	4a41      	ldr	r2, [pc, #260]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010b9c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010ba0:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010ba4:	4a3e      	ldr	r2, [pc, #248]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010ba6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010baa:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8010bae:	f000 bc1f 	b.w	80113f0 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010bb2:	4b3a      	ldr	r3, [pc, #232]	; (8010c9c <ProcessRadioRxDone+0x1f4>)
 8010bb4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d11e      	bne.n	8010bfa <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010bbc:	f004 fc48 	bl	8015450 <LoRaMacClassBIsPingExpected>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00a      	beq.n	8010bdc <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010bc6:	2000      	movs	r0, #0
 8010bc8:	f004 fbf9 	bl	80153be <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010bcc:	2000      	movs	r0, #0
 8010bce:	f004 fc1a 	bl	8015406 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010bd2:	4b33      	ldr	r3, [pc, #204]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010bd4:	2204      	movs	r2, #4
 8010bd6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8010bda:	e00e      	b.n	8010bfa <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010bdc:	f004 fc3f 	bl	801545e <LoRaMacClassBIsMulticastExpected>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d009      	beq.n	8010bfa <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010be6:	2000      	movs	r0, #0
 8010be8:	f004 fbf3 	bl	80153d2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010bec:	2000      	movs	r0, #0
 8010bee:	f004 fc13 	bl	8015418 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010bf2:	4b2b      	ldr	r3, [pc, #172]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010bf4:	2205      	movs	r2, #5
 8010bf6:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8010bfa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c02:	4b27      	ldr	r3, [pc, #156]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010c04:	2201      	movs	r2, #1
 8010c06:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 8010c0a:	f7ff ff27 	bl	8010a5c <PrepareRxDoneAbort>
        return;
 8010c0e:	e3ef      	b.n	80113f0 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010c10:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010c14:	1c5a      	adds	r2, r3, #1
 8010c16:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8010c1a:	461a      	mov	r2, r3
 8010c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c20:	4413      	add	r3, r2
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8010c28:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8010c2c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	3b01      	subs	r3, #1
 8010c34:	2b06      	cmp	r3, #6
 8010c36:	f200 83b4 	bhi.w	80113a2 <ProcessRadioRxDone+0x8fa>
 8010c3a:	a201      	add	r2, pc, #4	; (adr r2, 8010c40 <ProcessRadioRxDone+0x198>)
 8010c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c40:	08010c5d 	.word	0x08010c5d
 8010c44:	080113a3 	.word	0x080113a3
 8010c48:	08010e3d 	.word	0x08010e3d
 8010c4c:	080113a3 	.word	0x080113a3
 8010c50:	08010e35 	.word	0x08010e35
 8010c54:	080113a3 	.word	0x080113a3
 8010c58:	08011347 	.word	0x08011347
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010c5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c60:	2b10      	cmp	r3, #16
 8010c62:	d806      	bhi.n	8010c72 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c64:	4b0e      	ldr	r3, [pc, #56]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010c66:	2201      	movs	r2, #1
 8010c68:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010c6c:	f7ff fef6 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8010c70:	e3be      	b.n	80113f0 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 8010c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c76:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 8010c78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c7c:	b2db      	uxtb	r3, r3
 8010c7e:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010c80:	4b06      	ldr	r3, [pc, #24]	; (8010c9c <ProcessRadioRxDone+0x1f4>)
 8010c82:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d010      	beq.n	8010cac <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c8a:	4b05      	ldr	r3, [pc, #20]	; (8010ca0 <ProcessRadioRxDone+0x1f8>)
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010c92:	f7ff fee3 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8010c96:	e3ab      	b.n	80113f0 <ProcessRadioRxDone+0x948>
 8010c98:	20001600 	.word	0x20001600
 8010c9c:	20000e90 	.word	0x20000e90
 8010ca0:	20000988 	.word	0x20000988
 8010ca4:	0801f578 	.word	0x0801f578
 8010ca8:	20000d20 	.word	0x20000d20
            }

            SecureElementGetJoinEui( joinEui );
 8010cac:	1d3b      	adds	r3, r7, #4
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7fe fa92 	bl	800f1d8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8010cb4:	f107 0214 	add.w	r2, r7, #20
 8010cb8:	1d3b      	adds	r3, r7, #4
 8010cba:	4619      	mov	r1, r3
 8010cbc:	20ff      	movs	r0, #255	; 0xff
 8010cbe:	f005 fdd5 	bl	801686c <LoRaMacCryptoHandleJoinAccept>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8010cc8:	2300      	movs	r3, #0
 8010cca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010cce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010cd2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	b25b      	sxtb	r3, r3
 8010cda:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010cdc:	4bbb      	ldr	r3, [pc, #748]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010cde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010ce2:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8010ce4:	4bb9      	ldr	r3, [pc, #740]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010cea:	4639      	mov	r1, r7
 8010cec:	2207      	movs	r2, #7
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f006 fb76 	bl	80173e0 <RegionVerify>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8010cfa:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f040 808c 	bne.w	8010e1c <ProcessRadioRxDone+0x374>
 8010d04:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f000 8087 	beq.w	8010e1c <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010d0e:	7f7b      	ldrb	r3, [r7, #29]
 8010d10:	461a      	mov	r2, r3
 8010d12:	4bae      	ldr	r3, [pc, #696]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010d18:	4bac      	ldr	r3, [pc, #688]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010d1e:	7fbb      	ldrb	r3, [r7, #30]
 8010d20:	021b      	lsls	r3, r3, #8
 8010d22:	4313      	orrs	r3, r2
 8010d24:	4aa9      	ldr	r2, [pc, #676]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010d2a:	4ba8      	ldr	r3, [pc, #672]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010d30:	7ffb      	ldrb	r3, [r7, #31]
 8010d32:	041b      	lsls	r3, r3, #16
 8010d34:	4313      	orrs	r3, r2
 8010d36:	4aa5      	ldr	r2, [pc, #660]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	4aa3      	ldr	r2, [pc, #652]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8010d44:	4ba1      	ldr	r3, [pc, #644]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010d4a:	4619      	mov	r1, r3
 8010d4c:	2002      	movs	r0, #2
 8010d4e:	f7fe fa5b 	bl	800f208 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010d52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d56:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010d5a:	b2db      	uxtb	r3, r3
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	4b9b      	ldr	r3, [pc, #620]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d60:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d68:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d6c:	b2db      	uxtb	r3, r3
 8010d6e:	461a      	mov	r2, r3
 8010d70:	4b96      	ldr	r3, [pc, #600]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010d76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010d7a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	461a      	mov	r2, r3
 8010d82:	4b92      	ldr	r3, [pc, #584]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010d88:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	4b8f      	ldr	r3, [pc, #572]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d90:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010d92:	4b8e      	ldr	r3, [pc, #568]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010d9a:	4b8c      	ldr	r3, [pc, #560]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010da0:	4b8a      	ldr	r3, [pc, #552]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010da8:	fb02 f303 	mul.w	r3, r2, r3
 8010dac:	4a87      	ldr	r2, [pc, #540]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010dae:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010db0:	4b86      	ldr	r3, [pc, #536]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010db4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010db8:	4a84      	ldr	r2, [pc, #528]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010dba:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010dbc:	4b83      	ldr	r3, [pc, #524]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010dc4:	4b81      	ldr	r3, [pc, #516]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010dcc:	f107 0314 	add.w	r3, r7, #20
 8010dd0:	3312      	adds	r3, #18
 8010dd2:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010dd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010dd8:	b2db      	uxtb	r3, r3
 8010dda:	3b11      	subs	r3, #17
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010de2:	4b7a      	ldr	r3, [pc, #488]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010de4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010de8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8010dec:	4611      	mov	r1, r2
 8010dee:	4618      	mov	r0, r3
 8010df0:	f006 fb0d 	bl	801740e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010df4:	4b75      	ldr	r3, [pc, #468]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010df6:	2202      	movs	r2, #2
 8010df8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010dfc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010e00:	4618      	mov	r0, r3
 8010e02:	f005 f80d 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f000 82d2 	beq.w	80113b2 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010e0e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010e12:	4619      	mov	r1, r3
 8010e14:	2000      	movs	r0, #0
 8010e16:	f004 ff77 	bl	8015d08 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010e1a:	e2ca      	b.n	80113b2 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010e1c:	2001      	movs	r0, #1
 8010e1e:	f004 ffff 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f000 82c3 	beq.w	80113b0 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010e2a:	2101      	movs	r1, #1
 8010e2c:	2007      	movs	r0, #7
 8010e2e:	f004 ff6b 	bl	8015d08 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8010e32:	e2bd      	b.n	80113b0 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010e34:	4b66      	ldr	r3, [pc, #408]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010e36:	2201      	movs	r2, #1
 8010e38:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e3c:	4b63      	ldr	r3, [pc, #396]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010e3e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010e42:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010e46:	4b62      	ldr	r3, [pc, #392]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010e48:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010e4c:	b25b      	sxtb	r3, r3
 8010e4e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010e52:	230d      	movs	r3, #13
 8010e54:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010e58:	4b5c      	ldr	r3, [pc, #368]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010e5a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d002      	beq.n	8010e68 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010e62:	230e      	movs	r3, #14
 8010e64:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e68:	4b58      	ldr	r3, [pc, #352]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010e6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e6e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8010e72:	4611      	mov	r1, r2
 8010e74:	4618      	mov	r0, r3
 8010e76:	f006 fa78 	bl	801736a <RegionGetPhyParam>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8010e7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010e82:	3b0d      	subs	r3, #13
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	b21b      	sxth	r3, r3
 8010e88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010e8c:	b21a      	sxth	r2, r3
 8010e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e90:	b21b      	sxth	r3, r3
 8010e92:	429a      	cmp	r2, r3
 8010e94:	dc03      	bgt.n	8010e9e <ProcessRadioRxDone+0x3f6>
 8010e96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010e9a:	2b0b      	cmp	r3, #11
 8010e9c:	d806      	bhi.n	8010eac <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e9e:	4b4c      	ldr	r3, [pc, #304]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010ea0:	2201      	movs	r2, #1
 8010ea2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010ea6:	f7ff fdd9 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8010eaa:	e2a1      	b.n	80113f0 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 8010eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 8010eb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010ebc:	4b45      	ldr	r3, [pc, #276]	; (8010fd4 <ProcessRadioRxDone+0x52c>)
 8010ebe:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010ec0:	23ff      	movs	r3, #255	; 0xff
 8010ec2:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8010ec6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f005 ffd0 	bl	8016e70 <LoRaMacParserData>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d006      	beq.n	8010ee4 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010ed6:	4b3e      	ldr	r3, [pc, #248]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010ed8:	2201      	movs	r2, #1
 8010eda:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010ede:	f7ff fdbd 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8010ee2:	e285      	b.n	80113f0 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8010ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee6:	4a3a      	ldr	r2, [pc, #232]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010ee8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8010eec:	f107 020e 	add.w	r2, r7, #14
 8010ef0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f002 fc6b 	bl	80137d2 <DetermineFrameType>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d006      	beq.n	8010f10 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010f02:	4b33      	ldr	r3, [pc, #204]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010f04:	2201      	movs	r2, #1
 8010f06:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8010f0a:	f7ff fda7 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8010f0e:	e26f      	b.n	80113f0 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8010f10:	2300      	movs	r3, #0
 8010f12:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8010f20:	e04f      	b.n	8010fc2 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010f22:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010f26:	4929      	ldr	r1, [pc, #164]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010f28:	4613      	mov	r3, r2
 8010f2a:	005b      	lsls	r3, r3, #1
 8010f2c:	4413      	add	r3, r2
 8010f2e:	011b      	lsls	r3, r3, #4
 8010f30:	440b      	add	r3, r1
 8010f32:	33ec      	adds	r3, #236	; 0xec
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d13d      	bne.n	8010fb8 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8010f3c:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010f40:	4922      	ldr	r1, [pc, #136]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010f42:	4613      	mov	r3, r2
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	4413      	add	r3, r2
 8010f48:	011b      	lsls	r3, r3, #4
 8010f4a:	440b      	add	r3, r1
 8010f4c:	33e9      	adds	r3, #233	; 0xe9
 8010f4e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d031      	beq.n	8010fb8 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 8010f54:	2301      	movs	r3, #1
 8010f56:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8010f5a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010f5e:	491b      	ldr	r1, [pc, #108]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010f60:	4613      	mov	r3, r2
 8010f62:	005b      	lsls	r3, r3, #1
 8010f64:	4413      	add	r3, r2
 8010f66:	011b      	lsls	r3, r3, #4
 8010f68:	440b      	add	r3, r1
 8010f6a:	33ea      	adds	r3, #234	; 0xea
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8010f72:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010f76:	4915      	ldr	r1, [pc, #84]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010f78:	4613      	mov	r3, r2
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	4413      	add	r3, r2
 8010f7e:	011b      	lsls	r3, r3, #4
 8010f80:	440b      	add	r3, r1
 8010f82:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8010f8c:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8010f90:	490e      	ldr	r1, [pc, #56]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010f92:	4613      	mov	r3, r2
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	4413      	add	r3, r2
 8010f98:	011b      	lsls	r3, r3, #4
 8010f9a:	440b      	add	r3, r1
 8010f9c:	33ec      	adds	r3, #236	; 0xec
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010fa4:	4b09      	ldr	r3, [pc, #36]	; (8010fcc <ProcessRadioRxDone+0x524>)
 8010fa6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010faa:	2b02      	cmp	r3, #2
 8010fac:	d114      	bne.n	8010fd8 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010fae:	4b08      	ldr	r3, [pc, #32]	; (8010fd0 <ProcessRadioRxDone+0x528>)
 8010fb0:	2203      	movs	r2, #3
 8010fb2:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 8010fb6:	e00f      	b.n	8010fd8 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010fb8:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8010fc2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d0ab      	beq.n	8010f22 <ProcessRadioRxDone+0x47a>
 8010fca:	e006      	b.n	8010fda <ProcessRadioRxDone+0x532>
 8010fcc:	20000e90 	.word	0x20000e90
 8010fd0:	20000988 	.word	0x20000988
 8010fd4:	20000bc0 	.word	0x20000bc0
                    break;
 8010fd8:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010fda:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d117      	bne.n	8011012 <ProcessRadioRxDone+0x56a>
 8010fe2:	7bbb      	ldrb	r3, [r7, #14]
 8010fe4:	2b03      	cmp	r3, #3
 8010fe6:	d10d      	bne.n	8011004 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8010fe8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010fec:	f003 0320 	and.w	r3, r3, #32
 8010ff0:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8010ff6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ffe:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011000:	2b00      	cmp	r3, #0
 8011002:	d006      	beq.n	8011012 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011004:	4bb3      	ldr	r3, [pc, #716]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011006:	2201      	movs	r2, #1
 8011008:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801100c:	f7ff fd26 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8011010:	e1ee      	b.n	80113f0 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011012:	2315      	movs	r3, #21
 8011014:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011018:	4baf      	ldr	r3, [pc, #700]	; (80112d8 <ProcessRadioRxDone+0x830>)
 801101a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801101e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f006 f9a0 	bl	801736a <RegionGetPhyParam>
 801102a:	4603      	mov	r3, r0
 801102c:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 801102e:	7bb9      	ldrb	r1, [r7, #14]
 8011030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011032:	b29b      	uxth	r3, r3
 8011034:	4da8      	ldr	r5, [pc, #672]	; (80112d8 <ProcessRadioRxDone+0x830>)
 8011036:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801103a:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 801103e:	f107 0210 	add.w	r2, r7, #16
 8011042:	9202      	str	r2, [sp, #8]
 8011044:	f107 020f 	add.w	r2, r7, #15
 8011048:	9201      	str	r2, [sp, #4]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8011050:	4622      	mov	r2, r4
 8011052:	f000 fe8d 	bl	8011d70 <GetFCntDown>
 8011056:	4603      	mov	r3, r0
 8011058:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801105c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011060:	2b00      	cmp	r3, #0
 8011062:	d035      	beq.n	80110d0 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011064:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011068:	2b07      	cmp	r3, #7
 801106a:	d119      	bne.n	80110a0 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 801106c:	4b99      	ldr	r3, [pc, #612]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801106e:	2208      	movs	r2, #8
 8011070:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8011074:	4b98      	ldr	r3, [pc, #608]	; (80112d8 <ProcessRadioRxDone+0x830>)
 8011076:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 801107a:	2b00      	cmp	r3, #0
 801107c:	d11d      	bne.n	80110ba <ProcessRadioRxDone+0x612>
 801107e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011082:	f023 031f 	bic.w	r3, r3, #31
 8011086:	b2db      	uxtb	r3, r3
 8011088:	2ba0      	cmp	r3, #160	; 0xa0
 801108a:	d116      	bne.n	80110ba <ProcessRadioRxDone+0x612>
 801108c:	4b92      	ldr	r3, [pc, #584]	; (80112d8 <ProcessRadioRxDone+0x830>)
 801108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011092:	429a      	cmp	r2, r3
 8011094:	d111      	bne.n	80110ba <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 8011096:	4b90      	ldr	r3, [pc, #576]	; (80112d8 <ProcessRadioRxDone+0x830>)
 8011098:	2201      	movs	r2, #1
 801109a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 801109e:	e00c      	b.n	80110ba <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80110a0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80110a4:	2b08      	cmp	r3, #8
 80110a6:	d104      	bne.n	80110b2 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80110a8:	4b8a      	ldr	r3, [pc, #552]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80110aa:	220a      	movs	r2, #10
 80110ac:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 80110b0:	e003      	b.n	80110ba <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110b2:	4b88      	ldr	r3, [pc, #544]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	4a85      	ldr	r2, [pc, #532]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80110be:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	4a83      	ldr	r2, [pc, #524]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80110c6:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 80110ca:	f7ff fcc7 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 80110ce:	e18f      	b.n	80113f0 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80110d0:	7bfa      	ldrb	r2, [r7, #15]
 80110d2:	6939      	ldr	r1, [r7, #16]
 80110d4:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80110d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80110dc:	9300      	str	r3, [sp, #0]
 80110de:	460b      	mov	r3, r1
 80110e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80110e4:	f005 fd24 	bl	8016b30 <LoRaMacCryptoUnsecureMessage>
 80110e8:	4603      	mov	r3, r0
 80110ea:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80110ee:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d00f      	beq.n	8011116 <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80110f6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80110fa:	2b02      	cmp	r3, #2
 80110fc:	d104      	bne.n	8011108 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80110fe:	4b75      	ldr	r3, [pc, #468]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011100:	220b      	movs	r2, #11
 8011102:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011106:	e003      	b.n	8011110 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011108:	4b72      	ldr	r3, [pc, #456]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801110a:	220c      	movs	r2, #12
 801110c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8011110:	f7ff fca4 	bl	8010a5c <PrepareRxDoneAbort>
                return;
 8011114:	e16c      	b.n	80113f0 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011116:	4b6f      	ldr	r3, [pc, #444]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011118:	2200      	movs	r2, #0
 801111a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 801111e:	4a6d      	ldr	r2, [pc, #436]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011120:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011124:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 8011128:	4b6a      	ldr	r3, [pc, #424]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801112a:	2200      	movs	r2, #0
 801112c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 8011130:	4b68      	ldr	r3, [pc, #416]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011132:	2200      	movs	r2, #0
 8011134:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	4a66      	ldr	r2, [pc, #408]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801113c:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	4a64      	ldr	r2, [pc, #400]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011144:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011148:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801114c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011150:	b2db      	uxtb	r3, r3
 8011152:	2b00      	cmp	r3, #0
 8011154:	bf14      	ite	ne
 8011156:	2301      	movne	r3, #1
 8011158:	2300      	moveq	r3, #0
 801115a:	b2da      	uxtb	r2, r3
 801115c:	4b5d      	ldr	r3, [pc, #372]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801115e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011162:	4b5c      	ldr	r3, [pc, #368]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011164:	2200      	movs	r2, #0
 8011166:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801116a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801116e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011172:	b2db      	uxtb	r3, r3
 8011174:	2b00      	cmp	r3, #0
 8011176:	bf14      	ite	ne
 8011178:	2301      	movne	r3, #1
 801117a:	2300      	moveq	r3, #0
 801117c:	b2da      	uxtb	r2, r3
 801117e:	4b55      	ldr	r3, [pc, #340]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011180:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011184:	4b53      	ldr	r3, [pc, #332]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011186:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801118a:	2b00      	cmp	r3, #0
 801118c:	d004      	beq.n	8011198 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801118e:	4b51      	ldr	r3, [pc, #324]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011190:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011194:	2b01      	cmp	r3, #1
 8011196:	d102      	bne.n	801119e <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011198:	4b4f      	ldr	r3, [pc, #316]	; (80112d8 <ProcessRadioRxDone+0x830>)
 801119a:	2200      	movs	r2, #0
 801119c:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801119e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d104      	bne.n	80111b0 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 80111a6:	4b4b      	ldr	r3, [pc, #300]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80111a8:	2202      	movs	r2, #2
 80111aa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80111ae:	e01f      	b.n	80111f0 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80111b0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80111b4:	f023 031f 	bic.w	r3, r3, #31
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	2ba0      	cmp	r3, #160	; 0xa0
 80111bc:	d110      	bne.n	80111e0 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80111be:	4b46      	ldr	r3, [pc, #280]	; (80112d8 <ProcessRadioRxDone+0x830>)
 80111c0:	2201      	movs	r2, #1
 80111c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80111c6:	4b44      	ldr	r3, [pc, #272]	; (80112d8 <ProcessRadioRxDone+0x830>)
 80111c8:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d102      	bne.n	80111d6 <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80111d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80111d2:	4a41      	ldr	r2, [pc, #260]	; (80112d8 <ProcessRadioRxDone+0x830>)
 80111d4:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80111d6:	4b3f      	ldr	r3, [pc, #252]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80111d8:	2201      	movs	r2, #1
 80111da:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 80111de:	e007      	b.n	80111f0 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80111e0:	4b3d      	ldr	r3, [pc, #244]	; (80112d8 <ProcessRadioRxDone+0x830>)
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80111e8:	4b3a      	ldr	r3, [pc, #232]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 80111f0:	4b39      	ldr	r3, [pc, #228]	; (80112d8 <ProcessRadioRxDone+0x830>)
 80111f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d106      	bne.n	8011208 <ProcessRadioRxDone+0x760>
 80111fa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80111fe:	f003 0310 	and.w	r3, r3, #16
 8011202:	b2db      	uxtb	r3, r3
 8011204:	2b00      	cmp	r3, #0
 8011206:	d008      	beq.n	801121a <ProcessRadioRxDone+0x772>
 8011208:	4b33      	ldr	r3, [pc, #204]	; (80112d8 <ProcessRadioRxDone+0x830>)
 801120a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801120e:	2b00      	cmp	r3, #0
 8011210:	d103      	bne.n	801121a <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8011212:	4b30      	ldr	r3, [pc, #192]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011214:	2201      	movs	r2, #1
 8011216:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801121a:	4b2e      	ldr	r3, [pc, #184]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801121c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011220:	4a2c      	ldr	r2, [pc, #176]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011222:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 8011226:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 801122a:	4618      	mov	r0, r3
 801122c:	f001 fef2 	bl	8013014 <RemoveMacCommands>

            switch( fType )
 8011230:	7bbb      	ldrb	r3, [r7, #14]
 8011232:	2b03      	cmp	r3, #3
 8011234:	d878      	bhi.n	8011328 <ProcessRadioRxDone+0x880>
 8011236:	a201      	add	r2, pc, #4	; (adr r2, 801123c <ProcessRadioRxDone+0x794>)
 8011238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123c:	0801124d 	.word	0x0801124d
 8011240:	0801129d 	.word	0x0801129d
 8011244:	080112dd 	.word	0x080112dd
 8011248:	08011303 	.word	0x08011303
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801124c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011250:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011254:	b2db      	uxtb	r3, r3
 8011256:	461c      	mov	r4, r3
 8011258:	4b1e      	ldr	r3, [pc, #120]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801125a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801125e:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011262:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011266:	f102 0010 	add.w	r0, r2, #16
 801126a:	9300      	str	r3, [sp, #0]
 801126c:	460b      	mov	r3, r1
 801126e:	4622      	mov	r2, r4
 8011270:	2100      	movs	r1, #0
 8011272:	f000 fef7 	bl	8012064 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011276:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801127a:	4b16      	ldr	r3, [pc, #88]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801127c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011282:	4a14      	ldr	r2, [pc, #80]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011284:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011288:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801128c:	4b11      	ldr	r3, [pc, #68]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 801128e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011292:	4b10      	ldr	r3, [pc, #64]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 8011294:	2201      	movs	r2, #1
 8011296:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801129a:	e04c      	b.n	8011336 <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801129c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80112a0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	461c      	mov	r4, r3
 80112a8:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80112aa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80112ae:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80112b2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80112b6:	f102 0010 	add.w	r0, r2, #16
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	460b      	mov	r3, r1
 80112be:	4622      	mov	r2, r4
 80112c0:	2100      	movs	r1, #0
 80112c2:	f000 fecf 	bl	8012064 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80112c6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80112ca:	4b02      	ldr	r3, [pc, #8]	; (80112d4 <ProcessRadioRxDone+0x82c>)
 80112cc:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 80112d0:	e031      	b.n	8011336 <ProcessRadioRxDone+0x88e>
 80112d2:	bf00      	nop
 80112d4:	20000988 	.word	0x20000988
 80112d8:	20000e90 	.word	0x20000e90
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80112dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80112de:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80112e2:	4b45      	ldr	r3, [pc, #276]	; (80113f8 <ProcessRadioRxDone+0x950>)
 80112e4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80112e8:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80112ec:	9300      	str	r3, [sp, #0]
 80112ee:	460b      	mov	r3, r1
 80112f0:	2100      	movs	r1, #0
 80112f2:	f000 feb7 	bl	8012064 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80112f6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80112fa:	4b3f      	ldr	r3, [pc, #252]	; (80113f8 <ProcessRadioRxDone+0x950>)
 80112fc:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011300:	e019      	b.n	8011336 <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011302:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8011306:	4b3c      	ldr	r3, [pc, #240]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011308:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801130c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801130e:	4a3a      	ldr	r2, [pc, #232]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011310:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011314:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011318:	4b37      	ldr	r3, [pc, #220]	; (80113f8 <ProcessRadioRxDone+0x950>)
 801131a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 801131e:	4b36      	ldr	r3, [pc, #216]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011320:	2201      	movs	r2, #1
 8011322:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8011326:	e006      	b.n	8011336 <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011328:	4b33      	ldr	r3, [pc, #204]	; (80113f8 <ProcessRadioRxDone+0x950>)
 801132a:	2201      	movs	r2, #1
 801132c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8011330:	f7ff fb94 	bl	8010a5c <PrepareRxDoneAbort>
                    break;
 8011334:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011336:	4a30      	ldr	r2, [pc, #192]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011338:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801133c:	f043 0302 	orr.w	r3, r3, #2
 8011340:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 8011344:	e035      	b.n	80113b2 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8011346:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801134a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801134e:	18d1      	adds	r1, r2, r3
 8011350:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011354:	b29b      	uxth	r3, r3
 8011356:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	b29b      	uxth	r3, r3
 801135e:	461a      	mov	r2, r3
 8011360:	4826      	ldr	r0, [pc, #152]	; (80113fc <ProcessRadioRxDone+0x954>)
 8011362:	f008 fb1c 	bl	801999e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8011366:	4b24      	ldr	r3, [pc, #144]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011368:	2203      	movs	r2, #3
 801136a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801136e:	4b22      	ldr	r3, [pc, #136]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011370:	2200      	movs	r2, #0
 8011372:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8011376:	4b20      	ldr	r3, [pc, #128]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011378:	4a20      	ldr	r2, [pc, #128]	; (80113fc <ProcessRadioRxDone+0x954>)
 801137a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 801137e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011382:	b2da      	uxtb	r2, r3
 8011384:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011388:	1ad3      	subs	r3, r2, r3
 801138a:	b2da      	uxtb	r2, r3
 801138c:	4b1a      	ldr	r3, [pc, #104]	; (80113f8 <ProcessRadioRxDone+0x950>)
 801138e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011392:	4a19      	ldr	r2, [pc, #100]	; (80113f8 <ProcessRadioRxDone+0x950>)
 8011394:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011398:	f043 0302 	orr.w	r3, r3, #2
 801139c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80113a0:	e007      	b.n	80113b2 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80113a2:	4b15      	ldr	r3, [pc, #84]	; (80113f8 <ProcessRadioRxDone+0x950>)
 80113a4:	2201      	movs	r2, #1
 80113a6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 80113aa:	f7ff fb57 	bl	8010a5c <PrepareRxDoneAbort>
            break;
 80113ae:	e000      	b.n	80113b2 <ProcessRadioRxDone+0x90a>
            break;
 80113b0:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 80113b2:	4b11      	ldr	r3, [pc, #68]	; (80113f8 <ProcessRadioRxDone+0x950>)
 80113b4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d008      	beq.n	80113ce <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80113bc:	4b0e      	ldr	r3, [pc, #56]	; (80113f8 <ProcessRadioRxDone+0x950>)
 80113be:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00b      	beq.n	80113de <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 80113c6:	2000      	movs	r0, #0
 80113c8:	f000 fcaa 	bl	8011d20 <OnAckTimeoutTimerEvent>
 80113cc:	e007      	b.n	80113de <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80113ce:	4b0c      	ldr	r3, [pc, #48]	; (8011400 <ProcessRadioRxDone+0x958>)
 80113d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113d4:	2b02      	cmp	r3, #2
 80113d6:	d102      	bne.n	80113de <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 80113d8:	2000      	movs	r0, #0
 80113da:	f000 fca1 	bl	8011d20 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80113de:	4a06      	ldr	r2, [pc, #24]	; (80113f8 <ProcessRadioRxDone+0x950>)
 80113e0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80113e4:	f043 0310 	orr.w	r3, r3, #16
 80113e8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80113ec:	f7ff fa6c 	bl	80108c8 <UpdateRxSlotIdleState>
}
 80113f0:	3798      	adds	r7, #152	; 0x98
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bdb0      	pop	{r4, r5, r7, pc}
 80113f6:	bf00      	nop
 80113f8:	20000988 	.word	0x20000988
 80113fc:	20000bc0 	.word	0x20000bc0
 8011400:	20000e90 	.word	0x20000e90

08011404 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011404:	b580      	push	{r7, lr}
 8011406:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011408:	4b11      	ldr	r3, [pc, #68]	; (8011450 <ProcessRadioTxTimeout+0x4c>)
 801140a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801140e:	2b02      	cmp	r3, #2
 8011410:	d002      	beq.n	8011418 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011412:	4b10      	ldr	r3, [pc, #64]	; (8011454 <ProcessRadioTxTimeout+0x50>)
 8011414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011416:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011418:	f7ff fa56 	bl	80108c8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801141c:	4b0e      	ldr	r3, [pc, #56]	; (8011458 <ProcessRadioTxTimeout+0x54>)
 801141e:	2202      	movs	r2, #2
 8011420:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011424:	2002      	movs	r0, #2
 8011426:	f004 fcc7 	bl	8015db8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801142a:	4b0b      	ldr	r3, [pc, #44]	; (8011458 <ProcessRadioTxTimeout+0x54>)
 801142c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011430:	2b00      	cmp	r3, #0
 8011432:	d003      	beq.n	801143c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8011434:	4b08      	ldr	r3, [pc, #32]	; (8011458 <ProcessRadioTxTimeout+0x54>)
 8011436:	2201      	movs	r2, #1
 8011438:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801143c:	4a06      	ldr	r2, [pc, #24]	; (8011458 <ProcessRadioTxTimeout+0x54>)
 801143e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011442:	f043 0310 	orr.w	r3, r3, #16
 8011446:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 801144a:	bf00      	nop
 801144c:	bd80      	pop	{r7, pc}
 801144e:	bf00      	nop
 8011450:	20000e90 	.word	0x20000e90
 8011454:	0801f578 	.word	0x0801f578
 8011458:	20000988 	.word	0x20000988

0801145c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	4603      	mov	r3, r0
 8011464:	460a      	mov	r2, r1
 8011466:	71fb      	strb	r3, [r7, #7]
 8011468:	4613      	mov	r3, r2
 801146a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 801146c:	2300      	movs	r3, #0
 801146e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011470:	4b40      	ldr	r3, [pc, #256]	; (8011574 <HandleRadioRxErrorTimeout+0x118>)
 8011472:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011476:	2b02      	cmp	r3, #2
 8011478:	d002      	beq.n	8011480 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 801147a:	4b3f      	ldr	r3, [pc, #252]	; (8011578 <HandleRadioRxErrorTimeout+0x11c>)
 801147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801147e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011480:	f003 ffdf 	bl	8015442 <LoRaMacClassBIsBeaconExpected>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d007      	beq.n	801149a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 801148a:	2002      	movs	r0, #2
 801148c:	f003 ff8d 	bl	80153aa <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011490:	2000      	movs	r0, #0
 8011492:	f003 ffaf 	bl	80153f4 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011496:	2301      	movs	r3, #1
 8011498:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801149a:	4b36      	ldr	r3, [pc, #216]	; (8011574 <HandleRadioRxErrorTimeout+0x118>)
 801149c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d119      	bne.n	80114d8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80114a4:	f003 ffd4 	bl	8015450 <LoRaMacClassBIsPingExpected>
 80114a8:	4603      	mov	r3, r0
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d007      	beq.n	80114be <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80114ae:	2000      	movs	r0, #0
 80114b0:	f003 ff85 	bl	80153be <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80114b4:	2000      	movs	r0, #0
 80114b6:	f003 ffa6 	bl	8015406 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80114ba:	2301      	movs	r3, #1
 80114bc:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80114be:	f003 ffce 	bl	801545e <LoRaMacClassBIsMulticastExpected>
 80114c2:	4603      	mov	r3, r0
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d007      	beq.n	80114d8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80114c8:	2000      	movs	r0, #0
 80114ca:	f003 ff82 	bl	80153d2 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80114ce:	2000      	movs	r0, #0
 80114d0:	f003 ffa2 	bl	8015418 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80114d4:	2301      	movs	r3, #1
 80114d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80114d8:	7bfb      	ldrb	r3, [r7, #15]
 80114da:	f083 0301 	eor.w	r3, r3, #1
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d040      	beq.n	8011566 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80114e4:	4b25      	ldr	r3, [pc, #148]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 80114e6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d122      	bne.n	8011534 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80114ee:	4b23      	ldr	r3, [pc, #140]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 80114f0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d003      	beq.n	8011500 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80114f8:	4a20      	ldr	r2, [pc, #128]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 80114fa:	79fb      	ldrb	r3, [r7, #7]
 80114fc:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011500:	79fb      	ldrb	r3, [r7, #7]
 8011502:	4618      	mov	r0, r3
 8011504:	f004 fc58 	bl	8015db8 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011508:	4b1a      	ldr	r3, [pc, #104]	; (8011574 <HandleRadioRxErrorTimeout+0x118>)
 801150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801150c:	4618      	mov	r0, r3
 801150e:	f00c fd0d 	bl	801df2c <UTIL_TIMER_GetElapsedTime>
 8011512:	4602      	mov	r2, r0
 8011514:	4b19      	ldr	r3, [pc, #100]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 8011516:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801151a:	429a      	cmp	r2, r3
 801151c:	d323      	bcc.n	8011566 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801151e:	4818      	ldr	r0, [pc, #96]	; (8011580 <HandleRadioRxErrorTimeout+0x124>)
 8011520:	f00c fbd8 	bl	801dcd4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011524:	4a15      	ldr	r2, [pc, #84]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 8011526:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801152a:	f043 0310 	orr.w	r3, r3, #16
 801152e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011532:	e018      	b.n	8011566 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011534:	4b11      	ldr	r3, [pc, #68]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 8011536:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801153a:	2b00      	cmp	r3, #0
 801153c:	d003      	beq.n	8011546 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801153e:	4a0f      	ldr	r2, [pc, #60]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 8011540:	79bb      	ldrb	r3, [r7, #6]
 8011542:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011546:	79bb      	ldrb	r3, [r7, #6]
 8011548:	4618      	mov	r0, r3
 801154a:	f004 fc35 	bl	8015db8 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801154e:	4b09      	ldr	r3, [pc, #36]	; (8011574 <HandleRadioRxErrorTimeout+0x118>)
 8011550:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011554:	2b02      	cmp	r3, #2
 8011556:	d006      	beq.n	8011566 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011558:	4a08      	ldr	r2, [pc, #32]	; (801157c <HandleRadioRxErrorTimeout+0x120>)
 801155a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801155e:	f043 0310 	orr.w	r3, r3, #16
 8011562:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011566:	f7ff f9af 	bl	80108c8 <UpdateRxSlotIdleState>
}
 801156a:	bf00      	nop
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
 8011572:	bf00      	nop
 8011574:	20000e90 	.word	0x20000e90
 8011578:	0801f578 	.word	0x0801f578
 801157c:	20000988 	.word	0x20000988
 8011580:	20000d20 	.word	0x20000d20

08011584 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011588:	2106      	movs	r1, #6
 801158a:	2005      	movs	r0, #5
 801158c:	f7ff ff66 	bl	801145c <HandleRadioRxErrorTimeout>
}
 8011590:	bf00      	nop
 8011592:	bd80      	pop	{r7, pc}

08011594 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011598:	2104      	movs	r1, #4
 801159a:	2003      	movs	r0, #3
 801159c:	f7ff ff5e 	bl	801145c <HandleRadioRxErrorTimeout>
}
 80115a0:	bf00      	nop
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115aa:	f3ef 8310 	mrs	r3, PRIMASK
 80115ae:	607b      	str	r3, [r7, #4]
  return(result);
 80115b0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80115b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80115b4:	b672      	cpsid	i
}
 80115b6:	bf00      	nop
    events = LoRaMacRadioEvents;
 80115b8:	4b1d      	ldr	r3, [pc, #116]	; (8011630 <LoRaMacHandleIrqEvents+0x8c>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80115be:	4b1c      	ldr	r3, [pc, #112]	; (8011630 <LoRaMacHandleIrqEvents+0x8c>)
 80115c0:	2200      	movs	r2, #0
 80115c2:	601a      	str	r2, [r3, #0]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	f383 8810 	msr	PRIMASK, r3
}
 80115ce:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d027      	beq.n	8011626 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80115d6:	783b      	ldrb	r3, [r7, #0]
 80115d8:	f003 0310 	and.w	r3, r3, #16
 80115dc:	b2db      	uxtb	r3, r3
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d001      	beq.n	80115e6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80115e2:	f7ff f989 	bl	80108f8 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80115e6:	783b      	ldrb	r3, [r7, #0]
 80115e8:	f003 0308 	and.w	r3, r3, #8
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d001      	beq.n	80115f6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80115f2:	f7ff fa59 	bl	8010aa8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80115f6:	783b      	ldrb	r3, [r7, #0]
 80115f8:	f003 0304 	and.w	r3, r3, #4
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011602:	f7ff feff 	bl	8011404 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011606:	783b      	ldrb	r3, [r7, #0]
 8011608:	f003 0302 	and.w	r3, r3, #2
 801160c:	b2db      	uxtb	r3, r3
 801160e:	2b00      	cmp	r3, #0
 8011610:	d001      	beq.n	8011616 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011612:	f7ff ffb7 	bl	8011584 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011616:	783b      	ldrb	r3, [r7, #0]
 8011618:	f003 0301 	and.w	r3, r3, #1
 801161c:	b2db      	uxtb	r3, r3
 801161e:	2b00      	cmp	r3, #0
 8011620:	d001      	beq.n	8011626 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011622:	f7ff ffb7 	bl	8011594 <ProcessRadioRxTimeout>
        }
    }
}
 8011626:	bf00      	nop
 8011628:	3710      	adds	r7, #16
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
 801162e:	bf00      	nop
 8011630:	200015f8 	.word	0x200015f8

08011634 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011638:	4b0b      	ldr	r3, [pc, #44]	; (8011668 <LoRaMacIsBusy+0x34>)
 801163a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801163e:	2b01      	cmp	r3, #1
 8011640:	d101      	bne.n	8011646 <LoRaMacIsBusy+0x12>
    {
        return false;
 8011642:	2300      	movs	r3, #0
 8011644:	e00c      	b.n	8011660 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011646:	4b08      	ldr	r3, [pc, #32]	; (8011668 <LoRaMacIsBusy+0x34>)
 8011648:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801164c:	2b00      	cmp	r3, #0
 801164e:	d106      	bne.n	801165e <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011650:	4b05      	ldr	r3, [pc, #20]	; (8011668 <LoRaMacIsBusy+0x34>)
 8011652:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011656:	2b01      	cmp	r3, #1
 8011658:	d101      	bne.n	801165e <LoRaMacIsBusy+0x2a>
    {
        return false;
 801165a:	2300      	movs	r3, #0
 801165c:	e000      	b.n	8011660 <LoRaMacIsBusy+0x2c>
    }
    return true;
 801165e:	2301      	movs	r3, #1
}
 8011660:	4618      	mov	r0, r3
 8011662:	46bd      	mov	sp, r7
 8011664:	bc80      	pop	{r7}
 8011666:	4770      	bx	lr
 8011668:	20000988 	.word	0x20000988

0801166c <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 801166c:	b480      	push	{r7}
 801166e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011670:	4b05      	ldr	r3, [pc, #20]	; (8011688 <LoRaMacIsStopped+0x1c>)
 8011672:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011676:	2b01      	cmp	r3, #1
 8011678:	d101      	bne.n	801167e <LoRaMacIsStopped+0x12>
    {
        return true;
 801167a:	2301      	movs	r3, #1
 801167c:	e000      	b.n	8011680 <LoRaMacIsStopped+0x14>
    }
    return false;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	46bd      	mov	sp, r7
 8011684:	bc80      	pop	{r7}
 8011686:	4770      	bx	lr
 8011688:	20000988 	.word	0x20000988

0801168c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 801168c:	b480      	push	{r7}
 801168e:	b083      	sub	sp, #12
 8011690:	af00      	add	r7, sp, #0
 8011692:	4603      	mov	r3, r0
 8011694:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011696:	4a04      	ldr	r2, [pc, #16]	; (80116a8 <LoRaMacEnableRequests+0x1c>)
 8011698:	79fb      	ldrb	r3, [r7, #7]
 801169a:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 801169e:	bf00      	nop
 80116a0:	370c      	adds	r7, #12
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bc80      	pop	{r7}
 80116a6:	4770      	bx	lr
 80116a8:	20000988 	.word	0x20000988

080116ac <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80116b2:	4b2c      	ldr	r3, [pc, #176]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 80116b4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80116b8:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80116ba:	4b2a      	ldr	r3, [pc, #168]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 80116bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d14a      	bne.n	801175a <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80116c4:	4b27      	ldr	r3, [pc, #156]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 80116c6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80116ca:	f003 0301 	and.w	r3, r3, #1
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d006      	beq.n	80116e2 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80116d4:	4a23      	ldr	r2, [pc, #140]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 80116d6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80116da:	f36f 0300 	bfc	r3, #0, #1
 80116de:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80116e2:	4b20      	ldr	r3, [pc, #128]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 80116e4:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80116e8:	f003 0304 	and.w	r3, r3, #4
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d006      	beq.n	8011700 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80116f2:	4a1c      	ldr	r2, [pc, #112]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 80116f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80116f8:	f36f 0382 	bfc	r3, #2, #1
 80116fc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011700:	2001      	movs	r0, #1
 8011702:	f7ff ffc3 	bl	801168c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011706:	793b      	ldrb	r3, [r7, #4]
 8011708:	f003 0301 	and.w	r3, r3, #1
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	d005      	beq.n	801171e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011712:	4b14      	ldr	r3, [pc, #80]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 8011714:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	4813      	ldr	r0, [pc, #76]	; (8011768 <LoRaMacHandleRequestEvents+0xbc>)
 801171c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801171e:	793b      	ldrb	r3, [r7, #4]
 8011720:	f003 0304 	and.w	r3, r3, #4
 8011724:	b2db      	uxtb	r3, r3
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00e      	beq.n	8011748 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801172a:	4810      	ldr	r0, [pc, #64]	; (801176c <LoRaMacHandleRequestEvents+0xc0>)
 801172c:	f004 fb92 	bl	8015e54 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011730:	f004 fbe2 	bl	8015ef8 <LoRaMacConfirmQueueGetCnt>
 8011734:	4603      	mov	r3, r0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d006      	beq.n	8011748 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801173a:	4a0a      	ldr	r2, [pc, #40]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 801173c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011740:	f043 0304 	orr.w	r3, r3, #4
 8011744:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011748:	f003 fea7 	bl	801549a <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 801174c:	4a05      	ldr	r2, [pc, #20]	; (8011764 <LoRaMacHandleRequestEvents+0xb8>)
 801174e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011752:	f36f 1304 	bfc	r3, #4, #1
 8011756:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 801175a:	bf00      	nop
 801175c:	3708      	adds	r7, #8
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	20000988 	.word	0x20000988
 8011768:	20000dbc 	.word	0x20000dbc
 801176c:	20000dd0 	.word	0x20000dd0

08011770 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011770:	b580      	push	{r7, lr}
 8011772:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011774:	4b16      	ldr	r3, [pc, #88]	; (80117d0 <LoRaMacHandleIndicationEvents+0x60>)
 8011776:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801177a:	f003 0308 	and.w	r3, r3, #8
 801177e:	b2db      	uxtb	r3, r3
 8011780:	2b00      	cmp	r3, #0
 8011782:	d00d      	beq.n	80117a0 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011784:	4a12      	ldr	r2, [pc, #72]	; (80117d0 <LoRaMacHandleIndicationEvents+0x60>)
 8011786:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801178a:	f36f 03c3 	bfc	r3, #3, #1
 801178e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011792:	4b0f      	ldr	r3, [pc, #60]	; (80117d0 <LoRaMacHandleIndicationEvents+0x60>)
 8011794:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	490e      	ldr	r1, [pc, #56]	; (80117d4 <LoRaMacHandleIndicationEvents+0x64>)
 801179c:	480e      	ldr	r0, [pc, #56]	; (80117d8 <LoRaMacHandleIndicationEvents+0x68>)
 801179e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <LoRaMacHandleIndicationEvents+0x60>)
 80117a2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80117a6:	f003 0302 	and.w	r3, r3, #2
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d00d      	beq.n	80117cc <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80117b0:	4a07      	ldr	r2, [pc, #28]	; (80117d0 <LoRaMacHandleIndicationEvents+0x60>)
 80117b2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117b6:	f36f 0341 	bfc	r3, #1, #1
 80117ba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80117be:	4b04      	ldr	r3, [pc, #16]	; (80117d0 <LoRaMacHandleIndicationEvents+0x60>)
 80117c0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	4903      	ldr	r1, [pc, #12]	; (80117d4 <LoRaMacHandleIndicationEvents+0x64>)
 80117c8:	4804      	ldr	r0, [pc, #16]	; (80117dc <LoRaMacHandleIndicationEvents+0x6c>)
 80117ca:	4798      	blx	r3
    }
}
 80117cc:	bf00      	nop
 80117ce:	bd80      	pop	{r7, pc}
 80117d0:	20000988 	.word	0x20000988
 80117d4:	20000e04 	.word	0x20000e04
 80117d8:	20000de4 	.word	0x20000de4
 80117dc:	20000da0 	.word	0x20000da0

080117e0 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80117e6:	4b32      	ldr	r3, [pc, #200]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 80117e8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80117ec:	f003 0301 	and.w	r3, r3, #1
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d058      	beq.n	80118a8 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 80117f6:	2300      	movs	r3, #0
 80117f8:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 80117fa:	2300      	movs	r3, #0
 80117fc:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80117fe:	4b2c      	ldr	r3, [pc, #176]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 8011800:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011804:	2b00      	cmp	r3, #0
 8011806:	d004      	beq.n	8011812 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011808:	4b29      	ldr	r3, [pc, #164]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 801180a:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801180e:	2b03      	cmp	r3, #3
 8011810:	d104      	bne.n	801181c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011812:	f002 f82d 	bl	8013870 <CheckRetransUnconfirmedUplink>
 8011816:	4603      	mov	r3, r0
 8011818:	71fb      	strb	r3, [r7, #7]
 801181a:	e020      	b.n	801185e <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801181c:	4b24      	ldr	r3, [pc, #144]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 801181e:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011822:	2b01      	cmp	r3, #1
 8011824:	d11b      	bne.n	801185e <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011826:	4b22      	ldr	r3, [pc, #136]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 8011828:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 801182c:	2b00      	cmp	r3, #0
 801182e:	d014      	beq.n	801185a <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011830:	f002 f84a 	bl	80138c8 <CheckRetransConfirmedUplink>
 8011834:	4603      	mov	r3, r0
 8011836:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011838:	4b1e      	ldr	r3, [pc, #120]	; (80118b4 <LoRaMacHandleMcpsRequest+0xd4>)
 801183a:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 801183e:	2b00      	cmp	r3, #0
 8011840:	d10d      	bne.n	801185e <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011842:	79fb      	ldrb	r3, [r7, #7]
 8011844:	f083 0301 	eor.w	r3, r3, #1
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b00      	cmp	r3, #0
 801184c:	d002      	beq.n	8011854 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 801184e:	f002 f8cd 	bl	80139ec <AckTimeoutRetriesProcess>
 8011852:	e004      	b.n	801185e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011854:	f002 f908 	bl	8013a68 <AckTimeoutRetriesFinalize>
 8011858:	e001      	b.n	801185e <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 801185a:	2301      	movs	r3, #1
 801185c:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d00d      	beq.n	8011880 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011864:	4814      	ldr	r0, [pc, #80]	; (80118b8 <LoRaMacHandleMcpsRequest+0xd8>)
 8011866:	f00c fa35 	bl	801dcd4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801186a:	4b11      	ldr	r3, [pc, #68]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 801186c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011870:	f023 0320 	bic.w	r3, r3, #32
 8011874:	4a0e      	ldr	r2, [pc, #56]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 8011876:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 801187a:	f002 f847 	bl	801390c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801187e:	e013      	b.n	80118a8 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011880:	79bb      	ldrb	r3, [r7, #6]
 8011882:	f083 0301 	eor.w	r3, r3, #1
 8011886:	b2db      	uxtb	r3, r3
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00d      	beq.n	80118a8 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 801188c:	4a08      	ldr	r2, [pc, #32]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 801188e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011892:	f36f 1304 	bfc	r3, #4, #1
 8011896:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 801189a:	4b05      	ldr	r3, [pc, #20]	; (80118b0 <LoRaMacHandleMcpsRequest+0xd0>)
 801189c:	2200      	movs	r2, #0
 801189e:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 80118a2:	2000      	movs	r0, #0
 80118a4:	f000 f992 	bl	8011bcc <OnTxDelayedTimerEvent>
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	20000988 	.word	0x20000988
 80118b4:	20000e90 	.word	0x20000e90
 80118b8:	20000cf0 	.word	0x20000cf0

080118bc <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80118c0:	4b1b      	ldr	r3, [pc, #108]	; (8011930 <LoRaMacHandleMlmeRequest+0x74>)
 80118c2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80118c6:	f003 0304 	and.w	r3, r3, #4
 80118ca:	b2db      	uxtb	r3, r3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d02c      	beq.n	801192a <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80118d0:	2001      	movs	r0, #1
 80118d2:	f004 faa5 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d012      	beq.n	8011902 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80118dc:	2001      	movs	r0, #1
 80118de:	f004 fa41 	bl	8015d64 <LoRaMacConfirmQueueGetStatus>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d103      	bne.n	80118f0 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80118e8:	4b11      	ldr	r3, [pc, #68]	; (8011930 <LoRaMacHandleMlmeRequest+0x74>)
 80118ea:	2200      	movs	r2, #0
 80118ec:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80118f0:	4b0f      	ldr	r3, [pc, #60]	; (8011930 <LoRaMacHandleMlmeRequest+0x74>)
 80118f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118f6:	f023 0302 	bic.w	r3, r3, #2
 80118fa:	4a0d      	ldr	r2, [pc, #52]	; (8011930 <LoRaMacHandleMlmeRequest+0x74>)
 80118fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011900:	e013      	b.n	801192a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011902:	2006      	movs	r0, #6
 8011904:	f004 fa8c 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d105      	bne.n	801191a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 801190e:	2007      	movs	r0, #7
 8011910:	f004 fa86 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 8011914:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011916:	2b00      	cmp	r3, #0
 8011918:	d007      	beq.n	801192a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801191a:	4b05      	ldr	r3, [pc, #20]	; (8011930 <LoRaMacHandleMlmeRequest+0x74>)
 801191c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011920:	f023 0302 	bic.w	r3, r3, #2
 8011924:	4a02      	ldr	r2, [pc, #8]	; (8011930 <LoRaMacHandleMlmeRequest+0x74>)
 8011926:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 801192a:	bf00      	nop
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	20000988 	.word	0x20000988

08011934 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011938:	200c      	movs	r0, #12
 801193a:	f004 fa71 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	d019      	beq.n	8011978 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011944:	4b0e      	ldr	r3, [pc, #56]	; (8011980 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011946:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801194a:	f003 0301 	and.w	r3, r3, #1
 801194e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011950:	2b00      	cmp	r3, #0
 8011952:	d111      	bne.n	8011978 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011954:	4b0a      	ldr	r3, [pc, #40]	; (8011980 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011956:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801195a:	f003 0304 	and.w	r3, r3, #4
 801195e:	b2db      	uxtb	r3, r3
 8011960:	2b00      	cmp	r3, #0
 8011962:	d009      	beq.n	8011978 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011964:	4b06      	ldr	r3, [pc, #24]	; (8011980 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011966:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801196a:	f023 0302 	bic.w	r3, r3, #2
 801196e:	4a04      	ldr	r2, [pc, #16]	; (8011980 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011970:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011974:	2301      	movs	r3, #1
 8011976:	e000      	b.n	801197a <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011978:	2300      	movs	r3, #0
}
 801197a:	4618      	mov	r0, r3
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	20000988 	.word	0x20000988

08011984 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011984:	b480      	push	{r7}
 8011986:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011988:	4b0d      	ldr	r3, [pc, #52]	; (80119c0 <LoRaMacCheckForRxAbort+0x3c>)
 801198a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011992:	2b00      	cmp	r3, #0
 8011994:	d00f      	beq.n	80119b6 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011996:	4b0a      	ldr	r3, [pc, #40]	; (80119c0 <LoRaMacCheckForRxAbort+0x3c>)
 8011998:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801199c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80119a0:	4a07      	ldr	r2, [pc, #28]	; (80119c0 <LoRaMacCheckForRxAbort+0x3c>)
 80119a2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80119a6:	4b06      	ldr	r3, [pc, #24]	; (80119c0 <LoRaMacCheckForRxAbort+0x3c>)
 80119a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119ac:	f023 0302 	bic.w	r3, r3, #2
 80119b0:	4a03      	ldr	r2, [pc, #12]	; (80119c0 <LoRaMacCheckForRxAbort+0x3c>)
 80119b2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80119b6:	bf00      	nop
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bc80      	pop	{r7}
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	20000988 	.word	0x20000988

080119c4 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80119cc:	2300      	movs	r3, #0
 80119ce:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80119d0:	2300      	movs	r3, #0
 80119d2:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80119d4:	4b50      	ldr	r3, [pc, #320]	; (8011b18 <LoRaMacHandleNvm+0x154>)
 80119d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80119da:	2b00      	cmp	r3, #0
 80119dc:	f040 8098 	bne.w	8011b10 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2124      	movs	r1, #36	; 0x24
 80119e4:	4618      	mov	r0, r3
 80119e6:	f008 f82f 	bl	8019a48 <Crc32>
 80119ea:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f0:	68ba      	ldr	r2, [r7, #8]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d006      	beq.n	8011a04 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68ba      	ldr	r2, [r7, #8]
 80119fa:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80119fc:	89fb      	ldrh	r3, [r7, #14]
 80119fe:	f043 0301 	orr.w	r3, r3, #1
 8011a02:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	3328      	adds	r3, #40	; 0x28
 8011a08:	211c      	movs	r1, #28
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f008 f81c 	bl	8019a48 <Crc32>
 8011a10:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a16:	68ba      	ldr	r2, [r7, #8]
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d006      	beq.n	8011a2a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011a22:	89fb      	ldrh	r3, [r7, #14]
 8011a24:	f043 0302 	orr.w	r3, r3, #2
 8011a28:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3348      	adds	r3, #72	; 0x48
 8011a2e:	21fc      	movs	r1, #252	; 0xfc
 8011a30:	4618      	mov	r0, r3
 8011a32:	f008 f809 	bl	8019a48 <Crc32>
 8011a36:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011a3e:	68ba      	ldr	r2, [r7, #8]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d007      	beq.n	8011a54 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011a4c:	89fb      	ldrh	r3, [r7, #14]
 8011a4e:	f043 0304 	orr.w	r3, r3, #4
 8011a52:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011a5a:	21d4      	movs	r1, #212	; 0xd4
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f007 fff3 	bl	8019a48 <Crc32>
 8011a62:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d007      	beq.n	8011a80 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011a78:	89fb      	ldrh	r3, [r7, #14]
 8011a7a:	f043 0308 	orr.w	r3, r3, #8
 8011a7e:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011a86:	2190      	movs	r1, #144	; 0x90
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f007 ffdd 	bl	8019a48 <Crc32>
 8011a8e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a96:	68ba      	ldr	r2, [r7, #8]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d007      	beq.n	8011aac <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011aa4:	89fb      	ldrh	r3, [r7, #14]
 8011aa6:	f043 0310 	orr.w	r3, r3, #16
 8011aaa:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011ab2:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f007 ffc6 	bl	8019a48 <Crc32>
 8011abc:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d007      	beq.n	8011ada <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	68ba      	ldr	r2, [r7, #8]
 8011ace:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011ad2:	89fb      	ldrh	r3, [r7, #14]
 8011ad4:	f043 0320 	orr.w	r3, r3, #32
 8011ad8:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011ae0:	2114      	movs	r1, #20
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f007 ffb0 	bl	8019a48 <Crc32>
 8011ae8:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011af0:	68ba      	ldr	r2, [r7, #8]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d007      	beq.n	8011b06 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	68ba      	ldr	r2, [r7, #8]
 8011afa:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011afe:	89fb      	ldrh	r3, [r7, #14]
 8011b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b04:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011b06:	89fb      	ldrh	r3, [r7, #14]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f001 ff51 	bl	80139b0 <CallNvmDataChangeCallback>
 8011b0e:	e000      	b.n	8011b12 <LoRaMacHandleNvm+0x14e>
        return;
 8011b10:	bf00      	nop
}
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	20000988 	.word	0x20000988

08011b1c <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011b22:	2300      	movs	r3, #0
 8011b24:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011b26:	f7ff fd3d 	bl	80115a4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011b2a:	f003 fd1a 	bl	8015562 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011b2e:	4b25      	ldr	r3, [pc, #148]	; (8011bc4 <LoRaMacProcess+0xa8>)
 8011b30:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b34:	f003 0310 	and.w	r3, r3, #16
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d023      	beq.n	8011b86 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f7ff fda4 	bl	801168c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011b44:	f7ff ff1e 	bl	8011984 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011b48:	f001 ffc2 	bl	8013ad0 <IsRequestPending>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d006      	beq.n	8011b60 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011b52:	f7ff feef 	bl	8011934 <LoRaMacCheckForBeaconAcquisition>
 8011b56:	4603      	mov	r3, r0
 8011b58:	461a      	mov	r2, r3
 8011b5a:	79fb      	ldrb	r3, [r7, #7]
 8011b5c:	4313      	orrs	r3, r2
 8011b5e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011b60:	79fb      	ldrb	r3, [r7, #7]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d103      	bne.n	8011b6e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011b66:	f7ff fea9 	bl	80118bc <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011b6a:	f7ff fe39 	bl	80117e0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011b6e:	f7ff fd9d 	bl	80116ac <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b72:	2001      	movs	r0, #1
 8011b74:	f7ff fd8a 	bl	801168c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011b78:	4a12      	ldr	r2, [pc, #72]	; (8011bc4 <LoRaMacProcess+0xa8>)
 8011b7a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b7e:	f043 0320 	orr.w	r3, r3, #32
 8011b82:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8011b86:	f7ff fdf3 	bl	8011770 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011b8a:	4b0e      	ldr	r3, [pc, #56]	; (8011bc4 <LoRaMacProcess+0xa8>)
 8011b8c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011b90:	2b02      	cmp	r3, #2
 8011b92:	d101      	bne.n	8011b98 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8011b94:	f001 fbb8 	bl	8013308 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011b98:	4b0a      	ldr	r3, [pc, #40]	; (8011bc4 <LoRaMacProcess+0xa8>)
 8011b9a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b9e:	f003 0320 	and.w	r3, r3, #32
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d009      	beq.n	8011bbc <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011ba8:	4a06      	ldr	r2, [pc, #24]	; (8011bc4 <LoRaMacProcess+0xa8>)
 8011baa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bae:	f36f 1345 	bfc	r3, #5, #1
 8011bb2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8011bb6:	4804      	ldr	r0, [pc, #16]	; (8011bc8 <LoRaMacProcess+0xac>)
 8011bb8:	f7ff ff04 	bl	80119c4 <LoRaMacHandleNvm>
    }
}
 8011bbc:	bf00      	nop
 8011bbe:	3708      	adds	r7, #8
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	bd80      	pop	{r7, pc}
 8011bc4:	20000988 	.word	0x20000988
 8011bc8:	20000e90 	.word	0x20000e90

08011bcc <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011bd4:	4817      	ldr	r0, [pc, #92]	; (8011c34 <OnTxDelayedTimerEvent+0x68>)
 8011bd6:	f00c f87d 	bl	801dcd4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011bda:	4b17      	ldr	r3, [pc, #92]	; (8011c38 <OnTxDelayedTimerEvent+0x6c>)
 8011bdc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011be0:	f023 0320 	bic.w	r3, r3, #32
 8011be4:	4a14      	ldr	r2, [pc, #80]	; (8011c38 <OnTxDelayedTimerEvent+0x6c>)
 8011be6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011bea:	2001      	movs	r0, #1
 8011bec:	f001 f8e4 	bl	8012db8 <ScheduleTx>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d018      	beq.n	8011c28 <OnTxDelayedTimerEvent+0x5c>
 8011bf6:	2b0b      	cmp	r3, #11
 8011bf8:	d016      	beq.n	8011c28 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011bfa:	4b10      	ldr	r3, [pc, #64]	; (8011c3c <OnTxDelayedTimerEvent+0x70>)
 8011bfc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011c00:	b2da      	uxtb	r2, r3
 8011c02:	4b0d      	ldr	r3, [pc, #52]	; (8011c38 <OnTxDelayedTimerEvent+0x6c>)
 8011c04:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8011c08:	4b0b      	ldr	r3, [pc, #44]	; (8011c38 <OnTxDelayedTimerEvent+0x6c>)
 8011c0a:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8011c0e:	4b0a      	ldr	r3, [pc, #40]	; (8011c38 <OnTxDelayedTimerEvent+0x6c>)
 8011c10:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011c14:	4b08      	ldr	r3, [pc, #32]	; (8011c38 <OnTxDelayedTimerEvent+0x6c>)
 8011c16:	2209      	movs	r2, #9
 8011c18:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8011c1c:	2009      	movs	r0, #9
 8011c1e:	f004 f8cb 	bl	8015db8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011c22:	f001 fe73 	bl	801390c <StopRetransmission>
            break;
 8011c26:	e000      	b.n	8011c2a <OnTxDelayedTimerEvent+0x5e>
            break;
 8011c28:	bf00      	nop
        }
    }
}
 8011c2a:	bf00      	nop
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	20000cf0 	.word	0x20000cf0
 8011c38:	20000988 	.word	0x20000988
 8011c3c:	20000e90 	.word	0x20000e90

08011c40 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011c48:	4b14      	ldr	r3, [pc, #80]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c4a:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011c4e:	4b13      	ldr	r3, [pc, #76]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c50:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011c54:	4b12      	ldr	r3, [pc, #72]	; (8011ca0 <OnRxWindow1TimerEvent+0x60>)
 8011c56:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011c5a:	b25a      	sxtb	r2, r3
 8011c5c:	4b0f      	ldr	r3, [pc, #60]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c5e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c62:	4b0f      	ldr	r3, [pc, #60]	; (8011ca0 <OnRxWindow1TimerEvent+0x60>)
 8011c64:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011c68:	4b0c      	ldr	r3, [pc, #48]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c6a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011c6e:	4b0c      	ldr	r3, [pc, #48]	; (8011ca0 <OnRxWindow1TimerEvent+0x60>)
 8011c70:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011c74:	4b09      	ldr	r3, [pc, #36]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c76:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011c7a:	4b08      	ldr	r3, [pc, #32]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011c82:	4b06      	ldr	r3, [pc, #24]	; (8011c9c <OnRxWindow1TimerEvent+0x5c>)
 8011c84:	2200      	movs	r2, #0
 8011c86:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011c8a:	4906      	ldr	r1, [pc, #24]	; (8011ca4 <OnRxWindow1TimerEvent+0x64>)
 8011c8c:	4806      	ldr	r0, [pc, #24]	; (8011ca8 <OnRxWindow1TimerEvent+0x68>)
 8011c8e:	f001 fb07 	bl	80132a0 <RxWindowSetup>
}
 8011c92:	bf00      	nop
 8011c94:	3708      	adds	r7, #8
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	20000988 	.word	0x20000988
 8011ca0:	20000e90 	.word	0x20000e90
 8011ca4:	20000d40 	.word	0x20000d40
 8011ca8:	20000d08 	.word	0x20000d08

08011cac <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011cb4:	4b16      	ldr	r3, [pc, #88]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cb6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d023      	beq.n	8011d06 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011cbe:	4b14      	ldr	r3, [pc, #80]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cc0:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011cc4:	4b12      	ldr	r3, [pc, #72]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cc6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011cca:	4b12      	ldr	r3, [pc, #72]	; (8011d14 <OnRxWindow2TimerEvent+0x68>)
 8011ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cce:	4a10      	ldr	r2, [pc, #64]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cd0:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011cd4:	4b0f      	ldr	r3, [pc, #60]	; (8011d14 <OnRxWindow2TimerEvent+0x68>)
 8011cd6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011cda:	4b0d      	ldr	r3, [pc, #52]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cdc:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011ce0:	4b0c      	ldr	r3, [pc, #48]	; (8011d14 <OnRxWindow2TimerEvent+0x68>)
 8011ce2:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011ce6:	4b0a      	ldr	r3, [pc, #40]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011ce8:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011cec:	4b08      	ldr	r3, [pc, #32]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cee:	2200      	movs	r2, #0
 8011cf0:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011cf4:	4b06      	ldr	r3, [pc, #24]	; (8011d10 <OnRxWindow2TimerEvent+0x64>)
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011cfc:	4906      	ldr	r1, [pc, #24]	; (8011d18 <OnRxWindow2TimerEvent+0x6c>)
 8011cfe:	4807      	ldr	r0, [pc, #28]	; (8011d1c <OnRxWindow2TimerEvent+0x70>)
 8011d00:	f001 face 	bl	80132a0 <RxWindowSetup>
 8011d04:	e000      	b.n	8011d08 <OnRxWindow2TimerEvent+0x5c>
        return;
 8011d06:	bf00      	nop
}
 8011d08:	3708      	adds	r7, #8
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	20000988 	.word	0x20000988
 8011d14:	20000e90 	.word	0x20000e90
 8011d18:	20000d54 	.word	0x20000d54
 8011d1c:	20000d20 	.word	0x20000d20

08011d20 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8011d28:	480e      	ldr	r0, [pc, #56]	; (8011d64 <OnAckTimeoutTimerEvent+0x44>)
 8011d2a:	f00b ffd3 	bl	801dcd4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011d2e:	4b0e      	ldr	r3, [pc, #56]	; (8011d68 <OnAckTimeoutTimerEvent+0x48>)
 8011d30:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d003      	beq.n	8011d40 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8011d38:	4b0b      	ldr	r3, [pc, #44]	; (8011d68 <OnAckTimeoutTimerEvent+0x48>)
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011d40:	4b0a      	ldr	r3, [pc, #40]	; (8011d6c <OnAckTimeoutTimerEvent+0x4c>)
 8011d42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	d106      	bne.n	8011d58 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8011d4a:	4a07      	ldr	r2, [pc, #28]	; (8011d68 <OnAckTimeoutTimerEvent+0x48>)
 8011d4c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d50:	f043 0310 	orr.w	r3, r3, #16
 8011d54:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 8011d58:	f001 fe14 	bl	8013984 <OnMacProcessNotify>
}
 8011d5c:	bf00      	nop
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20000d7c 	.word	0x20000d7c
 8011d68:	20000988 	.word	0x20000988
 8011d6c:	20000e90 	.word	0x20000e90

08011d70 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	60ba      	str	r2, [r7, #8]
 8011d78:	607b      	str	r3, [r7, #4]
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	73fb      	strb	r3, [r7, #15]
 8011d7e:	460b      	mov	r3, r1
 8011d80:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d005      	beq.n	8011d94 <GetFCntDown+0x24>
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d002      	beq.n	8011d94 <GetFCntDown+0x24>
 8011d8e:	6a3b      	ldr	r3, [r7, #32]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d101      	bne.n	8011d98 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d94:	230a      	movs	r3, #10
 8011d96:	e029      	b.n	8011dec <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8011d98:	7bfb      	ldrb	r3, [r7, #15]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d016      	beq.n	8011dcc <GetFCntDown+0x5c>
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d118      	bne.n	8011dd4 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8011da2:	79bb      	ldrb	r3, [r7, #6]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d10d      	bne.n	8011dc4 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8011da8:	7bbb      	ldrb	r3, [r7, #14]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d002      	beq.n	8011db4 <GetFCntDown+0x44>
 8011dae:	7bbb      	ldrb	r3, [r7, #14]
 8011db0:	2b03      	cmp	r3, #3
 8011db2:	d103      	bne.n	8011dbc <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	2202      	movs	r2, #2
 8011db8:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8011dba:	e00d      	b.n	8011dd8 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8011dbc:	69fb      	ldr	r3, [r7, #28]
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	701a      	strb	r2, [r3, #0]
            break;
 8011dc2:	e009      	b.n	8011dd8 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	2203      	movs	r2, #3
 8011dc8:	701a      	strb	r2, [r3, #0]
            break;
 8011dca:	e005      	b.n	8011dd8 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	2204      	movs	r2, #4
 8011dd0:	701a      	strb	r2, [r3, #0]
            break;
 8011dd2:	e001      	b.n	8011dd8 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011dd4:	2305      	movs	r3, #5
 8011dd6:	e009      	b.n	8011dec <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	7818      	ldrb	r0, [r3, #0]
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	89db      	ldrh	r3, [r3, #14]
 8011de0:	461a      	mov	r2, r3
 8011de2:	8b39      	ldrh	r1, [r7, #24]
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	f004 fc25 	bl	8016634 <LoRaMacCryptoGetFCntDown>
 8011dea:	4603      	mov	r3, r0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3710      	adds	r7, #16
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8011df4:	b5b0      	push	{r4, r5, r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dfe:	2303      	movs	r3, #3
 8011e00:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8011e02:	4b6d      	ldr	r3, [pc, #436]	; (8011fb8 <SwitchClass+0x1c4>)
 8011e04:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011e08:	2b02      	cmp	r3, #2
 8011e0a:	f000 80b9 	beq.w	8011f80 <SwitchClass+0x18c>
 8011e0e:	2b02      	cmp	r3, #2
 8011e10:	f300 80cc 	bgt.w	8011fac <SwitchClass+0x1b8>
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d003      	beq.n	8011e20 <SwitchClass+0x2c>
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	f000 80a3 	beq.w	8011f64 <SwitchClass+0x170>
 8011e1e:	e0c5      	b.n	8011fac <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8011e20:	79fb      	ldrb	r3, [r7, #7]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d109      	bne.n	8011e3a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011e26:	4b64      	ldr	r3, [pc, #400]	; (8011fb8 <SwitchClass+0x1c4>)
 8011e28:	4a63      	ldr	r2, [pc, #396]	; (8011fb8 <SwitchClass+0x1c4>)
 8011e2a:	3374      	adds	r3, #116	; 0x74
 8011e2c:	326c      	adds	r2, #108	; 0x6c
 8011e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011e32:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8011e3a:	79fb      	ldrb	r3, [r7, #7]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d10c      	bne.n	8011e5a <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011e40:	79fb      	ldrb	r3, [r7, #7]
 8011e42:	4618      	mov	r0, r3
 8011e44:	f003 fb2f 	bl	80154a6 <LoRaMacClassBSwitchClass>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8011e4c:	7bfb      	ldrb	r3, [r7, #15]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d103      	bne.n	8011e5a <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e52:	4a59      	ldr	r2, [pc, #356]	; (8011fb8 <SwitchClass+0x1c4>)
 8011e54:	79fb      	ldrb	r3, [r7, #7]
 8011e56:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8011e5a:	79fb      	ldrb	r3, [r7, #7]
 8011e5c:	2b02      	cmp	r3, #2
 8011e5e:	f040 80a0 	bne.w	8011fa2 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011e62:	4a55      	ldr	r2, [pc, #340]	; (8011fb8 <SwitchClass+0x1c4>)
 8011e64:	79fb      	ldrb	r3, [r7, #7]
 8011e66:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011e6a:	4a54      	ldr	r2, [pc, #336]	; (8011fbc <SwitchClass+0x1c8>)
 8011e6c:	4b53      	ldr	r3, [pc, #332]	; (8011fbc <SwitchClass+0x1c8>)
 8011e6e:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8011e72:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8011e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011e7a:	682b      	ldr	r3, [r5, #0]
 8011e7c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011e7e:	4b4f      	ldr	r3, [pc, #316]	; (8011fbc <SwitchClass+0x1c8>)
 8011e80:	2202      	movs	r2, #2
 8011e82:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011e86:	2300      	movs	r3, #0
 8011e88:	73bb      	strb	r3, [r7, #14]
 8011e8a:	e05b      	b.n	8011f44 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011e8c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011e90:	4949      	ldr	r1, [pc, #292]	; (8011fb8 <SwitchClass+0x1c4>)
 8011e92:	4613      	mov	r3, r2
 8011e94:	005b      	lsls	r3, r3, #1
 8011e96:	4413      	add	r3, r2
 8011e98:	011b      	lsls	r3, r3, #4
 8011e9a:	440b      	add	r3, r1
 8011e9c:	33e9      	adds	r3, #233	; 0xe9
 8011e9e:	781b      	ldrb	r3, [r3, #0]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d049      	beq.n	8011f38 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8011ea4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011ea8:	4943      	ldr	r1, [pc, #268]	; (8011fb8 <SwitchClass+0x1c4>)
 8011eaa:	4613      	mov	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	4413      	add	r3, r2
 8011eb0:	011b      	lsls	r3, r3, #4
 8011eb2:	440b      	add	r3, r1
 8011eb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011eb8:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	d13c      	bne.n	8011f38 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8011ebe:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011ec2:	493d      	ldr	r1, [pc, #244]	; (8011fb8 <SwitchClass+0x1c4>)
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	005b      	lsls	r3, r3, #1
 8011ec8:	4413      	add	r3, r2
 8011eca:	011b      	lsls	r3, r3, #4
 8011ecc:	440b      	add	r3, r1
 8011ece:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	4a38      	ldr	r2, [pc, #224]	; (8011fb8 <SwitchClass+0x1c4>)
 8011ed6:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8011ed8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011edc:	4936      	ldr	r1, [pc, #216]	; (8011fb8 <SwitchClass+0x1c4>)
 8011ede:	4613      	mov	r3, r2
 8011ee0:	005b      	lsls	r3, r3, #1
 8011ee2:	4413      	add	r3, r2
 8011ee4:	011b      	lsls	r3, r3, #4
 8011ee6:	440b      	add	r3, r1
 8011ee8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011eec:	f993 3000 	ldrsb.w	r3, [r3]
 8011ef0:	b2da      	uxtb	r2, r3
 8011ef2:	4b31      	ldr	r3, [pc, #196]	; (8011fb8 <SwitchClass+0x1c4>)
 8011ef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011ef8:	4b30      	ldr	r3, [pc, #192]	; (8011fbc <SwitchClass+0x1c8>)
 8011efa:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8011efe:	4b2f      	ldr	r3, [pc, #188]	; (8011fbc <SwitchClass+0x1c8>)
 8011f00:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011f04:	4b2c      	ldr	r3, [pc, #176]	; (8011fb8 <SwitchClass+0x1c4>)
 8011f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f08:	4a2c      	ldr	r2, [pc, #176]	; (8011fbc <SwitchClass+0x1c8>)
 8011f0a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f0e:	4b2a      	ldr	r3, [pc, #168]	; (8011fb8 <SwitchClass+0x1c4>)
 8011f10:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011f14:	4b29      	ldr	r3, [pc, #164]	; (8011fbc <SwitchClass+0x1c8>)
 8011f16:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011f1a:	4b27      	ldr	r3, [pc, #156]	; (8011fb8 <SwitchClass+0x1c4>)
 8011f1c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011f20:	4b26      	ldr	r3, [pc, #152]	; (8011fbc <SwitchClass+0x1c8>)
 8011f22:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011f26:	4b25      	ldr	r3, [pc, #148]	; (8011fbc <SwitchClass+0x1c8>)
 8011f28:	2203      	movs	r2, #3
 8011f2a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011f2e:	4b23      	ldr	r3, [pc, #140]	; (8011fbc <SwitchClass+0x1c8>)
 8011f30:	2201      	movs	r2, #1
 8011f32:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8011f36:	e009      	b.n	8011f4c <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	3301      	adds	r3, #1
 8011f40:	b2db      	uxtb	r3, r3
 8011f42:	73bb      	strb	r3, [r7, #14]
 8011f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	dd9f      	ble.n	8011e8c <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8011f4c:	4b1b      	ldr	r3, [pc, #108]	; (8011fbc <SwitchClass+0x1c8>)
 8011f4e:	2200      	movs	r2, #0
 8011f50:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8011f54:	4b1a      	ldr	r3, [pc, #104]	; (8011fc0 <SwitchClass+0x1cc>)
 8011f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f58:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8011f5a:	f001 f9d5 	bl	8013308 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8011f62:	e01e      	b.n	8011fa2 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011f64:	79fb      	ldrb	r3, [r7, #7]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f003 fa9d 	bl	80154a6 <LoRaMacClassBSwitchClass>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8011f70:	7bfb      	ldrb	r3, [r7, #15]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d117      	bne.n	8011fa6 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011f76:	4a10      	ldr	r2, [pc, #64]	; (8011fb8 <SwitchClass+0x1c4>)
 8011f78:	79fb      	ldrb	r3, [r7, #7]
 8011f7a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 8011f7e:	e012      	b.n	8011fa6 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011f80:	79fb      	ldrb	r3, [r7, #7]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d111      	bne.n	8011faa <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8011f86:	4b0d      	ldr	r3, [pc, #52]	; (8011fbc <SwitchClass+0x1c8>)
 8011f88:	2206      	movs	r2, #6
 8011f8a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8011f8e:	4a0a      	ldr	r2, [pc, #40]	; (8011fb8 <SwitchClass+0x1c4>)
 8011f90:	79fb      	ldrb	r3, [r7, #7]
 8011f92:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011f96:	4b0a      	ldr	r3, [pc, #40]	; (8011fc0 <SwitchClass+0x1cc>)
 8011f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8011fa0:	e003      	b.n	8011faa <SwitchClass+0x1b6>
            break;
 8011fa2:	bf00      	nop
 8011fa4:	e002      	b.n	8011fac <SwitchClass+0x1b8>
            break;
 8011fa6:	bf00      	nop
 8011fa8:	e000      	b.n	8011fac <SwitchClass+0x1b8>
            break;
 8011faa:	bf00      	nop
        }
    }

    return status;
 8011fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3710      	adds	r7, #16
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20000e90 	.word	0x20000e90
 8011fbc:	20000988 	.word	0x20000988
 8011fc0:	0801f578 	.word	0x0801f578

08011fc4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	4603      	mov	r3, r0
 8011fcc:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011fce:	4b10      	ldr	r3, [pc, #64]	; (8012010 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011fd0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011fd4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8011fd6:	79fb      	ldrb	r3, [r7, #7]
 8011fd8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011fda:	230d      	movs	r3, #13
 8011fdc:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011fde:	4b0c      	ldr	r3, [pc, #48]	; (8012010 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011fe0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d001      	beq.n	8011fec <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011fe8:	230e      	movs	r3, #14
 8011fea:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fec:	4b08      	ldr	r3, [pc, #32]	; (8012010 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011fee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011ff2:	f107 0210 	add.w	r2, r7, #16
 8011ff6:	4611      	mov	r1, r2
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f005 f9b6 	bl	801736a <RegionGetPhyParam>
 8011ffe:	4603      	mov	r3, r0
 8012000:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	b2db      	uxtb	r3, r3
}
 8012006:	4618      	mov	r0, r3
 8012008:	3718      	adds	r7, #24
 801200a:	46bd      	mov	sp, r7
 801200c:	bd80      	pop	{r7, pc}
 801200e:	bf00      	nop
 8012010:	20000e90 	.word	0x20000e90

08012014 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b084      	sub	sp, #16
 8012018:	af00      	add	r7, sp, #0
 801201a:	4603      	mov	r3, r0
 801201c:	71fb      	strb	r3, [r7, #7]
 801201e:	460b      	mov	r3, r1
 8012020:	71bb      	strb	r3, [r7, #6]
 8012022:	4613      	mov	r3, r2
 8012024:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8012026:	2300      	movs	r3, #0
 8012028:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801202a:	2300      	movs	r3, #0
 801202c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801202e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012032:	4618      	mov	r0, r3
 8012034:	f7ff ffc6 	bl	8011fc4 <GetMaxAppPayloadWithoutFOptsLength>
 8012038:	4603      	mov	r3, r0
 801203a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801203c:	79fb      	ldrb	r3, [r7, #7]
 801203e:	b29a      	uxth	r2, r3
 8012040:	797b      	ldrb	r3, [r7, #5]
 8012042:	b29b      	uxth	r3, r3
 8012044:	4413      	add	r3, r2
 8012046:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012048:	89ba      	ldrh	r2, [r7, #12]
 801204a:	89fb      	ldrh	r3, [r7, #14]
 801204c:	429a      	cmp	r2, r3
 801204e:	d804      	bhi.n	801205a <ValidatePayloadLength+0x46>
 8012050:	89bb      	ldrh	r3, [r7, #12]
 8012052:	2bff      	cmp	r3, #255	; 0xff
 8012054:	d801      	bhi.n	801205a <ValidatePayloadLength+0x46>
    {
        return true;
 8012056:	2301      	movs	r3, #1
 8012058:	e000      	b.n	801205c <ValidatePayloadLength+0x48>
    }
    return false;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012064:	b590      	push	{r4, r7, lr}
 8012066:	b0a5      	sub	sp, #148	; 0x94
 8012068:	af02      	add	r7, sp, #8
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	4608      	mov	r0, r1
 801206e:	4611      	mov	r1, r2
 8012070:	461a      	mov	r2, r3
 8012072:	4603      	mov	r3, r0
 8012074:	70fb      	strb	r3, [r7, #3]
 8012076:	460b      	mov	r3, r1
 8012078:	70bb      	strb	r3, [r7, #2]
 801207a:	4613      	mov	r3, r2
 801207c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012084:	2300      	movs	r3, #0
 8012086:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801208a:	2300      	movs	r3, #0
 801208c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012090:	f000 bc6d 	b.w	801296e <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012094:	78fb      	ldrb	r3, [r7, #3]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	4413      	add	r3, r2
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	4618      	mov	r0, r3
 801209e:	f003 fce7 	bl	8015a70 <LoRaMacCommandsGetCmdSize>
 80120a2:	4603      	mov	r3, r0
 80120a4:	461a      	mov	r2, r3
 80120a6:	78fb      	ldrb	r3, [r7, #3]
 80120a8:	441a      	add	r2, r3
 80120aa:	78bb      	ldrb	r3, [r7, #2]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	f300 8464 	bgt.w	801297a <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80120b2:	78fb      	ldrb	r3, [r7, #3]
 80120b4:	1c5a      	adds	r2, r3, #1
 80120b6:	70fa      	strb	r2, [r7, #3]
 80120b8:	461a      	mov	r2, r3
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	4413      	add	r3, r2
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	3b02      	subs	r3, #2
 80120c2:	2b11      	cmp	r3, #17
 80120c4:	f200 845b 	bhi.w	801297e <ProcessMacCommands+0x91a>
 80120c8:	a201      	add	r2, pc, #4	; (adr r2, 80120d0 <ProcessMacCommands+0x6c>)
 80120ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ce:	bf00      	nop
 80120d0:	08012119 	.word	0x08012119
 80120d4:	0801215b 	.word	0x0801215b
 80120d8:	08012277 	.word	0x08012277
 80120dc:	080122b5 	.word	0x080122b5
 80120e0:	080123a1 	.word	0x080123a1
 80120e4:	080123fd 	.word	0x080123fd
 80120e8:	080124b9 	.word	0x080124b9
 80120ec:	0801250f 	.word	0x0801250f
 80120f0:	080125f5 	.word	0x080125f5
 80120f4:	0801297f 	.word	0x0801297f
 80120f8:	0801297f 	.word	0x0801297f
 80120fc:	08012699 	.word	0x08012699
 8012100:	0801297f 	.word	0x0801297f
 8012104:	0801297f 	.word	0x0801297f
 8012108:	080127af 	.word	0x080127af
 801210c:	080127e3 	.word	0x080127e3
 8012110:	08012873 	.word	0x08012873
 8012114:	080128e9 	.word	0x080128e9
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012118:	2005      	movs	r0, #5
 801211a:	f003 fe81 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 801211e:	4603      	mov	r3, r0
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 8424 	beq.w	801296e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8012126:	2105      	movs	r1, #5
 8012128:	2000      	movs	r0, #0
 801212a:	f003 fded 	bl	8015d08 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801212e:	78fb      	ldrb	r3, [r7, #3]
 8012130:	1c5a      	adds	r2, r3, #1
 8012132:	70fa      	strb	r2, [r7, #3]
 8012134:	461a      	mov	r2, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	4413      	add	r3, r2
 801213a:	781a      	ldrb	r2, [r3, #0]
 801213c:	4bac      	ldr	r3, [pc, #688]	; (80123f0 <ProcessMacCommands+0x38c>)
 801213e:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8012142:	78fb      	ldrb	r3, [r7, #3]
 8012144:	1c5a      	adds	r2, r3, #1
 8012146:	70fa      	strb	r2, [r7, #3]
 8012148:	461a      	mov	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4413      	add	r3, r2
 801214e:	781a      	ldrb	r2, [r3, #0]
 8012150:	4ba7      	ldr	r3, [pc, #668]	; (80123f0 <ProcessMacCommands+0x38c>)
 8012152:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 8012156:	f000 bc0a 	b.w	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801215a:	2300      	movs	r3, #0
 801215c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012160:	2300      	movs	r3, #0
 8012162:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8012166:	2300      	movs	r3, #0
 8012168:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 8012172:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8012176:	f083 0301 	eor.w	r3, r3, #1
 801217a:	b2db      	uxtb	r3, r3
 801217c:	2b00      	cmp	r3, #0
 801217e:	d078      	beq.n	8012272 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012180:	2301      	movs	r3, #1
 8012182:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8012186:	78fb      	ldrb	r3, [r7, #3]
 8012188:	3b01      	subs	r3, #1
 801218a:	687a      	ldr	r2, [r7, #4]
 801218c:	4413      	add	r3, r2
 801218e:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012190:	78ba      	ldrb	r2, [r7, #2]
 8012192:	78fb      	ldrb	r3, [r7, #3]
 8012194:	1ad3      	subs	r3, r2, r3
 8012196:	b2db      	uxtb	r3, r3
 8012198:	3301      	adds	r3, #1
 801219a:	b2db      	uxtb	r3, r3
 801219c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80121a0:	4b94      	ldr	r3, [pc, #592]	; (80123f4 <ProcessMacCommands+0x390>)
 80121a2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80121a6:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80121aa:	4b92      	ldr	r3, [pc, #584]	; (80123f4 <ProcessMacCommands+0x390>)
 80121ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80121b0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80121b4:	4b8f      	ldr	r3, [pc, #572]	; (80123f4 <ProcessMacCommands+0x390>)
 80121b6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80121ba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80121be:	4b8d      	ldr	r3, [pc, #564]	; (80123f4 <ProcessMacCommands+0x390>)
 80121c0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80121c4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80121c8:	4b8a      	ldr	r3, [pc, #552]	; (80123f4 <ProcessMacCommands+0x390>)
 80121ca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80121ce:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80121d2:	4b88      	ldr	r3, [pc, #544]	; (80123f4 <ProcessMacCommands+0x390>)
 80121d4:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80121d8:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80121da:	4b86      	ldr	r3, [pc, #536]	; (80123f4 <ProcessMacCommands+0x390>)
 80121dc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80121e0:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80121e4:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80121e8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80121ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80121f0:	9301      	str	r3, [sp, #4]
 80121f2:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	4623      	mov	r3, r4
 80121fa:	f005 f973 	bl	80174e4 <RegionLinkAdrReq>
 80121fe:	4603      	mov	r3, r0
 8012200:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012204:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012208:	f003 0307 	and.w	r3, r3, #7
 801220c:	2b07      	cmp	r3, #7
 801220e:	d10e      	bne.n	801222e <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012210:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012214:	4b77      	ldr	r3, [pc, #476]	; (80123f4 <ProcessMacCommands+0x390>)
 8012216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801221a:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801221e:	4b75      	ldr	r3, [pc, #468]	; (80123f4 <ProcessMacCommands+0x390>)
 8012220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012224:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012228:	4b72      	ldr	r3, [pc, #456]	; (80123f4 <ProcessMacCommands+0x390>)
 801222a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801222e:	2300      	movs	r3, #0
 8012230:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012234:	e00b      	b.n	801224e <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8012236:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 801223a:	2201      	movs	r2, #1
 801223c:	4619      	mov	r1, r3
 801223e:	2003      	movs	r0, #3
 8012240:	f003 fab6 	bl	80157b0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012244:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012248:	3301      	adds	r3, #1
 801224a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801224e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012252:	4a69      	ldr	r2, [pc, #420]	; (80123f8 <ProcessMacCommands+0x394>)
 8012254:	fba2 2303 	umull	r2, r3, r2, r3
 8012258:	089b      	lsrs	r3, r3, #2
 801225a:	b2db      	uxtb	r3, r3
 801225c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012260:	429a      	cmp	r2, r3
 8012262:	d3e8      	bcc.n	8012236 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8012264:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012268:	78fb      	ldrb	r3, [r7, #3]
 801226a:	4413      	add	r3, r2
 801226c:	b2db      	uxtb	r3, r3
 801226e:	3b01      	subs	r3, #1
 8012270:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8012272:	bf00      	nop
 8012274:	e37b      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8012276:	78fb      	ldrb	r3, [r7, #3]
 8012278:	1c5a      	adds	r2, r3, #1
 801227a:	70fa      	strb	r2, [r7, #3]
 801227c:	461a      	mov	r2, r3
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	4413      	add	r3, r2
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	f003 030f 	and.w	r3, r3, #15
 8012288:	b2da      	uxtb	r2, r3
 801228a:	4b5a      	ldr	r3, [pc, #360]	; (80123f4 <ProcessMacCommands+0x390>)
 801228c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012290:	4b58      	ldr	r3, [pc, #352]	; (80123f4 <ProcessMacCommands+0x390>)
 8012292:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012296:	461a      	mov	r2, r3
 8012298:	2301      	movs	r3, #1
 801229a:	4093      	lsls	r3, r2
 801229c:	b29a      	uxth	r2, r3
 801229e:	4b55      	ldr	r3, [pc, #340]	; (80123f4 <ProcessMacCommands+0x390>)
 80122a0:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80122a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80122a8:	2200      	movs	r2, #0
 80122aa:	4619      	mov	r1, r3
 80122ac:	2004      	movs	r0, #4
 80122ae:	f003 fa7f 	bl	80157b0 <LoRaMacCommandsAddCmd>
                break;
 80122b2:	e35c      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80122b4:	2307      	movs	r3, #7
 80122b6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80122ba:	78fb      	ldrb	r3, [r7, #3]
 80122bc:	687a      	ldr	r2, [r7, #4]
 80122be:	4413      	add	r3, r2
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	091b      	lsrs	r3, r3, #4
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	b25b      	sxtb	r3, r3
 80122c8:	f003 0307 	and.w	r3, r3, #7
 80122cc:	b25b      	sxtb	r3, r3
 80122ce:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80122d2:	78fb      	ldrb	r3, [r7, #3]
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	4413      	add	r3, r2
 80122d8:	781b      	ldrb	r3, [r3, #0]
 80122da:	b25b      	sxtb	r3, r3
 80122dc:	f003 030f 	and.w	r3, r3, #15
 80122e0:	b25b      	sxtb	r3, r3
 80122e2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80122e6:	78fb      	ldrb	r3, [r7, #3]
 80122e8:	3301      	adds	r3, #1
 80122ea:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80122ec:	78fb      	ldrb	r3, [r7, #3]
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	70fa      	strb	r2, [r7, #3]
 80122f2:	461a      	mov	r2, r3
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	4413      	add	r3, r2
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80122fc:	78fb      	ldrb	r3, [r7, #3]
 80122fe:	1c5a      	adds	r2, r3, #1
 8012300:	70fa      	strb	r2, [r7, #3]
 8012302:	461a      	mov	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	4413      	add	r3, r2
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	021a      	lsls	r2, r3, #8
 801230c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801230e:	4313      	orrs	r3, r2
 8012310:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012312:	78fb      	ldrb	r3, [r7, #3]
 8012314:	1c5a      	adds	r2, r3, #1
 8012316:	70fa      	strb	r2, [r7, #3]
 8012318:	461a      	mov	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	4413      	add	r3, r2
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	041a      	lsls	r2, r3, #16
 8012322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012324:	4313      	orrs	r3, r2
 8012326:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801232a:	2264      	movs	r2, #100	; 0x64
 801232c:	fb02 f303 	mul.w	r3, r2, r3
 8012330:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8012332:	4b30      	ldr	r3, [pc, #192]	; (80123f4 <ProcessMacCommands+0x390>)
 8012334:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012338:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801233c:	4611      	mov	r1, r2
 801233e:	4618      	mov	r0, r3
 8012340:	f005 f8ea 	bl	8017518 <RegionRxParamSetupReq>
 8012344:	4603      	mov	r3, r0
 8012346:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801234a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801234e:	f003 0307 	and.w	r3, r3, #7
 8012352:	2b07      	cmp	r3, #7
 8012354:	d117      	bne.n	8012386 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8012356:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801235a:	b2da      	uxtb	r2, r3
 801235c:	4b25      	ldr	r3, [pc, #148]	; (80123f4 <ProcessMacCommands+0x390>)
 801235e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8012362:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012366:	b2da      	uxtb	r2, r3
 8012368:	4b22      	ldr	r3, [pc, #136]	; (80123f4 <ProcessMacCommands+0x390>)
 801236a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 801236e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012370:	4a20      	ldr	r2, [pc, #128]	; (80123f4 <ProcessMacCommands+0x390>)
 8012372:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012376:	4a1f      	ldr	r2, [pc, #124]	; (80123f4 <ProcessMacCommands+0x390>)
 8012378:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801237a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801237e:	b2da      	uxtb	r2, r3
 8012380:	4b1c      	ldr	r3, [pc, #112]	; (80123f4 <ProcessMacCommands+0x390>)
 8012382:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8012386:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801238a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 801238e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012392:	2201      	movs	r2, #1
 8012394:	4619      	mov	r1, r3
 8012396:	2005      	movs	r0, #5
 8012398:	f003 fa0a 	bl	80157b0 <LoRaMacCommandsAddCmd>
                break;
 801239c:	bf00      	nop
 801239e:	e2e6      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80123a0:	23ff      	movs	r3, #255	; 0xff
 80123a2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80123a6:	4b12      	ldr	r3, [pc, #72]	; (80123f0 <ProcessMacCommands+0x38c>)
 80123a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d00d      	beq.n	80123cc <ProcessMacCommands+0x368>
 80123b0:	4b0f      	ldr	r3, [pc, #60]	; (80123f0 <ProcessMacCommands+0x38c>)
 80123b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d007      	beq.n	80123cc <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80123bc:	4b0c      	ldr	r3, [pc, #48]	; (80123f0 <ProcessMacCommands+0x38c>)
 80123be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4798      	blx	r3
 80123c6:	4603      	mov	r3, r0
 80123c8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80123cc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80123d0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80123d4:	787b      	ldrb	r3, [r7, #1]
 80123d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80123e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80123e4:	2202      	movs	r2, #2
 80123e6:	4619      	mov	r1, r3
 80123e8:	2006      	movs	r0, #6
 80123ea:	f003 f9e1 	bl	80157b0 <LoRaMacCommandsAddCmd>
                break;
 80123ee:	e2be      	b.n	801296e <ProcessMacCommands+0x90a>
 80123f0:	20000988 	.word	0x20000988
 80123f4:	20000e90 	.word	0x20000e90
 80123f8:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80123fc:	2303      	movs	r3, #3
 80123fe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012402:	78fb      	ldrb	r3, [r7, #3]
 8012404:	1c5a      	adds	r2, r3, #1
 8012406:	70fa      	strb	r2, [r7, #3]
 8012408:	461a      	mov	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4413      	add	r3, r2
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	b25b      	sxtb	r3, r3
 8012412:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012416:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801241a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801241c:	78fb      	ldrb	r3, [r7, #3]
 801241e:	1c5a      	adds	r2, r3, #1
 8012420:	70fa      	strb	r2, [r7, #3]
 8012422:	461a      	mov	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4413      	add	r3, r2
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801242c:	78fb      	ldrb	r3, [r7, #3]
 801242e:	1c5a      	adds	r2, r3, #1
 8012430:	70fa      	strb	r2, [r7, #3]
 8012432:	461a      	mov	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4413      	add	r3, r2
 8012438:	781b      	ldrb	r3, [r3, #0]
 801243a:	021a      	lsls	r2, r3, #8
 801243c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801243e:	4313      	orrs	r3, r2
 8012440:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012442:	78fb      	ldrb	r3, [r7, #3]
 8012444:	1c5a      	adds	r2, r3, #1
 8012446:	70fa      	strb	r2, [r7, #3]
 8012448:	461a      	mov	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4413      	add	r3, r2
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	041a      	lsls	r2, r3, #16
 8012452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012454:	4313      	orrs	r3, r2
 8012456:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801245a:	2264      	movs	r2, #100	; 0x64
 801245c:	fb02 f303 	mul.w	r3, r2, r3
 8012460:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012462:	2300      	movs	r3, #0
 8012464:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012466:	78fb      	ldrb	r3, [r7, #3]
 8012468:	1c5a      	adds	r2, r3, #1
 801246a:	70fa      	strb	r2, [r7, #3]
 801246c:	461a      	mov	r2, r3
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4413      	add	r3, r2
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	b25b      	sxtb	r3, r3
 8012476:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801247a:	4b85      	ldr	r3, [pc, #532]	; (8012690 <ProcessMacCommands+0x62c>)
 801247c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012480:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f005 f859 	bl	801753e <RegionNewChannelReq>
 801248c:	4603      	mov	r3, r0
 801248e:	b2db      	uxtb	r3, r3
 8012490:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012494:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012498:	b25b      	sxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	db0a      	blt.n	80124b4 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 801249e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80124a2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80124a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80124aa:	2201      	movs	r2, #1
 80124ac:	4619      	mov	r1, r3
 80124ae:	2007      	movs	r0, #7
 80124b0:	f003 f97e 	bl	80157b0 <LoRaMacCommandsAddCmd>
                }
                break;
 80124b4:	bf00      	nop
 80124b6:	e25a      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80124b8:	78fb      	ldrb	r3, [r7, #3]
 80124ba:	1c5a      	adds	r2, r3, #1
 80124bc:	70fa      	strb	r2, [r7, #3]
 80124be:	461a      	mov	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	4413      	add	r3, r2
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	f003 030f 	and.w	r3, r3, #15
 80124ca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80124ce:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d104      	bne.n	80124e0 <ProcessMacCommands+0x47c>
                {
                    delay++;
 80124d6:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80124da:	3301      	adds	r3, #1
 80124dc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80124e0:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80124e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80124e8:	fb02 f303 	mul.w	r3, r2, r3
 80124ec:	461a      	mov	r2, r3
 80124ee:	4b68      	ldr	r3, [pc, #416]	; (8012690 <ProcessMacCommands+0x62c>)
 80124f0:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80124f2:	4b67      	ldr	r3, [pc, #412]	; (8012690 <ProcessMacCommands+0x62c>)
 80124f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124f6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80124fa:	4a65      	ldr	r2, [pc, #404]	; (8012690 <ProcessMacCommands+0x62c>)
 80124fc:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80124fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012502:	2200      	movs	r2, #0
 8012504:	4619      	mov	r1, r3
 8012506:	2008      	movs	r0, #8
 8012508:	f003 f952 	bl	80157b0 <LoRaMacCommandsAddCmd>
                break;
 801250c:	e22f      	b.n	801296e <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801250e:	78fb      	ldrb	r3, [r7, #3]
 8012510:	1c5a      	adds	r2, r3, #1
 8012512:	70fa      	strb	r2, [r7, #3]
 8012514:	461a      	mov	r2, r3
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4413      	add	r3, r2
 801251a:	781b      	ldrb	r3, [r3, #0]
 801251c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012520:	2300      	movs	r3, #0
 8012522:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012526:	2300      	movs	r3, #0
 8012528:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801252c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012530:	f003 0320 	and.w	r3, r3, #32
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012538:	2301      	movs	r3, #1
 801253a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801253e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012542:	f003 0310 	and.w	r3, r3, #16
 8012546:	2b00      	cmp	r3, #0
 8012548:	d002      	beq.n	8012550 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801254a:	2301      	movs	r3, #1
 801254c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012550:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012554:	f003 030f 	and.w	r3, r3, #15
 8012558:	b2db      	uxtb	r3, r3
 801255a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 801255e:	4b4c      	ldr	r3, [pc, #304]	; (8012690 <ProcessMacCommands+0x62c>)
 8012560:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012564:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012568:	4611      	mov	r1, r2
 801256a:	4618      	mov	r0, r3
 801256c:	f004 fffa 	bl	8017564 <RegionTxParamSetupReq>
 8012570:	4603      	mov	r3, r0
 8012572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012576:	d03b      	beq.n	80125f0 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012578:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 801257c:	4b44      	ldr	r3, [pc, #272]	; (8012690 <ProcessMacCommands+0x62c>)
 801257e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012582:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012586:	4b42      	ldr	r3, [pc, #264]	; (8012690 <ProcessMacCommands+0x62c>)
 8012588:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801258c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012590:	461a      	mov	r2, r3
 8012592:	4b40      	ldr	r3, [pc, #256]	; (8012694 <ProcessMacCommands+0x630>)
 8012594:	5c9b      	ldrb	r3, [r3, r2]
 8012596:	4618      	mov	r0, r3
 8012598:	f7ee fb7a 	bl	8000c90 <__aeabi_ui2f>
 801259c:	4603      	mov	r3, r0
 801259e:	4a3c      	ldr	r2, [pc, #240]	; (8012690 <ProcessMacCommands+0x62c>)
 80125a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80125a4:	2302      	movs	r3, #2
 80125a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80125aa:	4b39      	ldr	r3, [pc, #228]	; (8012690 <ProcessMacCommands+0x62c>)
 80125ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80125b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125b4:	4b36      	ldr	r3, [pc, #216]	; (8012690 <ProcessMacCommands+0x62c>)
 80125b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80125ba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80125be:	4611      	mov	r1, r2
 80125c0:	4618      	mov	r0, r3
 80125c2:	f004 fed2 	bl	801736a <RegionGetPhyParam>
 80125c6:	4603      	mov	r3, r0
 80125c8:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80125ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125cc:	b25a      	sxtb	r2, r3
 80125ce:	4b30      	ldr	r3, [pc, #192]	; (8012690 <ProcessMacCommands+0x62c>)
 80125d0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80125d4:	4293      	cmp	r3, r2
 80125d6:	bfb8      	it	lt
 80125d8:	4613      	movlt	r3, r2
 80125da:	b25a      	sxtb	r2, r3
 80125dc:	4b2c      	ldr	r3, [pc, #176]	; (8012690 <ProcessMacCommands+0x62c>)
 80125de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80125e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80125e6:	2200      	movs	r2, #0
 80125e8:	4619      	mov	r1, r3
 80125ea:	2009      	movs	r0, #9
 80125ec:	f003 f8e0 	bl	80157b0 <LoRaMacCommandsAddCmd>
                }
                break;
 80125f0:	bf00      	nop
 80125f2:	e1bc      	b.n	801296e <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80125f4:	2303      	movs	r3, #3
 80125f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80125fa:	78fb      	ldrb	r3, [r7, #3]
 80125fc:	1c5a      	adds	r2, r3, #1
 80125fe:	70fa      	strb	r2, [r7, #3]
 8012600:	461a      	mov	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	4413      	add	r3, r2
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801260c:	78fb      	ldrb	r3, [r7, #3]
 801260e:	1c5a      	adds	r2, r3, #1
 8012610:	70fa      	strb	r2, [r7, #3]
 8012612:	461a      	mov	r2, r3
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	4413      	add	r3, r2
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801261c:	78fb      	ldrb	r3, [r7, #3]
 801261e:	1c5a      	adds	r2, r3, #1
 8012620:	70fa      	strb	r2, [r7, #3]
 8012622:	461a      	mov	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4413      	add	r3, r2
 8012628:	781b      	ldrb	r3, [r3, #0]
 801262a:	021a      	lsls	r2, r3, #8
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	4313      	orrs	r3, r2
 8012630:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012632:	78fb      	ldrb	r3, [r7, #3]
 8012634:	1c5a      	adds	r2, r3, #1
 8012636:	70fa      	strb	r2, [r7, #3]
 8012638:	461a      	mov	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4413      	add	r3, r2
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	041a      	lsls	r2, r3, #16
 8012642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012644:	4313      	orrs	r3, r2
 8012646:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264a:	2264      	movs	r2, #100	; 0x64
 801264c:	fb02 f303 	mul.w	r3, r2, r3
 8012650:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012652:	4b0f      	ldr	r3, [pc, #60]	; (8012690 <ProcessMacCommands+0x62c>)
 8012654:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012658:	f107 0220 	add.w	r2, r7, #32
 801265c:	4611      	mov	r1, r2
 801265e:	4618      	mov	r0, r3
 8012660:	f004 ff93 	bl	801758a <RegionDlChannelReq>
 8012664:	4603      	mov	r3, r0
 8012666:	b2db      	uxtb	r3, r3
 8012668:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801266c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012670:	b25b      	sxtb	r3, r3
 8012672:	2b00      	cmp	r3, #0
 8012674:	db0a      	blt.n	801268c <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012676:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801267a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801267e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012682:	2201      	movs	r2, #1
 8012684:	4619      	mov	r1, r3
 8012686:	200a      	movs	r0, #10
 8012688:	f003 f892 	bl	80157b0 <LoRaMacCommandsAddCmd>
                }
                break;
 801268c:	bf00      	nop
 801268e:	e16e      	b.n	801296e <ProcessMacCommands+0x90a>
 8012690:	20000e90 	.word	0x20000e90
 8012694:	0801f530 	.word	0x0801f530
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012698:	200a      	movs	r0, #10
 801269a:	f003 fbc1 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 8164 	beq.w	801296e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80126a6:	210a      	movs	r1, #10
 80126a8:	2000      	movs	r0, #0
 80126aa:	f003 fb2d 	bl	8015d08 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80126ae:	f107 0318 	add.w	r3, r7, #24
 80126b2:	2200      	movs	r2, #0
 80126b4:	601a      	str	r2, [r3, #0]
 80126b6:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80126b8:	f107 0310 	add.w	r3, r7, #16
 80126bc:	2200      	movs	r2, #0
 80126be:	601a      	str	r2, [r3, #0]
 80126c0:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80126c2:	f107 0308 	add.w	r3, r7, #8
 80126c6:	2200      	movs	r2, #0
 80126c8:	601a      	str	r2, [r3, #0]
 80126ca:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80126cc:	78fb      	ldrb	r3, [r7, #3]
 80126ce:	1c5a      	adds	r2, r3, #1
 80126d0:	70fa      	strb	r2, [r7, #3]
 80126d2:	461a      	mov	r2, r3
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	4413      	add	r3, r2
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80126dc:	78fb      	ldrb	r3, [r7, #3]
 80126de:	1c5a      	adds	r2, r3, #1
 80126e0:	70fa      	strb	r2, [r7, #3]
 80126e2:	461a      	mov	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	4413      	add	r3, r2
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	021a      	lsls	r2, r3, #8
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	4313      	orrs	r3, r2
 80126f0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80126f2:	78fb      	ldrb	r3, [r7, #3]
 80126f4:	1c5a      	adds	r2, r3, #1
 80126f6:	70fa      	strb	r2, [r7, #3]
 80126f8:	461a      	mov	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	4413      	add	r3, r2
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	041a      	lsls	r2, r3, #16
 8012702:	69bb      	ldr	r3, [r7, #24]
 8012704:	4313      	orrs	r3, r2
 8012706:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012708:	78fb      	ldrb	r3, [r7, #3]
 801270a:	1c5a      	adds	r2, r3, #1
 801270c:	70fa      	strb	r2, [r7, #3]
 801270e:	461a      	mov	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	4413      	add	r3, r2
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	061a      	lsls	r2, r3, #24
 8012718:	69bb      	ldr	r3, [r7, #24]
 801271a:	4313      	orrs	r3, r2
 801271c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801271e:	78fb      	ldrb	r3, [r7, #3]
 8012720:	1c5a      	adds	r2, r3, #1
 8012722:	70fa      	strb	r2, [r7, #3]
 8012724:	461a      	mov	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	4413      	add	r3, r2
 801272a:	781b      	ldrb	r3, [r3, #0]
 801272c:	b21b      	sxth	r3, r3
 801272e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012730:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012734:	461a      	mov	r2, r3
 8012736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801273a:	fb02 f303 	mul.w	r3, r2, r3
 801273e:	121b      	asrs	r3, r3, #8
 8012740:	b21b      	sxth	r3, r3
 8012742:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012744:	f107 0310 	add.w	r3, r7, #16
 8012748:	f107 0218 	add.w	r2, r7, #24
 801274c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012750:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012754:	693a      	ldr	r2, [r7, #16]
 8012756:	4b8c      	ldr	r3, [pc, #560]	; (8012988 <ProcessMacCommands+0x924>)
 8012758:	4413      	add	r3, r2
 801275a:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 801275c:	f107 0308 	add.w	r3, r7, #8
 8012760:	4618      	mov	r0, r3
 8012762:	f00a fd4f 	bl	801d204 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012766:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801276a:	4b88      	ldr	r3, [pc, #544]	; (801298c <ProcessMacCommands+0x928>)
 801276c:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012770:	9200      	str	r2, [sp, #0]
 8012772:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012776:	f107 0210 	add.w	r2, r7, #16
 801277a:	ca06      	ldmia	r2, {r1, r2}
 801277c:	f00a fcdb 	bl	801d136 <SysTimeSub>
 8012780:	f107 0010 	add.w	r0, r7, #16
 8012784:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801278a:	f107 0208 	add.w	r2, r7, #8
 801278e:	ca06      	ldmia	r2, {r1, r2}
 8012790:	f00a fc98 	bl	801d0c4 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012794:	f107 0310 	add.w	r3, r7, #16
 8012798:	e893 0003 	ldmia.w	r3, {r0, r1}
 801279c:	f00a fd04 	bl	801d1a8 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80127a0:	f002 febf 	bl	8015522 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80127a4:	4b79      	ldr	r3, [pc, #484]	; (801298c <ProcessMacCommands+0x928>)
 80127a6:	2201      	movs	r2, #1
 80127a8:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 80127ac:	e0df      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80127ae:	200d      	movs	r0, #13
 80127b0:	f003 fb36 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	f000 80d9 	beq.w	801296e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80127bc:	210d      	movs	r1, #13
 80127be:	2000      	movs	r0, #0
 80127c0:	f003 faa2 	bl	8015d08 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80127c4:	4b71      	ldr	r3, [pc, #452]	; (801298c <ProcessMacCommands+0x928>)
 80127c6:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80127ca:	2b04      	cmp	r3, #4
 80127cc:	f000 80cf 	beq.w	801296e <ProcessMacCommands+0x90a>
 80127d0:	4b6e      	ldr	r3, [pc, #440]	; (801298c <ProcessMacCommands+0x928>)
 80127d2:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 80127d6:	2b05      	cmp	r3, #5
 80127d8:	f000 80c9 	beq.w	801296e <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80127dc:	f002 fe82 	bl	80154e4 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80127e0:	e0c5      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80127e2:	2303      	movs	r3, #3
 80127e4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80127ec:	78fb      	ldrb	r3, [r7, #3]
 80127ee:	1c5a      	adds	r2, r3, #1
 80127f0:	70fa      	strb	r2, [r7, #3]
 80127f2:	461a      	mov	r2, r3
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	4413      	add	r3, r2
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80127fc:	78fb      	ldrb	r3, [r7, #3]
 80127fe:	1c5a      	adds	r2, r3, #1
 8012800:	70fa      	strb	r2, [r7, #3]
 8012802:	461a      	mov	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	4413      	add	r3, r2
 8012808:	781b      	ldrb	r3, [r3, #0]
 801280a:	021b      	lsls	r3, r3, #8
 801280c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801280e:	4313      	orrs	r3, r2
 8012810:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012812:	78fb      	ldrb	r3, [r7, #3]
 8012814:	1c5a      	adds	r2, r3, #1
 8012816:	70fa      	strb	r2, [r7, #3]
 8012818:	461a      	mov	r2, r3
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	4413      	add	r3, r2
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	041b      	lsls	r3, r3, #16
 8012822:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012824:	4313      	orrs	r3, r2
 8012826:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801282a:	2264      	movs	r2, #100	; 0x64
 801282c:	fb02 f303 	mul.w	r3, r2, r3
 8012830:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012832:	78fb      	ldrb	r3, [r7, #3]
 8012834:	1c5a      	adds	r2, r3, #1
 8012836:	70fa      	strb	r2, [r7, #3]
 8012838:	461a      	mov	r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	4413      	add	r3, r2
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	f003 030f 	and.w	r3, r3, #15
 8012844:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012848:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801284c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801284e:	4618      	mov	r0, r3
 8012850:	f002 fe4e 	bl	80154f0 <LoRaMacClassBPingSlotChannelReq>
 8012854:	4603      	mov	r3, r0
 8012856:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 801285a:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 801285e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012862:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012866:	2201      	movs	r2, #1
 8012868:	4619      	mov	r1, r3
 801286a:	2011      	movs	r0, #17
 801286c:	f002 ffa0 	bl	80157b0 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012870:	e07d      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012872:	200e      	movs	r0, #14
 8012874:	f003 fad4 	bl	8015e20 <LoRaMacConfirmQueueIsCmdActive>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d077      	beq.n	801296e <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801287e:	210e      	movs	r1, #14
 8012880:	2000      	movs	r0, #0
 8012882:	f003 fa41 	bl	8015d08 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012886:	2300      	movs	r3, #0
 8012888:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 801288c:	2300      	movs	r3, #0
 801288e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012892:	78fb      	ldrb	r3, [r7, #3]
 8012894:	1c5a      	adds	r2, r3, #1
 8012896:	70fa      	strb	r2, [r7, #3]
 8012898:	461a      	mov	r2, r3
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	4413      	add	r3, r2
 801289e:	781b      	ldrb	r3, [r3, #0]
 80128a0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80128a4:	78fb      	ldrb	r3, [r7, #3]
 80128a6:	1c5a      	adds	r2, r3, #1
 80128a8:	70fa      	strb	r2, [r7, #3]
 80128aa:	461a      	mov	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4413      	add	r3, r2
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	021b      	lsls	r3, r3, #8
 80128b4:	b21a      	sxth	r2, r3
 80128b6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80128ba:	4313      	orrs	r3, r2
 80128bc:	b21b      	sxth	r3, r3
 80128be:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 80128c2:	78fb      	ldrb	r3, [r7, #3]
 80128c4:	1c5a      	adds	r2, r3, #1
 80128c6:	70fa      	strb	r2, [r7, #3]
 80128c8:	461a      	mov	r2, r3
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	4413      	add	r3, r2
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80128d4:	4b2e      	ldr	r3, [pc, #184]	; (8012990 <ProcessMacCommands+0x92c>)
 80128d6:	681a      	ldr	r2, [r3, #0]
 80128d8:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80128dc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80128e0:	4618      	mov	r0, r3
 80128e2:	f002 fe11 	bl	8015508 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80128e6:	e042      	b.n	801296e <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80128e8:	2300      	movs	r3, #0
 80128ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80128ee:	78fb      	ldrb	r3, [r7, #3]
 80128f0:	1c5a      	adds	r2, r3, #1
 80128f2:	70fa      	strb	r2, [r7, #3]
 80128f4:	461a      	mov	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4413      	add	r3, r2
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012900:	78fb      	ldrb	r3, [r7, #3]
 8012902:	1c5a      	adds	r2, r3, #1
 8012904:	70fa      	strb	r2, [r7, #3]
 8012906:	461a      	mov	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4413      	add	r3, r2
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	021b      	lsls	r3, r3, #8
 8012910:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012914:	4313      	orrs	r3, r2
 8012916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801291a:	78fb      	ldrb	r3, [r7, #3]
 801291c:	1c5a      	adds	r2, r3, #1
 801291e:	70fa      	strb	r2, [r7, #3]
 8012920:	461a      	mov	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4413      	add	r3, r2
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	041b      	lsls	r3, r3, #16
 801292a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801292e:	4313      	orrs	r3, r2
 8012930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012938:	2264      	movs	r2, #100	; 0x64
 801293a:	fb02 f303 	mul.w	r3, r2, r3
 801293e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012942:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012946:	f002 fdf2 	bl	801552e <LoRaMacClassBBeaconFreqReq>
 801294a:	4603      	mov	r3, r0
 801294c:	2b00      	cmp	r3, #0
 801294e:	d003      	beq.n	8012958 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012950:	2301      	movs	r3, #1
 8012952:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012956:	e002      	b.n	801295e <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012958:	2300      	movs	r3, #0
 801295a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801295e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012962:	2201      	movs	r2, #1
 8012964:	4619      	mov	r1, r3
 8012966:	2013      	movs	r0, #19
 8012968:	f002 ff22 	bl	80157b0 <LoRaMacCommandsAddCmd>
                }
                break;
 801296c:	bf00      	nop
    while( macIndex < commandsSize )
 801296e:	78fa      	ldrb	r2, [r7, #3]
 8012970:	78bb      	ldrb	r3, [r7, #2]
 8012972:	429a      	cmp	r2, r3
 8012974:	f4ff ab8e 	bcc.w	8012094 <ProcessMacCommands+0x30>
 8012978:	e002      	b.n	8012980 <ProcessMacCommands+0x91c>
            return;
 801297a:	bf00      	nop
 801297c:	e000      	b.n	8012980 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 801297e:	bf00      	nop
        }
    }
}
 8012980:	378c      	adds	r7, #140	; 0x8c
 8012982:	46bd      	mov	sp, r7
 8012984:	bd90      	pop	{r4, r7, pc}
 8012986:	bf00      	nop
 8012988:	12d53d80 	.word	0x12d53d80
 801298c:	20000988 	.word	0x20000988
 8012990:	20001600 	.word	0x20001600

08012994 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08e      	sub	sp, #56	; 0x38
 8012998:	af02      	add	r7, sp, #8
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	607a      	str	r2, [r7, #4]
 801299e:	461a      	mov	r2, r3
 80129a0:	460b      	mov	r3, r1
 80129a2:	72fb      	strb	r3, [r7, #11]
 80129a4:	4613      	mov	r3, r2
 80129a6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129a8:	2303      	movs	r3, #3
 80129aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 80129ae:	4b65      	ldr	r3, [pc, #404]	; (8012b44 <Send+0x1b0>)
 80129b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80129b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 80129b8:	4b62      	ldr	r3, [pc, #392]	; (8012b44 <Send+0x1b0>)
 80129ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80129be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80129c2:	4b60      	ldr	r3, [pc, #384]	; (8012b44 <Send+0x1b0>)
 80129c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129c6:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80129c8:	4b5e      	ldr	r3, [pc, #376]	; (8012b44 <Send+0x1b0>)
 80129ca:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d101      	bne.n	80129d6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80129d2:	2307      	movs	r3, #7
 80129d4:	e0b1      	b.n	8012b3a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80129d6:	4b5b      	ldr	r3, [pc, #364]	; (8012b44 <Send+0x1b0>)
 80129d8:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d102      	bne.n	80129e6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80129e0:	4b58      	ldr	r3, [pc, #352]	; (8012b44 <Send+0x1b0>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80129ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80129f0:	f36f 0303 	bfc	r3, #0, #4
 80129f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80129f8:	4b52      	ldr	r3, [pc, #328]	; (8012b44 <Send+0x1b0>)
 80129fa:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80129fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a02:	f362 13c7 	bfi	r3, r2, #7, #1
 8012a06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012a0a:	4b4e      	ldr	r3, [pc, #312]	; (8012b44 <Send+0x1b0>)
 8012a0c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d106      	bne.n	8012a22 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012a14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a18:	f043 0310 	orr.w	r3, r3, #16
 8012a1c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012a20:	e005      	b.n	8012a2e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012a22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a26:	f36f 1304 	bfc	r3, #4, #1
 8012a2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012a2e:	4b45      	ldr	r3, [pc, #276]	; (8012b44 <Send+0x1b0>)
 8012a30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d005      	beq.n	8012a44 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012a38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a3c:	f043 0320 	orr.w	r3, r3, #32
 8012a40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012a44:	2301      	movs	r3, #1
 8012a46:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012a4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	bf14      	ite	ne
 8012a56:	2301      	movne	r3, #1
 8012a58:	2300      	moveq	r3, #0
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012a5e:	4b39      	ldr	r3, [pc, #228]	; (8012b44 <Send+0x1b0>)
 8012a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a62:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012a64:	4b37      	ldr	r3, [pc, #220]	; (8012b44 <Send+0x1b0>)
 8012a66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012a6a:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012a6c:	4b35      	ldr	r3, [pc, #212]	; (8012b44 <Send+0x1b0>)
 8012a6e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012a72:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012a74:	4b33      	ldr	r3, [pc, #204]	; (8012b44 <Send+0x1b0>)
 8012a76:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012a7e:	4b31      	ldr	r3, [pc, #196]	; (8012b44 <Send+0x1b0>)
 8012a80:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012a84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a88:	4b2e      	ldr	r3, [pc, #184]	; (8012b44 <Send+0x1b0>)
 8012a8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012a92:	4b2c      	ldr	r3, [pc, #176]	; (8012b44 <Send+0x1b0>)
 8012a94:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012a9c:	4b29      	ldr	r3, [pc, #164]	; (8012b44 <Send+0x1b0>)
 8012a9e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012aa2:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012aa8:	f107 0014 	add.w	r0, r7, #20
 8012aac:	4a26      	ldr	r2, [pc, #152]	; (8012b48 <Send+0x1b4>)
 8012aae:	4927      	ldr	r1, [pc, #156]	; (8012b4c <Send+0x1b8>)
 8012ab0:	f002 fc58 	bl	8015364 <LoRaMacAdrCalcNext>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	461a      	mov	r2, r3
 8012ab8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012abc:	f362 1386 	bfi	r3, r2, #6, #1
 8012ac0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012ac4:	7afa      	ldrb	r2, [r7, #11]
 8012ac6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012aca:	893b      	ldrh	r3, [r7, #8]
 8012acc:	9300      	str	r3, [sp, #0]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	68f8      	ldr	r0, [r7, #12]
 8012ad2:	f000 fc5d 	bl	8013390 <PrepareFrame>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d003      	beq.n	8012aec <Send+0x158>
 8012ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae8:	2b0a      	cmp	r3, #10
 8012aea:	d107      	bne.n	8012afc <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012aec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012af0:	4618      	mov	r0, r3
 8012af2:	f000 f961 	bl	8012db8 <ScheduleTx>
 8012af6:	4603      	mov	r3, r0
 8012af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d00a      	beq.n	8012b1a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012b04:	4a0f      	ldr	r2, [pc, #60]	; (8012b44 <Send+0x1b0>)
 8012b06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012b0a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012b0e:	4a0d      	ldr	r2, [pc, #52]	; (8012b44 <Send+0x1b0>)
 8012b10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012b14:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012b18:	e00d      	b.n	8012b36 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012b1a:	4b0a      	ldr	r3, [pc, #40]	; (8012b44 <Send+0x1b0>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b24:	4a07      	ldr	r2, [pc, #28]	; (8012b44 <Send+0x1b0>)
 8012b26:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012b28:	f002 fee8 	bl	80158fc <LoRaMacCommandsRemoveNoneStickyCmds>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d001      	beq.n	8012b36 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012b32:	2313      	movs	r3, #19
 8012b34:	e001      	b.n	8012b3a <Send+0x1a6>
        }
    }
    return status;
 8012b36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3730      	adds	r7, #48	; 0x30
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	20000e90 	.word	0x20000e90
 8012b48:	20000ec8 	.word	0x20000ec8
 8012b4c:	20000ec9 	.word	0x20000ec9

08012b50 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b084      	sub	sp, #16
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	4603      	mov	r3, r0
 8012b58:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012b62:	2301      	movs	r3, #1
 8012b64:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012b66:	79fb      	ldrb	r3, [r7, #7]
 8012b68:	2bff      	cmp	r3, #255	; 0xff
 8012b6a:	d11f      	bne.n	8012bac <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	f7ff f941 	bl	8011df4 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012b72:	4b15      	ldr	r3, [pc, #84]	; (8012bc8 <SendReJoinReq+0x78>)
 8012b74:	2200      	movs	r2, #0
 8012b76:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012b7a:	4b13      	ldr	r3, [pc, #76]	; (8012bc8 <SendReJoinReq+0x78>)
 8012b7c:	4a13      	ldr	r2, [pc, #76]	; (8012bcc <SendReJoinReq+0x7c>)
 8012b7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012b82:	4b11      	ldr	r3, [pc, #68]	; (8012bc8 <SendReJoinReq+0x78>)
 8012b84:	22ff      	movs	r2, #255	; 0xff
 8012b86:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012b8a:	7b3b      	ldrb	r3, [r7, #12]
 8012b8c:	f36f 1347 	bfc	r3, #5, #3
 8012b90:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012b92:	7b3a      	ldrb	r2, [r7, #12]
 8012b94:	4b0c      	ldr	r3, [pc, #48]	; (8012bc8 <SendReJoinReq+0x78>)
 8012b96:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012b9a:	480d      	ldr	r0, [pc, #52]	; (8012bd0 <SendReJoinReq+0x80>)
 8012b9c:	f7fc fb1c 	bl	800f1d8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012ba0:	480c      	ldr	r0, [pc, #48]	; (8012bd4 <SendReJoinReq+0x84>)
 8012ba2:	f7fc fae9 	bl	800f178 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	73fb      	strb	r3, [r7, #15]

            break;
 8012baa:	e002      	b.n	8012bb2 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012bac:	2302      	movs	r3, #2
 8012bae:	73bb      	strb	r3, [r7, #14]
            break;
 8012bb0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012bb2:	7bfb      	ldrb	r3, [r7, #15]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f000 f8ff 	bl	8012db8 <ScheduleTx>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	73bb      	strb	r3, [r7, #14]
    return status;
 8012bbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3710      	adds	r7, #16
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	20000988 	.word	0x20000988
 8012bcc:	2000098a 	.word	0x2000098a
 8012bd0:	20000a96 	.word	0x20000a96
 8012bd4:	20000a9e 	.word	0x20000a9e

08012bd8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012bdc:	f002 fc31 	bl	8015442 <LoRaMacClassBIsBeaconExpected>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012be6:	230e      	movs	r3, #14
 8012be8:	e013      	b.n	8012c12 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012bea:	4b0b      	ldr	r3, [pc, #44]	; (8012c18 <CheckForClassBCollision+0x40>)
 8012bec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	d10d      	bne.n	8012c10 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012bf4:	f002 fc2c 	bl	8015450 <LoRaMacClassBIsPingExpected>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d001      	beq.n	8012c02 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012bfe:	230f      	movs	r3, #15
 8012c00:	e007      	b.n	8012c12 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012c02:	f002 fc2c 	bl	801545e <LoRaMacClassBIsMulticastExpected>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d001      	beq.n	8012c10 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012c0c:	230f      	movs	r3, #15
 8012c0e:	e000      	b.n	8012c12 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	20000e90 	.word	0x20000e90

08012c1c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012c1c:	b590      	push	{r4, r7, lr}
 8012c1e:	b083      	sub	sp, #12
 8012c20:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c22:	4b2d      	ldr	r3, [pc, #180]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c24:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012c28:	4b2b      	ldr	r3, [pc, #172]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c2a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012c2e:	4b2a      	ldr	r3, [pc, #168]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c30:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8012c34:	4b28      	ldr	r3, [pc, #160]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c36:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8012c3a:	4b27      	ldr	r3, [pc, #156]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c3c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012c40:	b25b      	sxtb	r3, r3
 8012c42:	f004 fcf9 	bl	8017638 <RegionApplyDrOffset>
 8012c46:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c48:	b259      	sxtb	r1, r3
 8012c4a:	4b23      	ldr	r3, [pc, #140]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c4c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012c50:	4b21      	ldr	r3, [pc, #132]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c54:	4821      	ldr	r0, [pc, #132]	; (8012cdc <ComputeRxWindowParameters+0xc0>)
 8012c56:	9000      	str	r0, [sp, #0]
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f004 fbfd 	bl	8017458 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c5e:	4b1e      	ldr	r3, [pc, #120]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c60:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012c64:	4b1c      	ldr	r3, [pc, #112]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012c6a:	b259      	sxtb	r1, r3
 8012c6c:	4b1a      	ldr	r3, [pc, #104]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c6e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012c72:	4b19      	ldr	r3, [pc, #100]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c76:	4c1a      	ldr	r4, [pc, #104]	; (8012ce0 <ComputeRxWindowParameters+0xc4>)
 8012c78:	9400      	str	r4, [sp, #0]
 8012c7a:	f004 fbed 	bl	8017458 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012c7e:	4b16      	ldr	r3, [pc, #88]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c82:	4a18      	ldr	r2, [pc, #96]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012c84:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012c88:	4413      	add	r3, r2
 8012c8a:	4a16      	ldr	r2, [pc, #88]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012c8c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012c90:	4b11      	ldr	r3, [pc, #68]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012c94:	4a13      	ldr	r2, [pc, #76]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012c96:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012c9a:	4413      	add	r3, r2
 8012c9c:	4a11      	ldr	r2, [pc, #68]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012c9e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8012ca2:	4b10      	ldr	r3, [pc, #64]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012ca4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012ca8:	2b04      	cmp	r3, #4
 8012caa:	d011      	beq.n	8012cd0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012cac:	4b0a      	ldr	r3, [pc, #40]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cb0:	4a0c      	ldr	r2, [pc, #48]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012cb2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012cb6:	4413      	add	r3, r2
 8012cb8:	4a0a      	ldr	r2, [pc, #40]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012cba:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012cbe:	4b06      	ldr	r3, [pc, #24]	; (8012cd8 <ComputeRxWindowParameters+0xbc>)
 8012cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cc2:	4a08      	ldr	r2, [pc, #32]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012cc4:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8012cc8:	4413      	add	r3, r2
 8012cca:	4a06      	ldr	r2, [pc, #24]	; (8012ce4 <ComputeRxWindowParameters+0xc8>)
 8012ccc:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012cd0:	bf00      	nop
 8012cd2:	3704      	adds	r7, #4
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd90      	pop	{r4, r7, pc}
 8012cd8:	20000e90 	.word	0x20000e90
 8012cdc:	20000d40 	.word	0x20000d40
 8012ce0:	20000d54 	.word	0x20000d54
 8012ce4:	20000988 	.word	0x20000988

08012ce8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012cf2:	4b13      	ldr	r3, [pc, #76]	; (8012d40 <VerifyTxFrame+0x58>)
 8012cf4:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d01b      	beq.n	8012d34 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012cfc:	1d3b      	adds	r3, r7, #4
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f002 fe4c 	bl	801599c <LoRaMacCommandsGetSizeSerializedCmds>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d001      	beq.n	8012d0e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d0a:	2313      	movs	r3, #19
 8012d0c:	e013      	b.n	8012d36 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8012d0e:	4b0d      	ldr	r3, [pc, #52]	; (8012d44 <VerifyTxFrame+0x5c>)
 8012d10:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012d14:	4a0a      	ldr	r2, [pc, #40]	; (8012d40 <VerifyTxFrame+0x58>)
 8012d16:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	b2d2      	uxtb	r2, r2
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff f978 	bl	8012014 <ValidatePayloadLength>
 8012d24:	4603      	mov	r3, r0
 8012d26:	f083 0301 	eor.w	r3, r3, #1
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d001      	beq.n	8012d34 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012d30:	2308      	movs	r3, #8
 8012d32:	e000      	b.n	8012d36 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3708      	adds	r7, #8
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	20000e90 	.word	0x20000e90
 8012d44:	20000988 	.word	0x20000988

08012d48 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8012d4e:	4b18      	ldr	r3, [pc, #96]	; (8012db0 <SerializeTxFrame+0x68>)
 8012d50:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <SerializeTxFrame+0x16>
 8012d58:	2b04      	cmp	r3, #4
 8012d5a:	d011      	beq.n	8012d80 <SerializeTxFrame+0x38>
 8012d5c:	e021      	b.n	8012da2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012d5e:	4815      	ldr	r0, [pc, #84]	; (8012db4 <SerializeTxFrame+0x6c>)
 8012d60:	f004 f97a 	bl	8017058 <LoRaMacSerializerJoinRequest>
 8012d64:	4603      	mov	r3, r0
 8012d66:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012d68:	79fb      	ldrb	r3, [r7, #7]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d001      	beq.n	8012d72 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d6e:	2311      	movs	r3, #17
 8012d70:	e01a      	b.n	8012da8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012d72:	4b0f      	ldr	r3, [pc, #60]	; (8012db0 <SerializeTxFrame+0x68>)
 8012d74:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012d78:	b29a      	uxth	r2, r3
 8012d7a:	4b0d      	ldr	r3, [pc, #52]	; (8012db0 <SerializeTxFrame+0x68>)
 8012d7c:	801a      	strh	r2, [r3, #0]
            break;
 8012d7e:	e012      	b.n	8012da6 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8012d80:	480c      	ldr	r0, [pc, #48]	; (8012db4 <SerializeTxFrame+0x6c>)
 8012d82:	f004 f9eb 	bl	801715c <LoRaMacSerializerData>
 8012d86:	4603      	mov	r3, r0
 8012d88:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012d8a:	79fb      	ldrb	r3, [r7, #7]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d001      	beq.n	8012d94 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012d90:	2311      	movs	r3, #17
 8012d92:	e009      	b.n	8012da8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012d94:	4b06      	ldr	r3, [pc, #24]	; (8012db0 <SerializeTxFrame+0x68>)
 8012d96:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	4b04      	ldr	r3, [pc, #16]	; (8012db0 <SerializeTxFrame+0x68>)
 8012d9e:	801a      	strh	r2, [r3, #0]
            break;
 8012da0:	e001      	b.n	8012da6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012da2:	2303      	movs	r3, #3
 8012da4:	e000      	b.n	8012da8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	20000988 	.word	0x20000988
 8012db4:	20000a90 	.word	0x20000a90

08012db8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b090      	sub	sp, #64	; 0x40
 8012dbc:	af02      	add	r7, sp, #8
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012dc2:	2303      	movs	r3, #3
 8012dc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8012dc8:	f7ff ff06 	bl	8012bd8 <CheckForClassBCollision>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012dd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <ScheduleTx+0x28>
    {
        return status;
 8012dda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dde:	e092      	b.n	8012f06 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8012de0:	f000 f8fe 	bl	8012fe0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8012de4:	f7ff ffb0 	bl	8012d48 <SerializeTxFrame>
 8012de8:	4603      	mov	r3, r0
 8012dea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012dee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d002      	beq.n	8012dfc <ScheduleTx+0x44>
    {
        return status;
 8012df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dfa:	e084      	b.n	8012f06 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8012dfc:	4b44      	ldr	r3, [pc, #272]	; (8012f10 <ScheduleTx+0x158>)
 8012dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012e00:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e02:	4b43      	ldr	r3, [pc, #268]	; (8012f10 <ScheduleTx+0x158>)
 8012e04:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012e08:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8012e0a:	4b41      	ldr	r3, [pc, #260]	; (8012f10 <ScheduleTx+0x158>)
 8012e0c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012e10:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8012e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e16:	4618      	mov	r0, r3
 8012e18:	f00a fa2c 	bl	801d274 <SysTimeGetMcuTime>
 8012e1c:	4638      	mov	r0, r7
 8012e1e:	4b3c      	ldr	r3, [pc, #240]	; (8012f10 <ScheduleTx+0x158>)
 8012e20:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8012e24:	9200      	str	r2, [sp, #0]
 8012e26:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8012e2a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012e2e:	ca06      	ldmia	r2, {r1, r2}
 8012e30:	f00a f981 	bl	801d136 <SysTimeSub>
 8012e34:	f107 0320 	add.w	r3, r7, #32
 8012e38:	463a      	mov	r2, r7
 8012e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e3e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8012e42:	4b33      	ldr	r3, [pc, #204]	; (8012f10 <ScheduleTx+0x158>)
 8012e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e46:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8012e52:	4b30      	ldr	r3, [pc, #192]	; (8012f14 <ScheduleTx+0x15c>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e58:	4b2d      	ldr	r3, [pc, #180]	; (8012f10 <ScheduleTx+0x158>)
 8012e5a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d104      	bne.n	8012e6c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8012e62:	2301      	movs	r3, #1
 8012e64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8012e6c:	4b28      	ldr	r3, [pc, #160]	; (8012f10 <ScheduleTx+0x158>)
 8012e6e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012e72:	f107 0114 	add.w	r1, r7, #20
 8012e76:	4b28      	ldr	r3, [pc, #160]	; (8012f18 <ScheduleTx+0x160>)
 8012e78:	9300      	str	r3, [sp, #0]
 8012e7a:	4b28      	ldr	r3, [pc, #160]	; (8012f1c <ScheduleTx+0x164>)
 8012e7c:	4a28      	ldr	r2, [pc, #160]	; (8012f20 <ScheduleTx+0x168>)
 8012e7e:	f004 fbb1 	bl	80175e4 <RegionNextChannel>
 8012e82:	4603      	mov	r3, r0
 8012e84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8012e88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d025      	beq.n	8012edc <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8012e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e94:	2b0b      	cmp	r3, #11
 8012e96:	d11e      	bne.n	8012ed6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012e98:	4b1e      	ldr	r3, [pc, #120]	; (8012f14 <ScheduleTx+0x15c>)
 8012e9a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d01c      	beq.n	8012edc <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8012ea2:	7bfb      	ldrb	r3, [r7, #15]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d013      	beq.n	8012ed0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012ea8:	4b1a      	ldr	r3, [pc, #104]	; (8012f14 <ScheduleTx+0x15c>)
 8012eaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012eae:	f043 0320 	orr.w	r3, r3, #32
 8012eb2:	4a18      	ldr	r2, [pc, #96]	; (8012f14 <ScheduleTx+0x15c>)
 8012eb4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012eb8:	4b16      	ldr	r3, [pc, #88]	; (8012f14 <ScheduleTx+0x15c>)
 8012eba:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	4818      	ldr	r0, [pc, #96]	; (8012f24 <ScheduleTx+0x16c>)
 8012ec2:	f00a ff77 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8012ec6:	4817      	ldr	r0, [pc, #92]	; (8012f24 <ScheduleTx+0x16c>)
 8012ec8:	f00a fe96 	bl	801dbf8 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e01a      	b.n	8012f06 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8012ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ed4:	e017      	b.n	8012f06 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eda:	e014      	b.n	8012f06 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8012edc:	f7ff fe9e 	bl	8012c1c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8012ee0:	f7ff ff02 	bl	8012ce8 <VerifyTxFrame>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8012eea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d002      	beq.n	8012ef8 <ScheduleTx+0x140>
    {
        return status;
 8012ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ef6:	e006      	b.n	8012f06 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012ef8:	4b06      	ldr	r3, [pc, #24]	; (8012f14 <ScheduleTx+0x15c>)
 8012efa:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8012efe:	4618      	mov	r0, r3
 8012f00:	f000 fb62 	bl	80135c8 <SendFrameOnChannel>
 8012f04:	4603      	mov	r3, r0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3738      	adds	r7, #56	; 0x38
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	20000e90 	.word	0x20000e90
 8012f14:	20000988 	.word	0x20000988
 8012f18:	20000ec0 	.word	0x20000ec0
 8012f1c:	20000e0c 	.word	0x20000e0c
 8012f20:	20000d99 	.word	0x20000d99
 8012f24:	20000cf0 	.word	0x20000cf0

08012f28 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b084      	sub	sp, #16
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4603      	mov	r3, r0
 8012f30:	460a      	mov	r2, r1
 8012f32:	71fb      	strb	r3, [r7, #7]
 8012f34:	4613      	mov	r3, r2
 8012f36:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012f38:	2313      	movs	r3, #19
 8012f3a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012f40:	4b25      	ldr	r3, [pc, #148]	; (8012fd8 <SecureFrame+0xb0>)
 8012f42:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d002      	beq.n	8012f50 <SecureFrame+0x28>
 8012f4a:	2b04      	cmp	r3, #4
 8012f4c:	d011      	beq.n	8012f72 <SecureFrame+0x4a>
 8012f4e:	e03b      	b.n	8012fc8 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012f50:	4822      	ldr	r0, [pc, #136]	; (8012fdc <SecureFrame+0xb4>)
 8012f52:	f003 fc47 	bl	80167e4 <LoRaMacCryptoPrepareJoinRequest>
 8012f56:	4603      	mov	r3, r0
 8012f58:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012f5a:	7bfb      	ldrb	r3, [r7, #15]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d001      	beq.n	8012f64 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f60:	2311      	movs	r3, #17
 8012f62:	e034      	b.n	8012fce <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012f64:	4b1c      	ldr	r3, [pc, #112]	; (8012fd8 <SecureFrame+0xb0>)
 8012f66:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	4b1a      	ldr	r3, [pc, #104]	; (8012fd8 <SecureFrame+0xb0>)
 8012f6e:	801a      	strh	r2, [r3, #0]
            break;
 8012f70:	e02c      	b.n	8012fcc <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012f72:	f107 0308 	add.w	r3, r7, #8
 8012f76:	4618      	mov	r0, r3
 8012f78:	f003 fb44 	bl	8016604 <LoRaMacCryptoGetFCntUp>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d001      	beq.n	8012f86 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012f82:	2312      	movs	r3, #18
 8012f84:	e023      	b.n	8012fce <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8012f86:	4b14      	ldr	r3, [pc, #80]	; (8012fd8 <SecureFrame+0xb0>)
 8012f88:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d104      	bne.n	8012f9a <SecureFrame+0x72>
 8012f90:	4b11      	ldr	r3, [pc, #68]	; (8012fd8 <SecureFrame+0xb0>)
 8012f92:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d902      	bls.n	8012fa0 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	3b01      	subs	r3, #1
 8012f9e:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012fa0:	68b8      	ldr	r0, [r7, #8]
 8012fa2:	79ba      	ldrb	r2, [r7, #6]
 8012fa4:	79f9      	ldrb	r1, [r7, #7]
 8012fa6:	4b0d      	ldr	r3, [pc, #52]	; (8012fdc <SecureFrame+0xb4>)
 8012fa8:	f003 fd4a 	bl	8016a40 <LoRaMacCryptoSecureMessage>
 8012fac:	4603      	mov	r3, r0
 8012fae:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012fb0:	7bfb      	ldrb	r3, [r7, #15]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012fb6:	2311      	movs	r3, #17
 8012fb8:	e009      	b.n	8012fce <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012fba:	4b07      	ldr	r3, [pc, #28]	; (8012fd8 <SecureFrame+0xb0>)
 8012fbc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	4b05      	ldr	r3, [pc, #20]	; (8012fd8 <SecureFrame+0xb0>)
 8012fc4:	801a      	strh	r2, [r3, #0]
            break;
 8012fc6:	e001      	b.n	8012fcc <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012fc8:	2303      	movs	r3, #3
 8012fca:	e000      	b.n	8012fce <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8012fcc:	2300      	movs	r3, #0
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3710      	adds	r7, #16
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	20000988 	.word	0x20000988
 8012fdc:	20000a90 	.word	0x20000a90

08012fe0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8012fe4:	4b09      	ldr	r3, [pc, #36]	; (801300c <CalculateBackOff+0x2c>)
 8012fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10a      	bne.n	8013002 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012fec:	4b07      	ldr	r3, [pc, #28]	; (801300c <CalculateBackOff+0x2c>)
 8012fee:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8012ff2:	3b01      	subs	r3, #1
 8012ff4:	4a06      	ldr	r2, [pc, #24]	; (8013010 <CalculateBackOff+0x30>)
 8012ff6:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 8012ffa:	fb02 f303 	mul.w	r3, r2, r3
 8012ffe:	4a03      	ldr	r2, [pc, #12]	; (801300c <CalculateBackOff+0x2c>)
 8013000:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013002:	bf00      	nop
 8013004:	46bd      	mov	sp, r7
 8013006:	bc80      	pop	{r7}
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop
 801300c:	20000e90 	.word	0x20000e90
 8013010:	20000988 	.word	0x20000988

08013014 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
 801301a:	4603      	mov	r3, r0
 801301c:	7139      	strb	r1, [r7, #4]
 801301e:	71fb      	strb	r3, [r7, #7]
 8013020:	4613      	mov	r3, r2
 8013022:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013024:	79fb      	ldrb	r3, [r7, #7]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d002      	beq.n	8013030 <RemoveMacCommands+0x1c>
 801302a:	79fb      	ldrb	r3, [r7, #7]
 801302c:	2b01      	cmp	r3, #1
 801302e:	d10d      	bne.n	801304c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013030:	79bb      	ldrb	r3, [r7, #6]
 8013032:	2b01      	cmp	r3, #1
 8013034:	d108      	bne.n	8013048 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013036:	793b      	ldrb	r3, [r7, #4]
 8013038:	f003 0320 	and.w	r3, r3, #32
 801303c:	b2db      	uxtb	r3, r3
 801303e:	2b00      	cmp	r3, #0
 8013040:	d004      	beq.n	801304c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013042:	f002 fc7f 	bl	8015944 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013046:	e001      	b.n	801304c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013048:	f002 fc7c 	bl	8015944 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801304c:	bf00      	nop
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8013054:	b5b0      	push	{r4, r5, r7, lr}
 8013056:	b090      	sub	sp, #64	; 0x40
 8013058:	af00      	add	r7, sp, #0
 801305a:	4603      	mov	r3, r0
 801305c:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 801305e:	79fb      	ldrb	r3, [r7, #7]
 8013060:	f083 0301 	eor.w	r3, r3, #1
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b00      	cmp	r3, #0
 8013068:	d003      	beq.n	8013072 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801306a:	4b80      	ldr	r3, [pc, #512]	; (801326c <ResetMacParameters+0x218>)
 801306c:	2200      	movs	r2, #0
 801306e:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013072:	4b7e      	ldr	r3, [pc, #504]	; (801326c <ResetMacParameters+0x218>)
 8013074:	2200      	movs	r2, #0
 8013076:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013078:	4b7d      	ldr	r3, [pc, #500]	; (8013270 <ResetMacParameters+0x21c>)
 801307a:	2200      	movs	r2, #0
 801307c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 8013080:	4b7b      	ldr	r3, [pc, #492]	; (8013270 <ResetMacParameters+0x21c>)
 8013082:	2201      	movs	r2, #1
 8013084:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013088:	4b79      	ldr	r3, [pc, #484]	; (8013270 <ResetMacParameters+0x21c>)
 801308a:	2201      	movs	r2, #1
 801308c:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8013090:	4b77      	ldr	r3, [pc, #476]	; (8013270 <ResetMacParameters+0x21c>)
 8013092:	2200      	movs	r2, #0
 8013094:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013098:	4b74      	ldr	r3, [pc, #464]	; (801326c <ResetMacParameters+0x218>)
 801309a:	2200      	movs	r2, #0
 801309c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80130a0:	4b72      	ldr	r3, [pc, #456]	; (801326c <ResetMacParameters+0x218>)
 80130a2:	2201      	movs	r2, #1
 80130a4:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80130a8:	4b70      	ldr	r3, [pc, #448]	; (801326c <ResetMacParameters+0x218>)
 80130aa:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80130ae:	4b6f      	ldr	r3, [pc, #444]	; (801326c <ResetMacParameters+0x218>)
 80130b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80130b4:	4b6d      	ldr	r3, [pc, #436]	; (801326c <ResetMacParameters+0x218>)
 80130b6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80130ba:	4b6c      	ldr	r3, [pc, #432]	; (801326c <ResetMacParameters+0x218>)
 80130bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80130c0:	4b6a      	ldr	r3, [pc, #424]	; (801326c <ResetMacParameters+0x218>)
 80130c2:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80130c6:	4b69      	ldr	r3, [pc, #420]	; (801326c <ResetMacParameters+0x218>)
 80130c8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80130cc:	4b67      	ldr	r3, [pc, #412]	; (801326c <ResetMacParameters+0x218>)
 80130ce:	4a67      	ldr	r2, [pc, #412]	; (801326c <ResetMacParameters+0x218>)
 80130d0:	336c      	adds	r3, #108	; 0x6c
 80130d2:	32b4      	adds	r2, #180	; 0xb4
 80130d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130d8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80130dc:	4b63      	ldr	r3, [pc, #396]	; (801326c <ResetMacParameters+0x218>)
 80130de:	4a63      	ldr	r2, [pc, #396]	; (801326c <ResetMacParameters+0x218>)
 80130e0:	3374      	adds	r3, #116	; 0x74
 80130e2:	32bc      	adds	r2, #188	; 0xbc
 80130e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80130e8:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80130ec:	4b5f      	ldr	r3, [pc, #380]	; (801326c <ResetMacParameters+0x218>)
 80130ee:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80130f2:	4b5e      	ldr	r3, [pc, #376]	; (801326c <ResetMacParameters+0x218>)
 80130f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80130f8:	4b5c      	ldr	r3, [pc, #368]	; (801326c <ResetMacParameters+0x218>)
 80130fa:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80130fe:	4b5b      	ldr	r3, [pc, #364]	; (801326c <ResetMacParameters+0x218>)
 8013100:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013104:	4b59      	ldr	r3, [pc, #356]	; (801326c <ResetMacParameters+0x218>)
 8013106:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801310a:	4a58      	ldr	r2, [pc, #352]	; (801326c <ResetMacParameters+0x218>)
 801310c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013110:	4b56      	ldr	r3, [pc, #344]	; (801326c <ResetMacParameters+0x218>)
 8013112:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013116:	4a55      	ldr	r2, [pc, #340]	; (801326c <ResetMacParameters+0x218>)
 8013118:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801311c:	4b53      	ldr	r3, [pc, #332]	; (801326c <ResetMacParameters+0x218>)
 801311e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8013122:	4b52      	ldr	r3, [pc, #328]	; (801326c <ResetMacParameters+0x218>)
 8013124:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013128:	4b50      	ldr	r3, [pc, #320]	; (801326c <ResetMacParameters+0x218>)
 801312a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801312e:	4b4f      	ldr	r3, [pc, #316]	; (801326c <ResetMacParameters+0x218>)
 8013130:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8013134:	4b4e      	ldr	r3, [pc, #312]	; (8013270 <ResetMacParameters+0x21c>)
 8013136:	2200      	movs	r2, #0
 8013138:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 801313c:	4b4b      	ldr	r3, [pc, #300]	; (801326c <ResetMacParameters+0x218>)
 801313e:	2200      	movs	r2, #0
 8013140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8013144:	4b49      	ldr	r3, [pc, #292]	; (801326c <ResetMacParameters+0x218>)
 8013146:	2200      	movs	r2, #0
 8013148:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 801314c:	4b47      	ldr	r3, [pc, #284]	; (801326c <ResetMacParameters+0x218>)
 801314e:	2200      	movs	r2, #0
 8013150:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 8013154:	4b45      	ldr	r3, [pc, #276]	; (801326c <ResetMacParameters+0x218>)
 8013156:	2200      	movs	r2, #0
 8013158:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 801315c:	4b43      	ldr	r3, [pc, #268]	; (801326c <ResetMacParameters+0x218>)
 801315e:	2200      	movs	r2, #0
 8013160:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8013164:	4b41      	ldr	r3, [pc, #260]	; (801326c <ResetMacParameters+0x218>)
 8013166:	2200      	movs	r2, #0
 8013168:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 801316c:	4b3f      	ldr	r3, [pc, #252]	; (801326c <ResetMacParameters+0x218>)
 801316e:	2200      	movs	r2, #0
 8013170:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8013174:	4b3d      	ldr	r3, [pc, #244]	; (801326c <ResetMacParameters+0x218>)
 8013176:	2200      	movs	r2, #0
 8013178:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 801317c:	4b3b      	ldr	r3, [pc, #236]	; (801326c <ResetMacParameters+0x218>)
 801317e:	2200      	movs	r2, #0
 8013180:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8013184:	2301      	movs	r3, #1
 8013186:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013188:	4b3a      	ldr	r3, [pc, #232]	; (8013274 <ResetMacParameters+0x220>)
 801318a:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801318c:	4b3a      	ldr	r3, [pc, #232]	; (8013278 <ResetMacParameters+0x224>)
 801318e:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013190:	4b36      	ldr	r3, [pc, #216]	; (801326c <ResetMacParameters+0x218>)
 8013192:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013196:	f107 020c 	add.w	r2, r7, #12
 801319a:	4611      	mov	r1, r2
 801319c:	4618      	mov	r0, r3
 801319e:	f004 f90d 	bl	80173bc <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80131a2:	4b33      	ldr	r3, [pc, #204]	; (8013270 <ResetMacParameters+0x21c>)
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80131aa:	4b31      	ldr	r3, [pc, #196]	; (8013270 <ResetMacParameters+0x21c>)
 80131ac:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80131b0:	4b2f      	ldr	r3, [pc, #188]	; (8013270 <ResetMacParameters+0x21c>)
 80131b2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80131b6:	4b2d      	ldr	r3, [pc, #180]	; (801326c <ResetMacParameters+0x218>)
 80131b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131ba:	4a2d      	ldr	r2, [pc, #180]	; (8013270 <ResetMacParameters+0x21c>)
 80131bc:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80131c0:	4b2a      	ldr	r3, [pc, #168]	; (801326c <ResetMacParameters+0x218>)
 80131c2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80131c6:	4b2a      	ldr	r3, [pc, #168]	; (8013270 <ResetMacParameters+0x21c>)
 80131c8:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80131cc:	4b27      	ldr	r3, [pc, #156]	; (801326c <ResetMacParameters+0x218>)
 80131ce:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80131d2:	4b27      	ldr	r3, [pc, #156]	; (8013270 <ResetMacParameters+0x21c>)
 80131d4:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 80131d8:	4b25      	ldr	r3, [pc, #148]	; (8013270 <ResetMacParameters+0x21c>)
 80131da:	2200      	movs	r2, #0
 80131dc:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80131e0:	4b23      	ldr	r3, [pc, #140]	; (8013270 <ResetMacParameters+0x21c>)
 80131e2:	2201      	movs	r2, #1
 80131e4:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80131e8:	4a21      	ldr	r2, [pc, #132]	; (8013270 <ResetMacParameters+0x21c>)
 80131ea:	4b21      	ldr	r3, [pc, #132]	; (8013270 <ResetMacParameters+0x21c>)
 80131ec:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80131f0:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80131f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80131f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80131f8:	682b      	ldr	r3, [r5, #0]
 80131fa:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80131fc:	4b1c      	ldr	r3, [pc, #112]	; (8013270 <ResetMacParameters+0x21c>)
 80131fe:	2201      	movs	r2, #1
 8013200:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013204:	4b1a      	ldr	r3, [pc, #104]	; (8013270 <ResetMacParameters+0x21c>)
 8013206:	2202      	movs	r2, #2
 8013208:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801320c:	2300      	movs	r3, #0
 801320e:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8013210:	2300      	movs	r3, #0
 8013212:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8013214:	4b16      	ldr	r3, [pc, #88]	; (8013270 <ResetMacParameters+0x21c>)
 8013216:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801321a:	2b00      	cmp	r3, #0
 801321c:	d009      	beq.n	8013232 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801321e:	4b14      	ldr	r3, [pc, #80]	; (8013270 <ResetMacParameters+0x21c>)
 8013220:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013228:	4b11      	ldr	r3, [pc, #68]	; (8013270 <ResetMacParameters+0x21c>)
 801322a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801322e:	695b      	ldr	r3, [r3, #20]
 8013230:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013232:	4b12      	ldr	r3, [pc, #72]	; (801327c <ResetMacParameters+0x228>)
 8013234:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013236:	4b12      	ldr	r3, [pc, #72]	; (8013280 <ResetMacParameters+0x22c>)
 8013238:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801323a:	4b12      	ldr	r3, [pc, #72]	; (8013284 <ResetMacParameters+0x230>)
 801323c:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801323e:	4b12      	ldr	r3, [pc, #72]	; (8013288 <ResetMacParameters+0x234>)
 8013240:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8013242:	4b12      	ldr	r3, [pc, #72]	; (801328c <ResetMacParameters+0x238>)
 8013244:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013246:	4b12      	ldr	r3, [pc, #72]	; (8013290 <ResetMacParameters+0x23c>)
 8013248:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 801324a:	4b12      	ldr	r3, [pc, #72]	; (8013294 <ResetMacParameters+0x240>)
 801324c:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801324e:	4b12      	ldr	r3, [pc, #72]	; (8013298 <ResetMacParameters+0x244>)
 8013250:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013256:	f107 0318 	add.w	r3, r7, #24
 801325a:	4a10      	ldr	r2, [pc, #64]	; (801329c <ResetMacParameters+0x248>)
 801325c:	4618      	mov	r0, r3
 801325e:	f002 f899 	bl	8015394 <LoRaMacClassBInit>
}
 8013262:	bf00      	nop
 8013264:	3740      	adds	r7, #64	; 0x40
 8013266:	46bd      	mov	sp, r7
 8013268:	bdb0      	pop	{r4, r5, r7, pc}
 801326a:	bf00      	nop
 801326c:	20000e90 	.word	0x20000e90
 8013270:	20000988 	.word	0x20000988
 8013274:	200010b0 	.word	0x200010b0
 8013278:	20001144 	.word	0x20001144
 801327c:	20000de4 	.word	0x20000de4
 8013280:	20000da0 	.word	0x20000da0
 8013284:	20000dd0 	.word	0x20000dd0
 8013288:	20000e09 	.word	0x20000e09
 801328c:	20000f74 	.word	0x20000f74
 8013290:	20000ed8 	.word	0x20000ed8
 8013294:	20000edc 	.word	0x20000edc
 8013298:	20000f78 	.word	0x20000f78
 801329c:	200015e0 	.word	0x200015e0

080132a0 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f00a fd12 	bl	801dcd4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80132b0:	4b11      	ldr	r3, [pc, #68]	; (80132f8 <RxWindowSetup+0x58>)
 80132b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b4:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80132b6:	4b11      	ldr	r3, [pc, #68]	; (80132fc <RxWindowSetup+0x5c>)
 80132b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80132bc:	4a10      	ldr	r2, [pc, #64]	; (8013300 <RxWindowSetup+0x60>)
 80132be:	6839      	ldr	r1, [r7, #0]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f004 f8e3 	bl	801748c <RegionRxConfig>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d010      	beq.n	80132ee <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80132cc:	4b0d      	ldr	r3, [pc, #52]	; (8013304 <RxWindowSetup+0x64>)
 80132ce:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80132d2:	4b0c      	ldr	r3, [pc, #48]	; (8013304 <RxWindowSetup+0x64>)
 80132d4:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80132d8:	4b07      	ldr	r3, [pc, #28]	; (80132f8 <RxWindowSetup+0x58>)
 80132da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132dc:	4a07      	ldr	r2, [pc, #28]	; (80132fc <RxWindowSetup+0x5c>)
 80132de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80132e0:	4610      	mov	r0, r2
 80132e2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	7cda      	ldrb	r2, [r3, #19]
 80132e8:	4b06      	ldr	r3, [pc, #24]	; (8013304 <RxWindowSetup+0x64>)
 80132ea:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80132ee:	bf00      	nop
 80132f0:	3708      	adds	r7, #8
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	0801f578 	.word	0x0801f578
 80132fc:	20000e90 	.word	0x20000e90
 8013300:	20000da4 	.word	0x20000da4
 8013304:	20000988 	.word	0x20000988

08013308 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013308:	b590      	push	{r4, r7, lr}
 801330a:	b083      	sub	sp, #12
 801330c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801330e:	4b1b      	ldr	r3, [pc, #108]	; (801337c <OpenContinuousRxCWindow+0x74>)
 8013310:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013314:	4b19      	ldr	r3, [pc, #100]	; (801337c <OpenContinuousRxCWindow+0x74>)
 8013316:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801331a:	b259      	sxtb	r1, r3
 801331c:	4b17      	ldr	r3, [pc, #92]	; (801337c <OpenContinuousRxCWindow+0x74>)
 801331e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013322:	4b16      	ldr	r3, [pc, #88]	; (801337c <OpenContinuousRxCWindow+0x74>)
 8013324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013326:	4c16      	ldr	r4, [pc, #88]	; (8013380 <OpenContinuousRxCWindow+0x78>)
 8013328:	9400      	str	r4, [sp, #0]
 801332a:	f004 f895 	bl	8017458 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801332e:	4b15      	ldr	r3, [pc, #84]	; (8013384 <OpenContinuousRxCWindow+0x7c>)
 8013330:	2202      	movs	r2, #2
 8013332:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013336:	4b13      	ldr	r3, [pc, #76]	; (8013384 <OpenContinuousRxCWindow+0x7c>)
 8013338:	2201      	movs	r2, #1
 801333a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801333e:	4b0f      	ldr	r3, [pc, #60]	; (801337c <OpenContinuousRxCWindow+0x74>)
 8013340:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013344:	4a10      	ldr	r2, [pc, #64]	; (8013388 <OpenContinuousRxCWindow+0x80>)
 8013346:	490e      	ldr	r1, [pc, #56]	; (8013380 <OpenContinuousRxCWindow+0x78>)
 8013348:	4618      	mov	r0, r3
 801334a:	f004 f89f 	bl	801748c <RegionRxConfig>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d00f      	beq.n	8013374 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013354:	4b0b      	ldr	r3, [pc, #44]	; (8013384 <OpenContinuousRxCWindow+0x7c>)
 8013356:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 801335a:	4b0a      	ldr	r3, [pc, #40]	; (8013384 <OpenContinuousRxCWindow+0x7c>)
 801335c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 8013360:	4b0a      	ldr	r3, [pc, #40]	; (801338c <OpenContinuousRxCWindow+0x84>)
 8013362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013364:	2000      	movs	r0, #0
 8013366:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8013368:	4b06      	ldr	r3, [pc, #24]	; (8013384 <OpenContinuousRxCWindow+0x7c>)
 801336a:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 801336e:	4b05      	ldr	r3, [pc, #20]	; (8013384 <OpenContinuousRxCWindow+0x7c>)
 8013370:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013374:	bf00      	nop
 8013376:	3704      	adds	r7, #4
 8013378:	46bd      	mov	sp, r7
 801337a:	bd90      	pop	{r4, r7, pc}
 801337c:	20000e90 	.word	0x20000e90
 8013380:	20000d68 	.word	0x20000d68
 8013384:	20000988 	.word	0x20000988
 8013388:	20000da4 	.word	0x20000da4
 801338c:	0801f578 	.word	0x0801f578

08013390 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b088      	sub	sp, #32
 8013394:	af00      	add	r7, sp, #0
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	603b      	str	r3, [r7, #0]
 801339c:	4613      	mov	r3, r2
 801339e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80133a0:	4b82      	ldr	r3, [pc, #520]	; (80135ac <PrepareFrame+0x21c>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80133a6:	4b81      	ldr	r3, [pc, #516]	; (80135ac <PrepareFrame+0x21c>)
 80133a8:	2200      	movs	r2, #0
 80133aa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 80133ae:	2300      	movs	r3, #0
 80133b0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80133b2:	2300      	movs	r3, #0
 80133b4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80133b6:	2300      	movs	r3, #0
 80133b8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d101      	bne.n	80133c4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80133c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80133c6:	461a      	mov	r2, r3
 80133c8:	6839      	ldr	r1, [r7, #0]
 80133ca:	4879      	ldr	r0, [pc, #484]	; (80135b0 <PrepareFrame+0x220>)
 80133cc:	f006 fae7 	bl	801999e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80133d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80133d2:	b2da      	uxtb	r2, r3
 80133d4:	4b75      	ldr	r3, [pc, #468]	; (80135ac <PrepareFrame+0x21c>)
 80133d6:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	781a      	ldrb	r2, [r3, #0]
 80133de:	4b73      	ldr	r3, [pc, #460]	; (80135ac <PrepareFrame+0x21c>)
 80133e0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80133ea:	b2db      	uxtb	r3, r3
 80133ec:	2b07      	cmp	r3, #7
 80133ee:	f000 80b9 	beq.w	8013564 <PrepareFrame+0x1d4>
 80133f2:	2b07      	cmp	r3, #7
 80133f4:	f300 80d0 	bgt.w	8013598 <PrepareFrame+0x208>
 80133f8:	2b02      	cmp	r3, #2
 80133fa:	d006      	beq.n	801340a <PrepareFrame+0x7a>
 80133fc:	2b04      	cmp	r3, #4
 80133fe:	f040 80cb 	bne.w	8013598 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013402:	4b6a      	ldr	r3, [pc, #424]	; (80135ac <PrepareFrame+0x21c>)
 8013404:	2201      	movs	r2, #1
 8013406:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801340a:	4b68      	ldr	r3, [pc, #416]	; (80135ac <PrepareFrame+0x21c>)
 801340c:	2204      	movs	r2, #4
 801340e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013412:	4b66      	ldr	r3, [pc, #408]	; (80135ac <PrepareFrame+0x21c>)
 8013414:	4a67      	ldr	r2, [pc, #412]	; (80135b4 <PrepareFrame+0x224>)
 8013416:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801341a:	4b64      	ldr	r3, [pc, #400]	; (80135ac <PrepareFrame+0x21c>)
 801341c:	22ff      	movs	r2, #255	; 0xff
 801341e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	781a      	ldrb	r2, [r3, #0]
 8013426:	4b61      	ldr	r3, [pc, #388]	; (80135ac <PrepareFrame+0x21c>)
 8013428:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801342c:	4a5f      	ldr	r2, [pc, #380]	; (80135ac <PrepareFrame+0x21c>)
 801342e:	79fb      	ldrb	r3, [r7, #7]
 8013430:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013434:	4b60      	ldr	r3, [pc, #384]	; (80135b8 <PrepareFrame+0x228>)
 8013436:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801343a:	4a5c      	ldr	r2, [pc, #368]	; (80135ac <PrepareFrame+0x21c>)
 801343c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	781a      	ldrb	r2, [r3, #0]
 8013444:	4b59      	ldr	r3, [pc, #356]	; (80135ac <PrepareFrame+0x21c>)
 8013446:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801344a:	4b58      	ldr	r3, [pc, #352]	; (80135ac <PrepareFrame+0x21c>)
 801344c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013450:	4b56      	ldr	r3, [pc, #344]	; (80135ac <PrepareFrame+0x21c>)
 8013452:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013456:	4b55      	ldr	r3, [pc, #340]	; (80135ac <PrepareFrame+0x21c>)
 8013458:	4a55      	ldr	r2, [pc, #340]	; (80135b0 <PrepareFrame+0x220>)
 801345a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801345e:	f107 0318 	add.w	r3, r7, #24
 8013462:	4618      	mov	r0, r3
 8013464:	f003 f8ce 	bl	8016604 <LoRaMacCryptoGetFCntUp>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801346e:	2312      	movs	r3, #18
 8013470:	e098      	b.n	80135a4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	b29a      	uxth	r2, r3
 8013476:	4b4d      	ldr	r3, [pc, #308]	; (80135ac <PrepareFrame+0x21c>)
 8013478:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 801347c:	4b4b      	ldr	r3, [pc, #300]	; (80135ac <PrepareFrame+0x21c>)
 801347e:	2200      	movs	r2, #0
 8013480:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013484:	4b49      	ldr	r3, [pc, #292]	; (80135ac <PrepareFrame+0x21c>)
 8013486:	2200      	movs	r2, #0
 8013488:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	4a47      	ldr	r2, [pc, #284]	; (80135ac <PrepareFrame+0x21c>)
 8013490:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013494:	f107 0314 	add.w	r3, r7, #20
 8013498:	4618      	mov	r0, r3
 801349a:	f002 fa7f 	bl	801599c <LoRaMacCommandsGetSizeSerializedCmds>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d001      	beq.n	80134a8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134a4:	2313      	movs	r3, #19
 80134a6:	e07d      	b.n	80135a4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d076      	beq.n	801359c <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80134ae:	4b42      	ldr	r3, [pc, #264]	; (80135b8 <PrepareFrame+0x228>)
 80134b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fe fd85 	bl	8011fc4 <GetMaxAppPayloadWithoutFOptsLength>
 80134ba:	4603      	mov	r3, r0
 80134bc:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80134be:	4b3b      	ldr	r3, [pc, #236]	; (80135ac <PrepareFrame+0x21c>)
 80134c0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d01d      	beq.n	8013504 <PrepareFrame+0x174>
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	2b0f      	cmp	r3, #15
 80134cc:	d81a      	bhi.n	8013504 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80134ce:	f107 0314 	add.w	r3, r7, #20
 80134d2:	4a3a      	ldr	r2, [pc, #232]	; (80135bc <PrepareFrame+0x22c>)
 80134d4:	4619      	mov	r1, r3
 80134d6:	200f      	movs	r0, #15
 80134d8:	f002 fa76 	bl	80159c8 <LoRaMacCommandsSerializeCmds>
 80134dc:	4603      	mov	r3, r0
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d001      	beq.n	80134e6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134e2:	2313      	movs	r3, #19
 80134e4:	e05e      	b.n	80135a4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	f003 030f 	and.w	r3, r3, #15
 80134ec:	b2d9      	uxtb	r1, r3
 80134ee:	68ba      	ldr	r2, [r7, #8]
 80134f0:	7813      	ldrb	r3, [r2, #0]
 80134f2:	f361 0303 	bfi	r3, r1, #0, #4
 80134f6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	781a      	ldrb	r2, [r3, #0]
 80134fc:	4b2b      	ldr	r3, [pc, #172]	; (80135ac <PrepareFrame+0x21c>)
 80134fe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013502:	e04b      	b.n	801359c <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013504:	4b29      	ldr	r3, [pc, #164]	; (80135ac <PrepareFrame+0x21c>)
 8013506:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801350a:	2b00      	cmp	r3, #0
 801350c:	d010      	beq.n	8013530 <PrepareFrame+0x1a0>
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	2b0f      	cmp	r3, #15
 8013512:	d90d      	bls.n	8013530 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013514:	7ffb      	ldrb	r3, [r7, #31]
 8013516:	f107 0114 	add.w	r1, r7, #20
 801351a:	4a29      	ldr	r2, [pc, #164]	; (80135c0 <PrepareFrame+0x230>)
 801351c:	4618      	mov	r0, r3
 801351e:	f002 fa53 	bl	80159c8 <LoRaMacCommandsSerializeCmds>
 8013522:	4603      	mov	r3, r0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d001      	beq.n	801352c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013528:	2313      	movs	r3, #19
 801352a:	e03b      	b.n	80135a4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801352c:	230a      	movs	r3, #10
 801352e:	e039      	b.n	80135a4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013530:	7ffb      	ldrb	r3, [r7, #31]
 8013532:	f107 0114 	add.w	r1, r7, #20
 8013536:	4a22      	ldr	r2, [pc, #136]	; (80135c0 <PrepareFrame+0x230>)
 8013538:	4618      	mov	r0, r3
 801353a:	f002 fa45 	bl	80159c8 <LoRaMacCommandsSerializeCmds>
 801353e:	4603      	mov	r3, r0
 8013540:	2b00      	cmp	r3, #0
 8013542:	d001      	beq.n	8013548 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013544:	2313      	movs	r3, #19
 8013546:	e02d      	b.n	80135a4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013548:	4b18      	ldr	r3, [pc, #96]	; (80135ac <PrepareFrame+0x21c>)
 801354a:	2200      	movs	r2, #0
 801354c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013550:	4b16      	ldr	r3, [pc, #88]	; (80135ac <PrepareFrame+0x21c>)
 8013552:	4a1b      	ldr	r2, [pc, #108]	; (80135c0 <PrepareFrame+0x230>)
 8013554:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	b2da      	uxtb	r2, r3
 801355c:	4b13      	ldr	r3, [pc, #76]	; (80135ac <PrepareFrame+0x21c>)
 801355e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013562:	e01b      	b.n	801359c <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d01a      	beq.n	80135a0 <PrepareFrame+0x210>
 801356a:	4b10      	ldr	r3, [pc, #64]	; (80135ac <PrepareFrame+0x21c>)
 801356c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013570:	2b00      	cmp	r3, #0
 8013572:	d015      	beq.n	80135a0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013574:	4813      	ldr	r0, [pc, #76]	; (80135c4 <PrepareFrame+0x234>)
 8013576:	4b0d      	ldr	r3, [pc, #52]	; (80135ac <PrepareFrame+0x21c>)
 8013578:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801357c:	b29b      	uxth	r3, r3
 801357e:	461a      	mov	r2, r3
 8013580:	6839      	ldr	r1, [r7, #0]
 8013582:	f006 fa0c 	bl	801999e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013586:	4b09      	ldr	r3, [pc, #36]	; (80135ac <PrepareFrame+0x21c>)
 8013588:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801358c:	b29b      	uxth	r3, r3
 801358e:	3301      	adds	r3, #1
 8013590:	b29a      	uxth	r2, r3
 8013592:	4b06      	ldr	r3, [pc, #24]	; (80135ac <PrepareFrame+0x21c>)
 8013594:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013596:	e003      	b.n	80135a0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013598:	2302      	movs	r3, #2
 801359a:	e003      	b.n	80135a4 <PrepareFrame+0x214>
            break;
 801359c:	bf00      	nop
 801359e:	e000      	b.n	80135a2 <PrepareFrame+0x212>
            break;
 80135a0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	3720      	adds	r7, #32
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	20000988 	.word	0x20000988
 80135b0:	20000ac0 	.word	0x20000ac0
 80135b4:	2000098a 	.word	0x2000098a
 80135b8:	20000e90 	.word	0x20000e90
 80135bc:	20000aa0 	.word	0x20000aa0
 80135c0:	20000e10 	.word	0x20000e10
 80135c4:	2000098b 	.word	0x2000098b

080135c8 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b08a      	sub	sp, #40	; 0x28
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80135d2:	2303      	movs	r3, #3
 80135d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80135d8:	2300      	movs	r3, #0
 80135da:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80135dc:	79fb      	ldrb	r3, [r7, #7]
 80135de:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80135e0:	4b48      	ldr	r3, [pc, #288]	; (8013704 <SendFrameOnChannel+0x13c>)
 80135e2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80135e6:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80135e8:	4b46      	ldr	r3, [pc, #280]	; (8013704 <SendFrameOnChannel+0x13c>)
 80135ea:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80135ee:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80135f0:	4b44      	ldr	r3, [pc, #272]	; (8013704 <SendFrameOnChannel+0x13c>)
 80135f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80135f6:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80135f8:	4b42      	ldr	r3, [pc, #264]	; (8013704 <SendFrameOnChannel+0x13c>)
 80135fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80135fe:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013600:	4b41      	ldr	r3, [pc, #260]	; (8013708 <SendFrameOnChannel+0x140>)
 8013602:	881b      	ldrh	r3, [r3, #0]
 8013604:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013606:	4b3f      	ldr	r3, [pc, #252]	; (8013704 <SendFrameOnChannel+0x13c>)
 8013608:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801360c:	f107 020f 	add.w	r2, r7, #15
 8013610:	f107 0110 	add.w	r1, r7, #16
 8013614:	4b3d      	ldr	r3, [pc, #244]	; (801370c <SendFrameOnChannel+0x144>)
 8013616:	f003 ff4e 	bl	80174b6 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801361a:	4b3b      	ldr	r3, [pc, #236]	; (8013708 <SendFrameOnChannel+0x140>)
 801361c:	2201      	movs	r2, #1
 801361e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013622:	4b38      	ldr	r3, [pc, #224]	; (8013704 <SendFrameOnChannel+0x13c>)
 8013624:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013628:	b2da      	uxtb	r2, r3
 801362a:	4b37      	ldr	r3, [pc, #220]	; (8013708 <SendFrameOnChannel+0x140>)
 801362c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013630:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013634:	4b34      	ldr	r3, [pc, #208]	; (8013708 <SendFrameOnChannel+0x140>)
 8013636:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	4a32      	ldr	r2, [pc, #200]	; (8013708 <SendFrameOnChannel+0x140>)
 801363e:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013642:	4b31      	ldr	r3, [pc, #196]	; (8013708 <SendFrameOnChannel+0x140>)
 8013644:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013648:	4a2f      	ldr	r2, [pc, #188]	; (8013708 <SendFrameOnChannel+0x140>)
 801364a:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801364e:	4b2e      	ldr	r3, [pc, #184]	; (8013708 <SendFrameOnChannel+0x140>)
 8013650:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013654:	4a2c      	ldr	r2, [pc, #176]	; (8013708 <SendFrameOnChannel+0x140>)
 8013656:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801365a:	f001 ff07 	bl	801546c <LoRaMacClassBIsBeaconModeActive>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d00b      	beq.n	801367c <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013664:	4b28      	ldr	r3, [pc, #160]	; (8013708 <SendFrameOnChannel+0x140>)
 8013666:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 801366a:	4618      	mov	r0, r3
 801366c:	f001 ff69 	bl	8015542 <LoRaMacClassBIsUplinkCollision>
 8013670:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013672:	6a3b      	ldr	r3, [r7, #32]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d001      	beq.n	801367c <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013678:	2310      	movs	r3, #16
 801367a:	e03e      	b.n	80136fa <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801367c:	4b21      	ldr	r3, [pc, #132]	; (8013704 <SendFrameOnChannel+0x13c>)
 801367e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013682:	2b01      	cmp	r3, #1
 8013684:	d101      	bne.n	801368a <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013686:	f001 ff66 	bl	8015556 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801368a:	f001 ff00 	bl	801548e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801368e:	4b1d      	ldr	r3, [pc, #116]	; (8013704 <SendFrameOnChannel+0x13c>)
 8013690:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013694:	b2db      	uxtb	r3, r3
 8013696:	4a1c      	ldr	r2, [pc, #112]	; (8013708 <SendFrameOnChannel+0x140>)
 8013698:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 801369c:	4611      	mov	r1, r2
 801369e:	4618      	mov	r0, r3
 80136a0:	f7ff fc42 	bl	8012f28 <SecureFrame>
 80136a4:	4603      	mov	r3, r0
 80136a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80136aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d002      	beq.n	80136b8 <SendFrameOnChannel+0xf0>
    {
        return status;
 80136b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136b6:	e020      	b.n	80136fa <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80136b8:	4b13      	ldr	r3, [pc, #76]	; (8013708 <SendFrameOnChannel+0x140>)
 80136ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80136be:	f043 0302 	orr.w	r3, r3, #2
 80136c2:	4a11      	ldr	r2, [pc, #68]	; (8013708 <SendFrameOnChannel+0x140>)
 80136c4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 80136c8:	4b0f      	ldr	r3, [pc, #60]	; (8013708 <SendFrameOnChannel+0x140>)
 80136ca:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80136ce:	f083 0301 	eor.w	r3, r3, #1
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d007      	beq.n	80136e8 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 80136d8:	4b0b      	ldr	r3, [pc, #44]	; (8013708 <SendFrameOnChannel+0x140>)
 80136da:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80136de:	3301      	adds	r3, #1
 80136e0:	b2da      	uxtb	r2, r3
 80136e2:	4b09      	ldr	r3, [pc, #36]	; (8013708 <SendFrameOnChannel+0x140>)
 80136e4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80136e8:	4b09      	ldr	r3, [pc, #36]	; (8013710 <SendFrameOnChannel+0x148>)
 80136ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ec:	4a06      	ldr	r2, [pc, #24]	; (8013708 <SendFrameOnChannel+0x140>)
 80136ee:	8812      	ldrh	r2, [r2, #0]
 80136f0:	b2d2      	uxtb	r2, r2
 80136f2:	4611      	mov	r1, r2
 80136f4:	4807      	ldr	r0, [pc, #28]	; (8013714 <SendFrameOnChannel+0x14c>)
 80136f6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80136f8:	2300      	movs	r3, #0
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3728      	adds	r7, #40	; 0x28
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	20000e90 	.word	0x20000e90
 8013708:	20000988 	.word	0x20000988
 801370c:	20000d9c 	.word	0x20000d9c
 8013710:	0801f578 	.word	0x0801f578
 8013714:	2000098a 	.word	0x2000098a

08013718 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b086      	sub	sp, #24
 801371c:	af00      	add	r7, sp, #0
 801371e:	4603      	mov	r3, r0
 8013720:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013722:	4b16      	ldr	r3, [pc, #88]	; (801377c <SetTxContinuousWave+0x64>)
 8013724:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013728:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801372a:	4b15      	ldr	r3, [pc, #84]	; (8013780 <SetTxContinuousWave+0x68>)
 801372c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013730:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013732:	4b13      	ldr	r3, [pc, #76]	; (8013780 <SetTxContinuousWave+0x68>)
 8013734:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013738:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 801373a:	4b11      	ldr	r3, [pc, #68]	; (8013780 <SetTxContinuousWave+0x68>)
 801373c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013740:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013742:	4b0f      	ldr	r3, [pc, #60]	; (8013780 <SetTxContinuousWave+0x68>)
 8013744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013748:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 801374a:	88fb      	ldrh	r3, [r7, #6]
 801374c:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 801374e:	4b0c      	ldr	r3, [pc, #48]	; (8013780 <SetTxContinuousWave+0x68>)
 8013750:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013754:	f107 0208 	add.w	r2, r7, #8
 8013758:	4611      	mov	r1, r2
 801375a:	4618      	mov	r0, r3
 801375c:	f003 ff5a 	bl	8017614 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013760:	4b06      	ldr	r3, [pc, #24]	; (801377c <SetTxContinuousWave+0x64>)
 8013762:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013766:	f043 0302 	orr.w	r3, r3, #2
 801376a:	4a04      	ldr	r2, [pc, #16]	; (801377c <SetTxContinuousWave+0x64>)
 801376c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	3718      	adds	r7, #24
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	20000988 	.word	0x20000988
 8013780:	20000e90 	.word	0x20000e90

08013784 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	4603      	mov	r3, r0
 801378c:	6039      	str	r1, [r7, #0]
 801378e:	80fb      	strh	r3, [r7, #6]
 8013790:	4613      	mov	r3, r2
 8013792:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013794:	4b09      	ldr	r3, [pc, #36]	; (80137bc <SetTxContinuousWave1+0x38>)
 8013796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013798:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801379c:	88fa      	ldrh	r2, [r7, #6]
 801379e:	6838      	ldr	r0, [r7, #0]
 80137a0:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80137a2:	4b07      	ldr	r3, [pc, #28]	; (80137c0 <SetTxContinuousWave1+0x3c>)
 80137a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80137a8:	f043 0302 	orr.w	r3, r3, #2
 80137ac:	4a04      	ldr	r2, [pc, #16]	; (80137c0 <SetTxContinuousWave1+0x3c>)
 80137ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	0801f578 	.word	0x0801f578
 80137c0:	20000988 	.word	0x20000988

080137c4 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 80137c4:	b480      	push	{r7}
 80137c6:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bc80      	pop	{r7}
 80137d0:	4770      	bx	lr

080137d2 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80137d2:	b480      	push	{r7}
 80137d4:	b083      	sub	sp, #12
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d002      	beq.n	80137e8 <DetermineFrameType+0x16>
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d101      	bne.n	80137ec <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80137e8:	2303      	movs	r3, #3
 80137ea:	e03b      	b.n	8013864 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	7b1b      	ldrb	r3, [r3, #12]
 80137f0:	f003 030f 	and.w	r3, r3, #15
 80137f4:	b2db      	uxtb	r3, r3
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d008      	beq.n	801380c <DetermineFrameType+0x3a>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d003      	beq.n	801380c <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	2200      	movs	r2, #0
 8013808:	701a      	strb	r2, [r3, #0]
 801380a:	e02a      	b.n	8013862 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013812:	2b00      	cmp	r3, #0
 8013814:	d103      	bne.n	801381e <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	2201      	movs	r2, #1
 801381a:	701a      	strb	r2, [r3, #0]
 801381c:	e021      	b.n	8013862 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	7b1b      	ldrb	r3, [r3, #12]
 8013822:	f003 030f 	and.w	r3, r3, #15
 8013826:	b2db      	uxtb	r3, r3
 8013828:	2b00      	cmp	r3, #0
 801382a:	d108      	bne.n	801383e <DetermineFrameType+0x6c>
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d103      	bne.n	801383e <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	2202      	movs	r2, #2
 801383a:	701a      	strb	r2, [r3, #0]
 801383c:	e011      	b.n	8013862 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	7b1b      	ldrb	r3, [r3, #12]
 8013842:	f003 030f 	and.w	r3, r3, #15
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d108      	bne.n	801385e <DetermineFrameType+0x8c>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d003      	beq.n	801385e <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	2203      	movs	r2, #3
 801385a:	701a      	strb	r2, [r3, #0]
 801385c:	e001      	b.n	8013862 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 801385e:	2318      	movs	r3, #24
 8013860:	e000      	b.n	8013864 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013862:	2300      	movs	r3, #0
}
 8013864:	4618      	mov	r0, r3
 8013866:	370c      	adds	r7, #12
 8013868:	46bd      	mov	sp, r7
 801386a:	bc80      	pop	{r7}
 801386c:	4770      	bx	lr
	...

08013870 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013870:	b480      	push	{r7}
 8013872:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013874:	4b12      	ldr	r3, [pc, #72]	; (80138c0 <CheckRetransUnconfirmedUplink+0x50>)
 8013876:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 801387a:	4b12      	ldr	r3, [pc, #72]	; (80138c4 <CheckRetransUnconfirmedUplink+0x54>)
 801387c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013880:	429a      	cmp	r2, r3
 8013882:	d301      	bcc.n	8013888 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013884:	2301      	movs	r3, #1
 8013886:	e016      	b.n	80138b6 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013888:	4b0d      	ldr	r3, [pc, #52]	; (80138c0 <CheckRetransUnconfirmedUplink+0x50>)
 801388a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801388e:	f003 0302 	and.w	r3, r3, #2
 8013892:	b2db      	uxtb	r3, r3
 8013894:	2b00      	cmp	r3, #0
 8013896:	d00d      	beq.n	80138b4 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013898:	4b0a      	ldr	r3, [pc, #40]	; (80138c4 <CheckRetransUnconfirmedUplink+0x54>)
 801389a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d101      	bne.n	80138a6 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 80138a2:	2301      	movs	r3, #1
 80138a4:	e007      	b.n	80138b6 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80138a6:	4b06      	ldr	r3, [pc, #24]	; (80138c0 <CheckRetransUnconfirmedUplink+0x50>)
 80138a8:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d101      	bne.n	80138b4 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 80138b0:	2301      	movs	r3, #1
 80138b2:	e000      	b.n	80138b6 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bc80      	pop	{r7}
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop
 80138c0:	20000988 	.word	0x20000988
 80138c4:	20000e90 	.word	0x20000e90

080138c8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80138c8:	b480      	push	{r7}
 80138ca:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 80138cc:	4b0e      	ldr	r3, [pc, #56]	; (8013908 <CheckRetransConfirmedUplink+0x40>)
 80138ce:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 80138d2:	4b0d      	ldr	r3, [pc, #52]	; (8013908 <CheckRetransConfirmedUplink+0x40>)
 80138d4:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 80138d8:	429a      	cmp	r2, r3
 80138da:	d301      	bcc.n	80138e0 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 80138dc:	2301      	movs	r3, #1
 80138de:	e00f      	b.n	8013900 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80138e0:	4b09      	ldr	r3, [pc, #36]	; (8013908 <CheckRetransConfirmedUplink+0x40>)
 80138e2:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80138e6:	f003 0302 	and.w	r3, r3, #2
 80138ea:	b2db      	uxtb	r3, r3
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d006      	beq.n	80138fe <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80138f0:	4b05      	ldr	r3, [pc, #20]	; (8013908 <CheckRetransConfirmedUplink+0x40>)
 80138f2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d001      	beq.n	80138fe <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80138fa:	2301      	movs	r3, #1
 80138fc:	e000      	b.n	8013900 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80138fe:	2300      	movs	r3, #0
}
 8013900:	4618      	mov	r0, r3
 8013902:	46bd      	mov	sp, r7
 8013904:	bc80      	pop	{r7}
 8013906:	4770      	bx	lr
 8013908:	20000988 	.word	0x20000988

0801390c <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 801390c:	b480      	push	{r7}
 801390e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013910:	4b1a      	ldr	r3, [pc, #104]	; (801397c <StopRetransmission+0x70>)
 8013912:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013916:	f003 0302 	and.w	r3, r3, #2
 801391a:	b2db      	uxtb	r3, r3
 801391c:	2b00      	cmp	r3, #0
 801391e:	d009      	beq.n	8013934 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013920:	4b16      	ldr	r3, [pc, #88]	; (801397c <StopRetransmission+0x70>)
 8013922:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013926:	2b00      	cmp	r3, #0
 8013928:	d00e      	beq.n	8013948 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 801392a:	4b14      	ldr	r3, [pc, #80]	; (801397c <StopRetransmission+0x70>)
 801392c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013930:	2b01      	cmp	r3, #1
 8013932:	d009      	beq.n	8013948 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013934:	4b12      	ldr	r3, [pc, #72]	; (8013980 <StopRetransmission+0x74>)
 8013936:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801393a:	2b00      	cmp	r3, #0
 801393c:	d004      	beq.n	8013948 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 801393e:	4b10      	ldr	r3, [pc, #64]	; (8013980 <StopRetransmission+0x74>)
 8013940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013942:	3301      	adds	r3, #1
 8013944:	4a0e      	ldr	r2, [pc, #56]	; (8013980 <StopRetransmission+0x74>)
 8013946:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013948:	4b0c      	ldr	r3, [pc, #48]	; (801397c <StopRetransmission+0x70>)
 801394a:	2200      	movs	r2, #0
 801394c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013950:	4b0a      	ldr	r3, [pc, #40]	; (801397c <StopRetransmission+0x70>)
 8013952:	2200      	movs	r2, #0
 8013954:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013958:	4b08      	ldr	r3, [pc, #32]	; (801397c <StopRetransmission+0x70>)
 801395a:	2200      	movs	r2, #0
 801395c:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013960:	4b06      	ldr	r3, [pc, #24]	; (801397c <StopRetransmission+0x70>)
 8013962:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013966:	f023 0302 	bic.w	r3, r3, #2
 801396a:	4a04      	ldr	r2, [pc, #16]	; (801397c <StopRetransmission+0x70>)
 801396c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013970:	2301      	movs	r3, #1
}
 8013972:	4618      	mov	r0, r3
 8013974:	46bd      	mov	sp, r7
 8013976:	bc80      	pop	{r7}
 8013978:	4770      	bx	lr
 801397a:	bf00      	nop
 801397c:	20000988 	.word	0x20000988
 8013980:	20000e90 	.word	0x20000e90

08013984 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013984:	b580      	push	{r7, lr}
 8013986:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013988:	4b08      	ldr	r3, [pc, #32]	; (80139ac <OnMacProcessNotify+0x28>)
 801398a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00a      	beq.n	80139a8 <OnMacProcessNotify+0x24>
 8013992:	4b06      	ldr	r3, [pc, #24]	; (80139ac <OnMacProcessNotify+0x28>)
 8013994:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013998:	695b      	ldr	r3, [r3, #20]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d004      	beq.n	80139a8 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801399e:	4b03      	ldr	r3, [pc, #12]	; (80139ac <OnMacProcessNotify+0x28>)
 80139a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139a4:	695b      	ldr	r3, [r3, #20]
 80139a6:	4798      	blx	r3
    }
}
 80139a8:	bf00      	nop
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	20000988 	.word	0x20000988

080139b0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	4603      	mov	r3, r0
 80139b8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80139ba:	4b0b      	ldr	r3, [pc, #44]	; (80139e8 <CallNvmDataChangeCallback+0x38>)
 80139bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d00c      	beq.n	80139de <CallNvmDataChangeCallback+0x2e>
 80139c4:	4b08      	ldr	r3, [pc, #32]	; (80139e8 <CallNvmDataChangeCallback+0x38>)
 80139c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139ca:	691b      	ldr	r3, [r3, #16]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d006      	beq.n	80139de <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80139d0:	4b05      	ldr	r3, [pc, #20]	; (80139e8 <CallNvmDataChangeCallback+0x38>)
 80139d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80139d6:	691b      	ldr	r3, [r3, #16]
 80139d8:	88fa      	ldrh	r2, [r7, #6]
 80139da:	4610      	mov	r0, r2
 80139dc:	4798      	blx	r3
    }
}
 80139de:	bf00      	nop
 80139e0:	3708      	adds	r7, #8
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	20000988 	.word	0x20000988

080139ec <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80139f2:	4b1b      	ldr	r3, [pc, #108]	; (8013a60 <AckTimeoutRetriesProcess+0x74>)
 80139f4:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 80139f8:	4b19      	ldr	r3, [pc, #100]	; (8013a60 <AckTimeoutRetriesProcess+0x74>)
 80139fa:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d229      	bcs.n	8013a56 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013a02:	4b17      	ldr	r3, [pc, #92]	; (8013a60 <AckTimeoutRetriesProcess+0x74>)
 8013a04:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013a08:	3301      	adds	r3, #1
 8013a0a:	b2da      	uxtb	r2, r3
 8013a0c:	4b14      	ldr	r3, [pc, #80]	; (8013a60 <AckTimeoutRetriesProcess+0x74>)
 8013a0e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013a12:	4b13      	ldr	r3, [pc, #76]	; (8013a60 <AckTimeoutRetriesProcess+0x74>)
 8013a14:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013a18:	f003 0301 	and.w	r3, r3, #1
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d019      	beq.n	8013a56 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013a22:	2322      	movs	r3, #34	; 0x22
 8013a24:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a26:	4b0f      	ldr	r3, [pc, #60]	; (8013a64 <AckTimeoutRetriesProcess+0x78>)
 8013a28:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013a2c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a2e:	4b0d      	ldr	r3, [pc, #52]	; (8013a64 <AckTimeoutRetriesProcess+0x78>)
 8013a30:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a34:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013a36:	4b0b      	ldr	r3, [pc, #44]	; (8013a64 <AckTimeoutRetriesProcess+0x78>)
 8013a38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a3c:	f107 0208 	add.w	r2, r7, #8
 8013a40:	4611      	mov	r1, r2
 8013a42:	4618      	mov	r0, r3
 8013a44:	f003 fc91 	bl	801736a <RegionGetPhyParam>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	b25a      	sxtb	r2, r3
 8013a50:	4b04      	ldr	r3, [pc, #16]	; (8013a64 <AckTimeoutRetriesProcess+0x78>)
 8013a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013a56:	bf00      	nop
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	20000988 	.word	0x20000988
 8013a64:	20000e90 	.word	0x20000e90

08013a68 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b084      	sub	sp, #16
 8013a6c:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013a6e:	4b14      	ldr	r3, [pc, #80]	; (8013ac0 <AckTimeoutRetriesFinalize+0x58>)
 8013a70:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013a74:	f083 0301 	eor.w	r3, r3, #1
 8013a78:	b2db      	uxtb	r3, r3
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d015      	beq.n	8013aaa <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013a7e:	2302      	movs	r3, #2
 8013a80:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013a82:	4b10      	ldr	r3, [pc, #64]	; (8013ac4 <AckTimeoutRetriesFinalize+0x5c>)
 8013a84:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013a86:	4b10      	ldr	r3, [pc, #64]	; (8013ac8 <AckTimeoutRetriesFinalize+0x60>)
 8013a88:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013a8a:	4b10      	ldr	r3, [pc, #64]	; (8013acc <AckTimeoutRetriesFinalize+0x64>)
 8013a8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a90:	1d3a      	adds	r2, r7, #4
 8013a92:	4611      	mov	r1, r2
 8013a94:	4618      	mov	r0, r3
 8013a96:	f003 fc91 	bl	80173bc <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013a9a:	4b09      	ldr	r3, [pc, #36]	; (8013ac0 <AckTimeoutRetriesFinalize+0x58>)
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013aa2:	4b07      	ldr	r3, [pc, #28]	; (8013ac0 <AckTimeoutRetriesFinalize+0x58>)
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013aaa:	4b05      	ldr	r3, [pc, #20]	; (8013ac0 <AckTimeoutRetriesFinalize+0x58>)
 8013aac:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013ab0:	4b03      	ldr	r3, [pc, #12]	; (8013ac0 <AckTimeoutRetriesFinalize+0x58>)
 8013ab2:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013ab6:	bf00      	nop
 8013ab8:	3710      	adds	r7, #16
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bd80      	pop	{r7, pc}
 8013abe:	bf00      	nop
 8013ac0:	20000988 	.word	0x20000988
 8013ac4:	200010b0 	.word	0x200010b0
 8013ac8:	20001144 	.word	0x20001144
 8013acc:	20000e90 	.word	0x20000e90

08013ad0 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013ad4:	4b0b      	ldr	r3, [pc, #44]	; (8013b04 <IsRequestPending+0x34>)
 8013ad6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013ada:	f003 0304 	and.w	r3, r3, #4
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d107      	bne.n	8013af4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013ae4:	4b07      	ldr	r3, [pc, #28]	; (8013b04 <IsRequestPending+0x34>)
 8013ae6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d001      	beq.n	8013af8 <IsRequestPending+0x28>
    {
        return 1;
 8013af4:	2301      	movs	r3, #1
 8013af6:	e000      	b.n	8013afa <IsRequestPending+0x2a>
    }
    return 0;
 8013af8:	2300      	movs	r3, #0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bc80      	pop	{r7}
 8013b00:	4770      	bx	lr
 8013b02:	bf00      	nop
 8013b04:	20000988 	.word	0x20000988

08013b08 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013b08:	b590      	push	{r4, r7, lr}
 8013b0a:	b08f      	sub	sp, #60	; 0x3c
 8013b0c:	af02      	add	r7, sp, #8
 8013b0e:	6178      	str	r0, [r7, #20]
 8013b10:	6139      	str	r1, [r7, #16]
 8013b12:	4613      	mov	r3, r2
 8013b14:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d002      	beq.n	8013b22 <LoRaMacInitialization+0x1a>
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b22:	2303      	movs	r3, #3
 8013b24:	e273      	b.n	801400e <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d00b      	beq.n	8013b46 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d007      	beq.n	8013b46 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d003      	beq.n	8013b46 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013b3e:	697b      	ldr	r3, [r7, #20]
 8013b40:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d101      	bne.n	8013b4a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013b46:	2303      	movs	r3, #3
 8013b48:	e261      	b.n	801400e <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013b4a:	7bfb      	ldrb	r3, [r7, #15]
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f003 fbfc 	bl	801734a <RegionIsActive>
 8013b52:	4603      	mov	r3, r0
 8013b54:	f083 0301 	eor.w	r3, r3, #1
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d001      	beq.n	8013b62 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013b5e:	2309      	movs	r3, #9
 8013b60:	e255      	b.n	801400e <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013b62:	6978      	ldr	r0, [r7, #20]
 8013b64:	f002 f852 	bl	8015c0c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013b68:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	48c7      	ldr	r0, [pc, #796]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013b70:	f005 ff50 	bl	8019a14 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013b74:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013b78:	2100      	movs	r1, #0
 8013b7a:	48c5      	ldr	r0, [pc, #788]	; (8013e90 <LoRaMacInitialization+0x388>)
 8013b7c:	f005 ff4a 	bl	8019a14 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013b80:	4bc3      	ldr	r3, [pc, #780]	; (8013e90 <LoRaMacInitialization+0x388>)
 8013b82:	2201      	movs	r2, #1
 8013b84:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8013b88:	4bc1      	ldr	r3, [pc, #772]	; (8013e90 <LoRaMacInitialization+0x388>)
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013b90:	4abe      	ldr	r2, [pc, #760]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013b92:	7bfb      	ldrb	r3, [r7, #15]
 8013b94:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013b98:	4bbc      	ldr	r3, [pc, #752]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013ba0:	4bba      	ldr	r3, [pc, #744]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013ba8:	4bb8      	ldr	r3, [pc, #736]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013baa:	4aba      	ldr	r2, [pc, #744]	; (8013e94 <LoRaMacInitialization+0x38c>)
 8013bac:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013bb0:	230f      	movs	r3, #15
 8013bb2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013bb6:	4bb5      	ldr	r3, [pc, #724]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013bb8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bbc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bc0:	4611      	mov	r1, r2
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f003 fbd1 	bl	801736a <RegionGetPhyParam>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	bf14      	ite	ne
 8013bd2:	2301      	movne	r3, #1
 8013bd4:	2300      	moveq	r3, #0
 8013bd6:	b2da      	uxtb	r2, r3
 8013bd8:	4bac      	ldr	r3, [pc, #688]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013bda:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013bde:	230a      	movs	r3, #10
 8013be0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013be4:	4ba9      	ldr	r3, [pc, #676]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013be6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bee:	4611      	mov	r1, r2
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f003 fbba 	bl	801736a <RegionGetPhyParam>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	b25a      	sxtb	r2, r3
 8013bfe:	4ba3      	ldr	r3, [pc, #652]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013c04:	2306      	movs	r3, #6
 8013c06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c0a:	4ba0      	ldr	r3, [pc, #640]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c14:	4611      	mov	r1, r2
 8013c16:	4618      	mov	r0, r3
 8013c18:	f003 fba7 	bl	801736a <RegionGetPhyParam>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	b25a      	sxtb	r2, r3
 8013c24:	4b99      	ldr	r3, [pc, #612]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c26:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013c2a:	2310      	movs	r3, #16
 8013c2c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c30:	4b96      	ldr	r3, [pc, #600]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f003 fb94 	bl	801736a <RegionGetPhyParam>
 8013c42:	4603      	mov	r3, r0
 8013c44:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c48:	4a90      	ldr	r2, [pc, #576]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c4a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013c4e:	2311      	movs	r3, #17
 8013c50:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c54:	4b8d      	ldr	r3, [pc, #564]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c5e:	4611      	mov	r1, r2
 8013c60:	4618      	mov	r0, r3
 8013c62:	f003 fb82 	bl	801736a <RegionGetPhyParam>
 8013c66:	4603      	mov	r3, r0
 8013c68:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c6c:	4a87      	ldr	r2, [pc, #540]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c6e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013c72:	2312      	movs	r3, #18
 8013c74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c78:	4b84      	ldr	r3, [pc, #528]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c7a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013c82:	4611      	mov	r1, r2
 8013c84:	4618      	mov	r0, r3
 8013c86:	f003 fb70 	bl	801736a <RegionGetPhyParam>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	4a7e      	ldr	r2, [pc, #504]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c92:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013c96:	2313      	movs	r3, #19
 8013c98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c9c:	4b7b      	ldr	r3, [pc, #492]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013c9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ca2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013ca6:	4611      	mov	r1, r2
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f003 fb5e 	bl	801736a <RegionGetPhyParam>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb4:	4a75      	ldr	r2, [pc, #468]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013cb6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013cba:	2314      	movs	r3, #20
 8013cbc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013cc0:	4b72      	ldr	r3, [pc, #456]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013cc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013cc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cca:	4611      	mov	r1, r2
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f003 fb4c 	bl	801736a <RegionGetPhyParam>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd8:	4a6c      	ldr	r2, [pc, #432]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013cda:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013cde:	2317      	movs	r3, #23
 8013ce0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ce4:	4b69      	ldr	r3, [pc, #420]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013ce6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013cee:	4611      	mov	r1, r2
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f003 fb3a 	bl	801736a <RegionGetPhyParam>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	b2da      	uxtb	r2, r3
 8013cfe:	4b63      	ldr	r3, [pc, #396]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013d04:	2318      	movs	r3, #24
 8013d06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d0a:	4b60      	ldr	r3, [pc, #384]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d14:	4611      	mov	r1, r2
 8013d16:	4618      	mov	r0, r3
 8013d18:	f003 fb27 	bl	801736a <RegionGetPhyParam>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d22:	4a5a      	ldr	r2, [pc, #360]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d24:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2a:	4a58      	ldr	r2, [pc, #352]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d2c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8013d30:	2319      	movs	r3, #25
 8013d32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d36:	4b55      	ldr	r3, [pc, #340]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d40:	4611      	mov	r1, r2
 8013d42:	4618      	mov	r0, r3
 8013d44:	f003 fb11 	bl	801736a <RegionGetPhyParam>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8013d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d4e:	b2da      	uxtb	r2, r3
 8013d50:	4b4e      	ldr	r3, [pc, #312]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d52:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8013d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d58:	b2da      	uxtb	r2, r3
 8013d5a:	4b4c      	ldr	r3, [pc, #304]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d5c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013d60:	231e      	movs	r3, #30
 8013d62:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d66:	4b49      	ldr	r3, [pc, #292]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d6c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d70:	4611      	mov	r1, r2
 8013d72:	4618      	mov	r0, r3
 8013d74:	f003 faf9 	bl	801736a <RegionGetPhyParam>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7e:	b2da      	uxtb	r2, r3
 8013d80:	4b42      	ldr	r3, [pc, #264]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d82:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013d86:	231f      	movs	r3, #31
 8013d88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d8c:	4b3f      	ldr	r3, [pc, #252]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013d8e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013d96:	4611      	mov	r1, r2
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f003 fae6 	bl	801736a <RegionGetPhyParam>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da4:	b2da      	uxtb	r2, r3
 8013da6:	4b39      	ldr	r3, [pc, #228]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013da8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013dac:	2320      	movs	r3, #32
 8013dae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013db2:	4b36      	ldr	r3, [pc, #216]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013db4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013db8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013dbc:	4611      	mov	r1, r2
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f003 fad3 	bl	801736a <RegionGetPhyParam>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dca:	4a30      	ldr	r2, [pc, #192]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013dcc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013dd0:	2321      	movs	r3, #33	; 0x21
 8013dd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013dd6:	4b2d      	ldr	r3, [pc, #180]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013dd8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ddc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013de0:	4611      	mov	r1, r2
 8013de2:	4618      	mov	r0, r3
 8013de4:	f003 fac1 	bl	801736a <RegionGetPhyParam>
 8013de8:	4603      	mov	r3, r0
 8013dea:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dee:	4a27      	ldr	r2, [pc, #156]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013df0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013df4:	230b      	movs	r3, #11
 8013df6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013dfa:	4b24      	ldr	r3, [pc, #144]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013dfc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e00:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e04:	4611      	mov	r1, r2
 8013e06:	4618      	mov	r0, r3
 8013e08:	f003 faaf 	bl	801736a <RegionGetPhyParam>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	b29a      	uxth	r2, r3
 8013e14:	4b1d      	ldr	r3, [pc, #116]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e16:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013e1a:	230c      	movs	r3, #12
 8013e1c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e20:	4b1a      	ldr	r3, [pc, #104]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013e2a:	4611      	mov	r1, r2
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f003 fa9c 	bl	801736a <RegionGetPhyParam>
 8013e32:	4603      	mov	r3, r0
 8013e34:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8013e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e38:	b29a      	uxth	r2, r3
 8013e3a:	4b14      	ldr	r3, [pc, #80]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e3c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8013e40:	4b12      	ldr	r3, [pc, #72]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e42:	2201      	movs	r2, #1
 8013e44:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8013e48:	4b10      	ldr	r3, [pc, #64]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e4a:	220a      	movs	r2, #10
 8013e4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8013e50:	4b0e      	ldr	r3, [pc, #56]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e52:	2206      	movs	r2, #6
 8013e54:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8013e58:	4b0c      	ldr	r3, [pc, #48]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013e5e:	4a0b      	ldr	r2, [pc, #44]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e60:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8013e62:	4b0a      	ldr	r3, [pc, #40]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e64:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8013e68:	4b08      	ldr	r3, [pc, #32]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8013e6e:	4b07      	ldr	r3, [pc, #28]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013e74:	4a05      	ldr	r2, [pc, #20]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e76:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8013e78:	4b04      	ldr	r3, [pc, #16]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013e7e:	4a03      	ldr	r2, [pc, #12]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e80:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8013e82:	4b02      	ldr	r3, [pc, #8]	; (8013e8c <LoRaMacInitialization+0x384>)
 8013e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013e88:	e006      	b.n	8013e98 <LoRaMacInitialization+0x390>
 8013e8a:	bf00      	nop
 8013e8c:	20000e90 	.word	0x20000e90
 8013e90:	20000988 	.word	0x20000988
 8013e94:	01000300 	.word	0x01000300
 8013e98:	4a5f      	ldr	r2, [pc, #380]	; (8014018 <LoRaMacInitialization+0x510>)
 8013e9a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8013e9c:	4b5e      	ldr	r3, [pc, #376]	; (8014018 <LoRaMacInitialization+0x510>)
 8013e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013ea2:	4a5d      	ldr	r2, [pc, #372]	; (8014018 <LoRaMacInitialization+0x510>)
 8013ea4:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8013ea6:	4b5c      	ldr	r3, [pc, #368]	; (8014018 <LoRaMacInitialization+0x510>)
 8013ea8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013eac:	4a5a      	ldr	r2, [pc, #360]	; (8014018 <LoRaMacInitialization+0x510>)
 8013eae:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013eb0:	4b59      	ldr	r3, [pc, #356]	; (8014018 <LoRaMacInitialization+0x510>)
 8013eb2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8013eb6:	4b58      	ldr	r3, [pc, #352]	; (8014018 <LoRaMacInitialization+0x510>)
 8013eb8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013ec2:	4b56      	ldr	r3, [pc, #344]	; (801401c <LoRaMacInitialization+0x514>)
 8013ec4:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013ec6:	4b56      	ldr	r3, [pc, #344]	; (8014020 <LoRaMacInitialization+0x518>)
 8013ec8:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013eca:	4b53      	ldr	r3, [pc, #332]	; (8014018 <LoRaMacInitialization+0x510>)
 8013ecc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ed0:	f107 0218 	add.w	r2, r7, #24
 8013ed4:	4611      	mov	r1, r2
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f003 fa70 	bl	80173bc <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013edc:	4a51      	ldr	r2, [pc, #324]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	f7ff f8b5 	bl	8013054 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013eea:	4b4b      	ldr	r3, [pc, #300]	; (8014018 <LoRaMacInitialization+0x510>)
 8013eec:	2201      	movs	r2, #1
 8013eee:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8013ef2:	4a4c      	ldr	r2, [pc, #304]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013efa:	4b4a      	ldr	r3, [pc, #296]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8013f02:	4b48      	ldr	r3, [pc, #288]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013f04:	2201      	movs	r2, #1
 8013f06:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013f0a:	4b43      	ldr	r3, [pc, #268]	; (8014018 <LoRaMacInitialization+0x510>)
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013f10:	4b41      	ldr	r3, [pc, #260]	; (8014018 <LoRaMacInitialization+0x510>)
 8013f12:	2200      	movs	r2, #0
 8013f14:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013f16:	2300      	movs	r3, #0
 8013f18:	9300      	str	r3, [sp, #0]
 8013f1a:	4b43      	ldr	r3, [pc, #268]	; (8014028 <LoRaMacInitialization+0x520>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8013f22:	4842      	ldr	r0, [pc, #264]	; (801402c <LoRaMacInitialization+0x524>)
 8013f24:	f009 fe32 	bl	801db8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013f28:	2300      	movs	r3, #0
 8013f2a:	9300      	str	r3, [sp, #0]
 8013f2c:	4b40      	ldr	r3, [pc, #256]	; (8014030 <LoRaMacInitialization+0x528>)
 8013f2e:	2200      	movs	r2, #0
 8013f30:	f04f 31ff 	mov.w	r1, #4294967295
 8013f34:	483f      	ldr	r0, [pc, #252]	; (8014034 <LoRaMacInitialization+0x52c>)
 8013f36:	f009 fe29 	bl	801db8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	9300      	str	r3, [sp, #0]
 8013f3e:	4b3e      	ldr	r3, [pc, #248]	; (8014038 <LoRaMacInitialization+0x530>)
 8013f40:	2200      	movs	r2, #0
 8013f42:	f04f 31ff 	mov.w	r1, #4294967295
 8013f46:	483d      	ldr	r0, [pc, #244]	; (801403c <LoRaMacInitialization+0x534>)
 8013f48:	f009 fe20 	bl	801db8c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	4b3b      	ldr	r3, [pc, #236]	; (8014040 <LoRaMacInitialization+0x538>)
 8013f52:	2200      	movs	r2, #0
 8013f54:	f04f 31ff 	mov.w	r1, #4294967295
 8013f58:	483a      	ldr	r0, [pc, #232]	; (8014044 <LoRaMacInitialization+0x53c>)
 8013f5a:	f009 fe17 	bl	801db8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8013f5e:	4c2e      	ldr	r4, [pc, #184]	; (8014018 <LoRaMacInitialization+0x510>)
 8013f60:	463b      	mov	r3, r7
 8013f62:	4618      	mov	r0, r3
 8013f64:	f009 f986 	bl	801d274 <SysTimeGetMcuTime>
 8013f68:	f504 7390 	add.w	r3, r4, #288	; 0x120
 8013f6c:	463a      	mov	r2, r7
 8013f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f72:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013f76:	4b2b      	ldr	r3, [pc, #172]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013f78:	4a33      	ldr	r2, [pc, #204]	; (8014048 <LoRaMacInitialization+0x540>)
 8013f7a:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013f7e:	4b29      	ldr	r3, [pc, #164]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013f80:	4a32      	ldr	r2, [pc, #200]	; (801404c <LoRaMacInitialization+0x544>)
 8013f82:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013f86:	4b27      	ldr	r3, [pc, #156]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013f88:	4a31      	ldr	r2, [pc, #196]	; (8014050 <LoRaMacInitialization+0x548>)
 8013f8a:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013f8e:	4b25      	ldr	r3, [pc, #148]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013f90:	4a30      	ldr	r2, [pc, #192]	; (8014054 <LoRaMacInitialization+0x54c>)
 8013f92:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013f96:	4b23      	ldr	r3, [pc, #140]	; (8014024 <LoRaMacInitialization+0x51c>)
 8013f98:	4a2f      	ldr	r2, [pc, #188]	; (8014058 <LoRaMacInitialization+0x550>)
 8013f9a:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013f9e:	4b2f      	ldr	r3, [pc, #188]	; (801405c <LoRaMacInitialization+0x554>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	482f      	ldr	r0, [pc, #188]	; (8014060 <LoRaMacInitialization+0x558>)
 8013fa4:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8013fa6:	482f      	ldr	r0, [pc, #188]	; (8014064 <LoRaMacInitialization+0x55c>)
 8013fa8:	f7fa fe10 	bl	800ebcc <SecureElementInit>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d001      	beq.n	8013fb6 <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fb2:	2311      	movs	r3, #17
 8013fb4:	e02b      	b.n	801400e <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013fb6:	4818      	ldr	r0, [pc, #96]	; (8014018 <LoRaMacInitialization+0x510>)
 8013fb8:	f002 fae8 	bl	801658c <LoRaMacCryptoInit>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d001      	beq.n	8013fc6 <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fc2:	2311      	movs	r3, #17
 8013fc4:	e023      	b.n	801400e <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013fc6:	f001 fbe3 	bl	8015790 <LoRaMacCommandsInit>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d001      	beq.n	8013fd4 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013fd0:	2313      	movs	r3, #19
 8013fd2:	e01c      	b.n	801400e <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013fd4:	4824      	ldr	r0, [pc, #144]	; (8014068 <LoRaMacInitialization+0x560>)
 8013fd6:	f002 fba3 	bl	8016720 <LoRaMacCryptoSetMulticastReference>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d001      	beq.n	8013fe4 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fe0:	2311      	movs	r3, #17
 8013fe2:	e014      	b.n	801400e <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013fe4:	4b1d      	ldr	r3, [pc, #116]	; (801405c <LoRaMacInitialization+0x554>)
 8013fe6:	695b      	ldr	r3, [r3, #20]
 8013fe8:	4798      	blx	r3
 8013fea:	4603      	mov	r3, r0
 8013fec:	4618      	mov	r0, r3
 8013fee:	f005 fcb1 	bl	8019954 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013ff2:	4b1a      	ldr	r3, [pc, #104]	; (801405c <LoRaMacInitialization+0x554>)
 8013ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ff6:	4a08      	ldr	r2, [pc, #32]	; (8014018 <LoRaMacInitialization+0x510>)
 8013ff8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013ffc:	4610      	mov	r0, r2
 8013ffe:	4798      	blx	r3
    Radio.Sleep( );
 8014000:	4b16      	ldr	r3, [pc, #88]	; (801405c <LoRaMacInitialization+0x554>)
 8014002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014004:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014006:	2001      	movs	r0, #1
 8014008:	f7fd fb40 	bl	801168c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801400c:	2300      	movs	r3, #0
}
 801400e:	4618      	mov	r0, r3
 8014010:	3734      	adds	r7, #52	; 0x34
 8014012:	46bd      	mov	sp, r7
 8014014:	bd90      	pop	{r4, r7, pc}
 8014016:	bf00      	nop
 8014018:	20000e90 	.word	0x20000e90
 801401c:	200010b0 	.word	0x200010b0
 8014020:	20001144 	.word	0x20001144
 8014024:	20000988 	.word	0x20000988
 8014028:	08011bcd 	.word	0x08011bcd
 801402c:	20000cf0 	.word	0x20000cf0
 8014030:	08011c41 	.word	0x08011c41
 8014034:	20000d08 	.word	0x20000d08
 8014038:	08011cad 	.word	0x08011cad
 801403c:	20000d20 	.word	0x20000d20
 8014040:	08011d21 	.word	0x08011d21
 8014044:	20000d7c 	.word	0x20000d7c
 8014048:	0801078d 	.word	0x0801078d
 801404c:	080107e9 	.word	0x080107e9
 8014050:	08010881 	.word	0x08010881
 8014054:	08010855 	.word	0x08010855
 8014058:	0801089d 	.word	0x0801089d
 801405c:	0801f578 	.word	0x0801f578
 8014060:	20000cd4 	.word	0x20000cd4
 8014064:	20000fd8 	.word	0x20000fd8
 8014068:	20000f78 	.word	0x20000f78

0801406c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014070:	4b04      	ldr	r3, [pc, #16]	; (8014084 <LoRaMacStart+0x18>)
 8014072:	2200      	movs	r2, #0
 8014074:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8014078:	f7fc fc26 	bl	80108c8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 801407c:	2300      	movs	r3, #0
}
 801407e:	4618      	mov	r0, r3
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	20000988 	.word	0x20000988

08014088 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014088:	b580      	push	{r7, lr}
 801408a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801408c:	f7fd fad2 	bl	8011634 <LoRaMacIsBusy>
 8014090:	4603      	mov	r3, r0
 8014092:	f083 0301 	eor.w	r3, r3, #1
 8014096:	b2db      	uxtb	r3, r3
 8014098:	2b00      	cmp	r3, #0
 801409a:	d00d      	beq.n	80140b8 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801409c:	4b0b      	ldr	r3, [pc, #44]	; (80140cc <LoRaMacStop+0x44>)
 801409e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80140a2:	2b02      	cmp	r3, #2
 80140a4:	d102      	bne.n	80140ac <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 80140a6:	4b0a      	ldr	r3, [pc, #40]	; (80140d0 <LoRaMacStop+0x48>)
 80140a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140aa:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 80140ac:	4b09      	ldr	r3, [pc, #36]	; (80140d4 <LoRaMacStop+0x4c>)
 80140ae:	2201      	movs	r2, #1
 80140b0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80140b4:	2300      	movs	r3, #0
 80140b6:	e007      	b.n	80140c8 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80140b8:	4b06      	ldr	r3, [pc, #24]	; (80140d4 <LoRaMacStop+0x4c>)
 80140ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80140be:	2b01      	cmp	r3, #1
 80140c0:	d101      	bne.n	80140c6 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e000      	b.n	80140c8 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80140c6:	2301      	movs	r3, #1
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	20000e90 	.word	0x20000e90
 80140d0:	0801f578 	.word	0x0801f578
 80140d4:	20000988 	.word	0x20000988

080140d8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80140dc:	480d      	ldr	r0, [pc, #52]	; (8014114 <LoRaMacHalt+0x3c>)
 80140de:	f009 fdf9 	bl	801dcd4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80140e2:	480d      	ldr	r0, [pc, #52]	; (8014118 <LoRaMacHalt+0x40>)
 80140e4:	f009 fdf6 	bl	801dcd4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80140e8:	480c      	ldr	r0, [pc, #48]	; (801411c <LoRaMacHalt+0x44>)
 80140ea:	f009 fdf3 	bl	801dcd4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80140ee:	480c      	ldr	r0, [pc, #48]	; (8014120 <LoRaMacHalt+0x48>)
 80140f0:	f009 fdf0 	bl	801dcd4 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80140f4:	f001 f9cb 	bl	801548e <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80140f8:	4b0a      	ldr	r3, [pc, #40]	; (8014124 <LoRaMacHalt+0x4c>)
 80140fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140fc:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80140fe:	4b0a      	ldr	r3, [pc, #40]	; (8014128 <LoRaMacHalt+0x50>)
 8014100:	2200      	movs	r2, #0
 8014102:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8014106:	4b08      	ldr	r3, [pc, #32]	; (8014128 <LoRaMacHalt+0x50>)
 8014108:	2201      	movs	r2, #1
 801410a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801410e:	2300      	movs	r3, #0
}
 8014110:	4618      	mov	r0, r3
 8014112:	bd80      	pop	{r7, pc}
 8014114:	20000cf0 	.word	0x20000cf0
 8014118:	20000d08 	.word	0x20000d08
 801411c:	20000d20 	.word	0x20000d20
 8014120:	20000d7c 	.word	0x20000d7c
 8014124:	0801f578 	.word	0x0801f578
 8014128:	20000988 	.word	0x20000988

0801412c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b08a      	sub	sp, #40	; 0x28
 8014130:	af00      	add	r7, sp, #0
 8014132:	4603      	mov	r3, r0
 8014134:	6039      	str	r1, [r7, #0]
 8014136:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014138:	4b3e      	ldr	r3, [pc, #248]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 801413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801413c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801413e:	4b3d      	ldr	r3, [pc, #244]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014140:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8014144:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014146:	4b3b      	ldr	r3, [pc, #236]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014148:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 801414c:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801414e:	2300      	movs	r3, #0
 8014150:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d101      	bne.n	801415c <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014158:	2303      	movs	r3, #3
 801415a:	e066      	b.n	801422a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 801415c:	4b35      	ldr	r3, [pc, #212]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 801415e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8014162:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014164:	2300      	movs	r3, #0
 8014166:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014168:	4b32      	ldr	r3, [pc, #200]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 801416a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801416e:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014170:	4b30      	ldr	r3, [pc, #192]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014174:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014176:	4b2f      	ldr	r3, [pc, #188]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014178:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801417c:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801417e:	4b2d      	ldr	r3, [pc, #180]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014180:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014184:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014186:	4b2b      	ldr	r3, [pc, #172]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014188:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801418c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014190:	4b28      	ldr	r3, [pc, #160]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 8014192:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801419a:	4b26      	ldr	r3, [pc, #152]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 801419c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80141a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80141a4:	4b23      	ldr	r3, [pc, #140]	; (8014234 <LoRaMacQueryTxPossible+0x108>)
 80141a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80141ae:	f107 0310 	add.w	r3, r7, #16
 80141b2:	f107 020e 	add.w	r2, r7, #14
 80141b6:	f107 010f 	add.w	r1, r7, #15
 80141ba:	f107 0014 	add.w	r0, r7, #20
 80141be:	f001 f8d1 	bl	8015364 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80141c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fd fefc 	bl	8011fc4 <GetMaxAppPayloadWithoutFOptsLength>
 80141cc:	4603      	mov	r3, r0
 80141ce:	461a      	mov	r2, r3
 80141d0:	683b      	ldr	r3, [r7, #0]
 80141d2:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80141d4:	f107 0308 	add.w	r3, r7, #8
 80141d8:	4618      	mov	r0, r3
 80141da:	f001 fbdf 	bl	801599c <LoRaMacCommandsGetSizeSerializedCmds>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d001      	beq.n	80141e8 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141e4:	2313      	movs	r3, #19
 80141e6:	e020      	b.n	801422a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	2b0f      	cmp	r3, #15
 80141ec:	d819      	bhi.n	8014222 <LoRaMacQueryTxPossible+0xf6>
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	785b      	ldrb	r3, [r3, #1]
 80141f2:	461a      	mov	r2, r3
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d313      	bcc.n	8014222 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	785a      	ldrb	r2, [r3, #1]
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	b2db      	uxtb	r3, r3
 8014202:	1ad3      	subs	r3, r2, r3
 8014204:	b2da      	uxtb	r2, r3
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	785b      	ldrb	r3, [r3, #1]
 801420e:	4619      	mov	r1, r3
 8014210:	79fa      	ldrb	r2, [r7, #7]
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	4413      	add	r3, r2
 8014216:	4299      	cmp	r1, r3
 8014218:	d301      	bcc.n	801421e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801421a:	2300      	movs	r3, #0
 801421c:	e005      	b.n	801422a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801421e:	2308      	movs	r3, #8
 8014220:	e003      	b.n	801422a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	2200      	movs	r2, #0
 8014226:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014228:	2308      	movs	r3, #8
    }
}
 801422a:	4618      	mov	r0, r3
 801422c:	3728      	adds	r7, #40	; 0x28
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	20000e90 	.word	0x20000e90

08014238 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014238:	b590      	push	{r4, r7, lr}
 801423a:	b087      	sub	sp, #28
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014240:	2300      	movs	r3, #0
 8014242:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d101      	bne.n	801424e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801424a:	2303      	movs	r3, #3
 801424c:	e1a4      	b.n	8014598 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b3f      	cmp	r3, #63	; 0x3f
 8014254:	f200 8199 	bhi.w	801458a <LoRaMacMibGetRequestConfirm+0x352>
 8014258:	a201      	add	r2, pc, #4	; (adr r2, 8014260 <LoRaMacMibGetRequestConfirm+0x28>)
 801425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801425e:	bf00      	nop
 8014260:	08014361 	.word	0x08014361
 8014264:	0801436d 	.word	0x0801436d
 8014268:	08014379 	.word	0x08014379
 801426c:	08014385 	.word	0x08014385
 8014270:	08014391 	.word	0x08014391
 8014274:	0801439d 	.word	0x0801439d
 8014278:	080143a9 	.word	0x080143a9
 801427c:	0801458b 	.word	0x0801458b
 8014280:	0801458b 	.word	0x0801458b
 8014284:	0801458b 	.word	0x0801458b
 8014288:	0801458b 	.word	0x0801458b
 801428c:	0801458b 	.word	0x0801458b
 8014290:	0801458b 	.word	0x0801458b
 8014294:	0801458b 	.word	0x0801458b
 8014298:	0801458b 	.word	0x0801458b
 801429c:	080143bd 	.word	0x080143bd
 80142a0:	080143c9 	.word	0x080143c9
 80142a4:	080143d5 	.word	0x080143d5
 80142a8:	080143f7 	.word	0x080143f7
 80142ac:	08014409 	.word	0x08014409
 80142b0:	0801441b 	.word	0x0801441b
 80142b4:	0801442d 	.word	0x0801442d
 80142b8:	08014461 	.word	0x08014461
 80142bc:	0801443f 	.word	0x0801443f
 80142c0:	08014483 	.word	0x08014483
 80142c4:	0801448f 	.word	0x0801448f
 80142c8:	08014499 	.word	0x08014499
 80142cc:	080144a3 	.word	0x080144a3
 80142d0:	080144ad 	.word	0x080144ad
 80142d4:	080144b7 	.word	0x080144b7
 80142d8:	080144c1 	.word	0x080144c1
 80142dc:	080144cd 	.word	0x080144cd
 80142e0:	080144e5 	.word	0x080144e5
 80142e4:	080144d9 	.word	0x080144d9
 80142e8:	080144f1 	.word	0x080144f1
 80142ec:	080144fb 	.word	0x080144fb
 80142f0:	08014507 	.word	0x08014507
 80142f4:	08014523 	.word	0x08014523
 80142f8:	08014513 	.word	0x08014513
 80142fc:	0801451b 	.word	0x0801451b
 8014300:	0801458b 	.word	0x0801458b
 8014304:	0801452f 	.word	0x0801452f
 8014308:	0801458b 	.word	0x0801458b
 801430c:	0801458b 	.word	0x0801458b
 8014310:	0801458b 	.word	0x0801458b
 8014314:	0801458b 	.word	0x0801458b
 8014318:	0801458b 	.word	0x0801458b
 801431c:	0801458b 	.word	0x0801458b
 8014320:	0801458b 	.word	0x0801458b
 8014324:	0801458b 	.word	0x0801458b
 8014328:	0801458b 	.word	0x0801458b
 801432c:	0801458b 	.word	0x0801458b
 8014330:	0801458b 	.word	0x0801458b
 8014334:	0801458b 	.word	0x0801458b
 8014338:	0801458b 	.word	0x0801458b
 801433c:	0801458b 	.word	0x0801458b
 8014340:	0801458b 	.word	0x0801458b
 8014344:	08014543 	.word	0x08014543
 8014348:	0801454f 	.word	0x0801454f
 801434c:	0801455b 	.word	0x0801455b
 8014350:	08014567 	.word	0x08014567
 8014354:	08014573 	.word	0x08014573
 8014358:	0801457f 	.word	0x0801457f
 801435c:	08014585 	.word	0x08014585
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014360:	4b8f      	ldr	r3, [pc, #572]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014362:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	711a      	strb	r2, [r3, #4]
            break;
 801436a:	e114      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801436c:	4b8c      	ldr	r3, [pc, #560]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 801436e:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	711a      	strb	r2, [r3, #4]
            break;
 8014376:	e10e      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	4618      	mov	r0, r3
 801437e:	f7fa fefb 	bl	800f178 <SecureElementGetDevEui>
            break;
 8014382:	e108      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	685b      	ldr	r3, [r3, #4]
 8014388:	4618      	mov	r0, r3
 801438a:	f7fa ff25 	bl	800f1d8 <SecureElementGetJoinEui>
            break;
 801438e:	e102      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014390:	4b83      	ldr	r3, [pc, #524]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014392:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	711a      	strb	r2, [r3, #4]
            break;
 801439a:	e0fc      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801439c:	4b80      	ldr	r3, [pc, #512]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 801439e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	605a      	str	r2, [r3, #4]
            break;
 80143a6:	e0f6      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80143a8:	4b7d      	ldr	r3, [pc, #500]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80143aa:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	3304      	adds	r3, #4
 80143b2:	4619      	mov	r1, r3
 80143b4:	4610      	mov	r0, r2
 80143b6:	f7fa ff41 	bl	800f23c <SecureElementGetDevAddr>
            break;
 80143ba:	e0ec      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80143bc:	4b78      	ldr	r3, [pc, #480]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80143be:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	711a      	strb	r2, [r3, #4]
            break;
 80143c6:	e0e6      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80143c8:	4b75      	ldr	r3, [pc, #468]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80143ca:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	711a      	strb	r2, [r3, #4]
            break;
 80143d2:	e0e0      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80143d4:	231d      	movs	r3, #29
 80143d6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143d8:	4b71      	ldr	r3, [pc, #452]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80143da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143de:	f107 0210 	add.w	r2, r7, #16
 80143e2:	4611      	mov	r1, r2
 80143e4:	4618      	mov	r0, r3
 80143e6:	f002 ffc0 	bl	801736a <RegionGetPhyParam>
 80143ea:	4603      	mov	r3, r0
 80143ec:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	605a      	str	r2, [r3, #4]
            break;
 80143f4:	e0cf      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4a69      	ldr	r2, [pc, #420]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80143fa:	3304      	adds	r3, #4
 80143fc:	326c      	adds	r2, #108	; 0x6c
 80143fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014402:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014406:	e0c6      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	4a65      	ldr	r2, [pc, #404]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 801440c:	3304      	adds	r3, #4
 801440e:	32b4      	adds	r2, #180	; 0xb4
 8014410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014414:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014418:	e0bd      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	4a60      	ldr	r2, [pc, #384]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 801441e:	3304      	adds	r3, #4
 8014420:	3274      	adds	r2, #116	; 0x74
 8014422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014426:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801442a:	e0b4      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4a5c      	ldr	r2, [pc, #368]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014430:	3304      	adds	r3, #4
 8014432:	32bc      	adds	r2, #188	; 0xbc
 8014434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014438:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801443c:	e0ab      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801443e:	231b      	movs	r3, #27
 8014440:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014442:	4b57      	ldr	r3, [pc, #348]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014444:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014448:	f107 0210 	add.w	r2, r7, #16
 801444c:	4611      	mov	r1, r2
 801444e:	4618      	mov	r0, r3
 8014450:	f002 ff8b 	bl	801736a <RegionGetPhyParam>
 8014454:	4603      	mov	r3, r0
 8014456:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014458:	68fa      	ldr	r2, [r7, #12]
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	605a      	str	r2, [r3, #4]
            break;
 801445e:	e09a      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014460:	231a      	movs	r3, #26
 8014462:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014464:	4b4e      	ldr	r3, [pc, #312]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014466:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801446a:	f107 0210 	add.w	r2, r7, #16
 801446e:	4611      	mov	r1, r2
 8014470:	4618      	mov	r0, r3
 8014472:	f002 ff7a 	bl	801736a <RegionGetPhyParam>
 8014476:	4603      	mov	r3, r0
 8014478:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801447a:	68fa      	ldr	r2, [r7, #12]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	605a      	str	r2, [r3, #4]
            break;
 8014480:	e089      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014482:	4b47      	ldr	r3, [pc, #284]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014484:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	711a      	strb	r2, [r3, #4]
            break;
 801448c:	e083      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801448e:	4b44      	ldr	r3, [pc, #272]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	605a      	str	r2, [r3, #4]
            break;
 8014496:	e07e      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014498:	4b41      	ldr	r3, [pc, #260]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 801449a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	605a      	str	r2, [r3, #4]
            break;
 80144a0:	e079      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80144a2:	4b3f      	ldr	r3, [pc, #252]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	605a      	str	r2, [r3, #4]
            break;
 80144aa:	e074      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80144ac:	4b3c      	ldr	r3, [pc, #240]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	605a      	str	r2, [r3, #4]
            break;
 80144b4:	e06f      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80144b6:	4b3a      	ldr	r3, [pc, #232]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	605a      	str	r2, [r3, #4]
            break;
 80144be:	e06a      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80144c0:	4b37      	ldr	r3, [pc, #220]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144c2:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	711a      	strb	r2, [r3, #4]
            break;
 80144ca:	e064      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80144cc:	4b34      	ldr	r3, [pc, #208]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144ce:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	711a      	strb	r2, [r3, #4]
            break;
 80144d6:	e05e      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80144d8:	4b31      	ldr	r3, [pc, #196]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144da:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	711a      	strb	r2, [r3, #4]
            break;
 80144e2:	e058      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80144e4:	4b2e      	ldr	r3, [pc, #184]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144e6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	711a      	strb	r2, [r3, #4]
            break;
 80144ee:	e052      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80144f0:	4b2b      	ldr	r3, [pc, #172]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	605a      	str	r2, [r3, #4]
            break;
 80144f8:	e04d      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80144fa:	4b29      	ldr	r3, [pc, #164]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 80144fc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	711a      	strb	r2, [r3, #4]
            break;
 8014504:	e047      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014506:	4b26      	ldr	r3, [pc, #152]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014508:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	605a      	str	r2, [r3, #4]
            break;
 8014510:	e041      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	4a22      	ldr	r2, [pc, #136]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014516:	605a      	str	r2, [r3, #4]
            break;
 8014518:	e03d      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2200      	movs	r2, #0
 801451e:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014520:	e039      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014522:	4b1f      	ldr	r3, [pc, #124]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014524:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	605a      	str	r2, [r3, #4]
            break;
 801452c:	e033      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	4a1b      	ldr	r2, [pc, #108]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014532:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8014536:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014538:	687c      	ldr	r4, [r7, #4]
 801453a:	f003 f89f 	bl	801767c <RegionGetVersion>
 801453e:	60a0      	str	r0, [r4, #8]
            break;
 8014540:	e029      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014542:	4b17      	ldr	r3, [pc, #92]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014544:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	605a      	str	r2, [r3, #4]
            break;
 801454c:	e023      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801454e:	4b14      	ldr	r3, [pc, #80]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014550:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	809a      	strh	r2, [r3, #4]
            break;
 8014558:	e01d      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 801455a:	4b11      	ldr	r3, [pc, #68]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 801455c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	809a      	strh	r2, [r3, #4]
            break;
 8014564:	e017      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014566:	4b0e      	ldr	r3, [pc, #56]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014568:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	809a      	strh	r2, [r3, #4]
            break;
 8014570:	e011      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014572:	4b0b      	ldr	r3, [pc, #44]	; (80145a0 <LoRaMacMibGetRequestConfirm+0x368>)
 8014574:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	809a      	strh	r2, [r3, #4]
            break;
 801457c:	e00b      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801457e:	2318      	movs	r3, #24
 8014580:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014582:	e008      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014584:	2318      	movs	r3, #24
 8014586:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014588:	e005      	b.n	8014596 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f000 ff96 	bl	80154bc <LoRaMacClassBMibGetRequestConfirm>
 8014590:	4603      	mov	r3, r0
 8014592:	75fb      	strb	r3, [r7, #23]
            break;
 8014594:	bf00      	nop
        }
    }
    return status;
 8014596:	7dfb      	ldrb	r3, [r7, #23]
}
 8014598:	4618      	mov	r0, r3
 801459a:	371c      	adds	r7, #28
 801459c:	46bd      	mov	sp, r7
 801459e:	bd90      	pop	{r4, r7, pc}
 80145a0:	20000e90 	.word	0x20000e90

080145a4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b086      	sub	sp, #24
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80145ac:	2300      	movs	r3, #0
 80145ae:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d101      	bne.n	80145ba <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145b6:	2303      	movs	r3, #3
 80145b8:	e382      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80145ba:	4bbb      	ldr	r3, [pc, #748]	; (80148a8 <LoRaMacMibSetRequestConfirm+0x304>)
 80145bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80145c0:	f003 0302 	and.w	r3, r3, #2
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d001      	beq.n	80145cc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80145c8:	2301      	movs	r3, #1
 80145ca:	e379      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	2b3f      	cmp	r3, #63	; 0x3f
 80145d2:	f200 8353 	bhi.w	8014c7c <LoRaMacMibSetRequestConfirm+0x6d8>
 80145d6:	a201      	add	r2, pc, #4	; (adr r2, 80145dc <LoRaMacMibSetRequestConfirm+0x38>)
 80145d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145dc:	080146dd 	.word	0x080146dd
 80145e0:	080146ed 	.word	0x080146ed
 80145e4:	08014707 	.word	0x08014707
 80145e8:	0801471f 	.word	0x0801471f
 80145ec:	08014737 	.word	0x08014737
 80145f0:	08014743 	.word	0x08014743
 80145f4:	0801474f 	.word	0x0801474f
 80145f8:	08014779 	.word	0x08014779
 80145fc:	0801479f 	.word	0x0801479f
 8014600:	080147c5 	.word	0x080147c5
 8014604:	080147eb 	.word	0x080147eb
 8014608:	08014811 	.word	0x08014811
 801460c:	08014837 	.word	0x08014837
 8014610:	0801485d 	.word	0x0801485d
 8014614:	08014883 	.word	0x08014883
 8014618:	080148b1 	.word	0x080148b1
 801461c:	080148d1 	.word	0x080148d1
 8014620:	08014c7d 	.word	0x08014c7d
 8014624:	080148dd 	.word	0x080148dd
 8014628:	0801494d 	.word	0x0801494d
 801462c:	0801498d 	.word	0x0801498d
 8014630:	080149ef 	.word	0x080149ef
 8014634:	08014a5f 	.word	0x08014a5f
 8014638:	08014a2f 	.word	0x08014a2f
 801463c:	08014a8f 	.word	0x08014a8f
 8014640:	08014ab1 	.word	0x08014ab1
 8014644:	08014abb 	.word	0x08014abb
 8014648:	08014ac5 	.word	0x08014ac5
 801464c:	08014acf 	.word	0x08014acf
 8014650:	08014ad9 	.word	0x08014ad9
 8014654:	08014ae3 	.word	0x08014ae3
 8014658:	08014b15 	.word	0x08014b15
 801465c:	08014b89 	.word	0x08014b89
 8014660:	08014b4f 	.word	0x08014b4f
 8014664:	08014bbb 	.word	0x08014bbb
 8014668:	08014bd1 	.word	0x08014bd1
 801466c:	08014be9 	.word	0x08014be9
 8014670:	08014bf5 	.word	0x08014bf5
 8014674:	08014c01 	.word	0x08014c01
 8014678:	08014c7d 	.word	0x08014c7d
 801467c:	08014c0b 	.word	0x08014c0b
 8014680:	08014c7d 	.word	0x08014c7d
 8014684:	08014c7d 	.word	0x08014c7d
 8014688:	08014c7d 	.word	0x08014c7d
 801468c:	08014c7d 	.word	0x08014c7d
 8014690:	08014c7d 	.word	0x08014c7d
 8014694:	08014c7d 	.word	0x08014c7d
 8014698:	08014c7d 	.word	0x08014c7d
 801469c:	08014c7d 	.word	0x08014c7d
 80146a0:	08014c7d 	.word	0x08014c7d
 80146a4:	08014c7d 	.word	0x08014c7d
 80146a8:	08014c7d 	.word	0x08014c7d
 80146ac:	08014c7d 	.word	0x08014c7d
 80146b0:	08014c7d 	.word	0x08014c7d
 80146b4:	08014c7d 	.word	0x08014c7d
 80146b8:	08014c7d 	.word	0x08014c7d
 80146bc:	08014c7d 	.word	0x08014c7d
 80146c0:	08014c35 	.word	0x08014c35
 80146c4:	08014c41 	.word	0x08014c41
 80146c8:	08014c4d 	.word	0x08014c4d
 80146cc:	08014c59 	.word	0x08014c59
 80146d0:	08014c65 	.word	0x08014c65
 80146d4:	08014c71 	.word	0x08014c71
 80146d8:	08014c77 	.word	0x08014c77
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	791b      	ldrb	r3, [r3, #4]
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fd fb87 	bl	8011df4 <SwitchClass>
 80146e6:	4603      	mov	r3, r0
 80146e8:	75fb      	strb	r3, [r7, #23]
            break;
 80146ea:	e2e8      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	791b      	ldrb	r3, [r3, #4]
 80146f0:	2b02      	cmp	r3, #2
 80146f2:	d005      	beq.n	8014700 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	791a      	ldrb	r2, [r3, #4]
 80146f8:	4b6c      	ldr	r3, [pc, #432]	; (80148ac <LoRaMacMibSetRequestConfirm+0x308>)
 80146fa:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146fe:	e2de      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014700:	2303      	movs	r3, #3
 8014702:	75fb      	strb	r3, [r7, #23]
            break;
 8014704:	e2db      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	4618      	mov	r0, r3
 801470c:	f7fa fd1c 	bl	800f148 <SecureElementSetDevEui>
 8014710:	4603      	mov	r3, r0
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 82b8 	beq.w	8014c88 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014718:	2303      	movs	r3, #3
 801471a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801471c:	e2b4      	b.n	8014c88 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	4618      	mov	r0, r3
 8014724:	f7fa fd40 	bl	800f1a8 <SecureElementSetJoinEui>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	f000 82ae 	beq.w	8014c8c <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014730:	2303      	movs	r3, #3
 8014732:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014734:	e2aa      	b.n	8014c8c <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	791a      	ldrb	r2, [r3, #4]
 801473a:	4b5c      	ldr	r3, [pc, #368]	; (80148ac <LoRaMacMibSetRequestConfirm+0x308>)
 801473c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014740:	e2bd      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	4a59      	ldr	r2, [pc, #356]	; (80148ac <LoRaMacMibSetRequestConfirm+0x308>)
 8014748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 801474c:	e2b7      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 801474e:	4b57      	ldr	r3, [pc, #348]	; (80148ac <LoRaMacMibSetRequestConfirm+0x308>)
 8014750:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	4619      	mov	r1, r3
 801475a:	4610      	mov	r0, r2
 801475c:	f7fa fd54 	bl	800f208 <SecureElementSetDevAddr>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d002      	beq.n	801476c <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014766:	2303      	movs	r3, #3
 8014768:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 801476a:	e2a8      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	685b      	ldr	r3, [r3, #4]
 8014770:	4a4e      	ldr	r2, [pc, #312]	; (80148ac <LoRaMacMibSetRequestConfirm+0x308>)
 8014772:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014776:	e2a2      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	685b      	ldr	r3, [r3, #4]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d00b      	beq.n	8014798 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	4619      	mov	r1, r3
 8014786:	2000      	movs	r0, #0
 8014788:	f001 fff4 	bl	8016774 <LoRaMacCryptoSetKey>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	f000 827e 	beq.w	8014c90 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014794:	2311      	movs	r3, #17
 8014796:	e293      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014798:	2303      	movs	r3, #3
 801479a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801479c:	e278      	b.n	8014c90 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	685b      	ldr	r3, [r3, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00b      	beq.n	80147be <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	685b      	ldr	r3, [r3, #4]
 80147aa:	4619      	mov	r1, r3
 80147ac:	2001      	movs	r0, #1
 80147ae:	f001 ffe1 	bl	8016774 <LoRaMacCryptoSetKey>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f000 826d 	beq.w	8014c94 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147ba:	2311      	movs	r3, #17
 80147bc:	e280      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147be:	2303      	movs	r3, #3
 80147c0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147c2:	e267      	b.n	8014c94 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	685b      	ldr	r3, [r3, #4]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d00b      	beq.n	80147e4 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	4619      	mov	r1, r3
 80147d2:	2008      	movs	r0, #8
 80147d4:	f001 ffce 	bl	8016774 <LoRaMacCryptoSetKey>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	f000 825c 	beq.w	8014c98 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147e0:	2311      	movs	r3, #17
 80147e2:	e26d      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147e4:	2303      	movs	r3, #3
 80147e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80147e8:	e256      	b.n	8014c98 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d00b      	beq.n	801480a <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	4619      	mov	r1, r3
 80147f8:	2009      	movs	r0, #9
 80147fa:	f001 ffbb 	bl	8016774 <LoRaMacCryptoSetKey>
 80147fe:	4603      	mov	r3, r0
 8014800:	2b00      	cmp	r3, #0
 8014802:	f000 824b 	beq.w	8014c9c <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014806:	2311      	movs	r3, #17
 8014808:	e25a      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801480a:	2303      	movs	r3, #3
 801480c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801480e:	e245      	b.n	8014c9c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00b      	beq.n	8014830 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	685b      	ldr	r3, [r3, #4]
 801481c:	4619      	mov	r1, r3
 801481e:	200c      	movs	r0, #12
 8014820:	f001 ffa8 	bl	8016774 <LoRaMacCryptoSetKey>
 8014824:	4603      	mov	r3, r0
 8014826:	2b00      	cmp	r3, #0
 8014828:	f000 823a 	beq.w	8014ca0 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801482c:	2311      	movs	r3, #17
 801482e:	e247      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014830:	2303      	movs	r3, #3
 8014832:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014834:	e234      	b.n	8014ca0 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d00b      	beq.n	8014856 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	685b      	ldr	r3, [r3, #4]
 8014842:	4619      	mov	r1, r3
 8014844:	200d      	movs	r0, #13
 8014846:	f001 ff95 	bl	8016774 <LoRaMacCryptoSetKey>
 801484a:	4603      	mov	r3, r0
 801484c:	2b00      	cmp	r3, #0
 801484e:	f000 8229 	beq.w	8014ca4 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014852:	2311      	movs	r3, #17
 8014854:	e234      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014856:	2303      	movs	r3, #3
 8014858:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801485a:	e223      	b.n	8014ca4 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d00b      	beq.n	801487c <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	685b      	ldr	r3, [r3, #4]
 8014868:	4619      	mov	r1, r3
 801486a:	200e      	movs	r0, #14
 801486c:	f001 ff82 	bl	8016774 <LoRaMacCryptoSetKey>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	f000 8218 	beq.w	8014ca8 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014878:	2311      	movs	r3, #17
 801487a:	e221      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801487c:	2303      	movs	r3, #3
 801487e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014880:	e212      	b.n	8014ca8 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d00b      	beq.n	80148a2 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	4619      	mov	r1, r3
 8014890:	200f      	movs	r0, #15
 8014892:	f001 ff6f 	bl	8016774 <LoRaMacCryptoSetKey>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	f000 8207 	beq.w	8014cac <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801489e:	2311      	movs	r3, #17
 80148a0:	e20e      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80148a2:	2303      	movs	r3, #3
 80148a4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80148a6:	e201      	b.n	8014cac <LoRaMacMibSetRequestConfirm+0x708>
 80148a8:	20000988 	.word	0x20000988
 80148ac:	20000e90 	.word	0x20000e90
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	791a      	ldrb	r2, [r3, #4]
 80148b4:	4bb2      	ldr	r3, [pc, #712]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148b6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80148ba:	4bb2      	ldr	r3, [pc, #712]	; (8014b84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80148bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80148be:	4ab0      	ldr	r2, [pc, #704]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148c0:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80148c4:	4610      	mov	r0, r2
 80148c6:	4798      	blx	r3
            Radio.Sleep( );
 80148c8:	4bae      	ldr	r3, [pc, #696]	; (8014b84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80148ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148cc:	4798      	blx	r3
            break;
 80148ce:	e1f6      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	791a      	ldrb	r2, [r3, #4]
 80148d4:	4baa      	ldr	r3, [pc, #680]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148d6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 80148da:	e1f0      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	7a1b      	ldrb	r3, [r3, #8]
 80148e0:	b25b      	sxtb	r3, r3
 80148e2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80148e4:	4ba6      	ldr	r3, [pc, #664]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148e6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80148ea:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80148ec:	4ba4      	ldr	r3, [pc, #656]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80148ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148f2:	f107 0108 	add.w	r1, r7, #8
 80148f6:	2207      	movs	r2, #7
 80148f8:	4618      	mov	r0, r3
 80148fa:	f002 fd71 	bl	80173e0 <RegionVerify>
 80148fe:	4603      	mov	r3, r0
 8014900:	f083 0301 	eor.w	r3, r3, #1
 8014904:	b2db      	uxtb	r3, r3
 8014906:	2b00      	cmp	r3, #0
 8014908:	d002      	beq.n	8014910 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801490a:	2303      	movs	r3, #3
 801490c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801490e:	e1d6      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014916:	4b9a      	ldr	r3, [pc, #616]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014918:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801491c:	f107 0108 	add.w	r1, r7, #8
 8014920:	2200      	movs	r2, #0
 8014922:	4618      	mov	r0, r3
 8014924:	f002 fd5c 	bl	80173e0 <RegionVerify>
 8014928:	4603      	mov	r3, r0
 801492a:	f083 0301 	eor.w	r3, r3, #1
 801492e:	b2db      	uxtb	r3, r3
 8014930:	2b00      	cmp	r3, #0
 8014932:	d002      	beq.n	801493a <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014934:	2303      	movs	r3, #3
 8014936:	75fb      	strb	r3, [r7, #23]
            break;
 8014938:	e1c1      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801493a:	4b91      	ldr	r3, [pc, #580]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	336c      	adds	r3, #108	; 0x6c
 8014940:	3204      	adds	r2, #4
 8014942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014946:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801494a:	e1b8      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	7a1b      	ldrb	r3, [r3, #8]
 8014950:	b25b      	sxtb	r3, r3
 8014952:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014954:	4b8a      	ldr	r3, [pc, #552]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014956:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801495a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801495c:	4b88      	ldr	r3, [pc, #544]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801495e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014962:	f107 0108 	add.w	r1, r7, #8
 8014966:	2207      	movs	r2, #7
 8014968:	4618      	mov	r0, r3
 801496a:	f002 fd39 	bl	80173e0 <RegionVerify>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d008      	beq.n	8014986 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014974:	4b82      	ldr	r3, [pc, #520]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014976:	687a      	ldr	r2, [r7, #4]
 8014978:	33b4      	adds	r3, #180	; 0xb4
 801497a:	3204      	adds	r2, #4
 801497c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014980:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014984:	e19b      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014986:	2303      	movs	r3, #3
 8014988:	75fb      	strb	r3, [r7, #23]
            break;
 801498a:	e198      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	7a1b      	ldrb	r3, [r3, #8]
 8014990:	b25b      	sxtb	r3, r3
 8014992:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014994:	4b7a      	ldr	r3, [pc, #488]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014996:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801499a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801499c:	4b78      	ldr	r3, [pc, #480]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 801499e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80149a2:	f107 0108 	add.w	r1, r7, #8
 80149a6:	2207      	movs	r2, #7
 80149a8:	4618      	mov	r0, r3
 80149aa:	f002 fd19 	bl	80173e0 <RegionVerify>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d019      	beq.n	80149e8 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80149b4:	4b72      	ldr	r3, [pc, #456]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	3374      	adds	r3, #116	; 0x74
 80149ba:	3204      	adds	r2, #4
 80149bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149c0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80149c4:	4b6e      	ldr	r3, [pc, #440]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149c6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80149ca:	2b02      	cmp	r3, #2
 80149cc:	f040 8170 	bne.w	8014cb0 <LoRaMacMibSetRequestConfirm+0x70c>
 80149d0:	4b6b      	ldr	r3, [pc, #428]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149d2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	f000 816a 	beq.w	8014cb0 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80149dc:	4b69      	ldr	r3, [pc, #420]	; (8014b84 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80149de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80149e2:	f7fe fc91 	bl	8013308 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80149e6:	e163      	b.n	8014cb0 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80149e8:	2303      	movs	r3, #3
 80149ea:	75fb      	strb	r3, [r7, #23]
            break;
 80149ec:	e160      	b.n	8014cb0 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	7a1b      	ldrb	r3, [r3, #8]
 80149f2:	b25b      	sxtb	r3, r3
 80149f4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80149f6:	4b62      	ldr	r3, [pc, #392]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 80149f8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80149fc:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80149fe:	4b60      	ldr	r3, [pc, #384]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a04:	f107 0108 	add.w	r1, r7, #8
 8014a08:	2207      	movs	r2, #7
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f002 fce8 	bl	80173e0 <RegionVerify>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d008      	beq.n	8014a28 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014a16:	4b5a      	ldr	r3, [pc, #360]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	33bc      	adds	r3, #188	; 0xbc
 8014a1c:	3204      	adds	r2, #4
 8014a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a22:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014a26:	e14a      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a28:	2303      	movs	r3, #3
 8014a2a:	75fb      	strb	r3, [r7, #23]
            break;
 8014a2c:	e147      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014a34:	2301      	movs	r3, #1
 8014a36:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014a38:	4b51      	ldr	r3, [pc, #324]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a3e:	f107 020c 	add.w	r2, r7, #12
 8014a42:	4611      	mov	r1, r2
 8014a44:	4618      	mov	r0, r3
 8014a46:	f002 fcf4 	bl	8017432 <RegionChanMaskSet>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	f083 0301 	eor.w	r3, r3, #1
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	f000 812e 	beq.w	8014cb4 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a58:	2303      	movs	r3, #3
 8014a5a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014a5c:	e12a      	b.n	8014cb4 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014a64:	2300      	movs	r3, #0
 8014a66:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014a68:	4b45      	ldr	r3, [pc, #276]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014a6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a6e:	f107 020c 	add.w	r2, r7, #12
 8014a72:	4611      	mov	r1, r2
 8014a74:	4618      	mov	r0, r3
 8014a76:	f002 fcdc 	bl	8017432 <RegionChanMaskSet>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	f083 0301 	eor.w	r3, r3, #1
 8014a80:	b2db      	uxtb	r3, r3
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	f000 8118 	beq.w	8014cb8 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014a88:	2303      	movs	r3, #3
 8014a8a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014a8c:	e114      	b.n	8014cb8 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	791b      	ldrb	r3, [r3, #4]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d009      	beq.n	8014aaa <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014a9a:	2b0f      	cmp	r3, #15
 8014a9c:	d805      	bhi.n	8014aaa <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	791a      	ldrb	r2, [r3, #4]
 8014aa2:	4b37      	ldr	r3, [pc, #220]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014aa4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014aa8:	e109      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014aaa:	2303      	movs	r3, #3
 8014aac:	75fb      	strb	r3, [r7, #23]
            break;
 8014aae:	e106      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	4a32      	ldr	r2, [pc, #200]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ab6:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014ab8:	e101      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	4a30      	ldr	r2, [pc, #192]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ac0:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014ac2:	e0fc      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	685b      	ldr	r3, [r3, #4]
 8014ac8:	4a2d      	ldr	r2, [pc, #180]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014aca:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014acc:	e0f7      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	685b      	ldr	r3, [r3, #4]
 8014ad2:	4a2b      	ldr	r2, [pc, #172]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ad4:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014ad6:	e0f2      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	685b      	ldr	r3, [r3, #4]
 8014adc:	4a28      	ldr	r2, [pc, #160]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ade:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014ae0:	e0ed      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014ae8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014aea:	4b25      	ldr	r3, [pc, #148]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014aec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014af0:	f107 0108 	add.w	r1, r7, #8
 8014af4:	2206      	movs	r2, #6
 8014af6:	4618      	mov	r0, r3
 8014af8:	f002 fc72 	bl	80173e0 <RegionVerify>
 8014afc:	4603      	mov	r3, r0
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d005      	beq.n	8014b0e <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014b02:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014b06:	4b1e      	ldr	r3, [pc, #120]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014b08:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b0c:	e0d7      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b0e:	2303      	movs	r3, #3
 8014b10:	75fb      	strb	r3, [r7, #23]
            break;
 8014b12:	e0d4      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014b1a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014b1c:	4b18      	ldr	r3, [pc, #96]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014b1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014b22:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014b24:	4b16      	ldr	r3, [pc, #88]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014b26:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b2a:	f107 0108 	add.w	r1, r7, #8
 8014b2e:	2205      	movs	r2, #5
 8014b30:	4618      	mov	r0, r3
 8014b32:	f002 fc55 	bl	80173e0 <RegionVerify>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d005      	beq.n	8014b48 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014b3c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014b40:	4b0f      	ldr	r3, [pc, #60]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014b42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b46:	e0ba      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b48:	2303      	movs	r3, #3
 8014b4a:	75fb      	strb	r3, [r7, #23]
            break;
 8014b4c:	e0b7      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014b54:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014b56:	4b0a      	ldr	r3, [pc, #40]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014b58:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b5c:	f107 0108 	add.w	r1, r7, #8
 8014b60:	220a      	movs	r2, #10
 8014b62:	4618      	mov	r0, r3
 8014b64:	f002 fc3c 	bl	80173e0 <RegionVerify>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d005      	beq.n	8014b7a <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014b6e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014b72:	4b03      	ldr	r3, [pc, #12]	; (8014b80 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014b74:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b78:	e0a1      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	75fb      	strb	r3, [r7, #23]
            break;
 8014b7e:	e09e      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
 8014b80:	20000e90 	.word	0x20000e90
 8014b84:	0801f578 	.word	0x0801f578
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014b8e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014b90:	4b4d      	ldr	r3, [pc, #308]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014b92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b96:	f107 0108 	add.w	r1, r7, #8
 8014b9a:	2209      	movs	r2, #9
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f002 fc1f 	bl	80173e0 <RegionVerify>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d005      	beq.n	8014bb4 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014ba8:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014bac:	4b46      	ldr	r3, [pc, #280]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014bb2:	e084      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bb4:	2303      	movs	r3, #3
 8014bb6:	75fb      	strb	r3, [r7, #23]
            break;
 8014bb8:	e081      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4a42      	ldr	r2, [pc, #264]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014bc4:	4b40      	ldr	r3, [pc, #256]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014bca:	4a3f      	ldr	r2, [pc, #252]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014bce:	e076      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	791a      	ldrb	r2, [r3, #4]
 8014bd4:	4b3c      	ldr	r3, [pc, #240]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bd6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8014bda:	4b3b      	ldr	r3, [pc, #236]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bdc:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014be0:	4b39      	ldr	r3, [pc, #228]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8014be6:	e06a      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	4a36      	ldr	r2, [pc, #216]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8014bf2:	e064      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	685b      	ldr	r3, [r3, #4]
 8014bf8:	4a33      	ldr	r2, [pc, #204]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014bfa:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8014bfe:	e05e      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8014c00:	f7fe fde0 	bl	80137c4 <RestoreNvmData>
 8014c04:	4603      	mov	r3, r0
 8014c06:	75fb      	strb	r3, [r7, #23]
            break;
 8014c08:	e059      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	799b      	ldrb	r3, [r3, #6]
 8014c0e:	2b01      	cmp	r3, #1
 8014c10:	d80d      	bhi.n	8014c2e <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8014c12:	4a2d      	ldr	r2, [pc, #180]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6858      	ldr	r0, [r3, #4]
 8014c20:	f001 fce0 	bl	80165e4 <LoRaMacCryptoSetLrWanVersion>
 8014c24:	4603      	mov	r3, r0
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d048      	beq.n	8014cbc <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c2a:	2311      	movs	r3, #17
 8014c2c:	e048      	b.n	8014cc0 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c2e:	2303      	movs	r3, #3
 8014c30:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c32:	e043      	b.n	8014cbc <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	4a23      	ldr	r2, [pc, #140]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8014c3e:	e03e      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	889a      	ldrh	r2, [r3, #4]
 8014c44:	4b20      	ldr	r3, [pc, #128]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014c46:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 8014c4a:	e038      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	889a      	ldrh	r2, [r3, #4]
 8014c50:	4b1d      	ldr	r3, [pc, #116]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014c52:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8014c56:	e032      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	889a      	ldrh	r2, [r3, #4]
 8014c5c:	4b1a      	ldr	r3, [pc, #104]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014c5e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8014c62:	e02c      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	889a      	ldrh	r2, [r3, #4]
 8014c68:	4b17      	ldr	r3, [pc, #92]	; (8014cc8 <LoRaMacMibSetRequestConfirm+0x724>)
 8014c6a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8014c6e:	e026      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014c70:	2318      	movs	r3, #24
 8014c72:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014c74:	e023      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014c76:	2318      	movs	r3, #24
 8014c78:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014c7a:	e020      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f000 fc27 	bl	80154d0 <LoRaMacMibClassBSetRequestConfirm>
 8014c82:	4603      	mov	r3, r0
 8014c84:	75fb      	strb	r3, [r7, #23]
            break;
 8014c86:	e01a      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014c88:	bf00      	nop
 8014c8a:	e018      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014c8c:	bf00      	nop
 8014c8e:	e016      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014c90:	bf00      	nop
 8014c92:	e014      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014c94:	bf00      	nop
 8014c96:	e012      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014c98:	bf00      	nop
 8014c9a:	e010      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014c9c:	bf00      	nop
 8014c9e:	e00e      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014ca0:	bf00      	nop
 8014ca2:	e00c      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014ca4:	bf00      	nop
 8014ca6:	e00a      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014ca8:	bf00      	nop
 8014caa:	e008      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014cac:	bf00      	nop
 8014cae:	e006      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014cb0:	bf00      	nop
 8014cb2:	e004      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014cb4:	bf00      	nop
 8014cb6:	e002      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014cb8:	bf00      	nop
 8014cba:	e000      	b.n	8014cbe <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8014cbc:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8014cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3718      	adds	r7, #24
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}
 8014cc8:	20000e90 	.word	0x20000e90

08014ccc <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b086      	sub	sp, #24
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014cd4:	2302      	movs	r3, #2
 8014cd6:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014cd8:	2300      	movs	r3, #0
 8014cda:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d101      	bne.n	8014ce6 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ce2:	2303      	movs	r3, #3
 8014ce4:	e13a      	b.n	8014f5c <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8014ce6:	f7fc fca5 	bl	8011634 <LoRaMacIsBusy>
 8014cea:	4603      	mov	r3, r0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d001      	beq.n	8014cf4 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	e133      	b.n	8014f5c <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014cf4:	f001 f90c 	bl	8015f10 <LoRaMacConfirmQueueIsFull>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8014cfe:	2301      	movs	r3, #1
 8014d00:	e12c      	b.n	8014f5c <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014d02:	f001 f8f9 	bl	8015ef8 <LoRaMacConfirmQueueGetCnt>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d104      	bne.n	8014d16 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014d0c:	2214      	movs	r2, #20
 8014d0e:	2100      	movs	r1, #0
 8014d10:	4894      	ldr	r0, [pc, #592]	; (8014f64 <LoRaMacMlmeRequest+0x298>)
 8014d12:	f004 fe7f 	bl	8019a14 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014d16:	4b94      	ldr	r3, [pc, #592]	; (8014f68 <LoRaMacMlmeRequest+0x29c>)
 8014d18:	2201      	movs	r2, #1
 8014d1a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014d1e:	4a92      	ldr	r2, [pc, #584]	; (8014f68 <LoRaMacMlmeRequest+0x29c>)
 8014d20:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014d24:	f043 0304 	orr.w	r3, r3, #4
 8014d28:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014d32:	2301      	movs	r3, #1
 8014d34:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8014d36:	2300      	movs	r3, #0
 8014d38:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	3b01      	subs	r3, #1
 8014d40:	2b0d      	cmp	r3, #13
 8014d42:	f200 80e1 	bhi.w	8014f08 <LoRaMacMlmeRequest+0x23c>
 8014d46:	a201      	add	r2, pc, #4	; (adr r2, 8014d4c <LoRaMacMlmeRequest+0x80>)
 8014d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d4c:	08014d85 	.word	0x08014d85
 8014d50:	08014f09 	.word	0x08014f09
 8014d54:	08014f09 	.word	0x08014f09
 8014d58:	08014f09 	.word	0x08014f09
 8014d5c:	08014dfd 	.word	0x08014dfd
 8014d60:	08014e1b 	.word	0x08014e1b
 8014d64:	08014e2b 	.word	0x08014e2b
 8014d68:	08014f09 	.word	0x08014f09
 8014d6c:	08014f09 	.word	0x08014f09
 8014d70:	08014e47 	.word	0x08014e47
 8014d74:	08014f09 	.word	0x08014f09
 8014d78:	08014edd 	.word	0x08014edd
 8014d7c:	08014e7d 	.word	0x08014e7d
 8014d80:	08014ebf 	.word	0x08014ebf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014d84:	4b78      	ldr	r3, [pc, #480]	; (8014f68 <LoRaMacMlmeRequest+0x29c>)
 8014d86:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014d8a:	f003 0320 	and.w	r3, r3, #32
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d001      	beq.n	8014d96 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8014d92:	2301      	movs	r3, #1
 8014d94:	e0e2      	b.n	8014f5c <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 8014d96:	2000      	movs	r0, #0
 8014d98:	f7fe f95c 	bl	8013054 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014d9c:	4b73      	ldr	r3, [pc, #460]	; (8014f6c <LoRaMacMlmeRequest+0x2a0>)
 8014d9e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	795b      	ldrb	r3, [r3, #5]
 8014da6:	b25b      	sxtb	r3, r3
 8014da8:	2200      	movs	r2, #0
 8014daa:	4619      	mov	r1, r3
 8014dac:	f002 fc00 	bl	80175b0 <RegionAlternateDr>
 8014db0:	4603      	mov	r3, r0
 8014db2:	461a      	mov	r2, r3
 8014db4:	4b6d      	ldr	r3, [pc, #436]	; (8014f6c <LoRaMacMlmeRequest+0x2a0>)
 8014db6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8014dc0:	4b6a      	ldr	r3, [pc, #424]	; (8014f6c <LoRaMacMlmeRequest+0x2a0>)
 8014dc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014dc6:	2307      	movs	r3, #7
 8014dc8:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8014dca:	20ff      	movs	r0, #255	; 0xff
 8014dcc:	f7fd fec0 	bl	8012b50 <SendReJoinReq>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8014dd4:	7dfb      	ldrb	r3, [r7, #23]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	f000 8098 	beq.w	8014f0c <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014ddc:	4b63      	ldr	r3, [pc, #396]	; (8014f6c <LoRaMacMlmeRequest+0x2a0>)
 8014dde:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	795b      	ldrb	r3, [r3, #5]
 8014de6:	b25b      	sxtb	r3, r3
 8014de8:	2201      	movs	r2, #1
 8014dea:	4619      	mov	r1, r3
 8014dec:	f002 fbe0 	bl	80175b0 <RegionAlternateDr>
 8014df0:	4603      	mov	r3, r0
 8014df2:	461a      	mov	r2, r3
 8014df4:	4b5d      	ldr	r3, [pc, #372]	; (8014f6c <LoRaMacMlmeRequest+0x2a0>)
 8014df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014dfa:	e087      	b.n	8014f0c <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014e00:	f107 030c 	add.w	r3, r7, #12
 8014e04:	2200      	movs	r2, #0
 8014e06:	4619      	mov	r1, r3
 8014e08:	2002      	movs	r0, #2
 8014e0a:	f000 fcd1 	bl	80157b0 <LoRaMacCommandsAddCmd>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d07d      	beq.n	8014f10 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014e14:	2313      	movs	r3, #19
 8014e16:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e18:	e07a      	b.n	8014f10 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	889b      	ldrh	r3, [r3, #4]
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fe fc7a 	bl	8013718 <SetTxContinuousWave>
 8014e24:	4603      	mov	r3, r0
 8014e26:	75fb      	strb	r3, [r7, #23]
            break;
 8014e28:	e079      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	8898      	ldrh	r0, [r3, #4]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6899      	ldr	r1, [r3, #8]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	f7fe fca2 	bl	8013784 <SetTxContinuousWave1>
 8014e40:	4603      	mov	r3, r0
 8014e42:	75fb      	strb	r3, [r7, #23]
            break;
 8014e44:	e06b      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014e46:	2300      	movs	r3, #0
 8014e48:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8014e4a:	f107 0308 	add.w	r3, r7, #8
 8014e4e:	4619      	mov	r1, r3
 8014e50:	200d      	movs	r0, #13
 8014e52:	f000 fd2d 	bl	80158b0 <LoRaMacCommandsGetCmd>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d102      	bne.n	8014e62 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 8014e60:	e058      	b.n	8014f14 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014e62:	f107 030c 	add.w	r3, r7, #12
 8014e66:	2200      	movs	r2, #0
 8014e68:	4619      	mov	r1, r3
 8014e6a:	200d      	movs	r0, #13
 8014e6c:	f000 fca0 	bl	80157b0 <LoRaMacCommandsAddCmd>
 8014e70:	4603      	mov	r3, r0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d04e      	beq.n	8014f14 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014e76:	2313      	movs	r3, #19
 8014e78:	75fb      	strb	r3, [r7, #23]
            break;
 8014e7a:	e04b      	b.n	8014f14 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014e7c:	4b3b      	ldr	r3, [pc, #236]	; (8014f6c <LoRaMacMlmeRequest+0x2a0>)
 8014e7e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d148      	bne.n	8014f18 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	791b      	ldrb	r3, [r3, #4]
 8014e8a:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	791b      	ldrb	r3, [r3, #4]
 8014e90:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	4618      	mov	r0, r3
 8014e98:	f000 faef 	bl	801547a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014e9c:	7dbb      	ldrb	r3, [r7, #22]
 8014e9e:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014ea4:	f107 030c 	add.w	r3, r7, #12
 8014ea8:	2201      	movs	r2, #1
 8014eaa:	4619      	mov	r1, r3
 8014eac:	2010      	movs	r0, #16
 8014eae:	f000 fc7f 	bl	80157b0 <LoRaMacCommandsAddCmd>
 8014eb2:	4603      	mov	r3, r0
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d02f      	beq.n	8014f18 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014eb8:	2313      	movs	r3, #19
 8014eba:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8014ebc:	e02c      	b.n	8014f18 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014ec2:	f107 030c 	add.w	r3, r7, #12
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	4619      	mov	r1, r3
 8014eca:	2012      	movs	r0, #18
 8014ecc:	f000 fc70 	bl	80157b0 <LoRaMacCommandsAddCmd>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d022      	beq.n	8014f1c <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014ed6:	2313      	movs	r3, #19
 8014ed8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014eda:	e01f      	b.n	8014f1c <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014edc:	2301      	movs	r3, #1
 8014ede:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014ee0:	f000 fa81 	bl	80153e6 <LoRaMacClassBIsAcquisitionInProgress>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	f083 0301 	eor.w	r3, r3, #1
 8014eea:	b2db      	uxtb	r3, r3
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d008      	beq.n	8014f02 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014ef0:	2000      	movs	r0, #0
 8014ef2:	f000 fa5a 	bl	80153aa <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	f000 fa7c 	bl	80153f4 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014efc:	2300      	movs	r3, #0
 8014efe:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014f00:	e00d      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8014f02:	2301      	movs	r3, #1
 8014f04:	75fb      	strb	r3, [r7, #23]
            break;
 8014f06:	e00a      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8014f08:	bf00      	nop
 8014f0a:	e008      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
            break;
 8014f0c:	bf00      	nop
 8014f0e:	e006      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
            break;
 8014f10:	bf00      	nop
 8014f12:	e004      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
            break;
 8014f14:	bf00      	nop
 8014f16:	e002      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
            break;
 8014f18:	bf00      	nop
 8014f1a:	e000      	b.n	8014f1e <LoRaMacMlmeRequest+0x252>
            break;
 8014f1c:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014f1e:	4b12      	ldr	r3, [pc, #72]	; (8014f68 <LoRaMacMlmeRequest+0x29c>)
 8014f20:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8014f28:	7dfb      	ldrb	r3, [r7, #23]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d010      	beq.n	8014f50 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014f2e:	f000 ffe3 	bl	8015ef8 <LoRaMacConfirmQueueGetCnt>
 8014f32:	4603      	mov	r3, r0
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d110      	bne.n	8014f5a <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8014f38:	4b0b      	ldr	r3, [pc, #44]	; (8014f68 <LoRaMacMlmeRequest+0x29c>)
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014f40:	4a09      	ldr	r2, [pc, #36]	; (8014f68 <LoRaMacMlmeRequest+0x29c>)
 8014f42:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8014f46:	f36f 0382 	bfc	r3, #2, #1
 8014f4a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8014f4e:	e004      	b.n	8014f5a <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014f50:	f107 0310 	add.w	r3, r7, #16
 8014f54:	4618      	mov	r0, r3
 8014f56:	f000 fe7b 	bl	8015c50 <LoRaMacConfirmQueueAdd>
    }
    return status;
 8014f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3718      	adds	r7, #24
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	20000dd0 	.word	0x20000dd0
 8014f68:	20000988 	.word	0x20000988
 8014f6c:	20000e90 	.word	0x20000e90

08014f70 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08c      	sub	sp, #48	; 0x30
 8014f74:	af02      	add	r7, sp, #8
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	460b      	mov	r3, r1
 8014f7a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 8014f88:	2300      	movs	r3, #0
 8014f8a:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8014f90:	2300      	movs	r3, #0
 8014f92:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d101      	bne.n	8014f9e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014f9a:	2303      	movs	r3, #3
 8014f9c:	e0d4      	b.n	8015148 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8014f9e:	f7fc fb49 	bl	8011634 <LoRaMacIsBusy>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d001      	beq.n	8014fac <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8014fa8:	2301      	movs	r3, #1
 8014faa:	e0cd      	b.n	8015148 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8014fac:	2300      	movs	r3, #0
 8014fae:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014fb0:	2214      	movs	r2, #20
 8014fb2:	2100      	movs	r1, #0
 8014fb4:	4866      	ldr	r0, [pc, #408]	; (8015150 <LoRaMacMcpsRequest+0x1e0>)
 8014fb6:	f004 fd2d 	bl	8019a14 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014fba:	4b66      	ldr	r3, [pc, #408]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014fc2:	4b64      	ldr	r3, [pc, #400]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8014fc4:	2201      	movs	r2, #1
 8014fc6:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	781b      	ldrb	r3, [r3, #0]
 8014fce:	2b03      	cmp	r3, #3
 8014fd0:	d03d      	beq.n	801504e <LoRaMacMcpsRequest+0xde>
 8014fd2:	2b03      	cmp	r3, #3
 8014fd4:	dc4f      	bgt.n	8015076 <LoRaMacMcpsRequest+0x106>
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d002      	beq.n	8014fe0 <LoRaMacMcpsRequest+0x70>
 8014fda:	2b01      	cmp	r3, #1
 8014fdc:	d019      	beq.n	8015012 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014fde:	e04a      	b.n	8015076 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8014fe4:	4b5b      	ldr	r3, [pc, #364]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014fec:	7b3b      	ldrb	r3, [r7, #12]
 8014fee:	2202      	movs	r2, #2
 8014ff0:	f362 1347 	bfi	r3, r2, #5, #3
 8014ff4:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	791b      	ldrb	r3, [r3, #4]
 8014ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	899b      	ldrh	r3, [r3, #12]
 8015008:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	7b9b      	ldrb	r3, [r3, #14]
 801500e:	777b      	strb	r3, [r7, #29]
            break;
 8015010:	e032      	b.n	8015078 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015012:	2301      	movs	r3, #1
 8015014:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	7bdb      	ldrb	r3, [r3, #15]
 801501a:	2b08      	cmp	r3, #8
 801501c:	bf28      	it	cs
 801501e:	2308      	movcs	r3, #8
 8015020:	b2da      	uxtb	r2, r3
 8015022:	4b4c      	ldr	r3, [pc, #304]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8015024:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015028:	7b3b      	ldrb	r3, [r7, #12]
 801502a:	2204      	movs	r2, #4
 801502c:	f362 1347 	bfi	r3, r2, #5, #3
 8015030:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	791b      	ldrb	r3, [r3, #4]
 8015036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	899b      	ldrh	r3, [r3, #12]
 8015044:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	7b9b      	ldrb	r3, [r3, #14]
 801504a:	777b      	strb	r3, [r7, #29]
            break;
 801504c:	e014      	b.n	8015078 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801504e:	2301      	movs	r3, #1
 8015050:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015052:	4b40      	ldr	r3, [pc, #256]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8015054:	2201      	movs	r2, #1
 8015056:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801505a:	7b3b      	ldrb	r3, [r7, #12]
 801505c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015060:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	891b      	ldrh	r3, [r3, #8]
 801506c:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	7a9b      	ldrb	r3, [r3, #10]
 8015072:	777b      	strb	r3, [r7, #29]
            break;
 8015074:	e000      	b.n	8015078 <LoRaMacMcpsRequest+0x108>
            break;
 8015076:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015078:	2302      	movs	r3, #2
 801507a:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801507c:	4b36      	ldr	r3, [pc, #216]	; (8015158 <LoRaMacMcpsRequest+0x1e8>)
 801507e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015082:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8015084:	4b34      	ldr	r3, [pc, #208]	; (8015158 <LoRaMacMcpsRequest+0x1e8>)
 8015086:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801508a:	f107 0214 	add.w	r2, r7, #20
 801508e:	4611      	mov	r1, r2
 8015090:	4618      	mov	r0, r3
 8015092:	f002 f96a 	bl	801736a <RegionGetPhyParam>
 8015096:	4603      	mov	r3, r0
 8015098:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	b25b      	sxtb	r3, r3
 801509e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80150a2:	4293      	cmp	r3, r2
 80150a4:	bfb8      	it	lt
 80150a6:	4613      	movlt	r3, r2
 80150a8:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80150aa:	7f3b      	ldrb	r3, [r7, #28]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d044      	beq.n	801513a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80150b0:	4b29      	ldr	r3, [pc, #164]	; (8015158 <LoRaMacMcpsRequest+0x1e8>)
 80150b2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80150b6:	f083 0301 	eor.w	r3, r3, #1
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d019      	beq.n	80150f4 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80150c0:	7f7b      	ldrb	r3, [r7, #29]
 80150c2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80150c4:	4b24      	ldr	r3, [pc, #144]	; (8015158 <LoRaMacMcpsRequest+0x1e8>)
 80150c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80150ca:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80150cc:	4b22      	ldr	r3, [pc, #136]	; (8015158 <LoRaMacMcpsRequest+0x1e8>)
 80150ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80150d2:	f107 0108 	add.w	r1, r7, #8
 80150d6:	2205      	movs	r2, #5
 80150d8:	4618      	mov	r0, r3
 80150da:	f002 f981 	bl	80173e0 <RegionVerify>
 80150de:	4603      	mov	r3, r0
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d005      	beq.n	80150f0 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80150e4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80150e8:	4b1b      	ldr	r3, [pc, #108]	; (8015158 <LoRaMacMcpsRequest+0x1e8>)
 80150ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80150ee:	e001      	b.n	80150f4 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80150f0:	2303      	movs	r3, #3
 80150f2:	e029      	b.n	8015148 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80150f4:	8bfa      	ldrh	r2, [r7, #30]
 80150f6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80150fa:	f107 000c 	add.w	r0, r7, #12
 80150fe:	78fb      	ldrb	r3, [r7, #3]
 8015100:	9300      	str	r3, [sp, #0]
 8015102:	4613      	mov	r3, r2
 8015104:	6a3a      	ldr	r2, [r7, #32]
 8015106:	f7fd fc45 	bl	8012994 <Send>
 801510a:	4603      	mov	r3, r0
 801510c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015114:	2b00      	cmp	r3, #0
 8015116:	d10c      	bne.n	8015132 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	781a      	ldrb	r2, [r3, #0]
 801511c:	4b0d      	ldr	r3, [pc, #52]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 801511e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015122:	4a0c      	ldr	r2, [pc, #48]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8015124:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015128:	f043 0301 	orr.w	r3, r3, #1
 801512c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015130:	e003      	b.n	801513a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015132:	4b08      	ldr	r3, [pc, #32]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 8015134:	2200      	movs	r2, #0
 8015136:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801513a:	4b06      	ldr	r3, [pc, #24]	; (8015154 <LoRaMacMcpsRequest+0x1e4>)
 801513c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	611a      	str	r2, [r3, #16]

    return status;
 8015144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8015148:	4618      	mov	r0, r3
 801514a:	3728      	adds	r7, #40	; 0x28
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}
 8015150:	20000dbc 	.word	0x20000dbc
 8015154:	20000988 	.word	0x20000988
 8015158:	20000e90 	.word	0x20000e90

0801515c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801515c:	b580      	push	{r7, lr}
 801515e:	b084      	sub	sp, #16
 8015160:	af00      	add	r7, sp, #0
 8015162:	4603      	mov	r3, r0
 8015164:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8015166:	79fb      	ldrb	r3, [r7, #7]
 8015168:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801516a:	4b0d      	ldr	r3, [pc, #52]	; (80151a0 <LoRaMacTestSetDutyCycleOn+0x44>)
 801516c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015170:	f107 010c 	add.w	r1, r7, #12
 8015174:	220f      	movs	r2, #15
 8015176:	4618      	mov	r0, r3
 8015178:	f002 f932 	bl	80173e0 <RegionVerify>
 801517c:	4603      	mov	r3, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d00a      	beq.n	8015198 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015182:	4a07      	ldr	r2, [pc, #28]	; (80151a0 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015184:	79fb      	ldrb	r3, [r7, #7]
 8015186:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801518a:	4a06      	ldr	r2, [pc, #24]	; (80151a4 <LoRaMacTestSetDutyCycleOn+0x48>)
 801518c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015190:	f043 0320 	orr.w	r3, r3, #32
 8015194:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8015198:	bf00      	nop
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	20000e90 	.word	0x20000e90
 80151a4:	20000988 	.word	0x20000988

080151a8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80151ac:	f7fe ff6c 	bl	8014088 <LoRaMacStop>
 80151b0:	4603      	mov	r3, r0
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d115      	bne.n	80151e2 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80151b6:	480c      	ldr	r0, [pc, #48]	; (80151e8 <LoRaMacDeInitialization+0x40>)
 80151b8:	f008 fd8c 	bl	801dcd4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80151bc:	480b      	ldr	r0, [pc, #44]	; (80151ec <LoRaMacDeInitialization+0x44>)
 80151be:	f008 fd89 	bl	801dcd4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80151c2:	480b      	ldr	r0, [pc, #44]	; (80151f0 <LoRaMacDeInitialization+0x48>)
 80151c4:	f008 fd86 	bl	801dcd4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 80151c8:	480a      	ldr	r0, [pc, #40]	; (80151f4 <LoRaMacDeInitialization+0x4c>)
 80151ca:	f008 fd83 	bl	801dcd4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80151ce:	f000 f95e 	bl	801548e <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80151d2:	2000      	movs	r0, #0
 80151d4:	f7fd ff3e 	bl	8013054 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80151d8:	4b07      	ldr	r3, [pc, #28]	; (80151f8 <LoRaMacDeInitialization+0x50>)
 80151da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151dc:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80151de:	2300      	movs	r3, #0
 80151e0:	e000      	b.n	80151e4 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80151e2:	2301      	movs	r3, #1
    }
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	20000cf0 	.word	0x20000cf0
 80151ec:	20000d08 	.word	0x20000d08
 80151f0:	20000d20 	.word	0x20000d20
 80151f4:	20000d7c 	.word	0x20000d7c
 80151f8:	0801f578 	.word	0x0801f578

080151fc <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b08c      	sub	sp, #48	; 0x30
 8015200:	af00      	add	r7, sp, #0
 8015202:	60f8      	str	r0, [r7, #12]
 8015204:	60b9      	str	r1, [r7, #8]
 8015206:	607a      	str	r2, [r7, #4]
 8015208:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801520a:	2300      	movs	r3, #0
 801520c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	7c1b      	ldrb	r3, [r3, #16]
 8015214:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	7c5b      	ldrb	r3, [r3, #17]
 801521c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	689a      	ldr	r2, [r3, #8]
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	795b      	ldrb	r3, [r3, #5]
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 808b 	beq.w	8015348 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015232:	2302      	movs	r3, #2
 8015234:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	7c9b      	ldrb	r3, [r3, #18]
 801523c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	7cdb      	ldrb	r3, [r3, #19]
 8015244:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015248:	4611      	mov	r1, r2
 801524a:	4618      	mov	r0, r3
 801524c:	f002 f88d 	bl	801736a <RegionGetPhyParam>
 8015250:	4603      	mov	r3, r0
 8015252:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015254:	6a3b      	ldr	r3, [r7, #32]
 8015256:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 801525a:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801525e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015262:	4293      	cmp	r3, r2
 8015264:	bfb8      	it	lt
 8015266:	4613      	movlt	r3, r2
 8015268:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 801526c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015270:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015274:	429a      	cmp	r2, r3
 8015276:	d106      	bne.n	8015286 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	2200      	movs	r2, #0
 801527c:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801527e:	2300      	movs	r3, #0
 8015280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015284:	e060      	b.n	8015348 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	68fa      	ldr	r2, [r7, #12]
 801528c:	8992      	ldrh	r2, [r2, #12]
 801528e:	4293      	cmp	r3, r2
 8015290:	d303      	bcc.n	801529a <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 8015292:	2301      	movs	r3, #1
 8015294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015298:	e002      	b.n	80152a0 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 801529a:	2300      	movs	r3, #0
 801529c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	689b      	ldr	r3, [r3, #8]
 80152a4:	68fa      	ldr	r2, [r7, #12]
 80152a6:	8992      	ldrh	r2, [r2, #12]
 80152a8:	4611      	mov	r1, r2
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	89d2      	ldrh	r2, [r2, #14]
 80152ae:	440a      	add	r2, r1
 80152b0:	4293      	cmp	r3, r2
 80152b2:	d349      	bcc.n	8015348 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80152b4:	2308      	movs	r3, #8
 80152b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	7cdb      	ldrb	r3, [r3, #19]
 80152be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80152c2:	4611      	mov	r1, r2
 80152c4:	4618      	mov	r0, r3
 80152c6:	f002 f850 	bl	801736a <RegionGetPhyParam>
 80152ca:	4603      	mov	r3, r0
 80152cc:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80152ce:	6a3b      	ldr	r3, [r7, #32]
 80152d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	689b      	ldr	r3, [r3, #8]
 80152d8:	68fa      	ldr	r2, [r7, #12]
 80152da:	89d2      	ldrh	r2, [r2, #14]
 80152dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80152e0:	fb01 f202 	mul.w	r2, r1, r2
 80152e4:	1a9b      	subs	r3, r3, r2
 80152e6:	2b01      	cmp	r3, #1
 80152e8:	d12e      	bne.n	8015348 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80152ea:	2322      	movs	r3, #34	; 0x22
 80152ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80152f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80152f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	7c9b      	ldrb	r3, [r3, #18]
 80152fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	7cdb      	ldrb	r3, [r3, #19]
 8015304:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015308:	4611      	mov	r1, r2
 801530a:	4618      	mov	r0, r3
 801530c:	f002 f82d 	bl	801736a <RegionGetPhyParam>
 8015310:	4603      	mov	r3, r0
 8015312:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015314:	6a3b      	ldr	r3, [r7, #32]
 8015316:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801531a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801531e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015322:	429a      	cmp	r2, r3
 8015324:	d110      	bne.n	8015348 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015326:	2300      	movs	r3, #0
 8015328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	791b      	ldrb	r3, [r3, #4]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d009      	beq.n	8015348 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015334:	2302      	movs	r3, #2
 8015336:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	7cdb      	ldrb	r3, [r3, #19]
 801533c:	f107 0214 	add.w	r2, r7, #20
 8015340:	4611      	mov	r1, r2
 8015342:	4618      	mov	r0, r3
 8015344:	f002 f83a 	bl	80173bc <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801534e:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015356:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801535c:	4618      	mov	r0, r3
 801535e:	3730      	adds	r7, #48	; 0x30
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}

08015364 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	af00      	add	r7, sp, #0
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
 8015370:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	789b      	ldrb	r3, [r3, #2]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d107      	bne.n	801538a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	687a      	ldr	r2, [r7, #4]
 801537e:	68b9      	ldr	r1, [r7, #8]
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7ff ff3b 	bl	80151fc <CalcNextV10X>
 8015386:	4603      	mov	r3, r0
 8015388:	e000      	b.n	801538c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 801538a:	2300      	movs	r3, #0
}
 801538c:	4618      	mov	r0, r3
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}

08015394 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015394:	b480      	push	{r7}
 8015396:	b085      	sub	sp, #20
 8015398:	af00      	add	r7, sp, #0
 801539a:	60f8      	str	r0, [r7, #12]
 801539c:	60b9      	str	r1, [r7, #8]
 801539e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153a0:	bf00      	nop
 80153a2:	3714      	adds	r7, #20
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bc80      	pop	{r7}
 80153a8:	4770      	bx	lr

080153aa <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80153aa:	b480      	push	{r7}
 80153ac:	b083      	sub	sp, #12
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	4603      	mov	r3, r0
 80153b2:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153b4:	bf00      	nop
 80153b6:	370c      	adds	r7, #12
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bc80      	pop	{r7}
 80153bc:	4770      	bx	lr

080153be <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80153be:	b480      	push	{r7}
 80153c0:	b083      	sub	sp, #12
 80153c2:	af00      	add	r7, sp, #0
 80153c4:	4603      	mov	r3, r0
 80153c6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153c8:	bf00      	nop
 80153ca:	370c      	adds	r7, #12
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bc80      	pop	{r7}
 80153d0:	4770      	bx	lr

080153d2 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80153d2:	b480      	push	{r7}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	4603      	mov	r3, r0
 80153da:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bc80      	pop	{r7}
 80153e4:	4770      	bx	lr

080153e6 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80153e6:	b480      	push	{r7}
 80153e8:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80153ea:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bc80      	pop	{r7}
 80153f2:	4770      	bx	lr

080153f4 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80153f4:	b480      	push	{r7}
 80153f6:	b083      	sub	sp, #12
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80153fc:	bf00      	nop
 80153fe:	370c      	adds	r7, #12
 8015400:	46bd      	mov	sp, r7
 8015402:	bc80      	pop	{r7}
 8015404:	4770      	bx	lr

08015406 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015406:	b480      	push	{r7}
 8015408:	b083      	sub	sp, #12
 801540a:	af00      	add	r7, sp, #0
 801540c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801540e:	bf00      	nop
 8015410:	370c      	adds	r7, #12
 8015412:	46bd      	mov	sp, r7
 8015414:	bc80      	pop	{r7}
 8015416:	4770      	bx	lr

08015418 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015418:	b480      	push	{r7}
 801541a:	b083      	sub	sp, #12
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015420:	bf00      	nop
 8015422:	370c      	adds	r7, #12
 8015424:	46bd      	mov	sp, r7
 8015426:	bc80      	pop	{r7}
 8015428:	4770      	bx	lr

0801542a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801542a:	b480      	push	{r7}
 801542c:	b083      	sub	sp, #12
 801542e:	af00      	add	r7, sp, #0
 8015430:	6078      	str	r0, [r7, #4]
 8015432:	460b      	mov	r3, r1
 8015434:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015436:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015438:	4618      	mov	r0, r3
 801543a:	370c      	adds	r7, #12
 801543c:	46bd      	mov	sp, r7
 801543e:	bc80      	pop	{r7}
 8015440:	4770      	bx	lr

08015442 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015442:	b480      	push	{r7}
 8015444:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015446:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015448:	4618      	mov	r0, r3
 801544a:	46bd      	mov	sp, r7
 801544c:	bc80      	pop	{r7}
 801544e:	4770      	bx	lr

08015450 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015450:	b480      	push	{r7}
 8015452:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015454:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015456:	4618      	mov	r0, r3
 8015458:	46bd      	mov	sp, r7
 801545a:	bc80      	pop	{r7}
 801545c:	4770      	bx	lr

0801545e <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801545e:	b480      	push	{r7}
 8015460:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015462:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015464:	4618      	mov	r0, r3
 8015466:	46bd      	mov	sp, r7
 8015468:	bc80      	pop	{r7}
 801546a:	4770      	bx	lr

0801546c <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801546c:	b480      	push	{r7}
 801546e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015470:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015472:	4618      	mov	r0, r3
 8015474:	46bd      	mov	sp, r7
 8015476:	bc80      	pop	{r7}
 8015478:	4770      	bx	lr

0801547a <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801547a:	b480      	push	{r7}
 801547c:	b083      	sub	sp, #12
 801547e:	af00      	add	r7, sp, #0
 8015480:	4603      	mov	r3, r0
 8015482:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015484:	bf00      	nop
 8015486:	370c      	adds	r7, #12
 8015488:	46bd      	mov	sp, r7
 801548a:	bc80      	pop	{r7}
 801548c:	4770      	bx	lr

0801548e <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801548e:	b480      	push	{r7}
 8015490:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015492:	bf00      	nop
 8015494:	46bd      	mov	sp, r7
 8015496:	bc80      	pop	{r7}
 8015498:	4770      	bx	lr

0801549a <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801549a:	b480      	push	{r7}
 801549c:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801549e:	bf00      	nop
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bc80      	pop	{r7}
 80154a4:	4770      	bx	lr

080154a6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80154a6:	b480      	push	{r7}
 80154a8:	b083      	sub	sp, #12
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	4603      	mov	r3, r0
 80154ae:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80154b0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	370c      	adds	r7, #12
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bc80      	pop	{r7}
 80154ba:	4770      	bx	lr

080154bc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80154bc:	b480      	push	{r7}
 80154be:	b083      	sub	sp, #12
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80154c4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	370c      	adds	r7, #12
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bc80      	pop	{r7}
 80154ce:	4770      	bx	lr

080154d0 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80154d0:	b480      	push	{r7}
 80154d2:	b083      	sub	sp, #12
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80154d8:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80154da:	4618      	mov	r0, r3
 80154dc:	370c      	adds	r7, #12
 80154de:	46bd      	mov	sp, r7
 80154e0:	bc80      	pop	{r7}
 80154e2:	4770      	bx	lr

080154e4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80154e4:	b480      	push	{r7}
 80154e6:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80154e8:	bf00      	nop
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bc80      	pop	{r7}
 80154ee:	4770      	bx	lr

080154f0 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	4603      	mov	r3, r0
 80154f8:	6039      	str	r1, [r7, #0]
 80154fa:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80154fc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80154fe:	4618      	mov	r0, r3
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	bc80      	pop	{r7}
 8015506:	4770      	bx	lr

08015508 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
 801550e:	4603      	mov	r3, r0
 8015510:	603a      	str	r2, [r7, #0]
 8015512:	80fb      	strh	r3, [r7, #6]
 8015514:	460b      	mov	r3, r1
 8015516:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015518:	bf00      	nop
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	bc80      	pop	{r7}
 8015520:	4770      	bx	lr

08015522 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015522:	b480      	push	{r7}
 8015524:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015526:	bf00      	nop
 8015528:	46bd      	mov	sp, r7
 801552a:	bc80      	pop	{r7}
 801552c:	4770      	bx	lr

0801552e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801552e:	b480      	push	{r7}
 8015530:	b083      	sub	sp, #12
 8015532:	af00      	add	r7, sp, #0
 8015534:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015536:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015538:	4618      	mov	r0, r3
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	bc80      	pop	{r7}
 8015540:	4770      	bx	lr

08015542 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015542:	b480      	push	{r7}
 8015544:	b083      	sub	sp, #12
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801554a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801554c:	4618      	mov	r0, r3
 801554e:	370c      	adds	r7, #12
 8015550:	46bd      	mov	sp, r7
 8015552:	bc80      	pop	{r7}
 8015554:	4770      	bx	lr

08015556 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015556:	b480      	push	{r7}
 8015558:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801555a:	bf00      	nop
 801555c:	46bd      	mov	sp, r7
 801555e:	bc80      	pop	{r7}
 8015560:	4770      	bx	lr

08015562 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015562:	b480      	push	{r7}
 8015564:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015566:	bf00      	nop
 8015568:	46bd      	mov	sp, r7
 801556a:	bc80      	pop	{r7}
 801556c:	4770      	bx	lr

0801556e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 801556e:	b480      	push	{r7}
 8015570:	b085      	sub	sp, #20
 8015572:	af00      	add	r7, sp, #0
 8015574:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801557a:	2300      	movs	r3, #0
 801557c:	81fb      	strh	r3, [r7, #14]
 801557e:	e00a      	b.n	8015596 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015580:	89fb      	ldrh	r3, [r7, #14]
 8015582:	68ba      	ldr	r2, [r7, #8]
 8015584:	4413      	add	r3, r2
 8015586:	781b      	ldrb	r3, [r3, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d001      	beq.n	8015590 <IsSlotFree+0x22>
        {
            return false;
 801558c:	2300      	movs	r3, #0
 801558e:	e006      	b.n	801559e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015590:	89fb      	ldrh	r3, [r7, #14]
 8015592:	3301      	adds	r3, #1
 8015594:	81fb      	strh	r3, [r7, #14]
 8015596:	89fb      	ldrh	r3, [r7, #14]
 8015598:	2b0f      	cmp	r3, #15
 801559a:	d9f1      	bls.n	8015580 <IsSlotFree+0x12>
        }
    }
    return true;
 801559c:	2301      	movs	r3, #1
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3714      	adds	r7, #20
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bc80      	pop	{r7}
 80155a6:	4770      	bx	lr

080155a8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80155ae:	2300      	movs	r3, #0
 80155b0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80155b2:	e007      	b.n	80155c4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 80155b4:	79fb      	ldrb	r3, [r7, #7]
 80155b6:	3301      	adds	r3, #1
 80155b8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 80155ba:	79fb      	ldrb	r3, [r7, #7]
 80155bc:	2b0f      	cmp	r3, #15
 80155be:	d101      	bne.n	80155c4 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 80155c0:	2300      	movs	r3, #0
 80155c2:	e012      	b.n	80155ea <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 80155c4:	79fb      	ldrb	r3, [r7, #7]
 80155c6:	011b      	lsls	r3, r3, #4
 80155c8:	3308      	adds	r3, #8
 80155ca:	4a0a      	ldr	r2, [pc, #40]	; (80155f4 <MallocNewMacCommandSlot+0x4c>)
 80155cc:	4413      	add	r3, r2
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7ff ffcd 	bl	801556e <IsSlotFree>
 80155d4:	4603      	mov	r3, r0
 80155d6:	f083 0301 	eor.w	r3, r3, #1
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1e9      	bne.n	80155b4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80155e0:	79fb      	ldrb	r3, [r7, #7]
 80155e2:	011b      	lsls	r3, r3, #4
 80155e4:	3308      	adds	r3, #8
 80155e6:	4a03      	ldr	r2, [pc, #12]	; (80155f4 <MallocNewMacCommandSlot+0x4c>)
 80155e8:	4413      	add	r3, r2
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3708      	adds	r7, #8
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	20001610 	.word	0x20001610

080155f8 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d101      	bne.n	801560a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015606:	2300      	movs	r3, #0
 8015608:	e005      	b.n	8015616 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801560a:	2210      	movs	r2, #16
 801560c:	2100      	movs	r1, #0
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f004 fa00 	bl	8019a14 <memset1>

    return true;
 8015614:	2301      	movs	r3, #1
}
 8015616:	4618      	mov	r0, r3
 8015618:	3708      	adds	r7, #8
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}

0801561e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801561e:	b480      	push	{r7}
 8015620:	b083      	sub	sp, #12
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d101      	bne.n	8015630 <LinkedListInit+0x12>
    {
        return false;
 801562c:	2300      	movs	r3, #0
 801562e:	e006      	b.n	801563e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2200      	movs	r2, #0
 8015634:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2200      	movs	r2, #0
 801563a:	605a      	str	r2, [r3, #4]

    return true;
 801563c:	2301      	movs	r3, #1
}
 801563e:	4618      	mov	r0, r3
 8015640:	370c      	adds	r7, #12
 8015642:	46bd      	mov	sp, r7
 8015644:	bc80      	pop	{r7}
 8015646:	4770      	bx	lr

08015648 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015648:	b480      	push	{r7}
 801564a:	b083      	sub	sp, #12
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d002      	beq.n	801565e <LinkedListAdd+0x16>
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	2b00      	cmp	r3, #0
 801565c:	d101      	bne.n	8015662 <LinkedListAdd+0x1a>
    {
        return false;
 801565e:	2300      	movs	r3, #0
 8015660:	e015      	b.n	801568e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d102      	bne.n	8015670 <LinkedListAdd+0x28>
    {
        list->First = element;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	683a      	ldr	r2, [r7, #0]
 801566e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	685b      	ldr	r3, [r3, #4]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d003      	beq.n	8015680 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	683a      	ldr	r2, [r7, #0]
 801567e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	2200      	movs	r2, #0
 8015684:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	683a      	ldr	r2, [r7, #0]
 801568a:	605a      	str	r2, [r3, #4]

    return true;
 801568c:	2301      	movs	r3, #1
}
 801568e:	4618      	mov	r0, r3
 8015690:	370c      	adds	r7, #12
 8015692:	46bd      	mov	sp, r7
 8015694:	bc80      	pop	{r7}
 8015696:	4770      	bx	lr

08015698 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d002      	beq.n	80156ae <LinkedListGetPrevious+0x16>
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d101      	bne.n	80156b2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80156ae:	2300      	movs	r3, #0
 80156b0:	e016      	b.n	80156e0 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80156b8:	683a      	ldr	r2, [r7, #0]
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d00c      	beq.n	80156da <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80156c0:	e002      	b.n	80156c8 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d007      	beq.n	80156de <LinkedListGetPrevious+0x46>
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	683a      	ldr	r2, [r7, #0]
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d1f4      	bne.n	80156c2 <LinkedListGetPrevious+0x2a>
 80156d8:	e001      	b.n	80156de <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80156da:	2300      	movs	r3, #0
 80156dc:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80156de:	68fb      	ldr	r3, [r7, #12]
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3714      	adds	r7, #20
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bc80      	pop	{r7}
 80156e8:	4770      	bx	lr

080156ea <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80156ea:	b580      	push	{r7, lr}
 80156ec:	b084      	sub	sp, #16
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
 80156f2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d002      	beq.n	8015700 <LinkedListRemove+0x16>
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d101      	bne.n	8015704 <LinkedListRemove+0x1a>
    {
        return false;
 8015700:	2300      	movs	r3, #0
 8015702:	e020      	b.n	8015746 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015704:	6839      	ldr	r1, [r7, #0]
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7ff ffc6 	bl	8015698 <LinkedListGetPrevious>
 801570c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	683a      	ldr	r2, [r7, #0]
 8015714:	429a      	cmp	r2, r3
 8015716:	d103      	bne.n	8015720 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	683a      	ldr	r2, [r7, #0]
 8015726:	429a      	cmp	r2, r3
 8015728:	d102      	bne.n	8015730 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	68fa      	ldr	r2, [r7, #12]
 801572e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d003      	beq.n	801573e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	2200      	movs	r2, #0
 8015742:	601a      	str	r2, [r3, #0]

    return true;
 8015744:	2301      	movs	r3, #1
}
 8015746:	4618      	mov	r0, r3
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 801574e:	b480      	push	{r7}
 8015750:	b083      	sub	sp, #12
 8015752:	af00      	add	r7, sp, #0
 8015754:	4603      	mov	r3, r0
 8015756:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015758:	79fb      	ldrb	r3, [r7, #7]
 801575a:	2b05      	cmp	r3, #5
 801575c:	d004      	beq.n	8015768 <IsSticky+0x1a>
 801575e:	2b05      	cmp	r3, #5
 8015760:	db04      	blt.n	801576c <IsSticky+0x1e>
 8015762:	3b08      	subs	r3, #8
 8015764:	2b02      	cmp	r3, #2
 8015766:	d801      	bhi.n	801576c <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015768:	2301      	movs	r3, #1
 801576a:	e000      	b.n	801576e <IsSticky+0x20>
        default:
            return false;
 801576c:	2300      	movs	r3, #0
    }
}
 801576e:	4618      	mov	r0, r3
 8015770:	370c      	adds	r7, #12
 8015772:	46bd      	mov	sp, r7
 8015774:	bc80      	pop	{r7}
 8015776:	4770      	bx	lr

08015778 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015778:	b480      	push	{r7}
 801577a:	b083      	sub	sp, #12
 801577c:	af00      	add	r7, sp, #0
 801577e:	4603      	mov	r3, r0
 8015780:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015782:	2300      	movs	r3, #0
    }
}
 8015784:	4618      	mov	r0, r3
 8015786:	370c      	adds	r7, #12
 8015788:	46bd      	mov	sp, r7
 801578a:	bc80      	pop	{r7}
 801578c:	4770      	bx	lr
	...

08015790 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015790:	b580      	push	{r7, lr}
 8015792:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015794:	22fc      	movs	r2, #252	; 0xfc
 8015796:	2100      	movs	r1, #0
 8015798:	4804      	ldr	r0, [pc, #16]	; (80157ac <LoRaMacCommandsInit+0x1c>)
 801579a:	f004 f93b 	bl	8019a14 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801579e:	4803      	ldr	r0, [pc, #12]	; (80157ac <LoRaMacCommandsInit+0x1c>)
 80157a0:	f7ff ff3d 	bl	801561e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80157a4:	2300      	movs	r3, #0
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop
 80157ac:	20001610 	.word	0x20001610

080157b0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b086      	sub	sp, #24
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	4603      	mov	r3, r0
 80157b8:	60b9      	str	r1, [r7, #8]
 80157ba:	607a      	str	r2, [r7, #4]
 80157bc:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d101      	bne.n	80157c8 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80157c4:	2301      	movs	r3, #1
 80157c6:	e03b      	b.n	8015840 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80157c8:	f7ff feee 	bl	80155a8 <MallocNewMacCommandSlot>
 80157cc:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d101      	bne.n	80157d8 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80157d4:	2302      	movs	r3, #2
 80157d6:	e033      	b.n	8015840 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80157d8:	6979      	ldr	r1, [r7, #20]
 80157da:	481b      	ldr	r0, [pc, #108]	; (8015848 <LoRaMacCommandsAddCmd+0x98>)
 80157dc:	f7ff ff34 	bl	8015648 <LinkedListAdd>
 80157e0:	4603      	mov	r3, r0
 80157e2:	f083 0301 	eor.w	r3, r3, #1
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d001      	beq.n	80157f0 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 80157ec:	2305      	movs	r3, #5
 80157ee:	e027      	b.n	8015840 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	7bfa      	ldrb	r2, [r7, #15]
 80157f4:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	687a      	ldr	r2, [r7, #4]
 80157fa:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	3305      	adds	r3, #5
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	b292      	uxth	r2, r2
 8015804:	68b9      	ldr	r1, [r7, #8]
 8015806:	4618      	mov	r0, r3
 8015808:	f004 f8c9 	bl	801999e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 801580c:	7bfb      	ldrb	r3, [r7, #15]
 801580e:	4618      	mov	r0, r3
 8015810:	f7ff ff9d 	bl	801574e <IsSticky>
 8015814:	4603      	mov	r3, r0
 8015816:	461a      	mov	r2, r3
 8015818:	697b      	ldr	r3, [r7, #20]
 801581a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 801581c:	7bfb      	ldrb	r3, [r7, #15]
 801581e:	4618      	mov	r0, r3
 8015820:	f7ff ffaa 	bl	8015778 <IsConfirmationRequired>
 8015824:	4603      	mov	r3, r0
 8015826:	461a      	mov	r2, r3
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801582c:	4b06      	ldr	r3, [pc, #24]	; (8015848 <LoRaMacCommandsAddCmd+0x98>)
 801582e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	4413      	add	r3, r2
 8015836:	3301      	adds	r3, #1
 8015838:	4a03      	ldr	r2, [pc, #12]	; (8015848 <LoRaMacCommandsAddCmd+0x98>)
 801583a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 801583e:	2300      	movs	r3, #0
}
 8015840:	4618      	mov	r0, r3
 8015842:	3718      	adds	r7, #24
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}
 8015848:	20001610 	.word	0x20001610

0801584c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d101      	bne.n	801585e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801585a:	2301      	movs	r3, #1
 801585c:	e021      	b.n	80158a2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 801585e:	6879      	ldr	r1, [r7, #4]
 8015860:	4812      	ldr	r0, [pc, #72]	; (80158ac <LoRaMacCommandsRemoveCmd+0x60>)
 8015862:	f7ff ff42 	bl	80156ea <LinkedListRemove>
 8015866:	4603      	mov	r3, r0
 8015868:	f083 0301 	eor.w	r3, r3, #1
 801586c:	b2db      	uxtb	r3, r3
 801586e:	2b00      	cmp	r3, #0
 8015870:	d001      	beq.n	8015876 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015872:	2303      	movs	r3, #3
 8015874:	e015      	b.n	80158a2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015876:	4b0d      	ldr	r3, [pc, #52]	; (80158ac <LoRaMacCommandsRemoveCmd+0x60>)
 8015878:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	689b      	ldr	r3, [r3, #8]
 8015880:	1ad3      	subs	r3, r2, r3
 8015882:	3b01      	subs	r3, #1
 8015884:	4a09      	ldr	r2, [pc, #36]	; (80158ac <LoRaMacCommandsRemoveCmd+0x60>)
 8015886:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f7ff feb4 	bl	80155f8 <FreeMacCommandSlot>
 8015890:	4603      	mov	r3, r0
 8015892:	f083 0301 	eor.w	r3, r3, #1
 8015896:	b2db      	uxtb	r3, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	d001      	beq.n	80158a0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 801589c:	2305      	movs	r3, #5
 801589e:	e000      	b.n	80158a2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80158a0:	2300      	movs	r3, #0
}
 80158a2:	4618      	mov	r0, r3
 80158a4:	3708      	adds	r7, #8
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}
 80158aa:	bf00      	nop
 80158ac:	20001610 	.word	0x20001610

080158b0 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80158b0:	b480      	push	{r7}
 80158b2:	b085      	sub	sp, #20
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	4603      	mov	r3, r0
 80158b8:	6039      	str	r1, [r7, #0]
 80158ba:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80158bc:	4b0e      	ldr	r3, [pc, #56]	; (80158f8 <LoRaMacCommandsGetCmd+0x48>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80158c2:	e002      	b.n	80158ca <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d004      	beq.n	80158da <LoRaMacCommandsGetCmd+0x2a>
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	791b      	ldrb	r3, [r3, #4]
 80158d4:	79fa      	ldrb	r2, [r7, #7]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d1f4      	bne.n	80158c4 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	68fa      	ldr	r2, [r7, #12]
 80158de:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d101      	bne.n	80158ea <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80158e6:	2303      	movs	r3, #3
 80158e8:	e000      	b.n	80158ec <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80158ea:	2300      	movs	r3, #0
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3714      	adds	r7, #20
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bc80      	pop	{r7}
 80158f4:	4770      	bx	lr
 80158f6:	bf00      	nop
 80158f8:	20001610 	.word	0x20001610

080158fc <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015902:	4b0f      	ldr	r3, [pc, #60]	; (8015940 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015908:	e012      	b.n	8015930 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	7b1b      	ldrb	r3, [r3, #12]
 801590e:	f083 0301 	eor.w	r3, r3, #1
 8015912:	b2db      	uxtb	r3, r3
 8015914:	2b00      	cmp	r3, #0
 8015916:	d008      	beq.n	801592a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f7ff ff94 	bl	801584c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015924:	683b      	ldr	r3, [r7, #0]
 8015926:	607b      	str	r3, [r7, #4]
 8015928:	e002      	b.n	8015930 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d1e9      	bne.n	801590a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015936:	2300      	movs	r3, #0
}
 8015938:	4618      	mov	r0, r3
 801593a:	3708      	adds	r7, #8
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	20001610 	.word	0x20001610

08015944 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b082      	sub	sp, #8
 8015948:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801594a:	4b13      	ldr	r3, [pc, #76]	; (8015998 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015950:	e01a      	b.n	8015988 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	791b      	ldrb	r3, [r3, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	f7ff fef6 	bl	801574e <IsSticky>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d00d      	beq.n	8015984 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	791b      	ldrb	r3, [r3, #4]
 801596c:	4618      	mov	r0, r3
 801596e:	f7ff ff03 	bl	8015778 <IsConfirmationRequired>
 8015972:	4603      	mov	r3, r0
 8015974:	f083 0301 	eor.w	r3, r3, #1
 8015978:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801597a:	2b00      	cmp	r3, #0
 801597c:	d002      	beq.n	8015984 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f7ff ff64 	bl	801584c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d1e1      	bne.n	8015952 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801598e:	2300      	movs	r3, #0
}
 8015990:	4618      	mov	r0, r3
 8015992:	3708      	adds	r7, #8
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	20001610 	.word	0x20001610

0801599c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d101      	bne.n	80159ae <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80159aa:	2301      	movs	r3, #1
 80159ac:	e005      	b.n	80159ba <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80159ae:	4b05      	ldr	r3, [pc, #20]	; (80159c4 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80159b0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80159b8:	2300      	movs	r3, #0
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	370c      	adds	r7, #12
 80159be:	46bd      	mov	sp, r7
 80159c0:	bc80      	pop	{r7}
 80159c2:	4770      	bx	lr
 80159c4:	20001610 	.word	0x20001610

080159c8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b088      	sub	sp, #32
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80159d4:	4b25      	ldr	r3, [pc, #148]	; (8015a6c <LoRaMacCommandsSerializeCmds+0xa4>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80159da:	2300      	movs	r3, #0
 80159dc:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d002      	beq.n	80159ea <LoRaMacCommandsSerializeCmds+0x22>
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d126      	bne.n	8015a38 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80159ea:	2301      	movs	r3, #1
 80159ec:	e039      	b.n	8015a62 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80159ee:	7efb      	ldrb	r3, [r7, #27]
 80159f0:	68fa      	ldr	r2, [r7, #12]
 80159f2:	1ad2      	subs	r2, r2, r3
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	689b      	ldr	r3, [r3, #8]
 80159f8:	3301      	adds	r3, #1
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d320      	bcc.n	8015a40 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 80159fe:	7efb      	ldrb	r3, [r7, #27]
 8015a00:	1c5a      	adds	r2, r3, #1
 8015a02:	76fa      	strb	r2, [r7, #27]
 8015a04:	461a      	mov	r2, r3
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	4413      	add	r3, r2
 8015a0a:	69fa      	ldr	r2, [r7, #28]
 8015a0c:	7912      	ldrb	r2, [r2, #4]
 8015a0e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015a10:	7efb      	ldrb	r3, [r7, #27]
 8015a12:	687a      	ldr	r2, [r7, #4]
 8015a14:	18d0      	adds	r0, r2, r3
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	1d59      	adds	r1, r3, #5
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	689b      	ldr	r3, [r3, #8]
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	461a      	mov	r2, r3
 8015a22:	f003 ffbc 	bl	801999e <memcpy1>
            itr += curElement->PayloadSize;
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	689b      	ldr	r3, [r3, #8]
 8015a2a:	b2da      	uxtb	r2, r3
 8015a2c:	7efb      	ldrb	r3, [r7, #27]
 8015a2e:	4413      	add	r3, r2
 8015a30:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015a38:	69fb      	ldr	r3, [r7, #28]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d1d7      	bne.n	80159ee <LoRaMacCommandsSerializeCmds+0x26>
 8015a3e:	e009      	b.n	8015a54 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015a40:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015a42:	e007      	b.n	8015a54 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015a4a:	69f8      	ldr	r0, [r7, #28]
 8015a4c:	f7ff fefe 	bl	801584c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015a54:	69fb      	ldr	r3, [r7, #28]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d1f4      	bne.n	8015a44 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015a5a:	68b8      	ldr	r0, [r7, #8]
 8015a5c:	f7ff ff9e 	bl	801599c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015a60:	2300      	movs	r3, #0
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3720      	adds	r7, #32
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	20001610 	.word	0x20001610

08015a70 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015a70:	b480      	push	{r7}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	4603      	mov	r3, r0
 8015a78:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015a7e:	79fb      	ldrb	r3, [r7, #7]
 8015a80:	3b02      	subs	r3, #2
 8015a82:	2b11      	cmp	r3, #17
 8015a84:	d850      	bhi.n	8015b28 <LoRaMacCommandsGetCmdSize+0xb8>
 8015a86:	a201      	add	r2, pc, #4	; (adr r2, 8015a8c <LoRaMacCommandsGetCmdSize+0x1c>)
 8015a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a8c:	08015ad5 	.word	0x08015ad5
 8015a90:	08015adb 	.word	0x08015adb
 8015a94:	08015ae1 	.word	0x08015ae1
 8015a98:	08015ae7 	.word	0x08015ae7
 8015a9c:	08015aed 	.word	0x08015aed
 8015aa0:	08015af3 	.word	0x08015af3
 8015aa4:	08015af9 	.word	0x08015af9
 8015aa8:	08015aff 	.word	0x08015aff
 8015aac:	08015b05 	.word	0x08015b05
 8015ab0:	08015b29 	.word	0x08015b29
 8015ab4:	08015b29 	.word	0x08015b29
 8015ab8:	08015b0b 	.word	0x08015b0b
 8015abc:	08015b29 	.word	0x08015b29
 8015ac0:	08015b29 	.word	0x08015b29
 8015ac4:	08015b11 	.word	0x08015b11
 8015ac8:	08015b17 	.word	0x08015b17
 8015acc:	08015b1d 	.word	0x08015b1d
 8015ad0:	08015b23 	.word	0x08015b23
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015ad4:	2303      	movs	r3, #3
 8015ad6:	73fb      	strb	r3, [r7, #15]
            break;
 8015ad8:	e027      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015ada:	2305      	movs	r3, #5
 8015adc:	73fb      	strb	r3, [r7, #15]
            break;
 8015ade:	e024      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015ae0:	2302      	movs	r3, #2
 8015ae2:	73fb      	strb	r3, [r7, #15]
            break;
 8015ae4:	e021      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015ae6:	2305      	movs	r3, #5
 8015ae8:	73fb      	strb	r3, [r7, #15]
            break;
 8015aea:	e01e      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015aec:	2301      	movs	r3, #1
 8015aee:	73fb      	strb	r3, [r7, #15]
            break;
 8015af0:	e01b      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015af2:	2306      	movs	r3, #6
 8015af4:	73fb      	strb	r3, [r7, #15]
            break;
 8015af6:	e018      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015af8:	2302      	movs	r3, #2
 8015afa:	73fb      	strb	r3, [r7, #15]
            break;
 8015afc:	e015      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015afe:	2302      	movs	r3, #2
 8015b00:	73fb      	strb	r3, [r7, #15]
            break;
 8015b02:	e012      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015b04:	2305      	movs	r3, #5
 8015b06:	73fb      	strb	r3, [r7, #15]
            break;
 8015b08:	e00f      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015b0a:	2306      	movs	r3, #6
 8015b0c:	73fb      	strb	r3, [r7, #15]
            break;
 8015b0e:	e00c      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015b10:	2301      	movs	r3, #1
 8015b12:	73fb      	strb	r3, [r7, #15]
            break;
 8015b14:	e009      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015b16:	2305      	movs	r3, #5
 8015b18:	73fb      	strb	r3, [r7, #15]
            break;
 8015b1a:	e006      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015b1c:	2304      	movs	r3, #4
 8015b1e:	73fb      	strb	r3, [r7, #15]
            break;
 8015b20:	e003      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015b22:	2304      	movs	r3, #4
 8015b24:	73fb      	strb	r3, [r7, #15]
            break;
 8015b26:	e000      	b.n	8015b2a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015b28:	bf00      	nop
        }
    }
    return cidSize;
 8015b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bc80      	pop	{r7}
 8015b34:	4770      	bx	lr
 8015b36:	bf00      	nop

08015b38 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015b38:	b480      	push	{r7}
 8015b3a:	b083      	sub	sp, #12
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	4a07      	ldr	r2, [pc, #28]	; (8015b60 <IncreaseBufferPointer+0x28>)
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d102      	bne.n	8015b4e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015b48:	4b06      	ldr	r3, [pc, #24]	; (8015b64 <IncreaseBufferPointer+0x2c>)
 8015b4a:	607b      	str	r3, [r7, #4]
 8015b4c:	e002      	b.n	8015b54 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3304      	adds	r3, #4
 8015b52:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015b54:	687b      	ldr	r3, [r7, #4]
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	370c      	adds	r7, #12
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bc80      	pop	{r7}
 8015b5e:	4770      	bx	lr
 8015b60:	20001728 	.word	0x20001728
 8015b64:	20001718 	.word	0x20001718

08015b68 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015b68:	b480      	push	{r7}
 8015b6a:	b083      	sub	sp, #12
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	4603      	mov	r3, r0
 8015b70:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015b72:	79fb      	ldrb	r3, [r7, #7]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d101      	bne.n	8015b7c <IsListEmpty+0x14>
    {
        return true;
 8015b78:	2301      	movs	r3, #1
 8015b7a:	e000      	b.n	8015b7e <IsListEmpty+0x16>
    }
    return false;
 8015b7c:	2300      	movs	r3, #0
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	370c      	adds	r7, #12
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bc80      	pop	{r7}
 8015b86:	4770      	bx	lr

08015b88 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015b88:	b480      	push	{r7}
 8015b8a:	b083      	sub	sp, #12
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	4603      	mov	r3, r0
 8015b90:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015b92:	79fb      	ldrb	r3, [r7, #7]
 8015b94:	2b04      	cmp	r3, #4
 8015b96:	d901      	bls.n	8015b9c <IsListFull+0x14>
    {
        return true;
 8015b98:	2301      	movs	r3, #1
 8015b9a:	e000      	b.n	8015b9e <IsListFull+0x16>
    }
    return false;
 8015b9c:	2300      	movs	r3, #0
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	370c      	adds	r7, #12
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bc80      	pop	{r7}
 8015ba6:	4770      	bx	lr

08015ba8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b086      	sub	sp, #24
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	4603      	mov	r3, r0
 8015bb0:	60b9      	str	r1, [r7, #8]
 8015bb2:	607a      	str	r2, [r7, #4]
 8015bb4:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8015bb6:	68bb      	ldr	r3, [r7, #8]
 8015bb8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015bba:	4b13      	ldr	r3, [pc, #76]	; (8015c08 <GetElement+0x60>)
 8015bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f7ff ffd1 	bl	8015b68 <IsListEmpty>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d001      	beq.n	8015bd0 <GetElement+0x28>
    {
        return NULL;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	e017      	b.n	8015c00 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	74fb      	strb	r3, [r7, #19]
 8015bd4:	e00d      	b.n	8015bf2 <GetElement+0x4a>
    {
        if( element->Request == request )
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	7bfa      	ldrb	r2, [r7, #15]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d101      	bne.n	8015be4 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	e00d      	b.n	8015c00 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015be4:	6978      	ldr	r0, [r7, #20]
 8015be6:	f7ff ffa7 	bl	8015b38 <IncreaseBufferPointer>
 8015bea:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015bec:	7cfb      	ldrb	r3, [r7, #19]
 8015bee:	3301      	adds	r3, #1
 8015bf0:	74fb      	strb	r3, [r7, #19]
 8015bf2:	4b05      	ldr	r3, [pc, #20]	; (8015c08 <GetElement+0x60>)
 8015bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015bf8:	7cfa      	ldrb	r2, [r7, #19]
 8015bfa:	429a      	cmp	r2, r3
 8015bfc:	d3eb      	bcc.n	8015bd6 <GetElement+0x2e>
    }

    return NULL;
 8015bfe:	2300      	movs	r3, #0
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3718      	adds	r7, #24
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	2000170c 	.word	0x2000170c

08015c0c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015c14:	4a0c      	ldr	r2, [pc, #48]	; (8015c48 <LoRaMacConfirmQueueInit+0x3c>)
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8015c1a:	4b0b      	ldr	r3, [pc, #44]	; (8015c48 <LoRaMacConfirmQueueInit+0x3c>)
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015c22:	4b09      	ldr	r3, [pc, #36]	; (8015c48 <LoRaMacConfirmQueueInit+0x3c>)
 8015c24:	4a09      	ldr	r2, [pc, #36]	; (8015c4c <LoRaMacConfirmQueueInit+0x40>)
 8015c26:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015c28:	4b07      	ldr	r3, [pc, #28]	; (8015c48 <LoRaMacConfirmQueueInit+0x3c>)
 8015c2a:	4a08      	ldr	r2, [pc, #32]	; (8015c4c <LoRaMacConfirmQueueInit+0x40>)
 8015c2c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8015c2e:	2214      	movs	r2, #20
 8015c30:	21ff      	movs	r1, #255	; 0xff
 8015c32:	4806      	ldr	r0, [pc, #24]	; (8015c4c <LoRaMacConfirmQueueInit+0x40>)
 8015c34:	f003 feee 	bl	8019a14 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015c38:	4b03      	ldr	r3, [pc, #12]	; (8015c48 <LoRaMacConfirmQueueInit+0x3c>)
 8015c3a:	2201      	movs	r2, #1
 8015c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8015c40:	bf00      	nop
 8015c42:	3708      	adds	r7, #8
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	2000170c 	.word	0x2000170c
 8015c4c:	20001718 	.word	0x20001718

08015c50 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015c58:	4b19      	ldr	r3, [pc, #100]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f7ff ff92 	bl	8015b88 <IsListFull>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d001      	beq.n	8015c6e <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e023      	b.n	8015cb6 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015c6e:	4b14      	ldr	r3, [pc, #80]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015c70:	689b      	ldr	r3, [r3, #8]
 8015c72:	687a      	ldr	r2, [r7, #4]
 8015c74:	7812      	ldrb	r2, [r2, #0]
 8015c76:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015c78:	4b11      	ldr	r3, [pc, #68]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	7852      	ldrb	r2, [r2, #1]
 8015c80:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015c82:	4b0f      	ldr	r3, [pc, #60]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015c84:	689b      	ldr	r3, [r3, #8]
 8015c86:	687a      	ldr	r2, [r7, #4]
 8015c88:	78d2      	ldrb	r2, [r2, #3]
 8015c8a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015c8c:	4b0c      	ldr	r3, [pc, #48]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015c8e:	689b      	ldr	r3, [r3, #8]
 8015c90:	2200      	movs	r2, #0
 8015c92:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8015c94:	4b0a      	ldr	r3, [pc, #40]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	4b08      	ldr	r3, [pc, #32]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015ca0:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015ca4:	4b06      	ldr	r3, [pc, #24]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015ca6:	689b      	ldr	r3, [r3, #8]
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f7ff ff45 	bl	8015b38 <IncreaseBufferPointer>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	4a03      	ldr	r2, [pc, #12]	; (8015cc0 <LoRaMacConfirmQueueAdd+0x70>)
 8015cb2:	6093      	str	r3, [r2, #8]

    return true;
 8015cb4:	2301      	movs	r3, #1
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3708      	adds	r7, #8
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}
 8015cbe:	bf00      	nop
 8015cc0:	2000170c 	.word	0x2000170c

08015cc4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015cc8:	4b0e      	ldr	r3, [pc, #56]	; (8015d04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cce:	4618      	mov	r0, r3
 8015cd0:	f7ff ff4a 	bl	8015b68 <IsListEmpty>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d001      	beq.n	8015cde <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	e010      	b.n	8015d00 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015cde:	4b09      	ldr	r3, [pc, #36]	; (8015d04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ce4:	3b01      	subs	r3, #1
 8015ce6:	b2da      	uxtb	r2, r3
 8015ce8:	4b06      	ldr	r3, [pc, #24]	; (8015d04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015cea:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015cee:	4b05      	ldr	r3, [pc, #20]	; (8015d04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015cf0:	685b      	ldr	r3, [r3, #4]
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7ff ff20 	bl	8015b38 <IncreaseBufferPointer>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	4a02      	ldr	r2, [pc, #8]	; (8015d04 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015cfc:	6053      	str	r3, [r2, #4]

    return true;
 8015cfe:	2301      	movs	r3, #1
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	2000170c 	.word	0x2000170c

08015d08 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	4603      	mov	r3, r0
 8015d10:	460a      	mov	r2, r1
 8015d12:	71fb      	strb	r3, [r7, #7]
 8015d14:	4613      	mov	r3, r2
 8015d16:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015d1c:	4b10      	ldr	r3, [pc, #64]	; (8015d60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015d1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7ff ff20 	bl	8015b68 <IsListEmpty>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	f083 0301 	eor.w	r3, r3, #1
 8015d2e:	b2db      	uxtb	r3, r3
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d011      	beq.n	8015d58 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015d34:	4b0a      	ldr	r3, [pc, #40]	; (8015d60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015d36:	6859      	ldr	r1, [r3, #4]
 8015d38:	4b09      	ldr	r3, [pc, #36]	; (8015d60 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015d3a:	689a      	ldr	r2, [r3, #8]
 8015d3c:	79bb      	ldrb	r3, [r7, #6]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f7ff ff32 	bl	8015ba8 <GetElement>
 8015d44:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d005      	beq.n	8015d58 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	79fa      	ldrb	r2, [r7, #7]
 8015d50:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2201      	movs	r2, #1
 8015d56:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8015d58:	bf00      	nop
 8015d5a:	3710      	adds	r7, #16
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}
 8015d60:	2000170c 	.word	0x2000170c

08015d64 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b084      	sub	sp, #16
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015d72:	4b10      	ldr	r3, [pc, #64]	; (8015db4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d78:	4618      	mov	r0, r3
 8015d7a:	f7ff fef5 	bl	8015b68 <IsListEmpty>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	f083 0301 	eor.w	r3, r3, #1
 8015d84:	b2db      	uxtb	r3, r3
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d00e      	beq.n	8015da8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015d8a:	4b0a      	ldr	r3, [pc, #40]	; (8015db4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015d8c:	6859      	ldr	r1, [r3, #4]
 8015d8e:	4b09      	ldr	r3, [pc, #36]	; (8015db4 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015d90:	689a      	ldr	r2, [r3, #8]
 8015d92:	79fb      	ldrb	r3, [r7, #7]
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7ff ff07 	bl	8015ba8 <GetElement>
 8015d9a:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d002      	beq.n	8015da8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	785b      	ldrb	r3, [r3, #1]
 8015da6:	e000      	b.n	8015daa <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015da8:	2301      	movs	r3, #1
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3710      	adds	r7, #16
 8015dae:	46bd      	mov	sp, r7
 8015db0:	bd80      	pop	{r7, pc}
 8015db2:	bf00      	nop
 8015db4:	2000170c 	.word	0x2000170c

08015db8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015dc2:	4b16      	ldr	r3, [pc, #88]	; (8015e1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8015dc8:	4a14      	ldr	r2, [pc, #80]	; (8015e1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015dca:	79fb      	ldrb	r3, [r7, #7]
 8015dcc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015dd0:	4b12      	ldr	r3, [pc, #72]	; (8015e1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7ff fec6 	bl	8015b68 <IsListEmpty>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	f083 0301 	eor.w	r3, r3, #1
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d015      	beq.n	8015e14 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	79fa      	ldrb	r2, [r7, #7]
 8015dec:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	78db      	ldrb	r3, [r3, #3]
 8015df2:	f083 0301 	eor.w	r3, r3, #1
 8015df6:	b2db      	uxtb	r3, r3
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d002      	beq.n	8015e02 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2201      	movs	r2, #1
 8015e00:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f7ff fe98 	bl	8015b38 <IncreaseBufferPointer>
 8015e08:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015e0a:	4b04      	ldr	r3, [pc, #16]	; (8015e1c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015e0c:	689b      	ldr	r3, [r3, #8]
 8015e0e:	68fa      	ldr	r2, [r7, #12]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d1e9      	bne.n	8015de8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015e14:	bf00      	nop
 8015e16:	3710      	adds	r7, #16
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	2000170c 	.word	0x2000170c

08015e20 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b082      	sub	sp, #8
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	4603      	mov	r3, r0
 8015e28:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015e2a:	4b09      	ldr	r3, [pc, #36]	; (8015e50 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015e2c:	6859      	ldr	r1, [r3, #4]
 8015e2e:	4b08      	ldr	r3, [pc, #32]	; (8015e50 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015e30:	689a      	ldr	r2, [r3, #8]
 8015e32:	79fb      	ldrb	r3, [r7, #7]
 8015e34:	4618      	mov	r0, r3
 8015e36:	f7ff feb7 	bl	8015ba8 <GetElement>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d001      	beq.n	8015e44 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015e40:	2301      	movs	r3, #1
 8015e42:	e000      	b.n	8015e46 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	2000170c 	.word	0x2000170c

08015e54 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b084      	sub	sp, #16
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015e5c:	4b25      	ldr	r3, [pc, #148]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e62:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015e64:	2300      	movs	r3, #0
 8015e66:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8015e68:	f107 0308 	add.w	r3, r7, #8
 8015e6c:	2204      	movs	r2, #4
 8015e6e:	2100      	movs	r1, #0
 8015e70:	4618      	mov	r0, r3
 8015e72:	f003 fdcf 	bl	8019a14 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8015e76:	2300      	movs	r3, #0
 8015e78:	73fb      	strb	r3, [r7, #15]
 8015e7a:	e032      	b.n	8015ee2 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015e7c:	4b1d      	ldr	r3, [pc, #116]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015e7e:	685b      	ldr	r3, [r3, #4]
 8015e80:	781a      	ldrb	r2, [r3, #0]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015e86:	4b1b      	ldr	r3, [pc, #108]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	785a      	ldrb	r2, [r3, #1]
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015e90:	4b18      	ldr	r3, [pc, #96]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	789b      	ldrb	r3, [r3, #2]
 8015e96:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8015e98:	7b7b      	ldrb	r3, [r7, #13]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d005      	beq.n	8015eaa <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015e9e:	4b15      	ldr	r3, [pc, #84]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	6878      	ldr	r0, [r7, #4]
 8015ea6:	4798      	blx	r3
 8015ea8:	e00b      	b.n	8015ec2 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015eaa:	4b12      	ldr	r3, [pc, #72]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015eb2:	4b10      	ldr	r3, [pc, #64]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015eb4:	685b      	ldr	r3, [r3, #4]
 8015eb6:	785b      	ldrb	r3, [r3, #1]
 8015eb8:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015eba:	4b0e      	ldr	r3, [pc, #56]	; (8015ef4 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015ebc:	685b      	ldr	r3, [r3, #4]
 8015ebe:	78db      	ldrb	r3, [r3, #3]
 8015ec0:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015ec2:	f7ff feff 	bl	8015cc4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015ec6:	7b7b      	ldrb	r3, [r7, #13]
 8015ec8:	f083 0301 	eor.w	r3, r3, #1
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d004      	beq.n	8015edc <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015ed2:	f107 0308 	add.w	r3, r7, #8
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7ff feba 	bl	8015c50 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015edc:	7bfb      	ldrb	r3, [r7, #15]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	73fb      	strb	r3, [r7, #15]
 8015ee2:	7bfa      	ldrb	r2, [r7, #15]
 8015ee4:	7bbb      	ldrb	r3, [r7, #14]
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d3c8      	bcc.n	8015e7c <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8015eea:	bf00      	nop
 8015eec:	bf00      	nop
 8015eee:	3710      	adds	r7, #16
 8015ef0:	46bd      	mov	sp, r7
 8015ef2:	bd80      	pop	{r7, pc}
 8015ef4:	2000170c 	.word	0x2000170c

08015ef8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015ef8:	b480      	push	{r7}
 8015efa:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015efc:	4b03      	ldr	r3, [pc, #12]	; (8015f0c <LoRaMacConfirmQueueGetCnt+0x14>)
 8015efe:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	46bd      	mov	sp, r7
 8015f06:	bc80      	pop	{r7}
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop
 8015f0c:	2000170c 	.word	0x2000170c

08015f10 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015f14:	4b06      	ldr	r3, [pc, #24]	; (8015f30 <LoRaMacConfirmQueueIsFull+0x20>)
 8015f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7ff fe34 	bl	8015b88 <IsListFull>
 8015f20:	4603      	mov	r3, r0
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d001      	beq.n	8015f2a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8015f26:	2301      	movs	r3, #1
 8015f28:	e000      	b.n	8015f2c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8015f2a:	2300      	movs	r3, #0
    }
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	2000170c 	.word	0x2000170c

08015f34 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b08e      	sub	sp, #56	; 0x38
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	607b      	str	r3, [r7, #4]
 8015f3e:	460b      	mov	r3, r1
 8015f40:	817b      	strh	r3, [r7, #10]
 8015f42:	4613      	mov	r3, r2
 8015f44:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d101      	bne.n	8015f50 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f4c:	230a      	movs	r3, #10
 8015f4e:	e086      	b.n	801605e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015f50:	2300      	movs	r3, #0
 8015f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8015f56:	2301      	movs	r3, #1
 8015f58:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	623b      	str	r3, [r7, #32]
 8015f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015f62:	2200      	movs	r2, #0
 8015f64:	601a      	str	r2, [r3, #0]
 8015f66:	605a      	str	r2, [r3, #4]
 8015f68:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	613b      	str	r3, [r7, #16]
 8015f6e:	f107 0314 	add.w	r3, r7, #20
 8015f72:	2200      	movs	r2, #0
 8015f74:	601a      	str	r2, [r3, #0]
 8015f76:	605a      	str	r2, [r3, #4]
 8015f78:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8015f7a:	2301      	movs	r3, #1
 8015f7c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8015f7e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015f82:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	0a1b      	lsrs	r3, r3, #8
 8015f8e:	b2db      	uxtb	r3, r3
 8015f90:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	0c1b      	lsrs	r3, r3, #16
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	0e1b      	lsrs	r3, r3, #24
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8015fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fa4:	b2db      	uxtb	r3, r3
 8015fa6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015faa:	0a1b      	lsrs	r3, r3, #8
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fb2:	0c1b      	lsrs	r3, r3, #16
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fba:	0e1b      	lsrs	r3, r3, #24
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8015fc0:	e048      	b.n	8016054 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8015fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8015fc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fca:	3301      	adds	r3, #1
 8015fcc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015fce:	f107 0320 	add.w	r3, r7, #32
 8015fd2:	7a7a      	ldrb	r2, [r7, #9]
 8015fd4:	f107 0010 	add.w	r0, r7, #16
 8015fd8:	2110      	movs	r1, #16
 8015fda:	f7f8 ff69 	bl	800eeb0 <SecureElementAesEncrypt>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d001      	beq.n	8015fe8 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fe4:	230f      	movs	r3, #15
 8015fe6:	e03a      	b.n	801605e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015fe8:	2300      	movs	r3, #0
 8015fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015fee:	e01e      	b.n	801602e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015ff0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015ff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015ff8:	4413      	add	r3, r2
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	4413      	add	r3, r2
 8016000:	7819      	ldrb	r1, [r3, #0]
 8016002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016006:	3338      	adds	r3, #56	; 0x38
 8016008:	443b      	add	r3, r7
 801600a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801600e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016012:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016016:	4403      	add	r3, r0
 8016018:	4618      	mov	r0, r3
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	4403      	add	r3, r0
 801601e:	404a      	eors	r2, r1
 8016020:	b2d2      	uxtb	r2, r2
 8016022:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016028:	3301      	adds	r3, #1
 801602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801602e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016032:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016036:	2a10      	cmp	r2, #16
 8016038:	bfa8      	it	ge
 801603a:	2210      	movge	r2, #16
 801603c:	b212      	sxth	r2, r2
 801603e:	4293      	cmp	r3, r2
 8016040:	dbd6      	blt.n	8015ff0 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8016042:	897b      	ldrh	r3, [r7, #10]
 8016044:	3b10      	subs	r3, #16
 8016046:	b29b      	uxth	r3, r3
 8016048:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801604a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801604e:	3310      	adds	r3, #16
 8016050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8016054:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016058:	2b00      	cmp	r3, #0
 801605a:	dcb2      	bgt.n	8015fc2 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801605c:	2300      	movs	r3, #0
}
 801605e:	4618      	mov	r0, r3
 8016060:	3738      	adds	r7, #56	; 0x38
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}

08016066 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8016066:	b490      	push	{r4, r7}
 8016068:	b082      	sub	sp, #8
 801606a:	af00      	add	r7, sp, #0
 801606c:	4604      	mov	r4, r0
 801606e:	4608      	mov	r0, r1
 8016070:	4611      	mov	r1, r2
 8016072:	461a      	mov	r2, r3
 8016074:	4623      	mov	r3, r4
 8016076:	80fb      	strh	r3, [r7, #6]
 8016078:	4603      	mov	r3, r0
 801607a:	717b      	strb	r3, [r7, #5]
 801607c:	460b      	mov	r3, r1
 801607e:	713b      	strb	r3, [r7, #4]
 8016080:	4613      	mov	r3, r2
 8016082:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016084:	69bb      	ldr	r3, [r7, #24]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d101      	bne.n	801608e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801608a:	230a      	movs	r3, #10
 801608c:	e04e      	b.n	801612c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801608e:	69bb      	ldr	r3, [r7, #24]
 8016090:	2249      	movs	r2, #73	; 0x49
 8016092:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8016094:	69bb      	ldr	r3, [r7, #24]
 8016096:	3301      	adds	r3, #1
 8016098:	2200      	movs	r2, #0
 801609a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801609c:	69bb      	ldr	r3, [r7, #24]
 801609e:	3302      	adds	r3, #2
 80160a0:	2200      	movs	r2, #0
 80160a2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80160a4:	69bb      	ldr	r3, [r7, #24]
 80160a6:	3303      	adds	r3, #3
 80160a8:	2200      	movs	r2, #0
 80160aa:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	3304      	adds	r3, #4
 80160b0:	2200      	movs	r2, #0
 80160b2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80160b4:	69bb      	ldr	r3, [r7, #24]
 80160b6:	3305      	adds	r3, #5
 80160b8:	78fa      	ldrb	r2, [r7, #3]
 80160ba:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	3306      	adds	r3, #6
 80160c0:	693a      	ldr	r2, [r7, #16]
 80160c2:	b2d2      	uxtb	r2, r2
 80160c4:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	0a1a      	lsrs	r2, r3, #8
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	3307      	adds	r3, #7
 80160ce:	b2d2      	uxtb	r2, r2
 80160d0:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	0c1a      	lsrs	r2, r3, #16
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	3308      	adds	r3, #8
 80160da:	b2d2      	uxtb	r2, r2
 80160dc:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80160de:	693b      	ldr	r3, [r7, #16]
 80160e0:	0e1a      	lsrs	r2, r3, #24
 80160e2:	69bb      	ldr	r3, [r7, #24]
 80160e4:	3309      	adds	r3, #9
 80160e6:	b2d2      	uxtb	r2, r2
 80160e8:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	330a      	adds	r3, #10
 80160ee:	697a      	ldr	r2, [r7, #20]
 80160f0:	b2d2      	uxtb	r2, r2
 80160f2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	0a1a      	lsrs	r2, r3, #8
 80160f8:	69bb      	ldr	r3, [r7, #24]
 80160fa:	330b      	adds	r3, #11
 80160fc:	b2d2      	uxtb	r2, r2
 80160fe:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	0c1a      	lsrs	r2, r3, #16
 8016104:	69bb      	ldr	r3, [r7, #24]
 8016106:	330c      	adds	r3, #12
 8016108:	b2d2      	uxtb	r2, r2
 801610a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	0e1a      	lsrs	r2, r3, #24
 8016110:	69bb      	ldr	r3, [r7, #24]
 8016112:	330d      	adds	r3, #13
 8016114:	b2d2      	uxtb	r2, r2
 8016116:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016118:	69bb      	ldr	r3, [r7, #24]
 801611a:	330e      	adds	r3, #14
 801611c:	2200      	movs	r2, #0
 801611e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016120:	69bb      	ldr	r3, [r7, #24]
 8016122:	330f      	adds	r3, #15
 8016124:	88fa      	ldrh	r2, [r7, #6]
 8016126:	b2d2      	uxtb	r2, r2
 8016128:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801612a:	2300      	movs	r3, #0
}
 801612c:	4618      	mov	r0, r3
 801612e:	3708      	adds	r7, #8
 8016130:	46bd      	mov	sp, r7
 8016132:	bc90      	pop	{r4, r7}
 8016134:	4770      	bx	lr

08016136 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016136:	b590      	push	{r4, r7, lr}
 8016138:	b08b      	sub	sp, #44	; 0x2c
 801613a:	af04      	add	r7, sp, #16
 801613c:	6078      	str	r0, [r7, #4]
 801613e:	4608      	mov	r0, r1
 8016140:	4611      	mov	r1, r2
 8016142:	461a      	mov	r2, r3
 8016144:	4603      	mov	r3, r0
 8016146:	807b      	strh	r3, [r7, #2]
 8016148:	460b      	mov	r3, r1
 801614a:	707b      	strb	r3, [r7, #1]
 801614c:	4613      	mov	r3, r2
 801614e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d002      	beq.n	801615c <ComputeCmacB0+0x26>
 8016156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016158:	2b00      	cmp	r3, #0
 801615a:	d101      	bne.n	8016160 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801615c:	230a      	movs	r3, #10
 801615e:	e024      	b.n	80161aa <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016160:	887b      	ldrh	r3, [r7, #2]
 8016162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016166:	d901      	bls.n	801616c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016168:	230e      	movs	r3, #14
 801616a:	e01e      	b.n	80161aa <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801616c:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016170:	783a      	ldrb	r2, [r7, #0]
 8016172:	7879      	ldrb	r1, [r7, #1]
 8016174:	8878      	ldrh	r0, [r7, #2]
 8016176:	f107 0308 	add.w	r3, r7, #8
 801617a:	9302      	str	r3, [sp, #8]
 801617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617e:	9301      	str	r3, [sp, #4]
 8016180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016182:	9300      	str	r3, [sp, #0]
 8016184:	4623      	mov	r3, r4
 8016186:	f7ff ff6e 	bl	8016066 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801618a:	887a      	ldrh	r2, [r7, #2]
 801618c:	7879      	ldrb	r1, [r7, #1]
 801618e:	f107 0008 	add.w	r0, r7, #8
 8016192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016194:	9300      	str	r3, [sp, #0]
 8016196:	460b      	mov	r3, r1
 8016198:	6879      	ldr	r1, [r7, #4]
 801619a:	f7f8 fe43 	bl	800ee24 <SecureElementComputeAesCmac>
 801619e:	4603      	mov	r3, r0
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d001      	beq.n	80161a8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161a4:	230f      	movs	r3, #15
 80161a6:	e000      	b.n	80161aa <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80161a8:	2300      	movs	r3, #0
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	371c      	adds	r7, #28
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd90      	pop	{r4, r7, pc}

080161b2 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80161b2:	b590      	push	{r4, r7, lr}
 80161b4:	b0cd      	sub	sp, #308	; 0x134
 80161b6:	af04      	add	r7, sp, #16
 80161b8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80161bc:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80161c0:	6020      	str	r0, [r4, #0]
 80161c2:	460c      	mov	r4, r1
 80161c4:	4610      	mov	r0, r2
 80161c6:	4619      	mov	r1, r3
 80161c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80161cc:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80161d0:	4622      	mov	r2, r4
 80161d2:	801a      	strh	r2, [r3, #0]
 80161d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80161d8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80161dc:	4602      	mov	r2, r0
 80161de:	701a      	strb	r2, [r3, #0]
 80161e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80161e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80161e8:	460a      	mov	r2, r1
 80161ea:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80161ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80161f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d101      	bne.n	80161fe <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80161fa:	230a      	movs	r3, #10
 80161fc:	e063      	b.n	80162c6 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80161fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016202:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016206:	881b      	ldrh	r3, [r3, #0]
 8016208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801620c:	d901      	bls.n	8016212 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801620e:	230e      	movs	r3, #14
 8016210:	e059      	b.n	80162c6 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016212:	f107 030c 	add.w	r3, r7, #12
 8016216:	f44f 7288 	mov.w	r2, #272	; 0x110
 801621a:	2100      	movs	r1, #0
 801621c:	4618      	mov	r0, r3
 801621e:	f003 fbf9 	bl	8019a14 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016222:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016226:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801622a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801622e:	781a      	ldrb	r2, [r3, #0]
 8016230:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016234:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016238:	7819      	ldrb	r1, [r3, #0]
 801623a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801623e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016242:	8818      	ldrh	r0, [r3, #0]
 8016244:	f107 030c 	add.w	r3, r7, #12
 8016248:	9302      	str	r3, [sp, #8]
 801624a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801624e:	9301      	str	r3, [sp, #4]
 8016250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016254:	9300      	str	r3, [sp, #0]
 8016256:	4623      	mov	r3, r4
 8016258:	f7ff ff05 	bl	8016066 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801625c:	f107 030c 	add.w	r3, r7, #12
 8016260:	3310      	adds	r3, #16
 8016262:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016266:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 801626a:	8812      	ldrh	r2, [r2, #0]
 801626c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016270:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016274:	6809      	ldr	r1, [r1, #0]
 8016276:	4618      	mov	r0, r3
 8016278:	f003 fb91 	bl	801999e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801627c:	2306      	movs	r3, #6
 801627e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016282:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016286:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801628a:	881b      	ldrh	r3, [r3, #0]
 801628c:	3310      	adds	r3, #16
 801628e:	4619      	mov	r1, r3
 8016290:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016294:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	f107 000c 	add.w	r0, r7, #12
 801629e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80162a2:	f7f8 fdd9 	bl	800ee58 <SecureElementVerifyAesCmac>
 80162a6:	4603      	mov	r3, r0
 80162a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80162ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80162b4:	2300      	movs	r3, #0
 80162b6:	e006      	b.n	80162c6 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80162b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80162bc:	2b01      	cmp	r3, #1
 80162be:	d101      	bne.n	80162c4 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80162c0:	2301      	movs	r3, #1
 80162c2:	e000      	b.n	80162c6 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80162c4:	230f      	movs	r3, #15
}
 80162c6:	4618      	mov	r0, r3
 80162c8:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd90      	pop	{r4, r7, pc}

080162d0 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80162d0:	b480      	push	{r7}
 80162d2:	b085      	sub	sp, #20
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	4603      	mov	r3, r0
 80162d8:	6039      	str	r1, [r7, #0]
 80162da:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80162dc:	2300      	movs	r3, #0
 80162de:	73fb      	strb	r3, [r7, #15]
 80162e0:	e011      	b.n	8016306 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80162e2:	7bfb      	ldrb	r3, [r7, #15]
 80162e4:	4a0c      	ldr	r2, [pc, #48]	; (8016318 <GetKeyAddrItem+0x48>)
 80162e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80162ea:	79fa      	ldrb	r2, [r7, #7]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d107      	bne.n	8016300 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80162f0:	7bfb      	ldrb	r3, [r7, #15]
 80162f2:	009b      	lsls	r3, r3, #2
 80162f4:	4a08      	ldr	r2, [pc, #32]	; (8016318 <GetKeyAddrItem+0x48>)
 80162f6:	441a      	add	r2, r3
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80162fc:	2300      	movs	r3, #0
 80162fe:	e006      	b.n	801630e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016300:	7bfb      	ldrb	r3, [r7, #15]
 8016302:	3301      	adds	r3, #1
 8016304:	73fb      	strb	r3, [r7, #15]
 8016306:	7bfb      	ldrb	r3, [r7, #15]
 8016308:	2b01      	cmp	r3, #1
 801630a:	d9ea      	bls.n	80162e2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801630c:	230c      	movs	r3, #12
}
 801630e:	4618      	mov	r0, r3
 8016310:	3714      	adds	r7, #20
 8016312:	46bd      	mov	sp, r7
 8016314:	bc80      	pop	{r7}
 8016316:	4770      	bx	lr
 8016318:	20000128 	.word	0x20000128

0801631c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b088      	sub	sp, #32
 8016320:	af00      	add	r7, sp, #0
 8016322:	60b9      	str	r1, [r7, #8]
 8016324:	607a      	str	r2, [r7, #4]
 8016326:	461a      	mov	r2, r3
 8016328:	4603      	mov	r3, r0
 801632a:	73fb      	strb	r3, [r7, #15]
 801632c:	4613      	mov	r3, r2
 801632e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016330:	2300      	movs	r3, #0
 8016332:	613b      	str	r3, [r7, #16]
 8016334:	f107 0314 	add.w	r3, r7, #20
 8016338:	2200      	movs	r2, #0
 801633a:	601a      	str	r2, [r3, #0]
 801633c:	605a      	str	r2, [r3, #4]
 801633e:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016340:	7bfb      	ldrb	r3, [r7, #15]
 8016342:	2b08      	cmp	r3, #8
 8016344:	d002      	beq.n	801634c <DeriveSessionKey10x+0x30>
 8016346:	2b09      	cmp	r3, #9
 8016348:	d003      	beq.n	8016352 <DeriveSessionKey10x+0x36>
 801634a:	e005      	b.n	8016358 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801634c:	2301      	movs	r3, #1
 801634e:	743b      	strb	r3, [r7, #16]
            break;
 8016350:	e004      	b.n	801635c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016352:	2302      	movs	r3, #2
 8016354:	743b      	strb	r3, [r7, #16]
            break;
 8016356:	e001      	b.n	801635c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016358:	230b      	movs	r3, #11
 801635a:	e02a      	b.n	80163b2 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	b2db      	uxtb	r3, r3
 8016360:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016362:	68bb      	ldr	r3, [r7, #8]
 8016364:	0a1b      	lsrs	r3, r3, #8
 8016366:	b2db      	uxtb	r3, r3
 8016368:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	0c1b      	lsrs	r3, r3, #16
 801636e:	b2db      	uxtb	r3, r3
 8016370:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	b2db      	uxtb	r3, r3
 8016376:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	0a1b      	lsrs	r3, r3, #8
 801637c:	b2db      	uxtb	r3, r3
 801637e:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	0c1b      	lsrs	r3, r3, #16
 8016384:	b2db      	uxtb	r3, r3
 8016386:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016388:	89bb      	ldrh	r3, [r7, #12]
 801638a:	b2db      	uxtb	r3, r3
 801638c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801638e:	89bb      	ldrh	r3, [r7, #12]
 8016390:	0a1b      	lsrs	r3, r3, #8
 8016392:	b29b      	uxth	r3, r3
 8016394:	b2db      	uxtb	r3, r3
 8016396:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016398:	7bfa      	ldrb	r2, [r7, #15]
 801639a:	f107 0310 	add.w	r3, r7, #16
 801639e:	2101      	movs	r1, #1
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7f8 fe05 	bl	800efb0 <SecureElementDeriveAndStoreKey>
 80163a6:	4603      	mov	r3, r0
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d001      	beq.n	80163b0 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80163ac:	230f      	movs	r3, #15
 80163ae:	e000      	b.n	80163b2 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80163b0:	2300      	movs	r3, #0
}
 80163b2:	4618      	mov	r0, r3
 80163b4:	3720      	adds	r7, #32
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
	...

080163bc <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80163bc:	b480      	push	{r7}
 80163be:	b083      	sub	sp, #12
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	4603      	mov	r3, r0
 80163c4:	6039      	str	r1, [r7, #0]
 80163c6:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80163c8:	683b      	ldr	r3, [r7, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d101      	bne.n	80163d2 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163ce:	230a      	movs	r3, #10
 80163d0:	e029      	b.n	8016426 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80163d2:	79fb      	ldrb	r3, [r7, #7]
 80163d4:	3b01      	subs	r3, #1
 80163d6:	2b03      	cmp	r3, #3
 80163d8:	d822      	bhi.n	8016420 <GetLastFcntDown+0x64>
 80163da:	a201      	add	r2, pc, #4	; (adr r2, 80163e0 <GetLastFcntDown+0x24>)
 80163dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163e0:	080163f1 	.word	0x080163f1
 80163e4:	080163fd 	.word	0x080163fd
 80163e8:	08016409 	.word	0x08016409
 80163ec:	08016415 	.word	0x08016415
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80163f0:	4b0f      	ldr	r3, [pc, #60]	; (8016430 <GetLastFcntDown+0x74>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	691a      	ldr	r2, [r3, #16]
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	601a      	str	r2, [r3, #0]
            break;
 80163fa:	e013      	b.n	8016424 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80163fc:	4b0c      	ldr	r3, [pc, #48]	; (8016430 <GetLastFcntDown+0x74>)
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	695a      	ldr	r2, [r3, #20]
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	601a      	str	r2, [r3, #0]
            break;
 8016406:	e00d      	b.n	8016424 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016408:	4b09      	ldr	r3, [pc, #36]	; (8016430 <GetLastFcntDown+0x74>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	699a      	ldr	r2, [r3, #24]
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	601a      	str	r2, [r3, #0]
            break;
 8016412:	e007      	b.n	8016424 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016414:	4b06      	ldr	r3, [pc, #24]	; (8016430 <GetLastFcntDown+0x74>)
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	69da      	ldr	r2, [r3, #28]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	601a      	str	r2, [r3, #0]
            break;
 801641e:	e001      	b.n	8016424 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016420:	2305      	movs	r3, #5
 8016422:	e000      	b.n	8016426 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016424:	2300      	movs	r3, #0
}
 8016426:	4618      	mov	r0, r3
 8016428:	370c      	adds	r7, #12
 801642a:	46bd      	mov	sp, r7
 801642c:	bc80      	pop	{r7}
 801642e:	4770      	bx	lr
 8016430:	20001730 	.word	0x20001730

08016434 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	4603      	mov	r3, r0
 801643c:	6039      	str	r1, [r7, #0]
 801643e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016440:	2300      	movs	r3, #0
 8016442:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016444:	f107 020c 	add.w	r2, r7, #12
 8016448:	79fb      	ldrb	r3, [r7, #7]
 801644a:	4611      	mov	r1, r2
 801644c:	4618      	mov	r0, r3
 801644e:	f7ff ffb5 	bl	80163bc <GetLastFcntDown>
 8016452:	4603      	mov	r3, r0
 8016454:	2b00      	cmp	r3, #0
 8016456:	d001      	beq.n	801645c <CheckFCntDown+0x28>
    {
        return false;
 8016458:	2300      	movs	r3, #0
 801645a:	e00a      	b.n	8016472 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	683a      	ldr	r2, [r7, #0]
 8016460:	429a      	cmp	r2, r3
 8016462:	d803      	bhi.n	801646c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8016464:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801646a:	d101      	bne.n	8016470 <CheckFCntDown+0x3c>
    {
        return true;
 801646c:	2301      	movs	r3, #1
 801646e:	e000      	b.n	8016472 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016470:	2300      	movs	r3, #0
    }
}
 8016472:	4618      	mov	r0, r3
 8016474:	3710      	adds	r7, #16
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
	...

0801647c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801647c:	b480      	push	{r7}
 801647e:	b083      	sub	sp, #12
 8016480:	af00      	add	r7, sp, #0
 8016482:	4603      	mov	r3, r0
 8016484:	6039      	str	r1, [r7, #0]
 8016486:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016488:	79fb      	ldrb	r3, [r7, #7]
 801648a:	3b01      	subs	r3, #1
 801648c:	2b03      	cmp	r3, #3
 801648e:	d82b      	bhi.n	80164e8 <UpdateFCntDown+0x6c>
 8016490:	a201      	add	r2, pc, #4	; (adr r2, 8016498 <UpdateFCntDown+0x1c>)
 8016492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016496:	bf00      	nop
 8016498:	080164a9 	.word	0x080164a9
 801649c:	080164bb 	.word	0x080164bb
 80164a0:	080164cd 	.word	0x080164cd
 80164a4:	080164df 	.word	0x080164df
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80164a8:	4b12      	ldr	r3, [pc, #72]	; (80164f4 <UpdateFCntDown+0x78>)
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	683a      	ldr	r2, [r7, #0]
 80164ae:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80164b0:	4b10      	ldr	r3, [pc, #64]	; (80164f4 <UpdateFCntDown+0x78>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	683a      	ldr	r2, [r7, #0]
 80164b6:	621a      	str	r2, [r3, #32]
            break;
 80164b8:	e017      	b.n	80164ea <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80164ba:	4b0e      	ldr	r3, [pc, #56]	; (80164f4 <UpdateFCntDown+0x78>)
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	683a      	ldr	r2, [r7, #0]
 80164c0:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80164c2:	4b0c      	ldr	r3, [pc, #48]	; (80164f4 <UpdateFCntDown+0x78>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	683a      	ldr	r2, [r7, #0]
 80164c8:	621a      	str	r2, [r3, #32]
            break;
 80164ca:	e00e      	b.n	80164ea <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80164cc:	4b09      	ldr	r3, [pc, #36]	; (80164f4 <UpdateFCntDown+0x78>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	683a      	ldr	r2, [r7, #0]
 80164d2:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80164d4:	4b07      	ldr	r3, [pc, #28]	; (80164f4 <UpdateFCntDown+0x78>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	683a      	ldr	r2, [r7, #0]
 80164da:	621a      	str	r2, [r3, #32]
            break;
 80164dc:	e005      	b.n	80164ea <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80164de:	4b05      	ldr	r3, [pc, #20]	; (80164f4 <UpdateFCntDown+0x78>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	683a      	ldr	r2, [r7, #0]
 80164e4:	61da      	str	r2, [r3, #28]
            break;
 80164e6:	e000      	b.n	80164ea <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80164e8:	bf00      	nop
    }
}
 80164ea:	bf00      	nop
 80164ec:	370c      	adds	r7, #12
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bc80      	pop	{r7}
 80164f2:	4770      	bx	lr
 80164f4:	20001730 	.word	0x20001730

080164f8 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80164f8:	b480      	push	{r7}
 80164fa:	b083      	sub	sp, #12
 80164fc:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80164fe:	4b18      	ldr	r3, [pc, #96]	; (8016560 <ResetFCnts+0x68>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	2200      	movs	r2, #0
 8016504:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016506:	4b16      	ldr	r3, [pc, #88]	; (8016560 <ResetFCnts+0x68>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	f04f 32ff 	mov.w	r2, #4294967295
 801650e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016510:	4b13      	ldr	r3, [pc, #76]	; (8016560 <ResetFCnts+0x68>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	f04f 32ff 	mov.w	r2, #4294967295
 8016518:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801651a:	4b11      	ldr	r3, [pc, #68]	; (8016560 <ResetFCnts+0x68>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	f04f 32ff 	mov.w	r2, #4294967295
 8016522:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016524:	4b0e      	ldr	r3, [pc, #56]	; (8016560 <ResetFCnts+0x68>)
 8016526:	681a      	ldr	r2, [r3, #0]
 8016528:	4b0d      	ldr	r3, [pc, #52]	; (8016560 <ResetFCnts+0x68>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	6992      	ldr	r2, [r2, #24]
 801652e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016530:	2300      	movs	r3, #0
 8016532:	607b      	str	r3, [r7, #4]
 8016534:	e00b      	b.n	801654e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016536:	4b0a      	ldr	r3, [pc, #40]	; (8016560 <ResetFCnts+0x68>)
 8016538:	681a      	ldr	r2, [r3, #0]
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	3306      	adds	r3, #6
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	4413      	add	r3, r2
 8016542:	f04f 32ff 	mov.w	r2, #4294967295
 8016546:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	3301      	adds	r3, #1
 801654c:	607b      	str	r3, [r7, #4]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	2b00      	cmp	r3, #0
 8016552:	ddf0      	ble.n	8016536 <ResetFCnts+0x3e>
    }
}
 8016554:	bf00      	nop
 8016556:	bf00      	nop
 8016558:	370c      	adds	r7, #12
 801655a:	46bd      	mov	sp, r7
 801655c:	bc80      	pop	{r7}
 801655e:	4770      	bx	lr
 8016560:	20001730 	.word	0x20001730

08016564 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016564:	b480      	push	{r7}
 8016566:	b083      	sub	sp, #12
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 801656c:	4b06      	ldr	r3, [pc, #24]	; (8016588 <IsJoinNonce10xOk+0x24>)
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	689b      	ldr	r3, [r3, #8]
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	429a      	cmp	r2, r3
 8016576:	bf8c      	ite	hi
 8016578:	2301      	movhi	r3, #1
 801657a:	2300      	movls	r3, #0
 801657c:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801657e:	4618      	mov	r0, r3
 8016580:	370c      	adds	r7, #12
 8016582:	46bd      	mov	sp, r7
 8016584:	bc80      	pop	{r7}
 8016586:	4770      	bx	lr
 8016588:	20001730 	.word	0x20001730

0801658c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d101      	bne.n	801659e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801659a:	2309      	movs	r3, #9
 801659c:	e01c      	b.n	80165d8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801659e:	4a10      	ldr	r2, [pc, #64]	; (80165e0 <LoRaMacCryptoInit+0x54>)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80165a4:	4b0e      	ldr	r3, [pc, #56]	; (80165e0 <LoRaMacCryptoInit+0x54>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2228      	movs	r2, #40	; 0x28
 80165aa:	2100      	movs	r1, #0
 80165ac:	4618      	mov	r0, r3
 80165ae:	f003 fa31 	bl	8019a14 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80165b2:	4b0b      	ldr	r3, [pc, #44]	; (80165e0 <LoRaMacCryptoInit+0x54>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2201      	movs	r2, #1
 80165b8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80165ba:	4b09      	ldr	r3, [pc, #36]	; (80165e0 <LoRaMacCryptoInit+0x54>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	2201      	movs	r2, #1
 80165c0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80165c2:	4b07      	ldr	r3, [pc, #28]	; (80165e0 <LoRaMacCryptoInit+0x54>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	2201      	movs	r2, #1
 80165c8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80165ca:	4b05      	ldr	r3, [pc, #20]	; (80165e0 <LoRaMacCryptoInit+0x54>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	2200      	movs	r2, #0
 80165d0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80165d2:	f7ff ff91 	bl	80164f8 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80165d6:	2300      	movs	r3, #0
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3708      	adds	r7, #8
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	20001730 	.word	0x20001730

080165e4 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80165e4:	b480      	push	{r7}
 80165e6:	b083      	sub	sp, #12
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 80165ec:	4b04      	ldr	r3, [pc, #16]	; (8016600 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	687a      	ldr	r2, [r7, #4]
 80165f2:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 80165f4:	2300      	movs	r3, #0
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	370c      	adds	r7, #12
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bc80      	pop	{r7}
 80165fe:	4770      	bx	lr
 8016600:	20001730 	.word	0x20001730

08016604 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016604:	b480      	push	{r7}
 8016606:	b083      	sub	sp, #12
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d101      	bne.n	8016616 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016612:	230a      	movs	r3, #10
 8016614:	e006      	b.n	8016624 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016616:	4b06      	ldr	r3, [pc, #24]	; (8016630 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	1c5a      	adds	r2, r3, #1
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016622:	2300      	movs	r3, #0
}
 8016624:	4618      	mov	r0, r3
 8016626:	370c      	adds	r7, #12
 8016628:	46bd      	mov	sp, r7
 801662a:	bc80      	pop	{r7}
 801662c:	4770      	bx	lr
 801662e:	bf00      	nop
 8016630:	20001730 	.word	0x20001730

08016634 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016638:	b08a      	sub	sp, #40	; 0x28
 801663a:	af00      	add	r7, sp, #0
 801663c:	613a      	str	r2, [r7, #16]
 801663e:	60fb      	str	r3, [r7, #12]
 8016640:	4603      	mov	r3, r0
 8016642:	75fb      	strb	r3, [r7, #23]
 8016644:	460b      	mov	r3, r1
 8016646:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016648:	2300      	movs	r3, #0
 801664a:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 801664c:	2300      	movs	r3, #0
 801664e:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016650:	2313      	movs	r3, #19
 8016652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d101      	bne.n	8016660 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801665c:	230a      	movs	r3, #10
 801665e:	e057      	b.n	8016710 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016660:	f107 021c 	add.w	r2, r7, #28
 8016664:	7dfb      	ldrb	r3, [r7, #23]
 8016666:	4611      	mov	r1, r2
 8016668:	4618      	mov	r0, r3
 801666a:	f7ff fea7 	bl	80163bc <GetLastFcntDown>
 801666e:	4603      	mov	r3, r0
 8016670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016678:	2b00      	cmp	r3, #0
 801667a:	d002      	beq.n	8016682 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 801667c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016680:	e046      	b.n	8016710 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016682:	69fb      	ldr	r3, [r7, #28]
 8016684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016688:	d103      	bne.n	8016692 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	693a      	ldr	r2, [r7, #16]
 801668e:	601a      	str	r2, [r3, #0]
 8016690:	e01e      	b.n	80166d0 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	b29b      	uxth	r3, r3
 8016696:	693a      	ldr	r2, [r7, #16]
 8016698:	1ad3      	subs	r3, r2, r3
 801669a:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 801669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669e:	2b00      	cmp	r3, #0
 80166a0:	dd05      	ble.n	80166ae <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80166a2:	69fa      	ldr	r2, [r7, #28]
 80166a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a6:	441a      	add	r2, r3
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	601a      	str	r2, [r3, #0]
 80166ac:	e010      	b.n	80166d0 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 80166ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d104      	bne.n	80166be <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80166b4:	69fa      	ldr	r2, [r7, #28]
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80166ba:	2307      	movs	r3, #7
 80166bc:	e028      	b.n	8016710 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	0c1b      	lsrs	r3, r3, #16
 80166c2:	041b      	lsls	r3, r3, #16
 80166c4:	693a      	ldr	r2, [r7, #16]
 80166c6:	4413      	add	r3, r2
 80166c8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80166d0:	4b12      	ldr	r3, [pc, #72]	; (801671c <LoRaMacCryptoGetFCntDown+0xe8>)
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	789b      	ldrb	r3, [r3, #2]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d119      	bne.n	801670e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2200      	movs	r2, #0
 80166e0:	603b      	str	r3, [r7, #0]
 80166e2:	607a      	str	r2, [r7, #4]
 80166e4:	69fb      	ldr	r3, [r7, #28]
 80166e6:	2200      	movs	r2, #0
 80166e8:	469a      	mov	sl, r3
 80166ea:	4693      	mov	fp, r2
 80166ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80166f0:	4611      	mov	r1, r2
 80166f2:	ebb1 040a 	subs.w	r4, r1, sl
 80166f6:	eb63 050b 	sbc.w	r5, r3, fp
 80166fa:	8abb      	ldrh	r3, [r7, #20]
 80166fc:	2200      	movs	r2, #0
 80166fe:	4698      	mov	r8, r3
 8016700:	4691      	mov	r9, r2
 8016702:	4544      	cmp	r4, r8
 8016704:	eb75 0309 	sbcs.w	r3, r5, r9
 8016708:	db01      	blt.n	801670e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 801670a:	2308      	movs	r3, #8
 801670c:	e000      	b.n	8016710 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801670e:	2300      	movs	r3, #0
}
 8016710:	4618      	mov	r0, r3
 8016712:	3728      	adds	r7, #40	; 0x28
 8016714:	46bd      	mov	sp, r7
 8016716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801671a:	bf00      	nop
 801671c:	20001730 	.word	0x20001730

08016720 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016720:	b480      	push	{r7}
 8016722:	b085      	sub	sp, #20
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d101      	bne.n	8016732 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801672e:	230a      	movs	r3, #10
 8016730:	e019      	b.n	8016766 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016732:	2300      	movs	r3, #0
 8016734:	60fb      	str	r3, [r7, #12]
 8016736:	e012      	b.n	801675e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016738:	4b0d      	ldr	r3, [pc, #52]	; (8016770 <LoRaMacCryptoSetMulticastReference+0x50>)
 801673a:	6819      	ldr	r1, [r3, #0]
 801673c:	68fa      	ldr	r2, [r7, #12]
 801673e:	4613      	mov	r3, r2
 8016740:	005b      	lsls	r3, r3, #1
 8016742:	4413      	add	r3, r2
 8016744:	011b      	lsls	r3, r3, #4
 8016746:	461a      	mov	r2, r3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	4413      	add	r3, r2
 801674c:	68fa      	ldr	r2, [r7, #12]
 801674e:	3206      	adds	r2, #6
 8016750:	0092      	lsls	r2, r2, #2
 8016752:	440a      	add	r2, r1
 8016754:	3204      	adds	r2, #4
 8016756:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	3301      	adds	r3, #1
 801675c:	60fb      	str	r3, [r7, #12]
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	2b00      	cmp	r3, #0
 8016762:	dde9      	ble.n	8016738 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016764:	2300      	movs	r3, #0
}
 8016766:	4618      	mov	r0, r3
 8016768:	3714      	adds	r7, #20
 801676a:	46bd      	mov	sp, r7
 801676c:	bc80      	pop	{r7}
 801676e:	4770      	bx	lr
 8016770:	20001730 	.word	0x20001730

08016774 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	4603      	mov	r3, r0
 801677c:	6039      	str	r1, [r7, #0]
 801677e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016780:	79fb      	ldrb	r3, [r7, #7]
 8016782:	6839      	ldr	r1, [r7, #0]
 8016784:	4618      	mov	r0, r3
 8016786:	f7f8 faef 	bl	800ed68 <SecureElementSetKey>
 801678a:	4603      	mov	r3, r0
 801678c:	2b00      	cmp	r3, #0
 801678e:	d001      	beq.n	8016794 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016790:	230f      	movs	r3, #15
 8016792:	e021      	b.n	80167d8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016794:	79fb      	ldrb	r3, [r7, #7]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d11d      	bne.n	80167d6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801679a:	4b11      	ldr	r3, [pc, #68]	; (80167e0 <LoRaMacCryptoSetKey+0x6c>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	789b      	ldrb	r3, [r3, #2]
 80167a0:	210b      	movs	r1, #11
 80167a2:	4618      	mov	r0, r3
 80167a4:	f000 fa5e 	bl	8016c64 <LoRaMacCryptoDeriveLifeTimeKey>
 80167a8:	4603      	mov	r3, r0
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d001      	beq.n	80167b2 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167ae:	230f      	movs	r3, #15
 80167b0:	e012      	b.n	80167d8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80167b2:	210c      	movs	r1, #12
 80167b4:	2000      	movs	r0, #0
 80167b6:	f000 fa55 	bl	8016c64 <LoRaMacCryptoDeriveLifeTimeKey>
 80167ba:	4603      	mov	r3, r0
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d001      	beq.n	80167c4 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167c0:	230f      	movs	r3, #15
 80167c2:	e009      	b.n	80167d8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80167c4:	210a      	movs	r1, #10
 80167c6:	2000      	movs	r0, #0
 80167c8:	f000 fa4c 	bl	8016c64 <LoRaMacCryptoDeriveLifeTimeKey>
 80167cc:	4603      	mov	r3, r0
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d001      	beq.n	80167d6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80167d2:	230f      	movs	r3, #15
 80167d4:	e000      	b.n	80167d8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80167d6:	2300      	movs	r3, #0
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3708      	adds	r7, #8
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	20001730 	.word	0x20001730

080167e4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b086      	sub	sp, #24
 80167e8:	af02      	add	r7, sp, #8
 80167ea:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d101      	bne.n	80167f6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80167f2:	230a      	movs	r3, #10
 80167f4:	e033      	b.n	801685e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80167f6:	2301      	movs	r3, #1
 80167f8:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80167fa:	2300      	movs	r3, #0
 80167fc:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80167fe:	f107 0308 	add.w	r3, r7, #8
 8016802:	4618      	mov	r0, r3
 8016804:	f7f8 fc8a 	bl	800f11c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016808:	68ba      	ldr	r2, [r7, #8]
 801680a:	4b17      	ldr	r3, [pc, #92]	; (8016868 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	b292      	uxth	r2, r2
 8016810:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016812:	4b15      	ldr	r3, [pc, #84]	; (8016868 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	889a      	ldrh	r2, [r3, #4]
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f000 fc1b 	bl	8017058 <LoRaMacSerializerJoinRequest>
 8016822:	4603      	mov	r3, r0
 8016824:	2b00      	cmp	r3, #0
 8016826:	d001      	beq.n	801682c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016828:	2311      	movs	r3, #17
 801682a:	e018      	b.n	801685e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	6819      	ldr	r1, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	3318      	adds	r3, #24
 8016834:	7bfa      	ldrb	r2, [r7, #15]
 8016836:	9300      	str	r3, [sp, #0]
 8016838:	4613      	mov	r3, r2
 801683a:	2213      	movs	r2, #19
 801683c:	2000      	movs	r0, #0
 801683e:	f7f8 faf1 	bl	800ee24 <SecureElementComputeAesCmac>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d001      	beq.n	801684c <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016848:	230f      	movs	r3, #15
 801684a:	e008      	b.n	801685e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f000 fc03 	bl	8017058 <LoRaMacSerializerJoinRequest>
 8016852:	4603      	mov	r3, r0
 8016854:	2b00      	cmp	r3, #0
 8016856:	d001      	beq.n	801685c <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016858:	2311      	movs	r3, #17
 801685a:	e000      	b.n	801685e <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801685c:	2300      	movs	r3, #0
}
 801685e:	4618      	mov	r0, r3
 8016860:	3710      	adds	r7, #16
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	20001730 	.word	0x20001730

0801686c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801686c:	b590      	push	{r4, r7, lr}
 801686e:	b097      	sub	sp, #92	; 0x5c
 8016870:	af04      	add	r7, sp, #16
 8016872:	4603      	mov	r3, r0
 8016874:	60b9      	str	r1, [r7, #8]
 8016876:	607a      	str	r2, [r7, #4]
 8016878:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d002      	beq.n	8016886 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016880:	68bb      	ldr	r3, [r7, #8]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d101      	bne.n	801688a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016886:	230a      	movs	r3, #10
 8016888:	e0d3      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801688a:	2313      	movs	r3, #19
 801688c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016890:	2300      	movs	r3, #0
 8016892:	617b      	str	r3, [r7, #20]
 8016894:	f107 0318 	add.w	r3, r7, #24
 8016898:	221d      	movs	r2, #29
 801689a:	2100      	movs	r1, #0
 801689c:	4618      	mov	r0, r3
 801689e:	f007 fe9b 	bl	801e5d8 <memset>
    uint8_t versionMinor         = 0;
 80168a2:	2300      	movs	r3, #0
 80168a4:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80168a6:	4b65      	ldr	r3, [pc, #404]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	889b      	ldrh	r3, [r3, #4]
 80168ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681c      	ldr	r4, [r3, #0]
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	791b      	ldrb	r3, [r3, #4]
 80168b8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80168bc:	7bf8      	ldrb	r0, [r7, #15]
 80168be:	f107 0213 	add.w	r2, r7, #19
 80168c2:	9202      	str	r2, [sp, #8]
 80168c4:	f107 0214 	add.w	r2, r7, #20
 80168c8:	9201      	str	r2, [sp, #4]
 80168ca:	9300      	str	r3, [sp, #0]
 80168cc:	4623      	mov	r3, r4
 80168ce:	460a      	mov	r2, r1
 80168d0:	68b9      	ldr	r1, [r7, #8]
 80168d2:	f7f8 fbad 	bl	800f030 <SecureElementProcessJoinAccept>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d001      	beq.n	80168e0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80168dc:	230f      	movs	r3, #15
 80168de:	e0a8      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6818      	ldr	r0, [r3, #0]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	791b      	ldrb	r3, [r3, #4]
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	f107 0314 	add.w	r3, r7, #20
 80168ee:	4619      	mov	r1, r3
 80168f0:	f003 f855 	bl	801999e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 f9f0 	bl	8016cda <LoRaMacParserJoinAccept>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d001      	beq.n	8016904 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016900:	2310      	movs	r3, #16
 8016902:	e096      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016904:	2300      	movs	r3, #0
 8016906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	799b      	ldrb	r3, [r3, #6]
 801690e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	79db      	ldrb	r3, [r3, #7]
 8016914:	021b      	lsls	r3, r3, #8
 8016916:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016918:	4313      	orrs	r3, r2
 801691a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	7a1b      	ldrb	r3, [r3, #8]
 8016920:	041b      	lsls	r3, r3, #16
 8016922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016924:	4313      	orrs	r3, r2
 8016926:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016928:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801692a:	f7ff fe1b 	bl	8016564 <IsJoinNonce10xOk>
 801692e:	4603      	mov	r3, r0
 8016930:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016934:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016938:	2b00      	cmp	r3, #0
 801693a:	d010      	beq.n	801695e <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801693c:	4b3f      	ldr	r3, [pc, #252]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016942:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016944:	7cfb      	ldrb	r3, [r7, #19]
 8016946:	210b      	movs	r1, #11
 8016948:	4618      	mov	r0, r3
 801694a:	f000 f98b 	bl	8016c64 <LoRaMacCryptoDeriveLifeTimeKey>
 801694e:	4603      	mov	r3, r0
 8016950:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016954:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016958:	2b00      	cmp	r3, #0
 801695a:	d005      	beq.n	8016968 <LoRaMacCryptoHandleJoinAccept+0xfc>
 801695c:	e001      	b.n	8016962 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801695e:	2303      	movs	r3, #3
 8016960:	e067      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016962:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016966:	e064      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016968:	210c      	movs	r1, #12
 801696a:	2000      	movs	r0, #0
 801696c:	f000 f97a 	bl	8016c64 <LoRaMacCryptoDeriveLifeTimeKey>
 8016970:	4603      	mov	r3, r0
 8016972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016976:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801697a:	2b00      	cmp	r3, #0
 801697c:	d002      	beq.n	8016984 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 801697e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016982:	e056      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016984:	210a      	movs	r1, #10
 8016986:	2000      	movs	r0, #0
 8016988:	f000 f96c 	bl	8016c64 <LoRaMacCryptoDeriveLifeTimeKey>
 801698c:	4603      	mov	r3, r0
 801698e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016992:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016996:	2b00      	cmp	r3, #0
 8016998:	d002      	beq.n	80169a0 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801699a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801699e:	e048      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	7a5b      	ldrb	r3, [r3, #9]
 80169a4:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	7a9b      	ldrb	r3, [r3, #10]
 80169aa:	021b      	lsls	r3, r3, #8
 80169ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169ae:	4313      	orrs	r3, r2
 80169b0:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	7adb      	ldrb	r3, [r3, #11]
 80169b6:	041b      	lsls	r3, r3, #16
 80169b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169ba:	4313      	orrs	r3, r2
 80169bc:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80169be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80169c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80169c6:	2009      	movs	r0, #9
 80169c8:	f7ff fca8 	bl	801631c <DeriveSessionKey10x>
 80169cc:	4603      	mov	r3, r0
 80169ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d002      	beq.n	80169e0 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 80169da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80169de:	e028      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80169e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80169e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80169e8:	2008      	movs	r0, #8
 80169ea:	f7ff fc97 	bl	801631c <DeriveSessionKey10x>
 80169ee:	4603      	mov	r3, r0
 80169f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d002      	beq.n	8016a02 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80169fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016a00:	e017      	b.n	8016a32 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016a02:	4b0e      	ldr	r3, [pc, #56]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	7cfa      	ldrb	r2, [r7, #19]
 8016a08:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016a0a:	4b0c      	ldr	r3, [pc, #48]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a12:	4b0a      	ldr	r3, [pc, #40]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	f04f 32ff 	mov.w	r2, #4294967295
 8016a1a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a1c:	4b07      	ldr	r3, [pc, #28]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	f04f 32ff 	mov.w	r2, #4294967295
 8016a24:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a26:	4b05      	ldr	r3, [pc, #20]	; (8016a3c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a30:	2300      	movs	r3, #0
}
 8016a32:	4618      	mov	r0, r3
 8016a34:	374c      	adds	r7, #76	; 0x4c
 8016a36:	46bd      	mov	sp, r7
 8016a38:	bd90      	pop	{r4, r7, pc}
 8016a3a:	bf00      	nop
 8016a3c:	20001730 	.word	0x20001730

08016a40 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016a40:	b590      	push	{r4, r7, lr}
 8016a42:	b08b      	sub	sp, #44	; 0x2c
 8016a44:	af04      	add	r7, sp, #16
 8016a46:	60f8      	str	r0, [r7, #12]
 8016a48:	607b      	str	r3, [r7, #4]
 8016a4a:	460b      	mov	r3, r1
 8016a4c:	72fb      	strb	r3, [r7, #11]
 8016a4e:	4613      	mov	r3, r2
 8016a50:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016a52:	2313      	movs	r3, #19
 8016a54:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016a56:	2309      	movs	r3, #9
 8016a58:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d101      	bne.n	8016a64 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a60:	230a      	movs	r3, #10
 8016a62:	e05f      	b.n	8016b24 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016a64:	4b31      	ldr	r3, [pc, #196]	; (8016b2c <LoRaMacCryptoSecureMessage+0xec>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	68db      	ldr	r3, [r3, #12]
 8016a6a:	68fa      	ldr	r2, [r7, #12]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d201      	bcs.n	8016a74 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016a70:	2306      	movs	r3, #6
 8016a72:	e057      	b.n	8016b24 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d101      	bne.n	8016a82 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016a7e:	2308      	movs	r3, #8
 8016a80:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016a82:	4b2a      	ldr	r3, [pc, #168]	; (8016b2c <LoRaMacCryptoSecureMessage+0xec>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	68db      	ldr	r3, [r3, #12]
 8016a88:	68fa      	ldr	r2, [r7, #12]
 8016a8a:	429a      	cmp	r2, r3
 8016a8c:	d916      	bls.n	8016abc <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016a98:	b219      	sxth	r1, r3
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	689c      	ldr	r4, [r3, #8]
 8016a9e:	7dfa      	ldrb	r2, [r7, #23]
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	9300      	str	r3, [sp, #0]
 8016aa8:	4623      	mov	r3, r4
 8016aaa:	f7ff fa43 	bl	8015f34 <PayloadEncrypt>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ab2:	7dbb      	ldrb	r3, [r7, #22]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d001      	beq.n	8016abc <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016ab8:	7dbb      	ldrb	r3, [r7, #22]
 8016aba:	e033      	b.n	8016b24 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f000 fb4d 	bl	801715c <LoRaMacSerializerData>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d001      	beq.n	8016acc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ac8:	2311      	movs	r3, #17
 8016aca:	e02b      	b.n	8016b24 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016acc:	2308      	movs	r3, #8
 8016ace:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6818      	ldr	r0, [r3, #0]
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	791b      	ldrb	r3, [r3, #4]
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	3b04      	subs	r3, #4
 8016adc:	b299      	uxth	r1, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	689b      	ldr	r3, [r3, #8]
 8016ae2:	687a      	ldr	r2, [r7, #4]
 8016ae4:	322c      	adds	r2, #44	; 0x2c
 8016ae6:	7dfc      	ldrb	r4, [r7, #23]
 8016ae8:	9203      	str	r2, [sp, #12]
 8016aea:	68fa      	ldr	r2, [r7, #12]
 8016aec:	9202      	str	r2, [sp, #8]
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	2300      	movs	r3, #0
 8016af2:	9300      	str	r3, [sp, #0]
 8016af4:	2300      	movs	r3, #0
 8016af6:	4622      	mov	r2, r4
 8016af8:	f7ff fb1d 	bl	8016136 <ComputeCmacB0>
 8016afc:	4603      	mov	r3, r0
 8016afe:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016b00:	7dbb      	ldrb	r3, [r7, #22]
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d001      	beq.n	8016b0a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016b06:	7dbb      	ldrb	r3, [r7, #22]
 8016b08:	e00c      	b.n	8016b24 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f000 fb26 	bl	801715c <LoRaMacSerializerData>
 8016b10:	4603      	mov	r3, r0
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d001      	beq.n	8016b1a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016b16:	2311      	movs	r3, #17
 8016b18:	e004      	b.n	8016b24 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016b1a:	4b04      	ldr	r3, [pc, #16]	; (8016b2c <LoRaMacCryptoSecureMessage+0xec>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	68fa      	ldr	r2, [r7, #12]
 8016b20:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016b22:	2300      	movs	r3, #0
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	371c      	adds	r7, #28
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd90      	pop	{r4, r7, pc}
 8016b2c:	20001730 	.word	0x20001730

08016b30 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016b30:	b590      	push	{r4, r7, lr}
 8016b32:	b08b      	sub	sp, #44	; 0x2c
 8016b34:	af04      	add	r7, sp, #16
 8016b36:	60b9      	str	r1, [r7, #8]
 8016b38:	607b      	str	r3, [r7, #4]
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	73fb      	strb	r3, [r7, #15]
 8016b3e:	4613      	mov	r3, r2
 8016b40:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d101      	bne.n	8016b4c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b48:	230a      	movs	r3, #10
 8016b4a:	e084      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016b4c:	7bbb      	ldrb	r3, [r7, #14]
 8016b4e:	6879      	ldr	r1, [r7, #4]
 8016b50:	4618      	mov	r0, r3
 8016b52:	f7ff fc6f 	bl	8016434 <CheckFCntDown>
 8016b56:	4603      	mov	r3, r0
 8016b58:	f083 0301 	eor.w	r3, r3, #1
 8016b5c:	b2db      	uxtb	r3, r3
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d001      	beq.n	8016b66 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016b62:	2306      	movs	r3, #6
 8016b64:	e077      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016b66:	2313      	movs	r3, #19
 8016b68:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016b6a:	2309      	movs	r3, #9
 8016b6c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016b6e:	2308      	movs	r3, #8
 8016b70:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016b74:	f000 f97c 	bl	8016e70 <LoRaMacParserData>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d001      	beq.n	8016b82 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016b7e:	2310      	movs	r3, #16
 8016b80:	e069      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016b82:	f107 0210 	add.w	r2, r7, #16
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
 8016b88:	4611      	mov	r1, r2
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7ff fba0 	bl	80162d0 <GetKeyAddrItem>
 8016b90:	4603      	mov	r3, r0
 8016b92:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016b94:	7d7b      	ldrb	r3, [r7, #21]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d001      	beq.n	8016b9e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016b9a:	7d7b      	ldrb	r3, [r7, #21]
 8016b9c:	e05b      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	785b      	ldrb	r3, [r3, #1]
 8016ba2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	789b      	ldrb	r3, [r3, #2]
 8016ba8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bac:	689b      	ldr	r3, [r3, #8]
 8016bae:	68ba      	ldr	r2, [r7, #8]
 8016bb0:	429a      	cmp	r2, r3
 8016bb2:	d001      	beq.n	8016bb8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016bb4:	2302      	movs	r3, #2
 8016bb6:	e04e      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bba:	7b1b      	ldrb	r3, [r3, #12]
 8016bbc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	bf14      	ite	ne
 8016bc6:	2301      	movne	r3, #1
 8016bc8:	2300      	moveq	r3, #0
 8016bca:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016bcc:	4b24      	ldr	r3, [pc, #144]	; (8016c60 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	789b      	ldrb	r3, [r3, #2]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d101      	bne.n	8016bda <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bdc:	6818      	ldr	r0, [r3, #0]
 8016bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be0:	791b      	ldrb	r3, [r3, #4]
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	3b04      	subs	r3, #4
 8016be6:	b299      	uxth	r1, r3
 8016be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bec:	7dbc      	ldrb	r4, [r7, #22]
 8016bee:	7d3a      	ldrb	r2, [r7, #20]
 8016bf0:	9303      	str	r3, [sp, #12]
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	9302      	str	r3, [sp, #8]
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	9301      	str	r3, [sp, #4]
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	9300      	str	r3, [sp, #0]
 8016bfe:	4623      	mov	r3, r4
 8016c00:	f7ff fad7 	bl	80161b2 <VerifyCmacB0>
 8016c04:	4603      	mov	r3, r0
 8016c06:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016c08:	7d7b      	ldrb	r3, [r7, #21]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d001      	beq.n	8016c12 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8016c0e:	7d7b      	ldrb	r3, [r7, #21]
 8016c10:	e021      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d101      	bne.n	8016c20 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016c1c:	2308      	movs	r3, #8
 8016c1e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c22:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016c2a:	b219      	sxth	r1, r3
 8016c2c:	7dfa      	ldrb	r2, [r7, #23]
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	9301      	str	r3, [sp, #4]
 8016c32:	2301      	movs	r3, #1
 8016c34:	9300      	str	r3, [sp, #0]
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	f7ff f97c 	bl	8015f34 <PayloadEncrypt>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016c40:	7d7b      	ldrb	r3, [r7, #21]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d001      	beq.n	8016c4a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8016c46:	7d7b      	ldrb	r3, [r7, #21]
 8016c48:	e005      	b.n	8016c56 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8016c4a:	7bbb      	ldrb	r3, [r7, #14]
 8016c4c:	6879      	ldr	r1, [r7, #4]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7ff fc14 	bl	801647c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016c54:	2300      	movs	r3, #0
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	371c      	adds	r7, #28
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd90      	pop	{r4, r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	20001730 	.word	0x20001730

08016c64 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b088      	sub	sp, #32
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	460a      	mov	r2, r1
 8016c6e:	71fb      	strb	r3, [r7, #7]
 8016c70:	4613      	mov	r3, r2
 8016c72:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8016c74:	2300      	movs	r3, #0
 8016c76:	60fb      	str	r3, [r7, #12]
 8016c78:	f107 0310 	add.w	r3, r7, #16
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	601a      	str	r2, [r3, #0]
 8016c80:	605a      	str	r2, [r3, #4]
 8016c82:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8016c84:	2300      	movs	r3, #0
 8016c86:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8016c88:	79bb      	ldrb	r3, [r7, #6]
 8016c8a:	2b0c      	cmp	r3, #12
 8016c8c:	d00b      	beq.n	8016ca6 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8016c8e:	2b0c      	cmp	r3, #12
 8016c90:	dc0f      	bgt.n	8016cb2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8016c92:	2b0a      	cmp	r3, #10
 8016c94:	d00a      	beq.n	8016cac <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8016c96:	2b0b      	cmp	r3, #11
 8016c98:	d10b      	bne.n	8016cb2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8016c9a:	79fb      	ldrb	r3, [r7, #7]
 8016c9c:	2b01      	cmp	r3, #1
 8016c9e:	d10a      	bne.n	8016cb6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8016ca0:	2320      	movs	r3, #32
 8016ca2:	733b      	strb	r3, [r7, #12]
            }
            break;
 8016ca4:	e007      	b.n	8016cb6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8016ca6:	230b      	movs	r3, #11
 8016ca8:	77fb      	strb	r3, [r7, #31]
            break;
 8016caa:	e005      	b.n	8016cb8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8016cac:	2330      	movs	r3, #48	; 0x30
 8016cae:	733b      	strb	r3, [r7, #12]
            break;
 8016cb0:	e002      	b.n	8016cb8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016cb2:	230b      	movs	r3, #11
 8016cb4:	e00d      	b.n	8016cd2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8016cb6:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016cb8:	79ba      	ldrb	r2, [r7, #6]
 8016cba:	7ff9      	ldrb	r1, [r7, #31]
 8016cbc:	f107 030c 	add.w	r3, r7, #12
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7f8 f975 	bl	800efb0 <SecureElementDeriveAndStoreKey>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d001      	beq.n	8016cd0 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ccc:	230f      	movs	r3, #15
 8016cce:	e000      	b.n	8016cd2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cd0:	2300      	movs	r3, #0
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3720      	adds	r7, #32
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b084      	sub	sp, #16
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d003      	beq.n	8016cf0 <LoRaMacParserJoinAccept+0x16>
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d101      	bne.n	8016cf4 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016cf0:	2302      	movs	r3, #2
 8016cf2:	e0b9      	b.n	8016e68 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	89fb      	ldrh	r3, [r7, #14]
 8016cfe:	1c59      	adds	r1, r3, #1
 8016d00:	81f9      	strh	r1, [r7, #14]
 8016d02:	4413      	add	r3, r2
 8016d04:	781a      	ldrb	r2, [r3, #0]
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	1d98      	adds	r0, r3, #6
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681a      	ldr	r2, [r3, #0]
 8016d12:	89fb      	ldrh	r3, [r7, #14]
 8016d14:	4413      	add	r3, r2
 8016d16:	2203      	movs	r2, #3
 8016d18:	4619      	mov	r1, r3
 8016d1a:	f002 fe40 	bl	801999e <memcpy1>
    bufItr = bufItr + 3;
 8016d1e:	89fb      	ldrh	r3, [r7, #14]
 8016d20:	3303      	adds	r3, #3
 8016d22:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f103 0009 	add.w	r0, r3, #9
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681a      	ldr	r2, [r3, #0]
 8016d2e:	89fb      	ldrh	r3, [r7, #14]
 8016d30:	4413      	add	r3, r2
 8016d32:	2203      	movs	r2, #3
 8016d34:	4619      	mov	r1, r3
 8016d36:	f002 fe32 	bl	801999e <memcpy1>
    bufItr = bufItr + 3;
 8016d3a:	89fb      	ldrh	r3, [r7, #14]
 8016d3c:	3303      	adds	r3, #3
 8016d3e:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681a      	ldr	r2, [r3, #0]
 8016d44:	89fb      	ldrh	r3, [r7, #14]
 8016d46:	1c59      	adds	r1, r3, #1
 8016d48:	81f9      	strh	r1, [r7, #14]
 8016d4a:	4413      	add	r3, r2
 8016d4c:	781b      	ldrb	r3, [r3, #0]
 8016d4e:	461a      	mov	r2, r3
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681a      	ldr	r2, [r3, #0]
 8016d58:	89fb      	ldrh	r3, [r7, #14]
 8016d5a:	1c59      	adds	r1, r3, #1
 8016d5c:	81f9      	strh	r1, [r7, #14]
 8016d5e:	4413      	add	r3, r2
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	021a      	lsls	r2, r3, #8
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	431a      	orrs	r2, r3
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	89fb      	ldrh	r3, [r7, #14]
 8016d74:	1c59      	adds	r1, r3, #1
 8016d76:	81f9      	strh	r1, [r7, #14]
 8016d78:	4413      	add	r3, r2
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	041a      	lsls	r2, r3, #16
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	68db      	ldr	r3, [r3, #12]
 8016d82:	431a      	orrs	r2, r3
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681a      	ldr	r2, [r3, #0]
 8016d8c:	89fb      	ldrh	r3, [r7, #14]
 8016d8e:	1c59      	adds	r1, r3, #1
 8016d90:	81f9      	strh	r1, [r7, #14]
 8016d92:	4413      	add	r3, r2
 8016d94:	781b      	ldrb	r3, [r3, #0]
 8016d96:	061a      	lsls	r2, r3, #24
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	431a      	orrs	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681a      	ldr	r2, [r3, #0]
 8016da6:	89fb      	ldrh	r3, [r7, #14]
 8016da8:	1c59      	adds	r1, r3, #1
 8016daa:	81f9      	strh	r1, [r7, #14]
 8016dac:	4413      	add	r3, r2
 8016dae:	781a      	ldrb	r2, [r3, #0]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	89fb      	ldrh	r3, [r7, #14]
 8016dba:	1c59      	adds	r1, r3, #1
 8016dbc:	81f9      	strh	r1, [r7, #14]
 8016dbe:	4413      	add	r3, r2
 8016dc0:	781a      	ldrb	r2, [r3, #0]
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	791b      	ldrb	r3, [r3, #4]
 8016dca:	1f1a      	subs	r2, r3, #4
 8016dcc:	89fb      	ldrh	r3, [r7, #14]
 8016dce:	1ad3      	subs	r3, r2, r3
 8016dd0:	2b10      	cmp	r3, #16
 8016dd2:	d10e      	bne.n	8016df2 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f103 0012 	add.w	r0, r3, #18
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	89fb      	ldrh	r3, [r7, #14]
 8016de0:	4413      	add	r3, r2
 8016de2:	2210      	movs	r2, #16
 8016de4:	4619      	mov	r1, r3
 8016de6:	f002 fdda 	bl	801999e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016dea:	89fb      	ldrh	r3, [r7, #14]
 8016dec:	3310      	adds	r3, #16
 8016dee:	81fb      	strh	r3, [r7, #14]
 8016df0:	e008      	b.n	8016e04 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	791b      	ldrb	r3, [r3, #4]
 8016df6:	1f1a      	subs	r2, r3, #4
 8016df8:	89fb      	ldrh	r3, [r7, #14]
 8016dfa:	1ad3      	subs	r3, r2, r3
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	dd01      	ble.n	8016e04 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8016e00:	2301      	movs	r3, #1
 8016e02:	e031      	b.n	8016e68 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681a      	ldr	r2, [r3, #0]
 8016e08:	89fb      	ldrh	r3, [r7, #14]
 8016e0a:	1c59      	adds	r1, r3, #1
 8016e0c:	81f9      	strh	r1, [r7, #14]
 8016e0e:	4413      	add	r3, r2
 8016e10:	781b      	ldrb	r3, [r3, #0]
 8016e12:	461a      	mov	r2, r3
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681a      	ldr	r2, [r3, #0]
 8016e1c:	89fb      	ldrh	r3, [r7, #14]
 8016e1e:	1c59      	adds	r1, r3, #1
 8016e20:	81f9      	strh	r1, [r7, #14]
 8016e22:	4413      	add	r3, r2
 8016e24:	781b      	ldrb	r3, [r3, #0]
 8016e26:	021a      	lsls	r2, r3, #8
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e2c:	431a      	orrs	r2, r3
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681a      	ldr	r2, [r3, #0]
 8016e36:	89fb      	ldrh	r3, [r7, #14]
 8016e38:	1c59      	adds	r1, r3, #1
 8016e3a:	81f9      	strh	r1, [r7, #14]
 8016e3c:	4413      	add	r3, r2
 8016e3e:	781b      	ldrb	r3, [r3, #0]
 8016e40:	041a      	lsls	r2, r3, #16
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e46:	431a      	orrs	r2, r3
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681a      	ldr	r2, [r3, #0]
 8016e50:	89fb      	ldrh	r3, [r7, #14]
 8016e52:	1c59      	adds	r1, r3, #1
 8016e54:	81f9      	strh	r1, [r7, #14]
 8016e56:	4413      	add	r3, r2
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	061a      	lsls	r2, r3, #24
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e60:	431a      	orrs	r2, r3
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016e66:	2300      	movs	r3, #0
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3710      	adds	r7, #16
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}

08016e70 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b084      	sub	sp, #16
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d003      	beq.n	8016e86 <LoRaMacParserData+0x16>
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d101      	bne.n	8016e8a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016e86:	2302      	movs	r3, #2
 8016e88:	e0e2      	b.n	8017050 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681a      	ldr	r2, [r3, #0]
 8016e92:	89fb      	ldrh	r3, [r7, #14]
 8016e94:	1c59      	adds	r1, r3, #1
 8016e96:	81f9      	strh	r1, [r7, #14]
 8016e98:	4413      	add	r3, r2
 8016e9a:	781a      	ldrb	r2, [r3, #0]
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681a      	ldr	r2, [r3, #0]
 8016ea4:	89fb      	ldrh	r3, [r7, #14]
 8016ea6:	1c59      	adds	r1, r3, #1
 8016ea8:	81f9      	strh	r1, [r7, #14]
 8016eaa:	4413      	add	r3, r2
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	461a      	mov	r2, r3
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	89fb      	ldrh	r3, [r7, #14]
 8016eba:	1c59      	adds	r1, r3, #1
 8016ebc:	81f9      	strh	r1, [r7, #14]
 8016ebe:	4413      	add	r3, r2
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	021a      	lsls	r2, r3, #8
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	689b      	ldr	r3, [r3, #8]
 8016ec8:	431a      	orrs	r2, r3
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	89fb      	ldrh	r3, [r7, #14]
 8016ed4:	1c59      	adds	r1, r3, #1
 8016ed6:	81f9      	strh	r1, [r7, #14]
 8016ed8:	4413      	add	r3, r2
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	041a      	lsls	r2, r3, #16
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	689b      	ldr	r3, [r3, #8]
 8016ee2:	431a      	orrs	r2, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681a      	ldr	r2, [r3, #0]
 8016eec:	89fb      	ldrh	r3, [r7, #14]
 8016eee:	1c59      	adds	r1, r3, #1
 8016ef0:	81f9      	strh	r1, [r7, #14]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	781b      	ldrb	r3, [r3, #0]
 8016ef6:	061a      	lsls	r2, r3, #24
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	689b      	ldr	r3, [r3, #8]
 8016efc:	431a      	orrs	r2, r3
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681a      	ldr	r2, [r3, #0]
 8016f06:	89fb      	ldrh	r3, [r7, #14]
 8016f08:	1c59      	adds	r1, r3, #1
 8016f0a:	81f9      	strh	r1, [r7, #14]
 8016f0c:	4413      	add	r3, r2
 8016f0e:	781a      	ldrb	r2, [r3, #0]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681a      	ldr	r2, [r3, #0]
 8016f18:	89fb      	ldrh	r3, [r7, #14]
 8016f1a:	1c59      	adds	r1, r3, #1
 8016f1c:	81f9      	strh	r1, [r7, #14]
 8016f1e:	4413      	add	r3, r2
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	681a      	ldr	r2, [r3, #0]
 8016f2c:	89fb      	ldrh	r3, [r7, #14]
 8016f2e:	1c59      	adds	r1, r3, #1
 8016f30:	81f9      	strh	r1, [r7, #14]
 8016f32:	4413      	add	r3, r2
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	0219      	lsls	r1, r3, #8
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	89db      	ldrh	r3, [r3, #14]
 8016f3c:	b21a      	sxth	r2, r3
 8016f3e:	b20b      	sxth	r3, r1
 8016f40:	4313      	orrs	r3, r2
 8016f42:	b21b      	sxth	r3, r3
 8016f44:	b29a      	uxth	r2, r3
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f103 0010 	add.w	r0, r3, #16
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	89fb      	ldrh	r3, [r7, #14]
 8016f56:	18d1      	adds	r1, r2, r3
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	7b1b      	ldrb	r3, [r3, #12]
 8016f5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016f60:	b2db      	uxtb	r3, r3
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	461a      	mov	r2, r3
 8016f66:	f002 fd1a 	bl	801999e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	7b1b      	ldrb	r3, [r3, #12]
 8016f6e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016f72:	b2db      	uxtb	r3, r3
 8016f74:	b29a      	uxth	r2, r3
 8016f76:	89fb      	ldrh	r3, [r7, #14]
 8016f78:	4413      	add	r3, r2
 8016f7a:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2200      	movs	r2, #0
 8016f88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	791b      	ldrb	r3, [r3, #4]
 8016f90:	461a      	mov	r2, r3
 8016f92:	89fb      	ldrh	r3, [r7, #14]
 8016f94:	1ad3      	subs	r3, r2, r3
 8016f96:	2b04      	cmp	r3, #4
 8016f98:	dd28      	ble.n	8016fec <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	681a      	ldr	r2, [r3, #0]
 8016f9e:	89fb      	ldrh	r3, [r7, #14]
 8016fa0:	1c59      	adds	r1, r3, #1
 8016fa2:	81f9      	strh	r1, [r7, #14]
 8016fa4:	4413      	add	r3, r2
 8016fa6:	781a      	ldrb	r2, [r3, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	791a      	ldrb	r2, [r3, #4]
 8016fb2:	89fb      	ldrh	r3, [r7, #14]
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	1ad3      	subs	r3, r2, r3
 8016fb8:	b2db      	uxtb	r3, r3
 8016fba:	3b04      	subs	r3, #4
 8016fbc:	b2da      	uxtb	r2, r3
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	89fb      	ldrh	r3, [r7, #14]
 8016fce:	18d1      	adds	r1, r2, r3
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	461a      	mov	r2, r3
 8016fda:	f002 fce0 	bl	801999e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016fe4:	b29a      	uxth	r2, r3
 8016fe6:	89fb      	ldrh	r3, [r7, #14]
 8016fe8:	4413      	add	r3, r2
 8016fea:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681a      	ldr	r2, [r3, #0]
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	791b      	ldrb	r3, [r3, #4]
 8016ff4:	3b04      	subs	r3, #4
 8016ff6:	4413      	add	r3, r2
 8016ff8:	781b      	ldrb	r3, [r3, #0]
 8016ffa:	461a      	mov	r2, r3
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6819      	ldr	r1, [r3, #0]
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	791b      	ldrb	r3, [r3, #4]
 801700c:	3b03      	subs	r3, #3
 801700e:	440b      	add	r3, r1
 8017010:	781b      	ldrb	r3, [r3, #0]
 8017012:	021b      	lsls	r3, r3, #8
 8017014:	431a      	orrs	r2, r3
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	6819      	ldr	r1, [r3, #0]
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	791b      	ldrb	r3, [r3, #4]
 8017026:	3b02      	subs	r3, #2
 8017028:	440b      	add	r3, r1
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	041b      	lsls	r3, r3, #16
 801702e:	431a      	orrs	r2, r3
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	6819      	ldr	r1, [r3, #0]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	791b      	ldrb	r3, [r3, #4]
 8017040:	3b01      	subs	r3, #1
 8017042:	440b      	add	r3, r1
 8017044:	781b      	ldrb	r3, [r3, #0]
 8017046:	061b      	lsls	r3, r3, #24
 8017048:	431a      	orrs	r2, r3
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801704e:	2300      	movs	r3, #0
}
 8017050:	4618      	mov	r0, r3
 8017052:	3710      	adds	r7, #16
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d003      	beq.n	801706e <LoRaMacSerializerJoinRequest+0x16>
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d101      	bne.n	8017072 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801706e:	2301      	movs	r3, #1
 8017070:	e070      	b.n	8017154 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017072:	2300      	movs	r3, #0
 8017074:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	791b      	ldrb	r3, [r3, #4]
 801707a:	2b16      	cmp	r3, #22
 801707c:	d801      	bhi.n	8017082 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801707e:	2302      	movs	r3, #2
 8017080:	e068      	b.n	8017154 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	681a      	ldr	r2, [r3, #0]
 8017086:	89fb      	ldrh	r3, [r7, #14]
 8017088:	1c59      	adds	r1, r3, #1
 801708a:	81f9      	strh	r1, [r7, #14]
 801708c:	4413      	add	r3, r2
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	7952      	ldrb	r2, [r2, #5]
 8017092:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	89fb      	ldrh	r3, [r7, #14]
 801709a:	18d0      	adds	r0, r2, r3
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	3306      	adds	r3, #6
 80170a0:	2208      	movs	r2, #8
 80170a2:	4619      	mov	r1, r3
 80170a4:	f002 fc96 	bl	80199d4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80170a8:	89fb      	ldrh	r3, [r7, #14]
 80170aa:	3308      	adds	r3, #8
 80170ac:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	89fb      	ldrh	r3, [r7, #14]
 80170b4:	18d0      	adds	r0, r2, r3
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	330e      	adds	r3, #14
 80170ba:	2208      	movs	r2, #8
 80170bc:	4619      	mov	r1, r3
 80170be:	f002 fc89 	bl	80199d4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80170c2:	89fb      	ldrh	r3, [r7, #14]
 80170c4:	3308      	adds	r3, #8
 80170c6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	8ad9      	ldrh	r1, [r3, #22]
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681a      	ldr	r2, [r3, #0]
 80170d0:	89fb      	ldrh	r3, [r7, #14]
 80170d2:	1c58      	adds	r0, r3, #1
 80170d4:	81f8      	strh	r0, [r7, #14]
 80170d6:	4413      	add	r3, r2
 80170d8:	b2ca      	uxtb	r2, r1
 80170da:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	8adb      	ldrh	r3, [r3, #22]
 80170e0:	0a1b      	lsrs	r3, r3, #8
 80170e2:	b299      	uxth	r1, r3
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	681a      	ldr	r2, [r3, #0]
 80170e8:	89fb      	ldrh	r3, [r7, #14]
 80170ea:	1c58      	adds	r0, r3, #1
 80170ec:	81f8      	strh	r0, [r7, #14]
 80170ee:	4413      	add	r3, r2
 80170f0:	b2ca      	uxtb	r2, r1
 80170f2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6999      	ldr	r1, [r3, #24]
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681a      	ldr	r2, [r3, #0]
 80170fc:	89fb      	ldrh	r3, [r7, #14]
 80170fe:	1c58      	adds	r0, r3, #1
 8017100:	81f8      	strh	r0, [r7, #14]
 8017102:	4413      	add	r3, r2
 8017104:	b2ca      	uxtb	r2, r1
 8017106:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	699b      	ldr	r3, [r3, #24]
 801710c:	0a19      	lsrs	r1, r3, #8
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	89fb      	ldrh	r3, [r7, #14]
 8017114:	1c58      	adds	r0, r3, #1
 8017116:	81f8      	strh	r0, [r7, #14]
 8017118:	4413      	add	r3, r2
 801711a:	b2ca      	uxtb	r2, r1
 801711c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	699b      	ldr	r3, [r3, #24]
 8017122:	0c19      	lsrs	r1, r3, #16
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681a      	ldr	r2, [r3, #0]
 8017128:	89fb      	ldrh	r3, [r7, #14]
 801712a:	1c58      	adds	r0, r3, #1
 801712c:	81f8      	strh	r0, [r7, #14]
 801712e:	4413      	add	r3, r2
 8017130:	b2ca      	uxtb	r2, r1
 8017132:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	699b      	ldr	r3, [r3, #24]
 8017138:	0e19      	lsrs	r1, r3, #24
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681a      	ldr	r2, [r3, #0]
 801713e:	89fb      	ldrh	r3, [r7, #14]
 8017140:	1c58      	adds	r0, r3, #1
 8017142:	81f8      	strh	r0, [r7, #14]
 8017144:	4413      	add	r3, r2
 8017146:	b2ca      	uxtb	r2, r1
 8017148:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801714a:	89fb      	ldrh	r3, [r7, #14]
 801714c:	b2da      	uxtb	r2, r3
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017152:	2300      	movs	r3, #0
}
 8017154:	4618      	mov	r0, r3
 8017156:	3710      	adds	r7, #16
 8017158:	46bd      	mov	sp, r7
 801715a:	bd80      	pop	{r7, pc}

0801715c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b084      	sub	sp, #16
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d003      	beq.n	8017172 <LoRaMacSerializerData+0x16>
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d101      	bne.n	8017176 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017172:	2301      	movs	r3, #1
 8017174:	e0e5      	b.n	8017342 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8017176:	2300      	movs	r3, #0
 8017178:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801717a:	2308      	movs	r3, #8
 801717c:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	7b1b      	ldrb	r3, [r3, #12]
 8017182:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017186:	b2db      	uxtb	r3, r3
 8017188:	b29a      	uxth	r2, r3
 801718a:	89bb      	ldrh	r3, [r7, #12]
 801718c:	4413      	add	r3, r2
 801718e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017196:	2b00      	cmp	r3, #0
 8017198:	d002      	beq.n	80171a0 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801719a:	89bb      	ldrh	r3, [r7, #12]
 801719c:	3301      	adds	r3, #1
 801719e:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80171a6:	b29a      	uxth	r2, r3
 80171a8:	89bb      	ldrh	r3, [r7, #12]
 80171aa:	4413      	add	r3, r2
 80171ac:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80171ae:	89bb      	ldrh	r3, [r7, #12]
 80171b0:	3304      	adds	r3, #4
 80171b2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	791b      	ldrb	r3, [r3, #4]
 80171b8:	b29b      	uxth	r3, r3
 80171ba:	89ba      	ldrh	r2, [r7, #12]
 80171bc:	429a      	cmp	r2, r3
 80171be:	d901      	bls.n	80171c4 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80171c0:	2302      	movs	r3, #2
 80171c2:	e0be      	b.n	8017342 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681a      	ldr	r2, [r3, #0]
 80171c8:	89fb      	ldrh	r3, [r7, #14]
 80171ca:	1c59      	adds	r1, r3, #1
 80171cc:	81f9      	strh	r1, [r7, #14]
 80171ce:	4413      	add	r3, r2
 80171d0:	687a      	ldr	r2, [r7, #4]
 80171d2:	7952      	ldrb	r2, [r2, #5]
 80171d4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6899      	ldr	r1, [r3, #8]
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681a      	ldr	r2, [r3, #0]
 80171de:	89fb      	ldrh	r3, [r7, #14]
 80171e0:	1c58      	adds	r0, r3, #1
 80171e2:	81f8      	strh	r0, [r7, #14]
 80171e4:	4413      	add	r3, r2
 80171e6:	b2ca      	uxtb	r2, r1
 80171e8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	689b      	ldr	r3, [r3, #8]
 80171ee:	0a19      	lsrs	r1, r3, #8
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	681a      	ldr	r2, [r3, #0]
 80171f4:	89fb      	ldrh	r3, [r7, #14]
 80171f6:	1c58      	adds	r0, r3, #1
 80171f8:	81f8      	strh	r0, [r7, #14]
 80171fa:	4413      	add	r3, r2
 80171fc:	b2ca      	uxtb	r2, r1
 80171fe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	689b      	ldr	r3, [r3, #8]
 8017204:	0c19      	lsrs	r1, r3, #16
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	681a      	ldr	r2, [r3, #0]
 801720a:	89fb      	ldrh	r3, [r7, #14]
 801720c:	1c58      	adds	r0, r3, #1
 801720e:	81f8      	strh	r0, [r7, #14]
 8017210:	4413      	add	r3, r2
 8017212:	b2ca      	uxtb	r2, r1
 8017214:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	689b      	ldr	r3, [r3, #8]
 801721a:	0e19      	lsrs	r1, r3, #24
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	89fb      	ldrh	r3, [r7, #14]
 8017222:	1c58      	adds	r0, r3, #1
 8017224:	81f8      	strh	r0, [r7, #14]
 8017226:	4413      	add	r3, r2
 8017228:	b2ca      	uxtb	r2, r1
 801722a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681a      	ldr	r2, [r3, #0]
 8017230:	89fb      	ldrh	r3, [r7, #14]
 8017232:	1c59      	adds	r1, r3, #1
 8017234:	81f9      	strh	r1, [r7, #14]
 8017236:	4413      	add	r3, r2
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	7b12      	ldrb	r2, [r2, #12]
 801723c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	89d9      	ldrh	r1, [r3, #14]
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681a      	ldr	r2, [r3, #0]
 8017246:	89fb      	ldrh	r3, [r7, #14]
 8017248:	1c58      	adds	r0, r3, #1
 801724a:	81f8      	strh	r0, [r7, #14]
 801724c:	4413      	add	r3, r2
 801724e:	b2ca      	uxtb	r2, r1
 8017250:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	89db      	ldrh	r3, [r3, #14]
 8017256:	0a1b      	lsrs	r3, r3, #8
 8017258:	b299      	uxth	r1, r3
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	89fb      	ldrh	r3, [r7, #14]
 8017260:	1c58      	adds	r0, r3, #1
 8017262:	81f8      	strh	r0, [r7, #14]
 8017264:	4413      	add	r3, r2
 8017266:	b2ca      	uxtb	r2, r1
 8017268:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	681a      	ldr	r2, [r3, #0]
 801726e:	89fb      	ldrh	r3, [r7, #14]
 8017270:	18d0      	adds	r0, r2, r3
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	f103 0110 	add.w	r1, r3, #16
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	7b1b      	ldrb	r3, [r3, #12]
 801727c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017280:	b2db      	uxtb	r3, r3
 8017282:	b29b      	uxth	r3, r3
 8017284:	461a      	mov	r2, r3
 8017286:	f002 fb8a 	bl	801999e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	7b1b      	ldrb	r3, [r3, #12]
 801728e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017292:	b2db      	uxtb	r3, r3
 8017294:	b29a      	uxth	r2, r3
 8017296:	89fb      	ldrh	r3, [r7, #14]
 8017298:	4413      	add	r3, r2
 801729a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d009      	beq.n	80172ba <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	89fb      	ldrh	r3, [r7, #14]
 80172ac:	1c59      	adds	r1, r3, #1
 80172ae:	81f9      	strh	r1, [r7, #14]
 80172b0:	4413      	add	r3, r2
 80172b2:	687a      	ldr	r2, [r7, #4]
 80172b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80172b8:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	681a      	ldr	r2, [r3, #0]
 80172be:	89fb      	ldrh	r3, [r7, #14]
 80172c0:	18d0      	adds	r0, r2, r3
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172cc:	b29b      	uxth	r3, r3
 80172ce:	461a      	mov	r2, r3
 80172d0:	f002 fb65 	bl	801999e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172da:	b29a      	uxth	r2, r3
 80172dc:	89fb      	ldrh	r3, [r7, #14]
 80172de:	4413      	add	r3, r2
 80172e0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	89fb      	ldrh	r3, [r7, #14]
 80172ec:	1c58      	adds	r0, r3, #1
 80172ee:	81f8      	strh	r0, [r7, #14]
 80172f0:	4413      	add	r3, r2
 80172f2:	b2ca      	uxtb	r2, r1
 80172f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172fa:	0a19      	lsrs	r1, r3, #8
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	89fb      	ldrh	r3, [r7, #14]
 8017302:	1c58      	adds	r0, r3, #1
 8017304:	81f8      	strh	r0, [r7, #14]
 8017306:	4413      	add	r3, r2
 8017308:	b2ca      	uxtb	r2, r1
 801730a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017310:	0c19      	lsrs	r1, r3, #16
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681a      	ldr	r2, [r3, #0]
 8017316:	89fb      	ldrh	r3, [r7, #14]
 8017318:	1c58      	adds	r0, r3, #1
 801731a:	81f8      	strh	r0, [r7, #14]
 801731c:	4413      	add	r3, r2
 801731e:	b2ca      	uxtb	r2, r1
 8017320:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017326:	0e19      	lsrs	r1, r3, #24
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	681a      	ldr	r2, [r3, #0]
 801732c:	89fb      	ldrh	r3, [r7, #14]
 801732e:	1c58      	adds	r0, r3, #1
 8017330:	81f8      	strh	r0, [r7, #14]
 8017332:	4413      	add	r3, r2
 8017334:	b2ca      	uxtb	r2, r1
 8017336:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017338:	89fb      	ldrh	r3, [r7, #14]
 801733a:	b2da      	uxtb	r2, r3
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017340:	2300      	movs	r3, #0
}
 8017342:	4618      	mov	r0, r3
 8017344:	3710      	adds	r7, #16
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}

0801734a <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801734a:	b480      	push	{r7}
 801734c:	b083      	sub	sp, #12
 801734e:	af00      	add	r7, sp, #0
 8017350:	4603      	mov	r3, r0
 8017352:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017354:	79fb      	ldrb	r3, [r7, #7]
 8017356:	2b05      	cmp	r3, #5
 8017358:	d101      	bne.n	801735e <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801735a:	2301      	movs	r3, #1
 801735c:	e000      	b.n	8017360 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801735e:	2300      	movs	r3, #0
        }
    }
}
 8017360:	4618      	mov	r0, r3
 8017362:	370c      	adds	r7, #12
 8017364:	46bd      	mov	sp, r7
 8017366:	bc80      	pop	{r7}
 8017368:	4770      	bx	lr

0801736a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801736a:	b580      	push	{r7, lr}
 801736c:	b084      	sub	sp, #16
 801736e:	af00      	add	r7, sp, #0
 8017370:	4603      	mov	r3, r0
 8017372:	6039      	str	r1, [r7, #0]
 8017374:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017376:	2300      	movs	r3, #0
 8017378:	60bb      	str	r3, [r7, #8]
    switch( region )
 801737a:	79fb      	ldrb	r3, [r7, #7]
 801737c:	2b05      	cmp	r3, #5
 801737e:	d105      	bne.n	801738c <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017380:	6838      	ldr	r0, [r7, #0]
 8017382:	f001 f995 	bl	80186b0 <RegionEU868GetPhyParam>
 8017386:	4603      	mov	r3, r0
 8017388:	60fb      	str	r3, [r7, #12]
 801738a:	e001      	b.n	8017390 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801738c:	68bb      	ldr	r3, [r7, #8]
 801738e:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	4618      	mov	r0, r3
 8017394:	3710      	adds	r7, #16
 8017396:	46bd      	mov	sp, r7
 8017398:	bd80      	pop	{r7, pc}

0801739a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801739a:	b580      	push	{r7, lr}
 801739c:	b082      	sub	sp, #8
 801739e:	af00      	add	r7, sp, #0
 80173a0:	4603      	mov	r3, r0
 80173a2:	6039      	str	r1, [r7, #0]
 80173a4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80173a6:	79fb      	ldrb	r3, [r7, #7]
 80173a8:	2b05      	cmp	r3, #5
 80173aa:	d103      	bne.n	80173b4 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80173ac:	6838      	ldr	r0, [r7, #0]
 80173ae:	f001 facb 	bl	8018948 <RegionEU868SetBandTxDone>
 80173b2:	e000      	b.n	80173b6 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80173b4:	bf00      	nop
        }
    }
}
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}

080173bc <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	4603      	mov	r3, r0
 80173c4:	6039      	str	r1, [r7, #0]
 80173c6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80173c8:	79fb      	ldrb	r3, [r7, #7]
 80173ca:	2b05      	cmp	r3, #5
 80173cc:	d103      	bne.n	80173d6 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80173ce:	6838      	ldr	r0, [r7, #0]
 80173d0:	f001 fae6 	bl	80189a0 <RegionEU868InitDefaults>
 80173d4:	e000      	b.n	80173d8 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80173d6:	bf00      	nop
        }
    }
}
 80173d8:	bf00      	nop
 80173da:	3708      	adds	r7, #8
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}

080173e0 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b082      	sub	sp, #8
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	4603      	mov	r3, r0
 80173e8:	6039      	str	r1, [r7, #0]
 80173ea:	71fb      	strb	r3, [r7, #7]
 80173ec:	4613      	mov	r3, r2
 80173ee:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80173f0:	79fb      	ldrb	r3, [r7, #7]
 80173f2:	2b05      	cmp	r3, #5
 80173f4:	d106      	bne.n	8017404 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80173f6:	79bb      	ldrb	r3, [r7, #6]
 80173f8:	4619      	mov	r1, r3
 80173fa:	6838      	ldr	r0, [r7, #0]
 80173fc:	f001 fb6e 	bl	8018adc <RegionEU868Verify>
 8017400:	4603      	mov	r3, r0
 8017402:	e000      	b.n	8017406 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017404:	2300      	movs	r3, #0
        }
    }
}
 8017406:	4618      	mov	r0, r3
 8017408:	3708      	adds	r7, #8
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}

0801740e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b082      	sub	sp, #8
 8017412:	af00      	add	r7, sp, #0
 8017414:	4603      	mov	r3, r0
 8017416:	6039      	str	r1, [r7, #0]
 8017418:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801741a:	79fb      	ldrb	r3, [r7, #7]
 801741c:	2b05      	cmp	r3, #5
 801741e:	d103      	bne.n	8017428 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017420:	6838      	ldr	r0, [r7, #0]
 8017422:	f001 fbd7 	bl	8018bd4 <RegionEU868ApplyCFList>
 8017426:	e000      	b.n	801742a <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017428:	bf00      	nop
        }
    }
}
 801742a:	bf00      	nop
 801742c:	3708      	adds	r7, #8
 801742e:	46bd      	mov	sp, r7
 8017430:	bd80      	pop	{r7, pc}

08017432 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017432:	b580      	push	{r7, lr}
 8017434:	b082      	sub	sp, #8
 8017436:	af00      	add	r7, sp, #0
 8017438:	4603      	mov	r3, r0
 801743a:	6039      	str	r1, [r7, #0]
 801743c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801743e:	79fb      	ldrb	r3, [r7, #7]
 8017440:	2b05      	cmp	r3, #5
 8017442:	d104      	bne.n	801744e <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017444:	6838      	ldr	r0, [r7, #0]
 8017446:	f001 fc39 	bl	8018cbc <RegionEU868ChanMaskSet>
 801744a:	4603      	mov	r3, r0
 801744c:	e000      	b.n	8017450 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801744e:	2300      	movs	r3, #0
        }
    }
}
 8017450:	4618      	mov	r0, r3
 8017452:	3708      	adds	r7, #8
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}

08017458 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	603b      	str	r3, [r7, #0]
 8017460:	4603      	mov	r3, r0
 8017462:	71fb      	strb	r3, [r7, #7]
 8017464:	460b      	mov	r3, r1
 8017466:	71bb      	strb	r3, [r7, #6]
 8017468:	4613      	mov	r3, r2
 801746a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801746c:	79fb      	ldrb	r3, [r7, #7]
 801746e:	2b05      	cmp	r3, #5
 8017470:	d107      	bne.n	8017482 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017472:	7979      	ldrb	r1, [r7, #5]
 8017474:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017478:	693b      	ldr	r3, [r7, #16]
 801747a:	683a      	ldr	r2, [r7, #0]
 801747c:	f001 fc48 	bl	8018d10 <RegionEU868ComputeRxWindowParameters>
 8017480:	e000      	b.n	8017484 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017482:	bf00      	nop
        }
    }
}
 8017484:	bf00      	nop
 8017486:	3708      	adds	r7, #8
 8017488:	46bd      	mov	sp, r7
 801748a:	bd80      	pop	{r7, pc}

0801748c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	4603      	mov	r3, r0
 8017494:	60b9      	str	r1, [r7, #8]
 8017496:	607a      	str	r2, [r7, #4]
 8017498:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801749a:	7bfb      	ldrb	r3, [r7, #15]
 801749c:	2b05      	cmp	r3, #5
 801749e:	d105      	bne.n	80174ac <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80174a0:	6879      	ldr	r1, [r7, #4]
 80174a2:	68b8      	ldr	r0, [r7, #8]
 80174a4:	f001 fc8e 	bl	8018dc4 <RegionEU868RxConfig>
 80174a8:	4603      	mov	r3, r0
 80174aa:	e000      	b.n	80174ae <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80174ac:	2300      	movs	r3, #0
        }
    }
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3710      	adds	r7, #16
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}

080174b6 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80174b6:	b580      	push	{r7, lr}
 80174b8:	b084      	sub	sp, #16
 80174ba:	af00      	add	r7, sp, #0
 80174bc:	60b9      	str	r1, [r7, #8]
 80174be:	607a      	str	r2, [r7, #4]
 80174c0:	603b      	str	r3, [r7, #0]
 80174c2:	4603      	mov	r3, r0
 80174c4:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80174c6:	7bfb      	ldrb	r3, [r7, #15]
 80174c8:	2b05      	cmp	r3, #5
 80174ca:	d106      	bne.n	80174da <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80174cc:	683a      	ldr	r2, [r7, #0]
 80174ce:	6879      	ldr	r1, [r7, #4]
 80174d0:	68b8      	ldr	r0, [r7, #8]
 80174d2:	f001 fd47 	bl	8018f64 <RegionEU868TxConfig>
 80174d6:	4603      	mov	r3, r0
 80174d8:	e000      	b.n	80174dc <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80174da:	2300      	movs	r3, #0
        }
    }
}
 80174dc:	4618      	mov	r0, r3
 80174de:	3710      	adds	r7, #16
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b086      	sub	sp, #24
 80174e8:	af02      	add	r7, sp, #8
 80174ea:	60b9      	str	r1, [r7, #8]
 80174ec:	607a      	str	r2, [r7, #4]
 80174ee:	603b      	str	r3, [r7, #0]
 80174f0:	4603      	mov	r3, r0
 80174f2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80174f4:	7bfb      	ldrb	r3, [r7, #15]
 80174f6:	2b05      	cmp	r3, #5
 80174f8:	d109      	bne.n	801750e <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	9300      	str	r3, [sp, #0]
 80174fe:	69bb      	ldr	r3, [r7, #24]
 8017500:	683a      	ldr	r2, [r7, #0]
 8017502:	6879      	ldr	r1, [r7, #4]
 8017504:	68b8      	ldr	r0, [r7, #8]
 8017506:	f001 fdfd 	bl	8019104 <RegionEU868LinkAdrReq>
 801750a:	4603      	mov	r3, r0
 801750c:	e000      	b.n	8017510 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801750e:	2300      	movs	r3, #0
        }
    }
}
 8017510:	4618      	mov	r0, r3
 8017512:	3710      	adds	r7, #16
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b082      	sub	sp, #8
 801751c:	af00      	add	r7, sp, #0
 801751e:	4603      	mov	r3, r0
 8017520:	6039      	str	r1, [r7, #0]
 8017522:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017524:	79fb      	ldrb	r3, [r7, #7]
 8017526:	2b05      	cmp	r3, #5
 8017528:	d104      	bne.n	8017534 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801752a:	6838      	ldr	r0, [r7, #0]
 801752c:	f001 ff0c 	bl	8019348 <RegionEU868RxParamSetupReq>
 8017530:	4603      	mov	r3, r0
 8017532:	e000      	b.n	8017536 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017534:	2300      	movs	r3, #0
        }
    }
}
 8017536:	4618      	mov	r0, r3
 8017538:	3708      	adds	r7, #8
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b082      	sub	sp, #8
 8017542:	af00      	add	r7, sp, #0
 8017544:	4603      	mov	r3, r0
 8017546:	6039      	str	r1, [r7, #0]
 8017548:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801754a:	79fb      	ldrb	r3, [r7, #7]
 801754c:	2b05      	cmp	r3, #5
 801754e:	d104      	bne.n	801755a <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017550:	6838      	ldr	r0, [r7, #0]
 8017552:	f001 ff37 	bl	80193c4 <RegionEU868NewChannelReq>
 8017556:	4603      	mov	r3, r0
 8017558:	e000      	b.n	801755c <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801755a:	2300      	movs	r3, #0
        }
    }
}
 801755c:	4618      	mov	r0, r3
 801755e:	3708      	adds	r7, #8
 8017560:	46bd      	mov	sp, r7
 8017562:	bd80      	pop	{r7, pc}

08017564 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017564:	b580      	push	{r7, lr}
 8017566:	b082      	sub	sp, #8
 8017568:	af00      	add	r7, sp, #0
 801756a:	4603      	mov	r3, r0
 801756c:	6039      	str	r1, [r7, #0]
 801756e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017570:	79fb      	ldrb	r3, [r7, #7]
 8017572:	2b05      	cmp	r3, #5
 8017574:	d104      	bne.n	8017580 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017576:	6838      	ldr	r0, [r7, #0]
 8017578:	f001 ff82 	bl	8019480 <RegionEU868TxParamSetupReq>
 801757c:	4603      	mov	r3, r0
 801757e:	e000      	b.n	8017582 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017580:	2300      	movs	r3, #0
        }
    }
}
 8017582:	4618      	mov	r0, r3
 8017584:	3708      	adds	r7, #8
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}

0801758a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801758a:	b580      	push	{r7, lr}
 801758c:	b082      	sub	sp, #8
 801758e:	af00      	add	r7, sp, #0
 8017590:	4603      	mov	r3, r0
 8017592:	6039      	str	r1, [r7, #0]
 8017594:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017596:	79fb      	ldrb	r3, [r7, #7]
 8017598:	2b05      	cmp	r3, #5
 801759a:	d104      	bne.n	80175a6 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 801759c:	6838      	ldr	r0, [r7, #0]
 801759e:	f001 ff7b 	bl	8019498 <RegionEU868DlChannelReq>
 80175a2:	4603      	mov	r3, r0
 80175a4:	e000      	b.n	80175a8 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80175a6:	2300      	movs	r3, #0
        }
    }
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3708      	adds	r7, #8
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}

080175b0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b082      	sub	sp, #8
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	4603      	mov	r3, r0
 80175b8:	71fb      	strb	r3, [r7, #7]
 80175ba:	460b      	mov	r3, r1
 80175bc:	71bb      	strb	r3, [r7, #6]
 80175be:	4613      	mov	r3, r2
 80175c0:	717b      	strb	r3, [r7, #5]
    switch( region )
 80175c2:	79fb      	ldrb	r3, [r7, #7]
 80175c4:	2b05      	cmp	r3, #5
 80175c6:	d108      	bne.n	80175da <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80175c8:	797a      	ldrb	r2, [r7, #5]
 80175ca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80175ce:	4611      	mov	r1, r2
 80175d0:	4618      	mov	r0, r3
 80175d2:	f001 ffab 	bl	801952c <RegionEU868AlternateDr>
 80175d6:	4603      	mov	r3, r0
 80175d8:	e000      	b.n	80175dc <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80175da:	2300      	movs	r3, #0
        }
    }
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3708      	adds	r7, #8
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}

080175e4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b084      	sub	sp, #16
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	60b9      	str	r1, [r7, #8]
 80175ec:	607a      	str	r2, [r7, #4]
 80175ee:	603b      	str	r3, [r7, #0]
 80175f0:	4603      	mov	r3, r0
 80175f2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80175f4:	7bfb      	ldrb	r3, [r7, #15]
 80175f6:	2b05      	cmp	r3, #5
 80175f8:	d107      	bne.n	801760a <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	683a      	ldr	r2, [r7, #0]
 80175fe:	6879      	ldr	r1, [r7, #4]
 8017600:	68b8      	ldr	r0, [r7, #8]
 8017602:	f001 ffa3 	bl	801954c <RegionEU868NextChannel>
 8017606:	4603      	mov	r3, r0
 8017608:	e000      	b.n	801760c <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801760a:	2309      	movs	r3, #9
        }
    }
}
 801760c:	4618      	mov	r0, r3
 801760e:	3710      	adds	r7, #16
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	4603      	mov	r3, r0
 801761c:	6039      	str	r1, [r7, #0]
 801761e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017620:	79fb      	ldrb	r3, [r7, #7]
 8017622:	2b05      	cmp	r3, #5
 8017624:	d103      	bne.n	801762e <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017626:	6838      	ldr	r0, [r7, #0]
 8017628:	f002 f90a 	bl	8019840 <RegionEU868SetContinuousWave>
 801762c:	e000      	b.n	8017630 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801762e:	bf00      	nop
        }
    }
}
 8017630:	bf00      	nop
 8017632:	3708      	adds	r7, #8
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017638:	b590      	push	{r4, r7, lr}
 801763a:	b083      	sub	sp, #12
 801763c:	af00      	add	r7, sp, #0
 801763e:	4604      	mov	r4, r0
 8017640:	4608      	mov	r0, r1
 8017642:	4611      	mov	r1, r2
 8017644:	461a      	mov	r2, r3
 8017646:	4623      	mov	r3, r4
 8017648:	71fb      	strb	r3, [r7, #7]
 801764a:	4603      	mov	r3, r0
 801764c:	71bb      	strb	r3, [r7, #6]
 801764e:	460b      	mov	r3, r1
 8017650:	717b      	strb	r3, [r7, #5]
 8017652:	4613      	mov	r3, r2
 8017654:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017656:	79fb      	ldrb	r3, [r7, #7]
 8017658:	2b05      	cmp	r3, #5
 801765a:	d109      	bne.n	8017670 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801765c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017660:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017664:	79bb      	ldrb	r3, [r7, #6]
 8017666:	4618      	mov	r0, r3
 8017668:	f002 f938 	bl	80198dc <RegionEU868ApplyDrOffset>
 801766c:	4603      	mov	r3, r0
 801766e:	e000      	b.n	8017672 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017670:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017672:	4618      	mov	r0, r3
 8017674:	370c      	adds	r7, #12
 8017676:	46bd      	mov	sp, r7
 8017678:	bd90      	pop	{r4, r7, pc}
	...

0801767c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801767c:	b480      	push	{r7}
 801767e:	b083      	sub	sp, #12
 8017680:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017682:	4b04      	ldr	r3, [pc, #16]	; (8017694 <RegionGetVersion+0x18>)
 8017684:	607b      	str	r3, [r7, #4]

    return version;
 8017686:	687b      	ldr	r3, [r7, #4]
}
 8017688:	4618      	mov	r0, r3
 801768a:	370c      	adds	r7, #12
 801768c:	46bd      	mov	sp, r7
 801768e:	bc80      	pop	{r7}
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop
 8017694:	01010003 	.word	0x01010003

08017698 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017698:	b480      	push	{r7}
 801769a:	b087      	sub	sp, #28
 801769c:	af00      	add	r7, sp, #0
 801769e:	60f8      	str	r0, [r7, #12]
 80176a0:	4608      	mov	r0, r1
 80176a2:	4639      	mov	r1, r7
 80176a4:	e881 000c 	stmia.w	r1, {r2, r3}
 80176a8:	4603      	mov	r3, r0
 80176aa:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	881b      	ldrh	r3, [r3, #0]
 80176b0:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80176b2:	7afb      	ldrb	r3, [r7, #11]
 80176b4:	f083 0301 	eor.w	r3, r3, #1
 80176b8:	b2db      	uxtb	r3, r3
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d01b      	beq.n	80176f6 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80176be:	f242 7310 	movw	r3, #10000	; 0x2710
 80176c2:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80176ca:	d202      	bcs.n	80176d2 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80176cc:	2364      	movs	r3, #100	; 0x64
 80176ce:	82bb      	strh	r3, [r7, #20]
 80176d0:	e00b      	b.n	80176ea <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80176d8:	4293      	cmp	r3, r2
 80176da:	d803      	bhi.n	80176e4 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80176dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80176e0:	82bb      	strh	r3, [r7, #20]
 80176e2:	e002      	b.n	80176ea <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80176e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80176e8:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80176ea:	8aba      	ldrh	r2, [r7, #20]
 80176ec:	8afb      	ldrh	r3, [r7, #22]
 80176ee:	4293      	cmp	r3, r2
 80176f0:	bf38      	it	cc
 80176f2:	4613      	movcc	r3, r2
 80176f4:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80176f6:	8afb      	ldrh	r3, [r7, #22]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d101      	bne.n	8017700 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80176fc:	2301      	movs	r3, #1
 80176fe:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017700:	8afb      	ldrh	r3, [r7, #22]
}
 8017702:	4618      	mov	r0, r3
 8017704:	371c      	adds	r7, #28
 8017706:	46bd      	mov	sp, r7
 8017708:	bc80      	pop	{r7}
 801770a:	4770      	bx	lr

0801770c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b08e      	sub	sp, #56	; 0x38
 8017710:	af02      	add	r7, sp, #8
 8017712:	60f8      	str	r0, [r7, #12]
 8017714:	4608      	mov	r0, r1
 8017716:	4639      	mov	r1, r7
 8017718:	e881 000c 	stmia.w	r1, {r2, r3}
 801771c:	4603      	mov	r3, r0
 801771e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	881b      	ldrh	r3, [r3, #0]
 8017724:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017726:	4b4b      	ldr	r3, [pc, #300]	; (8017854 <SetMaxTimeCredits+0x148>)
 8017728:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801772a:	463b      	mov	r3, r7
 801772c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017730:	f005 fdc0 	bl	801d2b4 <SysTimeToMs>
 8017734:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017736:	f107 0314 	add.w	r3, r7, #20
 801773a:	2200      	movs	r2, #0
 801773c:	601a      	str	r2, [r3, #0]
 801773e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017740:	7af9      	ldrb	r1, [r7, #11]
 8017742:	463b      	mov	r3, r7
 8017744:	cb0c      	ldmia	r3, {r2, r3}
 8017746:	68f8      	ldr	r0, [r7, #12]
 8017748:	f7ff ffa6 	bl	8017698 <GetDutyCycle>
 801774c:	4603      	mov	r3, r0
 801774e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017750:	7afb      	ldrb	r3, [r7, #11]
 8017752:	f083 0301 	eor.w	r3, r3, #1
 8017756:	b2db      	uxtb	r3, r3
 8017758:	2b00      	cmp	r3, #0
 801775a:	d062      	beq.n	8017822 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 801775c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801775e:	2b64      	cmp	r3, #100	; 0x64
 8017760:	d105      	bne.n	801776e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017762:	4b3c      	ldr	r3, [pc, #240]	; (8017854 <SetMaxTimeCredits+0x148>)
 8017764:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801776a:	609a      	str	r2, [r3, #8]
 801776c:	e00b      	b.n	8017786 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801776e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017774:	d105      	bne.n	8017782 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017776:	4b38      	ldr	r3, [pc, #224]	; (8017858 <SetMaxTimeCredits+0x14c>)
 8017778:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801777e:	609a      	str	r2, [r3, #8]
 8017780:	e001      	b.n	8017786 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017782:	4b36      	ldr	r3, [pc, #216]	; (801785c <SetMaxTimeCredits+0x150>)
 8017784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	689a      	ldr	r2, [r3, #8]
 801778a:	f107 031c 	add.w	r3, r7, #28
 801778e:	4611      	mov	r1, r2
 8017790:	4618      	mov	r0, r3
 8017792:	f005 fdb7 	bl	801d304 <SysTimeFromMs>
 8017796:	f107 0014 	add.w	r0, r7, #20
 801779a:	6a3b      	ldr	r3, [r7, #32]
 801779c:	9300      	str	r3, [sp, #0]
 801779e:	69fb      	ldr	r3, [r7, #28]
 80177a0:	463a      	mov	r2, r7
 80177a2:	ca06      	ldmia	r2, {r1, r2}
 80177a4:	f005 fcc7 	bl	801d136 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80177a8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80177ac:	f083 0301 	eor.w	r3, r3, #1
 80177b0:	b2db      	uxtb	r3, r3
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d006      	beq.n	80177c4 <SetMaxTimeCredits+0xb8>
 80177b6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80177ba:	f083 0301 	eor.w	r3, r3, #1
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d108      	bne.n	80177d6 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80177c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d103      	bne.n	80177d6 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80177ce:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80177d0:	4a23      	ldr	r2, [pc, #140]	; (8017860 <SetMaxTimeCredits+0x154>)
 80177d2:	4293      	cmp	r3, r2
 80177d4:	d92f      	bls.n	8017836 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177da:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	4a21      	ldr	r2, [pc, #132]	; (8017864 <SetMaxTimeCredits+0x158>)
 80177e0:	4293      	cmp	r3, r2
 80177e2:	d928      	bls.n	8017836 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80177ea:	3b30      	subs	r3, #48	; 0x30
 80177ec:	4a1e      	ldr	r2, [pc, #120]	; (8017868 <SetMaxTimeCredits+0x15c>)
 80177ee:	fba2 2303 	umull	r2, r3, r2, r3
 80177f2:	0c1b      	lsrs	r3, r3, #16
 80177f4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80177f6:	697b      	ldr	r3, [r7, #20]
 80177f8:	4a1c      	ldr	r2, [pc, #112]	; (801786c <SetMaxTimeCredits+0x160>)
 80177fa:	fb02 f303 	mul.w	r3, r2, r3
 80177fe:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017800:	697b      	ldr	r3, [r7, #20]
 8017802:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017806:	3330      	adds	r3, #48	; 0x30
 8017808:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801780a:	2300      	movs	r3, #0
 801780c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 801780e:	f107 0314 	add.w	r3, r7, #20
 8017812:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017816:	f005 fd4d 	bl	801d2b4 <SysTimeToMs>
 801781a:	4602      	mov	r2, r0
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	609a      	str	r2, [r3, #8]
 8017820:	e009      	b.n	8017836 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017822:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017826:	f083 0301 	eor.w	r3, r3, #1
 801782a:	b2db      	uxtb	r3, r3
 801782c:	2b00      	cmp	r3, #0
 801782e:	d002      	beq.n	8017836 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017834:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d102      	bne.n	8017844 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017842:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017848:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801784a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 801784c:	4618      	mov	r0, r3
 801784e:	3730      	adds	r7, #48	; 0x30
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	001b7740 	.word	0x001b7740
 8017858:	0112a880 	.word	0x0112a880
 801785c:	02932e00 	.word	0x02932e00
 8017860:	0001517f 	.word	0x0001517f
 8017864:	0001ec2f 	.word	0x0001ec2f
 8017868:	c22e4507 	.word	0xc22e4507
 801786c:	00015180 	.word	0x00015180

08017870 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b086      	sub	sp, #24
 8017874:	af02      	add	r7, sp, #8
 8017876:	6078      	str	r0, [r7, #4]
 8017878:	4608      	mov	r0, r1
 801787a:	4611      	mov	r1, r2
 801787c:	461a      	mov	r2, r3
 801787e:	4603      	mov	r3, r0
 8017880:	70fb      	strb	r3, [r7, #3]
 8017882:	460b      	mov	r3, r1
 8017884:	70bb      	strb	r3, [r7, #2]
 8017886:	4613      	mov	r3, r2
 8017888:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801788a:	78f9      	ldrb	r1, [r7, #3]
 801788c:	787b      	ldrb	r3, [r7, #1]
 801788e:	9301      	str	r3, [sp, #4]
 8017890:	78bb      	ldrb	r3, [r7, #2]
 8017892:	9300      	str	r3, [sp, #0]
 8017894:	f107 0318 	add.w	r3, r7, #24
 8017898:	cb0c      	ldmia	r3, {r2, r3}
 801789a:	6878      	ldr	r0, [r7, #4]
 801789c:	f7ff ff36 	bl	801770c <SetMaxTimeCredits>
 80178a0:	4603      	mov	r3, r0
 80178a2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80178a4:	78fb      	ldrb	r3, [r7, #3]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d00a      	beq.n	80178c0 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	4618      	mov	r0, r3
 80178b0:	f006 fb3c 	bl	801df2c <UTIL_TIMER_GetElapsedTime>
 80178b4:	4602      	mov	r2, r0
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	68db      	ldr	r3, [r3, #12]
 80178ba:	441a      	add	r2, r3
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	68da      	ldr	r2, [r3, #12]
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	691b      	ldr	r3, [r3, #16]
 80178c8:	429a      	cmp	r2, r3
 80178ca:	d903      	bls.n	80178d4 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	691a      	ldr	r2, [r3, #16]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	6a3a      	ldr	r2, [r7, #32]
 80178d8:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80178da:	89fb      	ldrh	r3, [r7, #14]
}
 80178dc:	4618      	mov	r0, r3
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}

080178e4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80178e4:	b480      	push	{r7}
 80178e6:	b085      	sub	sp, #20
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	4603      	mov	r3, r0
 80178ec:	460a      	mov	r2, r1
 80178ee:	80fb      	strh	r3, [r7, #6]
 80178f0:	4613      	mov	r3, r2
 80178f2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80178f4:	2300      	movs	r3, #0
 80178f6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80178f8:	2300      	movs	r3, #0
 80178fa:	73bb      	strb	r3, [r7, #14]
 80178fc:	e011      	b.n	8017922 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80178fe:	88fa      	ldrh	r2, [r7, #6]
 8017900:	7bbb      	ldrb	r3, [r7, #14]
 8017902:	2101      	movs	r1, #1
 8017904:	fa01 f303 	lsl.w	r3, r1, r3
 8017908:	401a      	ands	r2, r3
 801790a:	7bbb      	ldrb	r3, [r7, #14]
 801790c:	2101      	movs	r1, #1
 801790e:	fa01 f303 	lsl.w	r3, r1, r3
 8017912:	429a      	cmp	r2, r3
 8017914:	d102      	bne.n	801791c <CountChannels+0x38>
        {
            nbActiveBits++;
 8017916:	7bfb      	ldrb	r3, [r7, #15]
 8017918:	3301      	adds	r3, #1
 801791a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801791c:	7bbb      	ldrb	r3, [r7, #14]
 801791e:	3301      	adds	r3, #1
 8017920:	73bb      	strb	r3, [r7, #14]
 8017922:	7bba      	ldrb	r2, [r7, #14]
 8017924:	797b      	ldrb	r3, [r7, #5]
 8017926:	429a      	cmp	r2, r3
 8017928:	d3e9      	bcc.n	80178fe <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801792a:	7bfb      	ldrb	r3, [r7, #15]
}
 801792c:	4618      	mov	r0, r3
 801792e:	3714      	adds	r7, #20
 8017930:	46bd      	mov	sp, r7
 8017932:	bc80      	pop	{r7}
 8017934:	4770      	bx	lr

08017936 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017936:	b580      	push	{r7, lr}
 8017938:	b084      	sub	sp, #16
 801793a:	af00      	add	r7, sp, #0
 801793c:	6039      	str	r1, [r7, #0]
 801793e:	4611      	mov	r1, r2
 8017940:	461a      	mov	r2, r3
 8017942:	4603      	mov	r3, r0
 8017944:	71fb      	strb	r3, [r7, #7]
 8017946:	460b      	mov	r3, r1
 8017948:	71bb      	strb	r3, [r7, #6]
 801794a:	4613      	mov	r3, r2
 801794c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801794e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017952:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017956:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801795a:	4618      	mov	r0, r3
 801795c:	f000 f85d 	bl	8017a1a <RegionCommonValueInRange>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	d101      	bne.n	801796a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017966:	2300      	movs	r3, #0
 8017968:	e053      	b.n	8017a12 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801796a:	2300      	movs	r3, #0
 801796c:	73fb      	strb	r3, [r7, #15]
 801796e:	2300      	movs	r3, #0
 8017970:	73bb      	strb	r3, [r7, #14]
 8017972:	e049      	b.n	8017a08 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017974:	2300      	movs	r3, #0
 8017976:	737b      	strb	r3, [r7, #13]
 8017978:	e03d      	b.n	80179f6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801797a:	7bbb      	ldrb	r3, [r7, #14]
 801797c:	005b      	lsls	r3, r3, #1
 801797e:	683a      	ldr	r2, [r7, #0]
 8017980:	4413      	add	r3, r2
 8017982:	881b      	ldrh	r3, [r3, #0]
 8017984:	461a      	mov	r2, r3
 8017986:	7b7b      	ldrb	r3, [r7, #13]
 8017988:	fa42 f303 	asr.w	r3, r2, r3
 801798c:	f003 0301 	and.w	r3, r3, #1
 8017990:	2b00      	cmp	r3, #0
 8017992:	d02d      	beq.n	80179f0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017994:	7bfa      	ldrb	r2, [r7, #15]
 8017996:	7b7b      	ldrb	r3, [r7, #13]
 8017998:	4413      	add	r3, r2
 801799a:	461a      	mov	r2, r3
 801799c:	4613      	mov	r3, r2
 801799e:	005b      	lsls	r3, r3, #1
 80179a0:	4413      	add	r3, r2
 80179a2:	009b      	lsls	r3, r3, #2
 80179a4:	461a      	mov	r2, r3
 80179a6:	69fb      	ldr	r3, [r7, #28]
 80179a8:	4413      	add	r3, r2
 80179aa:	7a1b      	ldrb	r3, [r3, #8]
 80179ac:	f343 0303 	sbfx	r3, r3, #0, #4
 80179b0:	b25b      	sxtb	r3, r3
 80179b2:	f003 030f 	and.w	r3, r3, #15
 80179b6:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80179b8:	7bfa      	ldrb	r2, [r7, #15]
 80179ba:	7b7b      	ldrb	r3, [r7, #13]
 80179bc:	4413      	add	r3, r2
 80179be:	461a      	mov	r2, r3
 80179c0:	4613      	mov	r3, r2
 80179c2:	005b      	lsls	r3, r3, #1
 80179c4:	4413      	add	r3, r2
 80179c6:	009b      	lsls	r3, r3, #2
 80179c8:	461a      	mov	r2, r3
 80179ca:	69fb      	ldr	r3, [r7, #28]
 80179cc:	4413      	add	r3, r2
 80179ce:	7a1b      	ldrb	r3, [r3, #8]
 80179d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80179d4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80179d6:	f003 030f 	and.w	r3, r3, #15
 80179da:	b25a      	sxtb	r2, r3
 80179dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80179e0:	4618      	mov	r0, r3
 80179e2:	f000 f81a 	bl	8017a1a <RegionCommonValueInRange>
 80179e6:	4603      	mov	r3, r0
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d101      	bne.n	80179f0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80179ec:	2301      	movs	r3, #1
 80179ee:	e010      	b.n	8017a12 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80179f0:	7b7b      	ldrb	r3, [r7, #13]
 80179f2:	3301      	adds	r3, #1
 80179f4:	737b      	strb	r3, [r7, #13]
 80179f6:	7b7b      	ldrb	r3, [r7, #13]
 80179f8:	2b0f      	cmp	r3, #15
 80179fa:	d9be      	bls.n	801797a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80179fc:	7bfb      	ldrb	r3, [r7, #15]
 80179fe:	3310      	adds	r3, #16
 8017a00:	73fb      	strb	r3, [r7, #15]
 8017a02:	7bbb      	ldrb	r3, [r7, #14]
 8017a04:	3301      	adds	r3, #1
 8017a06:	73bb      	strb	r3, [r7, #14]
 8017a08:	7bfa      	ldrb	r2, [r7, #15]
 8017a0a:	79fb      	ldrb	r3, [r7, #7]
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d3b1      	bcc.n	8017974 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017a10:	2300      	movs	r3, #0
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3710      	adds	r7, #16
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}

08017a1a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017a1a:	b480      	push	{r7}
 8017a1c:	b083      	sub	sp, #12
 8017a1e:	af00      	add	r7, sp, #0
 8017a20:	4603      	mov	r3, r0
 8017a22:	71fb      	strb	r3, [r7, #7]
 8017a24:	460b      	mov	r3, r1
 8017a26:	71bb      	strb	r3, [r7, #6]
 8017a28:	4613      	mov	r3, r2
 8017a2a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017a2c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017a30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a34:	429a      	cmp	r2, r3
 8017a36:	db07      	blt.n	8017a48 <RegionCommonValueInRange+0x2e>
 8017a38:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017a3c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017a40:	429a      	cmp	r2, r3
 8017a42:	dc01      	bgt.n	8017a48 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017a44:	2301      	movs	r3, #1
 8017a46:	e000      	b.n	8017a4a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017a48:	2300      	movs	r3, #0
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	370c      	adds	r7, #12
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bc80      	pop	{r7}
 8017a52:	4770      	bx	lr

08017a54 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017a54:	b480      	push	{r7}
 8017a56:	b085      	sub	sp, #20
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
 8017a5c:	460b      	mov	r3, r1
 8017a5e:	70fb      	strb	r3, [r7, #3]
 8017a60:	4613      	mov	r3, r2
 8017a62:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017a64:	78fb      	ldrb	r3, [r7, #3]
 8017a66:	091b      	lsrs	r3, r3, #4
 8017a68:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017a6a:	78bb      	ldrb	r3, [r7, #2]
 8017a6c:	091b      	lsrs	r3, r3, #4
 8017a6e:	b2db      	uxtb	r3, r3
 8017a70:	7bfa      	ldrb	r2, [r7, #15]
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d803      	bhi.n	8017a7e <RegionCommonChanDisable+0x2a>
 8017a76:	78fa      	ldrb	r2, [r7, #3]
 8017a78:	78bb      	ldrb	r3, [r7, #2]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d301      	bcc.n	8017a82 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	e017      	b.n	8017ab2 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017a82:	7bfb      	ldrb	r3, [r7, #15]
 8017a84:	005b      	lsls	r3, r3, #1
 8017a86:	687a      	ldr	r2, [r7, #4]
 8017a88:	4413      	add	r3, r2
 8017a8a:	881b      	ldrh	r3, [r3, #0]
 8017a8c:	b21a      	sxth	r2, r3
 8017a8e:	78fb      	ldrb	r3, [r7, #3]
 8017a90:	f003 030f 	and.w	r3, r3, #15
 8017a94:	2101      	movs	r1, #1
 8017a96:	fa01 f303 	lsl.w	r3, r1, r3
 8017a9a:	b21b      	sxth	r3, r3
 8017a9c:	43db      	mvns	r3, r3
 8017a9e:	b21b      	sxth	r3, r3
 8017aa0:	4013      	ands	r3, r2
 8017aa2:	b219      	sxth	r1, r3
 8017aa4:	7bfb      	ldrb	r3, [r7, #15]
 8017aa6:	005b      	lsls	r3, r3, #1
 8017aa8:	687a      	ldr	r2, [r7, #4]
 8017aaa:	4413      	add	r3, r2
 8017aac:	b28a      	uxth	r2, r1
 8017aae:	801a      	strh	r2, [r3, #0]

    return true;
 8017ab0:	2301      	movs	r3, #1
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3714      	adds	r7, #20
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bc80      	pop	{r7}
 8017aba:	4770      	bx	lr

08017abc <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	460b      	mov	r3, r1
 8017ac6:	70fb      	strb	r3, [r7, #3]
 8017ac8:	4613      	mov	r3, r2
 8017aca:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017acc:	2300      	movs	r3, #0
 8017ace:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d101      	bne.n	8017ada <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	e018      	b.n	8017b0c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017ada:	78fb      	ldrb	r3, [r7, #3]
 8017adc:	73bb      	strb	r3, [r7, #14]
 8017ade:	e010      	b.n	8017b02 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017ae0:	7bbb      	ldrb	r3, [r7, #14]
 8017ae2:	005b      	lsls	r3, r3, #1
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	4413      	add	r3, r2
 8017ae8:	881b      	ldrh	r3, [r3, #0]
 8017aea:	2110      	movs	r1, #16
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7ff fef9 	bl	80178e4 <CountChannels>
 8017af2:	4603      	mov	r3, r0
 8017af4:	461a      	mov	r2, r3
 8017af6:	7bfb      	ldrb	r3, [r7, #15]
 8017af8:	4413      	add	r3, r2
 8017afa:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017afc:	7bbb      	ldrb	r3, [r7, #14]
 8017afe:	3301      	adds	r3, #1
 8017b00:	73bb      	strb	r3, [r7, #14]
 8017b02:	7bba      	ldrb	r2, [r7, #14]
 8017b04:	78bb      	ldrb	r3, [r7, #2]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d3ea      	bcc.n	8017ae0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b0c:	4618      	mov	r0, r3
 8017b0e:	3710      	adds	r7, #16
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017b14:	b480      	push	{r7}
 8017b16:	b087      	sub	sp, #28
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	4613      	mov	r3, r2
 8017b20:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d016      	beq.n	8017b56 <RegionCommonChanMaskCopy+0x42>
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d013      	beq.n	8017b56 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017b2e:	2300      	movs	r3, #0
 8017b30:	75fb      	strb	r3, [r7, #23]
 8017b32:	e00c      	b.n	8017b4e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017b34:	7dfb      	ldrb	r3, [r7, #23]
 8017b36:	005b      	lsls	r3, r3, #1
 8017b38:	68ba      	ldr	r2, [r7, #8]
 8017b3a:	441a      	add	r2, r3
 8017b3c:	7dfb      	ldrb	r3, [r7, #23]
 8017b3e:	005b      	lsls	r3, r3, #1
 8017b40:	68f9      	ldr	r1, [r7, #12]
 8017b42:	440b      	add	r3, r1
 8017b44:	8812      	ldrh	r2, [r2, #0]
 8017b46:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017b48:	7dfb      	ldrb	r3, [r7, #23]
 8017b4a:	3301      	adds	r3, #1
 8017b4c:	75fb      	strb	r3, [r7, #23]
 8017b4e:	7dfa      	ldrb	r2, [r7, #23]
 8017b50:	79fb      	ldrb	r3, [r7, #7]
 8017b52:	429a      	cmp	r2, r3
 8017b54:	d3ee      	bcc.n	8017b34 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017b56:	bf00      	nop
 8017b58:	371c      	adds	r7, #28
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bc80      	pop	{r7}
 8017b5e:	4770      	bx	lr

08017b60 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017b60:	b082      	sub	sp, #8
 8017b62:	b580      	push	{r7, lr}
 8017b64:	b086      	sub	sp, #24
 8017b66:	af00      	add	r7, sp, #0
 8017b68:	60f8      	str	r0, [r7, #12]
 8017b6a:	60b9      	str	r1, [r7, #8]
 8017b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8017b6e:	4613      	mov	r3, r2
 8017b70:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017b72:	79f9      	ldrb	r1, [r7, #7]
 8017b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017b78:	cb0c      	ldmia	r3, {r2, r3}
 8017b7a:	68f8      	ldr	r0, [r7, #12]
 8017b7c:	f7ff fd8c 	bl	8017698 <GetDutyCycle>
 8017b80:	4603      	mov	r3, r0
 8017b82:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	68da      	ldr	r2, [r3, #12]
 8017b88:	8afb      	ldrh	r3, [r7, #22]
 8017b8a:	68b9      	ldr	r1, [r7, #8]
 8017b8c:	fb01 f303 	mul.w	r3, r1, r3
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d909      	bls.n	8017ba8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	68da      	ldr	r2, [r3, #12]
 8017b98:	8afb      	ldrh	r3, [r7, #22]
 8017b9a:	68b9      	ldr	r1, [r7, #8]
 8017b9c:	fb01 f303 	mul.w	r3, r1, r3
 8017ba0:	1ad2      	subs	r2, r2, r3
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017ba6:	e002      	b.n	8017bae <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	2200      	movs	r2, #0
 8017bac:	60da      	str	r2, [r3, #12]
}
 8017bae:	bf00      	nop
 8017bb0:	3718      	adds	r7, #24
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017bb8:	b002      	add	sp, #8
 8017bba:	4770      	bx	lr

08017bbc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bbe:	b08f      	sub	sp, #60	; 0x3c
 8017bc0:	af04      	add	r7, sp, #16
 8017bc2:	6039      	str	r1, [r7, #0]
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	4603      	mov	r3, r0
 8017bca:	71fb      	strb	r3, [r7, #7]
 8017bcc:	460b      	mov	r3, r1
 8017bce:	71bb      	strb	r3, [r7, #6]
 8017bd0:	4613      	mov	r3, r2
 8017bd2:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8017bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bd8:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017bda:	f006 f995 	bl	801df08 <UTIL_TIMER_GetCurrentTime>
 8017bde:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8017be0:	2300      	movs	r3, #0
 8017be2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8017be4:	2301      	movs	r3, #1
 8017be6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8017be8:	2300      	movs	r3, #0
 8017bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017bee:	2300      	movs	r3, #0
 8017bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017bf4:	e0ba      	b.n	8017d6c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017bf6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017bfa:	4613      	mov	r3, r2
 8017bfc:	005b      	lsls	r3, r3, #1
 8017bfe:	4413      	add	r3, r2
 8017c00:	00db      	lsls	r3, r3, #3
 8017c02:	461a      	mov	r2, r3
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	189c      	adds	r4, r3, r2
 8017c08:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8017c0c:	797a      	ldrb	r2, [r7, #5]
 8017c0e:	79fd      	ldrb	r5, [r7, #7]
 8017c10:	69fb      	ldr	r3, [r7, #28]
 8017c12:	9302      	str	r3, [sp, #8]
 8017c14:	46ec      	mov	ip, sp
 8017c16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c1e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017c22:	4633      	mov	r3, r6
 8017c24:	4629      	mov	r1, r5
 8017c26:	4620      	mov	r0, r4
 8017c28:	f7ff fe22 	bl	8017870 <UpdateTimeCredits>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017c30:	8afa      	ldrh	r2, [r7, #22]
 8017c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c34:	fb02 f303 	mul.w	r3, r2, r3
 8017c38:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017c3a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c3e:	4613      	mov	r3, r2
 8017c40:	005b      	lsls	r3, r3, #1
 8017c42:	4413      	add	r3, r2
 8017c44:	00db      	lsls	r3, r3, #3
 8017c46:	461a      	mov	r2, r3
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	4413      	add	r3, r2
 8017c4c:	68db      	ldr	r3, [r3, #12]
 8017c4e:	69ba      	ldr	r2, [r7, #24]
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d908      	bls.n	8017c66 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017c54:	797b      	ldrb	r3, [r7, #5]
 8017c56:	f083 0301 	eor.w	r3, r3, #1
 8017c5a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d013      	beq.n	8017c88 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017c60:	79fb      	ldrb	r3, [r7, #7]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d010      	beq.n	8017c88 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8017c66:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c6a:	4613      	mov	r3, r2
 8017c6c:	005b      	lsls	r3, r3, #1
 8017c6e:	4413      	add	r3, r2
 8017c70:	00db      	lsls	r3, r3, #3
 8017c72:	461a      	mov	r2, r3
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	4413      	add	r3, r2
 8017c78:	2201      	movs	r2, #1
 8017c7a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017c80:	3301      	adds	r3, #1
 8017c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8017c86:	e06c      	b.n	8017d62 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017c88:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017c8c:	4613      	mov	r3, r2
 8017c8e:	005b      	lsls	r3, r3, #1
 8017c90:	4413      	add	r3, r2
 8017c92:	00db      	lsls	r3, r3, #3
 8017c94:	461a      	mov	r2, r3
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	4413      	add	r3, r2
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8017c9e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017ca2:	4613      	mov	r3, r2
 8017ca4:	005b      	lsls	r3, r3, #1
 8017ca6:	4413      	add	r3, r2
 8017ca8:	00db      	lsls	r3, r3, #3
 8017caa:	461a      	mov	r2, r3
 8017cac:	683b      	ldr	r3, [r7, #0]
 8017cae:	4413      	add	r3, r2
 8017cb0:	691b      	ldr	r3, [r3, #16]
 8017cb2:	69ba      	ldr	r2, [r7, #24]
 8017cb4:	429a      	cmp	r2, r3
 8017cb6:	d815      	bhi.n	8017ce4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017cb8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	005b      	lsls	r3, r3, #1
 8017cc0:	4413      	add	r3, r2
 8017cc2:	00db      	lsls	r3, r3, #3
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	4413      	add	r3, r2
 8017cca:	68db      	ldr	r3, [r3, #12]
 8017ccc:	69ba      	ldr	r2, [r7, #24]
 8017cce:	1ad3      	subs	r3, r2, r3
 8017cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	bf28      	it	cs
 8017cd6:	4613      	movcs	r3, r2
 8017cd8:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cde:	3301      	adds	r3, #1
 8017ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8017ce4:	79fb      	ldrb	r3, [r7, #7]
 8017ce6:	f083 0301 	eor.w	r3, r3, #1
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d038      	beq.n	8017d62 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	60fb      	str	r3, [r7, #12]
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017cf8:	8afb      	ldrh	r3, [r7, #22]
 8017cfa:	2b64      	cmp	r3, #100	; 0x64
 8017cfc:	d103      	bne.n	8017d06 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017cfe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8017d02:	60fb      	str	r3, [r7, #12]
 8017d04:	e009      	b.n	8017d1a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017d06:	8afb      	ldrh	r3, [r7, #22]
 8017d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017d0c:	d103      	bne.n	8017d16 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017d0e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8017d12:	60fb      	str	r3, [r7, #12]
 8017d14:	e001      	b.n	8017d1a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017d16:	4b1e      	ldr	r3, [pc, #120]	; (8017d90 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017d18:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d1c:	4a1c      	ldr	r2, [pc, #112]	; (8017d90 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017d1e:	4293      	cmp	r3, r2
 8017d20:	d90e      	bls.n	8017d40 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017d22:	68fa      	ldr	r2, [r7, #12]
 8017d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d26:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017d2a:	3b30      	subs	r3, #48	; 0x30
 8017d2c:	4919      	ldr	r1, [pc, #100]	; (8017d94 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017d2e:	fba1 1303 	umull	r1, r3, r1, r3
 8017d32:	0c1b      	lsrs	r3, r3, #16
 8017d34:	3301      	adds	r3, #1
 8017d36:	4918      	ldr	r1, [pc, #96]	; (8017d98 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8017d38:	fb01 f303 	mul.w	r3, r1, r3
 8017d3c:	4413      	add	r3, r2
 8017d3e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017d40:	f107 000c 	add.w	r0, r7, #12
 8017d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d46:	9300      	str	r3, [sp, #0]
 8017d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d4a:	f107 020c 	add.w	r2, r7, #12
 8017d4e:	ca06      	ldmia	r2, {r1, r2}
 8017d50:	f005 f9f1 	bl	801d136 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017d54:	f107 030c 	add.w	r3, r7, #12
 8017d58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017d5c:	f005 faaa 	bl	801d2b4 <SysTimeToMs>
 8017d60:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017d62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d66:	3301      	adds	r3, #1
 8017d68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017d6c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017d70:	79bb      	ldrb	r3, [r7, #6]
 8017d72:	429a      	cmp	r2, r3
 8017d74:	f4ff af3f 	bcc.w	8017bf6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8017d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d102      	bne.n	8017d86 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017d80:	f04f 33ff 	mov.w	r3, #4294967295
 8017d84:	e000      	b.n	8017d88 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8017d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	372c      	adds	r7, #44	; 0x2c
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d90:	0001ec30 	.word	0x0001ec30
 8017d94:	c22e4507 	.word	0xc22e4507
 8017d98:	00015180 	.word	0x00015180

08017d9c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017d9c:	b480      	push	{r7}
 8017d9e:	b085      	sub	sp, #20
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017da6:	2300      	movs	r3, #0
 8017da8:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	2b03      	cmp	r3, #3
 8017db0:	d13f      	bne.n	8017e32 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	3301      	adds	r3, #1
 8017db6:	781b      	ldrb	r3, [r3, #0]
 8017db8:	b25a      	sxtb	r2, r3
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017dbe:	683b      	ldr	r3, [r7, #0]
 8017dc0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dc4:	f003 030f 	and.w	r3, r3, #15
 8017dc8:	b25a      	sxtb	r2, r3
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017dd4:	b2db      	uxtb	r3, r3
 8017dd6:	091b      	lsrs	r3, r3, #4
 8017dd8:	b2db      	uxtb	r3, r3
 8017dda:	b25a      	sxtb	r2, r3
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	3302      	adds	r3, #2
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	b29a      	uxth	r2, r3
 8017de8:	683b      	ldr	r3, [r7, #0]
 8017dea:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	889b      	ldrh	r3, [r3, #4]
 8017df0:	b21a      	sxth	r2, r3
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	3303      	adds	r3, #3
 8017df6:	781b      	ldrb	r3, [r3, #0]
 8017df8:	021b      	lsls	r3, r3, #8
 8017dfa:	b21b      	sxth	r3, r3
 8017dfc:	4313      	orrs	r3, r2
 8017dfe:	b21b      	sxth	r3, r3
 8017e00:	b29a      	uxth	r2, r3
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	791a      	ldrb	r2, [r3, #4]
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	781b      	ldrb	r3, [r3, #0]
 8017e12:	091b      	lsrs	r3, r3, #4
 8017e14:	b2db      	uxtb	r3, r3
 8017e16:	f003 0307 	and.w	r3, r3, #7
 8017e1a:	b2da      	uxtb	r2, r3
 8017e1c:	683b      	ldr	r3, [r7, #0]
 8017e1e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	f003 030f 	and.w	r3, r3, #15
 8017e28:	b2da      	uxtb	r2, r3
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017e2e:	2305      	movs	r3, #5
 8017e30:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3714      	adds	r7, #20
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bc80      	pop	{r7}
 8017e3c:	4770      	bx	lr

08017e3e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017e3e:	b5b0      	push	{r4, r5, r7, lr}
 8017e40:	b088      	sub	sp, #32
 8017e42:	af02      	add	r7, sp, #8
 8017e44:	60f8      	str	r0, [r7, #12]
 8017e46:	60b9      	str	r1, [r7, #8]
 8017e48:	607a      	str	r2, [r7, #4]
 8017e4a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	791b      	ldrb	r3, [r3, #4]
 8017e50:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	799b      	ldrb	r3, [r3, #6]
 8017e56:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	79db      	ldrb	r3, [r3, #7]
 8017e5c:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	7a1b      	ldrb	r3, [r3, #8]
 8017e62:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017e64:	68fb      	ldr	r3, [r7, #12]
 8017e66:	795b      	ldrb	r3, [r3, #5]
 8017e68:	f083 0301 	eor.w	r3, r3, #1
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d008      	beq.n	8017e84 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	7adb      	ldrb	r3, [r3, #11]
 8017e76:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	7a5b      	ldrb	r3, [r3, #9]
 8017e7c:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	7a9b      	ldrb	r3, [r3, #10]
 8017e82:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017e84:	7dfb      	ldrb	r3, [r7, #23]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d04a      	beq.n	8017f20 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8017e8a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8017e8e:	2b0f      	cmp	r3, #15
 8017e90:	d103      	bne.n	8017e9a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	7a5b      	ldrb	r3, [r3, #9]
 8017e96:	75bb      	strb	r3, [r7, #22]
 8017e98:	e01d      	b.n	8017ed6 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	7b18      	ldrb	r0, [r3, #12]
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	6919      	ldr	r1, [r3, #16]
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8017eae:	68fa      	ldr	r2, [r7, #12]
 8017eb0:	6992      	ldr	r2, [r2, #24]
 8017eb2:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8017eb6:	9201      	str	r2, [sp, #4]
 8017eb8:	9300      	str	r3, [sp, #0]
 8017eba:	462b      	mov	r3, r5
 8017ebc:	4622      	mov	r2, r4
 8017ebe:	f7ff fd3a 	bl	8017936 <RegionCommonChanVerifyDr>
 8017ec2:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017ec4:	f083 0301 	eor.w	r3, r3, #1
 8017ec8:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d003      	beq.n	8017ed6 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8017ece:	7dfb      	ldrb	r3, [r7, #23]
 8017ed0:	f023 0302 	bic.w	r3, r3, #2
 8017ed4:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8017ed6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017eda:	2b0f      	cmp	r3, #15
 8017edc:	d103      	bne.n	8017ee6 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	7a9b      	ldrb	r3, [r3, #10]
 8017ee2:	757b      	strb	r3, [r7, #21]
 8017ee4:	e01c      	b.n	8017f20 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017ee6:	68fb      	ldr	r3, [r7, #12]
 8017ee8:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017ef2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7ff fd8f 	bl	8017a1a <RegionCommonValueInRange>
 8017efc:	4603      	mov	r3, r0
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	d10e      	bne.n	8017f20 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017f08:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017f0c:	429a      	cmp	r2, r3
 8017f0e:	da03      	bge.n	8017f18 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	7f5b      	ldrb	r3, [r3, #29]
 8017f14:	757b      	strb	r3, [r7, #21]
 8017f16:	e003      	b.n	8017f20 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017f18:	7dfb      	ldrb	r3, [r7, #23]
 8017f1a:	f023 0304 	bic.w	r3, r3, #4
 8017f1e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017f20:	7dfb      	ldrb	r3, [r7, #23]
 8017f22:	2b07      	cmp	r3, #7
 8017f24:	d105      	bne.n	8017f32 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017f26:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d101      	bne.n	8017f32 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017f2e:	2301      	movs	r3, #1
 8017f30:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017f32:	68bb      	ldr	r3, [r7, #8]
 8017f34:	7dba      	ldrb	r2, [r7, #22]
 8017f36:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	7d7a      	ldrb	r2, [r7, #21]
 8017f3c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017f3e:	7d3a      	ldrb	r2, [r7, #20]
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	701a      	strb	r2, [r3, #0]

    return status;
 8017f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3718      	adds	r7, #24
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017f50 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017f50:	b480      	push	{r7}
 8017f52:	b083      	sub	sp, #12
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	4603      	mov	r3, r0
 8017f58:	6039      	str	r1, [r7, #0]
 8017f5a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017f5c:	79fb      	ldrb	r3, [r7, #7]
 8017f5e:	4a06      	ldr	r2, [pc, #24]	; (8017f78 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017f60:	fa02 f303 	lsl.w	r3, r2, r3
 8017f64:	461a      	mov	r2, r3
 8017f66:	683b      	ldr	r3, [r7, #0]
 8017f68:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	370c      	adds	r7, #12
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bc80      	pop	{r7}
 8017f74:	4770      	bx	lr
 8017f76:	bf00      	nop
 8017f78:	000f4240 	.word	0x000f4240

08017f7c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8017f7c:	b480      	push	{r7}
 8017f7e:	b083      	sub	sp, #12
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	4603      	mov	r3, r0
 8017f84:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8017f86:	79fb      	ldrb	r3, [r7, #7]
 8017f88:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8017f8c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	370c      	adds	r7, #12
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bc80      	pop	{r7}
 8017f98:	4770      	bx	lr
	...

08017f9c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	b085      	sub	sp, #20
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	60f8      	str	r0, [r7, #12]
 8017fa4:	607a      	str	r2, [r7, #4]
 8017fa6:	603b      	str	r3, [r7, #0]
 8017fa8:	460b      	mov	r3, r1
 8017faa:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017fac:	7afa      	ldrb	r2, [r7, #11]
 8017fae:	7afb      	ldrb	r3, [r7, #11]
 8017fb0:	3b04      	subs	r3, #4
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	fb03 f101 	mul.w	r1, r3, r1
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017fc0:	fb00 f303 	mul.w	r3, r0, r3
 8017fc4:	440b      	add	r3, r1
 8017fc6:	005b      	lsls	r3, r3, #1
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d013      	beq.n	8017ff4 <RegionCommonComputeRxWindowParameters+0x58>
 8017fcc:	7afb      	ldrb	r3, [r7, #11]
 8017fce:	3b04      	subs	r3, #4
 8017fd0:	4619      	mov	r1, r3
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	fb03 f101 	mul.w	r1, r3, r1
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017fde:	fb00 f303 	mul.w	r3, r0, r3
 8017fe2:	440b      	add	r3, r1
 8017fe4:	0059      	lsls	r1, r3, #1
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	440b      	add	r3, r1
 8017fea:	1e59      	subs	r1, r3, #1
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ff2:	e00f      	b.n	8018014 <RegionCommonComputeRxWindowParameters+0x78>
 8017ff4:	7afb      	ldrb	r3, [r7, #11]
 8017ff6:	3b04      	subs	r3, #4
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	fb03 f101 	mul.w	r1, r3, r1
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018006:	fb00 f303 	mul.w	r3, r0, r3
 801800a:	440b      	add	r3, r1
 801800c:	0059      	lsls	r1, r3, #1
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	fbb1 f3f3 	udiv	r3, r1, r3
 8018014:	429a      	cmp	r2, r3
 8018016:	bf38      	it	cc
 8018018:	461a      	movcc	r2, r3
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	009b      	lsls	r3, r3, #2
 8018022:	4619      	mov	r1, r3
 8018024:	69bb      	ldr	r3, [r7, #24]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	68fa      	ldr	r2, [r7, #12]
 801802a:	fb02 f303 	mul.w	r3, r2, r3
 801802e:	2b00      	cmp	r3, #0
 8018030:	d007      	beq.n	8018042 <RegionCommonComputeRxWindowParameters+0xa6>
 8018032:	69bb      	ldr	r3, [r7, #24]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	68fa      	ldr	r2, [r7, #12]
 8018038:	fb02 f303 	mul.w	r3, r2, r3
 801803c:	3301      	adds	r3, #1
 801803e:	085b      	lsrs	r3, r3, #1
 8018040:	e005      	b.n	801804e <RegionCommonComputeRxWindowParameters+0xb2>
 8018042:	69bb      	ldr	r3, [r7, #24]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	68fa      	ldr	r2, [r7, #12]
 8018048:	fb02 f303 	mul.w	r3, r2, r3
 801804c:	085b      	lsrs	r3, r3, #1
 801804e:	1acb      	subs	r3, r1, r3
 8018050:	683a      	ldr	r2, [r7, #0]
 8018052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018056:	fb01 f202 	mul.w	r2, r1, r2
 801805a:	1a9b      	subs	r3, r3, r2
 801805c:	2b00      	cmp	r3, #0
 801805e:	dd27      	ble.n	80180b0 <RegionCommonComputeRxWindowParameters+0x114>
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	009b      	lsls	r3, r3, #2
 8018064:	4619      	mov	r1, r3
 8018066:	69bb      	ldr	r3, [r7, #24]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	68fa      	ldr	r2, [r7, #12]
 801806c:	fb02 f303 	mul.w	r3, r2, r3
 8018070:	2b00      	cmp	r3, #0
 8018072:	d007      	beq.n	8018084 <RegionCommonComputeRxWindowParameters+0xe8>
 8018074:	69bb      	ldr	r3, [r7, #24]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	68fa      	ldr	r2, [r7, #12]
 801807a:	fb02 f303 	mul.w	r3, r2, r3
 801807e:	3301      	adds	r3, #1
 8018080:	085b      	lsrs	r3, r3, #1
 8018082:	e005      	b.n	8018090 <RegionCommonComputeRxWindowParameters+0xf4>
 8018084:	69bb      	ldr	r3, [r7, #24]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	68fa      	ldr	r2, [r7, #12]
 801808a:	fb02 f303 	mul.w	r3, r2, r3
 801808e:	085b      	lsrs	r3, r3, #1
 8018090:	1acb      	subs	r3, r1, r3
 8018092:	683a      	ldr	r2, [r7, #0]
 8018094:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018098:	fb01 f202 	mul.w	r2, r1, r2
 801809c:	1a9b      	subs	r3, r3, r2
 801809e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80180a2:	4a19      	ldr	r2, [pc, #100]	; (8018108 <RegionCommonComputeRxWindowParameters+0x16c>)
 80180a4:	fb82 1203 	smull	r1, r2, r2, r3
 80180a8:	1192      	asrs	r2, r2, #6
 80180aa:	17db      	asrs	r3, r3, #31
 80180ac:	1ad3      	subs	r3, r2, r3
 80180ae:	e024      	b.n	80180fa <RegionCommonComputeRxWindowParameters+0x15e>
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	009b      	lsls	r3, r3, #2
 80180b4:	4619      	mov	r1, r3
 80180b6:	69bb      	ldr	r3, [r7, #24]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	68fa      	ldr	r2, [r7, #12]
 80180bc:	fb02 f303 	mul.w	r3, r2, r3
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d007      	beq.n	80180d4 <RegionCommonComputeRxWindowParameters+0x138>
 80180c4:	69bb      	ldr	r3, [r7, #24]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	68fa      	ldr	r2, [r7, #12]
 80180ca:	fb02 f303 	mul.w	r3, r2, r3
 80180ce:	3301      	adds	r3, #1
 80180d0:	085b      	lsrs	r3, r3, #1
 80180d2:	e005      	b.n	80180e0 <RegionCommonComputeRxWindowParameters+0x144>
 80180d4:	69bb      	ldr	r3, [r7, #24]
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	68fa      	ldr	r2, [r7, #12]
 80180da:	fb02 f303 	mul.w	r3, r2, r3
 80180de:	085b      	lsrs	r3, r3, #1
 80180e0:	1acb      	subs	r3, r1, r3
 80180e2:	683a      	ldr	r2, [r7, #0]
 80180e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80180e8:	fb01 f202 	mul.w	r2, r1, r2
 80180ec:	1a9b      	subs	r3, r3, r2
 80180ee:	4a06      	ldr	r2, [pc, #24]	; (8018108 <RegionCommonComputeRxWindowParameters+0x16c>)
 80180f0:	fb82 1203 	smull	r1, r2, r2, r3
 80180f4:	1192      	asrs	r2, r2, #6
 80180f6:	17db      	asrs	r3, r3, #31
 80180f8:	1ad3      	subs	r3, r2, r3
 80180fa:	69fa      	ldr	r2, [r7, #28]
 80180fc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80180fe:	bf00      	nop
 8018100:	3714      	adds	r7, #20
 8018102:	46bd      	mov	sp, r7
 8018104:	bc80      	pop	{r7}
 8018106:	4770      	bx	lr
 8018108:	10624dd3 	.word	0x10624dd3

0801810c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b086      	sub	sp, #24
 8018110:	af00      	add	r7, sp, #0
 8018112:	4603      	mov	r3, r0
 8018114:	60b9      	str	r1, [r7, #8]
 8018116:	607a      	str	r2, [r7, #4]
 8018118:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801811a:	2300      	movs	r3, #0
 801811c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801811e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	4618      	mov	r0, r3
 8018126:	f7e8 fdb3 	bl	8000c90 <__aeabi_ui2f>
 801812a:	4603      	mov	r3, r0
 801812c:	4619      	mov	r1, r3
 801812e:	68b8      	ldr	r0, [r7, #8]
 8018130:	f7e8 fcfc 	bl	8000b2c <__aeabi_fsub>
 8018134:	4603      	mov	r3, r0
 8018136:	6879      	ldr	r1, [r7, #4]
 8018138:	4618      	mov	r0, r3
 801813a:	f7e8 fcf7 	bl	8000b2c <__aeabi_fsub>
 801813e:	4603      	mov	r3, r0
 8018140:	4618      	mov	r0, r3
 8018142:	f7e8 f985 	bl	8000450 <__aeabi_f2d>
 8018146:	4602      	mov	r2, r0
 8018148:	460b      	mov	r3, r1
 801814a:	4610      	mov	r0, r2
 801814c:	4619      	mov	r1, r3
 801814e:	f006 fad7 	bl	801e700 <floor>
 8018152:	4602      	mov	r2, r0
 8018154:	460b      	mov	r3, r1
 8018156:	4610      	mov	r0, r2
 8018158:	4619      	mov	r1, r3
 801815a:	f7e8 fc6b 	bl	8000a34 <__aeabi_d2iz>
 801815e:	4603      	mov	r3, r0
 8018160:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018166:	4618      	mov	r0, r3
 8018168:	3718      	adds	r7, #24
 801816a:	46bd      	mov	sp, r7
 801816c:	bd80      	pop	{r7, pc}

0801816e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801816e:	b590      	push	{r4, r7, lr}
 8018170:	b087      	sub	sp, #28
 8018172:	af00      	add	r7, sp, #0
 8018174:	60f8      	str	r0, [r7, #12]
 8018176:	60b9      	str	r1, [r7, #8]
 8018178:	607a      	str	r2, [r7, #4]
 801817a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801817c:	2300      	movs	r3, #0
 801817e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018180:	2300      	movs	r3, #0
 8018182:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018184:	2300      	movs	r3, #0
 8018186:	757b      	strb	r3, [r7, #21]
 8018188:	2300      	movs	r3, #0
 801818a:	753b      	strb	r3, [r7, #20]
 801818c:	e09c      	b.n	80182c8 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801818e:	2300      	movs	r3, #0
 8018190:	74fb      	strb	r3, [r7, #19]
 8018192:	e08f      	b.n	80182b4 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	685a      	ldr	r2, [r3, #4]
 8018198:	7d3b      	ldrb	r3, [r7, #20]
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	4413      	add	r3, r2
 801819e:	881b      	ldrh	r3, [r3, #0]
 80181a0:	461a      	mov	r2, r3
 80181a2:	7cfb      	ldrb	r3, [r7, #19]
 80181a4:	fa42 f303 	asr.w	r3, r2, r3
 80181a8:	f003 0301 	and.w	r3, r3, #1
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d07e      	beq.n	80182ae <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	689a      	ldr	r2, [r3, #8]
 80181b4:	7d79      	ldrb	r1, [r7, #21]
 80181b6:	7cfb      	ldrb	r3, [r7, #19]
 80181b8:	440b      	add	r3, r1
 80181ba:	4619      	mov	r1, r3
 80181bc:	460b      	mov	r3, r1
 80181be:	005b      	lsls	r3, r3, #1
 80181c0:	440b      	add	r3, r1
 80181c2:	009b      	lsls	r3, r3, #2
 80181c4:	4413      	add	r3, r2
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d06b      	beq.n	80182a4 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	781b      	ldrb	r3, [r3, #0]
 80181d0:	f083 0301 	eor.w	r3, r3, #1
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d011      	beq.n	80181fe <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d00d      	beq.n	80181fe <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	695a      	ldr	r2, [r3, #20]
 80181e6:	7d3b      	ldrb	r3, [r7, #20]
 80181e8:	005b      	lsls	r3, r3, #1
 80181ea:	4413      	add	r3, r2
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	461a      	mov	r2, r3
 80181f0:	7cfb      	ldrb	r3, [r7, #19]
 80181f2:	fa42 f303 	asr.w	r3, r2, r3
 80181f6:	f003 0301 	and.w	r3, r3, #1
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d054      	beq.n	80182a8 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	785b      	ldrb	r3, [r3, #1]
 8018202:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	689a      	ldr	r2, [r3, #8]
 8018208:	7d79      	ldrb	r1, [r7, #21]
 801820a:	7cfb      	ldrb	r3, [r7, #19]
 801820c:	440b      	add	r3, r1
 801820e:	4619      	mov	r1, r3
 8018210:	460b      	mov	r3, r1
 8018212:	005b      	lsls	r3, r3, #1
 8018214:	440b      	add	r3, r1
 8018216:	009b      	lsls	r3, r3, #2
 8018218:	4413      	add	r3, r2
 801821a:	7a1b      	ldrb	r3, [r3, #8]
 801821c:	f343 0303 	sbfx	r3, r3, #0, #4
 8018220:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018222:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	689a      	ldr	r2, [r3, #8]
 8018228:	7d79      	ldrb	r1, [r7, #21]
 801822a:	7cfb      	ldrb	r3, [r7, #19]
 801822c:	440b      	add	r3, r1
 801822e:	4619      	mov	r1, r3
 8018230:	460b      	mov	r3, r1
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	440b      	add	r3, r1
 8018236:	009b      	lsls	r3, r3, #2
 8018238:	4413      	add	r3, r2
 801823a:	7a1b      	ldrb	r3, [r3, #8]
 801823c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018240:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018242:	461a      	mov	r2, r3
 8018244:	4621      	mov	r1, r4
 8018246:	f7ff fbe8 	bl	8017a1a <RegionCommonValueInRange>
 801824a:	4603      	mov	r3, r0
 801824c:	2b00      	cmp	r3, #0
 801824e:	d02d      	beq.n	80182ac <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	68da      	ldr	r2, [r3, #12]
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	6899      	ldr	r1, [r3, #8]
 8018258:	7d78      	ldrb	r0, [r7, #21]
 801825a:	7cfb      	ldrb	r3, [r7, #19]
 801825c:	4403      	add	r3, r0
 801825e:	4618      	mov	r0, r3
 8018260:	4603      	mov	r3, r0
 8018262:	005b      	lsls	r3, r3, #1
 8018264:	4403      	add	r3, r0
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	440b      	add	r3, r1
 801826a:	7a5b      	ldrb	r3, [r3, #9]
 801826c:	4619      	mov	r1, r3
 801826e:	460b      	mov	r3, r1
 8018270:	005b      	lsls	r3, r3, #1
 8018272:	440b      	add	r3, r1
 8018274:	00db      	lsls	r3, r3, #3
 8018276:	4413      	add	r3, r2
 8018278:	7d1b      	ldrb	r3, [r3, #20]
 801827a:	f083 0301 	eor.w	r3, r3, #1
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b00      	cmp	r3, #0
 8018282:	d003      	beq.n	801828c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018284:	7dbb      	ldrb	r3, [r7, #22]
 8018286:	3301      	adds	r3, #1
 8018288:	75bb      	strb	r3, [r7, #22]
                    continue;
 801828a:	e010      	b.n	80182ae <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801828c:	7dfb      	ldrb	r3, [r7, #23]
 801828e:	1c5a      	adds	r2, r3, #1
 8018290:	75fa      	strb	r2, [r7, #23]
 8018292:	461a      	mov	r2, r3
 8018294:	68bb      	ldr	r3, [r7, #8]
 8018296:	4413      	add	r3, r2
 8018298:	7d79      	ldrb	r1, [r7, #21]
 801829a:	7cfa      	ldrb	r2, [r7, #19]
 801829c:	440a      	add	r2, r1
 801829e:	b2d2      	uxtb	r2, r2
 80182a0:	701a      	strb	r2, [r3, #0]
 80182a2:	e004      	b.n	80182ae <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80182a4:	bf00      	nop
 80182a6:	e002      	b.n	80182ae <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80182a8:	bf00      	nop
 80182aa:	e000      	b.n	80182ae <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80182ac:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80182ae:	7cfb      	ldrb	r3, [r7, #19]
 80182b0:	3301      	adds	r3, #1
 80182b2:	74fb      	strb	r3, [r7, #19]
 80182b4:	7cfb      	ldrb	r3, [r7, #19]
 80182b6:	2b0f      	cmp	r3, #15
 80182b8:	f67f af6c 	bls.w	8018194 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80182bc:	7d7b      	ldrb	r3, [r7, #21]
 80182be:	3310      	adds	r3, #16
 80182c0:	757b      	strb	r3, [r7, #21]
 80182c2:	7d3b      	ldrb	r3, [r7, #20]
 80182c4:	3301      	adds	r3, #1
 80182c6:	753b      	strb	r3, [r7, #20]
 80182c8:	7d7b      	ldrb	r3, [r7, #21]
 80182ca:	b29a      	uxth	r2, r3
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	8a1b      	ldrh	r3, [r3, #16]
 80182d0:	429a      	cmp	r2, r3
 80182d2:	f4ff af5c 	bcc.w	801818e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	7dfa      	ldrb	r2, [r7, #23]
 80182da:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80182dc:	683b      	ldr	r3, [r7, #0]
 80182de:	7dba      	ldrb	r2, [r7, #22]
 80182e0:	701a      	strb	r2, [r3, #0]
}
 80182e2:	bf00      	nop
 80182e4:	371c      	adds	r7, #28
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd90      	pop	{r4, r7, pc}

080182ea <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80182ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182ec:	b08b      	sub	sp, #44	; 0x2c
 80182ee:	af04      	add	r7, sp, #16
 80182f0:	60f8      	str	r0, [r7, #12]
 80182f2:	60b9      	str	r1, [r7, #8]
 80182f4:	607a      	str	r2, [r7, #4]
 80182f6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f005 fe15 	bl	801df2c <UTIL_TIMER_GetElapsedTime>
 8018302:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	681a      	ldr	r2, [r3, #0]
 8018308:	697b      	ldr	r3, [r7, #20]
 801830a:	1ad2      	subs	r2, r2, r3
 801830c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801830e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018312:	2201      	movs	r2, #1
 8018314:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	2200      	movs	r2, #0
 801831a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	685b      	ldr	r3, [r3, #4]
 8018320:	2b00      	cmp	r3, #0
 8018322:	d004      	beq.n	801832e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018328:	697a      	ldr	r2, [r7, #20]
 801832a:	429a      	cmp	r2, r3
 801832c:	d32b      	bcc.n	8018386 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	2200      	movs	r2, #0
 8018332:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	69db      	ldr	r3, [r3, #28]
 8018338:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801833e:	68dd      	ldr	r5, [r3, #12]
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	7a5e      	ldrb	r6, [r3, #9]
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	f893 c008 	ldrb.w	ip, [r3, #8]
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	7d1b      	ldrb	r3, [r3, #20]
 801834e:	68fa      	ldr	r2, [r7, #12]
 8018350:	6992      	ldr	r2, [r2, #24]
 8018352:	9203      	str	r2, [sp, #12]
 8018354:	68fa      	ldr	r2, [r7, #12]
 8018356:	f10d 0e04 	add.w	lr, sp, #4
 801835a:	320c      	adds	r2, #12
 801835c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018360:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018364:	9300      	str	r3, [sp, #0]
 8018366:	4663      	mov	r3, ip
 8018368:	4632      	mov	r2, r6
 801836a:	4629      	mov	r1, r5
 801836c:	4620      	mov	r0, r4
 801836e:	f7ff fc25 	bl	8017bbc <RegionCommonUpdateBandTimeOff>
 8018372:	4602      	mov	r2, r0
 8018374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018376:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	69d8      	ldr	r0, [r3, #28]
 801837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837e:	683a      	ldr	r2, [r7, #0]
 8018380:	6879      	ldr	r1, [r7, #4]
 8018382:	f7ff fef4 	bl	801816e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018386:	683b      	ldr	r3, [r7, #0]
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d004      	beq.n	8018398 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018390:	2200      	movs	r2, #0
 8018392:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018394:	2300      	movs	r3, #0
 8018396:	e006      	b.n	80183a6 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	2b00      	cmp	r3, #0
 801839e:	d001      	beq.n	80183a4 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80183a0:	230b      	movs	r3, #11
 80183a2:	e000      	b.n	80183a6 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80183a4:	230c      	movs	r3, #12
    }
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	371c      	adds	r7, #28
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080183ae <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80183ae:	b5b0      	push	{r4, r5, r7, lr}
 80183b0:	b086      	sub	sp, #24
 80183b2:	af02      	add	r7, sp, #8
 80183b4:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	781b      	ldrb	r3, [r3, #0]
 80183ba:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	f993 2000 	ldrsb.w	r2, [r3]
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d103      	bne.n	80183d4 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80183d2:	e026      	b.n	8018422 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80183d4:	7bfb      	ldrb	r3, [r7, #15]
 80183d6:	3b01      	subs	r3, #1
 80183d8:	b2db      	uxtb	r3, r3
 80183da:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80183e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80183e6:	429a      	cmp	r2, r3
 80183e8:	d019      	beq.n	801841e <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	78d8      	ldrb	r0, [r3, #3]
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6859      	ldr	r1, [r3, #4]
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183fe:	687a      	ldr	r2, [r7, #4]
 8018400:	6892      	ldr	r2, [r2, #8]
 8018402:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018406:	9201      	str	r2, [sp, #4]
 8018408:	9300      	str	r3, [sp, #0]
 801840a:	462b      	mov	r3, r5
 801840c:	4622      	mov	r2, r4
 801840e:	f7ff fa92 	bl	8017936 <RegionCommonChanVerifyDr>
 8018412:	4603      	mov	r3, r0
 8018414:	f083 0301 	eor.w	r3, r3, #1
 8018418:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801841a:	2b00      	cmp	r3, #0
 801841c:	d1da      	bne.n	80183d4 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801841e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018422:	4618      	mov	r0, r3
 8018424:	3710      	adds	r7, #16
 8018426:	46bd      	mov	sp, r7
 8018428:	bdb0      	pop	{r4, r5, r7, pc}

0801842a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801842a:	b480      	push	{r7}
 801842c:	b083      	sub	sp, #12
 801842e:	af00      	add	r7, sp, #0
 8018430:	4603      	mov	r3, r0
 8018432:	460a      	mov	r2, r1
 8018434:	71fb      	strb	r3, [r7, #7]
 8018436:	4613      	mov	r3, r2
 8018438:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801843a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801843e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018442:	4293      	cmp	r3, r2
 8018444:	bfb8      	it	lt
 8018446:	4613      	movlt	r3, r2
 8018448:	b25b      	sxtb	r3, r3
}
 801844a:	4618      	mov	r0, r3
 801844c:	370c      	adds	r7, #12
 801844e:	46bd      	mov	sp, r7
 8018450:	bc80      	pop	{r7}
 8018452:	4770      	bx	lr

08018454 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018454:	b480      	push	{r7}
 8018456:	b083      	sub	sp, #12
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
 801845c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	009b      	lsls	r3, r3, #2
 8018462:	683a      	ldr	r2, [r7, #0]
 8018464:	4413      	add	r3, r2
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	4a07      	ldr	r2, [pc, #28]	; (8018488 <RegionCommonGetBandwidth+0x34>)
 801846a:	4293      	cmp	r3, r2
 801846c:	d004      	beq.n	8018478 <RegionCommonGetBandwidth+0x24>
 801846e:	4a07      	ldr	r2, [pc, #28]	; (801848c <RegionCommonGetBandwidth+0x38>)
 8018470:	4293      	cmp	r3, r2
 8018472:	d003      	beq.n	801847c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018474:	2300      	movs	r3, #0
 8018476:	e002      	b.n	801847e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018478:	2301      	movs	r3, #1
 801847a:	e000      	b.n	801847e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801847c:	2302      	movs	r3, #2
    }
}
 801847e:	4618      	mov	r0, r3
 8018480:	370c      	adds	r7, #12
 8018482:	46bd      	mov	sp, r7
 8018484:	bc80      	pop	{r7}
 8018486:	4770      	bx	lr
 8018488:	0003d090 	.word	0x0003d090
 801848c:	0007a120 	.word	0x0007a120

08018490 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b086      	sub	sp, #24
 8018494:	af04      	add	r7, sp, #16
 8018496:	4603      	mov	r3, r0
 8018498:	6039      	str	r1, [r7, #0]
 801849a:	71fb      	strb	r3, [r7, #7]
 801849c:	4613      	mov	r3, r2
 801849e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80184a0:	79fb      	ldrb	r3, [r7, #7]
 80184a2:	2b05      	cmp	r3, #5
 80184a4:	d810      	bhi.n	80184c8 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80184a6:	79fb      	ldrb	r3, [r7, #7]
 80184a8:	4a0f      	ldr	r2, [pc, #60]	; (80184e8 <RegionCommonRxConfigPrint+0x58>)
 80184aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80184ae:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80184b2:	9202      	str	r2, [sp, #8]
 80184b4:	683a      	ldr	r2, [r7, #0]
 80184b6:	9201      	str	r2, [sp, #4]
 80184b8:	9300      	str	r3, [sp, #0]
 80184ba:	4b0c      	ldr	r3, [pc, #48]	; (80184ec <RegionCommonRxConfigPrint+0x5c>)
 80184bc:	2201      	movs	r2, #1
 80184be:	2100      	movs	r1, #0
 80184c0:	2002      	movs	r0, #2
 80184c2:	f005 fe11 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80184c6:	e00a      	b.n	80184de <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80184c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184cc:	9301      	str	r3, [sp, #4]
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	9300      	str	r3, [sp, #0]
 80184d2:	4b07      	ldr	r3, [pc, #28]	; (80184f0 <RegionCommonRxConfigPrint+0x60>)
 80184d4:	2201      	movs	r2, #1
 80184d6:	2100      	movs	r1, #0
 80184d8:	2002      	movs	r0, #2
 80184da:	f005 fe05 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 80184de:	bf00      	nop
 80184e0:	3708      	adds	r7, #8
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}
 80184e6:	bf00      	nop
 80184e8:	20000130 	.word	0x20000130
 80184ec:	0801ef18 	.word	0x0801ef18
 80184f0:	0801ef38 	.word	0x0801ef38

080184f4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b084      	sub	sp, #16
 80184f8:	af02      	add	r7, sp, #8
 80184fa:	6078      	str	r0, [r7, #4]
 80184fc:	460b      	mov	r3, r1
 80184fe:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018504:	9301      	str	r3, [sp, #4]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	9300      	str	r3, [sp, #0]
 801850a:	4b05      	ldr	r3, [pc, #20]	; (8018520 <RegionCommonTxConfigPrint+0x2c>)
 801850c:	2201      	movs	r2, #1
 801850e:	2100      	movs	r1, #0
 8018510:	2002      	movs	r0, #2
 8018512:	f005 fde9 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
}
 8018516:	bf00      	nop
 8018518:	3708      	adds	r7, #8
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}
 801851e:	bf00      	nop
 8018520:	0801ef54 	.word	0x0801ef54

08018524 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b082      	sub	sp, #8
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
 801852c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801852e:	4b2d      	ldr	r3, [pc, #180]	; (80185e4 <VerifyRfFreq+0xc0>)
 8018530:	6a1b      	ldr	r3, [r3, #32]
 8018532:	6878      	ldr	r0, [r7, #4]
 8018534:	4798      	blx	r3
 8018536:	4603      	mov	r3, r0
 8018538:	f083 0301 	eor.w	r3, r3, #1
 801853c:	b2db      	uxtb	r3, r3
 801853e:	2b00      	cmp	r3, #0
 8018540:	d001      	beq.n	8018546 <VerifyRfFreq+0x22>
    {
        return false;
 8018542:	2300      	movs	r3, #0
 8018544:	e04a      	b.n	80185dc <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	4a27      	ldr	r2, [pc, #156]	; (80185e8 <VerifyRfFreq+0xc4>)
 801854a:	4293      	cmp	r3, r2
 801854c:	d307      	bcc.n	801855e <VerifyRfFreq+0x3a>
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	4a26      	ldr	r2, [pc, #152]	; (80185ec <VerifyRfFreq+0xc8>)
 8018552:	4293      	cmp	r3, r2
 8018554:	d803      	bhi.n	801855e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	2202      	movs	r2, #2
 801855a:	701a      	strb	r2, [r3, #0]
 801855c:	e03d      	b.n	80185da <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	4a22      	ldr	r2, [pc, #136]	; (80185ec <VerifyRfFreq+0xc8>)
 8018562:	4293      	cmp	r3, r2
 8018564:	d907      	bls.n	8018576 <VerifyRfFreq+0x52>
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	4a21      	ldr	r2, [pc, #132]	; (80185f0 <VerifyRfFreq+0xcc>)
 801856a:	4293      	cmp	r3, r2
 801856c:	d803      	bhi.n	8018576 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	2200      	movs	r2, #0
 8018572:	701a      	strb	r2, [r3, #0]
 8018574:	e031      	b.n	80185da <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	4a1d      	ldr	r2, [pc, #116]	; (80185f0 <VerifyRfFreq+0xcc>)
 801857a:	4293      	cmp	r3, r2
 801857c:	d907      	bls.n	801858e <VerifyRfFreq+0x6a>
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	4a1c      	ldr	r2, [pc, #112]	; (80185f4 <VerifyRfFreq+0xd0>)
 8018582:	4293      	cmp	r3, r2
 8018584:	d803      	bhi.n	801858e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	2201      	movs	r2, #1
 801858a:	701a      	strb	r2, [r3, #0]
 801858c:	e025      	b.n	80185da <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	4a19      	ldr	r2, [pc, #100]	; (80185f8 <VerifyRfFreq+0xd4>)
 8018592:	4293      	cmp	r3, r2
 8018594:	d907      	bls.n	80185a6 <VerifyRfFreq+0x82>
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	4a18      	ldr	r2, [pc, #96]	; (80185fc <VerifyRfFreq+0xd8>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d803      	bhi.n	80185a6 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	2205      	movs	r2, #5
 80185a2:	701a      	strb	r2, [r3, #0]
 80185a4:	e019      	b.n	80185da <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	4a15      	ldr	r2, [pc, #84]	; (8018600 <VerifyRfFreq+0xdc>)
 80185aa:	4293      	cmp	r3, r2
 80185ac:	d907      	bls.n	80185be <VerifyRfFreq+0x9a>
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	4a14      	ldr	r2, [pc, #80]	; (8018604 <VerifyRfFreq+0xe0>)
 80185b2:	4293      	cmp	r3, r2
 80185b4:	d803      	bhi.n	80185be <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	2203      	movs	r2, #3
 80185ba:	701a      	strb	r2, [r3, #0]
 80185bc:	e00d      	b.n	80185da <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	4a11      	ldr	r2, [pc, #68]	; (8018608 <VerifyRfFreq+0xe4>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d307      	bcc.n	80185d6 <VerifyRfFreq+0xb2>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	4a10      	ldr	r2, [pc, #64]	; (801860c <VerifyRfFreq+0xe8>)
 80185ca:	4293      	cmp	r3, r2
 80185cc:	d803      	bhi.n	80185d6 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	2204      	movs	r2, #4
 80185d2:	701a      	strb	r2, [r3, #0]
 80185d4:	e001      	b.n	80185da <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80185d6:	2300      	movs	r3, #0
 80185d8:	e000      	b.n	80185dc <VerifyRfFreq+0xb8>
    }
    return true;
 80185da:	2301      	movs	r3, #1
}
 80185dc:	4618      	mov	r0, r3
 80185de:	3708      	adds	r7, #8
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	0801f578 	.word	0x0801f578
 80185e8:	337055c0 	.word	0x337055c0
 80185ec:	338eda3f 	.word	0x338eda3f
 80185f0:	33bca100 	.word	0x33bca100
 80185f4:	33c5c8c0 	.word	0x33c5c8c0
 80185f8:	33c74f5f 	.word	0x33c74f5f
 80185fc:	33cef080 	.word	0x33cef080
 8018600:	33d1fdbf 	.word	0x33d1fdbf
 8018604:	33d5ce50 	.word	0x33d5ce50
 8018608:	33d691a0 	.word	0x33d691a0
 801860c:	33db2580 	.word	0x33db2580

08018610 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018610:	b590      	push	{r4, r7, lr}
 8018612:	b08b      	sub	sp, #44	; 0x2c
 8018614:	af04      	add	r7, sp, #16
 8018616:	4603      	mov	r3, r0
 8018618:	460a      	mov	r2, r1
 801861a:	71fb      	strb	r3, [r7, #7]
 801861c:	4613      	mov	r3, r2
 801861e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018624:	4a1f      	ldr	r2, [pc, #124]	; (80186a4 <GetTimeOnAir+0x94>)
 8018626:	5cd3      	ldrb	r3, [r2, r3]
 8018628:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801862e:	491e      	ldr	r1, [pc, #120]	; (80186a8 <GetTimeOnAir+0x98>)
 8018630:	4618      	mov	r0, r3
 8018632:	f7ff ff0f 	bl	8018454 <RegionCommonGetBandwidth>
 8018636:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018638:	2300      	movs	r3, #0
 801863a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801863c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018640:	2b07      	cmp	r3, #7
 8018642:	d118      	bne.n	8018676 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018644:	4b19      	ldr	r3, [pc, #100]	; (80186ac <GetTimeOnAir+0x9c>)
 8018646:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801864c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018650:	fb02 f303 	mul.w	r3, r2, r3
 8018654:	4619      	mov	r1, r3
 8018656:	88bb      	ldrh	r3, [r7, #4]
 8018658:	b2db      	uxtb	r3, r3
 801865a:	2201      	movs	r2, #1
 801865c:	9203      	str	r2, [sp, #12]
 801865e:	9302      	str	r3, [sp, #8]
 8018660:	2300      	movs	r3, #0
 8018662:	9301      	str	r3, [sp, #4]
 8018664:	2305      	movs	r3, #5
 8018666:	9300      	str	r3, [sp, #0]
 8018668:	2300      	movs	r3, #0
 801866a:	460a      	mov	r2, r1
 801866c:	68f9      	ldr	r1, [r7, #12]
 801866e:	2000      	movs	r0, #0
 8018670:	47a0      	blx	r4
 8018672:	6178      	str	r0, [r7, #20]
 8018674:	e011      	b.n	801869a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018676:	4b0d      	ldr	r3, [pc, #52]	; (80186ac <GetTimeOnAir+0x9c>)
 8018678:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801867a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801867e:	88bb      	ldrh	r3, [r7, #4]
 8018680:	b2db      	uxtb	r3, r3
 8018682:	2101      	movs	r1, #1
 8018684:	9103      	str	r1, [sp, #12]
 8018686:	9302      	str	r3, [sp, #8]
 8018688:	2300      	movs	r3, #0
 801868a:	9301      	str	r3, [sp, #4]
 801868c:	2308      	movs	r3, #8
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	2301      	movs	r3, #1
 8018692:	68f9      	ldr	r1, [r7, #12]
 8018694:	2001      	movs	r0, #1
 8018696:	47a0      	blx	r4
 8018698:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801869a:	697b      	ldr	r3, [r7, #20]
}
 801869c:	4618      	mov	r0, r3
 801869e:	371c      	adds	r7, #28
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd90      	pop	{r4, r7, pc}
 80186a4:	0801f540 	.word	0x0801f540
 80186a8:	0801f548 	.word	0x0801f548
 80186ac:	0801f578 	.word	0x0801f578

080186b0 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b088      	sub	sp, #32
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80186b8:	2300      	movs	r3, #0
 80186ba:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	781b      	ldrb	r3, [r3, #0]
 80186c0:	3b01      	subs	r3, #1
 80186c2:	2b38      	cmp	r3, #56	; 0x38
 80186c4:	f200 8128 	bhi.w	8018918 <RegionEU868GetPhyParam+0x268>
 80186c8:	a201      	add	r2, pc, #4	; (adr r2, 80186d0 <RegionEU868GetPhyParam+0x20>)
 80186ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186ce:	bf00      	nop
 80186d0:	080187b5 	.word	0x080187b5
 80186d4:	080187bb 	.word	0x080187bb
 80186d8:	08018919 	.word	0x08018919
 80186dc:	08018919 	.word	0x08018919
 80186e0:	08018919 	.word	0x08018919
 80186e4:	080187c1 	.word	0x080187c1
 80186e8:	08018919 	.word	0x08018919
 80186ec:	080187fb 	.word	0x080187fb
 80186f0:	08018919 	.word	0x08018919
 80186f4:	08018801 	.word	0x08018801
 80186f8:	08018807 	.word	0x08018807
 80186fc:	0801880d 	.word	0x0801880d
 8018700:	08018813 	.word	0x08018813
 8018704:	08018823 	.word	0x08018823
 8018708:	08018833 	.word	0x08018833
 801870c:	08018839 	.word	0x08018839
 8018710:	08018841 	.word	0x08018841
 8018714:	08018849 	.word	0x08018849
 8018718:	08018851 	.word	0x08018851
 801871c:	08018859 	.word	0x08018859
 8018720:	08018861 	.word	0x08018861
 8018724:	08018869 	.word	0x08018869
 8018728:	0801887d 	.word	0x0801887d
 801872c:	08018883 	.word	0x08018883
 8018730:	08018889 	.word	0x08018889
 8018734:	0801888f 	.word	0x0801888f
 8018738:	0801889b 	.word	0x0801889b
 801873c:	080188a7 	.word	0x080188a7
 8018740:	080188ad 	.word	0x080188ad
 8018744:	080188b5 	.word	0x080188b5
 8018748:	080188bb 	.word	0x080188bb
 801874c:	080188c1 	.word	0x080188c1
 8018750:	080188c9 	.word	0x080188c9
 8018754:	080187c7 	.word	0x080187c7
 8018758:	08018919 	.word	0x08018919
 801875c:	08018919 	.word	0x08018919
 8018760:	08018919 	.word	0x08018919
 8018764:	08018919 	.word	0x08018919
 8018768:	08018919 	.word	0x08018919
 801876c:	08018919 	.word	0x08018919
 8018770:	08018919 	.word	0x08018919
 8018774:	08018919 	.word	0x08018919
 8018778:	08018919 	.word	0x08018919
 801877c:	08018919 	.word	0x08018919
 8018780:	08018919 	.word	0x08018919
 8018784:	08018919 	.word	0x08018919
 8018788:	08018919 	.word	0x08018919
 801878c:	080188cf 	.word	0x080188cf
 8018790:	080188d5 	.word	0x080188d5
 8018794:	080188e3 	.word	0x080188e3
 8018798:	08018919 	.word	0x08018919
 801879c:	08018919 	.word	0x08018919
 80187a0:	080188e9 	.word	0x080188e9
 80187a4:	080188ef 	.word	0x080188ef
 80187a8:	08018919 	.word	0x08018919
 80187ac:	080188f5 	.word	0x080188f5
 80187b0:	08018905 	.word	0x08018905
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80187b4:	2300      	movs	r3, #0
 80187b6:	61bb      	str	r3, [r7, #24]
            break;
 80187b8:	e0af      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80187ba:	2300      	movs	r3, #0
 80187bc:	61bb      	str	r3, [r7, #24]
            break;
 80187be:	e0ac      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80187c0:	2300      	movs	r3, #0
 80187c2:	61bb      	str	r3, [r7, #24]
            break;
 80187c4:	e0a9      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80187cc:	733b      	strb	r3, [r7, #12]
 80187ce:	2307      	movs	r3, #7
 80187d0:	737b      	strb	r3, [r7, #13]
 80187d2:	2300      	movs	r3, #0
 80187d4:	73bb      	strb	r3, [r7, #14]
 80187d6:	2310      	movs	r3, #16
 80187d8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80187da:	4b53      	ldr	r3, [pc, #332]	; (8018928 <RegionEU868GetPhyParam+0x278>)
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80187e2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80187e4:	4b50      	ldr	r3, [pc, #320]	; (8018928 <RegionEU868GetPhyParam+0x278>)
 80187e6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80187e8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80187ea:	f107 030c 	add.w	r3, r7, #12
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7ff fddd 	bl	80183ae <RegionCommonGetNextLowerTxDr>
 80187f4:	4603      	mov	r3, r0
 80187f6:	61bb      	str	r3, [r7, #24]
            break;
 80187f8:	e08f      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80187fa:	2300      	movs	r3, #0
 80187fc:	61bb      	str	r3, [r7, #24]
            break;
 80187fe:	e08c      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018800:	2300      	movs	r3, #0
 8018802:	61bb      	str	r3, [r7, #24]
            break;
 8018804:	e089      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018806:	2340      	movs	r3, #64	; 0x40
 8018808:	61bb      	str	r3, [r7, #24]
            break;
 801880a:	e086      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801880c:	2320      	movs	r3, #32
 801880e:	61bb      	str	r3, [r7, #24]
            break;
 8018810:	e083      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018818:	461a      	mov	r2, r3
 801881a:	4b44      	ldr	r3, [pc, #272]	; (801892c <RegionEU868GetPhyParam+0x27c>)
 801881c:	5c9b      	ldrb	r3, [r3, r2]
 801881e:	61bb      	str	r3, [r7, #24]
            break;
 8018820:	e07b      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018828:	461a      	mov	r2, r3
 801882a:	4b41      	ldr	r3, [pc, #260]	; (8018930 <RegionEU868GetPhyParam+0x280>)
 801882c:	5c9b      	ldrb	r3, [r3, r2]
 801882e:	61bb      	str	r3, [r7, #24]
            break;
 8018830:	e073      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018832:	2301      	movs	r3, #1
 8018834:	61bb      	str	r3, [r7, #24]
            break;
 8018836:	e070      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018838:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801883c:	61bb      	str	r3, [r7, #24]
            break;
 801883e:	e06c      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018840:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018844:	61bb      	str	r3, [r7, #24]
            break;
 8018846:	e068      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018848:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801884c:	61bb      	str	r3, [r7, #24]
            break;
 801884e:	e064      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018850:	f241 3388 	movw	r3, #5000	; 0x1388
 8018854:	61bb      	str	r3, [r7, #24]
            break;
 8018856:	e060      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018858:	f241 7370 	movw	r3, #6000	; 0x1770
 801885c:	61bb      	str	r3, [r7, #24]
            break;
 801885e:	e05c      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018864:	61bb      	str	r3, [r7, #24]
            break;
 8018866:	e058      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018868:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801886c:	4831      	ldr	r0, [pc, #196]	; (8018934 <RegionEU868GetPhyParam+0x284>)
 801886e:	f001 f87f 	bl	8019970 <randr>
 8018872:	4603      	mov	r3, r0
 8018874:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018878:	61bb      	str	r3, [r7, #24]
            break;
 801887a:	e04e      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801887c:	2300      	movs	r3, #0
 801887e:	61bb      	str	r3, [r7, #24]
            break;
 8018880:	e04b      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018882:	4b2d      	ldr	r3, [pc, #180]	; (8018938 <RegionEU868GetPhyParam+0x288>)
 8018884:	61bb      	str	r3, [r7, #24]
            break;
 8018886:	e048      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018888:	2300      	movs	r3, #0
 801888a:	61bb      	str	r3, [r7, #24]
            break;
 801888c:	e045      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801888e:	4b26      	ldr	r3, [pc, #152]	; (8018928 <RegionEU868GetPhyParam+0x278>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018896:	61bb      	str	r3, [r7, #24]
            break;
 8018898:	e03f      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801889a:	4b23      	ldr	r3, [pc, #140]	; (8018928 <RegionEU868GetPhyParam+0x278>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 80188a2:	61bb      	str	r3, [r7, #24]
            break;
 80188a4:	e039      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80188a6:	2310      	movs	r3, #16
 80188a8:	61bb      	str	r3, [r7, #24]
            break;
 80188aa:	e036      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80188ac:	4b1e      	ldr	r3, [pc, #120]	; (8018928 <RegionEU868GetPhyParam+0x278>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	61bb      	str	r3, [r7, #24]
            break;
 80188b2:	e032      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 80188b4:	2300      	movs	r3, #0
 80188b6:	61bb      	str	r3, [r7, #24]
            break;
 80188b8:	e02f      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80188ba:	2300      	movs	r3, #0
 80188bc:	61bb      	str	r3, [r7, #24]
            break;
 80188be:	e02c      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80188c0:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80188c4:	61bb      	str	r3, [r7, #24]
            break;
 80188c6:	e028      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80188c8:	4b1c      	ldr	r3, [pc, #112]	; (801893c <RegionEU868GetPhyParam+0x28c>)
 80188ca:	61bb      	str	r3, [r7, #24]
            break;
 80188cc:	e025      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80188ce:	4b1a      	ldr	r3, [pc, #104]	; (8018938 <RegionEU868GetPhyParam+0x288>)
 80188d0:	61bb      	str	r3, [r7, #24]
            break;
 80188d2:	e022      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80188d4:	2311      	movs	r3, #17
 80188d6:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80188d8:	2302      	movs	r3, #2
 80188da:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80188dc:	2300      	movs	r3, #0
 80188de:	76bb      	strb	r3, [r7, #26]
            break;
 80188e0:	e01b      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80188e2:	2303      	movs	r3, #3
 80188e4:	61bb      	str	r3, [r7, #24]
            break;
 80188e6:	e018      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80188e8:	4b13      	ldr	r3, [pc, #76]	; (8018938 <RegionEU868GetPhyParam+0x288>)
 80188ea:	61bb      	str	r3, [r7, #24]
            break;
 80188ec:	e015      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80188ee:	2303      	movs	r3, #3
 80188f0:	61bb      	str	r3, [r7, #24]
            break;
 80188f2:	e012      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80188fa:	461a      	mov	r2, r3
 80188fc:	4b10      	ldr	r3, [pc, #64]	; (8018940 <RegionEU868GetPhyParam+0x290>)
 80188fe:	5c9b      	ldrb	r3, [r3, r2]
 8018900:	61bb      	str	r3, [r7, #24]
            break;
 8018902:	e00a      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801890a:	490e      	ldr	r1, [pc, #56]	; (8018944 <RegionEU868GetPhyParam+0x294>)
 801890c:	4618      	mov	r0, r3
 801890e:	f7ff fda1 	bl	8018454 <RegionCommonGetBandwidth>
 8018912:	4603      	mov	r3, r0
 8018914:	61bb      	str	r3, [r7, #24]
            break;
 8018916:	e000      	b.n	801891a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018918:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 801891a:	69bb      	ldr	r3, [r7, #24]
 801891c:	61fb      	str	r3, [r7, #28]
 801891e:	69fb      	ldr	r3, [r7, #28]
}
 8018920:	4618      	mov	r0, r3
 8018922:	3720      	adds	r7, #32
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}
 8018928:	20001738 	.word	0x20001738
 801892c:	0801f568 	.word	0x0801f568
 8018930:	0801f570 	.word	0x0801f570
 8018934:	fffffc18 	.word	0xfffffc18
 8018938:	33d3e608 	.word	0x33d3e608
 801893c:	4009999a 	.word	0x4009999a
 8018940:	0801f540 	.word	0x0801f540
 8018944:	0801f548 	.word	0x0801f548

08018948 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018948:	b590      	push	{r4, r7, lr}
 801894a:	b085      	sub	sp, #20
 801894c:	af02      	add	r7, sp, #8
 801894e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018950:	4b11      	ldr	r3, [pc, #68]	; (8018998 <RegionEU868SetBandTxDone+0x50>)
 8018952:	681a      	ldr	r2, [r3, #0]
 8018954:	4b11      	ldr	r3, [pc, #68]	; (801899c <RegionEU868SetBandTxDone+0x54>)
 8018956:	6819      	ldr	r1, [r3, #0]
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	781b      	ldrb	r3, [r3, #0]
 801895c:	4618      	mov	r0, r3
 801895e:	4603      	mov	r3, r0
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	4403      	add	r3, r0
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	440b      	add	r3, r1
 8018968:	3309      	adds	r3, #9
 801896a:	781b      	ldrb	r3, [r3, #0]
 801896c:	4619      	mov	r1, r3
 801896e:	460b      	mov	r3, r1
 8018970:	005b      	lsls	r3, r3, #1
 8018972:	440b      	add	r3, r1
 8018974:	00db      	lsls	r3, r3, #3
 8018976:	18d0      	adds	r0, r2, r3
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6899      	ldr	r1, [r3, #8]
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	785c      	ldrb	r4, [r3, #1]
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	691a      	ldr	r2, [r3, #16]
 8018984:	9200      	str	r2, [sp, #0]
 8018986:	68db      	ldr	r3, [r3, #12]
 8018988:	4622      	mov	r2, r4
 801898a:	f7ff f8e9 	bl	8017b60 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801898e:	bf00      	nop
 8018990:	370c      	adds	r7, #12
 8018992:	46bd      	mov	sp, r7
 8018994:	bd90      	pop	{r4, r7, pc}
 8018996:	bf00      	nop
 8018998:	20001734 	.word	0x20001734
 801899c:	20001738 	.word	0x20001738

080189a0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b0b0      	sub	sp, #192	; 0xc0
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80189a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80189ac:	2290      	movs	r2, #144	; 0x90
 80189ae:	2100      	movs	r1, #0
 80189b0:	4618      	mov	r0, r3
 80189b2:	f005 fe11 	bl	801e5d8 <memset>
 80189b6:	2364      	movs	r3, #100	; 0x64
 80189b8:	863b      	strh	r3, [r7, #48]	; 0x30
 80189ba:	2364      	movs	r3, #100	; 0x64
 80189bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80189c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80189c4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 80189c8:	230a      	movs	r3, #10
 80189ca:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80189ce:	2364      	movs	r3, #100	; 0x64
 80189d0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80189d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80189d8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	7a1b      	ldrb	r3, [r3, #8]
 80189e0:	2b02      	cmp	r3, #2
 80189e2:	d05e      	beq.n	8018aa2 <RegionEU868InitDefaults+0x102>
 80189e4:	2b02      	cmp	r3, #2
 80189e6:	dc6b      	bgt.n	8018ac0 <RegionEU868InitDefaults+0x120>
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d002      	beq.n	80189f2 <RegionEU868InitDefaults+0x52>
 80189ec:	2b01      	cmp	r3, #1
 80189ee:	d03f      	beq.n	8018a70 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80189f0:	e066      	b.n	8018ac0 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d063      	beq.n	8018ac2 <RegionEU868InitDefaults+0x122>
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d05f      	beq.n	8018ac2 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	681b      	ldr	r3, [r3, #0]
 8018a06:	4a30      	ldr	r2, [pc, #192]	; (8018ac8 <RegionEU868InitDefaults+0x128>)
 8018a08:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	685b      	ldr	r3, [r3, #4]
 8018a0e:	4a2f      	ldr	r2, [pc, #188]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a10:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018a12:	4b2d      	ldr	r3, [pc, #180]	; (8018ac8 <RegionEU868InitDefaults+0x128>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	4618      	mov	r0, r3
 8018a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018a1c:	2290      	movs	r2, #144	; 0x90
 8018a1e:	4619      	mov	r1, r3
 8018a20:	f000 ffbd 	bl	801999e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018a24:	4b29      	ldr	r3, [pc, #164]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	4a29      	ldr	r2, [pc, #164]	; (8018ad0 <RegionEU868InitDefaults+0x130>)
 8018a2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018a2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018a30:	4b26      	ldr	r3, [pc, #152]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	4a27      	ldr	r2, [pc, #156]	; (8018ad4 <RegionEU868InitDefaults+0x134>)
 8018a36:	330c      	adds	r3, #12
 8018a38:	ca07      	ldmia	r2, {r0, r1, r2}
 8018a3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018a3e:	4b23      	ldr	r3, [pc, #140]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	4a25      	ldr	r2, [pc, #148]	; (8018ad8 <RegionEU868InitDefaults+0x138>)
 8018a44:	3318      	adds	r3, #24
 8018a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8018a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018a4c:	4b1f      	ldr	r3, [pc, #124]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2207      	movs	r2, #7
 8018a52:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018a56:	4b1d      	ldr	r3, [pc, #116]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018a5e:	4b1b      	ldr	r3, [pc, #108]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018a66:	2201      	movs	r2, #1
 8018a68:	4619      	mov	r1, r3
 8018a6a:	f7ff f853 	bl	8017b14 <RegionCommonChanMaskCopy>
 8018a6e:	e028      	b.n	8018ac2 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018a70:	4b16      	ldr	r3, [pc, #88]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	2200      	movs	r2, #0
 8018a76:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018a78:	4b14      	ldr	r3, [pc, #80]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018a80:	4b12      	ldr	r3, [pc, #72]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	2200      	movs	r2, #0
 8018a86:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018a88:	4b10      	ldr	r3, [pc, #64]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018a90:	4b0e      	ldr	r3, [pc, #56]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018a98:	2201      	movs	r2, #1
 8018a9a:	4619      	mov	r1, r3
 8018a9c:	f7ff f83a 	bl	8017b14 <RegionCommonChanMaskCopy>
            break;
 8018aa0:	e00f      	b.n	8018ac2 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018aa2:	4b0a      	ldr	r3, [pc, #40]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018aaa:	4b08      	ldr	r3, [pc, #32]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018ab2:	4b06      	ldr	r3, [pc, #24]	; (8018acc <RegionEU868InitDefaults+0x12c>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	430a      	orrs	r2, r1
 8018ab8:	b292      	uxth	r2, r2
 8018aba:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018abe:	e000      	b.n	8018ac2 <RegionEU868InitDefaults+0x122>
            break;
 8018ac0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018ac2:	37c0      	adds	r7, #192	; 0xc0
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}
 8018ac8:	20001734 	.word	0x20001734
 8018acc:	20001738 	.word	0x20001738
 8018ad0:	0801ef70 	.word	0x0801ef70
 8018ad4:	0801ef7c 	.word	0x0801ef7c
 8018ad8:	0801ef88 	.word	0x0801ef88

08018adc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b084      	sub	sp, #16
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	460b      	mov	r3, r1
 8018ae6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018ae8:	78fb      	ldrb	r3, [r7, #3]
 8018aea:	2b0f      	cmp	r3, #15
 8018aec:	d86c      	bhi.n	8018bc8 <RegionEU868Verify+0xec>
 8018aee:	a201      	add	r2, pc, #4	; (adr r2, 8018af4 <RegionEU868Verify+0x18>)
 8018af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018af4:	08018b35 	.word	0x08018b35
 8018af8:	08018bc9 	.word	0x08018bc9
 8018afc:	08018bc9 	.word	0x08018bc9
 8018b00:	08018bc9 	.word	0x08018bc9
 8018b04:	08018bc9 	.word	0x08018bc9
 8018b08:	08018b4d 	.word	0x08018b4d
 8018b0c:	08018b6b 	.word	0x08018b6b
 8018b10:	08018b89 	.word	0x08018b89
 8018b14:	08018bc9 	.word	0x08018bc9
 8018b18:	08018ba7 	.word	0x08018ba7
 8018b1c:	08018ba7 	.word	0x08018ba7
 8018b20:	08018bc9 	.word	0x08018bc9
 8018b24:	08018bc9 	.word	0x08018bc9
 8018b28:	08018bc9 	.word	0x08018bc9
 8018b2c:	08018bc9 	.word	0x08018bc9
 8018b30:	08018bc5 	.word	0x08018bc5
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018b34:	2300      	movs	r3, #0
 8018b36:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	f107 020f 	add.w	r2, r7, #15
 8018b40:	4611      	mov	r1, r2
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7ff fcee 	bl	8018524 <VerifyRfFreq>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	e03e      	b.n	8018bca <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8018b52:	2207      	movs	r2, #7
 8018b54:	2100      	movs	r1, #0
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7fe ff5f 	bl	8017a1a <RegionCommonValueInRange>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	bf14      	ite	ne
 8018b62:	2301      	movne	r3, #1
 8018b64:	2300      	moveq	r3, #0
 8018b66:	b2db      	uxtb	r3, r3
 8018b68:	e02f      	b.n	8018bca <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8018b70:	2205      	movs	r2, #5
 8018b72:	2100      	movs	r1, #0
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7fe ff50 	bl	8017a1a <RegionCommonValueInRange>
 8018b7a:	4603      	mov	r3, r0
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	bf14      	ite	ne
 8018b80:	2301      	movne	r3, #1
 8018b82:	2300      	moveq	r3, #0
 8018b84:	b2db      	uxtb	r3, r3
 8018b86:	e020      	b.n	8018bca <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8018b8e:	2207      	movs	r2, #7
 8018b90:	2100      	movs	r1, #0
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7fe ff41 	bl	8017a1a <RegionCommonValueInRange>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	bf14      	ite	ne
 8018b9e:	2301      	movne	r3, #1
 8018ba0:	2300      	moveq	r3, #0
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	e011      	b.n	8018bca <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8018bac:	2207      	movs	r2, #7
 8018bae:	2100      	movs	r1, #0
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7fe ff32 	bl	8017a1a <RegionCommonValueInRange>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	bf14      	ite	ne
 8018bbc:	2301      	movne	r3, #1
 8018bbe:	2300      	moveq	r3, #0
 8018bc0:	b2db      	uxtb	r3, r3
 8018bc2:	e002      	b.n	8018bca <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8018bc4:	2301      	movs	r3, #1
 8018bc6:	e000      	b.n	8018bca <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8018bc8:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3710      	adds	r7, #16
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop

08018bd4 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b08a      	sub	sp, #40	; 0x28
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018bdc:	2350      	movs	r3, #80	; 0x50
 8018bde:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	791b      	ldrb	r3, [r3, #4]
 8018be6:	2b10      	cmp	r3, #16
 8018be8:	d162      	bne.n	8018cb0 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	330f      	adds	r3, #15
 8018bf0:	781b      	ldrb	r3, [r3, #0]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d15e      	bne.n	8018cb4 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bfc:	2303      	movs	r3, #3
 8018bfe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018c02:	e050      	b.n	8018ca6 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018c08:	2b07      	cmp	r3, #7
 8018c0a:	d824      	bhi.n	8018c56 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681a      	ldr	r2, [r3, #0]
 8018c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c14:	4413      	add	r3, r2
 8018c16:	781b      	ldrb	r3, [r3, #0]
 8018c18:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018c1a:	69ba      	ldr	r2, [r7, #24]
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6819      	ldr	r1, [r3, #0]
 8018c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c24:	3301      	adds	r3, #1
 8018c26:	440b      	add	r3, r1
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	021b      	lsls	r3, r3, #8
 8018c2c:	4313      	orrs	r3, r2
 8018c2e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018c30:	69ba      	ldr	r2, [r7, #24]
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	6819      	ldr	r1, [r3, #0]
 8018c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c3a:	3302      	adds	r3, #2
 8018c3c:	440b      	add	r3, r1
 8018c3e:	781b      	ldrb	r3, [r3, #0]
 8018c40:	041b      	lsls	r3, r3, #16
 8018c42:	4313      	orrs	r3, r2
 8018c44:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8018c46:	69bb      	ldr	r3, [r7, #24]
 8018c48:	2264      	movs	r2, #100	; 0x64
 8018c4a:	fb02 f303 	mul.w	r3, r2, r3
 8018c4e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018c50:	2300      	movs	r3, #0
 8018c52:	61fb      	str	r3, [r7, #28]
 8018c54:	e006      	b.n	8018c64 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8018c56:	2300      	movs	r3, #0
 8018c58:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8018c60:	2300      	movs	r3, #0
 8018c62:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8018c64:	69bb      	ldr	r3, [r7, #24]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d00b      	beq.n	8018c82 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8018c6a:	f107 0318 	add.w	r3, r7, #24
 8018c6e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8018c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018c74:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018c76:	f107 0310 	add.w	r3, r7, #16
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f000 fd14 	bl	80196a8 <RegionEU868ChannelAdd>
 8018c80:	e007      	b.n	8018c92 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018c82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018c86:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8018c88:	f107 030c 	add.w	r3, r7, #12
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f000 fdad 	bl	80197ec <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018c92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c96:	3303      	adds	r3, #3
 8018c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ca0:	3301      	adds	r3, #1
 8018ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018caa:	2b0f      	cmp	r3, #15
 8018cac:	d9aa      	bls.n	8018c04 <RegionEU868ApplyCFList+0x30>
 8018cae:	e002      	b.n	8018cb6 <RegionEU868ApplyCFList+0xe2>
        return;
 8018cb0:	bf00      	nop
 8018cb2:	e000      	b.n	8018cb6 <RegionEU868ApplyCFList+0xe2>
        return;
 8018cb4:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018cb6:	3728      	adds	r7, #40	; 0x28
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}

08018cbc <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	791b      	ldrb	r3, [r3, #4]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d002      	beq.n	8018cd2 <RegionEU868ChanMaskSet+0x16>
 8018ccc:	2b01      	cmp	r3, #1
 8018cce:	d00b      	beq.n	8018ce8 <RegionEU868ChanMaskSet+0x2c>
 8018cd0:	e015      	b.n	8018cfe <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018cd2:	4b0e      	ldr	r3, [pc, #56]	; (8018d0c <RegionEU868ChanMaskSet+0x50>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	2201      	movs	r2, #1
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	f7fe ff17 	bl	8017b14 <RegionCommonChanMaskCopy>
            break;
 8018ce6:	e00c      	b.n	8018d02 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018ce8:	4b08      	ldr	r3, [pc, #32]	; (8018d0c <RegionEU868ChanMaskSet+0x50>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	2201      	movs	r2, #1
 8018cf6:	4619      	mov	r1, r3
 8018cf8:	f7fe ff0c 	bl	8017b14 <RegionCommonChanMaskCopy>
            break;
 8018cfc:	e001      	b.n	8018d02 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	e000      	b.n	8018d04 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8018d02:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018d04:	4618      	mov	r0, r3
 8018d06:	3708      	adds	r7, #8
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	bd80      	pop	{r7, pc}
 8018d0c:	20001738 	.word	0x20001738

08018d10 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b088      	sub	sp, #32
 8018d14:	af02      	add	r7, sp, #8
 8018d16:	60ba      	str	r2, [r7, #8]
 8018d18:	607b      	str	r3, [r7, #4]
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	73fb      	strb	r3, [r7, #15]
 8018d1e:	460b      	mov	r3, r1
 8018d20:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8018d22:	2300      	movs	r3, #0
 8018d24:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018d2a:	2b07      	cmp	r3, #7
 8018d2c:	bfa8      	it	ge
 8018d2e:	2307      	movge	r3, #7
 8018d30:	b25a      	sxtb	r2, r3
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d3c:	491e      	ldr	r1, [pc, #120]	; (8018db8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7ff fb88 	bl	8018454 <RegionCommonGetBandwidth>
 8018d44:	4603      	mov	r3, r0
 8018d46:	b2da      	uxtb	r2, r3
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d52:	2b07      	cmp	r3, #7
 8018d54:	d10a      	bne.n	8018d6c <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	4b17      	ldr	r3, [pc, #92]	; (8018dbc <RegionEU868ComputeRxWindowParameters+0xac>)
 8018d60:	5c9b      	ldrb	r3, [r3, r2]
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7ff f90a 	bl	8017f7c <RegionCommonComputeSymbolTimeFsk>
 8018d68:	6178      	str	r0, [r7, #20]
 8018d6a:	e011      	b.n	8018d90 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d72:	461a      	mov	r2, r3
 8018d74:	4b11      	ldr	r3, [pc, #68]	; (8018dbc <RegionEU868ComputeRxWindowParameters+0xac>)
 8018d76:	5c9a      	ldrb	r2, [r3, r2]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d7e:	4619      	mov	r1, r3
 8018d80:	4b0d      	ldr	r3, [pc, #52]	; (8018db8 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8018d82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018d86:	4619      	mov	r1, r3
 8018d88:	4610      	mov	r0, r2
 8018d8a:	f7ff f8e1 	bl	8017f50 <RegionCommonComputeSymbolTimeLoRa>
 8018d8e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018d90:	4b0b      	ldr	r3, [pc, #44]	; (8018dc0 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8018d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d94:	4798      	blx	r3
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	3308      	adds	r3, #8
 8018d9a:	687a      	ldr	r2, [r7, #4]
 8018d9c:	320c      	adds	r2, #12
 8018d9e:	7bb9      	ldrb	r1, [r7, #14]
 8018da0:	9201      	str	r2, [sp, #4]
 8018da2:	9300      	str	r3, [sp, #0]
 8018da4:	4603      	mov	r3, r0
 8018da6:	68ba      	ldr	r2, [r7, #8]
 8018da8:	6978      	ldr	r0, [r7, #20]
 8018daa:	f7ff f8f7 	bl	8017f9c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8018dae:	bf00      	nop
 8018db0:	3718      	adds	r7, #24
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
 8018db6:	bf00      	nop
 8018db8:	0801f548 	.word	0x0801f548
 8018dbc:	0801f540 	.word	0x0801f540
 8018dc0:	0801f578 	.word	0x0801f578

08018dc4 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018dc4:	b5b0      	push	{r4, r5, r7, lr}
 8018dc6:	b090      	sub	sp, #64	; 0x40
 8018dc8:	af0a      	add	r7, sp, #40	; 0x28
 8018dca:	6078      	str	r0, [r7, #4]
 8018dcc:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	785b      	ldrb	r3, [r3, #1]
 8018dd2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018de2:	4b5a      	ldr	r3, [pc, #360]	; (8018f4c <RegionEU868RxConfig+0x188>)
 8018de4:	685b      	ldr	r3, [r3, #4]
 8018de6:	4798      	blx	r3
 8018de8:	4603      	mov	r3, r0
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d001      	beq.n	8018df2 <RegionEU868RxConfig+0x2e>
    {
        return false;
 8018dee:	2300      	movs	r3, #0
 8018df0:	e0a8      	b.n	8018f44 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	7cdb      	ldrb	r3, [r3, #19]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d126      	bne.n	8018e48 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8018dfa:	4b55      	ldr	r3, [pc, #340]	; (8018f50 <RegionEU868RxConfig+0x18c>)
 8018dfc:	681a      	ldr	r2, [r3, #0]
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	781b      	ldrb	r3, [r3, #0]
 8018e02:	4619      	mov	r1, r3
 8018e04:	460b      	mov	r3, r1
 8018e06:	005b      	lsls	r3, r3, #1
 8018e08:	440b      	add	r3, r1
 8018e0a:	009b      	lsls	r3, r3, #2
 8018e0c:	4413      	add	r3, r2
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018e12:	4b4f      	ldr	r3, [pc, #316]	; (8018f50 <RegionEU868RxConfig+0x18c>)
 8018e14:	681a      	ldr	r2, [r3, #0]
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	781b      	ldrb	r3, [r3, #0]
 8018e1a:	4619      	mov	r1, r3
 8018e1c:	460b      	mov	r3, r1
 8018e1e:	005b      	lsls	r3, r3, #1
 8018e20:	440b      	add	r3, r1
 8018e22:	009b      	lsls	r3, r3, #2
 8018e24:	4413      	add	r3, r2
 8018e26:	3304      	adds	r3, #4
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d00c      	beq.n	8018e48 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8018e2e:	4b48      	ldr	r3, [pc, #288]	; (8018f50 <RegionEU868RxConfig+0x18c>)
 8018e30:	681a      	ldr	r2, [r3, #0]
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	781b      	ldrb	r3, [r3, #0]
 8018e36:	4619      	mov	r1, r3
 8018e38:	460b      	mov	r3, r1
 8018e3a:	005b      	lsls	r3, r3, #1
 8018e3c:	440b      	add	r3, r1
 8018e3e:	009b      	lsls	r3, r3, #2
 8018e40:	4413      	add	r3, r2
 8018e42:	3304      	adds	r3, #4
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e4c:	4a41      	ldr	r2, [pc, #260]	; (8018f54 <RegionEU868RxConfig+0x190>)
 8018e4e:	5cd3      	ldrb	r3, [r2, r3]
 8018e50:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018e52:	4b3e      	ldr	r3, [pc, #248]	; (8018f4c <RegionEU868RxConfig+0x188>)
 8018e54:	68db      	ldr	r3, [r3, #12]
 8018e56:	6938      	ldr	r0, [r7, #16]
 8018e58:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e5e:	2b07      	cmp	r3, #7
 8018e60:	d128      	bne.n	8018eb4 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8018e62:	2300      	movs	r3, #0
 8018e64:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018e66:	4b39      	ldr	r3, [pc, #228]	; (8018f4c <RegionEU868RxConfig+0x188>)
 8018e68:	699c      	ldr	r4, [r3, #24]
 8018e6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018e6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e72:	fb02 f303 	mul.w	r3, r2, r3
 8018e76:	4619      	mov	r1, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	689b      	ldr	r3, [r3, #8]
 8018e7c:	b29b      	uxth	r3, r3
 8018e7e:	687a      	ldr	r2, [r7, #4]
 8018e80:	7c92      	ldrb	r2, [r2, #18]
 8018e82:	7df8      	ldrb	r0, [r7, #23]
 8018e84:	9209      	str	r2, [sp, #36]	; 0x24
 8018e86:	2200      	movs	r2, #0
 8018e88:	9208      	str	r2, [sp, #32]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	9207      	str	r2, [sp, #28]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	9206      	str	r2, [sp, #24]
 8018e92:	2201      	movs	r2, #1
 8018e94:	9205      	str	r2, [sp, #20]
 8018e96:	2200      	movs	r2, #0
 8018e98:	9204      	str	r2, [sp, #16]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	9203      	str	r2, [sp, #12]
 8018e9e:	9302      	str	r3, [sp, #8]
 8018ea0:	2305      	movs	r3, #5
 8018ea2:	9301      	str	r3, [sp, #4]
 8018ea4:	4b2c      	ldr	r3, [pc, #176]	; (8018f58 <RegionEU868RxConfig+0x194>)
 8018ea6:	9300      	str	r3, [sp, #0]
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	460a      	mov	r2, r1
 8018eac:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018eb0:	47a0      	blx	r4
 8018eb2:	e024      	b.n	8018efe <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8018eb4:	2301      	movs	r3, #1
 8018eb6:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018eb8:	4b24      	ldr	r3, [pc, #144]	; (8018f4c <RegionEU868RxConfig+0x188>)
 8018eba:	699c      	ldr	r4, [r3, #24]
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	789b      	ldrb	r3, [r3, #2]
 8018ec0:	461d      	mov	r5, r3
 8018ec2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	689b      	ldr	r3, [r3, #8]
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	687a      	ldr	r2, [r7, #4]
 8018ece:	7c92      	ldrb	r2, [r2, #18]
 8018ed0:	7df8      	ldrb	r0, [r7, #23]
 8018ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8018ed4:	2201      	movs	r2, #1
 8018ed6:	9208      	str	r2, [sp, #32]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	9207      	str	r2, [sp, #28]
 8018edc:	2200      	movs	r2, #0
 8018ede:	9206      	str	r2, [sp, #24]
 8018ee0:	2200      	movs	r2, #0
 8018ee2:	9205      	str	r2, [sp, #20]
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	9204      	str	r2, [sp, #16]
 8018ee8:	2200      	movs	r2, #0
 8018eea:	9203      	str	r2, [sp, #12]
 8018eec:	9302      	str	r3, [sp, #8]
 8018eee:	2308      	movs	r3, #8
 8018ef0:	9301      	str	r3, [sp, #4]
 8018ef2:	2300      	movs	r3, #0
 8018ef4:	9300      	str	r3, [sp, #0]
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	460a      	mov	r2, r1
 8018efa:	4629      	mov	r1, r5
 8018efc:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	7c5b      	ldrb	r3, [r3, #17]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d005      	beq.n	8018f12 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f0a:	4a14      	ldr	r2, [pc, #80]	; (8018f5c <RegionEU868RxConfig+0x198>)
 8018f0c:	5cd3      	ldrb	r3, [r2, r3]
 8018f0e:	75bb      	strb	r3, [r7, #22]
 8018f10:	e004      	b.n	8018f1c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018f16:	4a12      	ldr	r2, [pc, #72]	; (8018f60 <RegionEU868RxConfig+0x19c>)
 8018f18:	5cd3      	ldrb	r3, [r2, r3]
 8018f1a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018f1c:	4b0b      	ldr	r3, [pc, #44]	; (8018f4c <RegionEU868RxConfig+0x188>)
 8018f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f20:	7dba      	ldrb	r2, [r7, #22]
 8018f22:	320d      	adds	r2, #13
 8018f24:	b2d1      	uxtb	r1, r2
 8018f26:	7dfa      	ldrb	r2, [r7, #23]
 8018f28:	4610      	mov	r0, r2
 8018f2a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	7cdb      	ldrb	r3, [r3, #19]
 8018f30:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018f34:	6939      	ldr	r1, [r7, #16]
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7ff faaa 	bl	8018490 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018f3c:	683b      	ldr	r3, [r7, #0]
 8018f3e:	7bfa      	ldrb	r2, [r7, #15]
 8018f40:	701a      	strb	r2, [r3, #0]
    return true;
 8018f42:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	3718      	adds	r7, #24
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8018f4c:	0801f578 	.word	0x0801f578
 8018f50:	20001738 	.word	0x20001738
 8018f54:	0801f540 	.word	0x0801f540
 8018f58:	00014585 	.word	0x00014585
 8018f5c:	0801f570 	.word	0x0801f570
 8018f60:	0801f568 	.word	0x0801f568

08018f64 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018f64:	b590      	push	{r4, r7, lr}
 8018f66:	b093      	sub	sp, #76	; 0x4c
 8018f68:	af0a      	add	r7, sp, #40	; 0x28
 8018f6a:	60f8      	str	r0, [r7, #12]
 8018f6c:	60b9      	str	r1, [r7, #8]
 8018f6e:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f76:	461a      	mov	r2, r3
 8018f78:	4b5d      	ldr	r3, [pc, #372]	; (80190f0 <RegionEU868TxConfig+0x18c>)
 8018f7a:	5c9b      	ldrb	r3, [r3, r2]
 8018f7c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018f84:	4b5b      	ldr	r3, [pc, #364]	; (80190f4 <RegionEU868TxConfig+0x190>)
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	4b5b      	ldr	r3, [pc, #364]	; (80190f8 <RegionEU868TxConfig+0x194>)
 8018f8a:	6819      	ldr	r1, [r3, #0]
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	781b      	ldrb	r3, [r3, #0]
 8018f90:	461c      	mov	r4, r3
 8018f92:	4623      	mov	r3, r4
 8018f94:	005b      	lsls	r3, r3, #1
 8018f96:	4423      	add	r3, r4
 8018f98:	009b      	lsls	r3, r3, #2
 8018f9a:	440b      	add	r3, r1
 8018f9c:	3309      	adds	r3, #9
 8018f9e:	781b      	ldrb	r3, [r3, #0]
 8018fa0:	4619      	mov	r1, r3
 8018fa2:	460b      	mov	r3, r1
 8018fa4:	005b      	lsls	r3, r3, #1
 8018fa6:	440b      	add	r3, r1
 8018fa8:	00db      	lsls	r3, r3, #3
 8018faa:	4413      	add	r3, r2
 8018fac:	3302      	adds	r3, #2
 8018fae:	f993 3000 	ldrsb.w	r3, [r3]
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	f7ff fa39 	bl	801842a <RegionCommonLimitTxPower>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018fc2:	494e      	ldr	r1, [pc, #312]	; (80190fc <RegionEU868TxConfig+0x198>)
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	f7ff fa45 	bl	8018454 <RegionCommonGetBandwidth>
 8018fca:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	6859      	ldr	r1, [r3, #4]
 8018fd4:	68fb      	ldr	r3, [r7, #12]
 8018fd6:	689a      	ldr	r2, [r3, #8]
 8018fd8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f7ff f895 	bl	801810c <RegionCommonComputeTxPower>
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018fe6:	4b46      	ldr	r3, [pc, #280]	; (8019100 <RegionEU868TxConfig+0x19c>)
 8018fe8:	68da      	ldr	r2, [r3, #12]
 8018fea:	4b43      	ldr	r3, [pc, #268]	; (80190f8 <RegionEU868TxConfig+0x194>)
 8018fec:	6819      	ldr	r1, [r3, #0]
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	781b      	ldrb	r3, [r3, #0]
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	4603      	mov	r3, r0
 8018ff6:	005b      	lsls	r3, r3, #1
 8018ff8:	4403      	add	r3, r0
 8018ffa:	009b      	lsls	r3, r3, #2
 8018ffc:	440b      	add	r3, r1
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	4618      	mov	r0, r3
 8019002:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019004:	68fb      	ldr	r3, [r7, #12]
 8019006:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801900a:	2b07      	cmp	r3, #7
 801900c:	d124      	bne.n	8019058 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801900e:	2300      	movs	r3, #0
 8019010:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019012:	4b3b      	ldr	r3, [pc, #236]	; (8019100 <RegionEU868TxConfig+0x19c>)
 8019014:	69dc      	ldr	r4, [r3, #28]
 8019016:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801901a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801901e:	fb02 f303 	mul.w	r3, r2, r3
 8019022:	461a      	mov	r2, r3
 8019024:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019028:	7ff8      	ldrb	r0, [r7, #31]
 801902a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801902e:	9308      	str	r3, [sp, #32]
 8019030:	2300      	movs	r3, #0
 8019032:	9307      	str	r3, [sp, #28]
 8019034:	2300      	movs	r3, #0
 8019036:	9306      	str	r3, [sp, #24]
 8019038:	2300      	movs	r3, #0
 801903a:	9305      	str	r3, [sp, #20]
 801903c:	2301      	movs	r3, #1
 801903e:	9304      	str	r3, [sp, #16]
 8019040:	2300      	movs	r3, #0
 8019042:	9303      	str	r3, [sp, #12]
 8019044:	2305      	movs	r3, #5
 8019046:	9302      	str	r3, [sp, #8]
 8019048:	2300      	movs	r3, #0
 801904a:	9301      	str	r3, [sp, #4]
 801904c:	9200      	str	r2, [sp, #0]
 801904e:	69bb      	ldr	r3, [r7, #24]
 8019050:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8019054:	47a0      	blx	r4
 8019056:	e01d      	b.n	8019094 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8019058:	2301      	movs	r3, #1
 801905a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801905c:	4b28      	ldr	r3, [pc, #160]	; (8019100 <RegionEU868TxConfig+0x19c>)
 801905e:	69dc      	ldr	r4, [r3, #28]
 8019060:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019064:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019068:	7ff8      	ldrb	r0, [r7, #31]
 801906a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801906e:	9208      	str	r2, [sp, #32]
 8019070:	2200      	movs	r2, #0
 8019072:	9207      	str	r2, [sp, #28]
 8019074:	2200      	movs	r2, #0
 8019076:	9206      	str	r2, [sp, #24]
 8019078:	2200      	movs	r2, #0
 801907a:	9205      	str	r2, [sp, #20]
 801907c:	2201      	movs	r2, #1
 801907e:	9204      	str	r2, [sp, #16]
 8019080:	2200      	movs	r2, #0
 8019082:	9203      	str	r2, [sp, #12]
 8019084:	2208      	movs	r2, #8
 8019086:	9202      	str	r2, [sp, #8]
 8019088:	2201      	movs	r2, #1
 801908a:	9201      	str	r2, [sp, #4]
 801908c:	9300      	str	r3, [sp, #0]
 801908e:	69bb      	ldr	r3, [r7, #24]
 8019090:	2200      	movs	r2, #0
 8019092:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019094:	4b18      	ldr	r3, [pc, #96]	; (80190f8 <RegionEU868TxConfig+0x194>)
 8019096:	681a      	ldr	r2, [r3, #0]
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	781b      	ldrb	r3, [r3, #0]
 801909c:	4619      	mov	r1, r3
 801909e:	460b      	mov	r3, r1
 80190a0:	005b      	lsls	r3, r3, #1
 80190a2:	440b      	add	r3, r1
 80190a4:	009b      	lsls	r3, r3, #2
 80190a6:	4413      	add	r3, r2
 80190a8:	681a      	ldr	r2, [r3, #0]
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80190b0:	4619      	mov	r1, r3
 80190b2:	4610      	mov	r0, r2
 80190b4:	f7ff fa1e 	bl	80184f4 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	899b      	ldrh	r3, [r3, #12]
 80190c2:	4619      	mov	r1, r3
 80190c4:	4610      	mov	r0, r2
 80190c6:	f7ff faa3 	bl	8018610 <GetTimeOnAir>
 80190ca:	4602      	mov	r2, r0
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80190d0:	4b0b      	ldr	r3, [pc, #44]	; (8019100 <RegionEU868TxConfig+0x19c>)
 80190d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80190d4:	68fa      	ldr	r2, [r7, #12]
 80190d6:	8992      	ldrh	r2, [r2, #12]
 80190d8:	b2d1      	uxtb	r1, r2
 80190da:	7ffa      	ldrb	r2, [r7, #31]
 80190dc:	4610      	mov	r0, r2
 80190de:	4798      	blx	r3

    *txPower = txPowerLimited;
 80190e0:	68bb      	ldr	r3, [r7, #8]
 80190e2:	7f7a      	ldrb	r2, [r7, #29]
 80190e4:	701a      	strb	r2, [r3, #0]
    return true;
 80190e6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80190e8:	4618      	mov	r0, r3
 80190ea:	3724      	adds	r7, #36	; 0x24
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd90      	pop	{r4, r7, pc}
 80190f0:	0801f540 	.word	0x0801f540
 80190f4:	20001734 	.word	0x20001734
 80190f8:	20001738 	.word	0x20001738
 80190fc:	0801f548 	.word	0x0801f548
 8019100:	0801f578 	.word	0x0801f578

08019104 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019104:	b590      	push	{r4, r7, lr}
 8019106:	b093      	sub	sp, #76	; 0x4c
 8019108:	af00      	add	r7, sp, #0
 801910a:	60f8      	str	r0, [r7, #12]
 801910c:	60b9      	str	r1, [r7, #8]
 801910e:	607a      	str	r2, [r7, #4]
 8019110:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019112:	2307      	movs	r3, #7
 8019114:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019118:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801911c:	2200      	movs	r2, #0
 801911e:	601a      	str	r2, [r3, #0]
 8019120:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019122:	2300      	movs	r3, #0
 8019124:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019128:	2300      	movs	r3, #0
 801912a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801912e:	2300      	movs	r3, #0
 8019130:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019132:	e085      	b.n	8019240 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019134:	68fb      	ldr	r3, [r7, #12]
 8019136:	685a      	ldr	r2, [r3, #4]
 8019138:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801913c:	4413      	add	r3, r2
 801913e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019142:	4611      	mov	r1, r2
 8019144:	4618      	mov	r0, r3
 8019146:	f7fe fe29 	bl	8017d9c <RegionCommonParseLinkAdrReq>
 801914a:	4603      	mov	r3, r0
 801914c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019150:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019154:	2b00      	cmp	r3, #0
 8019156:	d07b      	beq.n	8019250 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019158:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801915c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019160:	4413      	add	r3, r2
 8019162:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019166:	2307      	movs	r3, #7
 8019168:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 801916c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019170:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019172:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019176:	2b00      	cmp	r3, #0
 8019178:	d109      	bne.n	801918e <RegionEU868LinkAdrReq+0x8a>
 801917a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801917c:	2b00      	cmp	r3, #0
 801917e:	d106      	bne.n	801918e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019180:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019184:	f023 0301 	bic.w	r3, r3, #1
 8019188:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801918c:	e058      	b.n	8019240 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801918e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019192:	2b00      	cmp	r3, #0
 8019194:	d003      	beq.n	801919e <RegionEU868LinkAdrReq+0x9a>
 8019196:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801919a:	2b05      	cmp	r3, #5
 801919c:	d903      	bls.n	80191a6 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801919e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80191a2:	2b06      	cmp	r3, #6
 80191a4:	d906      	bls.n	80191b4 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80191a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80191aa:	f023 0301 	bic.w	r3, r3, #1
 80191ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80191b2:	e045      	b.n	8019240 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80191b4:	2300      	movs	r3, #0
 80191b6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80191ba:	e03d      	b.n	8019238 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80191bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80191c0:	2b06      	cmp	r3, #6
 80191c2:	d118      	bne.n	80191f6 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80191c4:	4b5f      	ldr	r3, [pc, #380]	; (8019344 <RegionEU868LinkAdrReq+0x240>)
 80191c6:	6819      	ldr	r1, [r3, #0]
 80191c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80191cc:	4613      	mov	r3, r2
 80191ce:	005b      	lsls	r3, r3, #1
 80191d0:	4413      	add	r3, r2
 80191d2:	009b      	lsls	r3, r3, #2
 80191d4:	440b      	add	r3, r1
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d028      	beq.n	801922e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80191dc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80191e0:	2201      	movs	r2, #1
 80191e2:	fa02 f303 	lsl.w	r3, r2, r3
 80191e6:	b21a      	sxth	r2, r3
 80191e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80191ea:	b21b      	sxth	r3, r3
 80191ec:	4313      	orrs	r3, r2
 80191ee:	b21b      	sxth	r3, r3
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80191f4:	e01b      	b.n	801922e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80191f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80191f8:	461a      	mov	r2, r3
 80191fa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80191fe:	fa42 f303 	asr.w	r3, r2, r3
 8019202:	f003 0301 	and.w	r3, r3, #1
 8019206:	2b00      	cmp	r3, #0
 8019208:	d011      	beq.n	801922e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801920a:	4b4e      	ldr	r3, [pc, #312]	; (8019344 <RegionEU868LinkAdrReq+0x240>)
 801920c:	6819      	ldr	r1, [r3, #0]
 801920e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019212:	4613      	mov	r3, r2
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	4413      	add	r3, r2
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	440b      	add	r3, r1
 801921c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801921e:	2b00      	cmp	r3, #0
 8019220:	d105      	bne.n	801922e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019222:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019226:	f023 0301 	bic.w	r3, r3, #1
 801922a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801922e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019232:	3301      	adds	r3, #1
 8019234:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019238:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801923c:	2b0f      	cmp	r3, #15
 801923e:	d9bd      	bls.n	80191bc <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	7a1b      	ldrb	r3, [r3, #8]
 8019244:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019248:	429a      	cmp	r2, r3
 801924a:	f4ff af73 	bcc.w	8019134 <RegionEU868LinkAdrReq+0x30>
 801924e:	e000      	b.n	8019252 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019250:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019252:	2302      	movs	r3, #2
 8019254:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	7a5b      	ldrb	r3, [r3, #9]
 801925c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019260:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019264:	4618      	mov	r0, r3
 8019266:	f7ff fa23 	bl	80186b0 <RegionEU868GetPhyParam>
 801926a:	4603      	mov	r3, r0
 801926c:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801926e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019272:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	7a9b      	ldrb	r3, [r3, #10]
 8019278:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801927a:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 801927e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019280:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019284:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019286:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801928a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019292:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801929a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	7b5b      	ldrb	r3, [r3, #13]
 80192a0:	b25b      	sxtb	r3, r3
 80192a2:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80192a4:	2310      	movs	r3, #16
 80192a6:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80192a8:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80192ac:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80192ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b0:	b25b      	sxtb	r3, r3
 80192b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80192b6:	2307      	movs	r3, #7
 80192b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80192bc:	4b21      	ldr	r3, [pc, #132]	; (8019344 <RegionEU868LinkAdrReq+0x240>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80192c2:	2307      	movs	r3, #7
 80192c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80192c8:	2300      	movs	r3, #0
 80192ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80192ce:	68fb      	ldr	r3, [r7, #12]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80192d4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80192d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80192dc:	1c9a      	adds	r2, r3, #2
 80192de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80192e2:	1c59      	adds	r1, r3, #1
 80192e4:	f107 0010 	add.w	r0, r7, #16
 80192e8:	4623      	mov	r3, r4
 80192ea:	f7fe fda8 	bl	8017e3e <RegionCommonLinkAdrReqVerifyParams>
 80192ee:	4603      	mov	r3, r0
 80192f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80192f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80192f8:	2b07      	cmp	r3, #7
 80192fa:	d10d      	bne.n	8019318 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80192fc:	4b11      	ldr	r3, [pc, #68]	; (8019344 <RegionEU868LinkAdrReq+0x240>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019304:	220c      	movs	r2, #12
 8019306:	2100      	movs	r1, #0
 8019308:	4618      	mov	r0, r3
 801930a:	f000 fb83 	bl	8019a14 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801930e:	4b0d      	ldr	r3, [pc, #52]	; (8019344 <RegionEU868LinkAdrReq+0x240>)
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019314:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019318:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801931c:	68bb      	ldr	r3, [r7, #8]
 801931e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019320:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019328:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801932c:	683b      	ldr	r3, [r7, #0]
 801932e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019332:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019336:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019338:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801933c:	4618      	mov	r0, r3
 801933e:	374c      	adds	r7, #76	; 0x4c
 8019340:	46bd      	mov	sp, r7
 8019342:	bd90      	pop	{r4, r7, pc}
 8019344:	20001738 	.word	0x20001738

08019348 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b084      	sub	sp, #16
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019350:	2307      	movs	r3, #7
 8019352:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019354:	2300      	movs	r3, #0
 8019356:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	685b      	ldr	r3, [r3, #4]
 801935c:	f107 020e 	add.w	r2, r7, #14
 8019360:	4611      	mov	r1, r2
 8019362:	4618      	mov	r0, r3
 8019364:	f7ff f8de 	bl	8018524 <VerifyRfFreq>
 8019368:	4603      	mov	r3, r0
 801936a:	f083 0301 	eor.w	r3, r3, #1
 801936e:	b2db      	uxtb	r3, r3
 8019370:	2b00      	cmp	r3, #0
 8019372:	d003      	beq.n	801937c <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019374:	7bfb      	ldrb	r3, [r7, #15]
 8019376:	f023 0301 	bic.w	r3, r3, #1
 801937a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	f993 3000 	ldrsb.w	r3, [r3]
 8019382:	2207      	movs	r2, #7
 8019384:	2100      	movs	r1, #0
 8019386:	4618      	mov	r0, r3
 8019388:	f7fe fb47 	bl	8017a1a <RegionCommonValueInRange>
 801938c:	4603      	mov	r3, r0
 801938e:	2b00      	cmp	r3, #0
 8019390:	d103      	bne.n	801939a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019392:	7bfb      	ldrb	r3, [r7, #15]
 8019394:	f023 0302 	bic.w	r3, r3, #2
 8019398:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193a0:	2205      	movs	r2, #5
 80193a2:	2100      	movs	r1, #0
 80193a4:	4618      	mov	r0, r3
 80193a6:	f7fe fb38 	bl	8017a1a <RegionCommonValueInRange>
 80193aa:	4603      	mov	r3, r0
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d103      	bne.n	80193b8 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80193b0:	7bfb      	ldrb	r3, [r7, #15]
 80193b2:	f023 0304 	bic.w	r3, r3, #4
 80193b6:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80193b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3710      	adds	r7, #16
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
	...

080193c4 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b086      	sub	sp, #24
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80193cc:	2303      	movs	r3, #3
 80193ce:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d114      	bne.n	8019404 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80193e0:	b2db      	uxtb	r3, r3
 80193e2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80193e4:	f107 0308 	add.w	r3, r7, #8
 80193e8:	4618      	mov	r0, r3
 80193ea:	f000 f9ff 	bl	80197ec <RegionEU868ChannelsRemove>
 80193ee:	4603      	mov	r3, r0
 80193f0:	f083 0301 	eor.w	r3, r3, #1
 80193f4:	b2db      	uxtb	r3, r3
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d03b      	beq.n	8019472 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80193fa:	7dfb      	ldrb	r3, [r7, #23]
 80193fc:	f023 0303 	bic.w	r3, r3, #3
 8019400:	75fb      	strb	r3, [r7, #23]
 8019402:	e036      	b.n	8019472 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019410:	b2db      	uxtb	r3, r3
 8019412:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019414:	f107 030c 	add.w	r3, r7, #12
 8019418:	4618      	mov	r0, r3
 801941a:	f000 f945 	bl	80196a8 <RegionEU868ChannelAdd>
 801941e:	4603      	mov	r3, r0
 8019420:	2b06      	cmp	r3, #6
 8019422:	d820      	bhi.n	8019466 <RegionEU868NewChannelReq+0xa2>
 8019424:	a201      	add	r2, pc, #4	; (adr r2, 801942c <RegionEU868NewChannelReq+0x68>)
 8019426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801942a:	bf00      	nop
 801942c:	08019471 	.word	0x08019471
 8019430:	08019467 	.word	0x08019467
 8019434:	08019467 	.word	0x08019467
 8019438:	08019467 	.word	0x08019467
 801943c:	08019449 	.word	0x08019449
 8019440:	08019453 	.word	0x08019453
 8019444:	0801945d 	.word	0x0801945d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019448:	7dfb      	ldrb	r3, [r7, #23]
 801944a:	f023 0301 	bic.w	r3, r3, #1
 801944e:	75fb      	strb	r3, [r7, #23]
                break;
 8019450:	e00f      	b.n	8019472 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019452:	7dfb      	ldrb	r3, [r7, #23]
 8019454:	f023 0302 	bic.w	r3, r3, #2
 8019458:	75fb      	strb	r3, [r7, #23]
                break;
 801945a:	e00a      	b.n	8019472 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 801945c:	7dfb      	ldrb	r3, [r7, #23]
 801945e:	f023 0303 	bic.w	r3, r3, #3
 8019462:	75fb      	strb	r3, [r7, #23]
                break;
 8019464:	e005      	b.n	8019472 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019466:	7dfb      	ldrb	r3, [r7, #23]
 8019468:	f023 0303 	bic.w	r3, r3, #3
 801946c:	75fb      	strb	r3, [r7, #23]
                break;
 801946e:	e000      	b.n	8019472 <RegionEU868NewChannelReq+0xae>
                break;
 8019470:	bf00      	nop
            }
        }
    }

    return status;
 8019472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019476:	4618      	mov	r0, r3
 8019478:	3718      	adds	r7, #24
 801947a:	46bd      	mov	sp, r7
 801947c:	bd80      	pop	{r7, pc}
 801947e:	bf00      	nop

08019480 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019480:	b480      	push	{r7}
 8019482:	b083      	sub	sp, #12
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019488:	f04f 33ff 	mov.w	r3, #4294967295
}
 801948c:	4618      	mov	r0, r3
 801948e:	370c      	adds	r7, #12
 8019490:	46bd      	mov	sp, r7
 8019492:	bc80      	pop	{r7}
 8019494:	4770      	bx	lr
	...

08019498 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019498:	b580      	push	{r7, lr}
 801949a:	b084      	sub	sp, #16
 801949c:	af00      	add	r7, sp, #0
 801949e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80194a0:	2303      	movs	r3, #3
 80194a2:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80194a4:	2300      	movs	r3, #0
 80194a6:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	781b      	ldrb	r3, [r3, #0]
 80194ac:	2b0f      	cmp	r3, #15
 80194ae:	d901      	bls.n	80194b4 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80194b0:	2300      	movs	r3, #0
 80194b2:	e035      	b.n	8019520 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	685b      	ldr	r3, [r3, #4]
 80194b8:	f107 020e 	add.w	r2, r7, #14
 80194bc:	4611      	mov	r1, r2
 80194be:	4618      	mov	r0, r3
 80194c0:	f7ff f830 	bl	8018524 <VerifyRfFreq>
 80194c4:	4603      	mov	r3, r0
 80194c6:	f083 0301 	eor.w	r3, r3, #1
 80194ca:	b2db      	uxtb	r3, r3
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d003      	beq.n	80194d8 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80194d0:	7bfb      	ldrb	r3, [r7, #15]
 80194d2:	f023 0301 	bic.w	r3, r3, #1
 80194d6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80194d8:	4b13      	ldr	r3, [pc, #76]	; (8019528 <RegionEU868DlChannelReq+0x90>)
 80194da:	681a      	ldr	r2, [r3, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	4619      	mov	r1, r3
 80194e2:	460b      	mov	r3, r1
 80194e4:	005b      	lsls	r3, r3, #1
 80194e6:	440b      	add	r3, r1
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	4413      	add	r3, r2
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d103      	bne.n	80194fa <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 80194f2:	7bfb      	ldrb	r3, [r7, #15]
 80194f4:	f023 0302 	bic.w	r3, r3, #2
 80194f8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80194fa:	7bfb      	ldrb	r3, [r7, #15]
 80194fc:	2b03      	cmp	r3, #3
 80194fe:	d10d      	bne.n	801951c <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019500:	4b09      	ldr	r3, [pc, #36]	; (8019528 <RegionEU868DlChannelReq+0x90>)
 8019502:	6819      	ldr	r1, [r3, #0]
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	781b      	ldrb	r3, [r3, #0]
 8019508:	4618      	mov	r0, r3
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	685a      	ldr	r2, [r3, #4]
 801950e:	4603      	mov	r3, r0
 8019510:	005b      	lsls	r3, r3, #1
 8019512:	4403      	add	r3, r0
 8019514:	009b      	lsls	r3, r3, #2
 8019516:	440b      	add	r3, r1
 8019518:	3304      	adds	r3, #4
 801951a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801951c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019520:	4618      	mov	r0, r3
 8019522:	3710      	adds	r7, #16
 8019524:	46bd      	mov	sp, r7
 8019526:	bd80      	pop	{r7, pc}
 8019528:	20001738 	.word	0x20001738

0801952c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801952c:	b480      	push	{r7}
 801952e:	b083      	sub	sp, #12
 8019530:	af00      	add	r7, sp, #0
 8019532:	4603      	mov	r3, r0
 8019534:	460a      	mov	r2, r1
 8019536:	71fb      	strb	r3, [r7, #7]
 8019538:	4613      	mov	r3, r2
 801953a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801953c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019540:	4618      	mov	r0, r3
 8019542:	370c      	adds	r7, #12
 8019544:	46bd      	mov	sp, r7
 8019546:	bc80      	pop	{r7}
 8019548:	4770      	bx	lr
	...

0801954c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801954c:	b580      	push	{r7, lr}
 801954e:	b09a      	sub	sp, #104	; 0x68
 8019550:	af02      	add	r7, sp, #8
 8019552:	60f8      	str	r0, [r7, #12]
 8019554:	60b9      	str	r1, [r7, #8]
 8019556:	607a      	str	r2, [r7, #4]
 8019558:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801955a:	2300      	movs	r3, #0
 801955c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019560:	2300      	movs	r3, #0
 8019562:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019566:	2300      	movs	r3, #0
 8019568:	64fb      	str	r3, [r7, #76]	; 0x4c
 801956a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801956e:	2200      	movs	r2, #0
 8019570:	601a      	str	r2, [r3, #0]
 8019572:	605a      	str	r2, [r3, #4]
 8019574:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019576:	230c      	movs	r3, #12
 8019578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801957c:	2307      	movs	r3, #7
 801957e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019580:	4b47      	ldr	r3, [pc, #284]	; (80196a0 <RegionEU868NextChannel+0x154>)
 8019582:	681b      	ldr	r3, [r3, #0]
 8019584:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019588:	2201      	movs	r2, #1
 801958a:	2100      	movs	r1, #0
 801958c:	4618      	mov	r0, r3
 801958e:	f7fe fa95 	bl	8017abc <RegionCommonCountChannels>
 8019592:	4603      	mov	r3, r0
 8019594:	2b00      	cmp	r3, #0
 8019596:	d10a      	bne.n	80195ae <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019598:	4b41      	ldr	r3, [pc, #260]	; (80196a0 <RegionEU868NextChannel+0x154>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 80195a0:	4b3f      	ldr	r3, [pc, #252]	; (80196a0 <RegionEU868NextChannel+0x154>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	f042 0207 	orr.w	r2, r2, #7
 80195a8:	b292      	uxth	r2, r2
 80195aa:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	7a5b      	ldrb	r3, [r3, #9]
 80195b2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80195be:	4b38      	ldr	r3, [pc, #224]	; (80196a0 <RegionEU868NextChannel+0x154>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80195c6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80195c8:	4b35      	ldr	r3, [pc, #212]	; (80196a0 <RegionEU868NextChannel+0x154>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 80195ce:	4b35      	ldr	r3, [pc, #212]	; (80196a4 <RegionEU868NextChannel+0x158>)
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80195d4:	2310      	movs	r3, #16
 80195d6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80195d8:	f107 0312 	add.w	r3, r7, #18
 80195dc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	7a9b      	ldrb	r3, [r3, #10]
 80195ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80195f2:	2306      	movs	r3, #6
 80195f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80195f8:	68fa      	ldr	r2, [r7, #12]
 80195fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80195fe:	320c      	adds	r2, #12
 8019600:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019604:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019608:	68fb      	ldr	r3, [r7, #12]
 801960a:	7d1b      	ldrb	r3, [r3, #20]
 801960c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	8adb      	ldrh	r3, [r3, #22]
 801961a:	4619      	mov	r1, r3
 801961c:	4610      	mov	r0, r2
 801961e:	f7fe fff7 	bl	8018610 <GetTimeOnAir>
 8019622:	4603      	mov	r3, r0
 8019624:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019626:	f107 0314 	add.w	r3, r7, #20
 801962a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801962c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019630:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019634:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	9301      	str	r3, [sp, #4]
 801963c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019640:	9300      	str	r3, [sp, #0]
 8019642:	460b      	mov	r3, r1
 8019644:	6839      	ldr	r1, [r7, #0]
 8019646:	f7fe fe50 	bl	80182ea <RegionCommonIdentifyChannels>
 801964a:	4603      	mov	r3, r0
 801964c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019654:	2b00      	cmp	r3, #0
 8019656:	d10e      	bne.n	8019676 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019658:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801965c:	3b01      	subs	r3, #1
 801965e:	4619      	mov	r1, r3
 8019660:	2000      	movs	r0, #0
 8019662:	f000 f985 	bl	8019970 <randr>
 8019666:	4603      	mov	r3, r0
 8019668:	3360      	adds	r3, #96	; 0x60
 801966a:	443b      	add	r3, r7
 801966c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019670:	68bb      	ldr	r3, [r7, #8]
 8019672:	701a      	strb	r2, [r3, #0]
 8019674:	e00e      	b.n	8019694 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801967a:	2b0c      	cmp	r3, #12
 801967c:	d10a      	bne.n	8019694 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801967e:	4b08      	ldr	r3, [pc, #32]	; (80196a0 <RegionEU868NextChannel+0x154>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019686:	4b06      	ldr	r3, [pc, #24]	; (80196a0 <RegionEU868NextChannel+0x154>)
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	f042 0207 	orr.w	r2, r2, #7
 801968e:	b292      	uxth	r2, r2
 8019690:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019698:	4618      	mov	r0, r3
 801969a:	3760      	adds	r7, #96	; 0x60
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}
 80196a0:	20001738 	.word	0x20001738
 80196a4:	20001734 	.word	0x20001734

080196a8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b084      	sub	sp, #16
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80196b0:	2300      	movs	r3, #0
 80196b2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 80196b4:	2300      	movs	r3, #0
 80196b6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 80196b8:	2300      	movs	r3, #0
 80196ba:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	791b      	ldrb	r3, [r3, #4]
 80196c0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80196c2:	7b7b      	ldrb	r3, [r7, #13]
 80196c4:	2b02      	cmp	r3, #2
 80196c6:	d801      	bhi.n	80196cc <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80196c8:	2306      	movs	r3, #6
 80196ca:	e089      	b.n	80197e0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80196cc:	7b7b      	ldrb	r3, [r7, #13]
 80196ce:	2b0f      	cmp	r3, #15
 80196d0:	d901      	bls.n	80196d6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80196d2:	2303      	movs	r3, #3
 80196d4:	e084      	b.n	80197e0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	7a1b      	ldrb	r3, [r3, #8]
 80196dc:	f343 0303 	sbfx	r3, r3, #0, #4
 80196e0:	b25b      	sxtb	r3, r3
 80196e2:	2207      	movs	r2, #7
 80196e4:	2100      	movs	r1, #0
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7fe f997 	bl	8017a1a <RegionCommonValueInRange>
 80196ec:	4603      	mov	r3, r0
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d101      	bne.n	80196f6 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80196f2:	2301      	movs	r3, #1
 80196f4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	7a1b      	ldrb	r3, [r3, #8]
 80196fc:	f343 1303 	sbfx	r3, r3, #4, #4
 8019700:	b25b      	sxtb	r3, r3
 8019702:	2207      	movs	r2, #7
 8019704:	2100      	movs	r1, #0
 8019706:	4618      	mov	r0, r3
 8019708:	f7fe f987 	bl	8017a1a <RegionCommonValueInRange>
 801970c:	4603      	mov	r3, r0
 801970e:	2b00      	cmp	r3, #0
 8019710:	d101      	bne.n	8019716 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019712:	2301      	movs	r3, #1
 8019714:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	7a1b      	ldrb	r3, [r3, #8]
 801971c:	f343 0303 	sbfx	r3, r3, #0, #4
 8019720:	b25a      	sxtb	r2, r3
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	7a1b      	ldrb	r3, [r3, #8]
 8019728:	f343 1303 	sbfx	r3, r3, #4, #4
 801972c:	b25b      	sxtb	r3, r3
 801972e:	429a      	cmp	r2, r3
 8019730:	dd01      	ble.n	8019736 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019732:	2301      	movs	r3, #1
 8019734:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019736:	7bbb      	ldrb	r3, [r7, #14]
 8019738:	f083 0301 	eor.w	r3, r3, #1
 801973c:	b2db      	uxtb	r3, r3
 801973e:	2b00      	cmp	r3, #0
 8019740:	d010      	beq.n	8019764 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	f107 020c 	add.w	r2, r7, #12
 801974c:	4611      	mov	r1, r2
 801974e:	4618      	mov	r0, r3
 8019750:	f7fe fee8 	bl	8018524 <VerifyRfFreq>
 8019754:	4603      	mov	r3, r0
 8019756:	f083 0301 	eor.w	r3, r3, #1
 801975a:	b2db      	uxtb	r3, r3
 801975c:	2b00      	cmp	r3, #0
 801975e:	d001      	beq.n	8019764 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019760:	2301      	movs	r3, #1
 8019762:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019764:	7bfb      	ldrb	r3, [r7, #15]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d004      	beq.n	8019774 <RegionEU868ChannelAdd+0xcc>
 801976a:	7bbb      	ldrb	r3, [r7, #14]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d001      	beq.n	8019774 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019770:	2306      	movs	r3, #6
 8019772:	e035      	b.n	80197e0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019774:	7bfb      	ldrb	r3, [r7, #15]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d001      	beq.n	801977e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801977a:	2305      	movs	r3, #5
 801977c:	e030      	b.n	80197e0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801977e:	7bbb      	ldrb	r3, [r7, #14]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d001      	beq.n	8019788 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019784:	2304      	movs	r3, #4
 8019786:	e02b      	b.n	80197e0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019788:	4b17      	ldr	r3, [pc, #92]	; (80197e8 <RegionEU868ChannelAdd+0x140>)
 801978a:	6819      	ldr	r1, [r3, #0]
 801978c:	7b7a      	ldrb	r2, [r7, #13]
 801978e:	4613      	mov	r3, r2
 8019790:	005b      	lsls	r3, r3, #1
 8019792:	4413      	add	r3, r2
 8019794:	009b      	lsls	r3, r3, #2
 8019796:	18c8      	adds	r0, r1, r3
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	220c      	movs	r2, #12
 801979e:	4619      	mov	r1, r3
 80197a0:	f000 f8fd 	bl	801999e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80197a4:	4b10      	ldr	r3, [pc, #64]	; (80197e8 <RegionEU868ChannelAdd+0x140>)
 80197a6:	6819      	ldr	r1, [r3, #0]
 80197a8:	7b7a      	ldrb	r2, [r7, #13]
 80197aa:	7b38      	ldrb	r0, [r7, #12]
 80197ac:	4613      	mov	r3, r2
 80197ae:	005b      	lsls	r3, r3, #1
 80197b0:	4413      	add	r3, r2
 80197b2:	009b      	lsls	r3, r3, #2
 80197b4:	440b      	add	r3, r1
 80197b6:	3309      	adds	r3, #9
 80197b8:	4602      	mov	r2, r0
 80197ba:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80197bc:	4b0a      	ldr	r3, [pc, #40]	; (80197e8 <RegionEU868ChannelAdd+0x140>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 80197c4:	b21a      	sxth	r2, r3
 80197c6:	7b7b      	ldrb	r3, [r7, #13]
 80197c8:	2101      	movs	r1, #1
 80197ca:	fa01 f303 	lsl.w	r3, r1, r3
 80197ce:	b21b      	sxth	r3, r3
 80197d0:	4313      	orrs	r3, r2
 80197d2:	b21a      	sxth	r2, r3
 80197d4:	4b04      	ldr	r3, [pc, #16]	; (80197e8 <RegionEU868ChannelAdd+0x140>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	b292      	uxth	r2, r2
 80197da:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 80197de:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80197e0:	4618      	mov	r0, r3
 80197e2:	3710      	adds	r7, #16
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}
 80197e8:	20001738 	.word	0x20001738

080197ec <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b086      	sub	sp, #24
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	781b      	ldrb	r3, [r3, #0]
 80197f8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80197fa:	7dfb      	ldrb	r3, [r7, #23]
 80197fc:	2b02      	cmp	r3, #2
 80197fe:	d801      	bhi.n	8019804 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019800:	2300      	movs	r3, #0
 8019802:	e016      	b.n	8019832 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019804:	4b0d      	ldr	r3, [pc, #52]	; (801983c <RegionEU868ChannelsRemove+0x50>)
 8019806:	6819      	ldr	r1, [r3, #0]
 8019808:	7dfa      	ldrb	r2, [r7, #23]
 801980a:	4613      	mov	r3, r2
 801980c:	005b      	lsls	r3, r3, #1
 801980e:	4413      	add	r3, r2
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	440b      	add	r3, r1
 8019814:	461a      	mov	r2, r3
 8019816:	2300      	movs	r3, #0
 8019818:	6013      	str	r3, [r2, #0]
 801981a:	6053      	str	r3, [r2, #4]
 801981c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801981e:	4b07      	ldr	r3, [pc, #28]	; (801983c <RegionEU868ChannelsRemove+0x50>)
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019826:	7df9      	ldrb	r1, [r7, #23]
 8019828:	2210      	movs	r2, #16
 801982a:	4618      	mov	r0, r3
 801982c:	f7fe f912 	bl	8017a54 <RegionCommonChanDisable>
 8019830:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019832:	4618      	mov	r0, r3
 8019834:	3718      	adds	r7, #24
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
 801983a:	bf00      	nop
 801983c:	20001738 	.word	0x20001738

08019840 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019840:	b590      	push	{r4, r7, lr}
 8019842:	b085      	sub	sp, #20
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801984e:	4b20      	ldr	r3, [pc, #128]	; (80198d0 <RegionEU868SetContinuousWave+0x90>)
 8019850:	681a      	ldr	r2, [r3, #0]
 8019852:	4b20      	ldr	r3, [pc, #128]	; (80198d4 <RegionEU868SetContinuousWave+0x94>)
 8019854:	6819      	ldr	r1, [r3, #0]
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	781b      	ldrb	r3, [r3, #0]
 801985a:	461c      	mov	r4, r3
 801985c:	4623      	mov	r3, r4
 801985e:	005b      	lsls	r3, r3, #1
 8019860:	4423      	add	r3, r4
 8019862:	009b      	lsls	r3, r3, #2
 8019864:	440b      	add	r3, r1
 8019866:	3309      	adds	r3, #9
 8019868:	781b      	ldrb	r3, [r3, #0]
 801986a:	4619      	mov	r1, r3
 801986c:	460b      	mov	r3, r1
 801986e:	005b      	lsls	r3, r3, #1
 8019870:	440b      	add	r3, r1
 8019872:	00db      	lsls	r3, r3, #3
 8019874:	4413      	add	r3, r2
 8019876:	3302      	adds	r3, #2
 8019878:	f993 3000 	ldrsb.w	r3, [r3]
 801987c:	4619      	mov	r1, r3
 801987e:	f7fe fdd4 	bl	801842a <RegionCommonLimitTxPower>
 8019882:	4603      	mov	r3, r0
 8019884:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019886:	2300      	movs	r3, #0
 8019888:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801988a:	4b12      	ldr	r3, [pc, #72]	; (80198d4 <RegionEU868SetContinuousWave+0x94>)
 801988c:	681a      	ldr	r2, [r3, #0]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	781b      	ldrb	r3, [r3, #0]
 8019892:	4619      	mov	r1, r3
 8019894:	460b      	mov	r3, r1
 8019896:	005b      	lsls	r3, r3, #1
 8019898:	440b      	add	r3, r1
 801989a:	009b      	lsls	r3, r3, #2
 801989c:	4413      	add	r3, r2
 801989e:	681b      	ldr	r3, [r3, #0]
 80198a0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	6859      	ldr	r1, [r3, #4]
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	689a      	ldr	r2, [r3, #8]
 80198aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198ae:	4618      	mov	r0, r3
 80198b0:	f7fe fc2c 	bl	801810c <RegionCommonComputeTxPower>
 80198b4:	4603      	mov	r3, r0
 80198b6:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80198b8:	4b07      	ldr	r3, [pc, #28]	; (80198d8 <RegionEU868SetContinuousWave+0x98>)
 80198ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198bc:	687a      	ldr	r2, [r7, #4]
 80198be:	8992      	ldrh	r2, [r2, #12]
 80198c0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80198c4:	68b8      	ldr	r0, [r7, #8]
 80198c6:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 80198c8:	bf00      	nop
 80198ca:	3714      	adds	r7, #20
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd90      	pop	{r4, r7, pc}
 80198d0:	20001734 	.word	0x20001734
 80198d4:	20001738 	.word	0x20001738
 80198d8:	0801f578 	.word	0x0801f578

080198dc <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80198dc:	b480      	push	{r7}
 80198de:	b085      	sub	sp, #20
 80198e0:	af00      	add	r7, sp, #0
 80198e2:	4603      	mov	r3, r0
 80198e4:	71fb      	strb	r3, [r7, #7]
 80198e6:	460b      	mov	r3, r1
 80198e8:	71bb      	strb	r3, [r7, #6]
 80198ea:	4613      	mov	r3, r2
 80198ec:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80198ee:	79ba      	ldrb	r2, [r7, #6]
 80198f0:	797b      	ldrb	r3, [r7, #5]
 80198f2:	1ad3      	subs	r3, r2, r3
 80198f4:	b2db      	uxtb	r3, r3
 80198f6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80198f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	da01      	bge.n	8019904 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019900:	2300      	movs	r3, #0
 8019902:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019904:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019906:	4618      	mov	r0, r3
 8019908:	3714      	adds	r7, #20
 801990a:	46bd      	mov	sp, r7
 801990c:	bc80      	pop	{r7}
 801990e:	4770      	bx	lr

08019910 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019910:	b480      	push	{r7}
 8019912:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019914:	4b0d      	ldr	r3, [pc, #52]	; (801994c <rand1+0x3c>)
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	4a0d      	ldr	r2, [pc, #52]	; (8019950 <rand1+0x40>)
 801991a:	fb02 f303 	mul.w	r3, r2, r3
 801991e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019922:	3339      	adds	r3, #57	; 0x39
 8019924:	4a09      	ldr	r2, [pc, #36]	; (801994c <rand1+0x3c>)
 8019926:	6013      	str	r3, [r2, #0]
 8019928:	4b08      	ldr	r3, [pc, #32]	; (801994c <rand1+0x3c>)
 801992a:	681a      	ldr	r2, [r3, #0]
 801992c:	2303      	movs	r3, #3
 801992e:	fba3 1302 	umull	r1, r3, r3, r2
 8019932:	1ad1      	subs	r1, r2, r3
 8019934:	0849      	lsrs	r1, r1, #1
 8019936:	440b      	add	r3, r1
 8019938:	0f99      	lsrs	r1, r3, #30
 801993a:	460b      	mov	r3, r1
 801993c:	07db      	lsls	r3, r3, #31
 801993e:	1a5b      	subs	r3, r3, r1
 8019940:	1ad1      	subs	r1, r2, r3
 8019942:	460b      	mov	r3, r1
}
 8019944:	4618      	mov	r0, r3
 8019946:	46bd      	mov	sp, r7
 8019948:	bc80      	pop	{r7}
 801994a:	4770      	bx	lr
 801994c:	20000148 	.word	0x20000148
 8019950:	41c64e6d 	.word	0x41c64e6d

08019954 <srand1>:

void srand1( uint32_t seed )
{
 8019954:	b480      	push	{r7}
 8019956:	b083      	sub	sp, #12
 8019958:	af00      	add	r7, sp, #0
 801995a:	6078      	str	r0, [r7, #4]
    next = seed;
 801995c:	4a03      	ldr	r2, [pc, #12]	; (801996c <srand1+0x18>)
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	6013      	str	r3, [r2, #0]
}
 8019962:	bf00      	nop
 8019964:	370c      	adds	r7, #12
 8019966:	46bd      	mov	sp, r7
 8019968:	bc80      	pop	{r7}
 801996a:	4770      	bx	lr
 801996c:	20000148 	.word	0x20000148

08019970 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019970:	b580      	push	{r7, lr}
 8019972:	b082      	sub	sp, #8
 8019974:	af00      	add	r7, sp, #0
 8019976:	6078      	str	r0, [r7, #4]
 8019978:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801997a:	f7ff ffc9 	bl	8019910 <rand1>
 801997e:	4602      	mov	r2, r0
 8019980:	6839      	ldr	r1, [r7, #0]
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	1acb      	subs	r3, r1, r3
 8019986:	3301      	adds	r3, #1
 8019988:	fb92 f1f3 	sdiv	r1, r2, r3
 801998c:	fb01 f303 	mul.w	r3, r1, r3
 8019990:	1ad2      	subs	r2, r2, r3
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	4413      	add	r3, r2
}
 8019996:	4618      	mov	r0, r3
 8019998:	3708      	adds	r7, #8
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}

0801999e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801999e:	b480      	push	{r7}
 80199a0:	b085      	sub	sp, #20
 80199a2:	af00      	add	r7, sp, #0
 80199a4:	60f8      	str	r0, [r7, #12]
 80199a6:	60b9      	str	r1, [r7, #8]
 80199a8:	4613      	mov	r3, r2
 80199aa:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80199ac:	e007      	b.n	80199be <memcpy1+0x20>
    {
        *dst++ = *src++;
 80199ae:	68ba      	ldr	r2, [r7, #8]
 80199b0:	1c53      	adds	r3, r2, #1
 80199b2:	60bb      	str	r3, [r7, #8]
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	1c59      	adds	r1, r3, #1
 80199b8:	60f9      	str	r1, [r7, #12]
 80199ba:	7812      	ldrb	r2, [r2, #0]
 80199bc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80199be:	88fb      	ldrh	r3, [r7, #6]
 80199c0:	1e5a      	subs	r2, r3, #1
 80199c2:	80fa      	strh	r2, [r7, #6]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d1f2      	bne.n	80199ae <memcpy1+0x10>
    }
}
 80199c8:	bf00      	nop
 80199ca:	bf00      	nop
 80199cc:	3714      	adds	r7, #20
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bc80      	pop	{r7}
 80199d2:	4770      	bx	lr

080199d4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80199d4:	b480      	push	{r7}
 80199d6:	b085      	sub	sp, #20
 80199d8:	af00      	add	r7, sp, #0
 80199da:	60f8      	str	r0, [r7, #12]
 80199dc:	60b9      	str	r1, [r7, #8]
 80199de:	4613      	mov	r3, r2
 80199e0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80199e2:	88fb      	ldrh	r3, [r7, #6]
 80199e4:	3b01      	subs	r3, #1
 80199e6:	68fa      	ldr	r2, [r7, #12]
 80199e8:	4413      	add	r3, r2
 80199ea:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80199ec:	e007      	b.n	80199fe <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80199ee:	68ba      	ldr	r2, [r7, #8]
 80199f0:	1c53      	adds	r3, r2, #1
 80199f2:	60bb      	str	r3, [r7, #8]
 80199f4:	68fb      	ldr	r3, [r7, #12]
 80199f6:	1e59      	subs	r1, r3, #1
 80199f8:	60f9      	str	r1, [r7, #12]
 80199fa:	7812      	ldrb	r2, [r2, #0]
 80199fc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80199fe:	88fb      	ldrh	r3, [r7, #6]
 8019a00:	1e5a      	subs	r2, r3, #1
 8019a02:	80fa      	strh	r2, [r7, #6]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d1f2      	bne.n	80199ee <memcpyr+0x1a>
    }
}
 8019a08:	bf00      	nop
 8019a0a:	bf00      	nop
 8019a0c:	3714      	adds	r7, #20
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bc80      	pop	{r7}
 8019a12:	4770      	bx	lr

08019a14 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019a14:	b480      	push	{r7}
 8019a16:	b083      	sub	sp, #12
 8019a18:	af00      	add	r7, sp, #0
 8019a1a:	6078      	str	r0, [r7, #4]
 8019a1c:	460b      	mov	r3, r1
 8019a1e:	70fb      	strb	r3, [r7, #3]
 8019a20:	4613      	mov	r3, r2
 8019a22:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019a24:	e004      	b.n	8019a30 <memset1+0x1c>
    {
        *dst++ = value;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	1c5a      	adds	r2, r3, #1
 8019a2a:	607a      	str	r2, [r7, #4]
 8019a2c:	78fa      	ldrb	r2, [r7, #3]
 8019a2e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019a30:	883b      	ldrh	r3, [r7, #0]
 8019a32:	1e5a      	subs	r2, r3, #1
 8019a34:	803a      	strh	r2, [r7, #0]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d1f5      	bne.n	8019a26 <memset1+0x12>
    }
}
 8019a3a:	bf00      	nop
 8019a3c:	bf00      	nop
 8019a3e:	370c      	adds	r7, #12
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bc80      	pop	{r7}
 8019a44:	4770      	bx	lr
	...

08019a48 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b085      	sub	sp, #20
 8019a4c:	af00      	add	r7, sp, #0
 8019a4e:	6078      	str	r0, [r7, #4]
 8019a50:	460b      	mov	r3, r1
 8019a52:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019a54:	f04f 33ff 	mov.w	r3, #4294967295
 8019a58:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d101      	bne.n	8019a64 <Crc32+0x1c>
    {
        return 0;
 8019a60:	2300      	movs	r3, #0
 8019a62:	e026      	b.n	8019ab2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019a64:	2300      	movs	r3, #0
 8019a66:	817b      	strh	r3, [r7, #10]
 8019a68:	e01d      	b.n	8019aa6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019a6a:	897b      	ldrh	r3, [r7, #10]
 8019a6c:	687a      	ldr	r2, [r7, #4]
 8019a6e:	4413      	add	r3, r2
 8019a70:	781b      	ldrb	r3, [r3, #0]
 8019a72:	461a      	mov	r2, r3
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	4053      	eors	r3, r2
 8019a78:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	813b      	strh	r3, [r7, #8]
 8019a7e:	e00c      	b.n	8019a9a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	085a      	lsrs	r2, r3, #1
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	f003 0301 	and.w	r3, r3, #1
 8019a8a:	425b      	negs	r3, r3
 8019a8c:	490b      	ldr	r1, [pc, #44]	; (8019abc <Crc32+0x74>)
 8019a8e:	400b      	ands	r3, r1
 8019a90:	4053      	eors	r3, r2
 8019a92:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019a94:	893b      	ldrh	r3, [r7, #8]
 8019a96:	3301      	adds	r3, #1
 8019a98:	813b      	strh	r3, [r7, #8]
 8019a9a:	893b      	ldrh	r3, [r7, #8]
 8019a9c:	2b07      	cmp	r3, #7
 8019a9e:	d9ef      	bls.n	8019a80 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019aa0:	897b      	ldrh	r3, [r7, #10]
 8019aa2:	3301      	adds	r3, #1
 8019aa4:	817b      	strh	r3, [r7, #10]
 8019aa6:	897a      	ldrh	r2, [r7, #10]
 8019aa8:	887b      	ldrh	r3, [r7, #2]
 8019aaa:	429a      	cmp	r2, r3
 8019aac:	d3dd      	bcc.n	8019a6a <Crc32+0x22>
        }
    }

    return ~crc;
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	43db      	mvns	r3, r3
}
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	3714      	adds	r7, #20
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bc80      	pop	{r7}
 8019aba:	4770      	bx	lr
 8019abc:	edb88320 	.word	0xedb88320

08019ac0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b084      	sub	sp, #16
 8019ac4:	af02      	add	r7, sp, #8
 8019ac6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019ac8:	4a24      	ldr	r2, [pc, #144]	; (8019b5c <RadioInit+0x9c>)
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019ace:	4b24      	ldr	r3, [pc, #144]	; (8019b60 <RadioInit+0xa0>)
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019ad4:	4b22      	ldr	r3, [pc, #136]	; (8019b60 <RadioInit+0xa0>)
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019ada:	4b21      	ldr	r3, [pc, #132]	; (8019b60 <RadioInit+0xa0>)
 8019adc:	2200      	movs	r2, #0
 8019ade:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019ae0:	4b1f      	ldr	r3, [pc, #124]	; (8019b60 <RadioInit+0xa0>)
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019ae6:	481f      	ldr	r0, [pc, #124]	; (8019b64 <RadioInit+0xa4>)
 8019ae8:	f001 ffc2 	bl	801ba70 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019aec:	4b1c      	ldr	r3, [pc, #112]	; (8019b60 <RadioInit+0xa0>)
 8019aee:	2200      	movs	r2, #0
 8019af0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019af2:	4b1b      	ldr	r3, [pc, #108]	; (8019b60 <RadioInit+0xa0>)
 8019af4:	2200      	movs	r2, #0
 8019af6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019af8:	f002 fa56 	bl	801bfa8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019afc:	2100      	movs	r1, #0
 8019afe:	2000      	movs	r0, #0
 8019b00:	f002 fe22 	bl	801c748 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019b04:	2204      	movs	r2, #4
 8019b06:	2100      	movs	r1, #0
 8019b08:	2001      	movs	r0, #1
 8019b0a:	f002 fbdf 	bl	801c2cc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019b0e:	2300      	movs	r3, #0
 8019b10:	2200      	movs	r2, #0
 8019b12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019b16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019b1a:	f002 fb0f 	bl	801c13c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019b1e:	f000 fe99 	bl	801a854 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019b22:	2300      	movs	r3, #0
 8019b24:	9300      	str	r3, [sp, #0]
 8019b26:	4b10      	ldr	r3, [pc, #64]	; (8019b68 <RadioInit+0xa8>)
 8019b28:	2200      	movs	r2, #0
 8019b2a:	f04f 31ff 	mov.w	r1, #4294967295
 8019b2e:	480f      	ldr	r0, [pc, #60]	; (8019b6c <RadioInit+0xac>)
 8019b30:	f004 f82c 	bl	801db8c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019b34:	2300      	movs	r3, #0
 8019b36:	9300      	str	r3, [sp, #0]
 8019b38:	4b0d      	ldr	r3, [pc, #52]	; (8019b70 <RadioInit+0xb0>)
 8019b3a:	2200      	movs	r2, #0
 8019b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8019b40:	480c      	ldr	r0, [pc, #48]	; (8019b74 <RadioInit+0xb4>)
 8019b42:	f004 f823 	bl	801db8c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019b46:	4809      	ldr	r0, [pc, #36]	; (8019b6c <RadioInit+0xac>)
 8019b48:	f004 f8c4 	bl	801dcd4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019b4c:	4809      	ldr	r0, [pc, #36]	; (8019b74 <RadioInit+0xb4>)
 8019b4e:	f004 f8c1 	bl	801dcd4 <UTIL_TIMER_Stop>
}
 8019b52:	bf00      	nop
 8019b54:	3708      	adds	r7, #8
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}
 8019b5a:	bf00      	nop
 8019b5c:	2000183c 	.word	0x2000183c
 8019b60:	20001840 	.word	0x20001840
 8019b64:	0801ac4d 	.word	0x0801ac4d
 8019b68:	0801abd5 	.word	0x0801abd5
 8019b6c:	2000189c 	.word	0x2000189c
 8019b70:	0801abe9 	.word	0x0801abe9
 8019b74:	200018b4 	.word	0x200018b4

08019b78 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019b7c:	f001 ffc0 	bl	801bb00 <SUBGRF_GetOperatingMode>
 8019b80:	4603      	mov	r3, r0
 8019b82:	2b07      	cmp	r3, #7
 8019b84:	d00a      	beq.n	8019b9c <RadioGetStatus+0x24>
 8019b86:	2b07      	cmp	r3, #7
 8019b88:	dc0a      	bgt.n	8019ba0 <RadioGetStatus+0x28>
 8019b8a:	2b04      	cmp	r3, #4
 8019b8c:	d002      	beq.n	8019b94 <RadioGetStatus+0x1c>
 8019b8e:	2b05      	cmp	r3, #5
 8019b90:	d002      	beq.n	8019b98 <RadioGetStatus+0x20>
 8019b92:	e005      	b.n	8019ba0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019b94:	2302      	movs	r3, #2
 8019b96:	e004      	b.n	8019ba2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019b98:	2301      	movs	r3, #1
 8019b9a:	e002      	b.n	8019ba2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019b9c:	2303      	movs	r3, #3
 8019b9e:	e000      	b.n	8019ba2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8019ba0:	2300      	movs	r3, #0
    }
}
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	bd80      	pop	{r7, pc}
	...

08019ba8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b082      	sub	sp, #8
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	4603      	mov	r3, r0
 8019bb0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8019bb2:	4a2a      	ldr	r2, [pc, #168]	; (8019c5c <RadioSetModem+0xb4>)
 8019bb4:	79fb      	ldrb	r3, [r7, #7]
 8019bb6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8019bb8:	79fb      	ldrb	r3, [r7, #7]
 8019bba:	4618      	mov	r0, r3
 8019bbc:	f003 f997 	bl	801ceee <RFW_SetRadioModem>
    switch( modem )
 8019bc0:	79fb      	ldrb	r3, [r7, #7]
 8019bc2:	2b05      	cmp	r3, #5
 8019bc4:	d80e      	bhi.n	8019be4 <RadioSetModem+0x3c>
 8019bc6:	a201      	add	r2, pc, #4	; (adr r2, 8019bcc <RadioSetModem+0x24>)
 8019bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bcc:	08019bf3 	.word	0x08019bf3
 8019bd0:	08019c01 	.word	0x08019c01
 8019bd4:	08019be5 	.word	0x08019be5
 8019bd8:	08019c27 	.word	0x08019c27
 8019bdc:	08019c35 	.word	0x08019c35
 8019be0:	08019c43 	.word	0x08019c43
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8019be4:	2003      	movs	r0, #3
 8019be6:	f002 fb4b 	bl	801c280 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019bea:	4b1c      	ldr	r3, [pc, #112]	; (8019c5c <RadioSetModem+0xb4>)
 8019bec:	2200      	movs	r2, #0
 8019bee:	735a      	strb	r2, [r3, #13]
        break;
 8019bf0:	e02f      	b.n	8019c52 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019bf2:	2000      	movs	r0, #0
 8019bf4:	f002 fb44 	bl	801c280 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019bf8:	4b18      	ldr	r3, [pc, #96]	; (8019c5c <RadioSetModem+0xb4>)
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	735a      	strb	r2, [r3, #13]
        break;
 8019bfe:	e028      	b.n	8019c52 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019c00:	2001      	movs	r0, #1
 8019c02:	f002 fb3d 	bl	801c280 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019c06:	4b15      	ldr	r3, [pc, #84]	; (8019c5c <RadioSetModem+0xb4>)
 8019c08:	7b5a      	ldrb	r2, [r3, #13]
 8019c0a:	4b14      	ldr	r3, [pc, #80]	; (8019c5c <RadioSetModem+0xb4>)
 8019c0c:	7b1b      	ldrb	r3, [r3, #12]
 8019c0e:	429a      	cmp	r2, r3
 8019c10:	d01e      	beq.n	8019c50 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019c12:	4b12      	ldr	r3, [pc, #72]	; (8019c5c <RadioSetModem+0xb4>)
 8019c14:	7b1a      	ldrb	r2, [r3, #12]
 8019c16:	4b11      	ldr	r3, [pc, #68]	; (8019c5c <RadioSetModem+0xb4>)
 8019c18:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8019c1a:	4b10      	ldr	r3, [pc, #64]	; (8019c5c <RadioSetModem+0xb4>)
 8019c1c:	7b5b      	ldrb	r3, [r3, #13]
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f000 ffa2 	bl	801ab68 <RadioSetPublicNetwork>
        }
        break;
 8019c24:	e014      	b.n	8019c50 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019c26:	2002      	movs	r0, #2
 8019c28:	f002 fb2a 	bl	801c280 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019c2c:	4b0b      	ldr	r3, [pc, #44]	; (8019c5c <RadioSetModem+0xb4>)
 8019c2e:	2200      	movs	r2, #0
 8019c30:	735a      	strb	r2, [r3, #13]
        break;
 8019c32:	e00e      	b.n	8019c52 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019c34:	2002      	movs	r0, #2
 8019c36:	f002 fb23 	bl	801c280 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019c3a:	4b08      	ldr	r3, [pc, #32]	; (8019c5c <RadioSetModem+0xb4>)
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	735a      	strb	r2, [r3, #13]
        break;
 8019c40:	e007      	b.n	8019c52 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019c42:	2000      	movs	r0, #0
 8019c44:	f002 fb1c 	bl	801c280 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019c48:	4b04      	ldr	r3, [pc, #16]	; (8019c5c <RadioSetModem+0xb4>)
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	735a      	strb	r2, [r3, #13]
        break;
 8019c4e:	e000      	b.n	8019c52 <RadioSetModem+0xaa>
        break;
 8019c50:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019c52:	bf00      	nop
 8019c54:	3708      	adds	r7, #8
 8019c56:	46bd      	mov	sp, r7
 8019c58:	bd80      	pop	{r7, pc}
 8019c5a:	bf00      	nop
 8019c5c:	20001840 	.word	0x20001840

08019c60 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b082      	sub	sp, #8
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019c68:	6878      	ldr	r0, [r7, #4]
 8019c6a:	f002 fac3 	bl	801c1f4 <SUBGRF_SetRfFrequency>
}
 8019c6e:	bf00      	nop
 8019c70:	3708      	adds	r7, #8
 8019c72:	46bd      	mov	sp, r7
 8019c74:	bd80      	pop	{r7, pc}

08019c76 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019c76:	b580      	push	{r7, lr}
 8019c78:	b090      	sub	sp, #64	; 0x40
 8019c7a:	af0a      	add	r7, sp, #40	; 0x28
 8019c7c:	60f8      	str	r0, [r7, #12]
 8019c7e:	60b9      	str	r1, [r7, #8]
 8019c80:	603b      	str	r3, [r7, #0]
 8019c82:	4613      	mov	r3, r2
 8019c84:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019c86:	2301      	movs	r3, #1
 8019c88:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019c8a:	2300      	movs	r3, #0
 8019c8c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8019c8e:	2300      	movs	r3, #0
 8019c90:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8019c92:	f000 fdf2 	bl	801a87a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019c96:	2000      	movs	r0, #0
 8019c98:	f7ff ff86 	bl	8019ba8 <RadioSetModem>

    RadioSetChannel( freq );
 8019c9c:	68f8      	ldr	r0, [r7, #12]
 8019c9e:	f7ff ffdf 	bl	8019c60 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	9308      	str	r3, [sp, #32]
 8019caa:	2300      	movs	r3, #0
 8019cac:	9307      	str	r3, [sp, #28]
 8019cae:	2300      	movs	r3, #0
 8019cb0:	9306      	str	r3, [sp, #24]
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	9305      	str	r3, [sp, #20]
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	9304      	str	r3, [sp, #16]
 8019cba:	2300      	movs	r3, #0
 8019cbc:	9303      	str	r3, [sp, #12]
 8019cbe:	2300      	movs	r3, #0
 8019cc0:	9302      	str	r3, [sp, #8]
 8019cc2:	2303      	movs	r3, #3
 8019cc4:	9301      	str	r3, [sp, #4]
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	9300      	str	r3, [sp, #0]
 8019cca:	2300      	movs	r3, #0
 8019ccc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8019cd0:	68b9      	ldr	r1, [r7, #8]
 8019cd2:	2000      	movs	r0, #0
 8019cd4:	f000 f83c 	bl	8019d50 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019cd8:	2000      	movs	r0, #0
 8019cda:	f000 fdd5 	bl	801a888 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8019cde:	f000 ff71 	bl	801abc4 <RadioGetWakeupTime>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7e8 fe89 	bl	80029fc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019cea:	f004 f90d 	bl	801df08 <UTIL_TIMER_GetCurrentTime>
 8019cee:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019cf0:	e00d      	b.n	8019d0e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8019cf2:	2000      	movs	r0, #0
 8019cf4:	f000 feb6 	bl	801aa64 <RadioRssi>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8019cfc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	dd02      	ble.n	8019d0e <RadioIsChannelFree+0x98>
        {
            status = false;
 8019d08:	2300      	movs	r3, #0
 8019d0a:	75fb      	strb	r3, [r7, #23]
            break;
 8019d0c:	e006      	b.n	8019d1c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019d0e:	6938      	ldr	r0, [r7, #16]
 8019d10:	f004 f90c 	bl	801df2c <UTIL_TIMER_GetElapsedTime>
 8019d14:	4602      	mov	r2, r0
 8019d16:	683b      	ldr	r3, [r7, #0]
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d8ea      	bhi.n	8019cf2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8019d1c:	f000 fdad 	bl	801a87a <RadioStandby>

    return status;
 8019d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	3718      	adds	r7, #24
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}

08019d2a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8019d2a:	b580      	push	{r7, lr}
 8019d2c:	b082      	sub	sp, #8
 8019d2e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019d30:	2300      	movs	r3, #0
 8019d32:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019d34:	2300      	movs	r3, #0
 8019d36:	2200      	movs	r2, #0
 8019d38:	2100      	movs	r1, #0
 8019d3a:	2000      	movs	r0, #0
 8019d3c:	f002 f9fe 	bl	801c13c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019d40:	f001 ffaf 	bl	801bca2 <SUBGRF_GetRandom>
 8019d44:	6078      	str	r0, [r7, #4]

    return rnd;
 8019d46:	687b      	ldr	r3, [r7, #4]
}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	3708      	adds	r7, #8
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bd80      	pop	{r7, pc}

08019d50 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b08a      	sub	sp, #40	; 0x28
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	60b9      	str	r1, [r7, #8]
 8019d58:	607a      	str	r2, [r7, #4]
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	4603      	mov	r3, r0
 8019d5e:	73fb      	strb	r3, [r7, #15]
 8019d60:	4613      	mov	r3, r2
 8019d62:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019d64:	4ab9      	ldr	r2, [pc, #740]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019d66:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019d6a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8019d6c:	f003 f87d 	bl	801ce6a <RFW_DeInit>
    if( rxContinuous == true )
 8019d70:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d001      	beq.n	8019d7c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019d78:	2300      	movs	r3, #0
 8019d7a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019d7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d004      	beq.n	8019d8e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019d84:	4ab2      	ldr	r2, [pc, #712]	; (801a050 <RadioSetRxConfig+0x300>)
 8019d86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019d8a:	7013      	strb	r3, [r2, #0]
 8019d8c:	e002      	b.n	8019d94 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8019d8e:	4bb0      	ldr	r3, [pc, #704]	; (801a050 <RadioSetRxConfig+0x300>)
 8019d90:	22ff      	movs	r2, #255	; 0xff
 8019d92:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019d94:	7bfb      	ldrb	r3, [r7, #15]
 8019d96:	2b05      	cmp	r3, #5
 8019d98:	d009      	beq.n	8019dae <RadioSetRxConfig+0x5e>
 8019d9a:	2b05      	cmp	r3, #5
 8019d9c:	f300 81d7 	bgt.w	801a14e <RadioSetRxConfig+0x3fe>
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	f000 80bf 	beq.w	8019f24 <RadioSetRxConfig+0x1d4>
 8019da6:	2b01      	cmp	r3, #1
 8019da8:	f000 8124 	beq.w	8019ff4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019dac:	e1cf      	b.n	801a14e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8019dae:	2001      	movs	r0, #1
 8019db0:	f002 f8bc 	bl	801bf2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019db4:	4ba5      	ldr	r3, [pc, #660]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019db6:	2200      	movs	r2, #0
 8019db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019dbc:	4aa3      	ldr	r2, [pc, #652]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8019dc2:	4ba2      	ldr	r3, [pc, #648]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019dc4:	2209      	movs	r2, #9
 8019dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019dca:	4ba0      	ldr	r3, [pc, #640]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019dcc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019dd0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019dd2:	68b8      	ldr	r0, [r7, #8]
 8019dd4:	f002 ff7c 	bl	801ccd0 <SUBGRF_GetFskBandwidthRegValue>
 8019dd8:	4603      	mov	r3, r0
 8019dda:	461a      	mov	r2, r3
 8019ddc:	4b9b      	ldr	r3, [pc, #620]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019de2:	4b9a      	ldr	r3, [pc, #616]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019de4:	2200      	movs	r2, #0
 8019de6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019de8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019dea:	00db      	lsls	r3, r3, #3
 8019dec:	b29a      	uxth	r2, r3
 8019dee:	4b97      	ldr	r3, [pc, #604]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019df0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8019df2:	4b96      	ldr	r3, [pc, #600]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019df4:	2200      	movs	r2, #0
 8019df6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8019df8:	4b94      	ldr	r3, [pc, #592]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019dfa:	2210      	movs	r2, #16
 8019dfc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019dfe:	4b93      	ldr	r3, [pc, #588]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019e00:	2200      	movs	r2, #0
 8019e02:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019e04:	4b91      	ldr	r3, [pc, #580]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019e06:	2200      	movs	r2, #0
 8019e08:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019e0a:	4b91      	ldr	r3, [pc, #580]	; (801a050 <RadioSetRxConfig+0x300>)
 8019e0c:	781a      	ldrb	r2, [r3, #0]
 8019e0e:	4b8f      	ldr	r3, [pc, #572]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019e10:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019e12:	4b8e      	ldr	r3, [pc, #568]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019e14:	2201      	movs	r2, #1
 8019e16:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019e18:	4b8c      	ldr	r3, [pc, #560]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8019e1e:	2005      	movs	r0, #5
 8019e20:	f7ff fec2 	bl	8019ba8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e24:	488b      	ldr	r0, [pc, #556]	; (801a054 <RadioSetRxConfig+0x304>)
 8019e26:	f002 fb1f 	bl	801c468 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e2a:	488b      	ldr	r0, [pc, #556]	; (801a058 <RadioSetRxConfig+0x308>)
 8019e2c:	f002 fbee 	bl	801c60c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019e30:	4a8a      	ldr	r2, [pc, #552]	; (801a05c <RadioSetRxConfig+0x30c>)
 8019e32:	f107 031c 	add.w	r3, r7, #28
 8019e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019e3a:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e3e:	f107 031c 	add.w	r3, r7, #28
 8019e42:	4618      	mov	r0, r3
 8019e44:	f001 feab 	bl	801bb9e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019e48:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019e4c:	f001 fef6 	bl	801bc3c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019e50:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019e54:	f000 fe25 	bl	801aaa2 <RadioRead>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8019e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e62:	f023 0310 	bic.w	r3, r3, #16
 8019e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e6e:	4619      	mov	r1, r3
 8019e70:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019e74:	f000 fe03 	bl	801aa7e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019e78:	2104      	movs	r1, #4
 8019e7a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8019e7e:	f000 fdfe 	bl	801aa7e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019e82:	f640 009b 	movw	r0, #2203	; 0x89b
 8019e86:	f000 fe0c 	bl	801aaa2 <RadioRead>
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e94:	f023 031c 	bic.w	r3, r3, #28
 8019e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ea0:	f043 0308 	orr.w	r3, r3, #8
 8019ea4:	b2db      	uxtb	r3, r3
 8019ea6:	4619      	mov	r1, r3
 8019ea8:	f640 009b 	movw	r0, #2203	; 0x89b
 8019eac:	f000 fde7 	bl	801aa7e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8019eb0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019eb4:	f000 fdf5 	bl	801aaa2 <RadioRead>
 8019eb8:	4603      	mov	r3, r0
 8019eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ec2:	f023 0318 	bic.w	r3, r3, #24
 8019ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ece:	f043 0318 	orr.w	r3, r3, #24
 8019ed2:	b2db      	uxtb	r3, r3
 8019ed4:	4619      	mov	r1, r3
 8019ed6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019eda:	f000 fdd0 	bl	801aa7e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8019ede:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019ee2:	f000 fdde 	bl	801aaa2 <RadioRead>
 8019ee6:	4603      	mov	r3, r0
 8019ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8019eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8019ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019efc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019f00:	b2db      	uxtb	r3, r3
 8019f02:	4619      	mov	r1, r3
 8019f04:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019f08:	f000 fdb9 	bl	801aa7e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019f0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019f0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019f12:	fb02 f303 	mul.w	r3, r2, r3
 8019f16:	461a      	mov	r2, r3
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f1e:	4a4b      	ldr	r2, [pc, #300]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f20:	6093      	str	r3, [r2, #8]
            break;
 8019f22:	e115      	b.n	801a150 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019f24:	2000      	movs	r0, #0
 8019f26:	f002 f801 	bl	801bf2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019f2a:	4b48      	ldr	r3, [pc, #288]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019f32:	4a46      	ldr	r2, [pc, #280]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019f38:	4b44      	ldr	r3, [pc, #272]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f3a:	220b      	movs	r2, #11
 8019f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019f40:	68b8      	ldr	r0, [r7, #8]
 8019f42:	f002 fec5 	bl	801ccd0 <SUBGRF_GetFskBandwidthRegValue>
 8019f46:	4603      	mov	r3, r0
 8019f48:	461a      	mov	r2, r3
 8019f4a:	4b40      	ldr	r3, [pc, #256]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019f50:	4b3e      	ldr	r3, [pc, #248]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f52:	2200      	movs	r2, #0
 8019f54:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019f56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019f58:	00db      	lsls	r3, r3, #3
 8019f5a:	b29a      	uxth	r2, r3
 8019f5c:	4b3b      	ldr	r3, [pc, #236]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f5e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019f60:	4b3a      	ldr	r3, [pc, #232]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f62:	2204      	movs	r2, #4
 8019f64:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019f66:	4b39      	ldr	r3, [pc, #228]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f68:	2218      	movs	r2, #24
 8019f6a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019f6c:	4b37      	ldr	r3, [pc, #220]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f6e:	2200      	movs	r2, #0
 8019f70:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019f72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019f76:	f083 0301 	eor.w	r3, r3, #1
 8019f7a:	b2db      	uxtb	r3, r3
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	4b33      	ldr	r3, [pc, #204]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f80:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019f82:	4b33      	ldr	r3, [pc, #204]	; (801a050 <RadioSetRxConfig+0x300>)
 8019f84:	781a      	ldrb	r2, [r3, #0]
 8019f86:	4b31      	ldr	r3, [pc, #196]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f88:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019f8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d003      	beq.n	8019f9a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019f92:	4b2e      	ldr	r3, [pc, #184]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f94:	22f2      	movs	r2, #242	; 0xf2
 8019f96:	75da      	strb	r2, [r3, #23]
 8019f98:	e002      	b.n	8019fa0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019f9a:	4b2c      	ldr	r3, [pc, #176]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019f9c:	2201      	movs	r2, #1
 8019f9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019fa0:	4b2a      	ldr	r3, [pc, #168]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019fa2:	2201      	movs	r2, #1
 8019fa4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019fa6:	f000 fc68 	bl	801a87a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019faa:	2000      	movs	r0, #0
 8019fac:	f7ff fdfc 	bl	8019ba8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019fb0:	4828      	ldr	r0, [pc, #160]	; (801a054 <RadioSetRxConfig+0x304>)
 8019fb2:	f002 fa59 	bl	801c468 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019fb6:	4828      	ldr	r0, [pc, #160]	; (801a058 <RadioSetRxConfig+0x308>)
 8019fb8:	f002 fb28 	bl	801c60c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019fbc:	4a28      	ldr	r2, [pc, #160]	; (801a060 <RadioSetRxConfig+0x310>)
 8019fbe:	f107 0314 	add.w	r3, r7, #20
 8019fc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019fc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8019fca:	f107 0314 	add.w	r3, r7, #20
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f001 fde5 	bl	801bb9e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019fd4:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019fd8:	f001 fe30 	bl	801bc3c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019fdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019fde:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019fe2:	fb02 f303 	mul.w	r3, r2, r3
 8019fe6:	461a      	mov	r2, r3
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fee:	4a17      	ldr	r2, [pc, #92]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019ff0:	6093      	str	r3, [r2, #8]
            break;
 8019ff2:	e0ad      	b.n	801a150 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	f001 ff99 	bl	801bf2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019ffa:	4b14      	ldr	r3, [pc, #80]	; (801a04c <RadioSetRxConfig+0x2fc>)
 8019ffc:	2201      	movs	r2, #1
 8019ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	b2da      	uxtb	r2, r3
 801a006:	4b11      	ldr	r3, [pc, #68]	; (801a04c <RadioSetRxConfig+0x2fc>)
 801a008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a00c:	4a15      	ldr	r2, [pc, #84]	; (801a064 <RadioSetRxConfig+0x314>)
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	4413      	add	r3, r2
 801a012:	781a      	ldrb	r2, [r3, #0]
 801a014:	4b0d      	ldr	r3, [pc, #52]	; (801a04c <RadioSetRxConfig+0x2fc>)
 801a016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a01a:	4a0c      	ldr	r2, [pc, #48]	; (801a04c <RadioSetRxConfig+0x2fc>)
 801a01c:	7bbb      	ldrb	r3, [r7, #14]
 801a01e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a022:	68bb      	ldr	r3, [r7, #8]
 801a024:	2b00      	cmp	r3, #0
 801a026:	d105      	bne.n	801a034 <RadioSetRxConfig+0x2e4>
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b0b      	cmp	r3, #11
 801a02c:	d008      	beq.n	801a040 <RadioSetRxConfig+0x2f0>
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2b0c      	cmp	r3, #12
 801a032:	d005      	beq.n	801a040 <RadioSetRxConfig+0x2f0>
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	2b01      	cmp	r3, #1
 801a038:	d116      	bne.n	801a068 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2b0c      	cmp	r3, #12
 801a03e:	d113      	bne.n	801a068 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a040:	4b02      	ldr	r3, [pc, #8]	; (801a04c <RadioSetRxConfig+0x2fc>)
 801a042:	2201      	movs	r2, #1
 801a044:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a048:	e012      	b.n	801a070 <RadioSetRxConfig+0x320>
 801a04a:	bf00      	nop
 801a04c:	20001840 	.word	0x20001840
 801a050:	2000014c 	.word	0x2000014c
 801a054:	20001878 	.word	0x20001878
 801a058:	2000184e 	.word	0x2000184e
 801a05c:	0801ef94 	.word	0x0801ef94
 801a060:	0801ef9c 	.word	0x0801ef9c
 801a064:	0801f604 	.word	0x0801f604
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a068:	4b3b      	ldr	r3, [pc, #236]	; (801a158 <RadioSetRxConfig+0x408>)
 801a06a:	2200      	movs	r2, #0
 801a06c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a070:	4b39      	ldr	r3, [pc, #228]	; (801a158 <RadioSetRxConfig+0x408>)
 801a072:	2201      	movs	r2, #1
 801a074:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a076:	4b38      	ldr	r3, [pc, #224]	; (801a158 <RadioSetRxConfig+0x408>)
 801a078:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a07c:	2b05      	cmp	r3, #5
 801a07e:	d004      	beq.n	801a08a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a080:	4b35      	ldr	r3, [pc, #212]	; (801a158 <RadioSetRxConfig+0x408>)
 801a082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a086:	2b06      	cmp	r3, #6
 801a088:	d10a      	bne.n	801a0a0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a08a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a08c:	2b0b      	cmp	r3, #11
 801a08e:	d803      	bhi.n	801a098 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a090:	4b31      	ldr	r3, [pc, #196]	; (801a158 <RadioSetRxConfig+0x408>)
 801a092:	220c      	movs	r2, #12
 801a094:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a096:	e006      	b.n	801a0a6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a098:	4a2f      	ldr	r2, [pc, #188]	; (801a158 <RadioSetRxConfig+0x408>)
 801a09a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a09c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a09e:	e002      	b.n	801a0a6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a0a0:	4a2d      	ldr	r2, [pc, #180]	; (801a158 <RadioSetRxConfig+0x408>)
 801a0a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a0a4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a0a6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a0aa:	4b2b      	ldr	r3, [pc, #172]	; (801a158 <RadioSetRxConfig+0x408>)
 801a0ac:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a0ae:	4b2b      	ldr	r3, [pc, #172]	; (801a15c <RadioSetRxConfig+0x40c>)
 801a0b0:	781a      	ldrb	r2, [r3, #0]
 801a0b2:	4b29      	ldr	r3, [pc, #164]	; (801a158 <RadioSetRxConfig+0x408>)
 801a0b4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a0b6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a0ba:	4b27      	ldr	r3, [pc, #156]	; (801a158 <RadioSetRxConfig+0x408>)
 801a0bc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a0c0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a0c4:	4b24      	ldr	r3, [pc, #144]	; (801a158 <RadioSetRxConfig+0x408>)
 801a0c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a0ca:	f000 fbd6 	bl	801a87a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a0ce:	2001      	movs	r0, #1
 801a0d0:	f7ff fd6a 	bl	8019ba8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0d4:	4822      	ldr	r0, [pc, #136]	; (801a160 <RadioSetRxConfig+0x410>)
 801a0d6:	f002 f9c7 	bl	801c468 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0da:	4822      	ldr	r0, [pc, #136]	; (801a164 <RadioSetRxConfig+0x414>)
 801a0dc:	f002 fa96 	bl	801c60c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a0e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a0e2:	b2db      	uxtb	r3, r3
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	f001 ff30 	bl	801bf4a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a0ea:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a0ee:	f002 fbe9 	bl	801c8c4 <SUBGRF_ReadRegister>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	f003 0301 	and.w	r3, r3, #1
 801a0f8:	b2db      	uxtb	r3, r3
 801a0fa:	4619      	mov	r1, r3
 801a0fc:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a100:	f002 fbcc 	bl	801c89c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a104:	4b14      	ldr	r3, [pc, #80]	; (801a158 <RadioSetRxConfig+0x408>)
 801a106:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a10a:	2b01      	cmp	r3, #1
 801a10c:	d10d      	bne.n	801a12a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a10e:	f240 7036 	movw	r0, #1846	; 0x736
 801a112:	f002 fbd7 	bl	801c8c4 <SUBGRF_ReadRegister>
 801a116:	4603      	mov	r3, r0
 801a118:	f023 0304 	bic.w	r3, r3, #4
 801a11c:	b2db      	uxtb	r3, r3
 801a11e:	4619      	mov	r1, r3
 801a120:	f240 7036 	movw	r0, #1846	; 0x736
 801a124:	f002 fbba 	bl	801c89c <SUBGRF_WriteRegister>
 801a128:	e00c      	b.n	801a144 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a12a:	f240 7036 	movw	r0, #1846	; 0x736
 801a12e:	f002 fbc9 	bl	801c8c4 <SUBGRF_ReadRegister>
 801a132:	4603      	mov	r3, r0
 801a134:	f043 0304 	orr.w	r3, r3, #4
 801a138:	b2db      	uxtb	r3, r3
 801a13a:	4619      	mov	r1, r3
 801a13c:	f240 7036 	movw	r0, #1846	; 0x736
 801a140:	f002 fbac 	bl	801c89c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a144:	4b04      	ldr	r3, [pc, #16]	; (801a158 <RadioSetRxConfig+0x408>)
 801a146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a14a:	609a      	str	r2, [r3, #8]
            break;
 801a14c:	e000      	b.n	801a150 <RadioSetRxConfig+0x400>
            break;
 801a14e:	bf00      	nop
    }
}
 801a150:	bf00      	nop
 801a152:	3728      	adds	r7, #40	; 0x28
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}
 801a158:	20001840 	.word	0x20001840
 801a15c:	2000014c 	.word	0x2000014c
 801a160:	20001878 	.word	0x20001878
 801a164:	2000184e 	.word	0x2000184e

0801a168 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b086      	sub	sp, #24
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	60ba      	str	r2, [r7, #8]
 801a170:	607b      	str	r3, [r7, #4]
 801a172:	4603      	mov	r3, r0
 801a174:	73fb      	strb	r3, [r7, #15]
 801a176:	460b      	mov	r3, r1
 801a178:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a17a:	f002 fe76 	bl	801ce6a <RFW_DeInit>
    switch( modem )
 801a17e:	7bfb      	ldrb	r3, [r7, #15]
 801a180:	2b04      	cmp	r3, #4
 801a182:	f000 80c7 	beq.w	801a314 <RadioSetTxConfig+0x1ac>
 801a186:	2b04      	cmp	r3, #4
 801a188:	f300 80d6 	bgt.w	801a338 <RadioSetTxConfig+0x1d0>
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d002      	beq.n	801a196 <RadioSetTxConfig+0x2e>
 801a190:	2b01      	cmp	r3, #1
 801a192:	d059      	beq.n	801a248 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a194:	e0d0      	b.n	801a338 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a196:	4b77      	ldr	r3, [pc, #476]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a198:	2200      	movs	r2, #0
 801a19a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a19e:	4a75      	ldr	r2, [pc, #468]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1a0:	6a3b      	ldr	r3, [r7, #32]
 801a1a2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a1a4:	4b73      	ldr	r3, [pc, #460]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1a6:	220b      	movs	r2, #11
 801a1a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a1ac:	6878      	ldr	r0, [r7, #4]
 801a1ae:	f002 fd8f 	bl	801ccd0 <SUBGRF_GetFskBandwidthRegValue>
 801a1b2:	4603      	mov	r3, r0
 801a1b4:	461a      	mov	r2, r3
 801a1b6:	4b6f      	ldr	r3, [pc, #444]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a1bc:	4a6d      	ldr	r2, [pc, #436]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a1c2:	4b6c      	ldr	r3, [pc, #432]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a1c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a1ca:	00db      	lsls	r3, r3, #3
 801a1cc:	b29a      	uxth	r2, r3
 801a1ce:	4b69      	ldr	r3, [pc, #420]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1d0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a1d2:	4b68      	ldr	r3, [pc, #416]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1d4:	2204      	movs	r2, #4
 801a1d6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a1d8:	4b66      	ldr	r3, [pc, #408]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1da:	2218      	movs	r2, #24
 801a1dc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a1de:	4b65      	ldr	r3, [pc, #404]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a1e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a1e8:	f083 0301 	eor.w	r3, r3, #1
 801a1ec:	b2db      	uxtb	r3, r3
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	4b60      	ldr	r3, [pc, #384]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1f2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a1f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d003      	beq.n	801a204 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a1fc:	4b5d      	ldr	r3, [pc, #372]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a1fe:	22f2      	movs	r2, #242	; 0xf2
 801a200:	75da      	strb	r2, [r3, #23]
 801a202:	e002      	b.n	801a20a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a204:	4b5b      	ldr	r3, [pc, #364]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a206:	2201      	movs	r2, #1
 801a208:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a20a:	4b5a      	ldr	r3, [pc, #360]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a20c:	2201      	movs	r2, #1
 801a20e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a210:	f000 fb33 	bl	801a87a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a214:	2000      	movs	r0, #0
 801a216:	f7ff fcc7 	bl	8019ba8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a21a:	4857      	ldr	r0, [pc, #348]	; (801a378 <RadioSetTxConfig+0x210>)
 801a21c:	f002 f924 	bl	801c468 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a220:	4856      	ldr	r0, [pc, #344]	; (801a37c <RadioSetTxConfig+0x214>)
 801a222:	f002 f9f3 	bl	801c60c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a226:	4a56      	ldr	r2, [pc, #344]	; (801a380 <RadioSetTxConfig+0x218>)
 801a228:	f107 0310 	add.w	r3, r7, #16
 801a22c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a230:	e883 0003 	stmia.w	r3, {r0, r1}
 801a234:	f107 0310 	add.w	r3, r7, #16
 801a238:	4618      	mov	r0, r3
 801a23a:	f001 fcb0 	bl	801bb9e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a23e:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a242:	f001 fcfb 	bl	801bc3c <SUBGRF_SetWhiteningSeed>
            break;
 801a246:	e078      	b.n	801a33a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a248:	4b4a      	ldr	r3, [pc, #296]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a24a:	2201      	movs	r2, #1
 801a24c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a250:	6a3b      	ldr	r3, [r7, #32]
 801a252:	b2da      	uxtb	r2, r3
 801a254:	4b47      	ldr	r3, [pc, #284]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a25a:	4a4a      	ldr	r2, [pc, #296]	; (801a384 <RadioSetTxConfig+0x21c>)
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	4413      	add	r3, r2
 801a260:	781a      	ldrb	r2, [r3, #0]
 801a262:	4b44      	ldr	r3, [pc, #272]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a268:	4a42      	ldr	r2, [pc, #264]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a26a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a26e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	2b00      	cmp	r3, #0
 801a276:	d105      	bne.n	801a284 <RadioSetTxConfig+0x11c>
 801a278:	6a3b      	ldr	r3, [r7, #32]
 801a27a:	2b0b      	cmp	r3, #11
 801a27c:	d008      	beq.n	801a290 <RadioSetTxConfig+0x128>
 801a27e:	6a3b      	ldr	r3, [r7, #32]
 801a280:	2b0c      	cmp	r3, #12
 801a282:	d005      	beq.n	801a290 <RadioSetTxConfig+0x128>
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	2b01      	cmp	r3, #1
 801a288:	d107      	bne.n	801a29a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a28a:	6a3b      	ldr	r3, [r7, #32]
 801a28c:	2b0c      	cmp	r3, #12
 801a28e:	d104      	bne.n	801a29a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a290:	4b38      	ldr	r3, [pc, #224]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a292:	2201      	movs	r2, #1
 801a294:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a298:	e003      	b.n	801a2a2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a29a:	4b36      	ldr	r3, [pc, #216]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a29c:	2200      	movs	r2, #0
 801a29e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a2a2:	4b34      	ldr	r3, [pc, #208]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2a4:	2201      	movs	r2, #1
 801a2a6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a2a8:	4b32      	ldr	r3, [pc, #200]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a2ae:	2b05      	cmp	r3, #5
 801a2b0:	d004      	beq.n	801a2bc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a2b2:	4b30      	ldr	r3, [pc, #192]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a2b8:	2b06      	cmp	r3, #6
 801a2ba:	d10a      	bne.n	801a2d2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a2bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a2be:	2b0b      	cmp	r3, #11
 801a2c0:	d803      	bhi.n	801a2ca <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a2c2:	4b2c      	ldr	r3, [pc, #176]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2c4:	220c      	movs	r2, #12
 801a2c6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a2c8:	e006      	b.n	801a2d8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a2ca:	4a2a      	ldr	r2, [pc, #168]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a2ce:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a2d0:	e002      	b.n	801a2d8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a2d2:	4a28      	ldr	r2, [pc, #160]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a2d6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a2d8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a2dc:	4b25      	ldr	r3, [pc, #148]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2de:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a2e0:	4b29      	ldr	r3, [pc, #164]	; (801a388 <RadioSetTxConfig+0x220>)
 801a2e2:	781a      	ldrb	r2, [r3, #0]
 801a2e4:	4b23      	ldr	r3, [pc, #140]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2e6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a2e8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a2ec:	4b21      	ldr	r3, [pc, #132]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2ee:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a2f2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a2f6:	4b1f      	ldr	r3, [pc, #124]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a2f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a2fc:	f000 fabd 	bl	801a87a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a300:	2001      	movs	r0, #1
 801a302:	f7ff fc51 	bl	8019ba8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a306:	481c      	ldr	r0, [pc, #112]	; (801a378 <RadioSetTxConfig+0x210>)
 801a308:	f002 f8ae 	bl	801c468 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a30c:	481b      	ldr	r0, [pc, #108]	; (801a37c <RadioSetTxConfig+0x214>)
 801a30e:	f002 f97d 	bl	801c60c <SUBGRF_SetPacketParams>
            break;
 801a312:	e012      	b.n	801a33a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a314:	2004      	movs	r0, #4
 801a316:	f7ff fc47 	bl	8019ba8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a31a:	4b16      	ldr	r3, [pc, #88]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a31c:	2202      	movs	r2, #2
 801a31e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a322:	4a14      	ldr	r2, [pc, #80]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a324:	6a3b      	ldr	r3, [r7, #32]
 801a326:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a328:	4b12      	ldr	r3, [pc, #72]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a32a:	2216      	movs	r2, #22
 801a32c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a330:	4811      	ldr	r0, [pc, #68]	; (801a378 <RadioSetTxConfig+0x210>)
 801a332:	f002 f899 	bl	801c468 <SUBGRF_SetModulationParams>
            break;
 801a336:	e000      	b.n	801a33a <RadioSetTxConfig+0x1d2>
            break;
 801a338:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a33e:	4618      	mov	r0, r3
 801a340:	f002 fbc8 	bl	801cad4 <SUBGRF_SetRfTxPower>
 801a344:	4603      	mov	r3, r0
 801a346:	461a      	mov	r2, r3
 801a348:	4b0a      	ldr	r3, [pc, #40]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a34a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a34e:	210e      	movs	r1, #14
 801a350:	f640 101f 	movw	r0, #2335	; 0x91f
 801a354:	f002 faa2 	bl	801c89c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a358:	4b06      	ldr	r3, [pc, #24]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a35a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a35e:	4618      	mov	r0, r3
 801a360:	f002 fd97 	bl	801ce92 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a364:	4a03      	ldr	r2, [pc, #12]	; (801a374 <RadioSetTxConfig+0x20c>)
 801a366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a368:	6053      	str	r3, [r2, #4]
}
 801a36a:	bf00      	nop
 801a36c:	3718      	adds	r7, #24
 801a36e:	46bd      	mov	sp, r7
 801a370:	bd80      	pop	{r7, pc}
 801a372:	bf00      	nop
 801a374:	20001840 	.word	0x20001840
 801a378:	20001878 	.word	0x20001878
 801a37c:	2000184e 	.word	0x2000184e
 801a380:	0801ef9c 	.word	0x0801ef9c
 801a384:	0801f604 	.word	0x0801f604
 801a388:	2000014c 	.word	0x2000014c

0801a38c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a38c:	b480      	push	{r7}
 801a38e:	b083      	sub	sp, #12
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
    return true;
 801a394:	2301      	movs	r3, #1
}
 801a396:	4618      	mov	r0, r3
 801a398:	370c      	adds	r7, #12
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bc80      	pop	{r7}
 801a39e:	4770      	bx	lr

0801a3a0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a3a0:	b480      	push	{r7}
 801a3a2:	b085      	sub	sp, #20
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a3ae:	79fb      	ldrb	r3, [r7, #7]
 801a3b0:	2b0a      	cmp	r3, #10
 801a3b2:	d83e      	bhi.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
 801a3b4:	a201      	add	r2, pc, #4	; (adr r2, 801a3bc <RadioGetLoRaBandwidthInHz+0x1c>)
 801a3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a3ba:	bf00      	nop
 801a3bc:	0801a3e9 	.word	0x0801a3e9
 801a3c0:	0801a3f9 	.word	0x0801a3f9
 801a3c4:	0801a409 	.word	0x0801a409
 801a3c8:	0801a419 	.word	0x0801a419
 801a3cc:	0801a421 	.word	0x0801a421
 801a3d0:	0801a427 	.word	0x0801a427
 801a3d4:	0801a42d 	.word	0x0801a42d
 801a3d8:	0801a433 	.word	0x0801a433
 801a3dc:	0801a3f1 	.word	0x0801a3f1
 801a3e0:	0801a401 	.word	0x0801a401
 801a3e4:	0801a411 	.word	0x0801a411
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a3e8:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a3ec:	60fb      	str	r3, [r7, #12]
        break;
 801a3ee:	e020      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a3f0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a3f4:	60fb      	str	r3, [r7, #12]
        break;
 801a3f6:	e01c      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a3f8:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a3fc:	60fb      	str	r3, [r7, #12]
        break;
 801a3fe:	e018      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a400:	f245 1361 	movw	r3, #20833	; 0x5161
 801a404:	60fb      	str	r3, [r7, #12]
        break;
 801a406:	e014      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a408:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a40c:	60fb      	str	r3, [r7, #12]
        break;
 801a40e:	e010      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a410:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a414:	60fb      	str	r3, [r7, #12]
        break;
 801a416:	e00c      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a418:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a41c:	60fb      	str	r3, [r7, #12]
        break;
 801a41e:	e008      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a420:	4b07      	ldr	r3, [pc, #28]	; (801a440 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a422:	60fb      	str	r3, [r7, #12]
        break;
 801a424:	e005      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a426:	4b07      	ldr	r3, [pc, #28]	; (801a444 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a428:	60fb      	str	r3, [r7, #12]
        break;
 801a42a:	e002      	b.n	801a432 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a42c:	4b06      	ldr	r3, [pc, #24]	; (801a448 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a42e:	60fb      	str	r3, [r7, #12]
        break;
 801a430:	bf00      	nop
    }

    return bandwidthInHz;
 801a432:	68fb      	ldr	r3, [r7, #12]
}
 801a434:	4618      	mov	r0, r3
 801a436:	3714      	adds	r7, #20
 801a438:	46bd      	mov	sp, r7
 801a43a:	bc80      	pop	{r7}
 801a43c:	4770      	bx	lr
 801a43e:	bf00      	nop
 801a440:	0001e848 	.word	0x0001e848
 801a444:	0003d090 	.word	0x0003d090
 801a448:	0007a120 	.word	0x0007a120

0801a44c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a44c:	b480      	push	{r7}
 801a44e:	b083      	sub	sp, #12
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	4608      	mov	r0, r1
 801a456:	4611      	mov	r1, r2
 801a458:	461a      	mov	r2, r3
 801a45a:	4603      	mov	r3, r0
 801a45c:	70fb      	strb	r3, [r7, #3]
 801a45e:	460b      	mov	r3, r1
 801a460:	803b      	strh	r3, [r7, #0]
 801a462:	4613      	mov	r3, r2
 801a464:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a466:	883b      	ldrh	r3, [r7, #0]
 801a468:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a46a:	78ba      	ldrb	r2, [r7, #2]
 801a46c:	f082 0201 	eor.w	r2, r2, #1
 801a470:	b2d2      	uxtb	r2, r2
 801a472:	2a00      	cmp	r2, #0
 801a474:	d001      	beq.n	801a47a <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a476:	2208      	movs	r2, #8
 801a478:	e000      	b.n	801a47c <RadioGetGfskTimeOnAirNumerator+0x30>
 801a47a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a47c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a47e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a482:	7c3b      	ldrb	r3, [r7, #16]
 801a484:	7d39      	ldrb	r1, [r7, #20]
 801a486:	2900      	cmp	r1, #0
 801a488:	d001      	beq.n	801a48e <RadioGetGfskTimeOnAirNumerator+0x42>
 801a48a:	2102      	movs	r1, #2
 801a48c:	e000      	b.n	801a490 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a48e:	2100      	movs	r1, #0
 801a490:	440b      	add	r3, r1
 801a492:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a494:	4413      	add	r3, r2
}
 801a496:	4618      	mov	r0, r3
 801a498:	370c      	adds	r7, #12
 801a49a:	46bd      	mov	sp, r7
 801a49c:	bc80      	pop	{r7}
 801a49e:	4770      	bx	lr

0801a4a0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a4a0:	b480      	push	{r7}
 801a4a2:	b08b      	sub	sp, #44	; 0x2c
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	60f8      	str	r0, [r7, #12]
 801a4a8:	60b9      	str	r1, [r7, #8]
 801a4aa:	4611      	mov	r1, r2
 801a4ac:	461a      	mov	r2, r3
 801a4ae:	460b      	mov	r3, r1
 801a4b0:	71fb      	strb	r3, [r7, #7]
 801a4b2:	4613      	mov	r3, r2
 801a4b4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a4b6:	79fb      	ldrb	r3, [r7, #7]
 801a4b8:	3304      	adds	r3, #4
 801a4ba:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a4bc:	2300      	movs	r3, #0
 801a4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a4c2:	68bb      	ldr	r3, [r7, #8]
 801a4c4:	2b05      	cmp	r3, #5
 801a4c6:	d002      	beq.n	801a4ce <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a4c8:	68bb      	ldr	r3, [r7, #8]
 801a4ca:	2b06      	cmp	r3, #6
 801a4cc:	d104      	bne.n	801a4d8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a4ce:	88bb      	ldrh	r3, [r7, #4]
 801a4d0:	2b0b      	cmp	r3, #11
 801a4d2:	d801      	bhi.n	801a4d8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a4d4:	230c      	movs	r3, #12
 801a4d6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d105      	bne.n	801a4ea <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a4de:	68bb      	ldr	r3, [r7, #8]
 801a4e0:	2b0b      	cmp	r3, #11
 801a4e2:	d008      	beq.n	801a4f6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a4e4:	68bb      	ldr	r3, [r7, #8]
 801a4e6:	2b0c      	cmp	r3, #12
 801a4e8:	d005      	beq.n	801a4f6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	2b01      	cmp	r3, #1
 801a4ee:	d105      	bne.n	801a4fc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	2b0c      	cmp	r3, #12
 801a4f4:	d102      	bne.n	801a4fc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a4fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a500:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a502:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a506:	2a00      	cmp	r2, #0
 801a508:	d001      	beq.n	801a50e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a50a:	2210      	movs	r2, #16
 801a50c:	e000      	b.n	801a510 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a50e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a510:	4413      	add	r3, r2
 801a512:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a518:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a51a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a51e:	2a00      	cmp	r2, #0
 801a520:	d001      	beq.n	801a526 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a522:	2200      	movs	r2, #0
 801a524:	e000      	b.n	801a528 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a526:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a528:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a52a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	2b06      	cmp	r3, #6
 801a530:	d803      	bhi.n	801a53a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a532:	68bb      	ldr	r3, [r7, #8]
 801a534:	009b      	lsls	r3, r3, #2
 801a536:	623b      	str	r3, [r7, #32]
 801a538:	e00e      	b.n	801a558 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a53a:	69fb      	ldr	r3, [r7, #28]
 801a53c:	3308      	adds	r3, #8
 801a53e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a544:	2b00      	cmp	r3, #0
 801a546:	d004      	beq.n	801a552 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	3b02      	subs	r3, #2
 801a54c:	009b      	lsls	r3, r3, #2
 801a54e:	623b      	str	r3, [r7, #32]
 801a550:	e002      	b.n	801a558 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a552:	68bb      	ldr	r3, [r7, #8]
 801a554:	009b      	lsls	r3, r3, #2
 801a556:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a558:	69fb      	ldr	r3, [r7, #28]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	da01      	bge.n	801a562 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a55e:	2300      	movs	r3, #0
 801a560:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a562:	69fa      	ldr	r2, [r7, #28]
 801a564:	6a3b      	ldr	r3, [r7, #32]
 801a566:	4413      	add	r3, r2
 801a568:	1e5a      	subs	r2, r3, #1
 801a56a:	6a3b      	ldr	r3, [r7, #32]
 801a56c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a570:	697a      	ldr	r2, [r7, #20]
 801a572:	fb03 f202 	mul.w	r2, r3, r2
 801a576:	88bb      	ldrh	r3, [r7, #4]
 801a578:	4413      	add	r3, r2
    int32_t intermediate =
 801a57a:	330c      	adds	r3, #12
 801a57c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a57e:	68bb      	ldr	r3, [r7, #8]
 801a580:	2b06      	cmp	r3, #6
 801a582:	d802      	bhi.n	801a58a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a584:	69bb      	ldr	r3, [r7, #24]
 801a586:	3302      	adds	r3, #2
 801a588:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a58a:	69bb      	ldr	r3, [r7, #24]
 801a58c:	009b      	lsls	r3, r3, #2
 801a58e:	1c5a      	adds	r2, r3, #1
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	3b02      	subs	r3, #2
 801a594:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a598:	4618      	mov	r0, r3
 801a59a:	372c      	adds	r7, #44	; 0x2c
 801a59c:	46bd      	mov	sp, r7
 801a59e:	bc80      	pop	{r7}
 801a5a0:	4770      	bx	lr
	...

0801a5a4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b08a      	sub	sp, #40	; 0x28
 801a5a8:	af04      	add	r7, sp, #16
 801a5aa:	60b9      	str	r1, [r7, #8]
 801a5ac:	607a      	str	r2, [r7, #4]
 801a5ae:	461a      	mov	r2, r3
 801a5b0:	4603      	mov	r3, r0
 801a5b2:	73fb      	strb	r3, [r7, #15]
 801a5b4:	4613      	mov	r3, r2
 801a5b6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a5bc:	2301      	movs	r3, #1
 801a5be:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a5c0:	7bfb      	ldrb	r3, [r7, #15]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d002      	beq.n	801a5cc <RadioTimeOnAir+0x28>
 801a5c6:	2b01      	cmp	r3, #1
 801a5c8:	d017      	beq.n	801a5fa <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a5ca:	e035      	b.n	801a638 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a5cc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a5d0:	8c3a      	ldrh	r2, [r7, #32]
 801a5d2:	7bb9      	ldrb	r1, [r7, #14]
 801a5d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a5d8:	9301      	str	r3, [sp, #4]
 801a5da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a5de:	9300      	str	r3, [sp, #0]
 801a5e0:	4603      	mov	r3, r0
 801a5e2:	6878      	ldr	r0, [r7, #4]
 801a5e4:	f7ff ff32 	bl	801a44c <RadioGetGfskTimeOnAirNumerator>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a5ee:	fb02 f303 	mul.w	r3, r2, r3
 801a5f2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	613b      	str	r3, [r7, #16]
        break;
 801a5f8:	e01e      	b.n	801a638 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a5fa:	8c39      	ldrh	r1, [r7, #32]
 801a5fc:	7bba      	ldrb	r2, [r7, #14]
 801a5fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a602:	9302      	str	r3, [sp, #8]
 801a604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a608:	9301      	str	r3, [sp, #4]
 801a60a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a60e:	9300      	str	r3, [sp, #0]
 801a610:	460b      	mov	r3, r1
 801a612:	6879      	ldr	r1, [r7, #4]
 801a614:	68b8      	ldr	r0, [r7, #8]
 801a616:	f7ff ff43 	bl	801a4a0 <RadioGetLoRaTimeOnAirNumerator>
 801a61a:	4603      	mov	r3, r0
 801a61c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a620:	fb02 f303 	mul.w	r3, r2, r3
 801a624:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801a626:	4a0a      	ldr	r2, [pc, #40]	; (801a650 <RadioTimeOnAir+0xac>)
 801a628:	68bb      	ldr	r3, [r7, #8]
 801a62a:	4413      	add	r3, r2
 801a62c:	781b      	ldrb	r3, [r3, #0]
 801a62e:	4618      	mov	r0, r3
 801a630:	f7ff feb6 	bl	801a3a0 <RadioGetLoRaBandwidthInHz>
 801a634:	6138      	str	r0, [r7, #16]
        break;
 801a636:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801a638:	697a      	ldr	r2, [r7, #20]
 801a63a:	693b      	ldr	r3, [r7, #16]
 801a63c:	4413      	add	r3, r2
 801a63e:	1e5a      	subs	r2, r3, #1
 801a640:	693b      	ldr	r3, [r7, #16]
 801a642:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a646:	4618      	mov	r0, r3
 801a648:	3718      	adds	r7, #24
 801a64a:	46bd      	mov	sp, r7
 801a64c:	bd80      	pop	{r7, pc}
 801a64e:	bf00      	nop
 801a650:	0801f604 	.word	0x0801f604

0801a654 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801a654:	b580      	push	{r7, lr}
 801a656:	b084      	sub	sp, #16
 801a658:	af00      	add	r7, sp, #0
 801a65a:	6078      	str	r0, [r7, #4]
 801a65c:	460b      	mov	r3, r1
 801a65e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801a660:	2300      	movs	r3, #0
 801a662:	2200      	movs	r2, #0
 801a664:	f240 2101 	movw	r1, #513	; 0x201
 801a668:	f240 2001 	movw	r0, #513	; 0x201
 801a66c:	f001 fd66 	bl	801c13c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a670:	4b73      	ldr	r3, [pc, #460]	; (801a840 <RadioSend+0x1ec>)
 801a672:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a676:	2101      	movs	r1, #1
 801a678:	4618      	mov	r0, r3
 801a67a:	f002 fa03 	bl	801ca84 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801a67e:	4b70      	ldr	r3, [pc, #448]	; (801a840 <RadioSend+0x1ec>)
 801a680:	781b      	ldrb	r3, [r3, #0]
 801a682:	2b01      	cmp	r3, #1
 801a684:	d112      	bne.n	801a6ac <RadioSend+0x58>
 801a686:	4b6e      	ldr	r3, [pc, #440]	; (801a840 <RadioSend+0x1ec>)
 801a688:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a68c:	2b06      	cmp	r3, #6
 801a68e:	d10d      	bne.n	801a6ac <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a690:	f640 0089 	movw	r0, #2185	; 0x889
 801a694:	f002 f916 	bl	801c8c4 <SUBGRF_ReadRegister>
 801a698:	4603      	mov	r3, r0
 801a69a:	f023 0304 	bic.w	r3, r3, #4
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	4619      	mov	r1, r3
 801a6a2:	f640 0089 	movw	r0, #2185	; 0x889
 801a6a6:	f002 f8f9 	bl	801c89c <SUBGRF_WriteRegister>
 801a6aa:	e00c      	b.n	801a6c6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a6ac:	f640 0089 	movw	r0, #2185	; 0x889
 801a6b0:	f002 f908 	bl	801c8c4 <SUBGRF_ReadRegister>
 801a6b4:	4603      	mov	r3, r0
 801a6b6:	f043 0304 	orr.w	r3, r3, #4
 801a6ba:	b2db      	uxtb	r3, r3
 801a6bc:	4619      	mov	r1, r3
 801a6be:	f640 0089 	movw	r0, #2185	; 0x889
 801a6c2:	f002 f8eb 	bl	801c89c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801a6c6:	4b5e      	ldr	r3, [pc, #376]	; (801a840 <RadioSend+0x1ec>)
 801a6c8:	781b      	ldrb	r3, [r3, #0]
 801a6ca:	2b04      	cmp	r3, #4
 801a6cc:	f200 80a8 	bhi.w	801a820 <RadioSend+0x1cc>
 801a6d0:	a201      	add	r2, pc, #4	; (adr r2, 801a6d8 <RadioSend+0x84>)
 801a6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6d6:	bf00      	nop
 801a6d8:	0801a707 	.word	0x0801a707
 801a6dc:	0801a6ed 	.word	0x0801a6ed
 801a6e0:	0801a707 	.word	0x0801a707
 801a6e4:	0801a769 	.word	0x0801a769
 801a6e8:	0801a789 	.word	0x0801a789
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801a6ec:	4a54      	ldr	r2, [pc, #336]	; (801a840 <RadioSend+0x1ec>)
 801a6ee:	78fb      	ldrb	r3, [r7, #3]
 801a6f0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a6f2:	4854      	ldr	r0, [pc, #336]	; (801a844 <RadioSend+0x1f0>)
 801a6f4:	f001 ff8a 	bl	801c60c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a6f8:	78fb      	ldrb	r3, [r7, #3]
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	4619      	mov	r1, r3
 801a6fe:	6878      	ldr	r0, [r7, #4]
 801a700:	f001 fa3a 	bl	801bb78 <SUBGRF_SendPayload>
            break;
 801a704:	e08d      	b.n	801a822 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801a706:	f002 fbb6 	bl	801ce76 <RFW_Is_Init>
 801a70a:	4603      	mov	r3, r0
 801a70c:	2b01      	cmp	r3, #1
 801a70e:	d11e      	bne.n	801a74e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801a710:	f107 020d 	add.w	r2, r7, #13
 801a714:	78fb      	ldrb	r3, [r7, #3]
 801a716:	4619      	mov	r1, r3
 801a718:	6878      	ldr	r0, [r7, #4]
 801a71a:	f002 fbc4 	bl	801cea6 <RFW_TransmitInit>
 801a71e:	4603      	mov	r3, r0
 801a720:	2b00      	cmp	r3, #0
 801a722:	d10c      	bne.n	801a73e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801a724:	7b7a      	ldrb	r2, [r7, #13]
 801a726:	4b46      	ldr	r3, [pc, #280]	; (801a840 <RadioSend+0x1ec>)
 801a728:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a72a:	4846      	ldr	r0, [pc, #280]	; (801a844 <RadioSend+0x1f0>)
 801a72c:	f001 ff6e 	bl	801c60c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801a730:	7b7b      	ldrb	r3, [r7, #13]
 801a732:	2200      	movs	r2, #0
 801a734:	4619      	mov	r1, r3
 801a736:	6878      	ldr	r0, [r7, #4]
 801a738:	f001 fa1e 	bl	801bb78 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801a73c:	e071      	b.n	801a822 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801a73e:	4b42      	ldr	r3, [pc, #264]	; (801a848 <RadioSend+0x1f4>)
 801a740:	2201      	movs	r2, #1
 801a742:	2100      	movs	r1, #0
 801a744:	2002      	movs	r0, #2
 801a746:	f003 fccf 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801a74a:	2303      	movs	r3, #3
 801a74c:	e073      	b.n	801a836 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801a74e:	4a3c      	ldr	r2, [pc, #240]	; (801a840 <RadioSend+0x1ec>)
 801a750:	78fb      	ldrb	r3, [r7, #3]
 801a752:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a754:	483b      	ldr	r0, [pc, #236]	; (801a844 <RadioSend+0x1f0>)
 801a756:	f001 ff59 	bl	801c60c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801a75a:	78fb      	ldrb	r3, [r7, #3]
 801a75c:	2200      	movs	r2, #0
 801a75e:	4619      	mov	r1, r3
 801a760:	6878      	ldr	r0, [r7, #4]
 801a762:	f001 fa09 	bl	801bb78 <SUBGRF_SendPayload>
            break;
 801a766:	e05c      	b.n	801a822 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a768:	4b35      	ldr	r3, [pc, #212]	; (801a840 <RadioSend+0x1ec>)
 801a76a:	2202      	movs	r2, #2
 801a76c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801a76e:	4a34      	ldr	r2, [pc, #208]	; (801a840 <RadioSend+0x1ec>)
 801a770:	78fb      	ldrb	r3, [r7, #3]
 801a772:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a774:	4833      	ldr	r0, [pc, #204]	; (801a844 <RadioSend+0x1f0>)
 801a776:	f001 ff49 	bl	801c60c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a77a:	78fb      	ldrb	r3, [r7, #3]
 801a77c:	2200      	movs	r2, #0
 801a77e:	4619      	mov	r1, r3
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	f001 f9f9 	bl	801bb78 <SUBGRF_SendPayload>
            break;
 801a786:	e04c      	b.n	801a822 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801a788:	78fb      	ldrb	r3, [r7, #3]
 801a78a:	461a      	mov	r2, r3
 801a78c:	6879      	ldr	r1, [r7, #4]
 801a78e:	482f      	ldr	r0, [pc, #188]	; (801a84c <RadioSend+0x1f8>)
 801a790:	f000 fccc 	bl	801b12c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a794:	4b2a      	ldr	r3, [pc, #168]	; (801a840 <RadioSend+0x1ec>)
 801a796:	2202      	movs	r2, #2
 801a798:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801a79a:	78fb      	ldrb	r3, [r7, #3]
 801a79c:	3301      	adds	r3, #1
 801a79e:	b2da      	uxtb	r2, r3
 801a7a0:	4b27      	ldr	r3, [pc, #156]	; (801a840 <RadioSend+0x1ec>)
 801a7a2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a7a4:	4827      	ldr	r0, [pc, #156]	; (801a844 <RadioSend+0x1f0>)
 801a7a6:	f001 ff31 	bl	801c60c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801a7aa:	2100      	movs	r1, #0
 801a7ac:	20f1      	movs	r0, #241	; 0xf1
 801a7ae:	f000 f966 	bl	801aa7e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801a7b2:	2100      	movs	r1, #0
 801a7b4:	20f0      	movs	r0, #240	; 0xf0
 801a7b6:	f000 f962 	bl	801aa7e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801a7ba:	4b21      	ldr	r3, [pc, #132]	; (801a840 <RadioSend+0x1ec>)
 801a7bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7be:	2b64      	cmp	r3, #100	; 0x64
 801a7c0:	d108      	bne.n	801a7d4 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a7c2:	2170      	movs	r1, #112	; 0x70
 801a7c4:	20f3      	movs	r0, #243	; 0xf3
 801a7c6:	f000 f95a 	bl	801aa7e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a7ca:	211d      	movs	r1, #29
 801a7cc:	20f2      	movs	r0, #242	; 0xf2
 801a7ce:	f000 f956 	bl	801aa7e <RadioWrite>
 801a7d2:	e007      	b.n	801a7e4 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a7d4:	21e1      	movs	r1, #225	; 0xe1
 801a7d6:	20f3      	movs	r0, #243	; 0xf3
 801a7d8:	f000 f951 	bl	801aa7e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a7dc:	2104      	movs	r1, #4
 801a7de:	20f2      	movs	r0, #242	; 0xf2
 801a7e0:	f000 f94d 	bl	801aa7e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a7e4:	78fb      	ldrb	r3, [r7, #3]
 801a7e6:	b29b      	uxth	r3, r3
 801a7e8:	00db      	lsls	r3, r3, #3
 801a7ea:	b29b      	uxth	r3, r3
 801a7ec:	3302      	adds	r3, #2
 801a7ee:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a7f0:	89fb      	ldrh	r3, [r7, #14]
 801a7f2:	0a1b      	lsrs	r3, r3, #8
 801a7f4:	b29b      	uxth	r3, r3
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	4619      	mov	r1, r3
 801a7fa:	20f4      	movs	r0, #244	; 0xf4
 801a7fc:	f000 f93f 	bl	801aa7e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a800:	89fb      	ldrh	r3, [r7, #14]
 801a802:	b2db      	uxtb	r3, r3
 801a804:	4619      	mov	r1, r3
 801a806:	20f5      	movs	r0, #245	; 0xf5
 801a808:	f000 f939 	bl	801aa7e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801a80c:	78fb      	ldrb	r3, [r7, #3]
 801a80e:	3301      	adds	r3, #1
 801a810:	b2db      	uxtb	r3, r3
 801a812:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a816:	4619      	mov	r1, r3
 801a818:	480c      	ldr	r0, [pc, #48]	; (801a84c <RadioSend+0x1f8>)
 801a81a:	f001 f9ad 	bl	801bb78 <SUBGRF_SendPayload>
            break;
 801a81e:	e000      	b.n	801a822 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a820:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a822:	4b07      	ldr	r3, [pc, #28]	; (801a840 <RadioSend+0x1ec>)
 801a824:	685b      	ldr	r3, [r3, #4]
 801a826:	4619      	mov	r1, r3
 801a828:	4809      	ldr	r0, [pc, #36]	; (801a850 <RadioSend+0x1fc>)
 801a82a:	f003 fac3 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801a82e:	4808      	ldr	r0, [pc, #32]	; (801a850 <RadioSend+0x1fc>)
 801a830:	f003 f9e2 	bl	801dbf8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801a834:	2300      	movs	r3, #0
}
 801a836:	4618      	mov	r0, r3
 801a838:	3710      	adds	r7, #16
 801a83a:	46bd      	mov	sp, r7
 801a83c:	bd80      	pop	{r7, pc}
 801a83e:	bf00      	nop
 801a840:	20001840 	.word	0x20001840
 801a844:	2000184e 	.word	0x2000184e
 801a848:	0801efa4 	.word	0x0801efa4
 801a84c:	2000173c 	.word	0x2000173c
 801a850:	2000189c 	.word	0x2000189c

0801a854 <RadioSleep>:

static void RadioSleep( void )
{
 801a854:	b580      	push	{r7, lr}
 801a856:	b082      	sub	sp, #8
 801a858:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a85a:	2300      	movs	r3, #0
 801a85c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a85e:	793b      	ldrb	r3, [r7, #4]
 801a860:	f043 0304 	orr.w	r3, r3, #4
 801a864:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a866:	7938      	ldrb	r0, [r7, #4]
 801a868:	f001 fa62 	bl	801bd30 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a86c:	2002      	movs	r0, #2
 801a86e:	f7e8 f8c5 	bl	80029fc <HAL_Delay>
}
 801a872:	bf00      	nop
 801a874:	3708      	adds	r7, #8
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}

0801a87a <RadioStandby>:

static void RadioStandby( void )
{
 801a87a:	b580      	push	{r7, lr}
 801a87c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a87e:	2000      	movs	r0, #0
 801a880:	f001 fa88 	bl	801bd94 <SUBGRF_SetStandby>
}
 801a884:	bf00      	nop
 801a886:	bd80      	pop	{r7, pc}

0801a888 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b082      	sub	sp, #8
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801a890:	f002 faf1 	bl	801ce76 <RFW_Is_Init>
 801a894:	4603      	mov	r3, r0
 801a896:	2b01      	cmp	r3, #1
 801a898:	d102      	bne.n	801a8a0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a89a:	f002 fb14 	bl	801cec6 <RFW_ReceiveInit>
 801a89e:	e007      	b.n	801a8b0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	f240 2162 	movw	r1, #610	; 0x262
 801a8a8:	f240 2062 	movw	r0, #610	; 0x262
 801a8ac:	f001 fc46 	bl	801c13c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d006      	beq.n	801a8c4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a8b6:	6879      	ldr	r1, [r7, #4]
 801a8b8:	4811      	ldr	r0, [pc, #68]	; (801a900 <RadioRx+0x78>)
 801a8ba:	f003 fa7b 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a8be:	4810      	ldr	r0, [pc, #64]	; (801a900 <RadioRx+0x78>)
 801a8c0:	f003 f99a 	bl	801dbf8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a8c4:	4b0f      	ldr	r3, [pc, #60]	; (801a904 <RadioRx+0x7c>)
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a8ca:	4b0e      	ldr	r3, [pc, #56]	; (801a904 <RadioRx+0x7c>)
 801a8cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a8d0:	2100      	movs	r1, #0
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	f002 f8d6 	bl	801ca84 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a8d8:	4b0a      	ldr	r3, [pc, #40]	; (801a904 <RadioRx+0x7c>)
 801a8da:	785b      	ldrb	r3, [r3, #1]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d004      	beq.n	801a8ea <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a8e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a8e4:	f001 fa92 	bl	801be0c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a8e8:	e005      	b.n	801a8f6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a8ea:	4b06      	ldr	r3, [pc, #24]	; (801a904 <RadioRx+0x7c>)
 801a8ec:	689b      	ldr	r3, [r3, #8]
 801a8ee:	019b      	lsls	r3, r3, #6
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f001 fa8b 	bl	801be0c <SUBGRF_SetRx>
}
 801a8f6:	bf00      	nop
 801a8f8:	3708      	adds	r7, #8
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bd80      	pop	{r7, pc}
 801a8fe:	bf00      	nop
 801a900:	200018b4 	.word	0x200018b4
 801a904:	20001840 	.word	0x20001840

0801a908 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b082      	sub	sp, #8
 801a90c:	af00      	add	r7, sp, #0
 801a90e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801a910:	f002 fab1 	bl	801ce76 <RFW_Is_Init>
 801a914:	4603      	mov	r3, r0
 801a916:	2b01      	cmp	r3, #1
 801a918:	d102      	bne.n	801a920 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a91a:	f002 fad4 	bl	801cec6 <RFW_ReceiveInit>
 801a91e:	e007      	b.n	801a930 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a920:	2300      	movs	r3, #0
 801a922:	2200      	movs	r2, #0
 801a924:	f240 2162 	movw	r1, #610	; 0x262
 801a928:	f240 2062 	movw	r0, #610	; 0x262
 801a92c:	f001 fc06 	bl	801c13c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d006      	beq.n	801a944 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a936:	6879      	ldr	r1, [r7, #4]
 801a938:	4811      	ldr	r0, [pc, #68]	; (801a980 <RadioRxBoosted+0x78>)
 801a93a:	f003 fa3b 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a93e:	4810      	ldr	r0, [pc, #64]	; (801a980 <RadioRxBoosted+0x78>)
 801a940:	f003 f95a 	bl	801dbf8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a944:	4b0f      	ldr	r3, [pc, #60]	; (801a984 <RadioRxBoosted+0x7c>)
 801a946:	2200      	movs	r2, #0
 801a948:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a94a:	4b0e      	ldr	r3, [pc, #56]	; (801a984 <RadioRxBoosted+0x7c>)
 801a94c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a950:	2100      	movs	r1, #0
 801a952:	4618      	mov	r0, r3
 801a954:	f002 f896 	bl	801ca84 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a958:	4b0a      	ldr	r3, [pc, #40]	; (801a984 <RadioRxBoosted+0x7c>)
 801a95a:	785b      	ldrb	r3, [r3, #1]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d004      	beq.n	801a96a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a960:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a964:	f001 fa72 	bl	801be4c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a968:	e005      	b.n	801a976 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a96a:	4b06      	ldr	r3, [pc, #24]	; (801a984 <RadioRxBoosted+0x7c>)
 801a96c:	689b      	ldr	r3, [r3, #8]
 801a96e:	019b      	lsls	r3, r3, #6
 801a970:	4618      	mov	r0, r3
 801a972:	f001 fa6b 	bl	801be4c <SUBGRF_SetRxBoosted>
}
 801a976:	bf00      	nop
 801a978:	3708      	adds	r7, #8
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	bf00      	nop
 801a980:	200018b4 	.word	0x200018b4
 801a984:	20001840 	.word	0x20001840

0801a988 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b082      	sub	sp, #8
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]
 801a990:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	005a      	lsls	r2, r3, #1
 801a996:	683b      	ldr	r3, [r7, #0]
 801a998:	4413      	add	r3, r2
 801a99a:	4a0c      	ldr	r2, [pc, #48]	; (801a9cc <RadioSetRxDutyCycle+0x44>)
 801a99c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a99e:	2300      	movs	r3, #0
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a9a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a9aa:	f001 fbc7 	bl	801c13c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a9ae:	4b07      	ldr	r3, [pc, #28]	; (801a9cc <RadioSetRxDutyCycle+0x44>)
 801a9b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a9b4:	2100      	movs	r1, #0
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f002 f864 	bl	801ca84 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a9bc:	6839      	ldr	r1, [r7, #0]
 801a9be:	6878      	ldr	r0, [r7, #4]
 801a9c0:	f001 fa68 	bl	801be94 <SUBGRF_SetRxDutyCycle>
}
 801a9c4:	bf00      	nop
 801a9c6:	3708      	adds	r7, #8
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	bd80      	pop	{r7, pc}
 801a9cc:	20001840 	.word	0x20001840

0801a9d0 <RadioStartCad>:

static void RadioStartCad( void )
{
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a9d4:	4b09      	ldr	r3, [pc, #36]	; (801a9fc <RadioStartCad+0x2c>)
 801a9d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a9da:	2100      	movs	r1, #0
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f002 f851 	bl	801ca84 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a9ea:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a9ee:	f001 fba5 	bl	801c13c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a9f2:	f001 fa7b 	bl	801beec <SUBGRF_SetCad>
}
 801a9f6:	bf00      	nop
 801a9f8:	bd80      	pop	{r7, pc}
 801a9fa:	bf00      	nop
 801a9fc:	20001840 	.word	0x20001840

0801aa00 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	6078      	str	r0, [r7, #4]
 801aa08:	460b      	mov	r3, r1
 801aa0a:	70fb      	strb	r3, [r7, #3]
 801aa0c:	4613      	mov	r3, r2
 801aa0e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801aa10:	883b      	ldrh	r3, [r7, #0]
 801aa12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa16:	fb02 f303 	mul.w	r3, r2, r3
 801aa1a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801aa1c:	6878      	ldr	r0, [r7, #4]
 801aa1e:	f001 fbe9 	bl	801c1f4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801aa22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa26:	4618      	mov	r0, r3
 801aa28:	f002 f854 	bl	801cad4 <SUBGRF_SetRfTxPower>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aa30:	210e      	movs	r1, #14
 801aa32:	f640 101f 	movw	r0, #2335	; 0x91f
 801aa36:	f001 ff31 	bl	801c89c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801aa3a:	7afb      	ldrb	r3, [r7, #11]
 801aa3c:	2101      	movs	r1, #1
 801aa3e:	4618      	mov	r0, r3
 801aa40:	f002 f820 	bl	801ca84 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801aa44:	f001 fa60 	bl	801bf08 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801aa48:	68f9      	ldr	r1, [r7, #12]
 801aa4a:	4805      	ldr	r0, [pc, #20]	; (801aa60 <RadioSetTxContinuousWave+0x60>)
 801aa4c:	f003 f9b2 	bl	801ddb4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801aa50:	4803      	ldr	r0, [pc, #12]	; (801aa60 <RadioSetTxContinuousWave+0x60>)
 801aa52:	f003 f8d1 	bl	801dbf8 <UTIL_TIMER_Start>
}
 801aa56:	bf00      	nop
 801aa58:	3710      	adds	r7, #16
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	bd80      	pop	{r7, pc}
 801aa5e:	bf00      	nop
 801aa60:	2000189c 	.word	0x2000189c

0801aa64 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801aa64:	b580      	push	{r7, lr}
 801aa66:	b082      	sub	sp, #8
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801aa6e:	f001 fe82 	bl	801c776 <SUBGRF_GetRssiInst>
 801aa72:	4603      	mov	r3, r0
 801aa74:	b21b      	sxth	r3, r3
}
 801aa76:	4618      	mov	r0, r3
 801aa78:	3708      	adds	r7, #8
 801aa7a:	46bd      	mov	sp, r7
 801aa7c:	bd80      	pop	{r7, pc}

0801aa7e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801aa7e:	b580      	push	{r7, lr}
 801aa80:	b082      	sub	sp, #8
 801aa82:	af00      	add	r7, sp, #0
 801aa84:	4603      	mov	r3, r0
 801aa86:	460a      	mov	r2, r1
 801aa88:	80fb      	strh	r3, [r7, #6]
 801aa8a:	4613      	mov	r3, r2
 801aa8c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801aa8e:	797a      	ldrb	r2, [r7, #5]
 801aa90:	88fb      	ldrh	r3, [r7, #6]
 801aa92:	4611      	mov	r1, r2
 801aa94:	4618      	mov	r0, r3
 801aa96:	f001 ff01 	bl	801c89c <SUBGRF_WriteRegister>
}
 801aa9a:	bf00      	nop
 801aa9c:	3708      	adds	r7, #8
 801aa9e:	46bd      	mov	sp, r7
 801aaa0:	bd80      	pop	{r7, pc}

0801aaa2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801aaa2:	b580      	push	{r7, lr}
 801aaa4:	b082      	sub	sp, #8
 801aaa6:	af00      	add	r7, sp, #0
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801aaac:	88fb      	ldrh	r3, [r7, #6]
 801aaae:	4618      	mov	r0, r3
 801aab0:	f001 ff08 	bl	801c8c4 <SUBGRF_ReadRegister>
 801aab4:	4603      	mov	r3, r0
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3708      	adds	r7, #8
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bd80      	pop	{r7, pc}

0801aabe <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801aabe:	b580      	push	{r7, lr}
 801aac0:	b082      	sub	sp, #8
 801aac2:	af00      	add	r7, sp, #0
 801aac4:	4603      	mov	r3, r0
 801aac6:	6039      	str	r1, [r7, #0]
 801aac8:	80fb      	strh	r3, [r7, #6]
 801aaca:	4613      	mov	r3, r2
 801aacc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801aace:	797b      	ldrb	r3, [r7, #5]
 801aad0:	b29a      	uxth	r2, r3
 801aad2:	88fb      	ldrh	r3, [r7, #6]
 801aad4:	6839      	ldr	r1, [r7, #0]
 801aad6:	4618      	mov	r0, r3
 801aad8:	f001 ff08 	bl	801c8ec <SUBGRF_WriteRegisters>
}
 801aadc:	bf00      	nop
 801aade:	3708      	adds	r7, #8
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}

0801aae4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b082      	sub	sp, #8
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	4603      	mov	r3, r0
 801aaec:	6039      	str	r1, [r7, #0]
 801aaee:	80fb      	strh	r3, [r7, #6]
 801aaf0:	4613      	mov	r3, r2
 801aaf2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801aaf4:	797b      	ldrb	r3, [r7, #5]
 801aaf6:	b29a      	uxth	r2, r3
 801aaf8:	88fb      	ldrh	r3, [r7, #6]
 801aafa:	6839      	ldr	r1, [r7, #0]
 801aafc:	4618      	mov	r0, r3
 801aafe:	f001 ff17 	bl	801c930 <SUBGRF_ReadRegisters>
}
 801ab02:	bf00      	nop
 801ab04:	3708      	adds	r7, #8
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}
	...

0801ab0c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	4603      	mov	r3, r0
 801ab14:	460a      	mov	r2, r1
 801ab16:	71fb      	strb	r3, [r7, #7]
 801ab18:	4613      	mov	r3, r2
 801ab1a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801ab1c:	79fb      	ldrb	r3, [r7, #7]
 801ab1e:	2b01      	cmp	r3, #1
 801ab20:	d10a      	bne.n	801ab38 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801ab22:	4a0e      	ldr	r2, [pc, #56]	; (801ab5c <RadioSetMaxPayloadLength+0x50>)
 801ab24:	79bb      	ldrb	r3, [r7, #6]
 801ab26:	7013      	strb	r3, [r2, #0]
 801ab28:	4b0c      	ldr	r3, [pc, #48]	; (801ab5c <RadioSetMaxPayloadLength+0x50>)
 801ab2a:	781a      	ldrb	r2, [r3, #0]
 801ab2c:	4b0c      	ldr	r3, [pc, #48]	; (801ab60 <RadioSetMaxPayloadLength+0x54>)
 801ab2e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab30:	480c      	ldr	r0, [pc, #48]	; (801ab64 <RadioSetMaxPayloadLength+0x58>)
 801ab32:	f001 fd6b 	bl	801c60c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801ab36:	e00d      	b.n	801ab54 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801ab38:	4b09      	ldr	r3, [pc, #36]	; (801ab60 <RadioSetMaxPayloadLength+0x54>)
 801ab3a:	7d5b      	ldrb	r3, [r3, #21]
 801ab3c:	2b01      	cmp	r3, #1
 801ab3e:	d109      	bne.n	801ab54 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801ab40:	4a06      	ldr	r2, [pc, #24]	; (801ab5c <RadioSetMaxPayloadLength+0x50>)
 801ab42:	79bb      	ldrb	r3, [r7, #6]
 801ab44:	7013      	strb	r3, [r2, #0]
 801ab46:	4b05      	ldr	r3, [pc, #20]	; (801ab5c <RadioSetMaxPayloadLength+0x50>)
 801ab48:	781a      	ldrb	r2, [r3, #0]
 801ab4a:	4b05      	ldr	r3, [pc, #20]	; (801ab60 <RadioSetMaxPayloadLength+0x54>)
 801ab4c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab4e:	4805      	ldr	r0, [pc, #20]	; (801ab64 <RadioSetMaxPayloadLength+0x58>)
 801ab50:	f001 fd5c 	bl	801c60c <SUBGRF_SetPacketParams>
}
 801ab54:	bf00      	nop
 801ab56:	3708      	adds	r7, #8
 801ab58:	46bd      	mov	sp, r7
 801ab5a:	bd80      	pop	{r7, pc}
 801ab5c:	2000014c 	.word	0x2000014c
 801ab60:	20001840 	.word	0x20001840
 801ab64:	2000184e 	.word	0x2000184e

0801ab68 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801ab68:	b580      	push	{r7, lr}
 801ab6a:	b082      	sub	sp, #8
 801ab6c:	af00      	add	r7, sp, #0
 801ab6e:	4603      	mov	r3, r0
 801ab70:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801ab72:	4a13      	ldr	r2, [pc, #76]	; (801abc0 <RadioSetPublicNetwork+0x58>)
 801ab74:	79fb      	ldrb	r3, [r7, #7]
 801ab76:	7313      	strb	r3, [r2, #12]
 801ab78:	4b11      	ldr	r3, [pc, #68]	; (801abc0 <RadioSetPublicNetwork+0x58>)
 801ab7a:	7b1a      	ldrb	r2, [r3, #12]
 801ab7c:	4b10      	ldr	r3, [pc, #64]	; (801abc0 <RadioSetPublicNetwork+0x58>)
 801ab7e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801ab80:	2001      	movs	r0, #1
 801ab82:	f7ff f811 	bl	8019ba8 <RadioSetModem>
    if( enable == true )
 801ab86:	79fb      	ldrb	r3, [r7, #7]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d00a      	beq.n	801aba2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801ab8c:	2134      	movs	r1, #52	; 0x34
 801ab8e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801ab92:	f001 fe83 	bl	801c89c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801ab96:	2144      	movs	r1, #68	; 0x44
 801ab98:	f240 7041 	movw	r0, #1857	; 0x741
 801ab9c:	f001 fe7e 	bl	801c89c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801aba0:	e009      	b.n	801abb6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801aba2:	2114      	movs	r1, #20
 801aba4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aba8:	f001 fe78 	bl	801c89c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801abac:	2124      	movs	r1, #36	; 0x24
 801abae:	f240 7041 	movw	r0, #1857	; 0x741
 801abb2:	f001 fe73 	bl	801c89c <SUBGRF_WriteRegister>
}
 801abb6:	bf00      	nop
 801abb8:	3708      	adds	r7, #8
 801abba:	46bd      	mov	sp, r7
 801abbc:	bd80      	pop	{r7, pc}
 801abbe:	bf00      	nop
 801abc0:	20001840 	.word	0x20001840

0801abc4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801abc4:	b580      	push	{r7, lr}
 801abc6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801abc8:	f001 ffb8 	bl	801cb3c <SUBGRF_GetRadioWakeUpTime>
 801abcc:	4603      	mov	r3, r0
 801abce:	3303      	adds	r3, #3
}
 801abd0:	4618      	mov	r0, r3
 801abd2:	bd80      	pop	{r7, pc}

0801abd4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b082      	sub	sp, #8
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801abdc:	f000 f80e 	bl	801abfc <RadioOnTxTimeoutProcess>
}
 801abe0:	bf00      	nop
 801abe2:	3708      	adds	r7, #8
 801abe4:	46bd      	mov	sp, r7
 801abe6:	bd80      	pop	{r7, pc}

0801abe8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b082      	sub	sp, #8
 801abec:	af00      	add	r7, sp, #0
 801abee:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801abf0:	f000 f818 	bl	801ac24 <RadioOnRxTimeoutProcess>
}
 801abf4:	bf00      	nop
 801abf6:	3708      	adds	r7, #8
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}

0801abfc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ac00:	4b07      	ldr	r3, [pc, #28]	; (801ac20 <RadioOnTxTimeoutProcess+0x24>)
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d008      	beq.n	801ac1a <RadioOnTxTimeoutProcess+0x1e>
 801ac08:	4b05      	ldr	r3, [pc, #20]	; (801ac20 <RadioOnTxTimeoutProcess+0x24>)
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	685b      	ldr	r3, [r3, #4]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d003      	beq.n	801ac1a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801ac12:	4b03      	ldr	r3, [pc, #12]	; (801ac20 <RadioOnTxTimeoutProcess+0x24>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	685b      	ldr	r3, [r3, #4]
 801ac18:	4798      	blx	r3
    }
}
 801ac1a:	bf00      	nop
 801ac1c:	bd80      	pop	{r7, pc}
 801ac1e:	bf00      	nop
 801ac20:	2000183c 	.word	0x2000183c

0801ac24 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ac24:	b580      	push	{r7, lr}
 801ac26:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ac28:	4b07      	ldr	r3, [pc, #28]	; (801ac48 <RadioOnRxTimeoutProcess+0x24>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	2b00      	cmp	r3, #0
 801ac2e:	d008      	beq.n	801ac42 <RadioOnRxTimeoutProcess+0x1e>
 801ac30:	4b05      	ldr	r3, [pc, #20]	; (801ac48 <RadioOnRxTimeoutProcess+0x24>)
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	68db      	ldr	r3, [r3, #12]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d003      	beq.n	801ac42 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801ac3a:	4b03      	ldr	r3, [pc, #12]	; (801ac48 <RadioOnRxTimeoutProcess+0x24>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	68db      	ldr	r3, [r3, #12]
 801ac40:	4798      	blx	r3
    }
}
 801ac42:	bf00      	nop
 801ac44:	bd80      	pop	{r7, pc}
 801ac46:	bf00      	nop
 801ac48:	2000183c 	.word	0x2000183c

0801ac4c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801ac4c:	b580      	push	{r7, lr}
 801ac4e:	b082      	sub	sp, #8
 801ac50:	af00      	add	r7, sp, #0
 801ac52:	4603      	mov	r3, r0
 801ac54:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801ac56:	4a05      	ldr	r2, [pc, #20]	; (801ac6c <RadioOnDioIrq+0x20>)
 801ac58:	88fb      	ldrh	r3, [r7, #6]
 801ac5a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801ac5e:	f000 f807 	bl	801ac70 <RadioIrqProcess>
}
 801ac62:	bf00      	nop
 801ac64:	3708      	adds	r7, #8
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}
 801ac6a:	bf00      	nop
 801ac6c:	20001840 	.word	0x20001840

0801ac70 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801ac70:	b5b0      	push	{r4, r5, r7, lr}
 801ac72:	b082      	sub	sp, #8
 801ac74:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801ac76:	2300      	movs	r3, #0
 801ac78:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801ac7e:	4ba8      	ldr	r3, [pc, #672]	; (801af20 <RadioIrqProcess+0x2b0>)
 801ac80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801ac84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac88:	f000 810d 	beq.w	801aea6 <RadioIrqProcess+0x236>
 801ac8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ac90:	f300 81e8 	bgt.w	801b064 <RadioIrqProcess+0x3f4>
 801ac94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ac98:	f000 80f1 	beq.w	801ae7e <RadioIrqProcess+0x20e>
 801ac9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801aca0:	f300 81e0 	bgt.w	801b064 <RadioIrqProcess+0x3f4>
 801aca4:	2b80      	cmp	r3, #128	; 0x80
 801aca6:	f000 80d6 	beq.w	801ae56 <RadioIrqProcess+0x1e6>
 801acaa:	2b80      	cmp	r3, #128	; 0x80
 801acac:	f300 81da 	bgt.w	801b064 <RadioIrqProcess+0x3f4>
 801acb0:	2b20      	cmp	r3, #32
 801acb2:	dc49      	bgt.n	801ad48 <RadioIrqProcess+0xd8>
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	f340 81d5 	ble.w	801b064 <RadioIrqProcess+0x3f4>
 801acba:	3b01      	subs	r3, #1
 801acbc:	2b1f      	cmp	r3, #31
 801acbe:	f200 81d1 	bhi.w	801b064 <RadioIrqProcess+0x3f4>
 801acc2:	a201      	add	r2, pc, #4	; (adr r2, 801acc8 <RadioIrqProcess+0x58>)
 801acc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801acc8:	0801ad51 	.word	0x0801ad51
 801accc:	0801ad8b 	.word	0x0801ad8b
 801acd0:	0801b065 	.word	0x0801b065
 801acd4:	0801af41 	.word	0x0801af41
 801acd8:	0801b065 	.word	0x0801b065
 801acdc:	0801b065 	.word	0x0801b065
 801ace0:	0801b065 	.word	0x0801b065
 801ace4:	0801afbd 	.word	0x0801afbd
 801ace8:	0801b065 	.word	0x0801b065
 801acec:	0801b065 	.word	0x0801b065
 801acf0:	0801b065 	.word	0x0801b065
 801acf4:	0801b065 	.word	0x0801b065
 801acf8:	0801b065 	.word	0x0801b065
 801acfc:	0801b065 	.word	0x0801b065
 801ad00:	0801b065 	.word	0x0801b065
 801ad04:	0801afd9 	.word	0x0801afd9
 801ad08:	0801b065 	.word	0x0801b065
 801ad0c:	0801b065 	.word	0x0801b065
 801ad10:	0801b065 	.word	0x0801b065
 801ad14:	0801b065 	.word	0x0801b065
 801ad18:	0801b065 	.word	0x0801b065
 801ad1c:	0801b065 	.word	0x0801b065
 801ad20:	0801b065 	.word	0x0801b065
 801ad24:	0801b065 	.word	0x0801b065
 801ad28:	0801b065 	.word	0x0801b065
 801ad2c:	0801b065 	.word	0x0801b065
 801ad30:	0801b065 	.word	0x0801b065
 801ad34:	0801b065 	.word	0x0801b065
 801ad38:	0801b065 	.word	0x0801b065
 801ad3c:	0801b065 	.word	0x0801b065
 801ad40:	0801b065 	.word	0x0801b065
 801ad44:	0801afe7 	.word	0x0801afe7
 801ad48:	2b40      	cmp	r3, #64	; 0x40
 801ad4a:	f000 816d 	beq.w	801b028 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801ad4e:	e189      	b.n	801b064 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801ad50:	4874      	ldr	r0, [pc, #464]	; (801af24 <RadioIrqProcess+0x2b4>)
 801ad52:	f002 ffbf 	bl	801dcd4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801ad56:	2000      	movs	r0, #0
 801ad58:	f001 f81c 	bl	801bd94 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801ad5c:	f002 f892 	bl	801ce84 <RFW_Is_LongPacketModeEnabled>
 801ad60:	4603      	mov	r3, r0
 801ad62:	2b01      	cmp	r3, #1
 801ad64:	d101      	bne.n	801ad6a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801ad66:	f002 f8b6 	bl	801ced6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801ad6a:	4b6f      	ldr	r3, [pc, #444]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	f000 817a 	beq.w	801b068 <RadioIrqProcess+0x3f8>
 801ad74:	4b6c      	ldr	r3, [pc, #432]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	f000 8174 	beq.w	801b068 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801ad80:	4b69      	ldr	r3, [pc, #420]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	4798      	blx	r3
        break;
 801ad88:	e16e      	b.n	801b068 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801ad8a:	4868      	ldr	r0, [pc, #416]	; (801af2c <RadioIrqProcess+0x2bc>)
 801ad8c:	f002 ffa2 	bl	801dcd4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ad90:	4b63      	ldr	r3, [pc, #396]	; (801af20 <RadioIrqProcess+0x2b0>)
 801ad92:	785b      	ldrb	r3, [r3, #1]
 801ad94:	f083 0301 	eor.w	r3, r3, #1
 801ad98:	b2db      	uxtb	r3, r3
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d014      	beq.n	801adc8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801ad9e:	2000      	movs	r0, #0
 801ada0:	f000 fff8 	bl	801bd94 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801ada4:	2100      	movs	r1, #0
 801ada6:	f640 1002 	movw	r0, #2306	; 0x902
 801adaa:	f001 fd77 	bl	801c89c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801adae:	f640 1044 	movw	r0, #2372	; 0x944
 801adb2:	f001 fd87 	bl	801c8c4 <SUBGRF_ReadRegister>
 801adb6:	4603      	mov	r3, r0
 801adb8:	f043 0302 	orr.w	r3, r3, #2
 801adbc:	b2db      	uxtb	r3, r3
 801adbe:	4619      	mov	r1, r3
 801adc0:	f640 1044 	movw	r0, #2372	; 0x944
 801adc4:	f001 fd6a 	bl	801c89c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801adc8:	1dfb      	adds	r3, r7, #7
 801adca:	22ff      	movs	r2, #255	; 0xff
 801adcc:	4619      	mov	r1, r3
 801adce:	4858      	ldr	r0, [pc, #352]	; (801af30 <RadioIrqProcess+0x2c0>)
 801add0:	f000 feb0 	bl	801bb34 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801add4:	4857      	ldr	r0, [pc, #348]	; (801af34 <RadioIrqProcess+0x2c4>)
 801add6:	f001 fd0f 	bl	801c7f8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801adda:	4b53      	ldr	r3, [pc, #332]	; (801af28 <RadioIrqProcess+0x2b8>)
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	f000 8144 	beq.w	801b06c <RadioIrqProcess+0x3fc>
 801ade4:	4b50      	ldr	r3, [pc, #320]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	689b      	ldr	r3, [r3, #8]
 801adea:	2b00      	cmp	r3, #0
 801adec:	f000 813e 	beq.w	801b06c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801adf0:	4b4b      	ldr	r3, [pc, #300]	; (801af20 <RadioIrqProcess+0x2b0>)
 801adf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801adf6:	2b01      	cmp	r3, #1
 801adf8:	d10e      	bne.n	801ae18 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801adfa:	4b4b      	ldr	r3, [pc, #300]	; (801af28 <RadioIrqProcess+0x2b8>)
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	689c      	ldr	r4, [r3, #8]
 801ae00:	79fb      	ldrb	r3, [r7, #7]
 801ae02:	b299      	uxth	r1, r3
 801ae04:	4b46      	ldr	r3, [pc, #280]	; (801af20 <RadioIrqProcess+0x2b0>)
 801ae06:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801ae0a:	b21a      	sxth	r2, r3
 801ae0c:	4b44      	ldr	r3, [pc, #272]	; (801af20 <RadioIrqProcess+0x2b0>)
 801ae0e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801ae12:	4847      	ldr	r0, [pc, #284]	; (801af30 <RadioIrqProcess+0x2c0>)
 801ae14:	47a0      	blx	r4
                break;
 801ae16:	e01d      	b.n	801ae54 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801ae18:	4b41      	ldr	r3, [pc, #260]	; (801af20 <RadioIrqProcess+0x2b0>)
 801ae1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ae1c:	463a      	mov	r2, r7
 801ae1e:	4611      	mov	r1, r2
 801ae20:	4618      	mov	r0, r3
 801ae22:	f001 ff7d 	bl	801cd20 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801ae26:	4b40      	ldr	r3, [pc, #256]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	689c      	ldr	r4, [r3, #8]
 801ae2c:	79fb      	ldrb	r3, [r7, #7]
 801ae2e:	b299      	uxth	r1, r3
 801ae30:	4b3b      	ldr	r3, [pc, #236]	; (801af20 <RadioIrqProcess+0x2b0>)
 801ae32:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801ae36:	b218      	sxth	r0, r3
 801ae38:	683b      	ldr	r3, [r7, #0]
 801ae3a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ae3e:	4a3e      	ldr	r2, [pc, #248]	; (801af38 <RadioIrqProcess+0x2c8>)
 801ae40:	fb82 5203 	smull	r5, r2, r2, r3
 801ae44:	1192      	asrs	r2, r2, #6
 801ae46:	17db      	asrs	r3, r3, #31
 801ae48:	1ad3      	subs	r3, r2, r3
 801ae4a:	b25b      	sxtb	r3, r3
 801ae4c:	4602      	mov	r2, r0
 801ae4e:	4838      	ldr	r0, [pc, #224]	; (801af30 <RadioIrqProcess+0x2c0>)
 801ae50:	47a0      	blx	r4
                break;
 801ae52:	bf00      	nop
        break;
 801ae54:	e10a      	b.n	801b06c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801ae56:	2000      	movs	r0, #0
 801ae58:	f000 ff9c 	bl	801bd94 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ae5c:	4b32      	ldr	r3, [pc, #200]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae5e:	681b      	ldr	r3, [r3, #0]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f000 8105 	beq.w	801b070 <RadioIrqProcess+0x400>
 801ae66:	4b30      	ldr	r3, [pc, #192]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	699b      	ldr	r3, [r3, #24]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	f000 80ff 	beq.w	801b070 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801ae72:	4b2d      	ldr	r3, [pc, #180]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	699b      	ldr	r3, [r3, #24]
 801ae78:	2000      	movs	r0, #0
 801ae7a:	4798      	blx	r3
        break;
 801ae7c:	e0f8      	b.n	801b070 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801ae7e:	2000      	movs	r0, #0
 801ae80:	f000 ff88 	bl	801bd94 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ae84:	4b28      	ldr	r3, [pc, #160]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	f000 80f3 	beq.w	801b074 <RadioIrqProcess+0x404>
 801ae8e:	4b26      	ldr	r3, [pc, #152]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	699b      	ldr	r3, [r3, #24]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	f000 80ed 	beq.w	801b074 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801ae9a:	4b23      	ldr	r3, [pc, #140]	; (801af28 <RadioIrqProcess+0x2b8>)
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	699b      	ldr	r3, [r3, #24]
 801aea0:	2001      	movs	r0, #1
 801aea2:	4798      	blx	r3
        break;
 801aea4:	e0e6      	b.n	801b074 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801aea6:	4b25      	ldr	r3, [pc, #148]	; (801af3c <RadioIrqProcess+0x2cc>)
 801aea8:	2201      	movs	r2, #1
 801aeaa:	2100      	movs	r1, #0
 801aeac:	2002      	movs	r0, #2
 801aeae:	f003 f91b 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801aeb2:	f000 fe25 	bl	801bb00 <SUBGRF_GetOperatingMode>
 801aeb6:	4603      	mov	r3, r0
 801aeb8:	2b04      	cmp	r3, #4
 801aeba:	d115      	bne.n	801aee8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801aebc:	4819      	ldr	r0, [pc, #100]	; (801af24 <RadioIrqProcess+0x2b4>)
 801aebe:	f002 ff09 	bl	801dcd4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801aec2:	2000      	movs	r0, #0
 801aec4:	f000 ff66 	bl	801bd94 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801aec8:	4b17      	ldr	r3, [pc, #92]	; (801af28 <RadioIrqProcess+0x2b8>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	f000 80d3 	beq.w	801b078 <RadioIrqProcess+0x408>
 801aed2:	4b15      	ldr	r3, [pc, #84]	; (801af28 <RadioIrqProcess+0x2b8>)
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	685b      	ldr	r3, [r3, #4]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	f000 80cd 	beq.w	801b078 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801aede:	4b12      	ldr	r3, [pc, #72]	; (801af28 <RadioIrqProcess+0x2b8>)
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	685b      	ldr	r3, [r3, #4]
 801aee4:	4798      	blx	r3
        break;
 801aee6:	e0c7      	b.n	801b078 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801aee8:	f000 fe0a 	bl	801bb00 <SUBGRF_GetOperatingMode>
 801aeec:	4603      	mov	r3, r0
 801aeee:	2b05      	cmp	r3, #5
 801aef0:	f040 80c2 	bne.w	801b078 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801aef4:	480d      	ldr	r0, [pc, #52]	; (801af2c <RadioIrqProcess+0x2bc>)
 801aef6:	f002 feed 	bl	801dcd4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801aefa:	2000      	movs	r0, #0
 801aefc:	f000 ff4a 	bl	801bd94 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801af00:	4b09      	ldr	r3, [pc, #36]	; (801af28 <RadioIrqProcess+0x2b8>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2b00      	cmp	r3, #0
 801af06:	f000 80b7 	beq.w	801b078 <RadioIrqProcess+0x408>
 801af0a:	4b07      	ldr	r3, [pc, #28]	; (801af28 <RadioIrqProcess+0x2b8>)
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	68db      	ldr	r3, [r3, #12]
 801af10:	2b00      	cmp	r3, #0
 801af12:	f000 80b1 	beq.w	801b078 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801af16:	4b04      	ldr	r3, [pc, #16]	; (801af28 <RadioIrqProcess+0x2b8>)
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	68db      	ldr	r3, [r3, #12]
 801af1c:	4798      	blx	r3
        break;
 801af1e:	e0ab      	b.n	801b078 <RadioIrqProcess+0x408>
 801af20:	20001840 	.word	0x20001840
 801af24:	2000189c 	.word	0x2000189c
 801af28:	2000183c 	.word	0x2000183c
 801af2c:	200018b4 	.word	0x200018b4
 801af30:	2000173c 	.word	0x2000173c
 801af34:	20001864 	.word	0x20001864
 801af38:	10624dd3 	.word	0x10624dd3
 801af3c:	0801efbc 	.word	0x0801efbc
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801af40:	4b54      	ldr	r3, [pc, #336]	; (801b094 <RadioIrqProcess+0x424>)
 801af42:	2201      	movs	r2, #1
 801af44:	2100      	movs	r1, #0
 801af46:	2002      	movs	r0, #2
 801af48:	f003 f8ce 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801af4c:	4b52      	ldr	r3, [pc, #328]	; (801b098 <RadioIrqProcess+0x428>)
 801af4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af50:	2b00      	cmp	r3, #0
 801af52:	f000 8093 	beq.w	801b07c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801af56:	4a51      	ldr	r2, [pc, #324]	; (801b09c <RadioIrqProcess+0x42c>)
 801af58:	4b4f      	ldr	r3, [pc, #316]	; (801b098 <RadioIrqProcess+0x428>)
 801af5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af5c:	0c1b      	lsrs	r3, r3, #16
 801af5e:	b2db      	uxtb	r3, r3
 801af60:	4619      	mov	r1, r3
 801af62:	f640 1003 	movw	r0, #2307	; 0x903
 801af66:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801af68:	4a4c      	ldr	r2, [pc, #304]	; (801b09c <RadioIrqProcess+0x42c>)
 801af6a:	4b4b      	ldr	r3, [pc, #300]	; (801b098 <RadioIrqProcess+0x428>)
 801af6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af6e:	0a1b      	lsrs	r3, r3, #8
 801af70:	b2db      	uxtb	r3, r3
 801af72:	4619      	mov	r1, r3
 801af74:	f640 1004 	movw	r0, #2308	; 0x904
 801af78:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801af7a:	4a48      	ldr	r2, [pc, #288]	; (801b09c <RadioIrqProcess+0x42c>)
 801af7c:	4b46      	ldr	r3, [pc, #280]	; (801b098 <RadioIrqProcess+0x428>)
 801af7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801af80:	b2db      	uxtb	r3, r3
 801af82:	4619      	mov	r1, r3
 801af84:	f640 1005 	movw	r0, #2309	; 0x905
 801af88:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801af8a:	4c44      	ldr	r4, [pc, #272]	; (801b09c <RadioIrqProcess+0x42c>)
 801af8c:	4b44      	ldr	r3, [pc, #272]	; (801b0a0 <RadioIrqProcess+0x430>)
 801af8e:	f640 1002 	movw	r0, #2306	; 0x902
 801af92:	4798      	blx	r3
 801af94:	4603      	mov	r3, r0
 801af96:	f043 0301 	orr.w	r3, r3, #1
 801af9a:	b2db      	uxtb	r3, r3
 801af9c:	4619      	mov	r1, r3
 801af9e:	f640 1002 	movw	r0, #2306	; 0x902
 801afa2:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801afa4:	4b3c      	ldr	r3, [pc, #240]	; (801b098 <RadioIrqProcess+0x428>)
 801afa6:	2200      	movs	r2, #0
 801afa8:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801afaa:	2300      	movs	r3, #0
 801afac:	2200      	movs	r2, #0
 801afae:	f240 2162 	movw	r1, #610	; 0x262
 801afb2:	f240 2062 	movw	r0, #610	; 0x262
 801afb6:	f001 f8c1 	bl	801c13c <SUBGRF_SetDioIrqParams>
        break;
 801afba:	e05f      	b.n	801b07c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801afbc:	4b39      	ldr	r3, [pc, #228]	; (801b0a4 <RadioIrqProcess+0x434>)
 801afbe:	2201      	movs	r2, #1
 801afc0:	2100      	movs	r1, #0
 801afc2:	2002      	movs	r0, #2
 801afc4:	f003 f890 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801afc8:	f001 ff55 	bl	801ce76 <RFW_Is_Init>
 801afcc:	4603      	mov	r3, r0
 801afce:	2b01      	cmp	r3, #1
 801afd0:	d156      	bne.n	801b080 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801afd2:	f001 ff86 	bl	801cee2 <RFW_ReceivePayload>
        break;
 801afd6:	e053      	b.n	801b080 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801afd8:	4b33      	ldr	r3, [pc, #204]	; (801b0a8 <RadioIrqProcess+0x438>)
 801afda:	2201      	movs	r2, #1
 801afdc:	2100      	movs	r1, #0
 801afde:	2002      	movs	r0, #2
 801afe0:	f003 f882 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801afe4:	e051      	b.n	801b08a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801afe6:	4831      	ldr	r0, [pc, #196]	; (801b0ac <RadioIrqProcess+0x43c>)
 801afe8:	f002 fe74 	bl	801dcd4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801afec:	4b2a      	ldr	r3, [pc, #168]	; (801b098 <RadioIrqProcess+0x428>)
 801afee:	785b      	ldrb	r3, [r3, #1]
 801aff0:	f083 0301 	eor.w	r3, r3, #1
 801aff4:	b2db      	uxtb	r3, r3
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d002      	beq.n	801b000 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801affa:	2000      	movs	r0, #0
 801affc:	f000 feca 	bl	801bd94 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b000:	4b2b      	ldr	r3, [pc, #172]	; (801b0b0 <RadioIrqProcess+0x440>)
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d03d      	beq.n	801b084 <RadioIrqProcess+0x414>
 801b008:	4b29      	ldr	r3, [pc, #164]	; (801b0b0 <RadioIrqProcess+0x440>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	68db      	ldr	r3, [r3, #12]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d038      	beq.n	801b084 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b012:	4b27      	ldr	r3, [pc, #156]	; (801b0b0 <RadioIrqProcess+0x440>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	68db      	ldr	r3, [r3, #12]
 801b018:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b01a:	4b26      	ldr	r3, [pc, #152]	; (801b0b4 <RadioIrqProcess+0x444>)
 801b01c:	2201      	movs	r2, #1
 801b01e:	2100      	movs	r1, #0
 801b020:	2002      	movs	r0, #2
 801b022:	f003 f861 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b026:	e02d      	b.n	801b084 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b028:	4b23      	ldr	r3, [pc, #140]	; (801b0b8 <RadioIrqProcess+0x448>)
 801b02a:	2201      	movs	r2, #1
 801b02c:	2100      	movs	r1, #0
 801b02e:	2002      	movs	r0, #2
 801b030:	f003 f85a 	bl	801e0e8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b034:	4b18      	ldr	r3, [pc, #96]	; (801b098 <RadioIrqProcess+0x428>)
 801b036:	785b      	ldrb	r3, [r3, #1]
 801b038:	f083 0301 	eor.w	r3, r3, #1
 801b03c:	b2db      	uxtb	r3, r3
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d002      	beq.n	801b048 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b042:	2000      	movs	r0, #0
 801b044:	f000 fea6 	bl	801bd94 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b048:	4b19      	ldr	r3, [pc, #100]	; (801b0b0 <RadioIrqProcess+0x440>)
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d01b      	beq.n	801b088 <RadioIrqProcess+0x418>
 801b050:	4b17      	ldr	r3, [pc, #92]	; (801b0b0 <RadioIrqProcess+0x440>)
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	691b      	ldr	r3, [r3, #16]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d016      	beq.n	801b088 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b05a:	4b15      	ldr	r3, [pc, #84]	; (801b0b0 <RadioIrqProcess+0x440>)
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	691b      	ldr	r3, [r3, #16]
 801b060:	4798      	blx	r3
        break;
 801b062:	e011      	b.n	801b088 <RadioIrqProcess+0x418>
        break;
 801b064:	bf00      	nop
 801b066:	e010      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b068:	bf00      	nop
 801b06a:	e00e      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b06c:	bf00      	nop
 801b06e:	e00c      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b070:	bf00      	nop
 801b072:	e00a      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b074:	bf00      	nop
 801b076:	e008      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b078:	bf00      	nop
 801b07a:	e006      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b07c:	bf00      	nop
 801b07e:	e004      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b080:	bf00      	nop
 801b082:	e002      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b084:	bf00      	nop
 801b086:	e000      	b.n	801b08a <RadioIrqProcess+0x41a>
        break;
 801b088:	bf00      	nop
    }
}
 801b08a:	bf00      	nop
 801b08c:	3708      	adds	r7, #8
 801b08e:	46bd      	mov	sp, r7
 801b090:	bdb0      	pop	{r4, r5, r7, pc}
 801b092:	bf00      	nop
 801b094:	0801efd0 	.word	0x0801efd0
 801b098:	20001840 	.word	0x20001840
 801b09c:	0801aa7f 	.word	0x0801aa7f
 801b0a0:	0801aaa3 	.word	0x0801aaa3
 801b0a4:	0801efdc 	.word	0x0801efdc
 801b0a8:	0801efe8 	.word	0x0801efe8
 801b0ac:	200018b4 	.word	0x200018b4
 801b0b0:	2000183c 	.word	0x2000183c
 801b0b4:	0801eff4 	.word	0x0801eff4
 801b0b8:	0801f000 	.word	0x0801f000

0801b0bc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b0c0:	4b09      	ldr	r3, [pc, #36]	; (801b0e8 <RadioTxPrbs+0x2c>)
 801b0c2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b0c6:	2101      	movs	r1, #1
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f001 fcdb 	bl	801ca84 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b0ce:	4b07      	ldr	r3, [pc, #28]	; (801b0ec <RadioTxPrbs+0x30>)
 801b0d0:	212d      	movs	r1, #45	; 0x2d
 801b0d2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b0d6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b0d8:	f000 ff1f 	bl	801bf1a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b0dc:	4804      	ldr	r0, [pc, #16]	; (801b0f0 <RadioTxPrbs+0x34>)
 801b0de:	f000 fe75 	bl	801bdcc <SUBGRF_SetTx>
}
 801b0e2:	bf00      	nop
 801b0e4:	bd80      	pop	{r7, pc}
 801b0e6:	bf00      	nop
 801b0e8:	20001840 	.word	0x20001840
 801b0ec:	0801aa7f 	.word	0x0801aa7f
 801b0f0:	000fffff 	.word	0x000fffff

0801b0f4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b0f4:	b580      	push	{r7, lr}
 801b0f6:	b084      	sub	sp, #16
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b102:	4618      	mov	r0, r3
 801b104:	f001 fce6 	bl	801cad4 <SUBGRF_SetRfTxPower>
 801b108:	4603      	mov	r3, r0
 801b10a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b10c:	210e      	movs	r1, #14
 801b10e:	f640 101f 	movw	r0, #2335	; 0x91f
 801b112:	f001 fbc3 	bl	801c89c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b116:	7bfb      	ldrb	r3, [r7, #15]
 801b118:	2101      	movs	r1, #1
 801b11a:	4618      	mov	r0, r3
 801b11c:	f001 fcb2 	bl	801ca84 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b120:	f000 fef2 	bl	801bf08 <SUBGRF_SetTxContinuousWave>
}
 801b124:	bf00      	nop
 801b126:	3710      	adds	r7, #16
 801b128:	46bd      	mov	sp, r7
 801b12a:	bd80      	pop	{r7, pc}

0801b12c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b12c:	b480      	push	{r7}
 801b12e:	b089      	sub	sp, #36	; 0x24
 801b130:	af00      	add	r7, sp, #0
 801b132:	60f8      	str	r0, [r7, #12]
 801b134:	60b9      	str	r1, [r7, #8]
 801b136:	4613      	mov	r3, r2
 801b138:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b13a:	2300      	movs	r3, #0
 801b13c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b13e:	2300      	movs	r3, #0
 801b140:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b142:	2300      	movs	r3, #0
 801b144:	61bb      	str	r3, [r7, #24]
 801b146:	e011      	b.n	801b16c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b148:	69bb      	ldr	r3, [r7, #24]
 801b14a:	68ba      	ldr	r2, [r7, #8]
 801b14c:	4413      	add	r3, r2
 801b14e:	781a      	ldrb	r2, [r3, #0]
 801b150:	69bb      	ldr	r3, [r7, #24]
 801b152:	68b9      	ldr	r1, [r7, #8]
 801b154:	440b      	add	r3, r1
 801b156:	43d2      	mvns	r2, r2
 801b158:	b2d2      	uxtb	r2, r2
 801b15a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b15c:	69bb      	ldr	r3, [r7, #24]
 801b15e:	68fa      	ldr	r2, [r7, #12]
 801b160:	4413      	add	r3, r2
 801b162:	2200      	movs	r2, #0
 801b164:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b166:	69bb      	ldr	r3, [r7, #24]
 801b168:	3301      	adds	r3, #1
 801b16a:	61bb      	str	r3, [r7, #24]
 801b16c:	79fb      	ldrb	r3, [r7, #7]
 801b16e:	69ba      	ldr	r2, [r7, #24]
 801b170:	429a      	cmp	r2, r3
 801b172:	dbe9      	blt.n	801b148 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b174:	2300      	movs	r3, #0
 801b176:	61bb      	str	r3, [r7, #24]
 801b178:	e049      	b.n	801b20e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b17a:	69bb      	ldr	r3, [r7, #24]
 801b17c:	425a      	negs	r2, r3
 801b17e:	f003 0307 	and.w	r3, r3, #7
 801b182:	f002 0207 	and.w	r2, r2, #7
 801b186:	bf58      	it	pl
 801b188:	4253      	negpl	r3, r2
 801b18a:	b2db      	uxtb	r3, r3
 801b18c:	f1c3 0307 	rsb	r3, r3, #7
 801b190:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b192:	69bb      	ldr	r3, [r7, #24]
 801b194:	2b00      	cmp	r3, #0
 801b196:	da00      	bge.n	801b19a <payload_integration+0x6e>
 801b198:	3307      	adds	r3, #7
 801b19a:	10db      	asrs	r3, r3, #3
 801b19c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b19e:	69bb      	ldr	r3, [r7, #24]
 801b1a0:	3301      	adds	r3, #1
 801b1a2:	425a      	negs	r2, r3
 801b1a4:	f003 0307 	and.w	r3, r3, #7
 801b1a8:	f002 0207 	and.w	r2, r2, #7
 801b1ac:	bf58      	it	pl
 801b1ae:	4253      	negpl	r3, r2
 801b1b0:	b2db      	uxtb	r3, r3
 801b1b2:	f1c3 0307 	rsb	r3, r3, #7
 801b1b6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b1b8:	69bb      	ldr	r3, [r7, #24]
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	da00      	bge.n	801b1c2 <payload_integration+0x96>
 801b1c0:	3307      	adds	r3, #7
 801b1c2:	10db      	asrs	r3, r3, #3
 801b1c4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b1c6:	7dbb      	ldrb	r3, [r7, #22]
 801b1c8:	68ba      	ldr	r2, [r7, #8]
 801b1ca:	4413      	add	r3, r2
 801b1cc:	781b      	ldrb	r3, [r3, #0]
 801b1ce:	461a      	mov	r2, r3
 801b1d0:	7dfb      	ldrb	r3, [r7, #23]
 801b1d2:	fa42 f303 	asr.w	r3, r2, r3
 801b1d6:	b2db      	uxtb	r3, r3
 801b1d8:	f003 0301 	and.w	r3, r3, #1
 801b1dc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b1de:	7ffa      	ldrb	r2, [r7, #31]
 801b1e0:	7cfb      	ldrb	r3, [r7, #19]
 801b1e2:	4053      	eors	r3, r2
 801b1e4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b1e6:	7d3b      	ldrb	r3, [r7, #20]
 801b1e8:	68fa      	ldr	r2, [r7, #12]
 801b1ea:	4413      	add	r3, r2
 801b1ec:	781b      	ldrb	r3, [r3, #0]
 801b1ee:	b25a      	sxtb	r2, r3
 801b1f0:	7ff9      	ldrb	r1, [r7, #31]
 801b1f2:	7d7b      	ldrb	r3, [r7, #21]
 801b1f4:	fa01 f303 	lsl.w	r3, r1, r3
 801b1f8:	b25b      	sxtb	r3, r3
 801b1fa:	4313      	orrs	r3, r2
 801b1fc:	b259      	sxtb	r1, r3
 801b1fe:	7d3b      	ldrb	r3, [r7, #20]
 801b200:	68fa      	ldr	r2, [r7, #12]
 801b202:	4413      	add	r3, r2
 801b204:	b2ca      	uxtb	r2, r1
 801b206:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b208:	69bb      	ldr	r3, [r7, #24]
 801b20a:	3301      	adds	r3, #1
 801b20c:	61bb      	str	r3, [r7, #24]
 801b20e:	79fb      	ldrb	r3, [r7, #7]
 801b210:	00db      	lsls	r3, r3, #3
 801b212:	69ba      	ldr	r2, [r7, #24]
 801b214:	429a      	cmp	r2, r3
 801b216:	dbb0      	blt.n	801b17a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b218:	7ffb      	ldrb	r3, [r7, #31]
 801b21a:	01db      	lsls	r3, r3, #7
 801b21c:	b25a      	sxtb	r2, r3
 801b21e:	7ffb      	ldrb	r3, [r7, #31]
 801b220:	019b      	lsls	r3, r3, #6
 801b222:	b25b      	sxtb	r3, r3
 801b224:	4313      	orrs	r3, r2
 801b226:	b25b      	sxtb	r3, r3
 801b228:	7ffa      	ldrb	r2, [r7, #31]
 801b22a:	2a00      	cmp	r2, #0
 801b22c:	d101      	bne.n	801b232 <payload_integration+0x106>
 801b22e:	2220      	movs	r2, #32
 801b230:	e000      	b.n	801b234 <payload_integration+0x108>
 801b232:	2200      	movs	r2, #0
 801b234:	4313      	orrs	r3, r2
 801b236:	b259      	sxtb	r1, r3
 801b238:	79fb      	ldrb	r3, [r7, #7]
 801b23a:	68fa      	ldr	r2, [r7, #12]
 801b23c:	4413      	add	r3, r2
 801b23e:	b2ca      	uxtb	r2, r1
 801b240:	701a      	strb	r2, [r3, #0]
}
 801b242:	bf00      	nop
 801b244:	3724      	adds	r7, #36	; 0x24
 801b246:	46bd      	mov	sp, r7
 801b248:	bc80      	pop	{r7}
 801b24a:	4770      	bx	lr

0801b24c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	b08c      	sub	sp, #48	; 0x30
 801b250:	af00      	add	r7, sp, #0
 801b252:	60b9      	str	r1, [r7, #8]
 801b254:	607a      	str	r2, [r7, #4]
 801b256:	603b      	str	r3, [r7, #0]
 801b258:	4603      	mov	r3, r0
 801b25a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b25c:	2300      	movs	r3, #0
 801b25e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b260:	2300      	movs	r3, #0
 801b262:	623b      	str	r3, [r7, #32]
 801b264:	2300      	movs	r3, #0
 801b266:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b268:	f001 fdff 	bl	801ce6a <RFW_DeInit>

    if( rxContinuous != 0 )
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	2b00      	cmp	r3, #0
 801b270:	d001      	beq.n	801b276 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b272:	2300      	movs	r3, #0
 801b274:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	2b00      	cmp	r3, #0
 801b27a:	bf14      	ite	ne
 801b27c:	2301      	movne	r3, #1
 801b27e:	2300      	moveq	r3, #0
 801b280:	b2da      	uxtb	r2, r3
 801b282:	4ba3      	ldr	r3, [pc, #652]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b284:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b286:	7bfb      	ldrb	r3, [r7, #15]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d003      	beq.n	801b294 <RadioSetRxGenericConfig+0x48>
 801b28c:	2b01      	cmp	r3, #1
 801b28e:	f000 80dc 	beq.w	801b44a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b292:	e194      	b.n	801b5be <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b294:	68bb      	ldr	r3, [r7, #8]
 801b296:	689b      	ldr	r3, [r3, #8]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d003      	beq.n	801b2a4 <RadioSetRxGenericConfig+0x58>
 801b29c:	68bb      	ldr	r3, [r7, #8]
 801b29e:	68db      	ldr	r3, [r3, #12]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d102      	bne.n	801b2aa <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b2a4:	f04f 33ff 	mov.w	r3, #4294967295
 801b2a8:	e18a      	b.n	801b5c0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b2aa:	68bb      	ldr	r3, [r7, #8]
 801b2ac:	7f9b      	ldrb	r3, [r3, #30]
 801b2ae:	2b08      	cmp	r3, #8
 801b2b0:	d902      	bls.n	801b2b8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b2b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b2b6:	e183      	b.n	801b5c0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b2b8:	68bb      	ldr	r3, [r7, #8]
 801b2ba:	6919      	ldr	r1, [r3, #16]
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	7f9b      	ldrb	r3, [r3, #30]
 801b2c0:	b29a      	uxth	r2, r3
 801b2c2:	f107 0320 	add.w	r3, r7, #32
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	f001 fec2 	bl	801d050 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	bf14      	ite	ne
 801b2d4:	2301      	movne	r3, #1
 801b2d6:	2300      	moveq	r3, #0
 801b2d8:	b2db      	uxtb	r3, r3
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f000 fe26 	bl	801bf2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b2e0:	4b8b      	ldr	r3, [pc, #556]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b2e8:	68bb      	ldr	r3, [r7, #8]
 801b2ea:	689b      	ldr	r3, [r3, #8]
 801b2ec:	4a88      	ldr	r2, [pc, #544]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b2ee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b2f0:	68bb      	ldr	r3, [r7, #8]
 801b2f2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b2f6:	4b86      	ldr	r3, [pc, #536]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b2fc:	68bb      	ldr	r3, [r7, #8]
 801b2fe:	685b      	ldr	r3, [r3, #4]
 801b300:	4618      	mov	r0, r3
 801b302:	f001 fce5 	bl	801ccd0 <SUBGRF_GetFskBandwidthRegValue>
 801b306:	4603      	mov	r3, r0
 801b308:	461a      	mov	r2, r3
 801b30a:	4b81      	ldr	r3, [pc, #516]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b30c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b310:	4b7f      	ldr	r3, [pc, #508]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b312:	2200      	movs	r2, #0
 801b314:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b316:	68bb      	ldr	r3, [r7, #8]
 801b318:	68db      	ldr	r3, [r3, #12]
 801b31a:	b29b      	uxth	r3, r3
 801b31c:	00db      	lsls	r3, r3, #3
 801b31e:	b29a      	uxth	r2, r3
 801b320:	4b7b      	ldr	r3, [pc, #492]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b322:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b324:	68bb      	ldr	r3, [r7, #8]
 801b326:	7fda      	ldrb	r2, [r3, #31]
 801b328:	4b79      	ldr	r3, [pc, #484]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b32a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b32c:	68bb      	ldr	r3, [r7, #8]
 801b32e:	7f9b      	ldrb	r3, [r3, #30]
 801b330:	00db      	lsls	r3, r3, #3
 801b332:	b2da      	uxtb	r2, r3
 801b334:	4b76      	ldr	r3, [pc, #472]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b336:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b33e:	4b74      	ldr	r3, [pc, #464]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b340:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b342:	68bb      	ldr	r3, [r7, #8]
 801b344:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d105      	bne.n	801b358 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b34c:	68bb      	ldr	r3, [r7, #8]
 801b34e:	695b      	ldr	r3, [r3, #20]
 801b350:	b2da      	uxtb	r2, r3
 801b352:	4b6f      	ldr	r3, [pc, #444]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b354:	759a      	strb	r2, [r3, #22]
 801b356:	e00b      	b.n	801b370 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b358:	68bb      	ldr	r3, [r7, #8]
 801b35a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b35e:	2b02      	cmp	r3, #2
 801b360:	d103      	bne.n	801b36a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b362:	4b6b      	ldr	r3, [pc, #428]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b364:	22ff      	movs	r2, #255	; 0xff
 801b366:	759a      	strb	r2, [r3, #22]
 801b368:	e002      	b.n	801b370 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b36a:	4b69      	ldr	r3, [pc, #420]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b36c:	22ff      	movs	r2, #255	; 0xff
 801b36e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b370:	68bb      	ldr	r3, [r7, #8]
 801b372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b376:	2b02      	cmp	r3, #2
 801b378:	d004      	beq.n	801b384 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b37a:	68bb      	ldr	r3, [r7, #8]
 801b37c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b380:	2b02      	cmp	r3, #2
 801b382:	d12d      	bne.n	801b3e0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b38a:	2bf1      	cmp	r3, #241	; 0xf1
 801b38c:	d00c      	beq.n	801b3a8 <RadioSetRxGenericConfig+0x15c>
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b394:	2bf2      	cmp	r3, #242	; 0xf2
 801b396:	d007      	beq.n	801b3a8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b398:	68bb      	ldr	r3, [r7, #8]
 801b39a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b39e:	2b01      	cmp	r3, #1
 801b3a0:	d002      	beq.n	801b3a8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b3a2:	f04f 33ff 	mov.w	r3, #4294967295
 801b3a6:	e10b      	b.n	801b5c0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b3a8:	2300      	movs	r3, #0
 801b3aa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b3ac:	68bb      	ldr	r3, [r7, #8]
 801b3ae:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b3b0:	4b58      	ldr	r3, [pc, #352]	; (801b514 <RadioSetRxGenericConfig+0x2c8>)
 801b3b2:	6819      	ldr	r1, [r3, #0]
 801b3b4:	f107 0314 	add.w	r3, r7, #20
 801b3b8:	4a57      	ldr	r2, [pc, #348]	; (801b518 <RadioSetRxGenericConfig+0x2cc>)
 801b3ba:	4618      	mov	r0, r3
 801b3bc:	f001 fd48 	bl	801ce50 <RFW_Init>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d002      	beq.n	801b3cc <RadioSetRxGenericConfig+0x180>
                return -1;
 801b3c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b3ca:	e0f9      	b.n	801b5c0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b3cc:	4b50      	ldr	r3, [pc, #320]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b3d2:	4b4f      	ldr	r3, [pc, #316]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b3d4:	2201      	movs	r2, #1
 801b3d6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b3d8:	4b4d      	ldr	r3, [pc, #308]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b3da:	2200      	movs	r2, #0
 801b3dc:	755a      	strb	r2, [r3, #21]
        {
 801b3de:	e00e      	b.n	801b3fe <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b3e0:	68bb      	ldr	r3, [r7, #8]
 801b3e2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b3e6:	4b4a      	ldr	r3, [pc, #296]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b3e8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b3ea:	68bb      	ldr	r3, [r7, #8]
 801b3ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b3f0:	4b47      	ldr	r3, [pc, #284]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b3f2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b3f4:	68bb      	ldr	r3, [r7, #8]
 801b3f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b3fa:	4b45      	ldr	r3, [pc, #276]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b3fc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b3fe:	f7ff fa3c 	bl	801a87a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b402:	2000      	movs	r0, #0
 801b404:	f7fe fbd0 	bl	8019ba8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b408:	4844      	ldr	r0, [pc, #272]	; (801b51c <RadioSetRxGenericConfig+0x2d0>)
 801b40a:	f001 f82d 	bl	801c468 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b40e:	4844      	ldr	r0, [pc, #272]	; (801b520 <RadioSetRxGenericConfig+0x2d4>)
 801b410:	f001 f8fc 	bl	801c60c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b414:	f107 0320 	add.w	r3, r7, #32
 801b418:	4618      	mov	r0, r3
 801b41a:	f000 fbc0 	bl	801bb9e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b41e:	68bb      	ldr	r3, [r7, #8]
 801b420:	8b9b      	ldrh	r3, [r3, #28]
 801b422:	4618      	mov	r0, r3
 801b424:	f000 fc0a 	bl	801bc3c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b428:	68bb      	ldr	r3, [r7, #8]
 801b42a:	8b1b      	ldrh	r3, [r3, #24]
 801b42c:	4618      	mov	r0, r3
 801b42e:	f000 fbe5 	bl	801bbfc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b432:	683b      	ldr	r3, [r7, #0]
 801b434:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b438:	fb03 f202 	mul.w	r2, r3, r2
 801b43c:	68bb      	ldr	r3, [r7, #8]
 801b43e:	689b      	ldr	r3, [r3, #8]
 801b440:	fbb2 f3f3 	udiv	r3, r2, r3
 801b444:	4a32      	ldr	r2, [pc, #200]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b446:	6093      	str	r3, [r2, #8]
        break;
 801b448:	e0b9      	b.n	801b5be <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b44a:	68bb      	ldr	r3, [r7, #8]
 801b44c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d102      	bne.n	801b458 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b452:	f04f 33ff 	mov.w	r3, #4294967295
 801b456:	e0b3      	b.n	801b5c0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b45e:	2b01      	cmp	r3, #1
 801b460:	d104      	bne.n	801b46c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b462:	68bb      	ldr	r3, [r7, #8]
 801b464:	695b      	ldr	r3, [r3, #20]
 801b466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b46a:	e002      	b.n	801b472 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b46c:	23ff      	movs	r3, #255	; 0xff
 801b46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b472:	68bb      	ldr	r3, [r7, #8]
 801b474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b476:	2b00      	cmp	r3, #0
 801b478:	bf14      	ite	ne
 801b47a:	2301      	movne	r3, #1
 801b47c:	2300      	moveq	r3, #0
 801b47e:	b2db      	uxtb	r3, r3
 801b480:	4618      	mov	r0, r3
 801b482:	f000 fd53 	bl	801bf2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b486:	683b      	ldr	r3, [r7, #0]
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	4618      	mov	r0, r3
 801b48c:	f000 fd5d 	bl	801bf4a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b490:	4b1f      	ldr	r3, [pc, #124]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b492:	2201      	movs	r2, #1
 801b494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b498:	68bb      	ldr	r3, [r7, #8]
 801b49a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b49e:	4b1c      	ldr	r3, [pc, #112]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b4a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b4a4:	68bb      	ldr	r3, [r7, #8]
 801b4a6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b4aa:	4b19      	ldr	r3, [pc, #100]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b4ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b4b0:	68bb      	ldr	r3, [r7, #8]
 801b4b2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b4b6:	4b16      	ldr	r3, [pc, #88]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b4b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b4bc:	68bb      	ldr	r3, [r7, #8]
 801b4be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b4c2:	2b02      	cmp	r3, #2
 801b4c4:	d010      	beq.n	801b4e8 <RadioSetRxGenericConfig+0x29c>
 801b4c6:	2b02      	cmp	r3, #2
 801b4c8:	dc2c      	bgt.n	801b524 <RadioSetRxGenericConfig+0x2d8>
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d002      	beq.n	801b4d4 <RadioSetRxGenericConfig+0x288>
 801b4ce:	2b01      	cmp	r3, #1
 801b4d0:	d005      	beq.n	801b4de <RadioSetRxGenericConfig+0x292>
            break;
 801b4d2:	e027      	b.n	801b524 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b4d4:	4b0e      	ldr	r3, [pc, #56]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b4dc:	e023      	b.n	801b526 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b4de:	4b0c      	ldr	r3, [pc, #48]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b4e0:	2201      	movs	r2, #1
 801b4e2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b4e6:	e01e      	b.n	801b526 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b4e8:	68bb      	ldr	r3, [r7, #8]
 801b4ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b4ee:	2b0b      	cmp	r3, #11
 801b4f0:	d004      	beq.n	801b4fc <RadioSetRxGenericConfig+0x2b0>
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b4f8:	2b0c      	cmp	r3, #12
 801b4fa:	d104      	bne.n	801b506 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b4fc:	4b04      	ldr	r3, [pc, #16]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b4fe:	2201      	movs	r2, #1
 801b500:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b504:	e00f      	b.n	801b526 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b506:	4b02      	ldr	r3, [pc, #8]	; (801b510 <RadioSetRxGenericConfig+0x2c4>)
 801b508:	2200      	movs	r2, #0
 801b50a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b50e:	e00a      	b.n	801b526 <RadioSetRxGenericConfig+0x2da>
 801b510:	20001840 	.word	0x20001840
 801b514:	2000183c 	.word	0x2000183c
 801b518:	200018b4 	.word	0x200018b4
 801b51c:	20001878 	.word	0x20001878
 801b520:	2000184e 	.word	0x2000184e
            break;
 801b524:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b526:	4b28      	ldr	r3, [pc, #160]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b528:	2201      	movs	r2, #1
 801b52a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b52c:	68bb      	ldr	r3, [r7, #8]
 801b52e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b530:	4b25      	ldr	r3, [pc, #148]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b532:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b534:	68bb      	ldr	r3, [r7, #8]
 801b536:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b53a:	4b23      	ldr	r3, [pc, #140]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b53c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b53e:	4a22      	ldr	r2, [pc, #136]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b544:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b546:	68bb      	ldr	r3, [r7, #8]
 801b548:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b54c:	4b1e      	ldr	r3, [pc, #120]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b54e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b552:	68bb      	ldr	r3, [r7, #8]
 801b554:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b558:	4b1b      	ldr	r3, [pc, #108]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b55a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b55e:	f7ff f98c 	bl	801a87a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b562:	2001      	movs	r0, #1
 801b564:	f7fe fb20 	bl	8019ba8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b568:	4818      	ldr	r0, [pc, #96]	; (801b5cc <RadioSetRxGenericConfig+0x380>)
 801b56a:	f000 ff7d 	bl	801c468 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b56e:	4818      	ldr	r0, [pc, #96]	; (801b5d0 <RadioSetRxGenericConfig+0x384>)
 801b570:	f001 f84c 	bl	801c60c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b574:	4b14      	ldr	r3, [pc, #80]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b57a:	2b01      	cmp	r3, #1
 801b57c:	d10d      	bne.n	801b59a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b57e:	f240 7036 	movw	r0, #1846	; 0x736
 801b582:	f001 f99f 	bl	801c8c4 <SUBGRF_ReadRegister>
 801b586:	4603      	mov	r3, r0
 801b588:	f023 0304 	bic.w	r3, r3, #4
 801b58c:	b2db      	uxtb	r3, r3
 801b58e:	4619      	mov	r1, r3
 801b590:	f240 7036 	movw	r0, #1846	; 0x736
 801b594:	f001 f982 	bl	801c89c <SUBGRF_WriteRegister>
 801b598:	e00c      	b.n	801b5b4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b59a:	f240 7036 	movw	r0, #1846	; 0x736
 801b59e:	f001 f991 	bl	801c8c4 <SUBGRF_ReadRegister>
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	f043 0304 	orr.w	r3, r3, #4
 801b5a8:	b2db      	uxtb	r3, r3
 801b5aa:	4619      	mov	r1, r3
 801b5ac:	f240 7036 	movw	r0, #1846	; 0x736
 801b5b0:	f001 f974 	bl	801c89c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b5b4:	4b04      	ldr	r3, [pc, #16]	; (801b5c8 <RadioSetRxGenericConfig+0x37c>)
 801b5b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b5ba:	609a      	str	r2, [r3, #8]
        break;
 801b5bc:	bf00      	nop
    }
    return status;
 801b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	3730      	adds	r7, #48	; 0x30
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}
 801b5c8:	20001840 	.word	0x20001840
 801b5cc:	20001878 	.word	0x20001878
 801b5d0:	2000184e 	.word	0x2000184e

0801b5d4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801b5d4:	b580      	push	{r7, lr}
 801b5d6:	b08e      	sub	sp, #56	; 0x38
 801b5d8:	af00      	add	r7, sp, #0
 801b5da:	60b9      	str	r1, [r7, #8]
 801b5dc:	607b      	str	r3, [r7, #4]
 801b5de:	4603      	mov	r3, r0
 801b5e0:	73fb      	strb	r3, [r7, #15]
 801b5e2:	4613      	mov	r3, r2
 801b5e4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b5ee:	f001 fc3c 	bl	801ce6a <RFW_DeInit>
    switch( modem )
 801b5f2:	7bfb      	ldrb	r3, [r7, #15]
 801b5f4:	2b03      	cmp	r3, #3
 801b5f6:	f200 8204 	bhi.w	801ba02 <RadioSetTxGenericConfig+0x42e>
 801b5fa:	a201      	add	r2, pc, #4	; (adr r2, 801b600 <RadioSetTxGenericConfig+0x2c>)
 801b5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b600:	0801b785 	.word	0x0801b785
 801b604:	0801b8cd 	.word	0x0801b8cd
 801b608:	0801b9c5 	.word	0x0801b9c5
 801b60c:	0801b611 	.word	0x0801b611
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	7c9b      	ldrb	r3, [r3, #18]
 801b614:	2b08      	cmp	r3, #8
 801b616:	d902      	bls.n	801b61e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801b618:	f04f 33ff 	mov.w	r3, #4294967295
 801b61c:	e206      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801b61e:	68bb      	ldr	r3, [r7, #8]
 801b620:	6899      	ldr	r1, [r3, #8]
 801b622:	68bb      	ldr	r3, [r7, #8]
 801b624:	7c9b      	ldrb	r3, [r3, #18]
 801b626:	b29a      	uxth	r2, r3
 801b628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b62c:	4618      	mov	r0, r3
 801b62e:	f001 fd0f 	bl	801d050 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d102      	bne.n	801b640 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801b63a:	f04f 33ff 	mov.w	r3, #4294967295
 801b63e:	e1f5      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	f242 7210 	movw	r2, #10000	; 0x2710
 801b648:	4293      	cmp	r3, r2
 801b64a:	d813      	bhi.n	801b674 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801b64c:	2302      	movs	r3, #2
 801b64e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801b652:	4b99      	ldr	r3, [pc, #612]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b654:	2203      	movs	r2, #3
 801b656:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801b658:	4b97      	ldr	r3, [pc, #604]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b65a:	2203      	movs	r2, #3
 801b65c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b660:	68bb      	ldr	r3, [r7, #8]
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	4a94      	ldr	r2, [pc, #592]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b666:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	7cda      	ldrb	r2, [r3, #19]
 801b66c:	4b92      	ldr	r3, [pc, #584]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b66e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b672:	e017      	b.n	801b6a4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801b674:	2300      	movs	r3, #0
 801b676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b67a:	4b8f      	ldr	r3, [pc, #572]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b67c:	2200      	movs	r2, #0
 801b67e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b680:	4b8d      	ldr	r3, [pc, #564]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b682:	2200      	movs	r2, #0
 801b684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b688:	68bb      	ldr	r3, [r7, #8]
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	4a8a      	ldr	r2, [pc, #552]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b68e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	7cda      	ldrb	r2, [r3, #19]
 801b694:	4b88      	ldr	r3, [pc, #544]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801b69a:	68bb      	ldr	r3, [r7, #8]
 801b69c:	681b      	ldr	r3, [r3, #0]
 801b69e:	089b      	lsrs	r3, r3, #2
 801b6a0:	4a85      	ldr	r2, [pc, #532]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b6a2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801b6a4:	68bb      	ldr	r3, [r7, #8]
 801b6a6:	685b      	ldr	r3, [r3, #4]
 801b6a8:	b29b      	uxth	r3, r3
 801b6aa:	00db      	lsls	r3, r3, #3
 801b6ac:	b29a      	uxth	r2, r3
 801b6ae:	4b82      	ldr	r3, [pc, #520]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b6b0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b6b2:	4b81      	ldr	r3, [pc, #516]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b6b4:	2204      	movs	r2, #4
 801b6b6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	7c9b      	ldrb	r3, [r3, #18]
 801b6bc:	00db      	lsls	r3, r3, #3
 801b6be:	b2da      	uxtb	r2, r3
 801b6c0:	4b7d      	ldr	r3, [pc, #500]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b6c2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b6c4:	4b7c      	ldr	r3, [pc, #496]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b6c6:	2200      	movs	r2, #0
 801b6c8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b6ca:	68bb      	ldr	r3, [r7, #8]
 801b6cc:	7d9b      	ldrb	r3, [r3, #22]
 801b6ce:	2b02      	cmp	r3, #2
 801b6d0:	d003      	beq.n	801b6da <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b6d2:	68bb      	ldr	r3, [r7, #8]
 801b6d4:	7d1b      	ldrb	r3, [r3, #20]
 801b6d6:	2b02      	cmp	r3, #2
 801b6d8:	d12b      	bne.n	801b732 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b6da:	68bb      	ldr	r3, [r7, #8]
 801b6dc:	7d5b      	ldrb	r3, [r3, #21]
 801b6de:	2bf1      	cmp	r3, #241	; 0xf1
 801b6e0:	d00a      	beq.n	801b6f8 <RadioSetTxGenericConfig+0x124>
 801b6e2:	68bb      	ldr	r3, [r7, #8]
 801b6e4:	7d5b      	ldrb	r3, [r3, #21]
 801b6e6:	2bf2      	cmp	r3, #242	; 0xf2
 801b6e8:	d006      	beq.n	801b6f8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	7d5b      	ldrb	r3, [r3, #21]
 801b6ee:	2b01      	cmp	r3, #1
 801b6f0:	d002      	beq.n	801b6f8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801b6f2:	f04f 33ff 	mov.w	r3, #4294967295
 801b6f6:	e199      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801b6f8:	68bb      	ldr	r3, [r7, #8]
 801b6fa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801b6fc:	2301      	movs	r3, #1
 801b6fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b702:	4b6e      	ldr	r3, [pc, #440]	; (801b8bc <RadioSetTxGenericConfig+0x2e8>)
 801b704:	6819      	ldr	r1, [r3, #0]
 801b706:	f107 0320 	add.w	r3, r7, #32
 801b70a:	4a6d      	ldr	r2, [pc, #436]	; (801b8c0 <RadioSetTxGenericConfig+0x2ec>)
 801b70c:	4618      	mov	r0, r3
 801b70e:	f001 fb9f 	bl	801ce50 <RFW_Init>
 801b712:	4603      	mov	r3, r0
 801b714:	2b00      	cmp	r3, #0
 801b716:	d002      	beq.n	801b71e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801b718:	f04f 33ff 	mov.w	r3, #4294967295
 801b71c:	e186      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b71e:	4b66      	ldr	r3, [pc, #408]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b720:	2200      	movs	r2, #0
 801b722:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b724:	4b64      	ldr	r3, [pc, #400]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b726:	2201      	movs	r2, #1
 801b728:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b72a:	4b63      	ldr	r3, [pc, #396]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b72c:	2200      	movs	r2, #0
 801b72e:	755a      	strb	r2, [r3, #21]
        {
 801b730:	e00b      	b.n	801b74a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	7d5a      	ldrb	r2, [r3, #21]
 801b736:	4b60      	ldr	r3, [pc, #384]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b738:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801b73a:	68bb      	ldr	r3, [r7, #8]
 801b73c:	7d9a      	ldrb	r2, [r3, #22]
 801b73e:	4b5e      	ldr	r3, [pc, #376]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b740:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801b742:	68bb      	ldr	r3, [r7, #8]
 801b744:	7d1a      	ldrb	r2, [r3, #20]
 801b746:	4b5c      	ldr	r3, [pc, #368]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b748:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b74a:	f7ff f896 	bl	801a87a <RadioStandby>
        RadioSetModem( radio_modem );
 801b74e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b752:	4618      	mov	r0, r3
 801b754:	f7fe fa28 	bl	8019ba8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b758:	485a      	ldr	r0, [pc, #360]	; (801b8c4 <RadioSetTxGenericConfig+0x2f0>)
 801b75a:	f000 fe85 	bl	801c468 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b75e:	485a      	ldr	r0, [pc, #360]	; (801b8c8 <RadioSetTxGenericConfig+0x2f4>)
 801b760:	f000 ff54 	bl	801c60c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b768:	4618      	mov	r0, r3
 801b76a:	f000 fa18 	bl	801bb9e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801b76e:	68bb      	ldr	r3, [r7, #8]
 801b770:	8a1b      	ldrh	r3, [r3, #16]
 801b772:	4618      	mov	r0, r3
 801b774:	f000 fa62 	bl	801bc3c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	899b      	ldrh	r3, [r3, #12]
 801b77c:	4618      	mov	r0, r3
 801b77e:	f000 fa3d 	bl	801bbfc <SUBGRF_SetCrcPolynomial>
        break;
 801b782:	e13f      	b.n	801ba04 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d102      	bne.n	801b792 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801b78c:	f04f 33ff 	mov.w	r3, #4294967295
 801b790:	e14c      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801b792:	68bb      	ldr	r3, [r7, #8]
 801b794:	7c9b      	ldrb	r3, [r3, #18]
 801b796:	2b08      	cmp	r3, #8
 801b798:	d902      	bls.n	801b7a0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801b79a:	f04f 33ff 	mov.w	r3, #4294967295
 801b79e:	e145      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	6899      	ldr	r1, [r3, #8]
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	7c9b      	ldrb	r3, [r3, #18]
 801b7a8:	b29a      	uxth	r2, r3
 801b7aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b7ae:	4618      	mov	r0, r3
 801b7b0:	f001 fc4e 	bl	801d050 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b7b4:	4b40      	ldr	r3, [pc, #256]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7b6:	2200      	movs	r2, #0
 801b7b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b7bc:	68bb      	ldr	r3, [r7, #8]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	4a3d      	ldr	r2, [pc, #244]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7c2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b7c4:	68bb      	ldr	r3, [r7, #8]
 801b7c6:	7cda      	ldrb	r2, [r3, #19]
 801b7c8:	4b3b      	ldr	r3, [pc, #236]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b7ce:	68bb      	ldr	r3, [r7, #8]
 801b7d0:	699b      	ldr	r3, [r3, #24]
 801b7d2:	4a39      	ldr	r2, [pc, #228]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7d4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b7d6:	4b38      	ldr	r3, [pc, #224]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7d8:	2200      	movs	r2, #0
 801b7da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b7dc:	68bb      	ldr	r3, [r7, #8]
 801b7de:	685b      	ldr	r3, [r3, #4]
 801b7e0:	b29b      	uxth	r3, r3
 801b7e2:	00db      	lsls	r3, r3, #3
 801b7e4:	b29a      	uxth	r2, r3
 801b7e6:	4b34      	ldr	r3, [pc, #208]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7e8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b7ea:	4b33      	ldr	r3, [pc, #204]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7ec:	2204      	movs	r2, #4
 801b7ee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b7f0:	68bb      	ldr	r3, [r7, #8]
 801b7f2:	7c9b      	ldrb	r3, [r3, #18]
 801b7f4:	00db      	lsls	r3, r3, #3
 801b7f6:	b2da      	uxtb	r2, r3
 801b7f8:	4b2f      	ldr	r3, [pc, #188]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7fa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b7fc:	4b2e      	ldr	r3, [pc, #184]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b7fe:	2200      	movs	r2, #0
 801b800:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b802:	68bb      	ldr	r3, [r7, #8]
 801b804:	7d9b      	ldrb	r3, [r3, #22]
 801b806:	2b02      	cmp	r3, #2
 801b808:	d003      	beq.n	801b812 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b80a:	68bb      	ldr	r3, [r7, #8]
 801b80c:	7d1b      	ldrb	r3, [r3, #20]
 801b80e:	2b02      	cmp	r3, #2
 801b810:	d12a      	bne.n	801b868 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b812:	68bb      	ldr	r3, [r7, #8]
 801b814:	7d5b      	ldrb	r3, [r3, #21]
 801b816:	2bf1      	cmp	r3, #241	; 0xf1
 801b818:	d00a      	beq.n	801b830 <RadioSetTxGenericConfig+0x25c>
 801b81a:	68bb      	ldr	r3, [r7, #8]
 801b81c:	7d5b      	ldrb	r3, [r3, #21]
 801b81e:	2bf2      	cmp	r3, #242	; 0xf2
 801b820:	d006      	beq.n	801b830 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b822:	68bb      	ldr	r3, [r7, #8]
 801b824:	7d5b      	ldrb	r3, [r3, #21]
 801b826:	2b01      	cmp	r3, #1
 801b828:	d002      	beq.n	801b830 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b82a:	f04f 33ff 	mov.w	r3, #4294967295
 801b82e:	e0fd      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b830:	2301      	movs	r3, #1
 801b832:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b834:	68bb      	ldr	r3, [r7, #8]
 801b836:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b838:	4b20      	ldr	r3, [pc, #128]	; (801b8bc <RadioSetTxGenericConfig+0x2e8>)
 801b83a:	6819      	ldr	r1, [r3, #0]
 801b83c:	f107 0314 	add.w	r3, r7, #20
 801b840:	4a1f      	ldr	r2, [pc, #124]	; (801b8c0 <RadioSetTxGenericConfig+0x2ec>)
 801b842:	4618      	mov	r0, r3
 801b844:	f001 fb04 	bl	801ce50 <RFW_Init>
 801b848:	4603      	mov	r3, r0
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d002      	beq.n	801b854 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801b84e:	f04f 33ff 	mov.w	r3, #4294967295
 801b852:	e0eb      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b854:	4b18      	ldr	r3, [pc, #96]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b856:	2200      	movs	r2, #0
 801b858:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b85a:	4b17      	ldr	r3, [pc, #92]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b85c:	2201      	movs	r2, #1
 801b85e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b860:	4b15      	ldr	r3, [pc, #84]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b862:	2200      	movs	r2, #0
 801b864:	755a      	strb	r2, [r3, #21]
        {
 801b866:	e00b      	b.n	801b880 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b868:	68bb      	ldr	r3, [r7, #8]
 801b86a:	7d5a      	ldrb	r2, [r3, #21]
 801b86c:	4b12      	ldr	r3, [pc, #72]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b86e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b870:	68bb      	ldr	r3, [r7, #8]
 801b872:	7d9a      	ldrb	r2, [r3, #22]
 801b874:	4b10      	ldr	r3, [pc, #64]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b876:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b878:	68bb      	ldr	r3, [r7, #8]
 801b87a:	7d1a      	ldrb	r2, [r3, #20]
 801b87c:	4b0e      	ldr	r3, [pc, #56]	; (801b8b8 <RadioSetTxGenericConfig+0x2e4>)
 801b87e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b880:	f7fe fffb 	bl	801a87a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b884:	2000      	movs	r0, #0
 801b886:	f7fe f98f 	bl	8019ba8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b88a:	480e      	ldr	r0, [pc, #56]	; (801b8c4 <RadioSetTxGenericConfig+0x2f0>)
 801b88c:	f000 fdec 	bl	801c468 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b890:	480d      	ldr	r0, [pc, #52]	; (801b8c8 <RadioSetTxGenericConfig+0x2f4>)
 801b892:	f000 febb 	bl	801c60c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b89a:	4618      	mov	r0, r3
 801b89c:	f000 f97f 	bl	801bb9e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b8a0:	68bb      	ldr	r3, [r7, #8]
 801b8a2:	8a1b      	ldrh	r3, [r3, #16]
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f000 f9c9 	bl	801bc3c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b8aa:	68bb      	ldr	r3, [r7, #8]
 801b8ac:	899b      	ldrh	r3, [r3, #12]
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	f000 f9a4 	bl	801bbfc <SUBGRF_SetCrcPolynomial>
        break;
 801b8b4:	e0a6      	b.n	801ba04 <RadioSetTxGenericConfig+0x430>
 801b8b6:	bf00      	nop
 801b8b8:	20001840 	.word	0x20001840
 801b8bc:	2000183c 	.word	0x2000183c
 801b8c0:	2000189c 	.word	0x2000189c
 801b8c4:	20001878 	.word	0x20001878
 801b8c8:	2000184e 	.word	0x2000184e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b8cc:	4b59      	ldr	r3, [pc, #356]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b8ce:	2201      	movs	r2, #1
 801b8d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b8d4:	68bb      	ldr	r3, [r7, #8]
 801b8d6:	781a      	ldrb	r2, [r3, #0]
 801b8d8:	4b56      	ldr	r3, [pc, #344]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b8de:	68bb      	ldr	r3, [r7, #8]
 801b8e0:	785a      	ldrb	r2, [r3, #1]
 801b8e2:	4b54      	ldr	r3, [pc, #336]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b8e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	789a      	ldrb	r2, [r3, #2]
 801b8ec:	4b51      	ldr	r3, [pc, #324]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b8ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b8f2:	68bb      	ldr	r3, [r7, #8]
 801b8f4:	78db      	ldrb	r3, [r3, #3]
 801b8f6:	2b02      	cmp	r3, #2
 801b8f8:	d010      	beq.n	801b91c <RadioSetTxGenericConfig+0x348>
 801b8fa:	2b02      	cmp	r3, #2
 801b8fc:	dc20      	bgt.n	801b940 <RadioSetTxGenericConfig+0x36c>
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d002      	beq.n	801b908 <RadioSetTxGenericConfig+0x334>
 801b902:	2b01      	cmp	r3, #1
 801b904:	d005      	beq.n	801b912 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801b906:	e01b      	b.n	801b940 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b908:	4b4a      	ldr	r3, [pc, #296]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b90a:	2200      	movs	r2, #0
 801b90c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b910:	e017      	b.n	801b942 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b912:	4b48      	ldr	r3, [pc, #288]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b914:	2201      	movs	r2, #1
 801b916:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b91a:	e012      	b.n	801b942 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	781b      	ldrb	r3, [r3, #0]
 801b920:	2b0b      	cmp	r3, #11
 801b922:	d003      	beq.n	801b92c <RadioSetTxGenericConfig+0x358>
 801b924:	68bb      	ldr	r3, [r7, #8]
 801b926:	781b      	ldrb	r3, [r3, #0]
 801b928:	2b0c      	cmp	r3, #12
 801b92a:	d104      	bne.n	801b936 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b92c:	4b41      	ldr	r3, [pc, #260]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b92e:	2201      	movs	r2, #1
 801b930:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b934:	e005      	b.n	801b942 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b936:	4b3f      	ldr	r3, [pc, #252]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b938:	2200      	movs	r2, #0
 801b93a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b93e:	e000      	b.n	801b942 <RadioSetTxGenericConfig+0x36e>
            break;
 801b940:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b942:	4b3c      	ldr	r3, [pc, #240]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b944:	2201      	movs	r2, #1
 801b946:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	889a      	ldrh	r2, [r3, #4]
 801b94c:	4b39      	ldr	r3, [pc, #228]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b94e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b950:	68bb      	ldr	r3, [r7, #8]
 801b952:	799a      	ldrb	r2, [r3, #6]
 801b954:	4b37      	ldr	r3, [pc, #220]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b956:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b958:	68bb      	ldr	r3, [r7, #8]
 801b95a:	79da      	ldrb	r2, [r3, #7]
 801b95c:	4b35      	ldr	r3, [pc, #212]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b95e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b962:	68bb      	ldr	r3, [r7, #8]
 801b964:	7a1a      	ldrb	r2, [r3, #8]
 801b966:	4b33      	ldr	r3, [pc, #204]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801b96c:	f7fe ff85 	bl	801a87a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b970:	2001      	movs	r0, #1
 801b972:	f7fe f919 	bl	8019ba8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b976:	4830      	ldr	r0, [pc, #192]	; (801ba38 <RadioSetTxGenericConfig+0x464>)
 801b978:	f000 fd76 	bl	801c468 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b97c:	482f      	ldr	r0, [pc, #188]	; (801ba3c <RadioSetTxGenericConfig+0x468>)
 801b97e:	f000 fe45 	bl	801c60c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b982:	4b2c      	ldr	r3, [pc, #176]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b988:	2b06      	cmp	r3, #6
 801b98a:	d10d      	bne.n	801b9a8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b98c:	f640 0089 	movw	r0, #2185	; 0x889
 801b990:	f000 ff98 	bl	801c8c4 <SUBGRF_ReadRegister>
 801b994:	4603      	mov	r3, r0
 801b996:	f023 0304 	bic.w	r3, r3, #4
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	4619      	mov	r1, r3
 801b99e:	f640 0089 	movw	r0, #2185	; 0x889
 801b9a2:	f000 ff7b 	bl	801c89c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801b9a6:	e02d      	b.n	801ba04 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b9a8:	f640 0089 	movw	r0, #2185	; 0x889
 801b9ac:	f000 ff8a 	bl	801c8c4 <SUBGRF_ReadRegister>
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	f043 0304 	orr.w	r3, r3, #4
 801b9b6:	b2db      	uxtb	r3, r3
 801b9b8:	4619      	mov	r1, r3
 801b9ba:	f640 0089 	movw	r0, #2185	; 0x889
 801b9be:	f000 ff6d 	bl	801c89c <SUBGRF_WriteRegister>
        break;
 801b9c2:	e01f      	b.n	801ba04 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b9c4:	68bb      	ldr	r3, [r7, #8]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d004      	beq.n	801b9d6 <RadioSetTxGenericConfig+0x402>
 801b9cc:	68bb      	ldr	r3, [r7, #8]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b9d4:	d902      	bls.n	801b9dc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b9d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b9da:	e027      	b.n	801ba2c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b9dc:	2003      	movs	r0, #3
 801b9de:	f7fe f8e3 	bl	8019ba8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b9e2:	4b14      	ldr	r3, [pc, #80]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b9e4:	2202      	movs	r2, #2
 801b9e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	4a11      	ldr	r2, [pc, #68]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b9f0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b9f2:	4b10      	ldr	r3, [pc, #64]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801b9f4:	2216      	movs	r2, #22
 801b9f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b9fa:	480f      	ldr	r0, [pc, #60]	; (801ba38 <RadioSetTxGenericConfig+0x464>)
 801b9fc:	f000 fd34 	bl	801c468 <SUBGRF_SetModulationParams>
        break;
 801ba00:	e000      	b.n	801ba04 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801ba02:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ba04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ba08:	4618      	mov	r0, r3
 801ba0a:	f001 f863 	bl	801cad4 <SUBGRF_SetRfTxPower>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	461a      	mov	r2, r3
 801ba12:	4b08      	ldr	r3, [pc, #32]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801ba14:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ba18:	4b06      	ldr	r3, [pc, #24]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801ba1a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ba1e:	4618      	mov	r0, r3
 801ba20:	f001 fa37 	bl	801ce92 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ba24:	4a03      	ldr	r2, [pc, #12]	; (801ba34 <RadioSetTxGenericConfig+0x460>)
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	6053      	str	r3, [r2, #4]
    return 0;
 801ba2a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ba2c:	4618      	mov	r0, r3
 801ba2e:	3738      	adds	r7, #56	; 0x38
 801ba30:	46bd      	mov	sp, r7
 801ba32:	bd80      	pop	{r7, pc}
 801ba34:	20001840 	.word	0x20001840
 801ba38:	20001878 	.word	0x20001878
 801ba3c:	2000184e 	.word	0x2000184e

0801ba40 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801ba40:	b480      	push	{r7}
 801ba42:	b085      	sub	sp, #20
 801ba44:	af00      	add	r7, sp, #0
 801ba46:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801ba48:	2301      	movs	r3, #1
 801ba4a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801ba4c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba4e:	4618      	mov	r0, r3
 801ba50:	3714      	adds	r7, #20
 801ba52:	46bd      	mov	sp, r7
 801ba54:	bc80      	pop	{r7}
 801ba56:	4770      	bx	lr

0801ba58 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801ba58:	b480      	push	{r7}
 801ba5a:	b083      	sub	sp, #12
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]
 801ba60:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801ba62:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801ba64:	4618      	mov	r0, r3
 801ba66:	370c      	adds	r7, #12
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bc80      	pop	{r7}
 801ba6c:	4770      	bx	lr
	...

0801ba70 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b084      	sub	sp, #16
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	d002      	beq.n	801ba84 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801ba7e:	4a1d      	ldr	r2, [pc, #116]	; (801baf4 <SUBGRF_Init+0x84>)
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801ba84:	f7e6 fde8 	bl	8002658 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801ba88:	2002      	movs	r0, #2
 801ba8a:	f001 f8ff 	bl	801cc8c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801ba8e:	4b1a      	ldr	r3, [pc, #104]	; (801baf8 <SUBGRF_Init+0x88>)
 801ba90:	2200      	movs	r2, #0
 801ba92:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801ba94:	2000      	movs	r0, #0
 801ba96:	f000 f97d 	bl	801bd94 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ba9a:	f7f1 ff1f 	bl	800d8dc <RBI_IsTCXO>
 801ba9e:	4603      	mov	r3, r0
 801baa0:	2b01      	cmp	r3, #1
 801baa2:	d10e      	bne.n	801bac2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801baa4:	2140      	movs	r1, #64	; 0x40
 801baa6:	2001      	movs	r0, #1
 801baa8:	f000 fb82 	bl	801c1b0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801baac:	2100      	movs	r1, #0
 801baae:	f640 1011 	movw	r0, #2321	; 0x911
 801bab2:	f000 fef3 	bl	801c89c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bab6:	237f      	movs	r3, #127	; 0x7f
 801bab8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801baba:	7b38      	ldrb	r0, [r7, #12]
 801babc:	f000 fa8b 	bl	801bfd6 <SUBGRF_Calibrate>
 801bac0:	e009      	b.n	801bad6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bac2:	2120      	movs	r1, #32
 801bac4:	f640 1011 	movw	r0, #2321	; 0x911
 801bac8:	f000 fee8 	bl	801c89c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bacc:	2120      	movs	r1, #32
 801bace:	f640 1012 	movw	r0, #2322	; 0x912
 801bad2:	f000 fee3 	bl	801c89c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bad6:	210e      	movs	r1, #14
 801bad8:	f640 101f 	movw	r0, #2335	; 0x91f
 801badc:	f000 fede 	bl	801c89c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bae0:	f7f1 fee0 	bl	800d8a4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bae4:	4b05      	ldr	r3, [pc, #20]	; (801bafc <SUBGRF_Init+0x8c>)
 801bae6:	2201      	movs	r2, #1
 801bae8:	701a      	strb	r2, [r3, #0]
}
 801baea:	bf00      	nop
 801baec:	3710      	adds	r7, #16
 801baee:	46bd      	mov	sp, r7
 801baf0:	bd80      	pop	{r7, pc}
 801baf2:	bf00      	nop
 801baf4:	200018d8 	.word	0x200018d8
 801baf8:	200018d4 	.word	0x200018d4
 801bafc:	200018cc 	.word	0x200018cc

0801bb00 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bb00:	b480      	push	{r7}
 801bb02:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bb04:	4b02      	ldr	r3, [pc, #8]	; (801bb10 <SUBGRF_GetOperatingMode+0x10>)
 801bb06:	781b      	ldrb	r3, [r3, #0]
}
 801bb08:	4618      	mov	r0, r3
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	bc80      	pop	{r7}
 801bb0e:	4770      	bx	lr
 801bb10:	200018cc 	.word	0x200018cc

0801bb14 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bb14:	b580      	push	{r7, lr}
 801bb16:	b082      	sub	sp, #8
 801bb18:	af00      	add	r7, sp, #0
 801bb1a:	6078      	str	r0, [r7, #4]
 801bb1c:	460b      	mov	r3, r1
 801bb1e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bb20:	78fb      	ldrb	r3, [r7, #3]
 801bb22:	461a      	mov	r2, r3
 801bb24:	6879      	ldr	r1, [r7, #4]
 801bb26:	2000      	movs	r0, #0
 801bb28:	f000 ff24 	bl	801c974 <SUBGRF_WriteBuffer>
}
 801bb2c:	bf00      	nop
 801bb2e:	3708      	adds	r7, #8
 801bb30:	46bd      	mov	sp, r7
 801bb32:	bd80      	pop	{r7, pc}

0801bb34 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bb34:	b580      	push	{r7, lr}
 801bb36:	b086      	sub	sp, #24
 801bb38:	af00      	add	r7, sp, #0
 801bb3a:	60f8      	str	r0, [r7, #12]
 801bb3c:	60b9      	str	r1, [r7, #8]
 801bb3e:	4613      	mov	r3, r2
 801bb40:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bb42:	2300      	movs	r3, #0
 801bb44:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bb46:	f107 0317 	add.w	r3, r7, #23
 801bb4a:	4619      	mov	r1, r3
 801bb4c:	68b8      	ldr	r0, [r7, #8]
 801bb4e:	f000 fe27 	bl	801c7a0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bb52:	68bb      	ldr	r3, [r7, #8]
 801bb54:	781b      	ldrb	r3, [r3, #0]
 801bb56:	79fa      	ldrb	r2, [r7, #7]
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d201      	bcs.n	801bb60 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801bb5c:	2301      	movs	r3, #1
 801bb5e:	e007      	b.n	801bb70 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801bb60:	7df8      	ldrb	r0, [r7, #23]
 801bb62:	68bb      	ldr	r3, [r7, #8]
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	461a      	mov	r2, r3
 801bb68:	68f9      	ldr	r1, [r7, #12]
 801bb6a:	f000 ff25 	bl	801c9b8 <SUBGRF_ReadBuffer>

    return 0;
 801bb6e:	2300      	movs	r3, #0
}
 801bb70:	4618      	mov	r0, r3
 801bb72:	3718      	adds	r7, #24
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bd80      	pop	{r7, pc}

0801bb78 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b084      	sub	sp, #16
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	60f8      	str	r0, [r7, #12]
 801bb80:	460b      	mov	r3, r1
 801bb82:	607a      	str	r2, [r7, #4]
 801bb84:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801bb86:	7afb      	ldrb	r3, [r7, #11]
 801bb88:	4619      	mov	r1, r3
 801bb8a:	68f8      	ldr	r0, [r7, #12]
 801bb8c:	f7ff ffc2 	bl	801bb14 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801bb90:	6878      	ldr	r0, [r7, #4]
 801bb92:	f000 f91b 	bl	801bdcc <SUBGRF_SetTx>
}
 801bb96:	bf00      	nop
 801bb98:	3710      	adds	r7, #16
 801bb9a:	46bd      	mov	sp, r7
 801bb9c:	bd80      	pop	{r7, pc}

0801bb9e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801bb9e:	b580      	push	{r7, lr}
 801bba0:	b082      	sub	sp, #8
 801bba2:	af00      	add	r7, sp, #0
 801bba4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801bba6:	2208      	movs	r2, #8
 801bba8:	6879      	ldr	r1, [r7, #4]
 801bbaa:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801bbae:	f000 fe9d 	bl	801c8ec <SUBGRF_WriteRegisters>
    return 0;
 801bbb2:	2300      	movs	r3, #0
}
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	3708      	adds	r7, #8
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}

0801bbbc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	b084      	sub	sp, #16
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	4603      	mov	r3, r0
 801bbc4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801bbc6:	88fb      	ldrh	r3, [r7, #6]
 801bbc8:	0a1b      	lsrs	r3, r3, #8
 801bbca:	b29b      	uxth	r3, r3
 801bbcc:	b2db      	uxtb	r3, r3
 801bbce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801bbd0:	88fb      	ldrh	r3, [r7, #6]
 801bbd2:	b2db      	uxtb	r3, r3
 801bbd4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801bbd6:	f000 fb6f 	bl	801c2b8 <SUBGRF_GetPacketType>
 801bbda:	4603      	mov	r3, r0
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d108      	bne.n	801bbf2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801bbe0:	f107 030c 	add.w	r3, r7, #12
 801bbe4:	2202      	movs	r2, #2
 801bbe6:	4619      	mov	r1, r3
 801bbe8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801bbec:	f000 fe7e 	bl	801c8ec <SUBGRF_WriteRegisters>
            break;
 801bbf0:	e000      	b.n	801bbf4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801bbf2:	bf00      	nop
    }
}
 801bbf4:	bf00      	nop
 801bbf6:	3710      	adds	r7, #16
 801bbf8:	46bd      	mov	sp, r7
 801bbfa:	bd80      	pop	{r7, pc}

0801bbfc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b084      	sub	sp, #16
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	4603      	mov	r3, r0
 801bc04:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801bc06:	88fb      	ldrh	r3, [r7, #6]
 801bc08:	0a1b      	lsrs	r3, r3, #8
 801bc0a:	b29b      	uxth	r3, r3
 801bc0c:	b2db      	uxtb	r3, r3
 801bc0e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801bc10:	88fb      	ldrh	r3, [r7, #6]
 801bc12:	b2db      	uxtb	r3, r3
 801bc14:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801bc16:	f000 fb4f 	bl	801c2b8 <SUBGRF_GetPacketType>
 801bc1a:	4603      	mov	r3, r0
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d108      	bne.n	801bc32 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801bc20:	f107 030c 	add.w	r3, r7, #12
 801bc24:	2202      	movs	r2, #2
 801bc26:	4619      	mov	r1, r3
 801bc28:	f240 60be 	movw	r0, #1726	; 0x6be
 801bc2c:	f000 fe5e 	bl	801c8ec <SUBGRF_WriteRegisters>
            break;
 801bc30:	e000      	b.n	801bc34 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801bc32:	bf00      	nop
    }
}
 801bc34:	bf00      	nop
 801bc36:	3710      	adds	r7, #16
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	bd80      	pop	{r7, pc}

0801bc3c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b084      	sub	sp, #16
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	4603      	mov	r3, r0
 801bc44:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801bc46:	2300      	movs	r3, #0
 801bc48:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801bc4a:	f000 fb35 	bl	801c2b8 <SUBGRF_GetPacketType>
 801bc4e:	4603      	mov	r3, r0
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d121      	bne.n	801bc98 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801bc54:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bc58:	f000 fe34 	bl	801c8c4 <SUBGRF_ReadRegister>
 801bc5c:	4603      	mov	r3, r0
 801bc5e:	f023 0301 	bic.w	r3, r3, #1
 801bc62:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801bc64:	88fb      	ldrh	r3, [r7, #6]
 801bc66:	0a1b      	lsrs	r3, r3, #8
 801bc68:	b29b      	uxth	r3, r3
 801bc6a:	b25b      	sxtb	r3, r3
 801bc6c:	f003 0301 	and.w	r3, r3, #1
 801bc70:	b25a      	sxtb	r2, r3
 801bc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc76:	4313      	orrs	r3, r2
 801bc78:	b25b      	sxtb	r3, r3
 801bc7a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801bc7c:	7bfb      	ldrb	r3, [r7, #15]
 801bc7e:	4619      	mov	r1, r3
 801bc80:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801bc84:	f000 fe0a 	bl	801c89c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801bc88:	88fb      	ldrh	r3, [r7, #6]
 801bc8a:	b2db      	uxtb	r3, r3
 801bc8c:	4619      	mov	r1, r3
 801bc8e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801bc92:	f000 fe03 	bl	801c89c <SUBGRF_WriteRegister>
            break;
 801bc96:	e000      	b.n	801bc9a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801bc98:	bf00      	nop
    }
}
 801bc9a:	bf00      	nop
 801bc9c:	3710      	adds	r7, #16
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	bd80      	pop	{r7, pc}

0801bca2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801bca2:	b580      	push	{r7, lr}
 801bca4:	b082      	sub	sp, #8
 801bca6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801bca8:	2300      	movs	r3, #0
 801bcaa:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801bcac:	2300      	movs	r3, #0
 801bcae:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801bcb4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bcb8:	f000 fe04 	bl	801c8c4 <SUBGRF_ReadRegister>
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801bcc0:	79fb      	ldrb	r3, [r7, #7]
 801bcc2:	f023 0301 	bic.w	r3, r3, #1
 801bcc6:	b2db      	uxtb	r3, r3
 801bcc8:	4619      	mov	r1, r3
 801bcca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bcce:	f000 fde5 	bl	801c89c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801bcd2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bcd6:	f000 fdf5 	bl	801c8c4 <SUBGRF_ReadRegister>
 801bcda:	4603      	mov	r3, r0
 801bcdc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801bcde:	79bb      	ldrb	r3, [r7, #6]
 801bce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bce4:	b2db      	uxtb	r3, r3
 801bce6:	4619      	mov	r1, r3
 801bce8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bcec:	f000 fdd6 	bl	801c89c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801bcf0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801bcf4:	f000 f88a 	bl	801be0c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801bcf8:	463b      	mov	r3, r7
 801bcfa:	2204      	movs	r2, #4
 801bcfc:	4619      	mov	r1, r3
 801bcfe:	f640 0019 	movw	r0, #2073	; 0x819
 801bd02:	f000 fe15 	bl	801c930 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801bd06:	2000      	movs	r0, #0
 801bd08:	f000 f844 	bl	801bd94 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801bd0c:	79fb      	ldrb	r3, [r7, #7]
 801bd0e:	4619      	mov	r1, r3
 801bd10:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801bd14:	f000 fdc2 	bl	801c89c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801bd18:	79bb      	ldrb	r3, [r7, #6]
 801bd1a:	4619      	mov	r1, r3
 801bd1c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bd20:	f000 fdbc 	bl	801c89c <SUBGRF_WriteRegister>

    return number;
 801bd24:	683b      	ldr	r3, [r7, #0]
}
 801bd26:	4618      	mov	r0, r3
 801bd28:	3708      	adds	r7, #8
 801bd2a:	46bd      	mov	sp, r7
 801bd2c:	bd80      	pop	{r7, pc}
	...

0801bd30 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b084      	sub	sp, #16
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801bd38:	2000      	movs	r0, #0
 801bd3a:	f7f1 fdba 	bl	800d8b2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bd3e:	2002      	movs	r0, #2
 801bd40:	f000 ffa4 	bl	801cc8c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bd44:	793b      	ldrb	r3, [r7, #4]
 801bd46:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bd4a:	b2db      	uxtb	r3, r3
 801bd4c:	009b      	lsls	r3, r3, #2
 801bd4e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bd50:	793b      	ldrb	r3, [r7, #4]
 801bd52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bd56:	b2db      	uxtb	r3, r3
 801bd58:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bd5a:	b25b      	sxtb	r3, r3
 801bd5c:	4313      	orrs	r3, r2
 801bd5e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801bd60:	793b      	ldrb	r3, [r7, #4]
 801bd62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bd66:	b2db      	uxtb	r3, r3
 801bd68:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801bd6a:	4313      	orrs	r3, r2
 801bd6c:	b25b      	sxtb	r3, r3
 801bd6e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801bd70:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801bd72:	f107 030f 	add.w	r3, r7, #15
 801bd76:	2201      	movs	r2, #1
 801bd78:	4619      	mov	r1, r3
 801bd7a:	2084      	movs	r0, #132	; 0x84
 801bd7c:	f000 fe3e 	bl	801c9fc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801bd80:	4b03      	ldr	r3, [pc, #12]	; (801bd90 <SUBGRF_SetSleep+0x60>)
 801bd82:	2200      	movs	r2, #0
 801bd84:	701a      	strb	r2, [r3, #0]
}
 801bd86:	bf00      	nop
 801bd88:	3710      	adds	r7, #16
 801bd8a:	46bd      	mov	sp, r7
 801bd8c:	bd80      	pop	{r7, pc}
 801bd8e:	bf00      	nop
 801bd90:	200018cc 	.word	0x200018cc

0801bd94 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	b082      	sub	sp, #8
 801bd98:	af00      	add	r7, sp, #0
 801bd9a:	4603      	mov	r3, r0
 801bd9c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801bd9e:	1dfb      	adds	r3, r7, #7
 801bda0:	2201      	movs	r2, #1
 801bda2:	4619      	mov	r1, r3
 801bda4:	2080      	movs	r0, #128	; 0x80
 801bda6:	f000 fe29 	bl	801c9fc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801bdaa:	79fb      	ldrb	r3, [r7, #7]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d103      	bne.n	801bdb8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801bdb0:	4b05      	ldr	r3, [pc, #20]	; (801bdc8 <SUBGRF_SetStandby+0x34>)
 801bdb2:	2201      	movs	r2, #1
 801bdb4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801bdb6:	e002      	b.n	801bdbe <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801bdb8:	4b03      	ldr	r3, [pc, #12]	; (801bdc8 <SUBGRF_SetStandby+0x34>)
 801bdba:	2202      	movs	r2, #2
 801bdbc:	701a      	strb	r2, [r3, #0]
}
 801bdbe:	bf00      	nop
 801bdc0:	3708      	adds	r7, #8
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bd80      	pop	{r7, pc}
 801bdc6:	bf00      	nop
 801bdc8:	200018cc 	.word	0x200018cc

0801bdcc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b084      	sub	sp, #16
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801bdd4:	4b0c      	ldr	r3, [pc, #48]	; (801be08 <SUBGRF_SetTx+0x3c>)
 801bdd6:	2204      	movs	r2, #4
 801bdd8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	0c1b      	lsrs	r3, r3, #16
 801bdde:	b2db      	uxtb	r3, r3
 801bde0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	0a1b      	lsrs	r3, r3, #8
 801bde6:	b2db      	uxtb	r3, r3
 801bde8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	b2db      	uxtb	r3, r3
 801bdee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801bdf0:	f107 030c 	add.w	r3, r7, #12
 801bdf4:	2203      	movs	r2, #3
 801bdf6:	4619      	mov	r1, r3
 801bdf8:	2083      	movs	r0, #131	; 0x83
 801bdfa:	f000 fdff 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801bdfe:	bf00      	nop
 801be00:	3710      	adds	r7, #16
 801be02:	46bd      	mov	sp, r7
 801be04:	bd80      	pop	{r7, pc}
 801be06:	bf00      	nop
 801be08:	200018cc 	.word	0x200018cc

0801be0c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801be0c:	b580      	push	{r7, lr}
 801be0e:	b084      	sub	sp, #16
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801be14:	4b0c      	ldr	r3, [pc, #48]	; (801be48 <SUBGRF_SetRx+0x3c>)
 801be16:	2205      	movs	r2, #5
 801be18:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801be1a:	687b      	ldr	r3, [r7, #4]
 801be1c:	0c1b      	lsrs	r3, r3, #16
 801be1e:	b2db      	uxtb	r3, r3
 801be20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	0a1b      	lsrs	r3, r3, #8
 801be26:	b2db      	uxtb	r3, r3
 801be28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	b2db      	uxtb	r3, r3
 801be2e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801be30:	f107 030c 	add.w	r3, r7, #12
 801be34:	2203      	movs	r2, #3
 801be36:	4619      	mov	r1, r3
 801be38:	2082      	movs	r0, #130	; 0x82
 801be3a:	f000 fddf 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801be3e:	bf00      	nop
 801be40:	3710      	adds	r7, #16
 801be42:	46bd      	mov	sp, r7
 801be44:	bd80      	pop	{r7, pc}
 801be46:	bf00      	nop
 801be48:	200018cc 	.word	0x200018cc

0801be4c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b084      	sub	sp, #16
 801be50:	af00      	add	r7, sp, #0
 801be52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801be54:	4b0e      	ldr	r3, [pc, #56]	; (801be90 <SUBGRF_SetRxBoosted+0x44>)
 801be56:	2205      	movs	r2, #5
 801be58:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801be5a:	2197      	movs	r1, #151	; 0x97
 801be5c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801be60:	f000 fd1c 	bl	801c89c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	0c1b      	lsrs	r3, r3, #16
 801be68:	b2db      	uxtb	r3, r3
 801be6a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	0a1b      	lsrs	r3, r3, #8
 801be70:	b2db      	uxtb	r3, r3
 801be72:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	b2db      	uxtb	r3, r3
 801be78:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801be7a:	f107 030c 	add.w	r3, r7, #12
 801be7e:	2203      	movs	r2, #3
 801be80:	4619      	mov	r1, r3
 801be82:	2082      	movs	r0, #130	; 0x82
 801be84:	f000 fdba 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801be88:	bf00      	nop
 801be8a:	3710      	adds	r7, #16
 801be8c:	46bd      	mov	sp, r7
 801be8e:	bd80      	pop	{r7, pc}
 801be90:	200018cc 	.word	0x200018cc

0801be94 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b084      	sub	sp, #16
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
 801be9c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	0c1b      	lsrs	r3, r3, #16
 801bea2:	b2db      	uxtb	r3, r3
 801bea4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	0a1b      	lsrs	r3, r3, #8
 801beaa:	b2db      	uxtb	r3, r3
 801beac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	b2db      	uxtb	r3, r3
 801beb2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801beb4:	683b      	ldr	r3, [r7, #0]
 801beb6:	0c1b      	lsrs	r3, r3, #16
 801beb8:	b2db      	uxtb	r3, r3
 801beba:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801bebc:	683b      	ldr	r3, [r7, #0]
 801bebe:	0a1b      	lsrs	r3, r3, #8
 801bec0:	b2db      	uxtb	r3, r3
 801bec2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801bec4:	683b      	ldr	r3, [r7, #0]
 801bec6:	b2db      	uxtb	r3, r3
 801bec8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801beca:	f107 0308 	add.w	r3, r7, #8
 801bece:	2206      	movs	r2, #6
 801bed0:	4619      	mov	r1, r3
 801bed2:	2094      	movs	r0, #148	; 0x94
 801bed4:	f000 fd92 	bl	801c9fc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801bed8:	4b03      	ldr	r3, [pc, #12]	; (801bee8 <SUBGRF_SetRxDutyCycle+0x54>)
 801beda:	2206      	movs	r2, #6
 801bedc:	701a      	strb	r2, [r3, #0]
}
 801bede:	bf00      	nop
 801bee0:	3710      	adds	r7, #16
 801bee2:	46bd      	mov	sp, r7
 801bee4:	bd80      	pop	{r7, pc}
 801bee6:	bf00      	nop
 801bee8:	200018cc 	.word	0x200018cc

0801beec <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801beec:	b580      	push	{r7, lr}
 801beee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801bef0:	2200      	movs	r2, #0
 801bef2:	2100      	movs	r1, #0
 801bef4:	20c5      	movs	r0, #197	; 0xc5
 801bef6:	f000 fd81 	bl	801c9fc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801befa:	4b02      	ldr	r3, [pc, #8]	; (801bf04 <SUBGRF_SetCad+0x18>)
 801befc:	2207      	movs	r2, #7
 801befe:	701a      	strb	r2, [r3, #0]
}
 801bf00:	bf00      	nop
 801bf02:	bd80      	pop	{r7, pc}
 801bf04:	200018cc 	.word	0x200018cc

0801bf08 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	2100      	movs	r1, #0
 801bf10:	20d1      	movs	r0, #209	; 0xd1
 801bf12:	f000 fd73 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801bf16:	bf00      	nop
 801bf18:	bd80      	pop	{r7, pc}

0801bf1a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801bf1a:	b580      	push	{r7, lr}
 801bf1c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801bf1e:	2200      	movs	r2, #0
 801bf20:	2100      	movs	r1, #0
 801bf22:	20d2      	movs	r0, #210	; 0xd2
 801bf24:	f000 fd6a 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801bf28:	bf00      	nop
 801bf2a:	bd80      	pop	{r7, pc}

0801bf2c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b082      	sub	sp, #8
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	4603      	mov	r3, r0
 801bf34:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801bf36:	1dfb      	adds	r3, r7, #7
 801bf38:	2201      	movs	r2, #1
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	209f      	movs	r0, #159	; 0x9f
 801bf3e:	f000 fd5d 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801bf42:	bf00      	nop
 801bf44:	3708      	adds	r7, #8
 801bf46:	46bd      	mov	sp, r7
 801bf48:	bd80      	pop	{r7, pc}

0801bf4a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801bf4a:	b580      	push	{r7, lr}
 801bf4c:	b084      	sub	sp, #16
 801bf4e:	af00      	add	r7, sp, #0
 801bf50:	4603      	mov	r3, r0
 801bf52:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801bf54:	1dfb      	adds	r3, r7, #7
 801bf56:	2201      	movs	r2, #1
 801bf58:	4619      	mov	r1, r3
 801bf5a:	20a0      	movs	r0, #160	; 0xa0
 801bf5c:	f000 fd4e 	bl	801c9fc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801bf60:	79fb      	ldrb	r3, [r7, #7]
 801bf62:	2b3f      	cmp	r3, #63	; 0x3f
 801bf64:	d91c      	bls.n	801bfa0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801bf66:	79fb      	ldrb	r3, [r7, #7]
 801bf68:	085b      	lsrs	r3, r3, #1
 801bf6a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801bf6c:	2300      	movs	r3, #0
 801bf6e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801bf70:	2300      	movs	r3, #0
 801bf72:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801bf74:	e005      	b.n	801bf82 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801bf76:	7bfb      	ldrb	r3, [r7, #15]
 801bf78:	089b      	lsrs	r3, r3, #2
 801bf7a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801bf7c:	7bbb      	ldrb	r3, [r7, #14]
 801bf7e:	3301      	adds	r3, #1
 801bf80:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801bf82:	7bfb      	ldrb	r3, [r7, #15]
 801bf84:	2b1f      	cmp	r3, #31
 801bf86:	d8f6      	bhi.n	801bf76 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801bf88:	7bfb      	ldrb	r3, [r7, #15]
 801bf8a:	00db      	lsls	r3, r3, #3
 801bf8c:	b2da      	uxtb	r2, r3
 801bf8e:	7bbb      	ldrb	r3, [r7, #14]
 801bf90:	4413      	add	r3, r2
 801bf92:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801bf94:	7b7b      	ldrb	r3, [r7, #13]
 801bf96:	4619      	mov	r1, r3
 801bf98:	f240 7006 	movw	r0, #1798	; 0x706
 801bf9c:	f000 fc7e 	bl	801c89c <SUBGRF_WriteRegister>
    }
}
 801bfa0:	bf00      	nop
 801bfa2:	3710      	adds	r7, #16
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}

0801bfa8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b082      	sub	sp, #8
 801bfac:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801bfae:	f7f1 fc9c 	bl	800d8ea <RBI_IsDCDC>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	2b01      	cmp	r3, #1
 801bfb6:	d102      	bne.n	801bfbe <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801bfb8:	2301      	movs	r3, #1
 801bfba:	71fb      	strb	r3, [r7, #7]
 801bfbc:	e001      	b.n	801bfc2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801bfc2:	1dfb      	adds	r3, r7, #7
 801bfc4:	2201      	movs	r2, #1
 801bfc6:	4619      	mov	r1, r3
 801bfc8:	2096      	movs	r0, #150	; 0x96
 801bfca:	f000 fd17 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801bfce:	bf00      	nop
 801bfd0:	3708      	adds	r7, #8
 801bfd2:	46bd      	mov	sp, r7
 801bfd4:	bd80      	pop	{r7, pc}

0801bfd6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801bfd6:	b580      	push	{r7, lr}
 801bfd8:	b084      	sub	sp, #16
 801bfda:	af00      	add	r7, sp, #0
 801bfdc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bfde:	793b      	ldrb	r3, [r7, #4]
 801bfe0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801bfe4:	b2db      	uxtb	r3, r3
 801bfe6:	019b      	lsls	r3, r3, #6
 801bfe8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801bfea:	793b      	ldrb	r3, [r7, #4]
 801bfec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801bff0:	b2db      	uxtb	r3, r3
 801bff2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bff4:	b25b      	sxtb	r3, r3
 801bff6:	4313      	orrs	r3, r2
 801bff8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801bffa:	793b      	ldrb	r3, [r7, #4]
 801bffc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c000:	b2db      	uxtb	r3, r3
 801c002:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c004:	b25b      	sxtb	r3, r3
 801c006:	4313      	orrs	r3, r2
 801c008:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c00a:	793b      	ldrb	r3, [r7, #4]
 801c00c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c010:	b2db      	uxtb	r3, r3
 801c012:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c014:	b25b      	sxtb	r3, r3
 801c016:	4313      	orrs	r3, r2
 801c018:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c01a:	793b      	ldrb	r3, [r7, #4]
 801c01c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c020:	b2db      	uxtb	r3, r3
 801c022:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c024:	b25b      	sxtb	r3, r3
 801c026:	4313      	orrs	r3, r2
 801c028:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c02a:	793b      	ldrb	r3, [r7, #4]
 801c02c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c030:	b2db      	uxtb	r3, r3
 801c032:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c034:	b25b      	sxtb	r3, r3
 801c036:	4313      	orrs	r3, r2
 801c038:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c03a:	793b      	ldrb	r3, [r7, #4]
 801c03c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c040:	b2db      	uxtb	r3, r3
 801c042:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c044:	4313      	orrs	r3, r2
 801c046:	b25b      	sxtb	r3, r3
 801c048:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c04a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c04c:	f107 030f 	add.w	r3, r7, #15
 801c050:	2201      	movs	r2, #1
 801c052:	4619      	mov	r1, r3
 801c054:	2089      	movs	r0, #137	; 0x89
 801c056:	f000 fcd1 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c05a:	bf00      	nop
 801c05c:	3710      	adds	r7, #16
 801c05e:	46bd      	mov	sp, r7
 801c060:	bd80      	pop	{r7, pc}
	...

0801c064 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c064:	b580      	push	{r7, lr}
 801c066:	b084      	sub	sp, #16
 801c068:	af00      	add	r7, sp, #0
 801c06a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c06c:	687b      	ldr	r3, [r7, #4]
 801c06e:	4a1d      	ldr	r2, [pc, #116]	; (801c0e4 <SUBGRF_CalibrateImage+0x80>)
 801c070:	4293      	cmp	r3, r2
 801c072:	d904      	bls.n	801c07e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c074:	23e1      	movs	r3, #225	; 0xe1
 801c076:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c078:	23e9      	movs	r3, #233	; 0xe9
 801c07a:	737b      	strb	r3, [r7, #13]
 801c07c:	e027      	b.n	801c0ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	4a19      	ldr	r2, [pc, #100]	; (801c0e8 <SUBGRF_CalibrateImage+0x84>)
 801c082:	4293      	cmp	r3, r2
 801c084:	d904      	bls.n	801c090 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c086:	23d7      	movs	r3, #215	; 0xd7
 801c088:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c08a:	23db      	movs	r3, #219	; 0xdb
 801c08c:	737b      	strb	r3, [r7, #13]
 801c08e:	e01e      	b.n	801c0ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	4a16      	ldr	r2, [pc, #88]	; (801c0ec <SUBGRF_CalibrateImage+0x88>)
 801c094:	4293      	cmp	r3, r2
 801c096:	d904      	bls.n	801c0a2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c098:	23c1      	movs	r3, #193	; 0xc1
 801c09a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c09c:	23c5      	movs	r3, #197	; 0xc5
 801c09e:	737b      	strb	r3, [r7, #13]
 801c0a0:	e015      	b.n	801c0ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	4a12      	ldr	r2, [pc, #72]	; (801c0f0 <SUBGRF_CalibrateImage+0x8c>)
 801c0a6:	4293      	cmp	r3, r2
 801c0a8:	d904      	bls.n	801c0b4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c0aa:	2375      	movs	r3, #117	; 0x75
 801c0ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c0ae:	2381      	movs	r3, #129	; 0x81
 801c0b0:	737b      	strb	r3, [r7, #13]
 801c0b2:	e00c      	b.n	801c0ce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	4a0f      	ldr	r2, [pc, #60]	; (801c0f4 <SUBGRF_CalibrateImage+0x90>)
 801c0b8:	4293      	cmp	r3, r2
 801c0ba:	d904      	bls.n	801c0c6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c0bc:	236b      	movs	r3, #107	; 0x6b
 801c0be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c0c0:	236f      	movs	r3, #111	; 0x6f
 801c0c2:	737b      	strb	r3, [r7, #13]
 801c0c4:	e003      	b.n	801c0ce <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c0c6:	2329      	movs	r3, #41	; 0x29
 801c0c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c0ca:	232b      	movs	r3, #43	; 0x2b
 801c0cc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c0ce:	f107 030c 	add.w	r3, r7, #12
 801c0d2:	2202      	movs	r2, #2
 801c0d4:	4619      	mov	r1, r3
 801c0d6:	2098      	movs	r0, #152	; 0x98
 801c0d8:	f000 fc90 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c0dc:	bf00      	nop
 801c0de:	3710      	adds	r7, #16
 801c0e0:	46bd      	mov	sp, r7
 801c0e2:	bd80      	pop	{r7, pc}
 801c0e4:	35a4e900 	.word	0x35a4e900
 801c0e8:	32a9f880 	.word	0x32a9f880
 801c0ec:	2de54480 	.word	0x2de54480
 801c0f0:	1b6b0b00 	.word	0x1b6b0b00
 801c0f4:	1954fc40 	.word	0x1954fc40

0801c0f8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c0f8:	b590      	push	{r4, r7, lr}
 801c0fa:	b085      	sub	sp, #20
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	4604      	mov	r4, r0
 801c100:	4608      	mov	r0, r1
 801c102:	4611      	mov	r1, r2
 801c104:	461a      	mov	r2, r3
 801c106:	4623      	mov	r3, r4
 801c108:	71fb      	strb	r3, [r7, #7]
 801c10a:	4603      	mov	r3, r0
 801c10c:	71bb      	strb	r3, [r7, #6]
 801c10e:	460b      	mov	r3, r1
 801c110:	717b      	strb	r3, [r7, #5]
 801c112:	4613      	mov	r3, r2
 801c114:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c116:	79fb      	ldrb	r3, [r7, #7]
 801c118:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c11a:	79bb      	ldrb	r3, [r7, #6]
 801c11c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c11e:	797b      	ldrb	r3, [r7, #5]
 801c120:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c122:	793b      	ldrb	r3, [r7, #4]
 801c124:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c126:	f107 030c 	add.w	r3, r7, #12
 801c12a:	2204      	movs	r2, #4
 801c12c:	4619      	mov	r1, r3
 801c12e:	2095      	movs	r0, #149	; 0x95
 801c130:	f000 fc64 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c134:	bf00      	nop
 801c136:	3714      	adds	r7, #20
 801c138:	46bd      	mov	sp, r7
 801c13a:	bd90      	pop	{r4, r7, pc}

0801c13c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c13c:	b590      	push	{r4, r7, lr}
 801c13e:	b085      	sub	sp, #20
 801c140:	af00      	add	r7, sp, #0
 801c142:	4604      	mov	r4, r0
 801c144:	4608      	mov	r0, r1
 801c146:	4611      	mov	r1, r2
 801c148:	461a      	mov	r2, r3
 801c14a:	4623      	mov	r3, r4
 801c14c:	80fb      	strh	r3, [r7, #6]
 801c14e:	4603      	mov	r3, r0
 801c150:	80bb      	strh	r3, [r7, #4]
 801c152:	460b      	mov	r3, r1
 801c154:	807b      	strh	r3, [r7, #2]
 801c156:	4613      	mov	r3, r2
 801c158:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c15a:	88fb      	ldrh	r3, [r7, #6]
 801c15c:	0a1b      	lsrs	r3, r3, #8
 801c15e:	b29b      	uxth	r3, r3
 801c160:	b2db      	uxtb	r3, r3
 801c162:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c164:	88fb      	ldrh	r3, [r7, #6]
 801c166:	b2db      	uxtb	r3, r3
 801c168:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c16a:	88bb      	ldrh	r3, [r7, #4]
 801c16c:	0a1b      	lsrs	r3, r3, #8
 801c16e:	b29b      	uxth	r3, r3
 801c170:	b2db      	uxtb	r3, r3
 801c172:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c174:	88bb      	ldrh	r3, [r7, #4]
 801c176:	b2db      	uxtb	r3, r3
 801c178:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c17a:	887b      	ldrh	r3, [r7, #2]
 801c17c:	0a1b      	lsrs	r3, r3, #8
 801c17e:	b29b      	uxth	r3, r3
 801c180:	b2db      	uxtb	r3, r3
 801c182:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c184:	887b      	ldrh	r3, [r7, #2]
 801c186:	b2db      	uxtb	r3, r3
 801c188:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c18a:	883b      	ldrh	r3, [r7, #0]
 801c18c:	0a1b      	lsrs	r3, r3, #8
 801c18e:	b29b      	uxth	r3, r3
 801c190:	b2db      	uxtb	r3, r3
 801c192:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c194:	883b      	ldrh	r3, [r7, #0]
 801c196:	b2db      	uxtb	r3, r3
 801c198:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c19a:	f107 0308 	add.w	r3, r7, #8
 801c19e:	2208      	movs	r2, #8
 801c1a0:	4619      	mov	r1, r3
 801c1a2:	2008      	movs	r0, #8
 801c1a4:	f000 fc2a 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c1a8:	bf00      	nop
 801c1aa:	3714      	adds	r7, #20
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bd90      	pop	{r4, r7, pc}

0801c1b0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b084      	sub	sp, #16
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	6039      	str	r1, [r7, #0]
 801c1ba:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c1bc:	79fb      	ldrb	r3, [r7, #7]
 801c1be:	f003 0307 	and.w	r3, r3, #7
 801c1c2:	b2db      	uxtb	r3, r3
 801c1c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c1c6:	683b      	ldr	r3, [r7, #0]
 801c1c8:	0c1b      	lsrs	r3, r3, #16
 801c1ca:	b2db      	uxtb	r3, r3
 801c1cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	0a1b      	lsrs	r3, r3, #8
 801c1d2:	b2db      	uxtb	r3, r3
 801c1d4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c1d6:	683b      	ldr	r3, [r7, #0]
 801c1d8:	b2db      	uxtb	r3, r3
 801c1da:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c1dc:	f107 030c 	add.w	r3, r7, #12
 801c1e0:	2204      	movs	r2, #4
 801c1e2:	4619      	mov	r1, r3
 801c1e4:	2097      	movs	r0, #151	; 0x97
 801c1e6:	f000 fc09 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c1ea:	bf00      	nop
 801c1ec:	3710      	adds	r7, #16
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	bd80      	pop	{r7, pc}
	...

0801c1f4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c1f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c1f8:	b084      	sub	sp, #16
 801c1fa:	af00      	add	r7, sp, #0
 801c1fc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c1fe:	2300      	movs	r3, #0
 801c200:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c202:	4b1d      	ldr	r3, [pc, #116]	; (801c278 <SUBGRF_SetRfFrequency+0x84>)
 801c204:	781b      	ldrb	r3, [r3, #0]
 801c206:	f083 0301 	eor.w	r3, r3, #1
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d005      	beq.n	801c21c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c210:	6878      	ldr	r0, [r7, #4]
 801c212:	f7ff ff27 	bl	801c064 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c216:	4b18      	ldr	r3, [pc, #96]	; (801c278 <SUBGRF_SetRfFrequency+0x84>)
 801c218:	2201      	movs	r2, #1
 801c21a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	2200      	movs	r2, #0
 801c220:	461c      	mov	r4, r3
 801c222:	4615      	mov	r5, r2
 801c224:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c228:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c22c:	4a13      	ldr	r2, [pc, #76]	; (801c27c <SUBGRF_SetRfFrequency+0x88>)
 801c22e:	f04f 0300 	mov.w	r3, #0
 801c232:	4640      	mov	r0, r8
 801c234:	4649      	mov	r1, r9
 801c236:	f7e4 fda9 	bl	8000d8c <__aeabi_uldivmod>
 801c23a:	4602      	mov	r2, r0
 801c23c:	460b      	mov	r3, r1
 801c23e:	4613      	mov	r3, r2
 801c240:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	0e1b      	lsrs	r3, r3, #24
 801c246:	b2db      	uxtb	r3, r3
 801c248:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c24a:	68fb      	ldr	r3, [r7, #12]
 801c24c:	0c1b      	lsrs	r3, r3, #16
 801c24e:	b2db      	uxtb	r3, r3
 801c250:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c252:	68fb      	ldr	r3, [r7, #12]
 801c254:	0a1b      	lsrs	r3, r3, #8
 801c256:	b2db      	uxtb	r3, r3
 801c258:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	b2db      	uxtb	r3, r3
 801c25e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c260:	f107 0308 	add.w	r3, r7, #8
 801c264:	2204      	movs	r2, #4
 801c266:	4619      	mov	r1, r3
 801c268:	2086      	movs	r0, #134	; 0x86
 801c26a:	f000 fbc7 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c26e:	bf00      	nop
 801c270:	3710      	adds	r7, #16
 801c272:	46bd      	mov	sp, r7
 801c274:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c278:	200018d4 	.word	0x200018d4
 801c27c:	01e84800 	.word	0x01e84800

0801c280 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b082      	sub	sp, #8
 801c284:	af00      	add	r7, sp, #0
 801c286:	4603      	mov	r3, r0
 801c288:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c28a:	79fa      	ldrb	r2, [r7, #7]
 801c28c:	4b09      	ldr	r3, [pc, #36]	; (801c2b4 <SUBGRF_SetPacketType+0x34>)
 801c28e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c290:	79fb      	ldrb	r3, [r7, #7]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d104      	bne.n	801c2a0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c296:	2100      	movs	r1, #0
 801c298:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c29c:	f000 fafe 	bl	801c89c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c2a0:	1dfb      	adds	r3, r7, #7
 801c2a2:	2201      	movs	r2, #1
 801c2a4:	4619      	mov	r1, r3
 801c2a6:	208a      	movs	r0, #138	; 0x8a
 801c2a8:	f000 fba8 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c2ac:	bf00      	nop
 801c2ae:	3708      	adds	r7, #8
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bd80      	pop	{r7, pc}
 801c2b4:	200018cd 	.word	0x200018cd

0801c2b8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c2b8:	b480      	push	{r7}
 801c2ba:	af00      	add	r7, sp, #0
    return PacketType;
 801c2bc:	4b02      	ldr	r3, [pc, #8]	; (801c2c8 <SUBGRF_GetPacketType+0x10>)
 801c2be:	781b      	ldrb	r3, [r3, #0]
}
 801c2c0:	4618      	mov	r0, r3
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	bc80      	pop	{r7}
 801c2c6:	4770      	bx	lr
 801c2c8:	200018cd 	.word	0x200018cd

0801c2cc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	71fb      	strb	r3, [r7, #7]
 801c2d6:	460b      	mov	r3, r1
 801c2d8:	71bb      	strb	r3, [r7, #6]
 801c2da:	4613      	mov	r3, r2
 801c2dc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c2de:	79fb      	ldrb	r3, [r7, #7]
 801c2e0:	2b01      	cmp	r3, #1
 801c2e2:	d149      	bne.n	801c378 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c2e4:	2000      	movs	r0, #0
 801c2e6:	f7f1 fb07 	bl	800d8f8 <RBI_GetRFOMaxPowerConfig>
 801c2ea:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c2ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c2f0:	68fa      	ldr	r2, [r7, #12]
 801c2f2:	429a      	cmp	r2, r3
 801c2f4:	da01      	bge.n	801c2fa <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	2b0e      	cmp	r3, #14
 801c2fe:	d10e      	bne.n	801c31e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c300:	2301      	movs	r3, #1
 801c302:	2201      	movs	r2, #1
 801c304:	2100      	movs	r1, #0
 801c306:	2004      	movs	r0, #4
 801c308:	f7ff fef6 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c30c:	79ba      	ldrb	r2, [r7, #6]
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	b2db      	uxtb	r3, r3
 801c312:	1ad3      	subs	r3, r2, r3
 801c314:	b2db      	uxtb	r3, r3
 801c316:	330e      	adds	r3, #14
 801c318:	b2db      	uxtb	r3, r3
 801c31a:	71bb      	strb	r3, [r7, #6]
 801c31c:	e01f      	b.n	801c35e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c31e:	68fb      	ldr	r3, [r7, #12]
 801c320:	2b0a      	cmp	r3, #10
 801c322:	d10e      	bne.n	801c342 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c324:	2301      	movs	r3, #1
 801c326:	2201      	movs	r2, #1
 801c328:	2100      	movs	r1, #0
 801c32a:	2001      	movs	r0, #1
 801c32c:	f7ff fee4 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c330:	79ba      	ldrb	r2, [r7, #6]
 801c332:	68fb      	ldr	r3, [r7, #12]
 801c334:	b2db      	uxtb	r3, r3
 801c336:	1ad3      	subs	r3, r2, r3
 801c338:	b2db      	uxtb	r3, r3
 801c33a:	330d      	adds	r3, #13
 801c33c:	b2db      	uxtb	r3, r3
 801c33e:	71bb      	strb	r3, [r7, #6]
 801c340:	e00d      	b.n	801c35e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c342:	2301      	movs	r3, #1
 801c344:	2201      	movs	r2, #1
 801c346:	2100      	movs	r1, #0
 801c348:	2007      	movs	r0, #7
 801c34a:	f7ff fed5 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c34e:	79ba      	ldrb	r2, [r7, #6]
 801c350:	68fb      	ldr	r3, [r7, #12]
 801c352:	b2db      	uxtb	r3, r3
 801c354:	1ad3      	subs	r3, r2, r3
 801c356:	b2db      	uxtb	r3, r3
 801c358:	330e      	adds	r3, #14
 801c35a:	b2db      	uxtb	r3, r3
 801c35c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c35e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c362:	f113 0f11 	cmn.w	r3, #17
 801c366:	da01      	bge.n	801c36c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c368:	23ef      	movs	r3, #239	; 0xef
 801c36a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c36c:	2118      	movs	r1, #24
 801c36e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c372:	f000 fa93 	bl	801c89c <SUBGRF_WriteRegister>
 801c376:	e067      	b.n	801c448 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c378:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c37c:	f000 faa2 	bl	801c8c4 <SUBGRF_ReadRegister>
 801c380:	4603      	mov	r3, r0
 801c382:	f043 031e 	orr.w	r3, r3, #30
 801c386:	b2db      	uxtb	r3, r3
 801c388:	4619      	mov	r1, r3
 801c38a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c38e:	f000 fa85 	bl	801c89c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c392:	2001      	movs	r0, #1
 801c394:	f7f1 fab0 	bl	800d8f8 <RBI_GetRFOMaxPowerConfig>
 801c398:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c39a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c39e:	68fa      	ldr	r2, [r7, #12]
 801c3a0:	429a      	cmp	r2, r3
 801c3a2:	da01      	bge.n	801c3a8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	2b14      	cmp	r3, #20
 801c3ac:	d10e      	bne.n	801c3cc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c3ae:	2301      	movs	r3, #1
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	2105      	movs	r1, #5
 801c3b4:	2003      	movs	r0, #3
 801c3b6:	f7ff fe9f 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c3ba:	79ba      	ldrb	r2, [r7, #6]
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	b2db      	uxtb	r3, r3
 801c3c0:	1ad3      	subs	r3, r2, r3
 801c3c2:	b2db      	uxtb	r3, r3
 801c3c4:	3316      	adds	r3, #22
 801c3c6:	b2db      	uxtb	r3, r3
 801c3c8:	71bb      	strb	r3, [r7, #6]
 801c3ca:	e031      	b.n	801c430 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	2b11      	cmp	r3, #17
 801c3d0:	d10e      	bne.n	801c3f0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c3d2:	2301      	movs	r3, #1
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	2103      	movs	r1, #3
 801c3d8:	2002      	movs	r0, #2
 801c3da:	f7ff fe8d 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c3de:	79ba      	ldrb	r2, [r7, #6]
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	b2db      	uxtb	r3, r3
 801c3e4:	1ad3      	subs	r3, r2, r3
 801c3e6:	b2db      	uxtb	r3, r3
 801c3e8:	3316      	adds	r3, #22
 801c3ea:	b2db      	uxtb	r3, r3
 801c3ec:	71bb      	strb	r3, [r7, #6]
 801c3ee:	e01f      	b.n	801c430 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	2b0e      	cmp	r3, #14
 801c3f4:	d10e      	bne.n	801c414 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	2200      	movs	r2, #0
 801c3fa:	2102      	movs	r1, #2
 801c3fc:	2002      	movs	r0, #2
 801c3fe:	f7ff fe7b 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c402:	79ba      	ldrb	r2, [r7, #6]
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	b2db      	uxtb	r3, r3
 801c408:	1ad3      	subs	r3, r2, r3
 801c40a:	b2db      	uxtb	r3, r3
 801c40c:	330e      	adds	r3, #14
 801c40e:	b2db      	uxtb	r3, r3
 801c410:	71bb      	strb	r3, [r7, #6]
 801c412:	e00d      	b.n	801c430 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c414:	2301      	movs	r3, #1
 801c416:	2200      	movs	r2, #0
 801c418:	2107      	movs	r1, #7
 801c41a:	2004      	movs	r0, #4
 801c41c:	f7ff fe6c 	bl	801c0f8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c420:	79ba      	ldrb	r2, [r7, #6]
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	b2db      	uxtb	r3, r3
 801c426:	1ad3      	subs	r3, r2, r3
 801c428:	b2db      	uxtb	r3, r3
 801c42a:	3316      	adds	r3, #22
 801c42c:	b2db      	uxtb	r3, r3
 801c42e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c430:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c434:	f113 0f09 	cmn.w	r3, #9
 801c438:	da01      	bge.n	801c43e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c43a:	23f7      	movs	r3, #247	; 0xf7
 801c43c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c43e:	2138      	movs	r1, #56	; 0x38
 801c440:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c444:	f000 fa2a 	bl	801c89c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c448:	79bb      	ldrb	r3, [r7, #6]
 801c44a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c44c:	797b      	ldrb	r3, [r7, #5]
 801c44e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c450:	f107 0308 	add.w	r3, r7, #8
 801c454:	2202      	movs	r2, #2
 801c456:	4619      	mov	r1, r3
 801c458:	208e      	movs	r0, #142	; 0x8e
 801c45a:	f000 facf 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c45e:	bf00      	nop
 801c460:	3710      	adds	r7, #16
 801c462:	46bd      	mov	sp, r7
 801c464:	bd80      	pop	{r7, pc}
	...

0801c468 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c46c:	b086      	sub	sp, #24
 801c46e:	af00      	add	r7, sp, #0
 801c470:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c472:	2300      	movs	r3, #0
 801c474:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c476:	4a61      	ldr	r2, [pc, #388]	; (801c5fc <SUBGRF_SetModulationParams+0x194>)
 801c478:	f107 0308 	add.w	r3, r7, #8
 801c47c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c480:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	781a      	ldrb	r2, [r3, #0]
 801c488:	4b5d      	ldr	r3, [pc, #372]	; (801c600 <SUBGRF_SetModulationParams+0x198>)
 801c48a:	781b      	ldrb	r3, [r3, #0]
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d004      	beq.n	801c49a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	781b      	ldrb	r3, [r3, #0]
 801c494:	4618      	mov	r0, r3
 801c496:	f7ff fef3 	bl	801c280 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	781b      	ldrb	r3, [r3, #0]
 801c49e:	2b03      	cmp	r3, #3
 801c4a0:	f200 80a5 	bhi.w	801c5ee <SUBGRF_SetModulationParams+0x186>
 801c4a4:	a201      	add	r2, pc, #4	; (adr r2, 801c4ac <SUBGRF_SetModulationParams+0x44>)
 801c4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4aa:	bf00      	nop
 801c4ac:	0801c4bd 	.word	0x0801c4bd
 801c4b0:	0801c57d 	.word	0x0801c57d
 801c4b4:	0801c53f 	.word	0x0801c53f
 801c4b8:	0801c5ab 	.word	0x0801c5ab
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c4bc:	2308      	movs	r3, #8
 801c4be:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	685b      	ldr	r3, [r3, #4]
 801c4c4:	4a4f      	ldr	r2, [pc, #316]	; (801c604 <SUBGRF_SetModulationParams+0x19c>)
 801c4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801c4ca:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c4cc:	697b      	ldr	r3, [r7, #20]
 801c4ce:	0c1b      	lsrs	r3, r3, #16
 801c4d0:	b2db      	uxtb	r3, r3
 801c4d2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c4d4:	697b      	ldr	r3, [r7, #20]
 801c4d6:	0a1b      	lsrs	r3, r3, #8
 801c4d8:	b2db      	uxtb	r3, r3
 801c4da:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c4dc:	697b      	ldr	r3, [r7, #20]
 801c4de:	b2db      	uxtb	r3, r3
 801c4e0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	7b1b      	ldrb	r3, [r3, #12]
 801c4e6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	7b5b      	ldrb	r3, [r3, #13]
 801c4ec:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	689b      	ldr	r3, [r3, #8]
 801c4f2:	2200      	movs	r2, #0
 801c4f4:	461c      	mov	r4, r3
 801c4f6:	4615      	mov	r5, r2
 801c4f8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c4fc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c500:	4a41      	ldr	r2, [pc, #260]	; (801c608 <SUBGRF_SetModulationParams+0x1a0>)
 801c502:	f04f 0300 	mov.w	r3, #0
 801c506:	4640      	mov	r0, r8
 801c508:	4649      	mov	r1, r9
 801c50a:	f7e4 fc3f 	bl	8000d8c <__aeabi_uldivmod>
 801c50e:	4602      	mov	r2, r0
 801c510:	460b      	mov	r3, r1
 801c512:	4613      	mov	r3, r2
 801c514:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c516:	697b      	ldr	r3, [r7, #20]
 801c518:	0c1b      	lsrs	r3, r3, #16
 801c51a:	b2db      	uxtb	r3, r3
 801c51c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c51e:	697b      	ldr	r3, [r7, #20]
 801c520:	0a1b      	lsrs	r3, r3, #8
 801c522:	b2db      	uxtb	r3, r3
 801c524:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c526:	697b      	ldr	r3, [r7, #20]
 801c528:	b2db      	uxtb	r3, r3
 801c52a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c52c:	7cfb      	ldrb	r3, [r7, #19]
 801c52e:	b29a      	uxth	r2, r3
 801c530:	f107 0308 	add.w	r3, r7, #8
 801c534:	4619      	mov	r1, r3
 801c536:	208b      	movs	r0, #139	; 0x8b
 801c538:	f000 fa60 	bl	801c9fc <SUBGRF_WriteCommand>
        break;
 801c53c:	e058      	b.n	801c5f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c53e:	2304      	movs	r3, #4
 801c540:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	691b      	ldr	r3, [r3, #16]
 801c546:	4a2f      	ldr	r2, [pc, #188]	; (801c604 <SUBGRF_SetModulationParams+0x19c>)
 801c548:	fbb2 f3f3 	udiv	r3, r2, r3
 801c54c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c54e:	697b      	ldr	r3, [r7, #20]
 801c550:	0c1b      	lsrs	r3, r3, #16
 801c552:	b2db      	uxtb	r3, r3
 801c554:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c556:	697b      	ldr	r3, [r7, #20]
 801c558:	0a1b      	lsrs	r3, r3, #8
 801c55a:	b2db      	uxtb	r3, r3
 801c55c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c55e:	697b      	ldr	r3, [r7, #20]
 801c560:	b2db      	uxtb	r3, r3
 801c562:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	7d1b      	ldrb	r3, [r3, #20]
 801c568:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c56a:	7cfb      	ldrb	r3, [r7, #19]
 801c56c:	b29a      	uxth	r2, r3
 801c56e:	f107 0308 	add.w	r3, r7, #8
 801c572:	4619      	mov	r1, r3
 801c574:	208b      	movs	r0, #139	; 0x8b
 801c576:	f000 fa41 	bl	801c9fc <SUBGRF_WriteCommand>
        break;
 801c57a:	e039      	b.n	801c5f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c57c:	2304      	movs	r3, #4
 801c57e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	7e1b      	ldrb	r3, [r3, #24]
 801c584:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	7e5b      	ldrb	r3, [r3, #25]
 801c58a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	7e9b      	ldrb	r3, [r3, #26]
 801c590:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	7edb      	ldrb	r3, [r3, #27]
 801c596:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c598:	7cfb      	ldrb	r3, [r7, #19]
 801c59a:	b29a      	uxth	r2, r3
 801c59c:	f107 0308 	add.w	r3, r7, #8
 801c5a0:	4619      	mov	r1, r3
 801c5a2:	208b      	movs	r0, #139	; 0x8b
 801c5a4:	f000 fa2a 	bl	801c9fc <SUBGRF_WriteCommand>

        break;
 801c5a8:	e022      	b.n	801c5f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c5aa:	2305      	movs	r3, #5
 801c5ac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	685b      	ldr	r3, [r3, #4]
 801c5b2:	4a14      	ldr	r2, [pc, #80]	; (801c604 <SUBGRF_SetModulationParams+0x19c>)
 801c5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801c5b8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	0c1b      	lsrs	r3, r3, #16
 801c5be:	b2db      	uxtb	r3, r3
 801c5c0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c5c2:	697b      	ldr	r3, [r7, #20]
 801c5c4:	0a1b      	lsrs	r3, r3, #8
 801c5c6:	b2db      	uxtb	r3, r3
 801c5c8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c5ca:	697b      	ldr	r3, [r7, #20]
 801c5cc:	b2db      	uxtb	r3, r3
 801c5ce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	7b1b      	ldrb	r3, [r3, #12]
 801c5d4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	7b5b      	ldrb	r3, [r3, #13]
 801c5da:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c5dc:	7cfb      	ldrb	r3, [r7, #19]
 801c5de:	b29a      	uxth	r2, r3
 801c5e0:	f107 0308 	add.w	r3, r7, #8
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	208b      	movs	r0, #139	; 0x8b
 801c5e8:	f000 fa08 	bl	801c9fc <SUBGRF_WriteCommand>
        break;
 801c5ec:	e000      	b.n	801c5f0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c5ee:	bf00      	nop
    }
}
 801c5f0:	bf00      	nop
 801c5f2:	3718      	adds	r7, #24
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c5fa:	bf00      	nop
 801c5fc:	0801f010 	.word	0x0801f010
 801c600:	200018cd 	.word	0x200018cd
 801c604:	3d090000 	.word	0x3d090000
 801c608:	01e84800 	.word	0x01e84800

0801c60c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801c60c:	b580      	push	{r7, lr}
 801c60e:	b086      	sub	sp, #24
 801c610:	af00      	add	r7, sp, #0
 801c612:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801c614:	2300      	movs	r3, #0
 801c616:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c618:	4a48      	ldr	r2, [pc, #288]	; (801c73c <SUBGRF_SetPacketParams+0x130>)
 801c61a:	f107 030c 	add.w	r3, r7, #12
 801c61e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c620:	c303      	stmia	r3!, {r0, r1}
 801c622:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	781a      	ldrb	r2, [r3, #0]
 801c628:	4b45      	ldr	r3, [pc, #276]	; (801c740 <SUBGRF_SetPacketParams+0x134>)
 801c62a:	781b      	ldrb	r3, [r3, #0]
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d004      	beq.n	801c63a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	781b      	ldrb	r3, [r3, #0]
 801c634:	4618      	mov	r0, r3
 801c636:	f7ff fe23 	bl	801c280 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	781b      	ldrb	r3, [r3, #0]
 801c63e:	2b03      	cmp	r3, #3
 801c640:	d878      	bhi.n	801c734 <SUBGRF_SetPacketParams+0x128>
 801c642:	a201      	add	r2, pc, #4	; (adr r2, 801c648 <SUBGRF_SetPacketParams+0x3c>)
 801c644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c648:	0801c659 	.word	0x0801c659
 801c64c:	0801c6e9 	.word	0x0801c6e9
 801c650:	0801c6dd 	.word	0x0801c6dd
 801c654:	0801c659 	.word	0x0801c659
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	7a5b      	ldrb	r3, [r3, #9]
 801c65c:	2bf1      	cmp	r3, #241	; 0xf1
 801c65e:	d10a      	bne.n	801c676 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801c660:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c664:	f7ff faaa 	bl	801bbbc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801c668:	f248 0005 	movw	r0, #32773	; 0x8005
 801c66c:	f7ff fac6 	bl	801bbfc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801c670:	2302      	movs	r3, #2
 801c672:	75bb      	strb	r3, [r7, #22]
 801c674:	e011      	b.n	801c69a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	7a5b      	ldrb	r3, [r3, #9]
 801c67a:	2bf2      	cmp	r3, #242	; 0xf2
 801c67c:	d10a      	bne.n	801c694 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801c67e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801c682:	f7ff fa9b 	bl	801bbbc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801c686:	f241 0021 	movw	r0, #4129	; 0x1021
 801c68a:	f7ff fab7 	bl	801bbfc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801c68e:	2306      	movs	r3, #6
 801c690:	75bb      	strb	r3, [r7, #22]
 801c692:	e002      	b.n	801c69a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	7a5b      	ldrb	r3, [r3, #9]
 801c698:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801c69a:	2309      	movs	r3, #9
 801c69c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	885b      	ldrh	r3, [r3, #2]
 801c6a2:	0a1b      	lsrs	r3, r3, #8
 801c6a4:	b29b      	uxth	r3, r3
 801c6a6:	b2db      	uxtb	r3, r3
 801c6a8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	885b      	ldrh	r3, [r3, #2]
 801c6ae:	b2db      	uxtb	r3, r3
 801c6b0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	791b      	ldrb	r3, [r3, #4]
 801c6b6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	795b      	ldrb	r3, [r3, #5]
 801c6bc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	799b      	ldrb	r3, [r3, #6]
 801c6c2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	79db      	ldrb	r3, [r3, #7]
 801c6c8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	7a1b      	ldrb	r3, [r3, #8]
 801c6ce:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801c6d0:	7dbb      	ldrb	r3, [r7, #22]
 801c6d2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	7a9b      	ldrb	r3, [r3, #10]
 801c6d8:	753b      	strb	r3, [r7, #20]
        break;
 801c6da:	e022      	b.n	801c722 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801c6dc:	2301      	movs	r3, #1
 801c6de:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	7b1b      	ldrb	r3, [r3, #12]
 801c6e4:	733b      	strb	r3, [r7, #12]
        break;
 801c6e6:	e01c      	b.n	801c722 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801c6e8:	2306      	movs	r3, #6
 801c6ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	89db      	ldrh	r3, [r3, #14]
 801c6f0:	0a1b      	lsrs	r3, r3, #8
 801c6f2:	b29b      	uxth	r3, r3
 801c6f4:	b2db      	uxtb	r3, r3
 801c6f6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	89db      	ldrh	r3, [r3, #14]
 801c6fc:	b2db      	uxtb	r3, r3
 801c6fe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	7c1a      	ldrb	r2, [r3, #16]
 801c704:	4b0f      	ldr	r3, [pc, #60]	; (801c744 <SUBGRF_SetPacketParams+0x138>)
 801c706:	4611      	mov	r1, r2
 801c708:	7019      	strb	r1, [r3, #0]
 801c70a:	4613      	mov	r3, r2
 801c70c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	7c5b      	ldrb	r3, [r3, #17]
 801c712:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	7c9b      	ldrb	r3, [r3, #18]
 801c718:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	7cdb      	ldrb	r3, [r3, #19]
 801c71e:	747b      	strb	r3, [r7, #17]
        break;
 801c720:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801c722:	7dfb      	ldrb	r3, [r7, #23]
 801c724:	b29a      	uxth	r2, r3
 801c726:	f107 030c 	add.w	r3, r7, #12
 801c72a:	4619      	mov	r1, r3
 801c72c:	208c      	movs	r0, #140	; 0x8c
 801c72e:	f000 f965 	bl	801c9fc <SUBGRF_WriteCommand>
 801c732:	e000      	b.n	801c736 <SUBGRF_SetPacketParams+0x12a>
        return;
 801c734:	bf00      	nop
}
 801c736:	3718      	adds	r7, #24
 801c738:	46bd      	mov	sp, r7
 801c73a:	bd80      	pop	{r7, pc}
 801c73c:	0801f018 	.word	0x0801f018
 801c740:	200018cd 	.word	0x200018cd
 801c744:	200018ce 	.word	0x200018ce

0801c748 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801c748:	b580      	push	{r7, lr}
 801c74a:	b084      	sub	sp, #16
 801c74c:	af00      	add	r7, sp, #0
 801c74e:	4603      	mov	r3, r0
 801c750:	460a      	mov	r2, r1
 801c752:	71fb      	strb	r3, [r7, #7]
 801c754:	4613      	mov	r3, r2
 801c756:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801c758:	79fb      	ldrb	r3, [r7, #7]
 801c75a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801c75c:	79bb      	ldrb	r3, [r7, #6]
 801c75e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801c760:	f107 030c 	add.w	r3, r7, #12
 801c764:	2202      	movs	r2, #2
 801c766:	4619      	mov	r1, r3
 801c768:	208f      	movs	r0, #143	; 0x8f
 801c76a:	f000 f947 	bl	801c9fc <SUBGRF_WriteCommand>
}
 801c76e:	bf00      	nop
 801c770:	3710      	adds	r7, #16
 801c772:	46bd      	mov	sp, r7
 801c774:	bd80      	pop	{r7, pc}

0801c776 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801c776:	b580      	push	{r7, lr}
 801c778:	b082      	sub	sp, #8
 801c77a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801c77c:	2300      	movs	r3, #0
 801c77e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801c780:	1d3b      	adds	r3, r7, #4
 801c782:	2201      	movs	r2, #1
 801c784:	4619      	mov	r1, r3
 801c786:	2015      	movs	r0, #21
 801c788:	f000 f95a 	bl	801ca40 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801c78c:	793b      	ldrb	r3, [r7, #4]
 801c78e:	425b      	negs	r3, r3
 801c790:	105b      	asrs	r3, r3, #1
 801c792:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801c794:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801c798:	4618      	mov	r0, r3
 801c79a:	3708      	adds	r7, #8
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd80      	pop	{r7, pc}

0801c7a0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b084      	sub	sp, #16
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]
 801c7a8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801c7aa:	f107 030c 	add.w	r3, r7, #12
 801c7ae:	2202      	movs	r2, #2
 801c7b0:	4619      	mov	r1, r3
 801c7b2:	2013      	movs	r0, #19
 801c7b4:	f000 f944 	bl	801ca40 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801c7b8:	f7ff fd7e 	bl	801c2b8 <SUBGRF_GetPacketType>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	2b01      	cmp	r3, #1
 801c7c0:	d10d      	bne.n	801c7de <SUBGRF_GetRxBufferStatus+0x3e>
 801c7c2:	4b0c      	ldr	r3, [pc, #48]	; (801c7f4 <SUBGRF_GetRxBufferStatus+0x54>)
 801c7c4:	781b      	ldrb	r3, [r3, #0]
 801c7c6:	b2db      	uxtb	r3, r3
 801c7c8:	2b01      	cmp	r3, #1
 801c7ca:	d108      	bne.n	801c7de <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c7cc:	f240 7002 	movw	r0, #1794	; 0x702
 801c7d0:	f000 f878 	bl	801c8c4 <SUBGRF_ReadRegister>
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	461a      	mov	r2, r3
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	701a      	strb	r2, [r3, #0]
 801c7dc:	e002      	b.n	801c7e4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c7de:	7b3a      	ldrb	r2, [r7, #12]
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c7e4:	7b7a      	ldrb	r2, [r7, #13]
 801c7e6:	683b      	ldr	r3, [r7, #0]
 801c7e8:	701a      	strb	r2, [r3, #0]
}
 801c7ea:	bf00      	nop
 801c7ec:	3710      	adds	r7, #16
 801c7ee:	46bd      	mov	sp, r7
 801c7f0:	bd80      	pop	{r7, pc}
 801c7f2:	bf00      	nop
 801c7f4:	200018ce 	.word	0x200018ce

0801c7f8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c7f8:	b580      	push	{r7, lr}
 801c7fa:	b084      	sub	sp, #16
 801c7fc:	af00      	add	r7, sp, #0
 801c7fe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c800:	f107 030c 	add.w	r3, r7, #12
 801c804:	2203      	movs	r2, #3
 801c806:	4619      	mov	r1, r3
 801c808:	2014      	movs	r0, #20
 801c80a:	f000 f919 	bl	801ca40 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c80e:	f7ff fd53 	bl	801c2b8 <SUBGRF_GetPacketType>
 801c812:	4603      	mov	r3, r0
 801c814:	461a      	mov	r2, r3
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	781b      	ldrb	r3, [r3, #0]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d002      	beq.n	801c828 <SUBGRF_GetPacketStatus+0x30>
 801c822:	2b01      	cmp	r3, #1
 801c824:	d013      	beq.n	801c84e <SUBGRF_GetPacketStatus+0x56>
 801c826:	e02a      	b.n	801c87e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c828:	7b3a      	ldrb	r2, [r7, #12]
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c82e:	7b7b      	ldrb	r3, [r7, #13]
 801c830:	425b      	negs	r3, r3
 801c832:	105b      	asrs	r3, r3, #1
 801c834:	b25a      	sxtb	r2, r3
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c83a:	7bbb      	ldrb	r3, [r7, #14]
 801c83c:	425b      	negs	r3, r3
 801c83e:	105b      	asrs	r3, r3, #1
 801c840:	b25a      	sxtb	r2, r3
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	2200      	movs	r2, #0
 801c84a:	609a      	str	r2, [r3, #8]
            break;
 801c84c:	e020      	b.n	801c890 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c84e:	7b3b      	ldrb	r3, [r7, #12]
 801c850:	425b      	negs	r3, r3
 801c852:	105b      	asrs	r3, r3, #1
 801c854:	b25a      	sxtb	r2, r3
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c85a:	7b7b      	ldrb	r3, [r7, #13]
 801c85c:	b25b      	sxtb	r3, r3
 801c85e:	3302      	adds	r3, #2
 801c860:	109b      	asrs	r3, r3, #2
 801c862:	b25a      	sxtb	r2, r3
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c868:	7bbb      	ldrb	r3, [r7, #14]
 801c86a:	425b      	negs	r3, r3
 801c86c:	105b      	asrs	r3, r3, #1
 801c86e:	b25a      	sxtb	r2, r3
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c874:	4b08      	ldr	r3, [pc, #32]	; (801c898 <SUBGRF_GetPacketStatus+0xa0>)
 801c876:	681a      	ldr	r2, [r3, #0]
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	611a      	str	r2, [r3, #16]
            break;
 801c87c:	e008      	b.n	801c890 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c87e:	2214      	movs	r2, #20
 801c880:	2100      	movs	r1, #0
 801c882:	6878      	ldr	r0, [r7, #4]
 801c884:	f000 fc03 	bl	801d08e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	220f      	movs	r2, #15
 801c88c:	701a      	strb	r2, [r3, #0]
            break;
 801c88e:	bf00      	nop
    }
}
 801c890:	bf00      	nop
 801c892:	3710      	adds	r7, #16
 801c894:	46bd      	mov	sp, r7
 801c896:	bd80      	pop	{r7, pc}
 801c898:	200018d0 	.word	0x200018d0

0801c89c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b082      	sub	sp, #8
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	4603      	mov	r3, r0
 801c8a4:	460a      	mov	r2, r1
 801c8a6:	80fb      	strh	r3, [r7, #6]
 801c8a8:	4613      	mov	r3, r2
 801c8aa:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c8ac:	1d7a      	adds	r2, r7, #5
 801c8ae:	88f9      	ldrh	r1, [r7, #6]
 801c8b0:	2301      	movs	r3, #1
 801c8b2:	4803      	ldr	r0, [pc, #12]	; (801c8c0 <SUBGRF_WriteRegister+0x24>)
 801c8b4:	f7ed f87c 	bl	80099b0 <HAL_SUBGHZ_WriteRegisters>
}
 801c8b8:	bf00      	nop
 801c8ba:	3708      	adds	r7, #8
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	bd80      	pop	{r7, pc}
 801c8c0:	200003b0 	.word	0x200003b0

0801c8c4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b084      	sub	sp, #16
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	4603      	mov	r3, r0
 801c8cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c8ce:	f107 020f 	add.w	r2, r7, #15
 801c8d2:	88f9      	ldrh	r1, [r7, #6]
 801c8d4:	2301      	movs	r3, #1
 801c8d6:	4804      	ldr	r0, [pc, #16]	; (801c8e8 <SUBGRF_ReadRegister+0x24>)
 801c8d8:	f7ed f8c9 	bl	8009a6e <HAL_SUBGHZ_ReadRegisters>
    return data;
 801c8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c8de:	4618      	mov	r0, r3
 801c8e0:	3710      	adds	r7, #16
 801c8e2:	46bd      	mov	sp, r7
 801c8e4:	bd80      	pop	{r7, pc}
 801c8e6:	bf00      	nop
 801c8e8:	200003b0 	.word	0x200003b0

0801c8ec <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b086      	sub	sp, #24
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	6039      	str	r1, [r7, #0]
 801c8f6:	80fb      	strh	r3, [r7, #6]
 801c8f8:	4613      	mov	r3, r2
 801c8fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c8fc:	f3ef 8310 	mrs	r3, PRIMASK
 801c900:	60fb      	str	r3, [r7, #12]
  return(result);
 801c902:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c906:	b672      	cpsid	i
}
 801c908:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c90a:	88bb      	ldrh	r3, [r7, #4]
 801c90c:	88f9      	ldrh	r1, [r7, #6]
 801c90e:	683a      	ldr	r2, [r7, #0]
 801c910:	4806      	ldr	r0, [pc, #24]	; (801c92c <SUBGRF_WriteRegisters+0x40>)
 801c912:	f7ed f84d 	bl	80099b0 <HAL_SUBGHZ_WriteRegisters>
 801c916:	697b      	ldr	r3, [r7, #20]
 801c918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c91a:	693b      	ldr	r3, [r7, #16]
 801c91c:	f383 8810 	msr	PRIMASK, r3
}
 801c920:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c922:	bf00      	nop
 801c924:	3718      	adds	r7, #24
 801c926:	46bd      	mov	sp, r7
 801c928:	bd80      	pop	{r7, pc}
 801c92a:	bf00      	nop
 801c92c:	200003b0 	.word	0x200003b0

0801c930 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c930:	b580      	push	{r7, lr}
 801c932:	b086      	sub	sp, #24
 801c934:	af00      	add	r7, sp, #0
 801c936:	4603      	mov	r3, r0
 801c938:	6039      	str	r1, [r7, #0]
 801c93a:	80fb      	strh	r3, [r7, #6]
 801c93c:	4613      	mov	r3, r2
 801c93e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c940:	f3ef 8310 	mrs	r3, PRIMASK
 801c944:	60fb      	str	r3, [r7, #12]
  return(result);
 801c946:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c94a:	b672      	cpsid	i
}
 801c94c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c94e:	88bb      	ldrh	r3, [r7, #4]
 801c950:	88f9      	ldrh	r1, [r7, #6]
 801c952:	683a      	ldr	r2, [r7, #0]
 801c954:	4806      	ldr	r0, [pc, #24]	; (801c970 <SUBGRF_ReadRegisters+0x40>)
 801c956:	f7ed f88a 	bl	8009a6e <HAL_SUBGHZ_ReadRegisters>
 801c95a:	697b      	ldr	r3, [r7, #20]
 801c95c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c95e:	693b      	ldr	r3, [r7, #16]
 801c960:	f383 8810 	msr	PRIMASK, r3
}
 801c964:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c966:	bf00      	nop
 801c968:	3718      	adds	r7, #24
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}
 801c96e:	bf00      	nop
 801c970:	200003b0 	.word	0x200003b0

0801c974 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c974:	b580      	push	{r7, lr}
 801c976:	b086      	sub	sp, #24
 801c978:	af00      	add	r7, sp, #0
 801c97a:	4603      	mov	r3, r0
 801c97c:	6039      	str	r1, [r7, #0]
 801c97e:	71fb      	strb	r3, [r7, #7]
 801c980:	4613      	mov	r3, r2
 801c982:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c984:	f3ef 8310 	mrs	r3, PRIMASK
 801c988:	60fb      	str	r3, [r7, #12]
  return(result);
 801c98a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c98c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c98e:	b672      	cpsid	i
}
 801c990:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c992:	79bb      	ldrb	r3, [r7, #6]
 801c994:	b29b      	uxth	r3, r3
 801c996:	79f9      	ldrb	r1, [r7, #7]
 801c998:	683a      	ldr	r2, [r7, #0]
 801c99a:	4806      	ldr	r0, [pc, #24]	; (801c9b4 <SUBGRF_WriteBuffer+0x40>)
 801c99c:	f7ed f97b 	bl	8009c96 <HAL_SUBGHZ_WriteBuffer>
 801c9a0:	697b      	ldr	r3, [r7, #20]
 801c9a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9a4:	693b      	ldr	r3, [r7, #16]
 801c9a6:	f383 8810 	msr	PRIMASK, r3
}
 801c9aa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c9ac:	bf00      	nop
 801c9ae:	3718      	adds	r7, #24
 801c9b0:	46bd      	mov	sp, r7
 801c9b2:	bd80      	pop	{r7, pc}
 801c9b4:	200003b0 	.word	0x200003b0

0801c9b8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b086      	sub	sp, #24
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	4603      	mov	r3, r0
 801c9c0:	6039      	str	r1, [r7, #0]
 801c9c2:	71fb      	strb	r3, [r7, #7]
 801c9c4:	4613      	mov	r3, r2
 801c9c6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c9c8:	f3ef 8310 	mrs	r3, PRIMASK
 801c9cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c9ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c9d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c9d2:	b672      	cpsid	i
}
 801c9d4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c9d6:	79bb      	ldrb	r3, [r7, #6]
 801c9d8:	b29b      	uxth	r3, r3
 801c9da:	79f9      	ldrb	r1, [r7, #7]
 801c9dc:	683a      	ldr	r2, [r7, #0]
 801c9de:	4806      	ldr	r0, [pc, #24]	; (801c9f8 <SUBGRF_ReadBuffer+0x40>)
 801c9e0:	f7ed f9ac 	bl	8009d3c <HAL_SUBGHZ_ReadBuffer>
 801c9e4:	697b      	ldr	r3, [r7, #20]
 801c9e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c9e8:	693b      	ldr	r3, [r7, #16]
 801c9ea:	f383 8810 	msr	PRIMASK, r3
}
 801c9ee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c9f0:	bf00      	nop
 801c9f2:	3718      	adds	r7, #24
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}
 801c9f8:	200003b0 	.word	0x200003b0

0801c9fc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c9fc:	b580      	push	{r7, lr}
 801c9fe:	b086      	sub	sp, #24
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	4603      	mov	r3, r0
 801ca04:	6039      	str	r1, [r7, #0]
 801ca06:	71fb      	strb	r3, [r7, #7]
 801ca08:	4613      	mov	r3, r2
 801ca0a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca0c:	f3ef 8310 	mrs	r3, PRIMASK
 801ca10:	60fb      	str	r3, [r7, #12]
  return(result);
 801ca12:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ca14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca16:	b672      	cpsid	i
}
 801ca18:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ca1a:	88bb      	ldrh	r3, [r7, #4]
 801ca1c:	79f9      	ldrb	r1, [r7, #7]
 801ca1e:	683a      	ldr	r2, [r7, #0]
 801ca20:	4806      	ldr	r0, [pc, #24]	; (801ca3c <SUBGRF_WriteCommand+0x40>)
 801ca22:	f7ed f885 	bl	8009b30 <HAL_SUBGHZ_ExecSetCmd>
 801ca26:	697b      	ldr	r3, [r7, #20]
 801ca28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca2a:	693b      	ldr	r3, [r7, #16]
 801ca2c:	f383 8810 	msr	PRIMASK, r3
}
 801ca30:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ca32:	bf00      	nop
 801ca34:	3718      	adds	r7, #24
 801ca36:	46bd      	mov	sp, r7
 801ca38:	bd80      	pop	{r7, pc}
 801ca3a:	bf00      	nop
 801ca3c:	200003b0 	.word	0x200003b0

0801ca40 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	b086      	sub	sp, #24
 801ca44:	af00      	add	r7, sp, #0
 801ca46:	4603      	mov	r3, r0
 801ca48:	6039      	str	r1, [r7, #0]
 801ca4a:	71fb      	strb	r3, [r7, #7]
 801ca4c:	4613      	mov	r3, r2
 801ca4e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca50:	f3ef 8310 	mrs	r3, PRIMASK
 801ca54:	60fb      	str	r3, [r7, #12]
  return(result);
 801ca56:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ca58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca5a:	b672      	cpsid	i
}
 801ca5c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ca5e:	88bb      	ldrh	r3, [r7, #4]
 801ca60:	79f9      	ldrb	r1, [r7, #7]
 801ca62:	683a      	ldr	r2, [r7, #0]
 801ca64:	4806      	ldr	r0, [pc, #24]	; (801ca80 <SUBGRF_ReadCommand+0x40>)
 801ca66:	f7ed f8c2 	bl	8009bee <HAL_SUBGHZ_ExecGetCmd>
 801ca6a:	697b      	ldr	r3, [r7, #20]
 801ca6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca6e:	693b      	ldr	r3, [r7, #16]
 801ca70:	f383 8810 	msr	PRIMASK, r3
}
 801ca74:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ca76:	bf00      	nop
 801ca78:	3718      	adds	r7, #24
 801ca7a:	46bd      	mov	sp, r7
 801ca7c:	bd80      	pop	{r7, pc}
 801ca7e:	bf00      	nop
 801ca80:	200003b0 	.word	0x200003b0

0801ca84 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b084      	sub	sp, #16
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	460a      	mov	r2, r1
 801ca8e:	71fb      	strb	r3, [r7, #7]
 801ca90:	4613      	mov	r3, r2
 801ca92:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801ca94:	2301      	movs	r3, #1
 801ca96:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801ca98:	79bb      	ldrb	r3, [r7, #6]
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	d10d      	bne.n	801caba <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801ca9e:	79fb      	ldrb	r3, [r7, #7]
 801caa0:	2b01      	cmp	r3, #1
 801caa2:	d104      	bne.n	801caae <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801caa4:	2302      	movs	r3, #2
 801caa6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801caa8:	2004      	movs	r0, #4
 801caaa:	f000 f8ef 	bl	801cc8c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801caae:	79fb      	ldrb	r3, [r7, #7]
 801cab0:	2b02      	cmp	r3, #2
 801cab2:	d107      	bne.n	801cac4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cab4:	2303      	movs	r3, #3
 801cab6:	73fb      	strb	r3, [r7, #15]
 801cab8:	e004      	b.n	801cac4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801caba:	79bb      	ldrb	r3, [r7, #6]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d101      	bne.n	801cac4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cac0:	2301      	movs	r3, #1
 801cac2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cac4:	7bfb      	ldrb	r3, [r7, #15]
 801cac6:	4618      	mov	r0, r3
 801cac8:	f7f0 fef3 	bl	800d8b2 <RBI_ConfigRFSwitch>
}
 801cacc:	bf00      	nop
 801cace:	3710      	adds	r7, #16
 801cad0:	46bd      	mov	sp, r7
 801cad2:	bd80      	pop	{r7, pc}

0801cad4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b084      	sub	sp, #16
 801cad8:	af00      	add	r7, sp, #0
 801cada:	4603      	mov	r3, r0
 801cadc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cade:	2301      	movs	r3, #1
 801cae0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cae2:	f7f0 fef4 	bl	800d8ce <RBI_GetTxConfig>
 801cae6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cae8:	68bb      	ldr	r3, [r7, #8]
 801caea:	2b02      	cmp	r3, #2
 801caec:	d016      	beq.n	801cb1c <SUBGRF_SetRfTxPower+0x48>
 801caee:	68bb      	ldr	r3, [r7, #8]
 801caf0:	2b02      	cmp	r3, #2
 801caf2:	dc16      	bgt.n	801cb22 <SUBGRF_SetRfTxPower+0x4e>
 801caf4:	68bb      	ldr	r3, [r7, #8]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d003      	beq.n	801cb02 <SUBGRF_SetRfTxPower+0x2e>
 801cafa:	68bb      	ldr	r3, [r7, #8]
 801cafc:	2b01      	cmp	r3, #1
 801cafe:	d00a      	beq.n	801cb16 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cb00:	e00f      	b.n	801cb22 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cb02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cb06:	2b0f      	cmp	r3, #15
 801cb08:	dd02      	ble.n	801cb10 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cb0a:	2302      	movs	r3, #2
 801cb0c:	73fb      	strb	r3, [r7, #15]
            break;
 801cb0e:	e009      	b.n	801cb24 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cb10:	2301      	movs	r3, #1
 801cb12:	73fb      	strb	r3, [r7, #15]
            break;
 801cb14:	e006      	b.n	801cb24 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cb16:	2301      	movs	r3, #1
 801cb18:	73fb      	strb	r3, [r7, #15]
            break;
 801cb1a:	e003      	b.n	801cb24 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cb1c:	2302      	movs	r3, #2
 801cb1e:	73fb      	strb	r3, [r7, #15]
            break;
 801cb20:	e000      	b.n	801cb24 <SUBGRF_SetRfTxPower+0x50>
            break;
 801cb22:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cb24:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cb28:	7bfb      	ldrb	r3, [r7, #15]
 801cb2a:	2202      	movs	r2, #2
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	f7ff fbcd 	bl	801c2cc <SUBGRF_SetTxParams>

    return paSelect;
 801cb32:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb34:	4618      	mov	r0, r3
 801cb36:	3710      	adds	r7, #16
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}

0801cb3c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cb3c:	b480      	push	{r7}
 801cb3e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cb40:	2301      	movs	r3, #1
}
 801cb42:	4618      	mov	r0, r3
 801cb44:	46bd      	mov	sp, r7
 801cb46:	bc80      	pop	{r7}
 801cb48:	4770      	bx	lr
	...

0801cb4c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb4c:	b580      	push	{r7, lr}
 801cb4e:	b082      	sub	sp, #8
 801cb50:	af00      	add	r7, sp, #0
 801cb52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cb54:	4b03      	ldr	r3, [pc, #12]	; (801cb64 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	2001      	movs	r0, #1
 801cb5a:	4798      	blx	r3
}
 801cb5c:	bf00      	nop
 801cb5e:	3708      	adds	r7, #8
 801cb60:	46bd      	mov	sp, r7
 801cb62:	bd80      	pop	{r7, pc}
 801cb64:	200018d8 	.word	0x200018d8

0801cb68 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b082      	sub	sp, #8
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801cb70:	4b03      	ldr	r3, [pc, #12]	; (801cb80 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	2002      	movs	r0, #2
 801cb76:	4798      	blx	r3
}
 801cb78:	bf00      	nop
 801cb7a:	3708      	adds	r7, #8
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	bd80      	pop	{r7, pc}
 801cb80:	200018d8 	.word	0x200018d8

0801cb84 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801cb84:	b580      	push	{r7, lr}
 801cb86:	b082      	sub	sp, #8
 801cb88:	af00      	add	r7, sp, #0
 801cb8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801cb8c:	4b03      	ldr	r3, [pc, #12]	; (801cb9c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	2040      	movs	r0, #64	; 0x40
 801cb92:	4798      	blx	r3
}
 801cb94:	bf00      	nop
 801cb96:	3708      	adds	r7, #8
 801cb98:	46bd      	mov	sp, r7
 801cb9a:	bd80      	pop	{r7, pc}
 801cb9c:	200018d8 	.word	0x200018d8

0801cba0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b082      	sub	sp, #8
 801cba4:	af00      	add	r7, sp, #0
 801cba6:	6078      	str	r0, [r7, #4]
 801cba8:	460b      	mov	r3, r1
 801cbaa:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801cbac:	78fb      	ldrb	r3, [r7, #3]
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d002      	beq.n	801cbb8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801cbb2:	2b01      	cmp	r3, #1
 801cbb4:	d005      	beq.n	801cbc2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801cbb6:	e00a      	b.n	801cbce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801cbb8:	4b07      	ldr	r3, [pc, #28]	; (801cbd8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	2080      	movs	r0, #128	; 0x80
 801cbbe:	4798      	blx	r3
            break;
 801cbc0:	e005      	b.n	801cbce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801cbc2:	4b05      	ldr	r3, [pc, #20]	; (801cbd8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801cbca:	4798      	blx	r3
            break;
 801cbcc:	bf00      	nop
    }
}
 801cbce:	bf00      	nop
 801cbd0:	3708      	adds	r7, #8
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}
 801cbd6:	bf00      	nop
 801cbd8:	200018d8 	.word	0x200018d8

0801cbdc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cbdc:	b580      	push	{r7, lr}
 801cbde:	b082      	sub	sp, #8
 801cbe0:	af00      	add	r7, sp, #0
 801cbe2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801cbe4:	4b04      	ldr	r3, [pc, #16]	; (801cbf8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801cbec:	4798      	blx	r3
}
 801cbee:	bf00      	nop
 801cbf0:	3708      	adds	r7, #8
 801cbf2:	46bd      	mov	sp, r7
 801cbf4:	bd80      	pop	{r7, pc}
 801cbf6:	bf00      	nop
 801cbf8:	200018d8 	.word	0x200018d8

0801cbfc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b082      	sub	sp, #8
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801cc04:	4b03      	ldr	r3, [pc, #12]	; (801cc14 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	2020      	movs	r0, #32
 801cc0a:	4798      	blx	r3
}
 801cc0c:	bf00      	nop
 801cc0e:	3708      	adds	r7, #8
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	200018d8 	.word	0x200018d8

0801cc18 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b082      	sub	sp, #8
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801cc20:	4b03      	ldr	r3, [pc, #12]	; (801cc30 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	2004      	movs	r0, #4
 801cc26:	4798      	blx	r3
}
 801cc28:	bf00      	nop
 801cc2a:	3708      	adds	r7, #8
 801cc2c:	46bd      	mov	sp, r7
 801cc2e:	bd80      	pop	{r7, pc}
 801cc30:	200018d8 	.word	0x200018d8

0801cc34 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b082      	sub	sp, #8
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801cc3c:	4b03      	ldr	r3, [pc, #12]	; (801cc4c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	2008      	movs	r0, #8
 801cc42:	4798      	blx	r3
}
 801cc44:	bf00      	nop
 801cc46:	3708      	adds	r7, #8
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	bd80      	pop	{r7, pc}
 801cc4c:	200018d8 	.word	0x200018d8

0801cc50 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cc50:	b580      	push	{r7, lr}
 801cc52:	b082      	sub	sp, #8
 801cc54:	af00      	add	r7, sp, #0
 801cc56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801cc58:	4b03      	ldr	r3, [pc, #12]	; (801cc68 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	2010      	movs	r0, #16
 801cc5e:	4798      	blx	r3
}
 801cc60:	bf00      	nop
 801cc62:	3708      	adds	r7, #8
 801cc64:	46bd      	mov	sp, r7
 801cc66:	bd80      	pop	{r7, pc}
 801cc68:	200018d8 	.word	0x200018d8

0801cc6c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b082      	sub	sp, #8
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801cc74:	4b04      	ldr	r3, [pc, #16]	; (801cc88 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801cc7c:	4798      	blx	r3
}
 801cc7e:	bf00      	nop
 801cc80:	3708      	adds	r7, #8
 801cc82:	46bd      	mov	sp, r7
 801cc84:	bd80      	pop	{r7, pc}
 801cc86:	bf00      	nop
 801cc88:	200018d8 	.word	0x200018d8

0801cc8c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801cc8c:	b580      	push	{r7, lr}
 801cc8e:	b084      	sub	sp, #16
 801cc90:	af00      	add	r7, sp, #0
 801cc92:	4603      	mov	r3, r0
 801cc94:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801cc96:	f7f0 fe28 	bl	800d8ea <RBI_IsDCDC>
 801cc9a:	4603      	mov	r3, r0
 801cc9c:	2b01      	cmp	r3, #1
 801cc9e:	d112      	bne.n	801ccc6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801cca0:	f640 1023 	movw	r0, #2339	; 0x923
 801cca4:	f7ff fe0e 	bl	801c8c4 <SUBGRF_ReadRegister>
 801cca8:	4603      	mov	r3, r0
 801ccaa:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ccac:	7bfb      	ldrb	r3, [r7, #15]
 801ccae:	f023 0306 	bic.w	r3, r3, #6
 801ccb2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ccb4:	7bfa      	ldrb	r2, [r7, #15]
 801ccb6:	79fb      	ldrb	r3, [r7, #7]
 801ccb8:	4313      	orrs	r3, r2
 801ccba:	b2db      	uxtb	r3, r3
 801ccbc:	4619      	mov	r1, r3
 801ccbe:	f640 1023 	movw	r0, #2339	; 0x923
 801ccc2:	f7ff fdeb 	bl	801c89c <SUBGRF_WriteRegister>
  }
}
 801ccc6:	bf00      	nop
 801ccc8:	3710      	adds	r7, #16
 801ccca:	46bd      	mov	sp, r7
 801cccc:	bd80      	pop	{r7, pc}
	...

0801ccd0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ccd0:	b480      	push	{r7}
 801ccd2:	b085      	sub	sp, #20
 801ccd4:	af00      	add	r7, sp, #0
 801ccd6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d101      	bne.n	801cce2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ccde:	231f      	movs	r3, #31
 801cce0:	e016      	b.n	801cd10 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cce2:	2300      	movs	r3, #0
 801cce4:	73fb      	strb	r3, [r7, #15]
 801cce6:	e00f      	b.n	801cd08 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801cce8:	7bfb      	ldrb	r3, [r7, #15]
 801ccea:	4a0c      	ldr	r2, [pc, #48]	; (801cd1c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ccec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ccf0:	687a      	ldr	r2, [r7, #4]
 801ccf2:	429a      	cmp	r2, r3
 801ccf4:	d205      	bcs.n	801cd02 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ccf6:	7bfb      	ldrb	r3, [r7, #15]
 801ccf8:	4a08      	ldr	r2, [pc, #32]	; (801cd1c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ccfa:	00db      	lsls	r3, r3, #3
 801ccfc:	4413      	add	r3, r2
 801ccfe:	791b      	ldrb	r3, [r3, #4]
 801cd00:	e006      	b.n	801cd10 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801cd02:	7bfb      	ldrb	r3, [r7, #15]
 801cd04:	3301      	adds	r3, #1
 801cd06:	73fb      	strb	r3, [r7, #15]
 801cd08:	7bfb      	ldrb	r3, [r7, #15]
 801cd0a:	2b15      	cmp	r3, #21
 801cd0c:	d9ec      	bls.n	801cce8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801cd0e:	e7fe      	b.n	801cd0e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801cd10:	4618      	mov	r0, r3
 801cd12:	3714      	adds	r7, #20
 801cd14:	46bd      	mov	sp, r7
 801cd16:	bc80      	pop	{r7}
 801cd18:	4770      	bx	lr
 801cd1a:	bf00      	nop
 801cd1c:	0801f608 	.word	0x0801f608

0801cd20 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b08a      	sub	sp, #40	; 0x28
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	6078      	str	r0, [r7, #4]
 801cd28:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801cd2a:	4b35      	ldr	r3, [pc, #212]	; (801ce00 <SUBGRF_GetCFO+0xe0>)
 801cd2c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801cd2e:	f640 0007 	movw	r0, #2055	; 0x807
 801cd32:	f7ff fdc7 	bl	801c8c4 <SUBGRF_ReadRegister>
 801cd36:	4603      	mov	r3, r0
 801cd38:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801cd3a:	7ffb      	ldrb	r3, [r7, #31]
 801cd3c:	08db      	lsrs	r3, r3, #3
 801cd3e:	b2db      	uxtb	r3, r3
 801cd40:	f003 0303 	and.w	r3, r3, #3
 801cd44:	3328      	adds	r3, #40	; 0x28
 801cd46:	443b      	add	r3, r7
 801cd48:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801cd4c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801cd4e:	7ffb      	ldrb	r3, [r7, #31]
 801cd50:	f003 0307 	and.w	r3, r3, #7
 801cd54:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801cd56:	7fba      	ldrb	r2, [r7, #30]
 801cd58:	7f7b      	ldrb	r3, [r7, #29]
 801cd5a:	3301      	adds	r3, #1
 801cd5c:	fa02 f303 	lsl.w	r3, r2, r3
 801cd60:	461a      	mov	r2, r3
 801cd62:	4b28      	ldr	r3, [pc, #160]	; (801ce04 <SUBGRF_GetCFO+0xe4>)
 801cd64:	fbb3 f3f2 	udiv	r3, r3, r2
 801cd68:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801cd6a:	69ba      	ldr	r2, [r7, #24]
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 801cd72:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801cd74:	2301      	movs	r3, #1
 801cd76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801cd7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cd7e:	697a      	ldr	r2, [r7, #20]
 801cd80:	fb02 f303 	mul.w	r3, r2, r3
 801cd84:	2b07      	cmp	r3, #7
 801cd86:	d802      	bhi.n	801cd8e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801cd88:	2302      	movs	r3, #2
 801cd8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801cd8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cd92:	697a      	ldr	r2, [r7, #20]
 801cd94:	fb02 f303 	mul.w	r3, r2, r3
 801cd98:	2b03      	cmp	r3, #3
 801cd9a:	d802      	bhi.n	801cda2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801cd9c:	2304      	movs	r3, #4
 801cd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801cda2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801cda6:	69bb      	ldr	r3, [r7, #24]
 801cda8:	fb02 f303 	mul.w	r3, r2, r3
 801cdac:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801cdae:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801cdb2:	f7ff fd87 	bl	801c8c4 <SUBGRF_ReadRegister>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	021b      	lsls	r3, r3, #8
 801cdba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801cdbe:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801cdc0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801cdc4:	f7ff fd7e 	bl	801c8c4 <SUBGRF_ReadRegister>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	461a      	mov	r2, r3
 801cdcc:	6a3b      	ldr	r3, [r7, #32]
 801cdce:	4313      	orrs	r3, r2
 801cdd0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801cdd2:	6a3b      	ldr	r3, [r7, #32]
 801cdd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d005      	beq.n	801cde8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801cddc:	6a3b      	ldr	r3, [r7, #32]
 801cdde:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801cde2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801cde6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801cde8:	693b      	ldr	r3, [r7, #16]
 801cdea:	095b      	lsrs	r3, r3, #5
 801cdec:	6a3a      	ldr	r2, [r7, #32]
 801cdee:	fb02 f303 	mul.w	r3, r2, r3
 801cdf2:	11da      	asrs	r2, r3, #7
 801cdf4:	683b      	ldr	r3, [r7, #0]
 801cdf6:	601a      	str	r2, [r3, #0]
}
 801cdf8:	bf00      	nop
 801cdfa:	3728      	adds	r7, #40	; 0x28
 801cdfc:	46bd      	mov	sp, r7
 801cdfe:	bd80      	pop	{r7, pc}
 801ce00:	0c0a0804 	.word	0x0c0a0804
 801ce04:	01e84800 	.word	0x01e84800

0801ce08 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ce08:	b480      	push	{r7}
 801ce0a:	b087      	sub	sp, #28
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	4603      	mov	r3, r0
 801ce10:	60b9      	str	r1, [r7, #8]
 801ce12:	607a      	str	r2, [r7, #4]
 801ce14:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ce16:	2300      	movs	r3, #0
 801ce18:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ce1a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce1e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ce20:	697b      	ldr	r3, [r7, #20]
}
 801ce22:	4618      	mov	r0, r3
 801ce24:	371c      	adds	r7, #28
 801ce26:	46bd      	mov	sp, r7
 801ce28:	bc80      	pop	{r7}
 801ce2a:	4770      	bx	lr

0801ce2c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801ce2c:	b480      	push	{r7}
 801ce2e:	b087      	sub	sp, #28
 801ce30:	af00      	add	r7, sp, #0
 801ce32:	4603      	mov	r3, r0
 801ce34:	60b9      	str	r1, [r7, #8]
 801ce36:	607a      	str	r2, [r7, #4]
 801ce38:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ce3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce42:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ce44:	697b      	ldr	r3, [r7, #20]
}
 801ce46:	4618      	mov	r0, r3
 801ce48:	371c      	adds	r7, #28
 801ce4a:	46bd      	mov	sp, r7
 801ce4c:	bc80      	pop	{r7}
 801ce4e:	4770      	bx	lr

0801ce50 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ce50:	b480      	push	{r7}
 801ce52:	b085      	sub	sp, #20
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	60f8      	str	r0, [r7, #12]
 801ce58:	60b9      	str	r1, [r7, #8]
 801ce5a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ce5c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ce60:	4618      	mov	r0, r3
 801ce62:	3714      	adds	r7, #20
 801ce64:	46bd      	mov	sp, r7
 801ce66:	bc80      	pop	{r7}
 801ce68:	4770      	bx	lr

0801ce6a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ce6a:	b480      	push	{r7}
 801ce6c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ce6e:	bf00      	nop
 801ce70:	46bd      	mov	sp, r7
 801ce72:	bc80      	pop	{r7}
 801ce74:	4770      	bx	lr

0801ce76 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ce76:	b480      	push	{r7}
 801ce78:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ce7a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ce7c:	4618      	mov	r0, r3
 801ce7e:	46bd      	mov	sp, r7
 801ce80:	bc80      	pop	{r7}
 801ce82:	4770      	bx	lr

0801ce84 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ce84:	b480      	push	{r7}
 801ce86:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ce88:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	46bd      	mov	sp, r7
 801ce8e:	bc80      	pop	{r7}
 801ce90:	4770      	bx	lr

0801ce92 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ce92:	b480      	push	{r7}
 801ce94:	b083      	sub	sp, #12
 801ce96:	af00      	add	r7, sp, #0
 801ce98:	4603      	mov	r3, r0
 801ce9a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ce9c:	bf00      	nop
 801ce9e:	370c      	adds	r7, #12
 801cea0:	46bd      	mov	sp, r7
 801cea2:	bc80      	pop	{r7}
 801cea4:	4770      	bx	lr

0801cea6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801cea6:	b480      	push	{r7}
 801cea8:	b087      	sub	sp, #28
 801ceaa:	af00      	add	r7, sp, #0
 801ceac:	60f8      	str	r0, [r7, #12]
 801ceae:	460b      	mov	r3, r1
 801ceb0:	607a      	str	r2, [r7, #4]
 801ceb2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ceb4:	f04f 33ff 	mov.w	r3, #4294967295
 801ceb8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ceba:	697b      	ldr	r3, [r7, #20]
}
 801cebc:	4618      	mov	r0, r3
 801cebe:	371c      	adds	r7, #28
 801cec0:	46bd      	mov	sp, r7
 801cec2:	bc80      	pop	{r7}
 801cec4:	4770      	bx	lr

0801cec6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801cec6:	b480      	push	{r7}
 801cec8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ceca:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801cece:	4618      	mov	r0, r3
 801ced0:	46bd      	mov	sp, r7
 801ced2:	bc80      	pop	{r7}
 801ced4:	4770      	bx	lr

0801ced6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ced6:	b480      	push	{r7}
 801ced8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ceda:	bf00      	nop
 801cedc:	46bd      	mov	sp, r7
 801cede:	bc80      	pop	{r7}
 801cee0:	4770      	bx	lr

0801cee2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801cee2:	b480      	push	{r7}
 801cee4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801cee6:	bf00      	nop
 801cee8:	46bd      	mov	sp, r7
 801ceea:	bc80      	pop	{r7}
 801ceec:	4770      	bx	lr

0801ceee <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ceee:	b480      	push	{r7}
 801cef0:	b083      	sub	sp, #12
 801cef2:	af00      	add	r7, sp, #0
 801cef4:	4603      	mov	r3, r0
 801cef6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801cef8:	bf00      	nop
 801cefa:	370c      	adds	r7, #12
 801cefc:	46bd      	mov	sp, r7
 801cefe:	bc80      	pop	{r7}
 801cf00:	4770      	bx	lr
	...

0801cf04 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801cf04:	b480      	push	{r7}
 801cf06:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801cf08:	4b04      	ldr	r3, [pc, #16]	; (801cf1c <UTIL_LPM_Init+0x18>)
 801cf0a:	2200      	movs	r2, #0
 801cf0c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801cf0e:	4b04      	ldr	r3, [pc, #16]	; (801cf20 <UTIL_LPM_Init+0x1c>)
 801cf10:	2200      	movs	r2, #0
 801cf12:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801cf14:	bf00      	nop
 801cf16:	46bd      	mov	sp, r7
 801cf18:	bc80      	pop	{r7}
 801cf1a:	4770      	bx	lr
 801cf1c:	200018dc 	.word	0x200018dc
 801cf20:	200018e0 	.word	0x200018e0

0801cf24 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cf24:	b480      	push	{r7}
 801cf26:	b087      	sub	sp, #28
 801cf28:	af00      	add	r7, sp, #0
 801cf2a:	6078      	str	r0, [r7, #4]
 801cf2c:	460b      	mov	r3, r1
 801cf2e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf30:	f3ef 8310 	mrs	r3, PRIMASK
 801cf34:	613b      	str	r3, [r7, #16]
  return(result);
 801cf36:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cf38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf3a:	b672      	cpsid	i
}
 801cf3c:	bf00      	nop
  
  switch( state )
 801cf3e:	78fb      	ldrb	r3, [r7, #3]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d008      	beq.n	801cf56 <UTIL_LPM_SetStopMode+0x32>
 801cf44:	2b01      	cmp	r3, #1
 801cf46:	d10e      	bne.n	801cf66 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801cf48:	4b0d      	ldr	r3, [pc, #52]	; (801cf80 <UTIL_LPM_SetStopMode+0x5c>)
 801cf4a:	681a      	ldr	r2, [r3, #0]
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	4313      	orrs	r3, r2
 801cf50:	4a0b      	ldr	r2, [pc, #44]	; (801cf80 <UTIL_LPM_SetStopMode+0x5c>)
 801cf52:	6013      	str	r3, [r2, #0]
      break;
 801cf54:	e008      	b.n	801cf68 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801cf56:	687b      	ldr	r3, [r7, #4]
 801cf58:	43da      	mvns	r2, r3
 801cf5a:	4b09      	ldr	r3, [pc, #36]	; (801cf80 <UTIL_LPM_SetStopMode+0x5c>)
 801cf5c:	681b      	ldr	r3, [r3, #0]
 801cf5e:	4013      	ands	r3, r2
 801cf60:	4a07      	ldr	r2, [pc, #28]	; (801cf80 <UTIL_LPM_SetStopMode+0x5c>)
 801cf62:	6013      	str	r3, [r2, #0]
      break;
 801cf64:	e000      	b.n	801cf68 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801cf66:	bf00      	nop
 801cf68:	697b      	ldr	r3, [r7, #20]
 801cf6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf6c:	68fb      	ldr	r3, [r7, #12]
 801cf6e:	f383 8810 	msr	PRIMASK, r3
}
 801cf72:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cf74:	bf00      	nop
 801cf76:	371c      	adds	r7, #28
 801cf78:	46bd      	mov	sp, r7
 801cf7a:	bc80      	pop	{r7}
 801cf7c:	4770      	bx	lr
 801cf7e:	bf00      	nop
 801cf80:	200018dc 	.word	0x200018dc

0801cf84 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801cf84:	b480      	push	{r7}
 801cf86:	b087      	sub	sp, #28
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
 801cf8c:	460b      	mov	r3, r1
 801cf8e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cf90:	f3ef 8310 	mrs	r3, PRIMASK
 801cf94:	613b      	str	r3, [r7, #16]
  return(result);
 801cf96:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801cf98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cf9a:	b672      	cpsid	i
}
 801cf9c:	bf00      	nop
  
  switch(state)
 801cf9e:	78fb      	ldrb	r3, [r7, #3]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d008      	beq.n	801cfb6 <UTIL_LPM_SetOffMode+0x32>
 801cfa4:	2b01      	cmp	r3, #1
 801cfa6:	d10e      	bne.n	801cfc6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801cfa8:	4b0d      	ldr	r3, [pc, #52]	; (801cfe0 <UTIL_LPM_SetOffMode+0x5c>)
 801cfaa:	681a      	ldr	r2, [r3, #0]
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	4313      	orrs	r3, r2
 801cfb0:	4a0b      	ldr	r2, [pc, #44]	; (801cfe0 <UTIL_LPM_SetOffMode+0x5c>)
 801cfb2:	6013      	str	r3, [r2, #0]
      break;
 801cfb4:	e008      	b.n	801cfc8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	43da      	mvns	r2, r3
 801cfba:	4b09      	ldr	r3, [pc, #36]	; (801cfe0 <UTIL_LPM_SetOffMode+0x5c>)
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	4013      	ands	r3, r2
 801cfc0:	4a07      	ldr	r2, [pc, #28]	; (801cfe0 <UTIL_LPM_SetOffMode+0x5c>)
 801cfc2:	6013      	str	r3, [r2, #0]
      break;
 801cfc4:	e000      	b.n	801cfc8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801cfc6:	bf00      	nop
 801cfc8:	697b      	ldr	r3, [r7, #20]
 801cfca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cfcc:	68fb      	ldr	r3, [r7, #12]
 801cfce:	f383 8810 	msr	PRIMASK, r3
}
 801cfd2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cfd4:	bf00      	nop
 801cfd6:	371c      	adds	r7, #28
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	bc80      	pop	{r7}
 801cfdc:	4770      	bx	lr
 801cfde:	bf00      	nop
 801cfe0:	200018e0 	.word	0x200018e0

0801cfe4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801cfe4:	b580      	push	{r7, lr}
 801cfe6:	b084      	sub	sp, #16
 801cfe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cfea:	f3ef 8310 	mrs	r3, PRIMASK
 801cfee:	60bb      	str	r3, [r7, #8]
  return(result);
 801cff0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801cff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cff4:	b672      	cpsid	i
}
 801cff6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801cff8:	4b12      	ldr	r3, [pc, #72]	; (801d044 <UTIL_LPM_EnterLowPower+0x60>)
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	d006      	beq.n	801d00e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d000:	4b11      	ldr	r3, [pc, #68]	; (801d048 <UTIL_LPM_EnterLowPower+0x64>)
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d006:	4b10      	ldr	r3, [pc, #64]	; (801d048 <UTIL_LPM_EnterLowPower+0x64>)
 801d008:	685b      	ldr	r3, [r3, #4]
 801d00a:	4798      	blx	r3
 801d00c:	e010      	b.n	801d030 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d00e:	4b0f      	ldr	r3, [pc, #60]	; (801d04c <UTIL_LPM_EnterLowPower+0x68>)
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	2b00      	cmp	r3, #0
 801d014:	d006      	beq.n	801d024 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d016:	4b0c      	ldr	r3, [pc, #48]	; (801d048 <UTIL_LPM_EnterLowPower+0x64>)
 801d018:	689b      	ldr	r3, [r3, #8]
 801d01a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d01c:	4b0a      	ldr	r3, [pc, #40]	; (801d048 <UTIL_LPM_EnterLowPower+0x64>)
 801d01e:	68db      	ldr	r3, [r3, #12]
 801d020:	4798      	blx	r3
 801d022:	e005      	b.n	801d030 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d024:	4b08      	ldr	r3, [pc, #32]	; (801d048 <UTIL_LPM_EnterLowPower+0x64>)
 801d026:	691b      	ldr	r3, [r3, #16]
 801d028:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d02a:	4b07      	ldr	r3, [pc, #28]	; (801d048 <UTIL_LPM_EnterLowPower+0x64>)
 801d02c:	695b      	ldr	r3, [r3, #20]
 801d02e:	4798      	blx	r3
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	f383 8810 	msr	PRIMASK, r3
}
 801d03a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d03c:	bf00      	nop
 801d03e:	3710      	adds	r7, #16
 801d040:	46bd      	mov	sp, r7
 801d042:	bd80      	pop	{r7, pc}
 801d044:	200018dc 	.word	0x200018dc
 801d048:	0801f07c 	.word	0x0801f07c
 801d04c:	200018e0 	.word	0x200018e0

0801d050 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d050:	b480      	push	{r7}
 801d052:	b087      	sub	sp, #28
 801d054:	af00      	add	r7, sp, #0
 801d056:	60f8      	str	r0, [r7, #12]
 801d058:	60b9      	str	r1, [r7, #8]
 801d05a:	4613      	mov	r3, r2
 801d05c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d062:	68bb      	ldr	r3, [r7, #8]
 801d064:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d066:	e007      	b.n	801d078 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d068:	693a      	ldr	r2, [r7, #16]
 801d06a:	1c53      	adds	r3, r2, #1
 801d06c:	613b      	str	r3, [r7, #16]
 801d06e:	697b      	ldr	r3, [r7, #20]
 801d070:	1c59      	adds	r1, r3, #1
 801d072:	6179      	str	r1, [r7, #20]
 801d074:	7812      	ldrb	r2, [r2, #0]
 801d076:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d078:	88fb      	ldrh	r3, [r7, #6]
 801d07a:	1e5a      	subs	r2, r3, #1
 801d07c:	80fa      	strh	r2, [r7, #6]
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d1f2      	bne.n	801d068 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d082:	bf00      	nop
 801d084:	bf00      	nop
 801d086:	371c      	adds	r7, #28
 801d088:	46bd      	mov	sp, r7
 801d08a:	bc80      	pop	{r7}
 801d08c:	4770      	bx	lr

0801d08e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d08e:	b480      	push	{r7}
 801d090:	b085      	sub	sp, #20
 801d092:	af00      	add	r7, sp, #0
 801d094:	6078      	str	r0, [r7, #4]
 801d096:	460b      	mov	r3, r1
 801d098:	70fb      	strb	r3, [r7, #3]
 801d09a:	4613      	mov	r3, r2
 801d09c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d0a2:	e004      	b.n	801d0ae <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	1c5a      	adds	r2, r3, #1
 801d0a8:	60fa      	str	r2, [r7, #12]
 801d0aa:	78fa      	ldrb	r2, [r7, #3]
 801d0ac:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d0ae:	883b      	ldrh	r3, [r7, #0]
 801d0b0:	1e5a      	subs	r2, r3, #1
 801d0b2:	803a      	strh	r2, [r7, #0]
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d1f5      	bne.n	801d0a4 <UTIL_MEM_set_8+0x16>
  }
}
 801d0b8:	bf00      	nop
 801d0ba:	bf00      	nop
 801d0bc:	3714      	adds	r7, #20
 801d0be:	46bd      	mov	sp, r7
 801d0c0:	bc80      	pop	{r7}
 801d0c2:	4770      	bx	lr

0801d0c4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d0c4:	b082      	sub	sp, #8
 801d0c6:	b480      	push	{r7}
 801d0c8:	b087      	sub	sp, #28
 801d0ca:	af00      	add	r7, sp, #0
 801d0cc:	60f8      	str	r0, [r7, #12]
 801d0ce:	1d38      	adds	r0, r7, #4
 801d0d0:	e880 0006 	stmia.w	r0, {r1, r2}
 801d0d4:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d0d6:	2300      	movs	r3, #0
 801d0d8:	613b      	str	r3, [r7, #16]
 801d0da:	2300      	movs	r3, #0
 801d0dc:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d0de:	687a      	ldr	r2, [r7, #4]
 801d0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e2:	4413      	add	r3, r2
 801d0e4:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d0e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d0ea:	b29a      	uxth	r2, r3
 801d0ec:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d0f0:	b29b      	uxth	r3, r3
 801d0f2:	4413      	add	r3, r2
 801d0f4:	b29b      	uxth	r3, r3
 801d0f6:	b21b      	sxth	r3, r3
 801d0f8:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d0fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d0fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d102:	db0a      	blt.n	801d11a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d104:	693b      	ldr	r3, [r7, #16]
 801d106:	3301      	adds	r3, #1
 801d108:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d10a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d10e:	b29b      	uxth	r3, r3
 801d110:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d114:	b29b      	uxth	r3, r3
 801d116:	b21b      	sxth	r3, r3
 801d118:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	461a      	mov	r2, r3
 801d11e:	f107 0310 	add.w	r3, r7, #16
 801d122:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d126:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d12a:	68f8      	ldr	r0, [r7, #12]
 801d12c:	371c      	adds	r7, #28
 801d12e:	46bd      	mov	sp, r7
 801d130:	bc80      	pop	{r7}
 801d132:	b002      	add	sp, #8
 801d134:	4770      	bx	lr

0801d136 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d136:	b082      	sub	sp, #8
 801d138:	b480      	push	{r7}
 801d13a:	b087      	sub	sp, #28
 801d13c:	af00      	add	r7, sp, #0
 801d13e:	60f8      	str	r0, [r7, #12]
 801d140:	1d38      	adds	r0, r7, #4
 801d142:	e880 0006 	stmia.w	r0, {r1, r2}
 801d146:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d148:	2300      	movs	r3, #0
 801d14a:	613b      	str	r3, [r7, #16]
 801d14c:	2300      	movs	r3, #0
 801d14e:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d150:	687a      	ldr	r2, [r7, #4]
 801d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d154:	1ad3      	subs	r3, r2, r3
 801d156:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d158:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d15c:	b29a      	uxth	r2, r3
 801d15e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d162:	b29b      	uxth	r3, r3
 801d164:	1ad3      	subs	r3, r2, r3
 801d166:	b29b      	uxth	r3, r3
 801d168:	b21b      	sxth	r3, r3
 801d16a:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d16c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d170:	2b00      	cmp	r3, #0
 801d172:	da0a      	bge.n	801d18a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d174:	693b      	ldr	r3, [r7, #16]
 801d176:	3b01      	subs	r3, #1
 801d178:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d17a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d17e:	b29b      	uxth	r3, r3
 801d180:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d184:	b29b      	uxth	r3, r3
 801d186:	b21b      	sxth	r3, r3
 801d188:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d18a:	68fb      	ldr	r3, [r7, #12]
 801d18c:	461a      	mov	r2, r3
 801d18e:	f107 0310 	add.w	r3, r7, #16
 801d192:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d196:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d19a:	68f8      	ldr	r0, [r7, #12]
 801d19c:	371c      	adds	r7, #28
 801d19e:	46bd      	mov	sp, r7
 801d1a0:	bc80      	pop	{r7}
 801d1a2:	b002      	add	sp, #8
 801d1a4:	4770      	bx	lr
	...

0801d1a8 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d1a8:	b580      	push	{r7, lr}
 801d1aa:	b088      	sub	sp, #32
 801d1ac:	af02      	add	r7, sp, #8
 801d1ae:	463b      	mov	r3, r7
 801d1b0:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	60bb      	str	r3, [r7, #8]
 801d1b8:	2300      	movs	r3, #0
 801d1ba:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d1bc:	4b10      	ldr	r3, [pc, #64]	; (801d200 <SysTimeSet+0x58>)
 801d1be:	691b      	ldr	r3, [r3, #16]
 801d1c0:	f107 0208 	add.w	r2, r7, #8
 801d1c4:	3204      	adds	r2, #4
 801d1c6:	4610      	mov	r0, r2
 801d1c8:	4798      	blx	r3
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d1ce:	f107 0010 	add.w	r0, r7, #16
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	9300      	str	r3, [sp, #0]
 801d1d6:	68bb      	ldr	r3, [r7, #8]
 801d1d8:	463a      	mov	r2, r7
 801d1da:	ca06      	ldmia	r2, {r1, r2}
 801d1dc:	f7ff ffab 	bl	801d136 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d1e0:	4b07      	ldr	r3, [pc, #28]	; (801d200 <SysTimeSet+0x58>)
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	693a      	ldr	r2, [r7, #16]
 801d1e6:	4610      	mov	r0, r2
 801d1e8:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d1ea:	4b05      	ldr	r3, [pc, #20]	; (801d200 <SysTimeSet+0x58>)
 801d1ec:	689b      	ldr	r3, [r3, #8]
 801d1ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d1f2:	4610      	mov	r0, r2
 801d1f4:	4798      	blx	r3
}
 801d1f6:	bf00      	nop
 801d1f8:	3718      	adds	r7, #24
 801d1fa:	46bd      	mov	sp, r7
 801d1fc:	bd80      	pop	{r7, pc}
 801d1fe:	bf00      	nop
 801d200:	0801f160 	.word	0x0801f160

0801d204 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b08a      	sub	sp, #40	; 0x28
 801d208:	af02      	add	r7, sp, #8
 801d20a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d20c:	2300      	movs	r3, #0
 801d20e:	61bb      	str	r3, [r7, #24]
 801d210:	2300      	movs	r3, #0
 801d212:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d214:	2300      	movs	r3, #0
 801d216:	613b      	str	r3, [r7, #16]
 801d218:	2300      	movs	r3, #0
 801d21a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d21c:	4b14      	ldr	r3, [pc, #80]	; (801d270 <SysTimeGet+0x6c>)
 801d21e:	691b      	ldr	r3, [r3, #16]
 801d220:	f107 0218 	add.w	r2, r7, #24
 801d224:	3204      	adds	r2, #4
 801d226:	4610      	mov	r0, r2
 801d228:	4798      	blx	r3
 801d22a:	4603      	mov	r3, r0
 801d22c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d22e:	4b10      	ldr	r3, [pc, #64]	; (801d270 <SysTimeGet+0x6c>)
 801d230:	68db      	ldr	r3, [r3, #12]
 801d232:	4798      	blx	r3
 801d234:	4603      	mov	r3, r0
 801d236:	b21b      	sxth	r3, r3
 801d238:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d23a:	4b0d      	ldr	r3, [pc, #52]	; (801d270 <SysTimeGet+0x6c>)
 801d23c:	685b      	ldr	r3, [r3, #4]
 801d23e:	4798      	blx	r3
 801d240:	4603      	mov	r3, r0
 801d242:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d244:	f107 0010 	add.w	r0, r7, #16
 801d248:	69fb      	ldr	r3, [r7, #28]
 801d24a:	9300      	str	r3, [sp, #0]
 801d24c:	69bb      	ldr	r3, [r7, #24]
 801d24e:	f107 0208 	add.w	r2, r7, #8
 801d252:	ca06      	ldmia	r2, {r1, r2}
 801d254:	f7ff ff36 	bl	801d0c4 <SysTimeAdd>

  return sysTime;
 801d258:	687b      	ldr	r3, [r7, #4]
 801d25a:	461a      	mov	r2, r3
 801d25c:	f107 0310 	add.w	r3, r7, #16
 801d260:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d264:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d268:	6878      	ldr	r0, [r7, #4]
 801d26a:	3720      	adds	r7, #32
 801d26c:	46bd      	mov	sp, r7
 801d26e:	bd80      	pop	{r7, pc}
 801d270:	0801f160 	.word	0x0801f160

0801d274 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d274:	b580      	push	{r7, lr}
 801d276:	b084      	sub	sp, #16
 801d278:	af00      	add	r7, sp, #0
 801d27a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d27c:	2300      	movs	r3, #0
 801d27e:	60bb      	str	r3, [r7, #8]
 801d280:	2300      	movs	r3, #0
 801d282:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d284:	4b0a      	ldr	r3, [pc, #40]	; (801d2b0 <SysTimeGetMcuTime+0x3c>)
 801d286:	691b      	ldr	r3, [r3, #16]
 801d288:	f107 0208 	add.w	r2, r7, #8
 801d28c:	3204      	adds	r2, #4
 801d28e:	4610      	mov	r0, r2
 801d290:	4798      	blx	r3
 801d292:	4603      	mov	r3, r0
 801d294:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d296:	687b      	ldr	r3, [r7, #4]
 801d298:	461a      	mov	r2, r3
 801d29a:	f107 0308 	add.w	r3, r7, #8
 801d29e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d2a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d2a6:	6878      	ldr	r0, [r7, #4]
 801d2a8:	3710      	adds	r7, #16
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bd80      	pop	{r7, pc}
 801d2ae:	bf00      	nop
 801d2b0:	0801f160 	.word	0x0801f160

0801d2b4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d2b4:	b580      	push	{r7, lr}
 801d2b6:	b088      	sub	sp, #32
 801d2b8:	af02      	add	r7, sp, #8
 801d2ba:	463b      	mov	r3, r7
 801d2bc:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d2c0:	4b0f      	ldr	r3, [pc, #60]	; (801d300 <SysTimeToMs+0x4c>)
 801d2c2:	68db      	ldr	r3, [r3, #12]
 801d2c4:	4798      	blx	r3
 801d2c6:	4603      	mov	r3, r0
 801d2c8:	b21b      	sxth	r3, r3
 801d2ca:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d2cc:	4b0c      	ldr	r3, [pc, #48]	; (801d300 <SysTimeToMs+0x4c>)
 801d2ce:	685b      	ldr	r3, [r3, #4]
 801d2d0:	4798      	blx	r3
 801d2d2:	4603      	mov	r3, r0
 801d2d4:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d2d6:	f107 0008 	add.w	r0, r7, #8
 801d2da:	697b      	ldr	r3, [r7, #20]
 801d2dc:	9300      	str	r3, [sp, #0]
 801d2de:	693b      	ldr	r3, [r7, #16]
 801d2e0:	463a      	mov	r2, r7
 801d2e2:	ca06      	ldmia	r2, {r1, r2}
 801d2e4:	f7ff ff27 	bl	801d136 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d2e8:	68bb      	ldr	r3, [r7, #8]
 801d2ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d2ee:	fb02 f303 	mul.w	r3, r2, r3
 801d2f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d2f6:	4413      	add	r3, r2
}
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	3718      	adds	r7, #24
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	bd80      	pop	{r7, pc}
 801d300:	0801f160 	.word	0x0801f160

0801d304 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b08a      	sub	sp, #40	; 0x28
 801d308:	af02      	add	r7, sp, #8
 801d30a:	6078      	str	r0, [r7, #4]
 801d30c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	4a19      	ldr	r2, [pc, #100]	; (801d378 <SysTimeFromMs+0x74>)
 801d312:	fba2 2303 	umull	r2, r3, r2, r3
 801d316:	099b      	lsrs	r3, r3, #6
 801d318:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d31a:	69fb      	ldr	r3, [r7, #28]
 801d31c:	617b      	str	r3, [r7, #20]
 801d31e:	683b      	ldr	r3, [r7, #0]
 801d320:	b29a      	uxth	r2, r3
 801d322:	69fb      	ldr	r3, [r7, #28]
 801d324:	b29b      	uxth	r3, r3
 801d326:	4619      	mov	r1, r3
 801d328:	0149      	lsls	r1, r1, #5
 801d32a:	1ac9      	subs	r1, r1, r3
 801d32c:	0089      	lsls	r1, r1, #2
 801d32e:	440b      	add	r3, r1
 801d330:	00db      	lsls	r3, r3, #3
 801d332:	b29b      	uxth	r3, r3
 801d334:	1ad3      	subs	r3, r2, r3
 801d336:	b29b      	uxth	r3, r3
 801d338:	b21b      	sxth	r3, r3
 801d33a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d33c:	f107 030c 	add.w	r3, r7, #12
 801d340:	2200      	movs	r2, #0
 801d342:	601a      	str	r2, [r3, #0]
 801d344:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d346:	4b0d      	ldr	r3, [pc, #52]	; (801d37c <SysTimeFromMs+0x78>)
 801d348:	68db      	ldr	r3, [r3, #12]
 801d34a:	4798      	blx	r3
 801d34c:	4603      	mov	r3, r0
 801d34e:	b21b      	sxth	r3, r3
 801d350:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d352:	4b0a      	ldr	r3, [pc, #40]	; (801d37c <SysTimeFromMs+0x78>)
 801d354:	685b      	ldr	r3, [r3, #4]
 801d356:	4798      	blx	r3
 801d358:	4603      	mov	r3, r0
 801d35a:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d35c:	6878      	ldr	r0, [r7, #4]
 801d35e:	693b      	ldr	r3, [r7, #16]
 801d360:	9300      	str	r3, [sp, #0]
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	f107 0214 	add.w	r2, r7, #20
 801d368:	ca06      	ldmia	r2, {r1, r2}
 801d36a:	f7ff feab 	bl	801d0c4 <SysTimeAdd>
}
 801d36e:	6878      	ldr	r0, [r7, #4]
 801d370:	3720      	adds	r7, #32
 801d372:	46bd      	mov	sp, r7
 801d374:	bd80      	pop	{r7, pc}
 801d376:	bf00      	nop
 801d378:	10624dd3 	.word	0x10624dd3
 801d37c:	0801f160 	.word	0x0801f160

0801d380 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d380:	b480      	push	{r7}
 801d382:	b085      	sub	sp, #20
 801d384:	af00      	add	r7, sp, #0
 801d386:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d388:	2300      	movs	r3, #0
 801d38a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d38c:	e00e      	b.n	801d3ac <ee_skip_atoi+0x2c>
 801d38e:	68fa      	ldr	r2, [r7, #12]
 801d390:	4613      	mov	r3, r2
 801d392:	009b      	lsls	r3, r3, #2
 801d394:	4413      	add	r3, r2
 801d396:	005b      	lsls	r3, r3, #1
 801d398:	4618      	mov	r0, r3
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	1c59      	adds	r1, r3, #1
 801d3a0:	687a      	ldr	r2, [r7, #4]
 801d3a2:	6011      	str	r1, [r2, #0]
 801d3a4:	781b      	ldrb	r3, [r3, #0]
 801d3a6:	4403      	add	r3, r0
 801d3a8:	3b30      	subs	r3, #48	; 0x30
 801d3aa:	60fb      	str	r3, [r7, #12]
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	781b      	ldrb	r3, [r3, #0]
 801d3b2:	2b2f      	cmp	r3, #47	; 0x2f
 801d3b4:	d904      	bls.n	801d3c0 <ee_skip_atoi+0x40>
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	781b      	ldrb	r3, [r3, #0]
 801d3bc:	2b39      	cmp	r3, #57	; 0x39
 801d3be:	d9e6      	bls.n	801d38e <ee_skip_atoi+0xe>
  return i;
 801d3c0:	68fb      	ldr	r3, [r7, #12]
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	3714      	adds	r7, #20
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bc80      	pop	{r7}
 801d3ca:	4770      	bx	lr

0801d3cc <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d3cc:	b480      	push	{r7}
 801d3ce:	b099      	sub	sp, #100	; 0x64
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	60f8      	str	r0, [r7, #12]
 801d3d4:	60b9      	str	r1, [r7, #8]
 801d3d6:	607a      	str	r2, [r7, #4]
 801d3d8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d3da:	4b71      	ldr	r3, [pc, #452]	; (801d5a0 <ee_number+0x1d4>)
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d3e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d002      	beq.n	801d3f0 <ee_number+0x24>
 801d3ea:	4b6e      	ldr	r3, [pc, #440]	; (801d5a4 <ee_number+0x1d8>)
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d3f0:	683b      	ldr	r3, [r7, #0]
 801d3f2:	2b01      	cmp	r3, #1
 801d3f4:	dd02      	ble.n	801d3fc <ee_number+0x30>
 801d3f6:	683b      	ldr	r3, [r7, #0]
 801d3f8:	2b24      	cmp	r3, #36	; 0x24
 801d3fa:	dd01      	ble.n	801d400 <ee_number+0x34>
 801d3fc:	2300      	movs	r3, #0
 801d3fe:	e0ca      	b.n	801d596 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d402:	f003 0301 	and.w	r3, r3, #1
 801d406:	2b00      	cmp	r3, #0
 801d408:	d001      	beq.n	801d40e <ee_number+0x42>
 801d40a:	2330      	movs	r3, #48	; 0x30
 801d40c:	e000      	b.n	801d410 <ee_number+0x44>
 801d40e:	2320      	movs	r3, #32
 801d410:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d414:	2300      	movs	r3, #0
 801d416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d41a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d41c:	f003 0302 	and.w	r3, r3, #2
 801d420:	2b00      	cmp	r3, #0
 801d422:	d00b      	beq.n	801d43c <ee_number+0x70>
  {
    if (num < 0)
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	2b00      	cmp	r3, #0
 801d428:	da08      	bge.n	801d43c <ee_number+0x70>
    {
      sign = '-';
 801d42a:	232d      	movs	r3, #45	; 0x2d
 801d42c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	425b      	negs	r3, r3
 801d434:	607b      	str	r3, [r7, #4]
      size--;
 801d436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d438:	3b01      	subs	r3, #1
 801d43a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d43c:	2300      	movs	r3, #0
 801d43e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d11e      	bne.n	801d484 <ee_number+0xb8>
    tmp[i++] = '0';
 801d446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d448:	1c5a      	adds	r2, r3, #1
 801d44a:	657a      	str	r2, [r7, #84]	; 0x54
 801d44c:	3360      	adds	r3, #96	; 0x60
 801d44e:	443b      	add	r3, r7
 801d450:	2230      	movs	r2, #48	; 0x30
 801d452:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d456:	e018      	b.n	801d48a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	683a      	ldr	r2, [r7, #0]
 801d45c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d460:	fb01 f202 	mul.w	r2, r1, r2
 801d464:	1a9b      	subs	r3, r3, r2
 801d466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d468:	441a      	add	r2, r3
 801d46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d46c:	1c59      	adds	r1, r3, #1
 801d46e:	6579      	str	r1, [r7, #84]	; 0x54
 801d470:	7812      	ldrb	r2, [r2, #0]
 801d472:	3360      	adds	r3, #96	; 0x60
 801d474:	443b      	add	r3, r7
 801d476:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d47a:	687a      	ldr	r2, [r7, #4]
 801d47c:	683b      	ldr	r3, [r7, #0]
 801d47e:	fbb2 f3f3 	udiv	r3, r2, r3
 801d482:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d484:	687b      	ldr	r3, [r7, #4]
 801d486:	2b00      	cmp	r3, #0
 801d488:	d1e6      	bne.n	801d458 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d48a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d48c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d48e:	429a      	cmp	r2, r3
 801d490:	dd01      	ble.n	801d496 <ee_number+0xca>
 801d492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d494:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d496:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d49a:	1ad3      	subs	r3, r2, r3
 801d49c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d49e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d4a0:	f003 0301 	and.w	r3, r3, #1
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d112      	bne.n	801d4ce <ee_number+0x102>
 801d4a8:	e00c      	b.n	801d4c4 <ee_number+0xf8>
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	1c5a      	adds	r2, r3, #1
 801d4ae:	60fa      	str	r2, [r7, #12]
 801d4b0:	2220      	movs	r2, #32
 801d4b2:	701a      	strb	r2, [r3, #0]
 801d4b4:	68bb      	ldr	r3, [r7, #8]
 801d4b6:	3b01      	subs	r3, #1
 801d4b8:	60bb      	str	r3, [r7, #8]
 801d4ba:	68bb      	ldr	r3, [r7, #8]
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d101      	bne.n	801d4c4 <ee_number+0xf8>
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	e068      	b.n	801d596 <ee_number+0x1ca>
 801d4c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d4c6:	1e5a      	subs	r2, r3, #1
 801d4c8:	66ba      	str	r2, [r7, #104]	; 0x68
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	dced      	bgt.n	801d4aa <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d4ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d4d2:	2b00      	cmp	r3, #0
 801d4d4:	d01b      	beq.n	801d50e <ee_number+0x142>
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	1c5a      	adds	r2, r3, #1
 801d4da:	60fa      	str	r2, [r7, #12]
 801d4dc:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d4e0:	701a      	strb	r2, [r3, #0]
 801d4e2:	68bb      	ldr	r3, [r7, #8]
 801d4e4:	3b01      	subs	r3, #1
 801d4e6:	60bb      	str	r3, [r7, #8]
 801d4e8:	68bb      	ldr	r3, [r7, #8]
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d10f      	bne.n	801d50e <ee_number+0x142>
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	e051      	b.n	801d596 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	1c5a      	adds	r2, r3, #1
 801d4f6:	60fa      	str	r2, [r7, #12]
 801d4f8:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d4fc:	701a      	strb	r2, [r3, #0]
 801d4fe:	68bb      	ldr	r3, [r7, #8]
 801d500:	3b01      	subs	r3, #1
 801d502:	60bb      	str	r3, [r7, #8]
 801d504:	68bb      	ldr	r3, [r7, #8]
 801d506:	2b00      	cmp	r3, #0
 801d508:	d101      	bne.n	801d50e <ee_number+0x142>
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	e043      	b.n	801d596 <ee_number+0x1ca>
 801d50e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d510:	1e5a      	subs	r2, r3, #1
 801d512:	66ba      	str	r2, [r7, #104]	; 0x68
 801d514:	2b00      	cmp	r3, #0
 801d516:	dcec      	bgt.n	801d4f2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d518:	e00c      	b.n	801d534 <ee_number+0x168>
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	1c5a      	adds	r2, r3, #1
 801d51e:	60fa      	str	r2, [r7, #12]
 801d520:	2230      	movs	r2, #48	; 0x30
 801d522:	701a      	strb	r2, [r3, #0]
 801d524:	68bb      	ldr	r3, [r7, #8]
 801d526:	3b01      	subs	r3, #1
 801d528:	60bb      	str	r3, [r7, #8]
 801d52a:	68bb      	ldr	r3, [r7, #8]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d101      	bne.n	801d534 <ee_number+0x168>
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	e030      	b.n	801d596 <ee_number+0x1ca>
 801d534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d536:	1e5a      	subs	r2, r3, #1
 801d538:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d53a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d53c:	429a      	cmp	r2, r3
 801d53e:	dbec      	blt.n	801d51a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d540:	e010      	b.n	801d564 <ee_number+0x198>
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	1c5a      	adds	r2, r3, #1
 801d546:	60fa      	str	r2, [r7, #12]
 801d548:	f107 0110 	add.w	r1, r7, #16
 801d54c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d54e:	440a      	add	r2, r1
 801d550:	7812      	ldrb	r2, [r2, #0]
 801d552:	701a      	strb	r2, [r3, #0]
 801d554:	68bb      	ldr	r3, [r7, #8]
 801d556:	3b01      	subs	r3, #1
 801d558:	60bb      	str	r3, [r7, #8]
 801d55a:	68bb      	ldr	r3, [r7, #8]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d101      	bne.n	801d564 <ee_number+0x198>
 801d560:	68fb      	ldr	r3, [r7, #12]
 801d562:	e018      	b.n	801d596 <ee_number+0x1ca>
 801d564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d566:	1e5a      	subs	r2, r3, #1
 801d568:	657a      	str	r2, [r7, #84]	; 0x54
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	dce9      	bgt.n	801d542 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d56e:	e00c      	b.n	801d58a <ee_number+0x1be>
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	1c5a      	adds	r2, r3, #1
 801d574:	60fa      	str	r2, [r7, #12]
 801d576:	2220      	movs	r2, #32
 801d578:	701a      	strb	r2, [r3, #0]
 801d57a:	68bb      	ldr	r3, [r7, #8]
 801d57c:	3b01      	subs	r3, #1
 801d57e:	60bb      	str	r3, [r7, #8]
 801d580:	68bb      	ldr	r3, [r7, #8]
 801d582:	2b00      	cmp	r3, #0
 801d584:	d101      	bne.n	801d58a <ee_number+0x1be>
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	e005      	b.n	801d596 <ee_number+0x1ca>
 801d58a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d58c:	1e5a      	subs	r2, r3, #1
 801d58e:	66ba      	str	r2, [r7, #104]	; 0x68
 801d590:	2b00      	cmp	r3, #0
 801d592:	dced      	bgt.n	801d570 <ee_number+0x1a4>

  return str;
 801d594:	68fb      	ldr	r3, [r7, #12]
}
 801d596:	4618      	mov	r0, r3
 801d598:	3764      	adds	r7, #100	; 0x64
 801d59a:	46bd      	mov	sp, r7
 801d59c:	bc80      	pop	{r7}
 801d59e:	4770      	bx	lr
 801d5a0:	20000150 	.word	0x20000150
 801d5a4:	20000154 	.word	0x20000154

0801d5a8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d5a8:	b580      	push	{r7, lr}
 801d5aa:	b092      	sub	sp, #72	; 0x48
 801d5ac:	af04      	add	r7, sp, #16
 801d5ae:	60f8      	str	r0, [r7, #12]
 801d5b0:	60b9      	str	r1, [r7, #8]
 801d5b2:	607a      	str	r2, [r7, #4]
 801d5b4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d5b6:	68bb      	ldr	r3, [r7, #8]
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	dc01      	bgt.n	801d5c0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d5bc:	2300      	movs	r3, #0
 801d5be:	e13e      	b.n	801d83e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d5c4:	e128      	b.n	801d818 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d5c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	1ad2      	subs	r2, r2, r3
 801d5cc:	68bb      	ldr	r3, [r7, #8]
 801d5ce:	3b01      	subs	r3, #1
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	f280 812e 	bge.w	801d832 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	781b      	ldrb	r3, [r3, #0]
 801d5da:	2b25      	cmp	r3, #37	; 0x25
 801d5dc:	d006      	beq.n	801d5ec <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d5de:	687a      	ldr	r2, [r7, #4]
 801d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5e2:	1c59      	adds	r1, r3, #1
 801d5e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d5e6:	7812      	ldrb	r2, [r2, #0]
 801d5e8:	701a      	strb	r2, [r3, #0]
      continue;
 801d5ea:	e112      	b.n	801d812 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	3301      	adds	r3, #1
 801d5f4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	781b      	ldrb	r3, [r3, #0]
 801d5fa:	2b30      	cmp	r3, #48	; 0x30
 801d5fc:	d103      	bne.n	801d606 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d5fe:	6a3b      	ldr	r3, [r7, #32]
 801d600:	f043 0301 	orr.w	r3, r3, #1
 801d604:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d606:	f04f 33ff 	mov.w	r3, #4294967295
 801d60a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	781b      	ldrb	r3, [r3, #0]
 801d610:	2b2f      	cmp	r3, #47	; 0x2f
 801d612:	d908      	bls.n	801d626 <tiny_vsnprintf_like+0x7e>
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	781b      	ldrb	r3, [r3, #0]
 801d618:	2b39      	cmp	r3, #57	; 0x39
 801d61a:	d804      	bhi.n	801d626 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d61c:	1d3b      	adds	r3, r7, #4
 801d61e:	4618      	mov	r0, r3
 801d620:	f7ff feae 	bl	801d380 <ee_skip_atoi>
 801d624:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801d626:	f04f 33ff 	mov.w	r3, #4294967295
 801d62a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801d62c:	f04f 33ff 	mov.w	r3, #4294967295
 801d630:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801d632:	230a      	movs	r3, #10
 801d634:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	781b      	ldrb	r3, [r3, #0]
 801d63a:	3b58      	subs	r3, #88	; 0x58
 801d63c:	2b20      	cmp	r3, #32
 801d63e:	f200 8094 	bhi.w	801d76a <tiny_vsnprintf_like+0x1c2>
 801d642:	a201      	add	r2, pc, #4	; (adr r2, 801d648 <tiny_vsnprintf_like+0xa0>)
 801d644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d648:	0801d753 	.word	0x0801d753
 801d64c:	0801d76b 	.word	0x0801d76b
 801d650:	0801d76b 	.word	0x0801d76b
 801d654:	0801d76b 	.word	0x0801d76b
 801d658:	0801d76b 	.word	0x0801d76b
 801d65c:	0801d76b 	.word	0x0801d76b
 801d660:	0801d76b 	.word	0x0801d76b
 801d664:	0801d76b 	.word	0x0801d76b
 801d668:	0801d76b 	.word	0x0801d76b
 801d66c:	0801d76b 	.word	0x0801d76b
 801d670:	0801d76b 	.word	0x0801d76b
 801d674:	0801d6d7 	.word	0x0801d6d7
 801d678:	0801d761 	.word	0x0801d761
 801d67c:	0801d76b 	.word	0x0801d76b
 801d680:	0801d76b 	.word	0x0801d76b
 801d684:	0801d76b 	.word	0x0801d76b
 801d688:	0801d76b 	.word	0x0801d76b
 801d68c:	0801d761 	.word	0x0801d761
 801d690:	0801d76b 	.word	0x0801d76b
 801d694:	0801d76b 	.word	0x0801d76b
 801d698:	0801d76b 	.word	0x0801d76b
 801d69c:	0801d76b 	.word	0x0801d76b
 801d6a0:	0801d76b 	.word	0x0801d76b
 801d6a4:	0801d76b 	.word	0x0801d76b
 801d6a8:	0801d76b 	.word	0x0801d76b
 801d6ac:	0801d76b 	.word	0x0801d76b
 801d6b0:	0801d76b 	.word	0x0801d76b
 801d6b4:	0801d6f7 	.word	0x0801d6f7
 801d6b8:	0801d76b 	.word	0x0801d76b
 801d6bc:	0801d7b7 	.word	0x0801d7b7
 801d6c0:	0801d76b 	.word	0x0801d76b
 801d6c4:	0801d76b 	.word	0x0801d76b
 801d6c8:	0801d75b 	.word	0x0801d75b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ce:	1c5a      	adds	r2, r3, #1
 801d6d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d6d2:	2220      	movs	r2, #32
 801d6d4:	701a      	strb	r2, [r3, #0]
 801d6d6:	69fb      	ldr	r3, [r7, #28]
 801d6d8:	3b01      	subs	r3, #1
 801d6da:	61fb      	str	r3, [r7, #28]
 801d6dc:	69fb      	ldr	r3, [r7, #28]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	dcf4      	bgt.n	801d6cc <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d6e2:	683b      	ldr	r3, [r7, #0]
 801d6e4:	1d1a      	adds	r2, r3, #4
 801d6e6:	603a      	str	r2, [r7, #0]
 801d6e8:	6819      	ldr	r1, [r3, #0]
 801d6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d6ec:	1c5a      	adds	r2, r3, #1
 801d6ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d6f0:	b2ca      	uxtb	r2, r1
 801d6f2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d6f4:	e08d      	b.n	801d812 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d6f6:	683b      	ldr	r3, [r7, #0]
 801d6f8:	1d1a      	adds	r2, r3, #4
 801d6fa:	603a      	str	r2, [r7, #0]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d702:	2b00      	cmp	r3, #0
 801d704:	d101      	bne.n	801d70a <tiny_vsnprintf_like+0x162>
 801d706:	4b50      	ldr	r3, [pc, #320]	; (801d848 <tiny_vsnprintf_like+0x2a0>)
 801d708:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d70a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d70c:	f7e2 fd34 	bl	8000178 <strlen>
 801d710:	4603      	mov	r3, r0
 801d712:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d714:	e004      	b.n	801d720 <tiny_vsnprintf_like+0x178>
 801d716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d718:	1c5a      	adds	r2, r3, #1
 801d71a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d71c:	2220      	movs	r2, #32
 801d71e:	701a      	strb	r2, [r3, #0]
 801d720:	69fb      	ldr	r3, [r7, #28]
 801d722:	1e5a      	subs	r2, r3, #1
 801d724:	61fa      	str	r2, [r7, #28]
 801d726:	693a      	ldr	r2, [r7, #16]
 801d728:	429a      	cmp	r2, r3
 801d72a:	dbf4      	blt.n	801d716 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d72c:	2300      	movs	r3, #0
 801d72e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d730:	e00a      	b.n	801d748 <tiny_vsnprintf_like+0x1a0>
 801d732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d734:	1c53      	adds	r3, r2, #1
 801d736:	627b      	str	r3, [r7, #36]	; 0x24
 801d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d73a:	1c59      	adds	r1, r3, #1
 801d73c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d73e:	7812      	ldrb	r2, [r2, #0]
 801d740:	701a      	strb	r2, [r3, #0]
 801d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d744:	3301      	adds	r3, #1
 801d746:	62bb      	str	r3, [r7, #40]	; 0x28
 801d748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d74a:	693b      	ldr	r3, [r7, #16]
 801d74c:	429a      	cmp	r2, r3
 801d74e:	dbf0      	blt.n	801d732 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d750:	e05f      	b.n	801d812 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801d752:	6a3b      	ldr	r3, [r7, #32]
 801d754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d758:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d75a:	2310      	movs	r3, #16
 801d75c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d75e:	e02b      	b.n	801d7b8 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d760:	6a3b      	ldr	r3, [r7, #32]
 801d762:	f043 0302 	orr.w	r3, r3, #2
 801d766:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d768:	e025      	b.n	801d7b6 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	781b      	ldrb	r3, [r3, #0]
 801d76e:	2b25      	cmp	r3, #37	; 0x25
 801d770:	d004      	beq.n	801d77c <tiny_vsnprintf_like+0x1d4>
 801d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d774:	1c5a      	adds	r2, r3, #1
 801d776:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d778:	2225      	movs	r2, #37	; 0x25
 801d77a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d77c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d77e:	68fb      	ldr	r3, [r7, #12]
 801d780:	1ad2      	subs	r2, r2, r3
 801d782:	68bb      	ldr	r3, [r7, #8]
 801d784:	3b01      	subs	r3, #1
 801d786:	429a      	cmp	r2, r3
 801d788:	da16      	bge.n	801d7b8 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d78a:	687b      	ldr	r3, [r7, #4]
 801d78c:	781b      	ldrb	r3, [r3, #0]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d006      	beq.n	801d7a0 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d792:	687a      	ldr	r2, [r7, #4]
 801d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d796:	1c59      	adds	r1, r3, #1
 801d798:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d79a:	7812      	ldrb	r2, [r2, #0]
 801d79c:	701a      	strb	r2, [r3, #0]
 801d79e:	e002      	b.n	801d7a6 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	3b01      	subs	r3, #1
 801d7a4:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d7a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	1ad2      	subs	r2, r2, r3
 801d7ac:	68bb      	ldr	r3, [r7, #8]
 801d7ae:	3b01      	subs	r3, #1
 801d7b0:	429a      	cmp	r2, r3
 801d7b2:	db2d      	blt.n	801d810 <tiny_vsnprintf_like+0x268>
 801d7b4:	e000      	b.n	801d7b8 <tiny_vsnprintf_like+0x210>
        break;
 801d7b6:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d7b8:	697b      	ldr	r3, [r7, #20]
 801d7ba:	2b6c      	cmp	r3, #108	; 0x6c
 801d7bc:	d105      	bne.n	801d7ca <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d7be:	683b      	ldr	r3, [r7, #0]
 801d7c0:	1d1a      	adds	r2, r3, #4
 801d7c2:	603a      	str	r2, [r7, #0]
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	637b      	str	r3, [r7, #52]	; 0x34
 801d7c8:	e00f      	b.n	801d7ea <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d7ca:	6a3b      	ldr	r3, [r7, #32]
 801d7cc:	f003 0302 	and.w	r3, r3, #2
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d005      	beq.n	801d7e0 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d7d4:	683b      	ldr	r3, [r7, #0]
 801d7d6:	1d1a      	adds	r2, r3, #4
 801d7d8:	603a      	str	r2, [r7, #0]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	637b      	str	r3, [r7, #52]	; 0x34
 801d7de:	e004      	b.n	801d7ea <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d7e0:	683b      	ldr	r3, [r7, #0]
 801d7e2:	1d1a      	adds	r2, r3, #4
 801d7e4:	603a      	str	r2, [r7, #0]
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d7ea:	68bb      	ldr	r3, [r7, #8]
 801d7ec:	1e5a      	subs	r2, r3, #1
 801d7ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	1acb      	subs	r3, r1, r3
 801d7f4:	1ad1      	subs	r1, r2, r3
 801d7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d7f8:	6a3b      	ldr	r3, [r7, #32]
 801d7fa:	9302      	str	r3, [sp, #8]
 801d7fc:	69bb      	ldr	r3, [r7, #24]
 801d7fe:	9301      	str	r3, [sp, #4]
 801d800:	69fb      	ldr	r3, [r7, #28]
 801d802:	9300      	str	r3, [sp, #0]
 801d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d808:	f7ff fde0 	bl	801d3cc <ee_number>
 801d80c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d80e:	e000      	b.n	801d812 <tiny_vsnprintf_like+0x26a>
        continue;
 801d810:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	3301      	adds	r3, #1
 801d816:	607b      	str	r3, [r7, #4]
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	781b      	ldrb	r3, [r3, #0]
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	f47f aed2 	bne.w	801d5c6 <tiny_vsnprintf_like+0x1e>
 801d822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d824:	68fb      	ldr	r3, [r7, #12]
 801d826:	1ad2      	subs	r2, r2, r3
 801d828:	68bb      	ldr	r3, [r7, #8]
 801d82a:	3b01      	subs	r3, #1
 801d82c:	429a      	cmp	r2, r3
 801d82e:	f6bf aeca 	bge.w	801d5c6 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d834:	2200      	movs	r2, #0
 801d836:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	1ad3      	subs	r3, r2, r3
}
 801d83e:	4618      	mov	r0, r3
 801d840:	3738      	adds	r7, #56	; 0x38
 801d842:	46bd      	mov	sp, r7
 801d844:	bd80      	pop	{r7, pc}
 801d846:	bf00      	nop
 801d848:	0801f074 	.word	0x0801f074

0801d84c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801d84c:	b580      	push	{r7, lr}
 801d84e:	b090      	sub	sp, #64	; 0x40
 801d850:	af00      	add	r7, sp, #0
 801d852:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801d854:	4b73      	ldr	r3, [pc, #460]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801d85a:	4b72      	ldr	r3, [pc, #456]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d85c:	681a      	ldr	r2, [r3, #0]
 801d85e:	687b      	ldr	r3, [r7, #4]
 801d860:	4013      	ands	r3, r2
 801d862:	4a70      	ldr	r2, [pc, #448]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d864:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801d866:	4b70      	ldr	r3, [pc, #448]	; (801da28 <UTIL_SEQ_Run+0x1dc>)
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d86c:	4b6f      	ldr	r3, [pc, #444]	; (801da2c <UTIL_SEQ_Run+0x1e0>)
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d872:	4b6f      	ldr	r3, [pc, #444]	; (801da30 <UTIL_SEQ_Run+0x1e4>)
 801d874:	681b      	ldr	r3, [r3, #0]
 801d876:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801d878:	4b6e      	ldr	r3, [pc, #440]	; (801da34 <UTIL_SEQ_Run+0x1e8>)
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d87e:	e08d      	b.n	801d99c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801d880:	2300      	movs	r3, #0
 801d882:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d884:	e002      	b.n	801d88c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801d886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d888:	3301      	adds	r3, #1
 801d88a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801d88c:	4a6a      	ldr	r2, [pc, #424]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d890:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d896:	401a      	ands	r2, r3
 801d898:	4b62      	ldr	r3, [pc, #392]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d89a:	681b      	ldr	r3, [r3, #0]
 801d89c:	4013      	ands	r3, r2
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d0f1      	beq.n	801d886 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801d8a2:	4a65      	ldr	r2, [pc, #404]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d8a6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8ac:	401a      	ands	r2, r3
 801d8ae:	4b5d      	ldr	r3, [pc, #372]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	4013      	ands	r3, r2
 801d8b4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801d8b6:	4a60      	ldr	r2, [pc, #384]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d8ba:	00db      	lsls	r3, r3, #3
 801d8bc:	4413      	add	r3, r2
 801d8be:	685a      	ldr	r2, [r3, #4]
 801d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8c2:	4013      	ands	r3, r2
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d106      	bne.n	801d8d6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801d8c8:	4a5b      	ldr	r2, [pc, #364]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d8cc:	00db      	lsls	r3, r3, #3
 801d8ce:	4413      	add	r3, r2
 801d8d0:	f04f 32ff 	mov.w	r2, #4294967295
 801d8d4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801d8d6:	4a58      	ldr	r2, [pc, #352]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d8da:	00db      	lsls	r3, r3, #3
 801d8dc:	4413      	add	r3, r2
 801d8de:	685a      	ldr	r2, [r3, #4]
 801d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d8e2:	4013      	ands	r3, r2
 801d8e4:	4618      	mov	r0, r3
 801d8e6:	f000 f907 	bl	801daf8 <SEQ_BitPosition>
 801d8ea:	4603      	mov	r3, r0
 801d8ec:	461a      	mov	r2, r3
 801d8ee:	4b53      	ldr	r3, [pc, #332]	; (801da3c <UTIL_SEQ_Run+0x1f0>)
 801d8f0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801d8f2:	4a51      	ldr	r2, [pc, #324]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d8f6:	00db      	lsls	r3, r3, #3
 801d8f8:	4413      	add	r3, r2
 801d8fa:	685a      	ldr	r2, [r3, #4]
 801d8fc:	4b4f      	ldr	r3, [pc, #316]	; (801da3c <UTIL_SEQ_Run+0x1f0>)
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	2101      	movs	r1, #1
 801d902:	fa01 f303 	lsl.w	r3, r1, r3
 801d906:	43db      	mvns	r3, r3
 801d908:	401a      	ands	r2, r3
 801d90a:	494b      	ldr	r1, [pc, #300]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d90e:	00db      	lsls	r3, r3, #3
 801d910:	440b      	add	r3, r1
 801d912:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d914:	f3ef 8310 	mrs	r3, PRIMASK
 801d918:	61bb      	str	r3, [r7, #24]
  return(result);
 801d91a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d91c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801d91e:	b672      	cpsid	i
}
 801d920:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801d922:	4b46      	ldr	r3, [pc, #280]	; (801da3c <UTIL_SEQ_Run+0x1f0>)
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	2201      	movs	r2, #1
 801d928:	fa02 f303 	lsl.w	r3, r2, r3
 801d92c:	43da      	mvns	r2, r3
 801d92e:	4b3e      	ldr	r3, [pc, #248]	; (801da28 <UTIL_SEQ_Run+0x1dc>)
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	4013      	ands	r3, r2
 801d934:	4a3c      	ldr	r2, [pc, #240]	; (801da28 <UTIL_SEQ_Run+0x1dc>)
 801d936:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d938:	2301      	movs	r3, #1
 801d93a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d93c:	e013      	b.n	801d966 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801d93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d940:	3b01      	subs	r3, #1
 801d942:	4a3d      	ldr	r2, [pc, #244]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d944:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801d948:	4b3c      	ldr	r3, [pc, #240]	; (801da3c <UTIL_SEQ_Run+0x1f0>)
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	2201      	movs	r2, #1
 801d94e:	fa02 f303 	lsl.w	r3, r2, r3
 801d952:	43da      	mvns	r2, r3
 801d954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d956:	3b01      	subs	r3, #1
 801d958:	400a      	ands	r2, r1
 801d95a:	4937      	ldr	r1, [pc, #220]	; (801da38 <UTIL_SEQ_Run+0x1ec>)
 801d95c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801d960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d962:	3b01      	subs	r3, #1
 801d964:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d968:	2b00      	cmp	r3, #0
 801d96a:	d1e8      	bne.n	801d93e <UTIL_SEQ_Run+0xf2>
 801d96c:	6a3b      	ldr	r3, [r7, #32]
 801d96e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d970:	697b      	ldr	r3, [r7, #20]
 801d972:	f383 8810 	msr	PRIMASK, r3
}
 801d976:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801d978:	4b30      	ldr	r3, [pc, #192]	; (801da3c <UTIL_SEQ_Run+0x1f0>)
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	4a30      	ldr	r2, [pc, #192]	; (801da40 <UTIL_SEQ_Run+0x1f4>)
 801d97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d982:	4798      	blx	r3

    local_taskset = TaskSet;
 801d984:	4b28      	ldr	r3, [pc, #160]	; (801da28 <UTIL_SEQ_Run+0x1dc>)
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801d98a:	4b28      	ldr	r3, [pc, #160]	; (801da2c <UTIL_SEQ_Run+0x1e0>)
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801d990:	4b27      	ldr	r3, [pc, #156]	; (801da30 <UTIL_SEQ_Run+0x1e4>)
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801d996:	4b27      	ldr	r3, [pc, #156]	; (801da34 <UTIL_SEQ_Run+0x1e8>)
 801d998:	681b      	ldr	r3, [r3, #0]
 801d99a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801d99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9a0:	401a      	ands	r2, r3
 801d9a2:	4b20      	ldr	r3, [pc, #128]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	4013      	ands	r3, r2
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d005      	beq.n	801d9b8 <UTIL_SEQ_Run+0x16c>
 801d9ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9b0:	4013      	ands	r3, r2
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	f43f af64 	beq.w	801d880 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801d9b8:	4b20      	ldr	r3, [pc, #128]	; (801da3c <UTIL_SEQ_Run+0x1f0>)
 801d9ba:	f04f 32ff 	mov.w	r2, #4294967295
 801d9be:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801d9c0:	f000 f88e 	bl	801dae0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d9c4:	f3ef 8310 	mrs	r3, PRIMASK
 801d9c8:	613b      	str	r3, [r7, #16]
  return(result);
 801d9ca:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801d9cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d9ce:	b672      	cpsid	i
}
 801d9d0:	bf00      	nop
  local_taskset = TaskSet;
 801d9d2:	4b15      	ldr	r3, [pc, #84]	; (801da28 <UTIL_SEQ_Run+0x1dc>)
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801d9d8:	4b14      	ldr	r3, [pc, #80]	; (801da2c <UTIL_SEQ_Run+0x1e0>)
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801d9de:	4b14      	ldr	r3, [pc, #80]	; (801da30 <UTIL_SEQ_Run+0x1e4>)
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801d9e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d9e8:	401a      	ands	r2, r3
 801d9ea:	4b0e      	ldr	r3, [pc, #56]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	4013      	ands	r3, r2
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d107      	bne.n	801da04 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801d9f4:	4b0f      	ldr	r3, [pc, #60]	; (801da34 <UTIL_SEQ_Run+0x1e8>)
 801d9f6:	681a      	ldr	r2, [r3, #0]
 801d9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d9fa:	4013      	ands	r3, r2
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d101      	bne.n	801da04 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801da00:	f7e4 feb2 	bl	8002768 <UTIL_SEQ_Idle>
 801da04:	69fb      	ldr	r3, [r7, #28]
 801da06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	f383 8810 	msr	PRIMASK, r3
}
 801da0e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801da10:	f000 f86c 	bl	801daec <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801da14:	4a03      	ldr	r2, [pc, #12]	; (801da24 <UTIL_SEQ_Run+0x1d8>)
 801da16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da18:	6013      	str	r3, [r2, #0]

  return;
 801da1a:	bf00      	nop
}
 801da1c:	3740      	adds	r7, #64	; 0x40
 801da1e:	46bd      	mov	sp, r7
 801da20:	bd80      	pop	{r7, pc}
 801da22:	bf00      	nop
 801da24:	2000015c 	.word	0x2000015c
 801da28:	200018e4 	.word	0x200018e4
 801da2c:	200018e8 	.word	0x200018e8
 801da30:	20000158 	.word	0x20000158
 801da34:	200018ec 	.word	0x200018ec
 801da38:	20001904 	.word	0x20001904
 801da3c:	200018f0 	.word	0x200018f0
 801da40:	200018f4 	.word	0x200018f4

0801da44 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801da44:	b580      	push	{r7, lr}
 801da46:	b088      	sub	sp, #32
 801da48:	af00      	add	r7, sp, #0
 801da4a:	60f8      	str	r0, [r7, #12]
 801da4c:	60b9      	str	r1, [r7, #8]
 801da4e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da50:	f3ef 8310 	mrs	r3, PRIMASK
 801da54:	617b      	str	r3, [r7, #20]
  return(result);
 801da56:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801da58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801da5a:	b672      	cpsid	i
}
 801da5c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801da5e:	68f8      	ldr	r0, [r7, #12]
 801da60:	f000 f84a 	bl	801daf8 <SEQ_BitPosition>
 801da64:	4603      	mov	r3, r0
 801da66:	4619      	mov	r1, r3
 801da68:	4a06      	ldr	r2, [pc, #24]	; (801da84 <UTIL_SEQ_RegTask+0x40>)
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801da70:	69fb      	ldr	r3, [r7, #28]
 801da72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801da74:	69bb      	ldr	r3, [r7, #24]
 801da76:	f383 8810 	msr	PRIMASK, r3
}
 801da7a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801da7c:	bf00      	nop
}
 801da7e:	3720      	adds	r7, #32
 801da80:	46bd      	mov	sp, r7
 801da82:	bd80      	pop	{r7, pc}
 801da84:	200018f4 	.word	0x200018f4

0801da88 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801da88:	b480      	push	{r7}
 801da8a:	b087      	sub	sp, #28
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	6078      	str	r0, [r7, #4]
 801da90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801da92:	f3ef 8310 	mrs	r3, PRIMASK
 801da96:	60fb      	str	r3, [r7, #12]
  return(result);
 801da98:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801da9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801da9c:	b672      	cpsid	i
}
 801da9e:	bf00      	nop

  TaskSet |= TaskId_bm;
 801daa0:	4b0d      	ldr	r3, [pc, #52]	; (801dad8 <UTIL_SEQ_SetTask+0x50>)
 801daa2:	681a      	ldr	r2, [r3, #0]
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	4313      	orrs	r3, r2
 801daa8:	4a0b      	ldr	r2, [pc, #44]	; (801dad8 <UTIL_SEQ_SetTask+0x50>)
 801daaa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801daac:	4a0b      	ldr	r2, [pc, #44]	; (801dadc <UTIL_SEQ_SetTask+0x54>)
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	431a      	orrs	r2, r3
 801dab8:	4908      	ldr	r1, [pc, #32]	; (801dadc <UTIL_SEQ_SetTask+0x54>)
 801daba:	683b      	ldr	r3, [r7, #0]
 801dabc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801dac0:	697b      	ldr	r3, [r7, #20]
 801dac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dac4:	693b      	ldr	r3, [r7, #16]
 801dac6:	f383 8810 	msr	PRIMASK, r3
}
 801daca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801dacc:	bf00      	nop
}
 801dace:	371c      	adds	r7, #28
 801dad0:	46bd      	mov	sp, r7
 801dad2:	bc80      	pop	{r7}
 801dad4:	4770      	bx	lr
 801dad6:	bf00      	nop
 801dad8:	200018e4 	.word	0x200018e4
 801dadc:	20001904 	.word	0x20001904

0801dae0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801dae0:	b480      	push	{r7}
 801dae2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801dae4:	bf00      	nop
}
 801dae6:	46bd      	mov	sp, r7
 801dae8:	bc80      	pop	{r7}
 801daea:	4770      	bx	lr

0801daec <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801daec:	b480      	push	{r7}
 801daee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801daf0:	bf00      	nop
}
 801daf2:	46bd      	mov	sp, r7
 801daf4:	bc80      	pop	{r7}
 801daf6:	4770      	bx	lr

0801daf8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801daf8:	b480      	push	{r7}
 801dafa:	b085      	sub	sp, #20
 801dafc:	af00      	add	r7, sp, #0
 801dafe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801db00:	2300      	movs	r3, #0
 801db02:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801db08:	68bb      	ldr	r3, [r7, #8]
 801db0a:	0c1b      	lsrs	r3, r3, #16
 801db0c:	041b      	lsls	r3, r3, #16
 801db0e:	2b00      	cmp	r3, #0
 801db10:	d104      	bne.n	801db1c <SEQ_BitPosition+0x24>
 801db12:	2310      	movs	r3, #16
 801db14:	73fb      	strb	r3, [r7, #15]
 801db16:	68bb      	ldr	r3, [r7, #8]
 801db18:	041b      	lsls	r3, r3, #16
 801db1a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801db1c:	68bb      	ldr	r3, [r7, #8]
 801db1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801db22:	2b00      	cmp	r3, #0
 801db24:	d105      	bne.n	801db32 <SEQ_BitPosition+0x3a>
 801db26:	7bfb      	ldrb	r3, [r7, #15]
 801db28:	3308      	adds	r3, #8
 801db2a:	73fb      	strb	r3, [r7, #15]
 801db2c:	68bb      	ldr	r3, [r7, #8]
 801db2e:	021b      	lsls	r3, r3, #8
 801db30:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801db32:	68bb      	ldr	r3, [r7, #8]
 801db34:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d105      	bne.n	801db48 <SEQ_BitPosition+0x50>
 801db3c:	7bfb      	ldrb	r3, [r7, #15]
 801db3e:	3304      	adds	r3, #4
 801db40:	73fb      	strb	r3, [r7, #15]
 801db42:	68bb      	ldr	r3, [r7, #8]
 801db44:	011b      	lsls	r3, r3, #4
 801db46:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801db48:	68bb      	ldr	r3, [r7, #8]
 801db4a:	0f1b      	lsrs	r3, r3, #28
 801db4c:	4a06      	ldr	r2, [pc, #24]	; (801db68 <SEQ_BitPosition+0x70>)
 801db4e:	5cd2      	ldrb	r2, [r2, r3]
 801db50:	7bfb      	ldrb	r3, [r7, #15]
 801db52:	4413      	add	r3, r2
 801db54:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801db56:	7bfb      	ldrb	r3, [r7, #15]
 801db58:	f1c3 031f 	rsb	r3, r3, #31
 801db5c:	b2db      	uxtb	r3, r3
}
 801db5e:	4618      	mov	r0, r3
 801db60:	3714      	adds	r7, #20
 801db62:	46bd      	mov	sp, r7
 801db64:	bc80      	pop	{r7}
 801db66:	4770      	bx	lr
 801db68:	0801f6b8 	.word	0x0801f6b8

0801db6c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801db6c:	b580      	push	{r7, lr}
 801db6e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801db70:	4b04      	ldr	r3, [pc, #16]	; (801db84 <UTIL_TIMER_Init+0x18>)
 801db72:	2200      	movs	r2, #0
 801db74:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801db76:	4b04      	ldr	r3, [pc, #16]	; (801db88 <UTIL_TIMER_Init+0x1c>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	4798      	blx	r3
 801db7c:	4603      	mov	r3, r0
}
 801db7e:	4618      	mov	r0, r3
 801db80:	bd80      	pop	{r7, pc}
 801db82:	bf00      	nop
 801db84:	2000190c 	.word	0x2000190c
 801db88:	0801f134 	.word	0x0801f134

0801db8c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b084      	sub	sp, #16
 801db90:	af00      	add	r7, sp, #0
 801db92:	60f8      	str	r0, [r7, #12]
 801db94:	60b9      	str	r1, [r7, #8]
 801db96:	603b      	str	r3, [r7, #0]
 801db98:	4613      	mov	r3, r2
 801db9a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801db9c:	68fb      	ldr	r3, [r7, #12]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d023      	beq.n	801dbea <UTIL_TIMER_Create+0x5e>
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	2b00      	cmp	r3, #0
 801dba6:	d020      	beq.n	801dbea <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	2200      	movs	r2, #0
 801dbac:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801dbae:	4b11      	ldr	r3, [pc, #68]	; (801dbf4 <UTIL_TIMER_Create+0x68>)
 801dbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbb2:	68b8      	ldr	r0, [r7, #8]
 801dbb4:	4798      	blx	r3
 801dbb6:	4602      	mov	r2, r0
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	2200      	movs	r2, #0
 801dbc0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	2200      	movs	r2, #0
 801dbc6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	2200      	movs	r2, #0
 801dbcc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801dbce:	68fb      	ldr	r3, [r7, #12]
 801dbd0:	683a      	ldr	r2, [r7, #0]
 801dbd2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	69ba      	ldr	r2, [r7, #24]
 801dbd8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	79fa      	ldrb	r2, [r7, #7]
 801dbde:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	2200      	movs	r2, #0
 801dbe4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801dbe6:	2300      	movs	r3, #0
 801dbe8:	e000      	b.n	801dbec <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801dbea:	2301      	movs	r3, #1
  }
}
 801dbec:	4618      	mov	r0, r3
 801dbee:	3710      	adds	r7, #16
 801dbf0:	46bd      	mov	sp, r7
 801dbf2:	bd80      	pop	{r7, pc}
 801dbf4:	0801f134 	.word	0x0801f134

0801dbf8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801dbf8:	b580      	push	{r7, lr}
 801dbfa:	b08a      	sub	sp, #40	; 0x28
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dc00:	2300      	movs	r3, #0
 801dc02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d056      	beq.n	801dcba <UTIL_TIMER_Start+0xc2>
 801dc0c:	6878      	ldr	r0, [r7, #4]
 801dc0e:	f000 f9a9 	bl	801df64 <TimerExists>
 801dc12:	4603      	mov	r3, r0
 801dc14:	f083 0301 	eor.w	r3, r3, #1
 801dc18:	b2db      	uxtb	r3, r3
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	d04d      	beq.n	801dcba <UTIL_TIMER_Start+0xc2>
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	7a5b      	ldrb	r3, [r3, #9]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	d149      	bne.n	801dcba <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dc26:	f3ef 8310 	mrs	r3, PRIMASK
 801dc2a:	613b      	str	r3, [r7, #16]
  return(result);
 801dc2c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dc2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801dc30:	b672      	cpsid	i
}
 801dc32:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801dc34:	687b      	ldr	r3, [r7, #4]
 801dc36:	685b      	ldr	r3, [r3, #4]
 801dc38:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801dc3a:	4b24      	ldr	r3, [pc, #144]	; (801dccc <UTIL_TIMER_Start+0xd4>)
 801dc3c:	6a1b      	ldr	r3, [r3, #32]
 801dc3e:	4798      	blx	r3
 801dc40:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801dc42:	6a3a      	ldr	r2, [r7, #32]
 801dc44:	69bb      	ldr	r3, [r7, #24]
 801dc46:	429a      	cmp	r2, r3
 801dc48:	d201      	bcs.n	801dc4e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801dc4a:	69bb      	ldr	r3, [r7, #24]
 801dc4c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	6a3a      	ldr	r2, [r7, #32]
 801dc52:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	2200      	movs	r2, #0
 801dc58:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	2201      	movs	r2, #1
 801dc5e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	2200      	movs	r2, #0
 801dc64:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801dc66:	4b1a      	ldr	r3, [pc, #104]	; (801dcd0 <UTIL_TIMER_Start+0xd8>)
 801dc68:	681b      	ldr	r3, [r3, #0]
 801dc6a:	2b00      	cmp	r3, #0
 801dc6c:	d106      	bne.n	801dc7c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801dc6e:	4b17      	ldr	r3, [pc, #92]	; (801dccc <UTIL_TIMER_Start+0xd4>)
 801dc70:	691b      	ldr	r3, [r3, #16]
 801dc72:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801dc74:	6878      	ldr	r0, [r7, #4]
 801dc76:	f000 f9eb 	bl	801e050 <TimerInsertNewHeadTimer>
 801dc7a:	e017      	b.n	801dcac <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801dc7c:	4b13      	ldr	r3, [pc, #76]	; (801dccc <UTIL_TIMER_Start+0xd4>)
 801dc7e:	699b      	ldr	r3, [r3, #24]
 801dc80:	4798      	blx	r3
 801dc82:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	681a      	ldr	r2, [r3, #0]
 801dc88:	697b      	ldr	r3, [r7, #20]
 801dc8a:	441a      	add	r2, r3
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681a      	ldr	r2, [r3, #0]
 801dc94:	4b0e      	ldr	r3, [pc, #56]	; (801dcd0 <UTIL_TIMER_Start+0xd8>)
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	681b      	ldr	r3, [r3, #0]
 801dc9a:	429a      	cmp	r2, r3
 801dc9c:	d203      	bcs.n	801dca6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801dc9e:	6878      	ldr	r0, [r7, #4]
 801dca0:	f000 f9d6 	bl	801e050 <TimerInsertNewHeadTimer>
 801dca4:	e002      	b.n	801dcac <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801dca6:	6878      	ldr	r0, [r7, #4]
 801dca8:	f000 f9a2 	bl	801dff0 <TimerInsertTimer>
 801dcac:	69fb      	ldr	r3, [r7, #28]
 801dcae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dcb0:	68fb      	ldr	r3, [r7, #12]
 801dcb2:	f383 8810 	msr	PRIMASK, r3
}
 801dcb6:	bf00      	nop
  {
 801dcb8:	e002      	b.n	801dcc0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801dcba:	2301      	movs	r3, #1
 801dcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801dcc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	3728      	adds	r7, #40	; 0x28
 801dcc8:	46bd      	mov	sp, r7
 801dcca:	bd80      	pop	{r7, pc}
 801dccc:	0801f134 	.word	0x0801f134
 801dcd0:	2000190c 	.word	0x2000190c

0801dcd4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801dcd4:	b580      	push	{r7, lr}
 801dcd6:	b088      	sub	sp, #32
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801dcdc:	2300      	movs	r3, #0
 801dcde:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d05b      	beq.n	801dd9e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dce6:	f3ef 8310 	mrs	r3, PRIMASK
 801dcea:	60fb      	str	r3, [r7, #12]
  return(result);
 801dcec:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801dcee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801dcf0:	b672      	cpsid	i
}
 801dcf2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801dcf4:	4b2d      	ldr	r3, [pc, #180]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dcf6:	681b      	ldr	r3, [r3, #0]
 801dcf8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801dcfa:	4b2c      	ldr	r3, [pc, #176]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	2201      	movs	r2, #1
 801dd04:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801dd06:	4b29      	ldr	r3, [pc, #164]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd08:	681b      	ldr	r3, [r3, #0]
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d041      	beq.n	801dd92 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	2200      	movs	r2, #0
 801dd12:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801dd14:	4b25      	ldr	r3, [pc, #148]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd16:	681b      	ldr	r3, [r3, #0]
 801dd18:	687a      	ldr	r2, [r7, #4]
 801dd1a:	429a      	cmp	r2, r3
 801dd1c:	d134      	bne.n	801dd88 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801dd1e:	4b23      	ldr	r3, [pc, #140]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	2200      	movs	r2, #0
 801dd24:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801dd26:	4b21      	ldr	r3, [pc, #132]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	695b      	ldr	r3, [r3, #20]
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d00a      	beq.n	801dd46 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801dd30:	4b1e      	ldr	r3, [pc, #120]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	695b      	ldr	r3, [r3, #20]
 801dd36:	4a1d      	ldr	r2, [pc, #116]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd38:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801dd3a:	4b1c      	ldr	r3, [pc, #112]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	4618      	mov	r0, r3
 801dd40:	f000 f92c 	bl	801df9c <TimerSetTimeout>
 801dd44:	e023      	b.n	801dd8e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801dd46:	4b1a      	ldr	r3, [pc, #104]	; (801ddb0 <UTIL_TIMER_Stop+0xdc>)
 801dd48:	68db      	ldr	r3, [r3, #12]
 801dd4a:	4798      	blx	r3
            TimerListHead = NULL;
 801dd4c:	4b17      	ldr	r3, [pc, #92]	; (801ddac <UTIL_TIMER_Stop+0xd8>)
 801dd4e:	2200      	movs	r2, #0
 801dd50:	601a      	str	r2, [r3, #0]
 801dd52:	e01c      	b.n	801dd8e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801dd54:	697a      	ldr	r2, [r7, #20]
 801dd56:	687b      	ldr	r3, [r7, #4]
 801dd58:	429a      	cmp	r2, r3
 801dd5a:	d110      	bne.n	801dd7e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801dd5c:	697b      	ldr	r3, [r7, #20]
 801dd5e:	695b      	ldr	r3, [r3, #20]
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d006      	beq.n	801dd72 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801dd64:	697b      	ldr	r3, [r7, #20]
 801dd66:	695b      	ldr	r3, [r3, #20]
 801dd68:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801dd6a:	69bb      	ldr	r3, [r7, #24]
 801dd6c:	697a      	ldr	r2, [r7, #20]
 801dd6e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801dd70:	e00d      	b.n	801dd8e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801dd72:	2300      	movs	r3, #0
 801dd74:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801dd76:	69bb      	ldr	r3, [r7, #24]
 801dd78:	697a      	ldr	r2, [r7, #20]
 801dd7a:	615a      	str	r2, [r3, #20]
            break;
 801dd7c:	e007      	b.n	801dd8e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801dd7e:	697b      	ldr	r3, [r7, #20]
 801dd80:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801dd82:	697b      	ldr	r3, [r7, #20]
 801dd84:	695b      	ldr	r3, [r3, #20]
 801dd86:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801dd88:	697b      	ldr	r3, [r7, #20]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d1e2      	bne.n	801dd54 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801dd8e:	2300      	movs	r3, #0
 801dd90:	77fb      	strb	r3, [r7, #31]
 801dd92:	693b      	ldr	r3, [r7, #16]
 801dd94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd96:	68bb      	ldr	r3, [r7, #8]
 801dd98:	f383 8810 	msr	PRIMASK, r3
}
 801dd9c:	e001      	b.n	801dda2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801dd9e:	2301      	movs	r3, #1
 801dda0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801dda2:	7ffb      	ldrb	r3, [r7, #31]
}
 801dda4:	4618      	mov	r0, r3
 801dda6:	3720      	adds	r7, #32
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	bd80      	pop	{r7, pc}
 801ddac:	2000190c 	.word	0x2000190c
 801ddb0:	0801f134 	.word	0x0801f134

0801ddb4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b084      	sub	sp, #16
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ddbe:	2300      	movs	r3, #0
 801ddc0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d102      	bne.n	801ddce <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ddc8:	2301      	movs	r3, #1
 801ddca:	73fb      	strb	r3, [r7, #15]
 801ddcc:	e014      	b.n	801ddf8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ddce:	4b0d      	ldr	r3, [pc, #52]	; (801de04 <UTIL_TIMER_SetPeriod+0x50>)
 801ddd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ddd2:	6838      	ldr	r0, [r7, #0]
 801ddd4:	4798      	blx	r3
 801ddd6:	4602      	mov	r2, r0
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801dddc:	6878      	ldr	r0, [r7, #4]
 801ddde:	f000 f8c1 	bl	801df64 <TimerExists>
 801dde2:	4603      	mov	r3, r0
 801dde4:	2b00      	cmp	r3, #0
 801dde6:	d007      	beq.n	801ddf8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801dde8:	6878      	ldr	r0, [r7, #4]
 801ddea:	f7ff ff73 	bl	801dcd4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ddee:	6878      	ldr	r0, [r7, #4]
 801ddf0:	f7ff ff02 	bl	801dbf8 <UTIL_TIMER_Start>
 801ddf4:	4603      	mov	r3, r0
 801ddf6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ddf8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ddfa:	4618      	mov	r0, r3
 801ddfc:	3710      	adds	r7, #16
 801ddfe:	46bd      	mov	sp, r7
 801de00:	bd80      	pop	{r7, pc}
 801de02:	bf00      	nop
 801de04:	0801f134 	.word	0x0801f134

0801de08 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801de08:	b590      	push	{r4, r7, lr}
 801de0a:	b089      	sub	sp, #36	; 0x24
 801de0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de0e:	f3ef 8310 	mrs	r3, PRIMASK
 801de12:	60bb      	str	r3, [r7, #8]
  return(result);
 801de14:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801de16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801de18:	b672      	cpsid	i
}
 801de1a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801de1c:	4b38      	ldr	r3, [pc, #224]	; (801df00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801de1e:	695b      	ldr	r3, [r3, #20]
 801de20:	4798      	blx	r3
 801de22:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801de24:	4b36      	ldr	r3, [pc, #216]	; (801df00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801de26:	691b      	ldr	r3, [r3, #16]
 801de28:	4798      	blx	r3
 801de2a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801de2c:	693a      	ldr	r2, [r7, #16]
 801de2e:	697b      	ldr	r3, [r7, #20]
 801de30:	1ad3      	subs	r3, r2, r3
 801de32:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801de34:	4b33      	ldr	r3, [pc, #204]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	2b00      	cmp	r3, #0
 801de3a:	d037      	beq.n	801deac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801de3c:	4b31      	ldr	r3, [pc, #196]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801de42:	69fb      	ldr	r3, [r7, #28]
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	68fa      	ldr	r2, [r7, #12]
 801de48:	429a      	cmp	r2, r3
 801de4a:	d206      	bcs.n	801de5a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801de4c:	69fb      	ldr	r3, [r7, #28]
 801de4e:	681a      	ldr	r2, [r3, #0]
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	1ad2      	subs	r2, r2, r3
 801de54:	69fb      	ldr	r3, [r7, #28]
 801de56:	601a      	str	r2, [r3, #0]
 801de58:	e002      	b.n	801de60 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801de5a:	69fb      	ldr	r3, [r7, #28]
 801de5c:	2200      	movs	r2, #0
 801de5e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801de60:	69fb      	ldr	r3, [r7, #28]
 801de62:	695b      	ldr	r3, [r3, #20]
 801de64:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801de66:	69fb      	ldr	r3, [r7, #28]
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d1ea      	bne.n	801de42 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801de6c:	e01e      	b.n	801deac <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801de6e:	4b25      	ldr	r3, [pc, #148]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801de74:	4b23      	ldr	r3, [pc, #140]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	695b      	ldr	r3, [r3, #20]
 801de7a:	4a22      	ldr	r2, [pc, #136]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801de7c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801de7e:	69fb      	ldr	r3, [r7, #28]
 801de80:	2200      	movs	r2, #0
 801de82:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801de84:	69fb      	ldr	r3, [r7, #28]
 801de86:	2200      	movs	r2, #0
 801de88:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801de8a:	69fb      	ldr	r3, [r7, #28]
 801de8c:	68db      	ldr	r3, [r3, #12]
 801de8e:	69fa      	ldr	r2, [r7, #28]
 801de90:	6912      	ldr	r2, [r2, #16]
 801de92:	4610      	mov	r0, r2
 801de94:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801de96:	69fb      	ldr	r3, [r7, #28]
 801de98:	7adb      	ldrb	r3, [r3, #11]
 801de9a:	2b01      	cmp	r3, #1
 801de9c:	d106      	bne.n	801deac <UTIL_TIMER_IRQ_Handler+0xa4>
 801de9e:	69fb      	ldr	r3, [r7, #28]
 801dea0:	7a9b      	ldrb	r3, [r3, #10]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d102      	bne.n	801deac <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801dea6:	69f8      	ldr	r0, [r7, #28]
 801dea8:	f7ff fea6 	bl	801dbf8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801deac:	4b15      	ldr	r3, [pc, #84]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801deae:	681b      	ldr	r3, [r3, #0]
 801deb0:	2b00      	cmp	r3, #0
 801deb2:	d00d      	beq.n	801ded0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801deb4:	4b13      	ldr	r3, [pc, #76]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	2b00      	cmp	r3, #0
 801debc:	d0d7      	beq.n	801de6e <UTIL_TIMER_IRQ_Handler+0x66>
 801debe:	4b11      	ldr	r3, [pc, #68]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	681c      	ldr	r4, [r3, #0]
 801dec4:	4b0e      	ldr	r3, [pc, #56]	; (801df00 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801dec6:	699b      	ldr	r3, [r3, #24]
 801dec8:	4798      	blx	r3
 801deca:	4603      	mov	r3, r0
 801decc:	429c      	cmp	r4, r3
 801dece:	d3ce      	bcc.n	801de6e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ded0:	4b0c      	ldr	r3, [pc, #48]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ded2:	681b      	ldr	r3, [r3, #0]
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d009      	beq.n	801deec <UTIL_TIMER_IRQ_Handler+0xe4>
 801ded8:	4b0a      	ldr	r3, [pc, #40]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	7a1b      	ldrb	r3, [r3, #8]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	d104      	bne.n	801deec <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801dee2:	4b08      	ldr	r3, [pc, #32]	; (801df04 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	4618      	mov	r0, r3
 801dee8:	f000 f858 	bl	801df9c <TimerSetTimeout>
 801deec:	69bb      	ldr	r3, [r7, #24]
 801deee:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	f383 8810 	msr	PRIMASK, r3
}
 801def6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801def8:	bf00      	nop
 801defa:	3724      	adds	r7, #36	; 0x24
 801defc:	46bd      	mov	sp, r7
 801defe:	bd90      	pop	{r4, r7, pc}
 801df00:	0801f134 	.word	0x0801f134
 801df04:	2000190c 	.word	0x2000190c

0801df08 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801df08:	b580      	push	{r7, lr}
 801df0a:	b082      	sub	sp, #8
 801df0c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801df0e:	4b06      	ldr	r3, [pc, #24]	; (801df28 <UTIL_TIMER_GetCurrentTime+0x20>)
 801df10:	69db      	ldr	r3, [r3, #28]
 801df12:	4798      	blx	r3
 801df14:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801df16:	4b04      	ldr	r3, [pc, #16]	; (801df28 <UTIL_TIMER_GetCurrentTime+0x20>)
 801df18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df1a:	6878      	ldr	r0, [r7, #4]
 801df1c:	4798      	blx	r3
 801df1e:	4603      	mov	r3, r0
}
 801df20:	4618      	mov	r0, r3
 801df22:	3708      	adds	r7, #8
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}
 801df28:	0801f134 	.word	0x0801f134

0801df2c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801df2c:	b580      	push	{r7, lr}
 801df2e:	b084      	sub	sp, #16
 801df30:	af00      	add	r7, sp, #0
 801df32:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801df34:	4b0a      	ldr	r3, [pc, #40]	; (801df60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801df36:	69db      	ldr	r3, [r3, #28]
 801df38:	4798      	blx	r3
 801df3a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801df3c:	4b08      	ldr	r3, [pc, #32]	; (801df60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df40:	6878      	ldr	r0, [r7, #4]
 801df42:	4798      	blx	r3
 801df44:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801df46:	4b06      	ldr	r3, [pc, #24]	; (801df60 <UTIL_TIMER_GetElapsedTime+0x34>)
 801df48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df4a:	68f9      	ldr	r1, [r7, #12]
 801df4c:	68ba      	ldr	r2, [r7, #8]
 801df4e:	1a8a      	subs	r2, r1, r2
 801df50:	4610      	mov	r0, r2
 801df52:	4798      	blx	r3
 801df54:	4603      	mov	r3, r0
}
 801df56:	4618      	mov	r0, r3
 801df58:	3710      	adds	r7, #16
 801df5a:	46bd      	mov	sp, r7
 801df5c:	bd80      	pop	{r7, pc}
 801df5e:	bf00      	nop
 801df60:	0801f134 	.word	0x0801f134

0801df64 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801df64:	b480      	push	{r7}
 801df66:	b085      	sub	sp, #20
 801df68:	af00      	add	r7, sp, #0
 801df6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801df6c:	4b0a      	ldr	r3, [pc, #40]	; (801df98 <TimerExists+0x34>)
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801df72:	e008      	b.n	801df86 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801df74:	68fa      	ldr	r2, [r7, #12]
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	429a      	cmp	r2, r3
 801df7a:	d101      	bne.n	801df80 <TimerExists+0x1c>
    {
      return true;
 801df7c:	2301      	movs	r3, #1
 801df7e:	e006      	b.n	801df8e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	695b      	ldr	r3, [r3, #20]
 801df84:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d1f3      	bne.n	801df74 <TimerExists+0x10>
  }
  return false;
 801df8c:	2300      	movs	r3, #0
}
 801df8e:	4618      	mov	r0, r3
 801df90:	3714      	adds	r7, #20
 801df92:	46bd      	mov	sp, r7
 801df94:	bc80      	pop	{r7}
 801df96:	4770      	bx	lr
 801df98:	2000190c 	.word	0x2000190c

0801df9c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801df9c:	b590      	push	{r4, r7, lr}
 801df9e:	b085      	sub	sp, #20
 801dfa0:	af00      	add	r7, sp, #0
 801dfa2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801dfa4:	4b11      	ldr	r3, [pc, #68]	; (801dfec <TimerSetTimeout+0x50>)
 801dfa6:	6a1b      	ldr	r3, [r3, #32]
 801dfa8:	4798      	blx	r3
 801dfaa:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	2201      	movs	r2, #1
 801dfb0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801dfb2:	687b      	ldr	r3, [r7, #4]
 801dfb4:	681c      	ldr	r4, [r3, #0]
 801dfb6:	4b0d      	ldr	r3, [pc, #52]	; (801dfec <TimerSetTimeout+0x50>)
 801dfb8:	699b      	ldr	r3, [r3, #24]
 801dfba:	4798      	blx	r3
 801dfbc:	4602      	mov	r2, r0
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	4413      	add	r3, r2
 801dfc2:	429c      	cmp	r4, r3
 801dfc4:	d207      	bcs.n	801dfd6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801dfc6:	4b09      	ldr	r3, [pc, #36]	; (801dfec <TimerSetTimeout+0x50>)
 801dfc8:	699b      	ldr	r3, [r3, #24]
 801dfca:	4798      	blx	r3
 801dfcc:	4602      	mov	r2, r0
 801dfce:	68fb      	ldr	r3, [r7, #12]
 801dfd0:	441a      	add	r2, r3
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801dfd6:	4b05      	ldr	r3, [pc, #20]	; (801dfec <TimerSetTimeout+0x50>)
 801dfd8:	689b      	ldr	r3, [r3, #8]
 801dfda:	687a      	ldr	r2, [r7, #4]
 801dfdc:	6812      	ldr	r2, [r2, #0]
 801dfde:	4610      	mov	r0, r2
 801dfe0:	4798      	blx	r3
}
 801dfe2:	bf00      	nop
 801dfe4:	3714      	adds	r7, #20
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	bd90      	pop	{r4, r7, pc}
 801dfea:	bf00      	nop
 801dfec:	0801f134 	.word	0x0801f134

0801dff0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801dff0:	b480      	push	{r7}
 801dff2:	b085      	sub	sp, #20
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801dff8:	4b14      	ldr	r3, [pc, #80]	; (801e04c <TimerInsertTimer+0x5c>)
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801dffe:	4b13      	ldr	r3, [pc, #76]	; (801e04c <TimerInsertTimer+0x5c>)
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	695b      	ldr	r3, [r3, #20]
 801e004:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e006:	e012      	b.n	801e02e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	681a      	ldr	r2, [r3, #0]
 801e00c:	68bb      	ldr	r3, [r7, #8]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	429a      	cmp	r2, r3
 801e012:	d905      	bls.n	801e020 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e014:	68bb      	ldr	r3, [r7, #8]
 801e016:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e018:	68bb      	ldr	r3, [r7, #8]
 801e01a:	695b      	ldr	r3, [r3, #20]
 801e01c:	60bb      	str	r3, [r7, #8]
 801e01e:	e006      	b.n	801e02e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	687a      	ldr	r2, [r7, #4]
 801e024:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	68ba      	ldr	r2, [r7, #8]
 801e02a:	615a      	str	r2, [r3, #20]
        return;
 801e02c:	e009      	b.n	801e042 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	695b      	ldr	r3, [r3, #20]
 801e032:	2b00      	cmp	r3, #0
 801e034:	d1e8      	bne.n	801e008 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	687a      	ldr	r2, [r7, #4]
 801e03a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e03c:	687b      	ldr	r3, [r7, #4]
 801e03e:	2200      	movs	r2, #0
 801e040:	615a      	str	r2, [r3, #20]
}
 801e042:	3714      	adds	r7, #20
 801e044:	46bd      	mov	sp, r7
 801e046:	bc80      	pop	{r7}
 801e048:	4770      	bx	lr
 801e04a:	bf00      	nop
 801e04c:	2000190c 	.word	0x2000190c

0801e050 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e050:	b580      	push	{r7, lr}
 801e052:	b084      	sub	sp, #16
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e058:	4b0b      	ldr	r3, [pc, #44]	; (801e088 <TimerInsertNewHeadTimer+0x38>)
 801e05a:	681b      	ldr	r3, [r3, #0]
 801e05c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d002      	beq.n	801e06a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e064:	68fb      	ldr	r3, [r7, #12]
 801e066:	2200      	movs	r2, #0
 801e068:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	68fa      	ldr	r2, [r7, #12]
 801e06e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e070:	4a05      	ldr	r2, [pc, #20]	; (801e088 <TimerInsertNewHeadTimer+0x38>)
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e076:	4b04      	ldr	r3, [pc, #16]	; (801e088 <TimerInsertNewHeadTimer+0x38>)
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	4618      	mov	r0, r3
 801e07c:	f7ff ff8e 	bl	801df9c <TimerSetTimeout>
}
 801e080:	bf00      	nop
 801e082:	3710      	adds	r7, #16
 801e084:	46bd      	mov	sp, r7
 801e086:	bd80      	pop	{r7, pc}
 801e088:	2000190c 	.word	0x2000190c

0801e08c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e08c:	b580      	push	{r7, lr}
 801e08e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e090:	2218      	movs	r2, #24
 801e092:	2100      	movs	r1, #0
 801e094:	4807      	ldr	r0, [pc, #28]	; (801e0b4 <UTIL_ADV_TRACE_Init+0x28>)
 801e096:	f7fe fffa 	bl	801d08e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e09a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e09e:	2100      	movs	r1, #0
 801e0a0:	4805      	ldr	r0, [pc, #20]	; (801e0b8 <UTIL_ADV_TRACE_Init+0x2c>)
 801e0a2:	f7fe fff4 	bl	801d08e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e0a6:	4b05      	ldr	r3, [pc, #20]	; (801e0bc <UTIL_ADV_TRACE_Init+0x30>)
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	4805      	ldr	r0, [pc, #20]	; (801e0c0 <UTIL_ADV_TRACE_Init+0x34>)
 801e0ac:	4798      	blx	r3
 801e0ae:	4603      	mov	r3, r0
}
 801e0b0:	4618      	mov	r0, r3
 801e0b2:	bd80      	pop	{r7, pc}
 801e0b4:	20001910 	.word	0x20001910
 801e0b8:	20001928 	.word	0x20001928
 801e0bc:	0801f174 	.word	0x0801f174
 801e0c0:	0801e32d 	.word	0x0801e32d

0801e0c4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e0c4:	b480      	push	{r7}
 801e0c6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e0c8:	4b06      	ldr	r3, [pc, #24]	; (801e0e4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e0ca:	8a5a      	ldrh	r2, [r3, #18]
 801e0cc:	4b05      	ldr	r3, [pc, #20]	; (801e0e4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e0ce:	8a1b      	ldrh	r3, [r3, #16]
 801e0d0:	429a      	cmp	r2, r3
 801e0d2:	d101      	bne.n	801e0d8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e0d4:	2301      	movs	r3, #1
 801e0d6:	e000      	b.n	801e0da <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e0d8:	2300      	movs	r3, #0
}
 801e0da:	4618      	mov	r0, r3
 801e0dc:	46bd      	mov	sp, r7
 801e0de:	bc80      	pop	{r7}
 801e0e0:	4770      	bx	lr
 801e0e2:	bf00      	nop
 801e0e4:	20001910 	.word	0x20001910

0801e0e8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e0e8:	b408      	push	{r3}
 801e0ea:	b580      	push	{r7, lr}
 801e0ec:	b08d      	sub	sp, #52	; 0x34
 801e0ee:	af00      	add	r7, sp, #0
 801e0f0:	60f8      	str	r0, [r7, #12]
 801e0f2:	60b9      	str	r1, [r7, #8]
 801e0f4:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e0fa:	2300      	movs	r3, #0
 801e0fc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e0fe:	4b37      	ldr	r3, [pc, #220]	; (801e1dc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e100:	7a1b      	ldrb	r3, [r3, #8]
 801e102:	461a      	mov	r2, r3
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	4293      	cmp	r3, r2
 801e108:	d902      	bls.n	801e110 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e10a:	f06f 0304 	mvn.w	r3, #4
 801e10e:	e05e      	b.n	801e1ce <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e110:	4b32      	ldr	r3, [pc, #200]	; (801e1dc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e112:	68da      	ldr	r2, [r3, #12]
 801e114:	68bb      	ldr	r3, [r7, #8]
 801e116:	4013      	ands	r3, r2
 801e118:	68ba      	ldr	r2, [r7, #8]
 801e11a:	429a      	cmp	r2, r3
 801e11c:	d002      	beq.n	801e124 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e11e:	f06f 0305 	mvn.w	r3, #5
 801e122:	e054      	b.n	801e1ce <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e124:	4b2d      	ldr	r3, [pc, #180]	; (801e1dc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e126:	685b      	ldr	r3, [r3, #4]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d00a      	beq.n	801e142 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	2b00      	cmp	r3, #0
 801e130:	d007      	beq.n	801e142 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e132:	4b2a      	ldr	r3, [pc, #168]	; (801e1dc <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e134:	685b      	ldr	r3, [r3, #4]
 801e136:	f107 0116 	add.w	r1, r7, #22
 801e13a:	f107 0218 	add.w	r2, r7, #24
 801e13e:	4610      	mov	r0, r2
 801e140:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e142:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e146:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e14a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e14c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e150:	4823      	ldr	r0, [pc, #140]	; (801e1e0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e152:	f7ff fa29 	bl	801d5a8 <tiny_vsnprintf_like>
 801e156:	4603      	mov	r3, r0
 801e158:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e15a:	f000 f9f1 	bl	801e540 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e15e:	8afa      	ldrh	r2, [r7, #22]
 801e160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e162:	4413      	add	r3, r2
 801e164:	b29b      	uxth	r3, r3
 801e166:	f107 0214 	add.w	r2, r7, #20
 801e16a:	4611      	mov	r1, r2
 801e16c:	4618      	mov	r0, r3
 801e16e:	f000 f969 	bl	801e444 <TRACE_AllocateBufer>
 801e172:	4603      	mov	r3, r0
 801e174:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e178:	d025      	beq.n	801e1c6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e17a:	2300      	movs	r3, #0
 801e17c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e17e:	e00e      	b.n	801e19e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e182:	8aba      	ldrh	r2, [r7, #20]
 801e184:	3330      	adds	r3, #48	; 0x30
 801e186:	443b      	add	r3, r7
 801e188:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e18c:	4b15      	ldr	r3, [pc, #84]	; (801e1e4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e18e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e190:	8abb      	ldrh	r3, [r7, #20]
 801e192:	3301      	adds	r3, #1
 801e194:	b29b      	uxth	r3, r3
 801e196:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e198:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e19a:	3301      	adds	r3, #1
 801e19c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e19e:	8afb      	ldrh	r3, [r7, #22]
 801e1a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e1a2:	429a      	cmp	r2, r3
 801e1a4:	d3ec      	bcc.n	801e180 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e1a6:	8abb      	ldrh	r3, [r7, #20]
 801e1a8:	461a      	mov	r2, r3
 801e1aa:	4b0e      	ldr	r3, [pc, #56]	; (801e1e4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e1ac:	18d0      	adds	r0, r2, r3
 801e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e1b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e1b6:	f7ff f9f7 	bl	801d5a8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e1ba:	f000 f9df 	bl	801e57c <TRACE_UnLock>

    return TRACE_Send();
 801e1be:	f000 f831 	bl	801e224 <TRACE_Send>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	e003      	b.n	801e1ce <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e1c6:	f000 f9d9 	bl	801e57c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e1ca:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e1ce:	4618      	mov	r0, r3
 801e1d0:	3734      	adds	r7, #52	; 0x34
 801e1d2:	46bd      	mov	sp, r7
 801e1d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e1d8:	b001      	add	sp, #4
 801e1da:	4770      	bx	lr
 801e1dc:	20001910 	.word	0x20001910
 801e1e0:	20001d28 	.word	0x20001d28
 801e1e4:	20001928 	.word	0x20001928

0801e1e8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e1e8:	b480      	push	{r7}
 801e1ea:	b083      	sub	sp, #12
 801e1ec:	af00      	add	r7, sp, #0
 801e1ee:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e1f0:	4a03      	ldr	r2, [pc, #12]	; (801e200 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	6053      	str	r3, [r2, #4]
}
 801e1f6:	bf00      	nop
 801e1f8:	370c      	adds	r7, #12
 801e1fa:	46bd      	mov	sp, r7
 801e1fc:	bc80      	pop	{r7}
 801e1fe:	4770      	bx	lr
 801e200:	20001910 	.word	0x20001910

0801e204 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e204:	b480      	push	{r7}
 801e206:	b083      	sub	sp, #12
 801e208:	af00      	add	r7, sp, #0
 801e20a:	4603      	mov	r3, r0
 801e20c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e20e:	4a04      	ldr	r2, [pc, #16]	; (801e220 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e210:	79fb      	ldrb	r3, [r7, #7]
 801e212:	7213      	strb	r3, [r2, #8]
}
 801e214:	bf00      	nop
 801e216:	370c      	adds	r7, #12
 801e218:	46bd      	mov	sp, r7
 801e21a:	bc80      	pop	{r7}
 801e21c:	4770      	bx	lr
 801e21e:	bf00      	nop
 801e220:	20001910 	.word	0x20001910

0801e224 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e224:	b580      	push	{r7, lr}
 801e226:	b088      	sub	sp, #32
 801e228:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e22a:	2300      	movs	r3, #0
 801e22c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e22e:	2300      	movs	r3, #0
 801e230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e232:	f3ef 8310 	mrs	r3, PRIMASK
 801e236:	613b      	str	r3, [r7, #16]
  return(result);
 801e238:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e23a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e23c:	b672      	cpsid	i
}
 801e23e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e240:	f000 f9ba 	bl	801e5b8 <TRACE_IsLocked>
 801e244:	4603      	mov	r3, r0
 801e246:	2b00      	cmp	r3, #0
 801e248:	d15d      	bne.n	801e306 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e24a:	f000 f979 	bl	801e540 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e24e:	4b34      	ldr	r3, [pc, #208]	; (801e320 <TRACE_Send+0xfc>)
 801e250:	8a1a      	ldrh	r2, [r3, #16]
 801e252:	4b33      	ldr	r3, [pc, #204]	; (801e320 <TRACE_Send+0xfc>)
 801e254:	8a5b      	ldrh	r3, [r3, #18]
 801e256:	429a      	cmp	r2, r3
 801e258:	d04d      	beq.n	801e2f6 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e25a:	4b31      	ldr	r3, [pc, #196]	; (801e320 <TRACE_Send+0xfc>)
 801e25c:	789b      	ldrb	r3, [r3, #2]
 801e25e:	2b01      	cmp	r3, #1
 801e260:	d117      	bne.n	801e292 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e262:	4b2f      	ldr	r3, [pc, #188]	; (801e320 <TRACE_Send+0xfc>)
 801e264:	881a      	ldrh	r2, [r3, #0]
 801e266:	4b2e      	ldr	r3, [pc, #184]	; (801e320 <TRACE_Send+0xfc>)
 801e268:	8a1b      	ldrh	r3, [r3, #16]
 801e26a:	1ad3      	subs	r3, r2, r3
 801e26c:	b29a      	uxth	r2, r3
 801e26e:	4b2c      	ldr	r3, [pc, #176]	; (801e320 <TRACE_Send+0xfc>)
 801e270:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e272:	4b2b      	ldr	r3, [pc, #172]	; (801e320 <TRACE_Send+0xfc>)
 801e274:	2202      	movs	r2, #2
 801e276:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e278:	4b29      	ldr	r3, [pc, #164]	; (801e320 <TRACE_Send+0xfc>)
 801e27a:	2200      	movs	r2, #0
 801e27c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e27e:	4b28      	ldr	r3, [pc, #160]	; (801e320 <TRACE_Send+0xfc>)
 801e280:	8a9b      	ldrh	r3, [r3, #20]
 801e282:	2b00      	cmp	r3, #0
 801e284:	d105      	bne.n	801e292 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e286:	4b26      	ldr	r3, [pc, #152]	; (801e320 <TRACE_Send+0xfc>)
 801e288:	2200      	movs	r2, #0
 801e28a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e28c:	4b24      	ldr	r3, [pc, #144]	; (801e320 <TRACE_Send+0xfc>)
 801e28e:	2200      	movs	r2, #0
 801e290:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e292:	4b23      	ldr	r3, [pc, #140]	; (801e320 <TRACE_Send+0xfc>)
 801e294:	789b      	ldrb	r3, [r3, #2]
 801e296:	2b00      	cmp	r3, #0
 801e298:	d115      	bne.n	801e2c6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e29a:	4b21      	ldr	r3, [pc, #132]	; (801e320 <TRACE_Send+0xfc>)
 801e29c:	8a5a      	ldrh	r2, [r3, #18]
 801e29e:	4b20      	ldr	r3, [pc, #128]	; (801e320 <TRACE_Send+0xfc>)
 801e2a0:	8a1b      	ldrh	r3, [r3, #16]
 801e2a2:	429a      	cmp	r2, r3
 801e2a4:	d908      	bls.n	801e2b8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e2a6:	4b1e      	ldr	r3, [pc, #120]	; (801e320 <TRACE_Send+0xfc>)
 801e2a8:	8a5a      	ldrh	r2, [r3, #18]
 801e2aa:	4b1d      	ldr	r3, [pc, #116]	; (801e320 <TRACE_Send+0xfc>)
 801e2ac:	8a1b      	ldrh	r3, [r3, #16]
 801e2ae:	1ad3      	subs	r3, r2, r3
 801e2b0:	b29a      	uxth	r2, r3
 801e2b2:	4b1b      	ldr	r3, [pc, #108]	; (801e320 <TRACE_Send+0xfc>)
 801e2b4:	829a      	strh	r2, [r3, #20]
 801e2b6:	e006      	b.n	801e2c6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e2b8:	4b19      	ldr	r3, [pc, #100]	; (801e320 <TRACE_Send+0xfc>)
 801e2ba:	8a1b      	ldrh	r3, [r3, #16]
 801e2bc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e2c0:	b29a      	uxth	r2, r3
 801e2c2:	4b17      	ldr	r3, [pc, #92]	; (801e320 <TRACE_Send+0xfc>)
 801e2c4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e2c6:	4b16      	ldr	r3, [pc, #88]	; (801e320 <TRACE_Send+0xfc>)
 801e2c8:	8a1b      	ldrh	r3, [r3, #16]
 801e2ca:	461a      	mov	r2, r3
 801e2cc:	4b15      	ldr	r3, [pc, #84]	; (801e324 <TRACE_Send+0x100>)
 801e2ce:	4413      	add	r3, r2
 801e2d0:	61bb      	str	r3, [r7, #24]
 801e2d2:	697b      	ldr	r3, [r7, #20]
 801e2d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	f383 8810 	msr	PRIMASK, r3
}
 801e2dc:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e2de:	f7e4 fb49 	bl	8002974 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e2e2:	4b11      	ldr	r3, [pc, #68]	; (801e328 <TRACE_Send+0x104>)
 801e2e4:	68db      	ldr	r3, [r3, #12]
 801e2e6:	4a0e      	ldr	r2, [pc, #56]	; (801e320 <TRACE_Send+0xfc>)
 801e2e8:	8a92      	ldrh	r2, [r2, #20]
 801e2ea:	4611      	mov	r1, r2
 801e2ec:	69b8      	ldr	r0, [r7, #24]
 801e2ee:	4798      	blx	r3
 801e2f0:	4603      	mov	r3, r0
 801e2f2:	77fb      	strb	r3, [r7, #31]
 801e2f4:	e00d      	b.n	801e312 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e2f6:	f000 f941 	bl	801e57c <TRACE_UnLock>
 801e2fa:	697b      	ldr	r3, [r7, #20]
 801e2fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2fe:	68bb      	ldr	r3, [r7, #8]
 801e300:	f383 8810 	msr	PRIMASK, r3
}
 801e304:	e005      	b.n	801e312 <TRACE_Send+0xee>
 801e306:	697b      	ldr	r3, [r7, #20]
 801e308:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	f383 8810 	msr	PRIMASK, r3
}
 801e310:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e312:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e316:	4618      	mov	r0, r3
 801e318:	3720      	adds	r7, #32
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}
 801e31e:	bf00      	nop
 801e320:	20001910 	.word	0x20001910
 801e324:	20001928 	.word	0x20001928
 801e328:	0801f174 	.word	0x0801f174

0801e32c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e32c:	b580      	push	{r7, lr}
 801e32e:	b088      	sub	sp, #32
 801e330:	af00      	add	r7, sp, #0
 801e332:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e334:	2300      	movs	r3, #0
 801e336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e338:	f3ef 8310 	mrs	r3, PRIMASK
 801e33c:	617b      	str	r3, [r7, #20]
  return(result);
 801e33e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e340:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e342:	b672      	cpsid	i
}
 801e344:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e346:	4b3c      	ldr	r3, [pc, #240]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e348:	789b      	ldrb	r3, [r3, #2]
 801e34a:	2b02      	cmp	r3, #2
 801e34c:	d106      	bne.n	801e35c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e34e:	4b3a      	ldr	r3, [pc, #232]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e350:	2200      	movs	r2, #0
 801e352:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e354:	4b38      	ldr	r3, [pc, #224]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e356:	2200      	movs	r2, #0
 801e358:	821a      	strh	r2, [r3, #16]
 801e35a:	e00a      	b.n	801e372 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e35c:	4b36      	ldr	r3, [pc, #216]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e35e:	8a1a      	ldrh	r2, [r3, #16]
 801e360:	4b35      	ldr	r3, [pc, #212]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e362:	8a9b      	ldrh	r3, [r3, #20]
 801e364:	4413      	add	r3, r2
 801e366:	b29b      	uxth	r3, r3
 801e368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e36c:	b29a      	uxth	r2, r3
 801e36e:	4b32      	ldr	r3, [pc, #200]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e370:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e372:	4b31      	ldr	r3, [pc, #196]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e374:	8a1a      	ldrh	r2, [r3, #16]
 801e376:	4b30      	ldr	r3, [pc, #192]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e378:	8a5b      	ldrh	r3, [r3, #18]
 801e37a:	429a      	cmp	r2, r3
 801e37c:	d04d      	beq.n	801e41a <TRACE_TxCpltCallback+0xee>
 801e37e:	4b2e      	ldr	r3, [pc, #184]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e380:	8adb      	ldrh	r3, [r3, #22]
 801e382:	2b01      	cmp	r3, #1
 801e384:	d149      	bne.n	801e41a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e386:	4b2c      	ldr	r3, [pc, #176]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e388:	789b      	ldrb	r3, [r3, #2]
 801e38a:	2b01      	cmp	r3, #1
 801e38c:	d117      	bne.n	801e3be <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e38e:	4b2a      	ldr	r3, [pc, #168]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e390:	881a      	ldrh	r2, [r3, #0]
 801e392:	4b29      	ldr	r3, [pc, #164]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e394:	8a1b      	ldrh	r3, [r3, #16]
 801e396:	1ad3      	subs	r3, r2, r3
 801e398:	b29a      	uxth	r2, r3
 801e39a:	4b27      	ldr	r3, [pc, #156]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e39c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e39e:	4b26      	ldr	r3, [pc, #152]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3a0:	2202      	movs	r2, #2
 801e3a2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e3a4:	4b24      	ldr	r3, [pc, #144]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e3aa:	4b23      	ldr	r3, [pc, #140]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3ac:	8a9b      	ldrh	r3, [r3, #20]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d105      	bne.n	801e3be <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e3b2:	4b21      	ldr	r3, [pc, #132]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3b4:	2200      	movs	r2, #0
 801e3b6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e3b8:	4b1f      	ldr	r3, [pc, #124]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3ba:	2200      	movs	r2, #0
 801e3bc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e3be:	4b1e      	ldr	r3, [pc, #120]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3c0:	789b      	ldrb	r3, [r3, #2]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d115      	bne.n	801e3f2 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e3c6:	4b1c      	ldr	r3, [pc, #112]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3c8:	8a5a      	ldrh	r2, [r3, #18]
 801e3ca:	4b1b      	ldr	r3, [pc, #108]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3cc:	8a1b      	ldrh	r3, [r3, #16]
 801e3ce:	429a      	cmp	r2, r3
 801e3d0:	d908      	bls.n	801e3e4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e3d2:	4b19      	ldr	r3, [pc, #100]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3d4:	8a5a      	ldrh	r2, [r3, #18]
 801e3d6:	4b18      	ldr	r3, [pc, #96]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3d8:	8a1b      	ldrh	r3, [r3, #16]
 801e3da:	1ad3      	subs	r3, r2, r3
 801e3dc:	b29a      	uxth	r2, r3
 801e3de:	4b16      	ldr	r3, [pc, #88]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3e0:	829a      	strh	r2, [r3, #20]
 801e3e2:	e006      	b.n	801e3f2 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e3e4:	4b14      	ldr	r3, [pc, #80]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3e6:	8a1b      	ldrh	r3, [r3, #16]
 801e3e8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e3ec:	b29a      	uxth	r2, r3
 801e3ee:	4b12      	ldr	r3, [pc, #72]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3f0:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e3f2:	4b11      	ldr	r3, [pc, #68]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e3f4:	8a1b      	ldrh	r3, [r3, #16]
 801e3f6:	461a      	mov	r2, r3
 801e3f8:	4b10      	ldr	r3, [pc, #64]	; (801e43c <TRACE_TxCpltCallback+0x110>)
 801e3fa:	4413      	add	r3, r2
 801e3fc:	61fb      	str	r3, [r7, #28]
 801e3fe:	69bb      	ldr	r3, [r7, #24]
 801e400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e402:	693b      	ldr	r3, [r7, #16]
 801e404:	f383 8810 	msr	PRIMASK, r3
}
 801e408:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e40a:	4b0d      	ldr	r3, [pc, #52]	; (801e440 <TRACE_TxCpltCallback+0x114>)
 801e40c:	68db      	ldr	r3, [r3, #12]
 801e40e:	4a0a      	ldr	r2, [pc, #40]	; (801e438 <TRACE_TxCpltCallback+0x10c>)
 801e410:	8a92      	ldrh	r2, [r2, #20]
 801e412:	4611      	mov	r1, r2
 801e414:	69f8      	ldr	r0, [r7, #28]
 801e416:	4798      	blx	r3
 801e418:	e00a      	b.n	801e430 <TRACE_TxCpltCallback+0x104>
 801e41a:	69bb      	ldr	r3, [r7, #24]
 801e41c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	f383 8810 	msr	PRIMASK, r3
}
 801e424:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e426:	f7e4 faad 	bl	8002984 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e42a:	f000 f8a7 	bl	801e57c <TRACE_UnLock>
  }
}
 801e42e:	bf00      	nop
 801e430:	bf00      	nop
 801e432:	3720      	adds	r7, #32
 801e434:	46bd      	mov	sp, r7
 801e436:	bd80      	pop	{r7, pc}
 801e438:	20001910 	.word	0x20001910
 801e43c:	20001928 	.word	0x20001928
 801e440:	0801f174 	.word	0x0801f174

0801e444 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e444:	b480      	push	{r7}
 801e446:	b087      	sub	sp, #28
 801e448:	af00      	add	r7, sp, #0
 801e44a:	4603      	mov	r3, r0
 801e44c:	6039      	str	r1, [r7, #0]
 801e44e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e454:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e456:	f3ef 8310 	mrs	r3, PRIMASK
 801e45a:	60fb      	str	r3, [r7, #12]
  return(result);
 801e45c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e45e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e460:	b672      	cpsid	i
}
 801e462:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e464:	4b35      	ldr	r3, [pc, #212]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e466:	8a5a      	ldrh	r2, [r3, #18]
 801e468:	4b34      	ldr	r3, [pc, #208]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e46a:	8a1b      	ldrh	r3, [r3, #16]
 801e46c:	429a      	cmp	r2, r3
 801e46e:	d11b      	bne.n	801e4a8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e470:	4b32      	ldr	r3, [pc, #200]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e472:	8a5b      	ldrh	r3, [r3, #18]
 801e474:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e478:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e47a:	88fa      	ldrh	r2, [r7, #6]
 801e47c:	8afb      	ldrh	r3, [r7, #22]
 801e47e:	429a      	cmp	r2, r3
 801e480:	d33a      	bcc.n	801e4f8 <TRACE_AllocateBufer+0xb4>
 801e482:	4b2e      	ldr	r3, [pc, #184]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e484:	8a1b      	ldrh	r3, [r3, #16]
 801e486:	88fa      	ldrh	r2, [r7, #6]
 801e488:	429a      	cmp	r2, r3
 801e48a:	d235      	bcs.n	801e4f8 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e48c:	4b2b      	ldr	r3, [pc, #172]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e48e:	2201      	movs	r2, #1
 801e490:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e492:	4b2a      	ldr	r3, [pc, #168]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e494:	8a5a      	ldrh	r2, [r3, #18]
 801e496:	4b29      	ldr	r3, [pc, #164]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e498:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e49a:	4b28      	ldr	r3, [pc, #160]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e49c:	8a1b      	ldrh	r3, [r3, #16]
 801e49e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e4a0:	4b26      	ldr	r3, [pc, #152]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4a2:	2200      	movs	r2, #0
 801e4a4:	825a      	strh	r2, [r3, #18]
 801e4a6:	e027      	b.n	801e4f8 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e4a8:	4b24      	ldr	r3, [pc, #144]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4aa:	8a5a      	ldrh	r2, [r3, #18]
 801e4ac:	4b23      	ldr	r3, [pc, #140]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4ae:	8a1b      	ldrh	r3, [r3, #16]
 801e4b0:	429a      	cmp	r2, r3
 801e4b2:	d91b      	bls.n	801e4ec <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e4b4:	4b21      	ldr	r3, [pc, #132]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4b6:	8a5b      	ldrh	r3, [r3, #18]
 801e4b8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e4bc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e4be:	88fa      	ldrh	r2, [r7, #6]
 801e4c0:	8afb      	ldrh	r3, [r7, #22]
 801e4c2:	429a      	cmp	r2, r3
 801e4c4:	d318      	bcc.n	801e4f8 <TRACE_AllocateBufer+0xb4>
 801e4c6:	4b1d      	ldr	r3, [pc, #116]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4c8:	8a1b      	ldrh	r3, [r3, #16]
 801e4ca:	88fa      	ldrh	r2, [r7, #6]
 801e4cc:	429a      	cmp	r2, r3
 801e4ce:	d213      	bcs.n	801e4f8 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e4d0:	4b1a      	ldr	r3, [pc, #104]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4d2:	2201      	movs	r2, #1
 801e4d4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e4d6:	4b19      	ldr	r3, [pc, #100]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4d8:	8a5a      	ldrh	r2, [r3, #18]
 801e4da:	4b18      	ldr	r3, [pc, #96]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4dc:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e4de:	4b17      	ldr	r3, [pc, #92]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4e0:	8a1b      	ldrh	r3, [r3, #16]
 801e4e2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e4e4:	4b15      	ldr	r3, [pc, #84]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4e6:	2200      	movs	r2, #0
 801e4e8:	825a      	strh	r2, [r3, #18]
 801e4ea:	e005      	b.n	801e4f8 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e4ec:	4b13      	ldr	r3, [pc, #76]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4ee:	8a1a      	ldrh	r2, [r3, #16]
 801e4f0:	4b12      	ldr	r3, [pc, #72]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e4f2:	8a5b      	ldrh	r3, [r3, #18]
 801e4f4:	1ad3      	subs	r3, r2, r3
 801e4f6:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e4f8:	8afa      	ldrh	r2, [r7, #22]
 801e4fa:	88fb      	ldrh	r3, [r7, #6]
 801e4fc:	429a      	cmp	r2, r3
 801e4fe:	d90f      	bls.n	801e520 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e500:	4b0e      	ldr	r3, [pc, #56]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e502:	8a5a      	ldrh	r2, [r3, #18]
 801e504:	683b      	ldr	r3, [r7, #0]
 801e506:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e508:	4b0c      	ldr	r3, [pc, #48]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e50a:	8a5a      	ldrh	r2, [r3, #18]
 801e50c:	88fb      	ldrh	r3, [r7, #6]
 801e50e:	4413      	add	r3, r2
 801e510:	b29b      	uxth	r3, r3
 801e512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e516:	b29a      	uxth	r2, r3
 801e518:	4b08      	ldr	r3, [pc, #32]	; (801e53c <TRACE_AllocateBufer+0xf8>)
 801e51a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e51c:	2300      	movs	r3, #0
 801e51e:	82bb      	strh	r3, [r7, #20]
 801e520:	693b      	ldr	r3, [r7, #16]
 801e522:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e524:	68bb      	ldr	r3, [r7, #8]
 801e526:	f383 8810 	msr	PRIMASK, r3
}
 801e52a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e52c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e530:	4618      	mov	r0, r3
 801e532:	371c      	adds	r7, #28
 801e534:	46bd      	mov	sp, r7
 801e536:	bc80      	pop	{r7}
 801e538:	4770      	bx	lr
 801e53a:	bf00      	nop
 801e53c:	20001910 	.word	0x20001910

0801e540 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e540:	b480      	push	{r7}
 801e542:	b085      	sub	sp, #20
 801e544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e546:	f3ef 8310 	mrs	r3, PRIMASK
 801e54a:	607b      	str	r3, [r7, #4]
  return(result);
 801e54c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e54e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e550:	b672      	cpsid	i
}
 801e552:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e554:	4b08      	ldr	r3, [pc, #32]	; (801e578 <TRACE_Lock+0x38>)
 801e556:	8adb      	ldrh	r3, [r3, #22]
 801e558:	3301      	adds	r3, #1
 801e55a:	b29a      	uxth	r2, r3
 801e55c:	4b06      	ldr	r3, [pc, #24]	; (801e578 <TRACE_Lock+0x38>)
 801e55e:	82da      	strh	r2, [r3, #22]
 801e560:	68fb      	ldr	r3, [r7, #12]
 801e562:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e564:	68bb      	ldr	r3, [r7, #8]
 801e566:	f383 8810 	msr	PRIMASK, r3
}
 801e56a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e56c:	bf00      	nop
 801e56e:	3714      	adds	r7, #20
 801e570:	46bd      	mov	sp, r7
 801e572:	bc80      	pop	{r7}
 801e574:	4770      	bx	lr
 801e576:	bf00      	nop
 801e578:	20001910 	.word	0x20001910

0801e57c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e57c:	b480      	push	{r7}
 801e57e:	b085      	sub	sp, #20
 801e580:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e582:	f3ef 8310 	mrs	r3, PRIMASK
 801e586:	607b      	str	r3, [r7, #4]
  return(result);
 801e588:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e58a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e58c:	b672      	cpsid	i
}
 801e58e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e590:	4b08      	ldr	r3, [pc, #32]	; (801e5b4 <TRACE_UnLock+0x38>)
 801e592:	8adb      	ldrh	r3, [r3, #22]
 801e594:	3b01      	subs	r3, #1
 801e596:	b29a      	uxth	r2, r3
 801e598:	4b06      	ldr	r3, [pc, #24]	; (801e5b4 <TRACE_UnLock+0x38>)
 801e59a:	82da      	strh	r2, [r3, #22]
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e5a0:	68bb      	ldr	r3, [r7, #8]
 801e5a2:	f383 8810 	msr	PRIMASK, r3
}
 801e5a6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e5a8:	bf00      	nop
 801e5aa:	3714      	adds	r7, #20
 801e5ac:	46bd      	mov	sp, r7
 801e5ae:	bc80      	pop	{r7}
 801e5b0:	4770      	bx	lr
 801e5b2:	bf00      	nop
 801e5b4:	20001910 	.word	0x20001910

0801e5b8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801e5b8:	b480      	push	{r7}
 801e5ba:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801e5bc:	4b05      	ldr	r3, [pc, #20]	; (801e5d4 <TRACE_IsLocked+0x1c>)
 801e5be:	8adb      	ldrh	r3, [r3, #22]
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	bf14      	ite	ne
 801e5c4:	2301      	movne	r3, #1
 801e5c6:	2300      	moveq	r3, #0
 801e5c8:	b2db      	uxtb	r3, r3
}
 801e5ca:	4618      	mov	r0, r3
 801e5cc:	46bd      	mov	sp, r7
 801e5ce:	bc80      	pop	{r7}
 801e5d0:	4770      	bx	lr
 801e5d2:	bf00      	nop
 801e5d4:	20001910 	.word	0x20001910

0801e5d8 <memset>:
 801e5d8:	4402      	add	r2, r0
 801e5da:	4603      	mov	r3, r0
 801e5dc:	4293      	cmp	r3, r2
 801e5de:	d100      	bne.n	801e5e2 <memset+0xa>
 801e5e0:	4770      	bx	lr
 801e5e2:	f803 1b01 	strb.w	r1, [r3], #1
 801e5e6:	e7f9      	b.n	801e5dc <memset+0x4>

0801e5e8 <__libc_init_array>:
 801e5e8:	b570      	push	{r4, r5, r6, lr}
 801e5ea:	4d0d      	ldr	r5, [pc, #52]	; (801e620 <__libc_init_array+0x38>)
 801e5ec:	4c0d      	ldr	r4, [pc, #52]	; (801e624 <__libc_init_array+0x3c>)
 801e5ee:	1b64      	subs	r4, r4, r5
 801e5f0:	10a4      	asrs	r4, r4, #2
 801e5f2:	2600      	movs	r6, #0
 801e5f4:	42a6      	cmp	r6, r4
 801e5f6:	d109      	bne.n	801e60c <__libc_init_array+0x24>
 801e5f8:	4d0b      	ldr	r5, [pc, #44]	; (801e628 <__libc_init_array+0x40>)
 801e5fa:	4c0c      	ldr	r4, [pc, #48]	; (801e62c <__libc_init_array+0x44>)
 801e5fc:	f000 f900 	bl	801e800 <_init>
 801e600:	1b64      	subs	r4, r4, r5
 801e602:	10a4      	asrs	r4, r4, #2
 801e604:	2600      	movs	r6, #0
 801e606:	42a6      	cmp	r6, r4
 801e608:	d105      	bne.n	801e616 <__libc_init_array+0x2e>
 801e60a:	bd70      	pop	{r4, r5, r6, pc}
 801e60c:	f855 3b04 	ldr.w	r3, [r5], #4
 801e610:	4798      	blx	r3
 801e612:	3601      	adds	r6, #1
 801e614:	e7ee      	b.n	801e5f4 <__libc_init_array+0xc>
 801e616:	f855 3b04 	ldr.w	r3, [r5], #4
 801e61a:	4798      	blx	r3
 801e61c:	3601      	adds	r6, #1
 801e61e:	e7f2      	b.n	801e606 <__libc_init_array+0x1e>
 801e620:	0801f7a8 	.word	0x0801f7a8
 801e624:	0801f7a8 	.word	0x0801f7a8
 801e628:	0801f7a8 	.word	0x0801f7a8
 801e62c:	0801f7b0 	.word	0x0801f7b0

0801e630 <__retarget_lock_acquire_recursive>:
 801e630:	4770      	bx	lr

0801e632 <__retarget_lock_release_recursive>:
 801e632:	4770      	bx	lr

0801e634 <register_fini>:
 801e634:	4b02      	ldr	r3, [pc, #8]	; (801e640 <register_fini+0xc>)
 801e636:	b113      	cbz	r3, 801e63e <register_fini+0xa>
 801e638:	4802      	ldr	r0, [pc, #8]	; (801e644 <register_fini+0x10>)
 801e63a:	f000 b805 	b.w	801e648 <atexit>
 801e63e:	4770      	bx	lr
 801e640:	00000000 	.word	0x00000000
 801e644:	0801e655 	.word	0x0801e655

0801e648 <atexit>:
 801e648:	2300      	movs	r3, #0
 801e64a:	4601      	mov	r1, r0
 801e64c:	461a      	mov	r2, r3
 801e64e:	4618      	mov	r0, r3
 801e650:	f000 b814 	b.w	801e67c <__register_exitproc>

0801e654 <__libc_fini_array>:
 801e654:	b538      	push	{r3, r4, r5, lr}
 801e656:	4d07      	ldr	r5, [pc, #28]	; (801e674 <__libc_fini_array+0x20>)
 801e658:	4c07      	ldr	r4, [pc, #28]	; (801e678 <__libc_fini_array+0x24>)
 801e65a:	1b64      	subs	r4, r4, r5
 801e65c:	10a4      	asrs	r4, r4, #2
 801e65e:	b91c      	cbnz	r4, 801e668 <__libc_fini_array+0x14>
 801e660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e664:	f000 b8d2 	b.w	801e80c <_fini>
 801e668:	3c01      	subs	r4, #1
 801e66a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801e66e:	4798      	blx	r3
 801e670:	e7f5      	b.n	801e65e <__libc_fini_array+0xa>
 801e672:	bf00      	nop
 801e674:	0801f7b0 	.word	0x0801f7b0
 801e678:	0801f7b4 	.word	0x0801f7b4

0801e67c <__register_exitproc>:
 801e67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e680:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801e6f0 <__register_exitproc+0x74>
 801e684:	4606      	mov	r6, r0
 801e686:	f8da 0000 	ldr.w	r0, [sl]
 801e68a:	4698      	mov	r8, r3
 801e68c:	460f      	mov	r7, r1
 801e68e:	4691      	mov	r9, r2
 801e690:	f7ff ffce 	bl	801e630 <__retarget_lock_acquire_recursive>
 801e694:	4b17      	ldr	r3, [pc, #92]	; (801e6f4 <__register_exitproc+0x78>)
 801e696:	681c      	ldr	r4, [r3, #0]
 801e698:	b90c      	cbnz	r4, 801e69e <__register_exitproc+0x22>
 801e69a:	4c17      	ldr	r4, [pc, #92]	; (801e6f8 <__register_exitproc+0x7c>)
 801e69c:	601c      	str	r4, [r3, #0]
 801e69e:	6865      	ldr	r5, [r4, #4]
 801e6a0:	f8da 0000 	ldr.w	r0, [sl]
 801e6a4:	2d1f      	cmp	r5, #31
 801e6a6:	dd05      	ble.n	801e6b4 <__register_exitproc+0x38>
 801e6a8:	f7ff ffc3 	bl	801e632 <__retarget_lock_release_recursive>
 801e6ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6b4:	b19e      	cbz	r6, 801e6de <__register_exitproc+0x62>
 801e6b6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801e6ba:	2201      	movs	r2, #1
 801e6bc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801e6c0:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801e6c4:	40aa      	lsls	r2, r5
 801e6c6:	4313      	orrs	r3, r2
 801e6c8:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801e6cc:	2e02      	cmp	r6, #2
 801e6ce:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801e6d2:	bf02      	ittt	eq
 801e6d4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801e6d8:	4313      	orreq	r3, r2
 801e6da:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801e6de:	1c6b      	adds	r3, r5, #1
 801e6e0:	3502      	adds	r5, #2
 801e6e2:	6063      	str	r3, [r4, #4]
 801e6e4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801e6e8:	f7ff ffa3 	bl	801e632 <__retarget_lock_release_recursive>
 801e6ec:	2000      	movs	r0, #0
 801e6ee:	e7df      	b.n	801e6b0 <__register_exitproc+0x34>
 801e6f0:	20000160 	.word	0x20000160
 801e6f4:	20001f2c 	.word	0x20001f2c
 801e6f8:	20001f30 	.word	0x20001f30
 801e6fc:	00000000 	.word	0x00000000

0801e700 <floor>:
 801e700:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e708:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801e70c:	2e13      	cmp	r6, #19
 801e70e:	460b      	mov	r3, r1
 801e710:	4607      	mov	r7, r0
 801e712:	460c      	mov	r4, r1
 801e714:	4605      	mov	r5, r0
 801e716:	dc32      	bgt.n	801e77e <floor+0x7e>
 801e718:	2e00      	cmp	r6, #0
 801e71a:	da14      	bge.n	801e746 <floor+0x46>
 801e71c:	a334      	add	r3, pc, #208	; (adr r3, 801e7f0 <floor+0xf0>)
 801e71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e722:	f7e1 fd37 	bl	8000194 <__adddf3>
 801e726:	2200      	movs	r2, #0
 801e728:	2300      	movs	r3, #0
 801e72a:	f7e2 f979 	bl	8000a20 <__aeabi_dcmpgt>
 801e72e:	b138      	cbz	r0, 801e740 <floor+0x40>
 801e730:	2c00      	cmp	r4, #0
 801e732:	da56      	bge.n	801e7e2 <floor+0xe2>
 801e734:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801e738:	4325      	orrs	r5, r4
 801e73a:	d055      	beq.n	801e7e8 <floor+0xe8>
 801e73c:	4c2e      	ldr	r4, [pc, #184]	; (801e7f8 <floor+0xf8>)
 801e73e:	2500      	movs	r5, #0
 801e740:	4623      	mov	r3, r4
 801e742:	462f      	mov	r7, r5
 801e744:	e025      	b.n	801e792 <floor+0x92>
 801e746:	4a2d      	ldr	r2, [pc, #180]	; (801e7fc <floor+0xfc>)
 801e748:	fa42 f806 	asr.w	r8, r2, r6
 801e74c:	ea01 0208 	and.w	r2, r1, r8
 801e750:	4302      	orrs	r2, r0
 801e752:	d01e      	beq.n	801e792 <floor+0x92>
 801e754:	a326      	add	r3, pc, #152	; (adr r3, 801e7f0 <floor+0xf0>)
 801e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e75a:	f7e1 fd1b 	bl	8000194 <__adddf3>
 801e75e:	2200      	movs	r2, #0
 801e760:	2300      	movs	r3, #0
 801e762:	f7e2 f95d 	bl	8000a20 <__aeabi_dcmpgt>
 801e766:	2800      	cmp	r0, #0
 801e768:	d0ea      	beq.n	801e740 <floor+0x40>
 801e76a:	2c00      	cmp	r4, #0
 801e76c:	bfbe      	ittt	lt
 801e76e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e772:	4133      	asrlt	r3, r6
 801e774:	18e4      	addlt	r4, r4, r3
 801e776:	ea24 0408 	bic.w	r4, r4, r8
 801e77a:	2500      	movs	r5, #0
 801e77c:	e7e0      	b.n	801e740 <floor+0x40>
 801e77e:	2e33      	cmp	r6, #51	; 0x33
 801e780:	dd0b      	ble.n	801e79a <floor+0x9a>
 801e782:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e786:	d104      	bne.n	801e792 <floor+0x92>
 801e788:	4602      	mov	r2, r0
 801e78a:	f7e1 fd03 	bl	8000194 <__adddf3>
 801e78e:	4607      	mov	r7, r0
 801e790:	460b      	mov	r3, r1
 801e792:	4638      	mov	r0, r7
 801e794:	4619      	mov	r1, r3
 801e796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e79a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801e79e:	f04f 38ff 	mov.w	r8, #4294967295
 801e7a2:	fa28 f802 	lsr.w	r8, r8, r2
 801e7a6:	ea10 0f08 	tst.w	r0, r8
 801e7aa:	d0f2      	beq.n	801e792 <floor+0x92>
 801e7ac:	a310      	add	r3, pc, #64	; (adr r3, 801e7f0 <floor+0xf0>)
 801e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7b2:	f7e1 fcef 	bl	8000194 <__adddf3>
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	2300      	movs	r3, #0
 801e7ba:	f7e2 f931 	bl	8000a20 <__aeabi_dcmpgt>
 801e7be:	2800      	cmp	r0, #0
 801e7c0:	d0be      	beq.n	801e740 <floor+0x40>
 801e7c2:	2c00      	cmp	r4, #0
 801e7c4:	da0a      	bge.n	801e7dc <floor+0xdc>
 801e7c6:	2e14      	cmp	r6, #20
 801e7c8:	d101      	bne.n	801e7ce <floor+0xce>
 801e7ca:	3401      	adds	r4, #1
 801e7cc:	e006      	b.n	801e7dc <floor+0xdc>
 801e7ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e7d2:	2301      	movs	r3, #1
 801e7d4:	40b3      	lsls	r3, r6
 801e7d6:	441d      	add	r5, r3
 801e7d8:	42af      	cmp	r7, r5
 801e7da:	d8f6      	bhi.n	801e7ca <floor+0xca>
 801e7dc:	ea25 0508 	bic.w	r5, r5, r8
 801e7e0:	e7ae      	b.n	801e740 <floor+0x40>
 801e7e2:	2500      	movs	r5, #0
 801e7e4:	462c      	mov	r4, r5
 801e7e6:	e7ab      	b.n	801e740 <floor+0x40>
 801e7e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801e7ec:	e7a8      	b.n	801e740 <floor+0x40>
 801e7ee:	bf00      	nop
 801e7f0:	8800759c 	.word	0x8800759c
 801e7f4:	7e37e43c 	.word	0x7e37e43c
 801e7f8:	bff00000 	.word	0xbff00000
 801e7fc:	000fffff 	.word	0x000fffff

0801e800 <_init>:
 801e800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e802:	bf00      	nop
 801e804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e806:	bc08      	pop	{r3}
 801e808:	469e      	mov	lr, r3
 801e80a:	4770      	bx	lr

0801e80c <_fini>:
 801e80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e80e:	bf00      	nop
 801e810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e812:	bc08      	pop	{r3}
 801e814:	469e      	mov	lr, r3
 801e816:	4770      	bx	lr
